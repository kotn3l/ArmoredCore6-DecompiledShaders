#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_24;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1033;
float _3420;
float _3421;
float _3422;
float _3423;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _234.z;
    float _247 = exp2(log2(_239 * cbMtdParam._m0[13u].x) * cbMtdParam._m0[12u].y);
    float _248 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _249 = isnan(1.0) ? _248 : (isnan(_248) ? 1.0 : min(_248, 1.0));
    float _269 = ((cbMtdParam._m0[10u].x - cbMtdParam._m0[9u].x) * _249) + cbMtdParam._m0[9u].x;
    float _270 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[9u].y) * _249) + cbMtdParam._m0[9u].y;
    float _271 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[9u].z) * _249) + cbMtdParam._m0[9u].z;
    float _289 = exp2(log2(texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x) * cbMtdParam._m0[13u].y);
    vec4 _311 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _318 = (((_289 * (cbMtdParam._m0[11u].x - _269)) + _269) * 4.55000019073486328125) * _311.x;
    float _320 = (((_289 * (cbMtdParam._m0[11u].y - _270)) + _270) * 4.55000019073486328125) * _311.y;
    float _322 = (((_289 * (cbMtdParam._m0[11u].z - _271)) + _271) * 4.55000019073486328125) * _311.z;
    float _331 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].z) * _249) + cbMtdParam._m0[12u].z;
    float _334 = ((cbMtdParam._m0[12u].w - _331) * _289) + _331;
    vec4 _347 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _365 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _367 = _365.x;
    float _368 = _365.y;
    float _371 = cbMtdParam._m0[12u].x + _365.z;
    float _374 = (((cbMtdParam._m0[14u].x + _347.z) - _371) * _249) + _371;
    vec4 _387 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _396 = (((_387.z - _374) + cbMtdParam._m0[14u].z) * _289) + _374;
    float _402 = ((((_239 * 2.0) * _396) - _396) * cbMtdParam._m0[13u].z) + _396;
    float _413 = ((_347.x - _367) * _249) + _367;
    float _414 = ((_347.y - _368) * _249) + _368;
    float _423 = ((((_387.x - _413) * _289) + _413) * 2.0) + (-1.0);
    float _424 = ((((_387.y - _414) * _289) + _414) * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3442 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))));
    float _433 = _423 + (cbMtdParam._m0[13u].w * ((_234.x * 2.0) + (-1.0)));
    float _434 = _424 + (cbMtdParam._m0[13u].w * ((_234.y * 2.0) + (-1.0)));
    float _437 = fma(_430, _200 * NORMAL.x, fma(_434, _207 * TANGENT.x, (_193 * _186) * _433));
    float _440 = fma(_430, _200 * NORMAL.y, fma(_434, _207 * TANGENT.y, (_193 * _187) * _433));
    float _443 = fma(_430, _200 * NORMAL.z, fma(_434, _207 * TANGENT.z, (_193 * _188) * _433));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3453 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _451 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3475 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3486 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3497 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _455 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    vec4 _536 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _538 = _536.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _712 = sqrt(((_522 * _522) + (_523 * _523)) + (_524 * _524));
        float _718 = (cbMatDynParam._m0[5u].x * _712) + cbMatDynParam._m0[5u].y;
        float _3508 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _723 = (cbMatDynParam._m0[5u].z * _712) + cbMatDynParam._m0[5u].w;
        float _3519 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) - _719)) + _719) < ((_538 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _573 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _576 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _590 = _589 + 9u;
    uint _591 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3530 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _603 = 1.0 - _455;
    float _604 = _600 * _603;
    float _605 = _601 * _603;
    float _606 = _602 * _603;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _455;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _455;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _455;
    float _614 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _629 = _626.x * TEXCOORD.z;
    float _630 = dot(vec3(_448, _449, _450), vec3(_529, _530, _531));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _448) - _529;
    float _638 = (_633 * _449) - _530;
    float _639 = (_633 * _450) - _531;
    float _643 = abs(dot(vec3(_529, _530, _531), vec3(_448, _449, _450)));
    float _3563 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_451);
    float _658 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _664 = (1.0 - _658) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _665 = _658 * _645;
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _757 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _761 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _765 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _790 = _693 + _448;
        float _791 = _697 + _449;
        float _792 = _701 + _450;
        float _802 = fma(_792, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790)) - _757;
        float _803 = fma(_792, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790)) - _761;
        float _804 = fma(_792, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790)) - _765;
        float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
        float _821 = ((_808 * _802) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_757 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_808 * _803) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_761 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_808 * _804) / cbModelParam._m0[34u].z) + ((((((_765 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(_448, _449, _450), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3611 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_448, _449, _450), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3644 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_448, _449, _450), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3677 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1034 = _862;
        _1035 = _861;
        _1036 = _873;
        _1037 = _872;
        _1038 = _871;
        _1039 = _883;
        _1040 = _882;
        _1041 = _881;
        _1042 = _896;
        _1043 = _895;
        _1044 = _894;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _1033;
        _1034 = _1033;
        _1035 = _1033;
        _1036 = _1033;
        _1037 = _1033;
        _1038 = _1033;
        _1039 = _1033;
        _1040 = _1033;
        _1041 = _1033;
        _1042 = _1033;
        _1043 = _1033;
        _1044 = _1033;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1080 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1084 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1107 = _693 + _448;
        float _1108 = _697 + _449;
        float _1109 = _701 + _450;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_448, _449, _450), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3740 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_448, _449, _450), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3773 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_448, _449, _450), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3806 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1033;
        _1346 = _1033;
        _1347 = _1033;
        _1348 = _1033;
        _1349 = _1033;
        _1350 = _1033;
        _1351 = _1033;
        _1352 = _1033;
        _1353 = _1033;
        _1354 = _1033;
        _1355 = _1033;
        _1356 = _1033;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _637 * 0.5;
    float _1414 = _638 * 0.5;
    float _1415 = _639 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1032, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1543 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1546 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1574 = frontier_phi_17_15_ladder;
        }
        float _1780;
        if (_1543 > 0.0)
        {
            _1780 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1780 = frontier_phi_26_22_ladder;
        }
        float _2034;
        if (_1546 > 0.0)
        {
            _2034 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2034 = frontier_phi_38_33_ladder;
        }
        float _2036 = isnan(_1780) ? _1574 : (isnan(_1574) ? _1780 : min(_1574, _1780));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1540) + _1529;
        float _2042 = (_2037 * _1543) + _1533;
        float _2043 = (_2037 * _1546) + _1537;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2171 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_16_38_ladder = _2171.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2171.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2171.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_16_38_ladder_2;
        _1564 = frontier_phi_16_38_ladder_1;
        _1566 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1482);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1642 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1645 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1785;
        if (_1639 > 0.0)
        {
            _1785 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1785 = frontier_phi_28_24_ladder;
        }
        float _2061;
        if (_1642 > 0.0)
        {
            _2061 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2061 = frontier_phi_40_35_ladder;
        }
        float _2274;
        if (_1645 > 0.0)
        {
            _2274 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2274 = frontier_phi_49_46_ladder;
        }
        float _2276 = isnan(_2061) ? _1785 : (isnan(_1785) ? _2061 : min(_1785, _2061));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1639) + _1628;
        float _2282 = (_2277 * _1642) + _1632;
        float _2283 = (_2277 * _1645) + _1636;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2283, cbModelParam._m0[17u].z, fma(_2282, cbModelParam._m0[17u].y, _2281 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2283, cbModelParam._m0[18u].z, fma(_2282, cbModelParam._m0[18u].y, _2281 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2283, cbModelParam._m0[19u].z, fma(_2282, cbModelParam._m0[19u].y, _2281 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_25_49_ladder = _2482.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2482.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2482.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_25_49_ladder_2;
        _1666 = frontier_phi_25_49_ladder_1;
        _1668 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1571);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_664 * _614) + _665) * _629) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1683 = (((_664 * _616) + _665) * _629) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_664 * _617) + _665) * _629) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    uvec4 _1704 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1706 = _1704.x * 14u;
    uint _1707 = _1706 + 13u;
    float _1714 = _629 + (-1.0);
    float _1719 = (cbLight._m0[_1707].x * _1714) + 1.0;
    float _1720 = (cbLight._m0[_1707].y * _1714) + 1.0;
    float _1721 = (cbLight._m0[_1707].z * _1714) + 1.0;
    float _1722 = (cbLight._m0[_1707].w * _1714) + 1.0;
    uint _1723 = _1706 + 5u;
    float _1729 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1733 = _1706 + 4u;
    float _1739 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1743 = _1706 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_448, _449, _450));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_448, _449, _450));
    float _3942 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _3953 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1723].x * _1729) * _1764) + ((cbLight._m0[_1733].x * _1739) * _1762);
    float _1772 = ((_1729 * cbLight._m0[_1723].y) * _1764) + ((_1739 * cbLight._m0[_1733].y) * _1762);
    float _1773 = ((_1729 * cbLight._m0[_1723].z) * _1764) + ((_1739 * cbLight._m0[_1733].z) * _1762);
    uvec4 _1777 = floatBitsToUint(cbLight._m0[_1706 + 12u]);
    bool _1779 = _1777.x == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1779)
    {
        _1790 = _1771;
        _1792 = _1772;
        _1794 = _1773;
    }
    else
    {
        uint _1798 = _1706 + 6u;
        float _1814 = (dot(vec3(cbLight._m0[_1706 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _3964 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1817 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1790 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1771;
        _1792 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1772;
        _1794 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1773;
    }
    bool _1797 = _1777.y == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1797)
    {
        _1835 = _1790;
        _1837 = _1792;
        _1839 = _1794;
    }
    else
    {
        uint _2005 = _1706 + 7u;
        float _2021 = (dot(vec3(cbLight._m0[_1706 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _3980 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2024 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1835 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1790;
        _1837 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1792;
        _1839 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1794;
    }
    uint _1842 = _1706 + 8u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1706].w)) * _451) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1706].x + _529;
    float _1858 = cbLight._m0[_1706].y + _530;
    float _1859 = cbLight._m0[_1706].z + _531;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1706].xyz));
    float _3996 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _1871 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1872 = dot(vec3(_448, _449, _450), vec3(_1864, _1865, _1866));
    float _4018 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_1864, _1865, _1866));
    float _4029 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1856 * _1856;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
    float _1893 = 0.959999978542327880859375 - _611;
    float _1895 = 0.959999978542327880859375 - _612;
    float _1896 = 0.959999978542327880859375 - _613;
    float _1903 = 1.0 - _1856;
    float _1914 = (0.5 / (((_1871 * ((_1870 * _1903) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1903) + _1856) * _1870))) * _1870;
    float _4040 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1916 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    uint _1927 = _1706 + 9u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _451) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1743].x + _529;
    float _1941 = cbLight._m0[_1743].y + _530;
    float _1942 = cbLight._m0[_1743].z + _531;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1743].xyz));
    float _4051 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1954 = dot(vec3(_448, _449, _450), vec3(_1947, _1948, _1949));
    float _4062 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1947, _1948, _1949));
    float _4073 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1939 * _1939;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
    float _1980 = 1.0 - _1939;
    float _1990 = (0.5 / (((_1871 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1980) + _1939) * _1953))) * _1953;
    float _4084 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    float _2002 = (((((_1973 * _1893) + _614) * cbLight._m0[_1927].x) * _1992) * _1729) + (((((_1892 * _1893) + _614) * cbLight._m0[_1842].x) * _1916) * _1739);
    float _2003 = (((((_1973 * _1895) + _616) * cbLight._m0[_1927].y) * _1992) * _1729) + (((((_1892 * _1895) + _616) * cbLight._m0[_1842].y) * _1916) * _1739);
    float _2004 = (((((_1973 * _1896) + _617) * cbLight._m0[_1927].z) * _1992) * _1729) + (((((_1892 * _1896) + _617) * cbLight._m0[_1842].z) * _1916) * _1739);
    float _2066;
    float _2068;
    float _2070;
    if (_1779)
    {
        _2066 = _2002;
        _2068 = _2003;
        _2070 = _2004;
    }
    else
    {
        uint _2072 = _1706 + 2u;
        uint _2076 = _1706 + 10u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _451) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _529;
        float _2093 = cbLight._m0[_2072].y + _530;
        float _2094 = cbLight._m0[_2072].z + _531;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2072].xyz));
        float _4095 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2106 = dot(vec3(_448, _449, _450), vec3(_2099, _2100, _2101));
        float _4106 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4117 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1871 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2132) + _2091) * _2105))) * _2105;
        float _4128 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2066 = (((((_2125 * _1893) + _614) * cbLight._m0[_2076].x) * _2144) * _2145) + _2002;
        _2068 = (((((_2125 * _1895) + _616) * cbLight._m0[_2076].y) * _2144) * _2145) + _2003;
        _2070 = (((((_2125 * _1896) + _617) * cbLight._m0[_2076].z) * _2144) * _2145) + _2004;
    }
    float _2180;
    float _2182;
    float _2184;
    if (_1797)
    {
        _2180 = _2066;
        _2182 = _2068;
        _2184 = _2070;
    }
    else
    {
        uint _2191 = _1706 + 3u;
        uint _2195 = _1706 + 11u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _451) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _529;
        float _2212 = cbLight._m0[_2191].y + _530;
        float _2213 = cbLight._m0[_2191].z + _531;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2191].xyz));
        float _4144 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2225 = dot(vec3(_448, _449, _450), vec3(_2218, _2219, _2220));
        float _4155 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4166 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2251 = 1.0 - _2210;
        float _2261 = (0.5 / (((_1871 * ((_2224 * _2251) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2251) + _2210) * _2224))) * _2224;
        float _4177 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2180 = (((((_2244 * _1893) + _614) * cbLight._m0[_2195].x) * _2263) * _2264) + _2066;
        _2182 = (((((_2244 * _1895) + _616) * cbLight._m0[_2195].y) * _2263) * _2264) + _2068;
        _2184 = (((((_2244 * _1896) + _617) * cbLight._m0[_2195].z) * _2263) * _2264) + _2070;
    }
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_1704.y == 0u)
    {
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2339;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2339;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2339;
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2355)));
        float _2376 = (log2(_2342 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
        }
        else
        {
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            uint _2646 = 0u;
            uint _2655;
            bool _2656;
            for (;;)
            {
                _2655 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2646 << 2u)) >> 2u)).x;
                _2656 = _2655 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2656)
                {
                    frontier_phi_66_pred = _2640;
                    frontier_phi_66_pred_1 = _2645;
                    frontier_phi_66_pred_2 = _2644;
                    frontier_phi_66_pred_3 = _2643;
                    frontier_phi_66_pred_4 = _2642;
                    frontier_phi_66_pred_5 = _2641;
                }
                else
                {
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    uint _2791;
                    _2785 = _2640;
                    _2786 = _2641;
                    _2787 = _2642;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2655;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    for (;;)
                    {
                        uint _2795 = uint(findLSB(_2791)) + (_2646 << 5u);
                        uint _2792 = (_2791 + 4294967295u) & _2791;
                        uint _2797 = _2795 * 48u;
                        vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2797)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 3u)).x));
                        uint _2817 = (_2795 * 48u) + 4u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2836 = (_2795 * 48u) + 8u;
                        vec3 _2847 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x));
                        float _2851 = _2811.x - _2340;
                        float _2852 = _2811.y - _2341;
                        float _2853 = _2811.z - _2342;
                        float _2854 = dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853));
                        float _2857 = inversesqrt(_2854);
                        float _2858 = _2857 * _2851;
                        float _2859 = _2857 * _2852;
                        float _2860 = _2857 * _2853;
                        float _2861 = dot(vec3(_570, _573, _576), vec3(_2858, _2859, _2860));
                        float _2866 = 1.0 - (_2854 * _2811.w);
                        float _4203 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2867 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2868 = sqrt(_2854) * _2830.w;
                        float _2871 = 1.39999997615814208984375 / (_2868 + 1.39999997615814208984375);
                        float _2872 = _2871 * _2871;
                        float _2875 = ((1.0 - _2872) * _2861) + _2872;
                        float _2878 = _2868 * _2868;
                        float _2882 = ((isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))) * _2867) / ((_2878 * 0.699999988079071044921875) + 1.0);
                        float _2886 = (-0.0) - _2340;
                        float _2887 = (-0.0) - _2341;
                        float _2888 = (-0.0) - _2342;
                        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
                        float _2893 = _2892 * _2886;
                        float _2894 = _2892 * _2887;
                        float _2895 = _2892 * _2888;
                        float _2903 = exp2(log2(1.0 / ((_2878 * 3.5) + 5.0)) * 0.25);
                        float _2904 = 1.0 - _645;
                        float _2911 = sqrt(1.0 - ((1.0 - (_2904 * _2904)) * (1.0 - (_2903 * _2903))));
                        float _2912 = _2911 * _2911;
                        float _2913 = _2912 * _2912;
                        float _2914 = _2893 + _2858;
                        float _2915 = _2894 + _2859;
                        float _2916 = _2895 + _2860;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2924 = dot(vec3(_570, _573, _576), vec3(_2893, _2894, _2895));
                        float _4219 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2927 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2928 = dot(vec3(_570, _573, _576), vec3(_2920 * _2914, _2920 * _2915, _2920 * _2916));
                        float _4230 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2935 = ((_2931 * _2931) * (_2913 + (-1.0))) + 1.0;
                        float _2936 = _2871 * _2912;
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2861) + _2937;
                        float _4241 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2941 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2942 = 1.0 - _2912;
                        float _2952 = (0.5 / (((_2941 * ((_2927 * _2942) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2941 * _2942) + _2912) * _2927))) * _2941;
                        float _4252 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2963 = (((_2913 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_2935 * _2935) * ((_2878 * 2.1991131305694580078125) + 3.141590118408203125))) * _2867;
                        _2715 = (_2882 * _2830.x) + _2788;
                        _2716 = (_2882 * _2830.y) + _2789;
                        _2717 = (_2882 * _2830.z) + _2790;
                        _2712 = (_2963 * _2847.x) + _2785;
                        _2713 = (_2963 * _2847.y) + _2786;
                        _2714 = (_2963 * _2847.z) + _2787;
                        if (_2792 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2785 = _2712;
                            _2786 = _2713;
                            _2787 = _2714;
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2792;
                        }
                    }
                    frontier_phi_66_pred = _2712;
                    frontier_phi_66_pred_1 = _2717;
                    frontier_phi_66_pred_2 = _2716;
                    frontier_phi_66_pred_3 = _2715;
                    frontier_phi_66_pred_4 = _2714;
                    frontier_phi_66_pred_5 = _2713;
                }
                _2488 = frontier_phi_66_pred;
                _2498 = frontier_phi_66_pred_1;
                _2496 = frontier_phi_66_pred_2;
                _2494 = frontier_phi_66_pred_3;
                _2492 = frontier_phi_66_pred_4;
                _2490 = frontier_phi_66_pred_5;
                uint _2647 = _2646 + 1u;
                if (_2647 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2640 = _2488;
                    _2641 = _2490;
                    _2642 = _2492;
                    _2643 = _2494;
                    _2644 = _2496;
                    _2645 = _2498;
                    _2646 = _2647;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
        }
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.z;
        uint _2504 = (_2502 >> 8u) & 15u;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        if (((4294967295u << _2504) & _2386) == 0u)
        {
            _2608 = _2487;
            _2610 = _2489;
            _2612 = _2491;
            _2614 = _2493;
            _2616 = _2495;
            _2618 = _2497;
        }
        else
        {
            float _2633 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
            float _2634 = _2633 * _2340;
            float _2635 = _2633 * _2341;
            float _2636 = _2633 * _2342;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2504 < ((_2502 >> 12u) & 15u))
            {
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2768 = _2487;
                float _2769 = _2489;
                float _2770 = _2491;
                float _2771 = _2493;
                float _2772 = _2495;
                float _2773 = _2497;
                uint _2774 = _2504;
                uint _2783;
                bool _2784;
                for (;;)
                {
                    _2783 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                    _2784 = _2783 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2784)
                    {
                        frontier_phi_77_pred = _2773;
                        frontier_phi_77_pred_1 = _2772;
                        frontier_phi_77_pred_2 = _2771;
                        frontier_phi_77_pred_3 = _2770;
                        frontier_phi_77_pred_4 = _2769;
                        frontier_phi_77_pred_5 = _2768;
                    }
                    else
                    {
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _2990 = _2768;
                        float _2991 = _2769;
                        float _2992 = _2770;
                        float _2993 = _2771;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        uint _2996 = _2783;
                        uint _2997;
                        vec4 _3022;
                        float _3023;
                        vec4 _3038;
                        vec3 _3050;
                        vec4 _3066;
                        vec4 _3082;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _3007 = ((_2774 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2996));
                            _2997 = (_2996 + 4294967295u) & _2996;
                            uint _3009 = _3007 * 40u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3023 = _3022.w;
                            uint _3025 = (_3007 * 40u) + 4u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3040 = (_3007 * 40u) + 8u;
                            _3050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x));
                            uint _3053 = (_3007 * 40u) + 16u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_3007 * 40u) + 20u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3085 = (_3007 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_3007 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_2342, _3117.z, fma(_2341, _3117.y, _3117.x * _2340)) + _3117.w;
                            _3130 = !((fma(_2342, _3098.z, fma(_2341, _3098.y, _3098.x * _2340)) + _3098.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3130)
                            {
                                float _3157 = _3022.x - _2340;
                                float _3158 = _3022.y - _2341;
                                float _3159 = _3022.z - _2342;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3023 * _3023));
                                float _4263 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3175 = sqrt(_3160) * _3038.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3181 = ((1.0 - _3178) * dot(vec3(_3164, _3165, _3166), vec3(_570, _573, _576))) + _3178;
                                float _3184 = _3175 * _3175;
                                float _3188 = (fma(_2342, _3066.z, fma(_2341, _3066.y, _3066.x * _2340)) + _3066.w) / _3129;
                                float _3189 = (fma(_2342, _3082.z, fma(_2341, _3082.y, _3082.x * _2340)) + _3082.w) / _3129;
                                float _3193 = 1.0 - dot(vec2(_3188, _3189), vec2(_3188, _3189));
                                float _4279 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3195 = _3194 * (((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3171) / ((_3184 * 0.699999988079071044921875) + 1.0));
                                float _3207 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                                float _3208 = 1.0 - _645;
                                float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                                float _3216 = _3215 * _3215;
                                float _3217 = _3216 * _3216;
                                float _3218 = _3164 - _2634;
                                float _3219 = _3165 - _2635;
                                float _3220 = _3166 - _2636;
                                float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                                float _3228 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2634, (-0.0) - _2635, (-0.0) - _2636));
                                float _4290 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3232 = dot(vec3(_570, _573, _576), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                                float _4301 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                                float _3240 = _3177 * _3216;
                                float _3241 = _3240 * _3240;
                                float _3247 = ((1.0 - _3241) * dot(vec3(_570, _573, _576), vec3(_3164, _3165, _3166))) + _3241;
                                float _4312 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3249 = 1.0 - _3216;
                                float _3259 = (0.5 / (((_3248 * ((_3231 * _3249) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3216) * _3231))) * _3248;
                                float _4323 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3269 = (_3194 * _3171) * (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) / ((_3239 * _3239) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3195 * _3038.y;
                                frontier_phi_83_pred_1 = _3195 * _3038.x;
                                frontier_phi_83_pred_2 = _3269 * _3050.z;
                                frontier_phi_83_pred_3 = _3269 * _3050.y;
                                frontier_phi_83_pred_4 = _3269 * _3050.x;
                                frontier_phi_83_pred_5 = _3195 * _3038.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3277 = frontier_phi_83_pred;
                            _3276 = frontier_phi_83_pred_1;
                            _3275 = frontier_phi_83_pred_2;
                            _3274 = frontier_phi_83_pred_3;
                            _3273 = frontier_phi_83_pred_4;
                            _3278 = frontier_phi_83_pred_5;
                            _2980 = _3276 + _2993;
                            _2981 = _3277 + _2994;
                            _2982 = _3278 + _2995;
                            _2977 = _3273 + _2990;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            if (_2997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2997;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2982;
                        frontier_phi_77_pred_1 = _2981;
                        frontier_phi_77_pred_2 = _2980;
                        frontier_phi_77_pred_3 = _2979;
                        frontier_phi_77_pred_4 = _2978;
                        frontier_phi_77_pred_5 = _2977;
                    }
                    _2619 = frontier_phi_77_pred;
                    _2617 = frontier_phi_77_pred_1;
                    _2615 = frontier_phi_77_pred_2;
                    _2613 = frontier_phi_77_pred_3;
                    _2611 = frontier_phi_77_pred_4;
                    _2609 = frontier_phi_77_pred_5;
                    uint _2775 = _2774 + 1u;
                    if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2768 = _2609;
                        _2769 = _2611;
                        _2770 = _2613;
                        _2771 = _2615;
                        _2772 = _2617;
                        _2773 = _2619;
                        _2774 = _2775;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2613;
                frontier_phi_58_59_ladder_1 = _2619;
                frontier_phi_58_59_ladder_2 = _2617;
                frontier_phi_58_59_ladder_3 = _2615;
                frontier_phi_58_59_ladder_4 = _2611;
                frontier_phi_58_59_ladder_5 = _2609;
            }
            else
            {
                frontier_phi_58_59_ladder = _2491;
                frontier_phi_58_59_ladder_1 = _2497;
                frontier_phi_58_59_ladder_2 = _2495;
                frontier_phi_58_59_ladder_3 = _2493;
                frontier_phi_58_59_ladder_4 = _2489;
                frontier_phi_58_59_ladder_5 = _2487;
            }
            _2608 = frontier_phi_58_59_ladder_5;
            _2610 = frontier_phi_58_59_ladder_4;
            _2612 = frontier_phi_58_59_ladder;
            _2614 = frontier_phi_58_59_ladder_3;
            _2616 = frontier_phi_58_59_ladder_2;
            _2618 = frontier_phi_58_59_ladder_1;
        }
        float _2623 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2399 = (_2623 * _2614) + _1835;
        _2401 = (_2623 * _2616) + _1837;
        _2403 = (_2623 * _2618) + _1839;
        _2405 = ((_2608 * _614) * _2623) + _2180;
        _2407 = ((_2610 * _616) * _2623) + _2182;
        _2409 = ((_2612 * _617) * _2623) + _2184;
    }
    else
    {
        _2399 = _1835;
        _2401 = _1837;
        _2403 = _1839;
        _2405 = _2180;
        _2407 = _2182;
        _2409 = _2184;
    }
    float _4339 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4350 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4361 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2426 = ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2399 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _629))) + ((_2405 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2427 = ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2401 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _629))) + ((_2407 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2428 = ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2403 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _629))) + ((_2409 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    uint _2429 = _589 + 6u;
    float _2437 = _550 / cbSceneParam._m0[86u].x;
    float _2438 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2452 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2454 = _2452.x;
    float _2455 = _2452.y;
    float _2456 = _2452.z;
    float _2457 = _2452.w;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2512 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2513 = _2512 / _471;
        float _2524 = _2513 * _522;
        float _2525 = _523 * _2513;
        float _2526 = (-0.0) - _2525;
        float _2528 = _2513 * _524;
        float _2530 = (cbSceneParam._m0[77u].w * _2526) / _2512;
        float _2531 = _2530 + cbSceneParam._m0[79u].w;
        float _2532 = cbSceneParam._m0[79u].w - _2525;
        float _2538 = sqrt(((_2524 * _2524) + (_2525 * _2525)) + (_2528 * _2528));
        float _2541 = (1.0 - (cbSceneParam._m0[77u].w / _2512)) * _2538;
        float _2546 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2548 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2725;
        if (abs((_2526 - _2530) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2725 = ((((_2531 > 0.0) ? exp2(_2546 * _2531) : (2.0 - exp2(_2548 * _2531))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2541;
        }
        else
        {
            float _2669 = 1.0 / cbSceneParam._m0[80u].x;
            float _2670 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : max(_2531, _2532));
            float _2671 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : min(_2531, _2532));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            float _2681 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : min(_2671, 0.0));
            _2725 = ((abs(_2538 / _2526) * cbSceneParam._m0[80u].y) * ((((_2680 - _2681) * 2.0) - ((exp2(_2546 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0)))) - exp2(_2546 * (isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))))) * _2669)) - ((exp2(_2548 * _2680) - exp2(_2548 * _2681)) * _2669))) + (_2541 * cbSceneParam._m0[80u].z);
        }
        vec4 _2727 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, 1.0), 0.0);
        float _2736 = exp2((_2725 * (-1.44269502162933349609375)) * (1.0 - _2727.w));
        float _2737 = log2(_2736);
        float _2753 = log2(_2457);
        _2550 = (exp2(_2753 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].x)) * _2727.x) / cbSceneParam._m0[78u].x)) + _2454;
        _2552 = (exp2(_2753 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].y)) * _2727.y) / cbSceneParam._m0[78u].y)) + _2455;
        _2554 = (exp2(_2753 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].z)) * _2727.z) / cbSceneParam._m0[78u].z)) + _2456;
        _2556 = _2736 * _2457;
    }
    else
    {
        _2550 = _2454;
        _2552 = _2455;
        _2554 = _2456;
        _2556 = _2457;
    }
    bool _2763;
    vec4 _2566;
    vec4 _2588;
    float _2590;
    float _2594;
    float _2595;
    float _2596;
    float _2597;
    bool _2607;
    for (;;)
    {
        _2566 = cbMatDynParam._m0[0u];
        float _2568 = roundEven(_2566.y);
        bool _2569 = _2568 == 3.0;
        float _2570 = log2(_2556);
        float _2577 = exp2(_2570 * cbSceneParam._m0[78u].x) * _2426;
        float _2578 = exp2(_2570 * cbSceneParam._m0[78u].y) * _2427;
        float _2579 = exp2(_2570 * cbSceneParam._m0[78u].z) * _2428;
        float _2586 = _538 + (-0.5);
        _2588 = cbMtdParam._m0[1u];
        _2590 = _2588.y * _2586;
        float _2593 = (_2568 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2594 = _2593 * (_2569 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2550)));
        _2595 = _2593 * (_2569 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2552)));
        _2596 = _2593 * (_2569 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2554)));
        _2597 = _2586 * 0.999000012874603271484375;
        _2607 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2607)
        {
            if ((cbInstanceData._m0[_589 + 7u].x + _2597) < 0.5)
            {
                _2763 = true;
                break;
            }
        }
        uint _2704 = _590 + uint(_2566.w);
        if ((cbInstanceData._m0[_2704].w < 1.0) && ((cbInstanceData._m0[_2704].w + _2597) < 0.5))
        {
            _2763 = true;
            break;
        }
        if ((_2590 + 1.0) < _2588.x)
        {
            _2763 = true;
            break;
        }
        _2763 = false;
        break;
    }
    float _2968;
    if (_2763)
    {
        discard_state = true;
        _2968 = 0.0;
    }
    else
    {
        _2968 = cbInstanceData._m0[_2429].w;
    }
    SV_Target.x = _2594;
    SV_Target.y = _2595;
    SV_Target.z = _2596;
    SV_Target.w = _2968;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2429].w;
    discard_exit();
}


