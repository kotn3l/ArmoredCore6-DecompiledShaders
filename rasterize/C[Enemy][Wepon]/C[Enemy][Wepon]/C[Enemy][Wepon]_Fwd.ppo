#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_24;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _988;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _230.z;
    float _243 = exp2(log2(_235 * cbMtdParam._m0[13u].x) * cbMtdParam._m0[12u].y);
    float _244 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _245 = isnan(1.0) ? _244 : (isnan(_244) ? 1.0 : min(_244, 1.0));
    float _265 = ((cbMtdParam._m0[10u].x - cbMtdParam._m0[9u].x) * _245) + cbMtdParam._m0[9u].x;
    float _266 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[9u].y) * _245) + cbMtdParam._m0[9u].y;
    float _267 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[9u].z) * _245) + cbMtdParam._m0[9u].z;
    float _285 = exp2(log2(texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x) * cbMtdParam._m0[13u].y);
    vec4 _307 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _314 = (((_285 * (cbMtdParam._m0[11u].x - _265)) + _265) * 4.55000019073486328125) * _307.x;
    float _316 = (((_285 * (cbMtdParam._m0[11u].y - _266)) + _266) * 4.55000019073486328125) * _307.y;
    float _318 = (((_285 * (cbMtdParam._m0[11u].z - _267)) + _267) * 4.55000019073486328125) * _307.z;
    float _327 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].z) * _245) + cbMtdParam._m0[12u].z;
    float _330 = ((cbMtdParam._m0[12u].w - _327) * _285) + _327;
    vec4 _343 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _361 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _363 = _361.x;
    float _364 = _361.y;
    float _367 = cbMtdParam._m0[12u].x + _361.z;
    float _370 = (((cbMtdParam._m0[14u].x + _343.z) - _367) * _245) + _367;
    vec4 _383 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _392 = (((_383.z - _370) + cbMtdParam._m0[14u].z) * _285) + _370;
    float _398 = ((((_235 * 2.0) * _392) - _392) * cbMtdParam._m0[13u].z) + _392;
    float _409 = ((_343.x - _363) * _245) + _363;
    float _410 = ((_343.y - _364) * _245) + _364;
    float _419 = ((((_383.x - _409) * _285) + _409) * 2.0) + (-1.0);
    float _420 = ((((_383.y - _410) * _285) + _410) * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3331 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    float _429 = _419 + (cbMtdParam._m0[13u].w * ((_230.x * 2.0) + (-1.0)));
    float _430 = _420 + (cbMtdParam._m0[13u].w * ((_230.y * 2.0) + (-1.0)));
    float _433 = fma(_426, _196 * NORMAL.x, fma(_430, _203 * TANGENT.x, (_189 * _182) * _429));
    float _436 = fma(_426, _196 * NORMAL.y, fma(_430, _203 * TANGENT.y, (_189 * _183) * _429));
    float _439 = fma(_426, _196 * NORMAL.z, fma(_430, _203 * TANGENT.z, (_189 * _184) * _429));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3342 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _447 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3364 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3375 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3386 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _451 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _467 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _518 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _508);
    float _519 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _508);
    float _520 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _508);
    float _524 = inversesqrt(dot(vec3(_518, _519, _520), vec3(_518, _519, _520)));
    float _525 = _518 * _524;
    float _526 = _519 * _524;
    float _527 = _520 * _524;
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _554 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _557 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _560 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _573 = uint(roundEven(NORMAL.w)) * 13u;
    uint _575 = (_573 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3397 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _587 = 1.0 - _451;
    float _588 = _584 * _587;
    float _589 = _585 * _587;
    float _590 = _586 * _587;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _451;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _451;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _451;
    float _598 = _595 + 0.039999999105930328369140625;
    float _600 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _533, cbSceneParam._m0[86u].y * _534));
    float _613 = _610.x * TEXCOORD.z;
    float _614 = dot(vec3(_444, _445, _446), vec3(_525, _526, _527));
    float _617 = _614 * 2.0;
    float _621 = (_617 * _444) - _525;
    float _622 = (_617 * _445) - _526;
    float _623 = (_617 * _446) - _527;
    float _627 = abs(dot(vec3(_525, _526, _527), vec3(_444, _445, _446)));
    float _3430 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _629 = sqrt(_447);
    float _642 = exp2((_629 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_629 * 3.0));
    float _648 = (1.0 - _642) * ((_629 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _649 = _642 * _629;
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _987;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _712 = fma(_685, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677));
        float _716 = fma(_685, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677));
        float _720 = fma(_685, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677));
        float _745 = _677 + _444;
        float _746 = _681 + _445;
        float _747 = _685 + _446;
        float _757 = fma(_747, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745)) - _712;
        float _758 = fma(_747, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745)) - _716;
        float _759 = fma(_747, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745)) - _720;
        float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
        float _776 = ((_763 * _757) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_712 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_763 * _758) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_716 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_763 * _759) / cbModelParam._m0[34u].z) + ((((((_720 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        float _815 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_781.x + (-0.5));
        float _817 = _815 * (_781.y + (-0.5));
        float _818 = _815 * (_781.z + (-0.5));
        float _825 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_788.x + (-0.5));
        float _827 = _825 * (_788.y + (-0.5));
        float _828 = _825 * (_788.z + (-0.5));
        float _835 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_795.x + (-0.5));
        float _837 = _835 * (_795.y + (-0.5));
        float _838 = _835 * (_795.z + (-0.5));
        float _845 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_802.x + (-0.5));
        float _847 = _845 * (_802.y + (-0.5));
        float _848 = _845 * (_802.z + (-0.5));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = _816 * 0.5;
        float _853 = _826 * 0.5;
        float _854 = _836 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _869 = (dot(vec3(_444, _445, _446), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _879 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3478 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_881 + 1.0))) + _886) * _849;
        float _896 = _817 * 0.5;
        float _897 = _827 * 0.5;
        float _898 = _837 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_444, _445, _446), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3511 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_923 + 1.0))) + _928) * _850;
        float _938 = _818 * 0.5;
        float _939 = _828 * 0.5;
        float _940 = _838 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_444, _445, _446), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3544 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_965 + 1.0))) + _970) * _851;
        _987 = _818;
        _989 = _817;
        _990 = _816;
        _991 = _828;
        _992 = _827;
        _993 = _826;
        _994 = _838;
        _995 = _837;
        _996 = _836;
        _997 = _851;
        _998 = _850;
        _999 = _849;
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
    }
    else
    {
        _987 = _988;
        _989 = _988;
        _990 = _988;
        _991 = _988;
        _992 = _988;
        _993 = _988;
        _994 = _988;
        _995 = _988;
        _996 = _988;
        _997 = _988;
        _998 = _988;
        _999 = _988;
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1028 = fma(_685, cbModelParam._m0[30u].z, fma(_681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _677));
        float _1032 = fma(_685, cbModelParam._m0[31u].z, fma(_681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _677));
        float _1036 = fma(_685, cbModelParam._m0[32u].z, fma(_681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _677));
        float _1059 = _677 + _444;
        float _1060 = _681 + _445;
        float _1061 = _685 + _446;
        float _1071 = fma(_1061, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1028 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1032 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[35u].z) + ((((((_1036 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1127 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1094.x + (-0.5));
        float _1129 = _1127 * (_1094.y + (-0.5));
        float _1130 = _1127 * (_1094.z + (-0.5));
        float _1137 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1101.x + (-0.5));
        float _1139 = _1137 * (_1101.y + (-0.5));
        float _1140 = _1137 * (_1101.z + (-0.5));
        float _1147 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1108.x + (-0.5));
        float _1149 = _1147 * (_1108.y + (-0.5));
        float _1150 = _1147 * (_1108.z + (-0.5));
        float _1157 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1115.x + (-0.5));
        float _1159 = _1157 * (_1115.y + (-0.5));
        float _1160 = _1157 * (_1115.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_444, _445, _446), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3607 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1191 + 1.0))) + _1196) * _1161;
        float _1206 = _1129 * 0.5;
        float _1207 = _1139 * 0.5;
        float _1208 = _1149 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_444, _445, _446), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3640 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1233 + 1.0))) + _1238) * _1162;
        float _1248 = _1130 * 0.5;
        float _1249 = _1140 * 0.5;
        float _1250 = _1150 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_444, _445, _446), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3673 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1275 + 1.0))) + _1280) * _1163;
        _1297 = _1130;
        _1298 = _1129;
        _1299 = _1128;
        _1300 = _1140;
        _1301 = _1139;
        _1302 = _1138;
        _1303 = _1150;
        _1304 = _1149;
        _1305 = _1148;
        _1306 = _1163;
        _1307 = _1162;
        _1308 = _1161;
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _988;
        _1298 = _988;
        _1299 = _988;
        _1300 = _988;
        _1301 = _988;
        _1302 = _988;
        _1303 = _988;
        _1304 = _988;
        _1305 = _988;
        _1306 = _988;
        _1307 = _988;
        _1308 = _988;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1344 = fma(_1323, cbSceneParam._m0[89u].z, fma(_1322, cbSceneParam._m0[89u].y, _1321 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1323, cbSceneParam._m0[90u].z, fma(_1322, cbSceneParam._m0[90u].y, _1321 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1323, cbSceneParam._m0[91u].z, fma(_1322, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1321));
    float _1365 = _621 * 0.5;
    float _1366 = _622 * 0.5;
    float _1367 = _623 * 0.5;
    float _1368 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1371 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1374 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1408;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1381 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_987, _991, _994, _997));
        float _1385 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_989, _992, _995, _998));
        float _1389 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_990, _993, _996, _999));
        float _1396 = dot(vec4(cbModelParam._m0[39u]), vec4(_1365, _1366, _1367, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1419;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1410 = dot(vec4(cbModelParam._m0[40u]), vec4(_1365, _1366, _1367, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1423 = (_1419 * cbModelParam._m0[1u].x) + (_1408 * (1.0 - cbModelParam._m0[1u].x));
    float _1433 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1433 : min(cbModelParam._m0[25u].z, _1433));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1481 = fma(_685, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677)) + cbModelParam._m0[13u].w;
        float _1485 = fma(_685, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677)) + cbModelParam._m0[14u].w;
        float _1489 = fma(_685, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677)) + cbModelParam._m0[15u].w;
        float _1492 = fma(_623, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621));
        float _1495 = fma(_623, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621));
        float _1498 = fma(_623, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621));
        float _1526;
        if (_1492 > 0.0)
        {
            _1526 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1526 = frontier_phi_14_12_ladder;
        }
        float _1732;
        if (_1495 > 0.0)
        {
            _1732 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1732 = frontier_phi_23_19_ladder;
        }
        float _1986;
        if (_1498 > 0.0)
        {
            _1986 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1986 = frontier_phi_35_30_ladder;
        }
        float _1988 = isnan(_1732) ? _1526 : (isnan(_1526) ? _1732 : min(_1526, _1732));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1492) + _1481;
        float _1994 = (_1989 * _1495) + _1485;
        float _1995 = (_1989 * _1498) + _1489;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1998 = (-1.0) - _1996;
        float _2000 = _1996 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1995 > _2000) || ((_1995 < _1998) || ((_1994 > _2000) || ((_1994 < _1998) || ((_1993 < _1998) || (_1993 > _2000))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1434);
            frontier_phi_13_35_ladder = _2123.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2123.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2123.x * cbModelParam._m0[1u].y;
        }
        _1514 = frontier_phi_13_35_ladder_2;
        _1516 = frontier_phi_13_35_ladder_1;
        _1518 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_621, _622, _623), _1434);
        _1514 = _1502.x * cbModelParam._m0[1u].y;
        _1516 = _1502.y * cbModelParam._m0[1u].y;
        _1518 = _1502.z * cbModelParam._m0[1u].y;
    }
    float _1522 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1522 : min(cbModelParam._m0[25u].w, _1522));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_685, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_685, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_685, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_623, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621));
        float _1594 = fma(_623, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621));
        float _1597 = fma(_623, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621));
        float _1737;
        if (_1591 > 0.0)
        {
            _1737 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1737 = frontier_phi_25_21_ladder;
        }
        float _2013;
        if (_1594 > 0.0)
        {
            _2013 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2013 = frontier_phi_37_32_ladder;
        }
        float _2226;
        if (_1597 > 0.0)
        {
            _2226 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2226 = frontier_phi_46_43_ladder;
        }
        float _2228 = isnan(_2013) ? _1737 : (isnan(_1737) ? _2013 : min(_1737, _2013));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1591) + _1580;
        float _2234 = (_2229 * _1594) + _1584;
        float _2235 = (_2229 * _1597) + _1588;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2235, cbModelParam._m0[17u].z, fma(_2234, cbModelParam._m0[17u].y, _2233 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2235, cbModelParam._m0[18u].z, fma(_2234, cbModelParam._m0[18u].y, _2233 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2235, cbModelParam._m0[19u].z, fma(_2234, cbModelParam._m0[19u].y, _2233 * cbModelParam._m0[19u].x))), _1523);
            frontier_phi_22_46_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_22_46_ladder_2;
        _1618 = frontier_phi_22_46_ladder_1;
        _1620 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_621, _622, _623), _1523);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1633 = (((_648 * _598) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_648 * _600) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1637 = (((_648 * _601) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1640 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    uvec4 _1656 = floatBitsToUint(cbInstanceData._m0[_573 + 5u]);
    uint _1658 = _1656.x * 14u;
    uint _1659 = _1658 + 13u;
    float _1666 = _613 + (-1.0);
    float _1671 = (cbLight._m0[_1659].x * _1666) + 1.0;
    float _1672 = (cbLight._m0[_1659].y * _1666) + 1.0;
    float _1673 = (cbLight._m0[_1659].z * _1666) + 1.0;
    float _1674 = (cbLight._m0[_1659].w * _1666) + 1.0;
    uint _1675 = _1658 + 5u;
    float _1681 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1685 = _1658 + 4u;
    float _1691 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1695 = _1658 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_444, _445, _446));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_444, _445, _446));
    float _3809 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3820 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1675].x * _1681) * _1716) + ((cbLight._m0[_1685].x * _1691) * _1714);
    float _1724 = ((_1681 * cbLight._m0[_1675].y) * _1716) + ((_1691 * cbLight._m0[_1685].y) * _1714);
    float _1725 = ((_1681 * cbLight._m0[_1675].z) * _1716) + ((_1691 * cbLight._m0[_1685].z) * _1714);
    uvec4 _1729 = floatBitsToUint(cbLight._m0[_1658 + 12u]);
    bool _1731 = _1729.x == 0u;
    float _1742;
    float _1744;
    float _1746;
    if (_1731)
    {
        _1742 = _1723;
        _1744 = _1724;
        _1746 = _1725;
    }
    else
    {
        uint _1750 = _1658 + 6u;
        float _1766 = (dot(vec3(cbLight._m0[_1658 + 2u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1767 = _1766 * _1766;
        float _3831 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1769 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1742 = (((cbLight._m0[_1750].x * 0.3183098733425140380859375) * _1768) * _1769) + _1723;
        _1744 = (((cbLight._m0[_1750].y * 0.3183098733425140380859375) * _1768) * _1769) + _1724;
        _1746 = (((cbLight._m0[_1750].z * 0.3183098733425140380859375) * _1768) * _1769) + _1725;
    }
    bool _1749 = _1729.y == 0u;
    float _1787;
    float _1789;
    float _1791;
    if (_1749)
    {
        _1787 = _1742;
        _1789 = _1744;
        _1791 = _1746;
    }
    else
    {
        uint _1957 = _1658 + 7u;
        float _1973 = (dot(vec3(cbLight._m0[_1658 + 3u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1974 = _1973 * _1973;
        float _3847 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1976 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1787 = (((cbLight._m0[_1957].x * 0.3183098733425140380859375) * _1975) * _1976) + _1742;
        _1789 = (((cbLight._m0[_1957].y * 0.3183098733425140380859375) * _1975) * _1976) + _1744;
        _1791 = (((cbLight._m0[_1957].z * 0.3183098733425140380859375) * _1975) * _1976) + _1746;
    }
    uint _1794 = _1658 + 8u;
    float _1807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1658].w)) * _447) * 0.949999988079071044921875);
    float _1808 = _1807 * _1807;
    float _1809 = cbLight._m0[_1658].x + _525;
    float _1810 = cbLight._m0[_1658].y + _526;
    float _1811 = cbLight._m0[_1658].z + _527;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1816 = _1815 * _1809;
    float _1817 = _1815 * _1810;
    float _1818 = _1815 * _1811;
    float _1819 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1658].xyz));
    float _3863 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1823 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1824 = dot(vec3(_444, _445, _446), vec3(_1816, _1817, _1818));
    float _3885 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_1816, _1817, _1818));
    float _3896 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1808 * _1808;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0);
    float _1845 = 0.959999978542327880859375 - _595;
    float _1847 = 0.959999978542327880859375 - _596;
    float _1848 = 0.959999978542327880859375 - _597;
    float _1855 = 1.0 - _1808;
    float _1866 = (0.5 / (((_1823 * ((_1822 * _1855) + _1808)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1855) + _1808) * _1822))) * _1822;
    float _3907 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    uint _1879 = _1658 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _447) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1695].x + _525;
    float _1893 = cbLight._m0[_1695].y + _526;
    float _1894 = cbLight._m0[_1695].z + _527;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1695].xyz));
    float _3918 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1906 = dot(vec3(_444, _445, _446), vec3(_1899, _1900, _1901));
    float _3929 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1899, _1900, _1901));
    float _3940 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1925 = exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0);
    float _1932 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1823 * ((_1905 * _1932) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1932) + _1891) * _1905))) * _1905;
    float _3951 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1954 = (((((_1925 * _1845) + _598) * cbLight._m0[_1879].x) * _1944) * _1681) + (((((_1844 * _1845) + _598) * cbLight._m0[_1794].x) * _1868) * _1691);
    float _1955 = (((((_1925 * _1847) + _600) * cbLight._m0[_1879].y) * _1944) * _1681) + (((((_1844 * _1847) + _600) * cbLight._m0[_1794].y) * _1868) * _1691);
    float _1956 = (((((_1925 * _1848) + _601) * cbLight._m0[_1879].z) * _1944) * _1681) + (((((_1844 * _1848) + _601) * cbLight._m0[_1794].z) * _1868) * _1691);
    float _2018;
    float _2020;
    float _2022;
    if (_1731)
    {
        _2018 = _1954;
        _2020 = _1955;
        _2022 = _1956;
    }
    else
    {
        uint _2024 = _1658 + 2u;
        uint _2028 = _1658 + 10u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _447) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _525;
        float _2045 = cbLight._m0[_2024].y + _526;
        float _2046 = cbLight._m0[_2024].z + _527;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2024].xyz));
        float _3962 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2058 = dot(vec3(_444, _445, _446), vec3(_2051, _2052, _2053));
        float _3973 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3984 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1823 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2084) + _2043) * _2057))) * _2057;
        float _3995 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2018 = (((((_2077 * _1845) + _598) * cbLight._m0[_2028].x) * _2096) * _2097) + _1954;
        _2020 = (((((_2077 * _1847) + _600) * cbLight._m0[_2028].y) * _2096) * _2097) + _1955;
        _2022 = (((((_2077 * _1848) + _601) * cbLight._m0[_2028].z) * _2096) * _2097) + _1956;
    }
    float _2132;
    float _2134;
    float _2136;
    if (_1749)
    {
        _2132 = _2018;
        _2134 = _2020;
        _2136 = _2022;
    }
    else
    {
        uint _2143 = _1658 + 3u;
        uint _2147 = _1658 + 11u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _447) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _525;
        float _2164 = cbLight._m0[_2143].y + _526;
        float _2165 = cbLight._m0[_2143].z + _527;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2143].xyz));
        float _4011 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2177 = dot(vec3(_444, _445, _446), vec3(_2170, _2171, _2172));
        float _4022 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4033 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2196 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
        float _2203 = 1.0 - _2162;
        float _2213 = (0.5 / (((_1823 * ((_2176 * _2203) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2203) + _2162) * _2176))) * _2176;
        float _4044 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2132 = (((((_2196 * _1845) + _598) * cbLight._m0[_2147].x) * _2215) * _2216) + _2018;
        _2134 = (((((_2196 * _1847) + _600) * cbLight._m0[_2147].y) * _2215) * _2216) + _2020;
        _2136 = (((((_2196 * _1848) + _601) * cbLight._m0[_2147].z) * _2215) * _2216) + _2022;
    }
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_1656.y == 0u)
    {
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2291;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2291;
        float _2294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2291;
        uvec4 _2306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2307 = _2306.x;
        uint _2318 = uint((float(_2306.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _2307))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _2307)));
        float _2328 = (log2(_2294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2329 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        uint _2332 = uint(isnan(14.0) ? _2329 : (isnan(_2329) ? 14.0 : min(_2329, 14.0)));
        uvec4 _2337 = texelFetch(g_lightClusterGridBuffer, int(((_2332 << 2u) + (_2318 << 6u)) >> 2u));
        uint _2338 = _2337.x;
        uint _2339 = _2306.z;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((((1u << ((_2339 >> 4u) & 15u)) + 4294967295u) & _2338) == 0u) || ((_2339 & 240u) == 0u))
        {
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
        }
        else
        {
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            uint _2590 = 0u;
            uint _2599;
            bool _2600;
            for (;;)
            {
                _2599 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2590 << 2u)) >> 2u)).x;
                _2600 = _2599 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2600)
                {
                    frontier_phi_61_pred = _2584;
                    frontier_phi_61_pred_1 = _2589;
                    frontier_phi_61_pred_2 = _2588;
                    frontier_phi_61_pred_3 = _2587;
                    frontier_phi_61_pred_4 = _2586;
                    frontier_phi_61_pred_5 = _2585;
                }
                else
                {
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    uint _2714;
                    _2708 = _2584;
                    _2709 = _2585;
                    _2710 = _2586;
                    _2711 = _2587;
                    _2712 = _2588;
                    _2713 = _2589;
                    _2714 = _2599;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    for (;;)
                    {
                        uint _2718 = uint(findLSB(_2714)) + (_2590 << 5u);
                        uint _2715 = (_2714 + 4294967295u) & _2714;
                        uint _2720 = _2718 * 48u;
                        vec4 _2734 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 3u)).x));
                        uint _2740 = (_2718 * 48u) + 4u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2759 = (_2718 * 48u) + 8u;
                        vec3 _2770 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x));
                        float _2774 = _2734.x - _2292;
                        float _2775 = _2734.y - _2293;
                        float _2776 = _2734.z - _2294;
                        float _2777 = dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776));
                        float _2780 = inversesqrt(_2777);
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2784 = dot(vec3(_554, _557, _560), vec3(_2781, _2782, _2783));
                        float _2789 = 1.0 - (_2777 * _2734.w);
                        float _4070 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2791 = sqrt(_2777) * _2753.w;
                        float _2794 = 1.39999997615814208984375 / (_2791 + 1.39999997615814208984375);
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2784) + _2795;
                        float _2801 = _2791 * _2791;
                        float _2805 = ((isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))) * _2790) / ((_2801 * 0.699999988079071044921875) + 1.0);
                        float _2809 = (-0.0) - _2292;
                        float _2810 = (-0.0) - _2293;
                        float _2811 = (-0.0) - _2294;
                        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
                        float _2816 = _2815 * _2809;
                        float _2817 = _2815 * _2810;
                        float _2818 = _2815 * _2811;
                        float _2826 = exp2(log2(1.0 / ((_2801 * 3.5) + 5.0)) * 0.25);
                        float _2827 = 1.0 - _629;
                        float _2834 = sqrt(1.0 - ((1.0 - (_2827 * _2827)) * (1.0 - (_2826 * _2826))));
                        float _2835 = _2834 * _2834;
                        float _2836 = _2835 * _2835;
                        float _2837 = _2816 + _2781;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
                        float _2847 = dot(vec3(_554, _557, _560), vec3(_2816, _2817, _2818));
                        float _4086 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2850 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2851 = dot(vec3(_554, _557, _560), vec3(_2843 * _2837, _2843 * _2838, _2843 * _2839));
                        float _4097 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2858 = ((_2854 * _2854) * (_2836 + (-1.0))) + 1.0;
                        float _2859 = _2794 * _2835;
                        float _2860 = _2859 * _2859;
                        float _2863 = ((1.0 - _2860) * _2784) + _2860;
                        float _4108 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2865 = 1.0 - _2835;
                        float _2875 = (0.5 / (((_2864 * ((_2850 * _2865) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2864 * _2865) + _2835) * _2850))) * _2864;
                        float _4119 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2886 = (((_2836 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_2858 * _2858) * ((_2801 * 2.1991131305694580078125) + 3.141590118408203125))) * _2790;
                        _2643 = (_2805 * _2753.x) + _2711;
                        _2644 = (_2805 * _2753.y) + _2712;
                        _2645 = (_2805 * _2753.z) + _2713;
                        _2640 = (_2886 * _2770.x) + _2708;
                        _2641 = (_2886 * _2770.y) + _2709;
                        _2642 = (_2886 * _2770.z) + _2710;
                        if (_2715 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2708 = _2640;
                            _2709 = _2641;
                            _2710 = _2642;
                            _2711 = _2643;
                            _2712 = _2644;
                            _2713 = _2645;
                            _2714 = _2715;
                        }
                    }
                    frontier_phi_61_pred = _2640;
                    frontier_phi_61_pred_1 = _2645;
                    frontier_phi_61_pred_2 = _2644;
                    frontier_phi_61_pred_3 = _2643;
                    frontier_phi_61_pred_4 = _2642;
                    frontier_phi_61_pred_5 = _2641;
                }
                _2440 = frontier_phi_61_pred;
                _2450 = frontier_phi_61_pred_1;
                _2448 = frontier_phi_61_pred_2;
                _2446 = frontier_phi_61_pred_3;
                _2444 = frontier_phi_61_pred_4;
                _2442 = frontier_phi_61_pred_5;
                uint _2591 = _2590 + 1u;
                if (_2591 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2584 = _2440;
                    _2585 = _2442;
                    _2586 = _2444;
                    _2587 = _2446;
                    _2588 = _2448;
                    _2589 = _2450;
                    _2590 = _2591;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
        }
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.z;
        uint _2456 = (_2454 >> 8u) & 15u;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        if (((4294967295u << _2456) & _2338) == 0u)
        {
            _2552 = _2439;
            _2554 = _2441;
            _2556 = _2443;
            _2558 = _2445;
            _2560 = _2447;
            _2562 = _2449;
        }
        else
        {
            float _2577 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
            float _2578 = _2577 * _2292;
            float _2579 = _2577 * _2293;
            float _2580 = _2577 * _2294;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2456 < ((_2454 >> 12u) & 15u))
            {
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2691 = _2439;
                float _2692 = _2441;
                float _2693 = _2443;
                float _2694 = _2445;
                float _2695 = _2447;
                float _2696 = _2449;
                uint _2697 = _2456;
                uint _2706;
                bool _2707;
                for (;;)
                {
                    _2706 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                    _2707 = _2706 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2707)
                    {
                        frontier_phi_67_pred = _2694;
                        frontier_phi_67_pred_1 = _2695;
                        frontier_phi_67_pred_2 = _2696;
                        frontier_phi_67_pred_3 = _2693;
                        frontier_phi_67_pred_4 = _2692;
                        frontier_phi_67_pred_5 = _2691;
                    }
                    else
                    {
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _2904 = _2691;
                        float _2905 = _2692;
                        float _2906 = _2693;
                        float _2907 = _2694;
                        float _2908 = _2695;
                        float _2909 = _2696;
                        uint _2910 = _2706;
                        uint _2911;
                        vec4 _2936;
                        float _2937;
                        vec4 _2952;
                        vec3 _2964;
                        vec4 _2980;
                        vec4 _2996;
                        float _3043;
                        bool _3044;
                        for (;;)
                        {
                            uint _2921 = ((_2697 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2910));
                            _2911 = (_2910 + 4294967295u) & _2910;
                            uint _2923 = _2921 * 40u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            _2937 = _2936.w;
                            uint _2939 = (_2921 * 40u) + 4u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2954 = (_2921 * 40u) + 8u;
                            _2964 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x));
                            uint _2967 = (_2921 * 40u) + 16u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2983 = (_2921 * 40u) + 20u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2999 = (_2921 * 40u) + 24u;
                            vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3018 = (_2921 * 40u) + 28u;
                            vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            _3043 = fma(_2294, _3031.z, fma(_2293, _3031.y, _3031.x * _2292)) + _3031.w;
                            _3044 = !((fma(_2294, _3012.z, fma(_2293, _3012.y, _3012.x * _2292)) + _3012.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3044)
                            {
                                float _3071 = _2936.x - _2292;
                                float _3072 = _2936.y - _2293;
                                float _3073 = _2936.z - _2294;
                                float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                                float _3077 = inversesqrt(_3074);
                                float _3078 = _3077 * _3071;
                                float _3079 = _3077 * _3072;
                                float _3080 = _3077 * _3073;
                                float _3084 = 1.0 - (_3074 / (_2937 * _2937));
                                float _4130 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3089 = sqrt(_3074) * _2952.w;
                                float _3091 = 1.39999997615814208984375 / (_3089 + 1.39999997615814208984375);
                                float _3092 = _3091 * _3091;
                                float _3095 = ((1.0 - _3092) * dot(vec3(_3078, _3079, _3080), vec3(_554, _557, _560))) + _3092;
                                float _3098 = _3089 * _3089;
                                float _3102 = (fma(_2294, _2980.z, fma(_2293, _2980.y, _2980.x * _2292)) + _2980.w) / _3043;
                                float _3103 = (fma(_2294, _2996.z, fma(_2293, _2996.y, _2996.x * _2292)) + _2996.w) / _3043;
                                float _3107 = 1.0 - dot(vec2(_3102, _3103), vec2(_3102, _3103));
                                float _4146 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3109 = _3108 * (((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3085) / ((_3098 * 0.699999988079071044921875) + 1.0));
                                float _3121 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                                float _3122 = 1.0 - _629;
                                float _3129 = sqrt(1.0 - ((1.0 - (_3122 * _3122)) * (1.0 - (_3121 * _3121))));
                                float _3130 = _3129 * _3129;
                                float _3131 = _3130 * _3130;
                                float _3132 = _3078 - _2578;
                                float _3133 = _3079 - _2579;
                                float _3134 = _3080 - _2580;
                                float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                                float _3142 = dot(vec3(_554, _557, _560), vec3((-0.0) - _2578, (-0.0) - _2579, (-0.0) - _2580));
                                float _4157 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3145 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3146 = dot(vec3(_554, _557, _560), vec3(_3138 * _3132, _3138 * _3133, _3138 * _3134));
                                float _4168 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3149 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3153 = ((_3149 * _3149) * (_3131 + (-1.0))) + 1.0;
                                float _3154 = _3091 * _3130;
                                float _3155 = _3154 * _3154;
                                float _3161 = ((1.0 - _3155) * dot(vec3(_554, _557, _560), vec3(_3078, _3079, _3080))) + _3155;
                                float _4179 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3163 = 1.0 - _3130;
                                float _3173 = (0.5 / (((_3162 * ((_3145 * _3163) + _3130)) + 9.9999999392252902907785028219223e-09) + (((_3162 * _3163) + _3130) * _3145))) * _3162;
                                float _4190 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3183 = (_3108 * _3085) * (((_3131 * 3.1415927410125732421875) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) / ((_3153 * _3153) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3183 * _2964.x;
                                frontier_phi_73_pred_1 = _3183 * _2964.y;
                                frontier_phi_73_pred_2 = _3109 * _2952.z;
                                frontier_phi_73_pred_3 = _3109 * _2952.y;
                                frontier_phi_73_pred_4 = _3109 * _2952.x;
                                frontier_phi_73_pred_5 = _3183 * _2964.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3187 = frontier_phi_73_pred;
                            _3188 = frontier_phi_73_pred_1;
                            _3192 = frontier_phi_73_pred_2;
                            _3191 = frontier_phi_73_pred_3;
                            _3190 = frontier_phi_73_pred_4;
                            _3189 = frontier_phi_73_pred_5;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            if (_2911 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2911;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2894;
                        frontier_phi_67_pred_1 = _2895;
                        frontier_phi_67_pred_2 = _2896;
                        frontier_phi_67_pred_3 = _2893;
                        frontier_phi_67_pred_4 = _2892;
                        frontier_phi_67_pred_5 = _2891;
                    }
                    _2559 = frontier_phi_67_pred;
                    _2561 = frontier_phi_67_pred_1;
                    _2563 = frontier_phi_67_pred_2;
                    _2557 = frontier_phi_67_pred_3;
                    _2555 = frontier_phi_67_pred_4;
                    _2553 = frontier_phi_67_pred_5;
                    uint _2698 = _2697 + 1u;
                    if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2691 = _2553;
                        _2692 = _2555;
                        _2693 = _2557;
                        _2694 = _2559;
                        _2695 = _2561;
                        _2696 = _2563;
                        _2697 = _2698;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2561;
                frontier_phi_55_56_ladder_1 = _2563;
                frontier_phi_55_56_ladder_2 = _2559;
                frontier_phi_55_56_ladder_3 = _2557;
                frontier_phi_55_56_ladder_4 = _2555;
                frontier_phi_55_56_ladder_5 = _2553;
            }
            else
            {
                frontier_phi_55_56_ladder = _2447;
                frontier_phi_55_56_ladder_1 = _2449;
                frontier_phi_55_56_ladder_2 = _2445;
                frontier_phi_55_56_ladder_3 = _2443;
                frontier_phi_55_56_ladder_4 = _2441;
                frontier_phi_55_56_ladder_5 = _2439;
            }
            _2552 = frontier_phi_55_56_ladder_5;
            _2554 = frontier_phi_55_56_ladder_4;
            _2556 = frontier_phi_55_56_ladder_3;
            _2558 = frontier_phi_55_56_ladder_2;
            _2560 = frontier_phi_55_56_ladder;
            _2562 = frontier_phi_55_56_ladder_1;
        }
        float _2567 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
        _2351 = (_2567 * _2558) + _1787;
        _2353 = (_2567 * _2560) + _1789;
        _2355 = (_2567 * _2562) + _1791;
        _2357 = ((_2552 * _598) * _2567) + _2132;
        _2359 = ((_2554 * _600) * _2567) + _2134;
        _2361 = ((_2556 * _601) * _2567) + _2136;
    }
    else
    {
        _2351 = _1787;
        _2353 = _1789;
        _2355 = _1791;
        _2357 = _2132;
        _2359 = _2134;
        _2361 = _2136;
    }
    float _4206 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4217 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4228 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    uint _2381 = _573 + 6u;
    float _2389 = _533 / cbSceneParam._m0[86u].x;
    float _2390 = _534 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _467 : (isnan(_467) ? cbSceneParam._m0[77u].w : min(_467, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_467 > cbSceneParam._m0[78u].w)
    {
        float _2464 = isnan(_467) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _467 : min(cbSceneParam._m0[80u].w, _467));
        float _2465 = _2464 / _467;
        float _2476 = _2465 * _518;
        float _2477 = _519 * _2465;
        float _2478 = (-0.0) - _2477;
        float _2480 = _2465 * _520;
        float _2482 = (cbSceneParam._m0[77u].w * _2478) / _2464;
        float _2483 = _2482 + cbSceneParam._m0[79u].w;
        float _2484 = cbSceneParam._m0[79u].w - _2477;
        float _2490 = sqrt(((_2476 * _2476) + (_2477 * _2477)) + (_2480 * _2480));
        float _2493 = (1.0 - (cbSceneParam._m0[77u].w / _2464)) * _2490;
        float _2498 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2500 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2653;
        if (abs((_2478 - _2482) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2653 = ((((_2483 > 0.0) ? exp2(_2498 * _2483) : (2.0 - exp2(_2500 * _2483))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2493;
        }
        else
        {
            float _2613 = 1.0 / cbSceneParam._m0[80u].x;
            float _2614 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : max(_2483, _2484));
            float _2615 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : min(_2483, _2484));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            _2653 = ((abs(_2490 / _2478) * cbSceneParam._m0[80u].y) * ((((_2624 - _2625) * 2.0) - ((exp2(_2498 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0)))) - exp2(_2498 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))))) * _2613)) - ((exp2(_2500 * _2624) - exp2(_2500 * _2625)) * _2613))) + (_2493 * cbSceneParam._m0[80u].z);
        }
        vec4 _2655 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2664 = exp2((_2653 * (-1.44269502162933349609375)) * (1.0 - _2655.w));
        float _2665 = log2(_2664);
        float _2681 = log2(_2409);
        _2502 = (exp2(_2681 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].x)) * _2655.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2504 = (exp2(_2681 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].y)) * _2655.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2506 = (exp2(_2681 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].z)) * _2655.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2508 = _2664 * _2409;
    }
    else
    {
        _2502 = _2406;
        _2504 = _2407;
        _2506 = _2408;
        _2508 = _2409;
    }
    float _2520 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2521 = _2520 == 3.0;
    float _2522 = log2(_2508);
    float _2529 = exp2(_2522 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2351 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _613))) + ((_2357 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1423)) * cbPerFrame._m0[3u].x));
    float _2530 = exp2(_2522 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2353 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _613))) + ((_2359 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1423)) * cbPerFrame._m0[3u].x));
    float _2531 = exp2(_2522 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2355 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _613))) + ((_2361 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1423)) * cbPerFrame._m0[3u].x));
    float _2540 = (_2520 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2540 * (_2521 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.y = _2540 * (_2521 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2504)));
    SV_Target.z = _2540 * (_2521 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2506)));
    SV_Target.w = cbInstanceData._m0[_2381].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2381].w;
}


