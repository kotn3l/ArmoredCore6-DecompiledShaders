#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_24;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _992;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _234.z;
    float _247 = exp2(log2(_239 * cbMtdParam._m0[13u].x) * cbMtdParam._m0[12u].y);
    float _248 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _249 = isnan(1.0) ? _248 : (isnan(_248) ? 1.0 : min(_248, 1.0));
    float _269 = ((cbMtdParam._m0[10u].x - cbMtdParam._m0[9u].x) * _249) + cbMtdParam._m0[9u].x;
    float _270 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[9u].y) * _249) + cbMtdParam._m0[9u].y;
    float _271 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[9u].z) * _249) + cbMtdParam._m0[9u].z;
    float _289 = exp2(log2(texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x) * cbMtdParam._m0[13u].y);
    vec4 _311 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _318 = (((_289 * (cbMtdParam._m0[11u].x - _269)) + _269) * 4.55000019073486328125) * _311.x;
    float _320 = (((_289 * (cbMtdParam._m0[11u].y - _270)) + _270) * 4.55000019073486328125) * _311.y;
    float _322 = (((_289 * (cbMtdParam._m0[11u].z - _271)) + _271) * 4.55000019073486328125) * _311.z;
    float _331 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].z) * _249) + cbMtdParam._m0[12u].z;
    float _334 = ((cbMtdParam._m0[12u].w - _331) * _289) + _331;
    vec4 _347 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _365 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _367 = _365.x;
    float _368 = _365.y;
    float _371 = cbMtdParam._m0[12u].x + _365.z;
    float _374 = (((cbMtdParam._m0[14u].x + _347.z) - _371) * _249) + _371;
    vec4 _387 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _396 = (((_387.z - _374) + cbMtdParam._m0[14u].z) * _289) + _374;
    float _402 = ((((_239 * 2.0) * _396) - _396) * cbMtdParam._m0[13u].z) + _396;
    float _413 = ((_347.x - _367) * _249) + _367;
    float _414 = ((_347.y - _368) * _249) + _368;
    float _423 = ((((_387.x - _413) * _289) + _413) * 2.0) + (-1.0);
    float _424 = ((((_387.y - _414) * _289) + _414) * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3618 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _433 = _423 + (cbMtdParam._m0[13u].w * ((_234.x * 2.0) + (-1.0)));
    float _434 = _424 + (cbMtdParam._m0[13u].w * ((_234.y * 2.0) + (-1.0)));
    float _437 = fma(_430, _200 * NORMAL.x, fma(_434, _207 * TANGENT.x, (_193 * _186) * _433));
    float _440 = fma(_430, _200 * NORMAL.y, fma(_434, _207 * TANGENT.y, (_193 * _187) * _433));
    float _443 = fma(_430, _200 * NORMAL.z, fma(_434, _207 * TANGENT.z, (_193 * _188) * _433));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3629 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _451 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3651 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3662 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3673 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _455 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _561 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _564 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _579 = (_577 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_579].z;
    float _3684 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _591 = 1.0 - _455;
    float _592 = _588 * _591;
    float _593 = _589 * _591;
    float _594 = _590 * _591;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _455;
    float _600 = (_589 + (-0.039999999105930328369140625)) * _455;
    float _601 = (_590 + (-0.039999999105930328369140625)) * _455;
    float _602 = _599 + 0.039999999105930328369140625;
    float _604 = _600 + 0.039999999105930328369140625;
    float _605 = _601 + 0.039999999105930328369140625;
    vec4 _614 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _617 = _614.x * TEXCOORD.z;
    float _618 = dot(vec3(_448, _449, _450), vec3(_529, _530, _531));
    float _621 = _618 * 2.0;
    float _625 = (_621 * _448) - _529;
    float _626 = (_621 * _449) - _530;
    float _627 = (_621 * _450) - _531;
    float _631 = abs(dot(vec3(_529, _530, _531), vec3(_448, _449, _450)));
    float _3717 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _633 = sqrt(_451);
    float _646 = exp2((_633 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_633 * 3.0));
    float _652 = (1.0 - _646) * ((_633 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _653 = _646 * _633;
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _991;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_689, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681));
        float _720 = fma(_689, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681));
        float _724 = fma(_689, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681));
        float _749 = _681 + _448;
        float _750 = _685 + _449;
        float _751 = _689 + _450;
        float _761 = fma(_751, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749)) - _716;
        float _762 = fma(_751, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749)) - _720;
        float _763 = fma(_751, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749)) - _724;
        float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
        float _780 = ((_767 * _761) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_767 * _762) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_767 * _763) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        float _819 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_785.x + (-0.5));
        float _821 = _819 * (_785.y + (-0.5));
        float _822 = _819 * (_785.z + (-0.5));
        float _829 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_792.x + (-0.5));
        float _831 = _829 * (_792.y + (-0.5));
        float _832 = _829 * (_792.z + (-0.5));
        float _839 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_799.x + (-0.5));
        float _841 = _839 * (_799.y + (-0.5));
        float _842 = _839 * (_799.z + (-0.5));
        float _849 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_806.x + (-0.5));
        float _851 = _849 * (_806.y + (-0.5));
        float _852 = _849 * (_806.z + (-0.5));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = _820 * 0.5;
        float _857 = _830 * 0.5;
        float _858 = _840 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _873 = (dot(vec3(_448, _449, _450), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _883 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3765 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_885 + 1.0))) + _890) * _853;
        float _900 = _821 * 0.5;
        float _901 = _831 * 0.5;
        float _902 = _841 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_448, _449, _450), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3798 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_927 + 1.0))) + _932) * _854;
        float _942 = _822 * 0.5;
        float _943 = _832 * 0.5;
        float _944 = _842 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_448, _449, _450), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3831 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_969 + 1.0))) + _974) * _855;
        _991 = _822;
        _993 = _821;
        _994 = _820;
        _995 = _832;
        _996 = _831;
        _997 = _830;
        _998 = _842;
        _999 = _841;
        _1000 = _840;
        _1001 = _855;
        _1002 = _854;
        _1003 = _853;
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
    }
    else
    {
        _991 = _992;
        _993 = _992;
        _994 = _992;
        _995 = _992;
        _996 = _992;
        _997 = _992;
        _998 = _992;
        _999 = _992;
        _1000 = _992;
        _1001 = _992;
        _1002 = _992;
        _1003 = _992;
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1032 = fma(_689, cbModelParam._m0[30u].z, fma(_685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _681));
        float _1036 = fma(_689, cbModelParam._m0[31u].z, fma(_685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _681));
        float _1040 = fma(_689, cbModelParam._m0[32u].z, fma(_685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _681));
        float _1063 = _681 + _448;
        float _1064 = _685 + _449;
        float _1065 = _689 + _450;
        float _1075 = fma(_1065, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063)) - _1032;
        float _1076 = fma(_1065, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063)) - _1036;
        float _1077 = fma(_1065, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063)) - _1040;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1032 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1036 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[35u].z) + ((((((_1040 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1131 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1098.x + (-0.5));
        float _1133 = _1131 * (_1098.y + (-0.5));
        float _1134 = _1131 * (_1098.z + (-0.5));
        float _1141 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1105.x + (-0.5));
        float _1143 = _1141 * (_1105.y + (-0.5));
        float _1144 = _1141 * (_1105.z + (-0.5));
        float _1151 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1112.x + (-0.5));
        float _1153 = _1151 * (_1112.y + (-0.5));
        float _1154 = _1151 * (_1112.z + (-0.5));
        float _1161 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1119.x + (-0.5));
        float _1163 = _1161 * (_1119.y + (-0.5));
        float _1164 = _1161 * (_1119.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_448, _449, _450), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3894 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1195 + 1.0))) + _1200) * _1165;
        float _1210 = _1133 * 0.5;
        float _1211 = _1143 * 0.5;
        float _1212 = _1153 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_448, _449, _450), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3927 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1237 + 1.0))) + _1242) * _1166;
        float _1252 = _1134 * 0.5;
        float _1253 = _1144 * 0.5;
        float _1254 = _1154 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_448, _449, _450), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3960 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1279 + 1.0))) + _1284) * _1167;
        _1301 = _1134;
        _1302 = _1133;
        _1303 = _1132;
        _1304 = _1144;
        _1305 = _1143;
        _1306 = _1142;
        _1307 = _1154;
        _1308 = _1153;
        _1309 = _1152;
        _1310 = _1167;
        _1311 = _1166;
        _1312 = _1165;
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _992;
        _1302 = _992;
        _1303 = _992;
        _1304 = _992;
        _1305 = _992;
        _1306 = _992;
        _1307 = _992;
        _1308 = _992;
        _1309 = _992;
        _1310 = _992;
        _1311 = _992;
        _1312 = _992;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1005)) + _1005;
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1348 = fma(_1327, cbSceneParam._m0[89u].z, fma(_1326, cbSceneParam._m0[89u].y, _1325 * cbSceneParam._m0[89u].x));
    float _1351 = fma(_1327, cbSceneParam._m0[90u].z, fma(_1326, cbSceneParam._m0[90u].y, _1325 * cbSceneParam._m0[90u].x));
    float _1354 = fma(_1327, cbSceneParam._m0[91u].z, fma(_1326, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1325));
    float _1369 = _625 * 0.5;
    float _1370 = _626 * 0.5;
    float _1371 = _627 * 0.5;
    float _1372 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1375 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1378 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1412;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1385 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_991, _995, _998, _1001));
        float _1389 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_993, _996, _999, _1002));
        float _1393 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_994, _997, _1000, _1003));
        float _1400 = dot(vec4(cbModelParam._m0[39u]), vec4(_1369, _1370, _1371, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1423;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1414 = dot(vec4(cbModelParam._m0[40u]), vec4(_1369, _1370, _1371, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1427 = (_1423 * cbModelParam._m0[1u].x) + (_1412 * (1.0 - cbModelParam._m0[1u].x));
    float _1437 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1437 : min(cbModelParam._m0[25u].z, _1437));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1485 = fma(_689, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681)) + cbModelParam._m0[13u].w;
        float _1489 = fma(_689, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681)) + cbModelParam._m0[14u].w;
        float _1493 = fma(_689, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681)) + cbModelParam._m0[15u].w;
        float _1496 = fma(_627, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625));
        float _1499 = fma(_627, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625));
        float _1502 = fma(_627, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625));
        float _1530;
        if (_1496 > 0.0)
        {
            _1530 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1530 = frontier_phi_14_12_ladder;
        }
        float _1705;
        if (_1499 > 0.0)
        {
            _1705 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1705 = frontier_phi_23_19_ladder;
        }
        float _2000;
        if (_1502 > 0.0)
        {
            _2000 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2000 = frontier_phi_35_30_ladder;
        }
        float _2002 = isnan(_1705) ? _1530 : (isnan(_1530) ? _1705 : min(_1530, _1705));
        float _2003 = isnan(_2000) ? _2002 : (isnan(_2002) ? _2000 : min(_2002, _2000));
        float _2007 = (_2003 * _1496) + _1485;
        float _2008 = (_2003 * _1499) + _1489;
        float _2009 = (_2003 * _1502) + _1493;
        float _2010 = _2003 * 9.9999997473787516355514526367188e-05;
        float _2012 = (-1.0) - _2010;
        float _2014 = _2010 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2009 > _2014) || ((_2009 < _2012) || ((_2008 > _2014) || ((_2008 < _2012) || ((_2007 < _2012) || (_2007 > _2014))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2154 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2009, cbModelParam._m0[9u].z, fma(_2008, cbModelParam._m0[9u].y, _2007 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2009, cbModelParam._m0[10u].z, fma(_2008, cbModelParam._m0[10u].y, _2007 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2009, cbModelParam._m0[11u].z, fma(_2008, cbModelParam._m0[11u].y, _2007 * cbModelParam._m0[11u].x))), _1438);
            frontier_phi_13_35_ladder = _2154.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2154.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2154.x * cbModelParam._m0[1u].y;
        }
        _1518 = frontier_phi_13_35_ladder_2;
        _1520 = frontier_phi_13_35_ladder_1;
        _1522 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_625, _626, _627), _1438);
        _1518 = _1506.x * cbModelParam._m0[1u].y;
        _1520 = _1506.y * cbModelParam._m0[1u].y;
        _1522 = _1506.z * cbModelParam._m0[1u].y;
    }
    float _1526 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1526 : min(cbModelParam._m0[25u].w, _1526));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1584 = fma(_689, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681)) + cbModelParam._m0[21u].w;
        float _1588 = fma(_689, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681)) + cbModelParam._m0[22u].w;
        float _1592 = fma(_689, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681)) + cbModelParam._m0[23u].w;
        float _1595 = fma(_627, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625));
        float _1598 = fma(_627, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625));
        float _1601 = fma(_627, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625));
        float _1710;
        if (_1595 > 0.0)
        {
            _1710 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1710 = frontier_phi_25_21_ladder;
        }
        float _2027;
        if (_1598 > 0.0)
        {
            _2027 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2027 = frontier_phi_37_32_ladder;
        }
        float _2365;
        if (_1601 > 0.0)
        {
            _2365 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2365 = frontier_phi_47_44_ladder;
        }
        float _2367 = isnan(_2027) ? _1710 : (isnan(_1710) ? _2027 : min(_1710, _2027));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1595) + _1584;
        float _2373 = (_2368 * _1598) + _1588;
        float _2374 = (_2368 * _1601) + _1592;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2374, cbModelParam._m0[17u].z, fma(_2373, cbModelParam._m0[17u].y, _2372 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2374, cbModelParam._m0[18u].z, fma(_2373, cbModelParam._m0[18u].y, _2372 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2374, cbModelParam._m0[19u].z, fma(_2373, cbModelParam._m0[19u].y, _2372 * cbModelParam._m0[19u].x))), _1527);
            frontier_phi_22_47_ladder = _2496.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2496.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2496.x * cbModelParam._m0[1u].z;
        }
        _1620 = frontier_phi_22_47_ladder_2;
        _1622 = frontier_phi_22_47_ladder_1;
        _1624 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_625, _626, _627), _1527);
        _1620 = _1604.x * cbModelParam._m0[1u].z;
        _1622 = _1604.y * cbModelParam._m0[1u].z;
        _1624 = _1604.z * cbModelParam._m0[1u].z;
    }
    float _1637 = (((_652 * _602) + _653) * _617) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1639 = (((_652 * _604) + _653) * _617) * ((cbModelParam._m0[1u].w * (_1622 - _1520)) + _1520);
    float _1641 = (((_652 * _605) + _653) * _617) * ((cbModelParam._m0[1u].w * (_1624 - _1522)) + _1522);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1697 = _1684 / _1696;
    float _1698 = _1688 / _1696;
    float _1699 = _1692 / _1696;
    float _1846;
    float _1847;
    float _1848;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1726 = ((uint(_1699 > cbSceneParam._m0[59u].y) + uint(_1699 > cbSceneParam._m0[59u].x)) + uint(_1699 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1727 = _1726 + 43u;
        uint _1735 = _1726 + 44u;
        uint _1743 = _1726 + 45u;
        uint _1751 = _1726 + 46u;
        float _1762 = fma(_1696, cbSceneParam._m0[_1727].w, fma(_1692, cbSceneParam._m0[_1727].z, fma(_1688, cbSceneParam._m0[_1727].y, _1684 * cbSceneParam._m0[_1727].x)));
        float _1766 = fma(_1696, cbSceneParam._m0[_1735].w, fma(_1692, cbSceneParam._m0[_1735].z, fma(_1688, cbSceneParam._m0[_1735].y, _1684 * cbSceneParam._m0[_1735].x)));
        float _1774 = fma(_1696, cbSceneParam._m0[_1751].w, fma(_1692, cbSceneParam._m0[_1751].z, fma(_1688, cbSceneParam._m0[_1751].y, _1684 * cbSceneParam._m0[_1751].x)));
        float _1779 = cbSceneParam._m0[33u].z * _1774;
        float _1781 = cbSceneParam._m0[33u].w * _1774;
        float _1784 = fma(_1696, cbSceneParam._m0[_1743].w, fma(_1692, cbSceneParam._m0[_1743].z, fma(_1688, cbSceneParam._m0[_1743].y, _1684 * cbSceneParam._m0[_1743].x))) / _1774;
        float _1832 = (cbSceneParam._m0[33u].x - sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699))) * cbSceneParam._m0[33u].y;
        float _4086 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1839 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1779 + _1762) / _1774, (_1781 + _1766) / _1774), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1781 + _1762) / _1774, (_1766 - _1779) / _1774), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 - _1779) / _1774, (_1766 - _1781) / _1774), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 - _1781) / _1774, (_1779 + _1766) / _1774), _1784), 0.0)).x), vec4(0.25)));
        _1846 = 1.0 - (_1839 * cbSceneParam._m0[34u].x);
        _1847 = 1.0 - (_1839 * cbSceneParam._m0[34u].y);
        _1848 = 1.0 - (_1839 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1846 = 1.0;
        _1847 = 1.0;
        _1848 = 1.0;
    }
    float _1912;
    float _1914;
    float _1916;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1900 = fma(_1696, cbSceneParam._m0[63u].w, fma(_1692, cbSceneParam._m0[63u].z, fma(_1688, cbSceneParam._m0[63u].y, _1684 * cbSceneParam._m0[63u].x)));
        float _1901 = fma(_1696, cbSceneParam._m0[60u].w, fma(_1692, cbSceneParam._m0[60u].z, fma(_1688, cbSceneParam._m0[60u].y, _1684 * cbSceneParam._m0[60u].x))) / _1900;
        float _1902 = fma(_1696, cbSceneParam._m0[61u].w, fma(_1692, cbSceneParam._m0[61u].z, fma(_1688, cbSceneParam._m0[61u].y, _1684 * cbSceneParam._m0[61u].x))) / _1900;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1901 >= cbSceneParam._m0[64u].x) && (_1902 >= cbSceneParam._m0[64u].y)) && (_1901 <= cbSceneParam._m0[64u].z)) && (_1902 <= cbSceneParam._m0[64u].w))
        {
            float _2040 = fma(_1696, cbSceneParam._m0[62u].w, fma(_1692, cbSceneParam._m0[62u].z, fma(_1688, cbSceneParam._m0[62u].y, _1684 * cbSceneParam._m0[62u].x))) / _1900;
            float _2044 = isnan(cbSceneParam._m0[41u].w) ? _2040 : (isnan(_2040) ? cbSceneParam._m0[41u].w : max(_2040, cbSceneParam._m0[41u].w));
            float _2087 = (cbSceneParam._m0[33u].x - sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699))) * cbSceneParam._m0[33u].y;
            float _4102 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
            float _2094 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1901, cbSceneParam._m0[33u].w + _1902), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1901, _1902 - cbSceneParam._m0[33u].z), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1901 - cbSceneParam._m0[33u].z, _1902 - cbSceneParam._m0[33u].w), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1901 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1902), _2044), 0.0)).x), vec4(0.25)));
            float _2098 = 1.0 - (_2094 * cbSceneParam._m0[34u].x);
            float _2099 = 1.0 - (_2094 * cbSceneParam._m0[34u].y);
            float _2100 = 1.0 - (_2094 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2100) ? _1848 : (isnan(_1848) ? _2100 : min(_1848, _2100));
            frontier_phi_34_33_ladder_1 = isnan(_2099) ? _1847 : (isnan(_1847) ? _2099 : min(_1847, _2099));
            frontier_phi_34_33_ladder_2 = isnan(_2098) ? _1846 : (isnan(_1846) ? _2098 : min(_1846, _2098));
        }
        else
        {
            frontier_phi_34_33_ladder = _1848;
            frontier_phi_34_33_ladder_1 = _1847;
            frontier_phi_34_33_ladder_2 = _1846;
        }
        _1912 = frontier_phi_34_33_ladder_2;
        _1914 = frontier_phi_34_33_ladder_1;
        _1916 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1912 = _1846;
        _1914 = _1847;
        _1916 = _1848;
    }
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1931 = _617 + (-1.0);
    float _1936 = (cbLight._m0[_1924].x * _1931) + 1.0;
    float _1937 = (cbLight._m0[_1924].y * _1931) + 1.0;
    float _1938 = (cbLight._m0[_1924].z * _1931) + 1.0;
    float _1939 = (cbLight._m0[_1924].w * _1931) + 1.0;
    uint _1940 = _1923 + 5u;
    float _1946 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1950 = _1923 + 4u;
    float _1959 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1963 = _1923 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_448, _449, _450));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_448, _449, _450));
    float _4138 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _4149 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1940].x * _1946) * _1984) + (((cbLight._m0[_1950].x * _1912) * _1959) * _1982);
    float _1992 = ((_1946 * cbLight._m0[_1940].y) * _1984) + (((cbLight._m0[_1950].y * _1914) * _1959) * _1982);
    float _1993 = ((_1946 * cbLight._m0[_1940].z) * _1984) + (((cbLight._m0[_1950].z * _1916) * _1959) * _1982);
    uvec4 _1997 = floatBitsToUint(cbLight._m0[_1923 + 12u]);
    bool _1999 = _1997.x == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_1999)
    {
        _2101 = _1991;
        _2103 = _1992;
        _2105 = _1993;
    }
    else
    {
        uint _2109 = _1923 + 6u;
        float _2125 = (dot(vec3(cbLight._m0[_1923 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4160 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2128 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2101 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _1991;
        _2103 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _1992;
        _2105 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _1993;
    }
    bool _2108 = _1997.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2108)
    {
        _2163 = _2101;
        _2165 = _2103;
        _2167 = _2105;
    }
    else
    {
        uint _2336 = _1923 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_1923 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4176 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2355 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2163 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2101;
        _2165 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2103;
        _2167 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2105;
    }
    uint _2170 = _1923 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _451) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1923].x + _529;
    float _2186 = cbLight._m0[_1923].y + _530;
    float _2187 = cbLight._m0[_1923].z + _531;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1923].xyz));
    float _4192 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2199 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2200 = dot(vec3(_448, _449, _450), vec3(_2192, _2193, _2194));
    float _4214 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2192, _2193, _2194));
    float _4225 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _599;
    float _2223 = 0.959999978542327880859375 - _600;
    float _2224 = 0.959999978542327880859375 - _601;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4236 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2258 = _1923 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _451) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_1963].x + _529;
    float _2272 = cbLight._m0[_1963].y + _530;
    float _2273 = cbLight._m0[_1963].z + _531;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1963].xyz));
    float _4247 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2285 = dot(vec3(_448, _449, _450), vec3(_2278, _2279, _2280));
    float _4258 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2278, _2279, _2280));
    float _4269 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
    float _2311 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2199 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2311) + _2270) * _2284))) * _2284;
    float _4280 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2333 = (((((_2304 * _2221) + _602) * cbLight._m0[_2258].x) * _2323) * _1946) + ((((cbLight._m0[_2170].x * _1912) * ((_2220 * _2221) + _602)) * _2244) * _1959);
    float _2334 = (((((_2304 * _2223) + _604) * cbLight._m0[_2258].y) * _2323) * _1946) + ((((cbLight._m0[_2170].y * _1914) * ((_2220 * _2223) + _604)) * _2244) * _1959);
    float _2335 = (((((_2304 * _2224) + _605) * cbLight._m0[_2258].z) * _2323) * _1946) + ((((cbLight._m0[_2170].z * _1916) * ((_2220 * _2224) + _605)) * _2244) * _1959);
    float _2391;
    float _2393;
    float _2395;
    if (_1999)
    {
        _2391 = _2333;
        _2393 = _2334;
        _2395 = _2335;
    }
    else
    {
        uint _2397 = _1923 + 2u;
        uint _2401 = _1923 + 10u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _451) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _529;
        float _2418 = cbLight._m0[_2397].y + _530;
        float _2419 = cbLight._m0[_2397].z + _531;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2397].xyz));
        float _4291 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2431 = dot(vec3(_448, _449, _450), vec3(_2424, _2425, _2426));
        float _4302 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4313 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2199 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2457) + _2416) * _2430))) * _2430;
        float _4324 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2391 = (((((_2450 * _2221) + _602) * cbLight._m0[_2401].x) * _2469) * _2470) + _2333;
        _2393 = (((((_2450 * _2223) + _604) * cbLight._m0[_2401].y) * _2469) * _2470) + _2334;
        _2395 = (((((_2450 * _2224) + _605) * cbLight._m0[_2401].z) * _2469) * _2470) + _2335;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2108)
    {
        _2501 = _2391;
        _2503 = _2393;
        _2505 = _2395;
    }
    else
    {
        uint _2512 = _1923 + 3u;
        uint _2516 = _1923 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _451) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _529;
        float _2533 = cbLight._m0[_2512].y + _530;
        float _2534 = cbLight._m0[_2512].z + _531;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2512].xyz));
        float _4340 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2546 = dot(vec3(_448, _449, _450), vec3(_2539, _2540, _2541));
        float _4351 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4362 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2199 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2572) + _2531) * _2545))) * _2545;
        float _4373 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2501 = (((((_2565 * _2221) + _602) * cbLight._m0[_2516].x) * _2584) * _2585) + _2391;
        _2503 = (((((_2565 * _2223) + _604) * cbLight._m0[_2516].y) * _2584) * _2585) + _2393;
        _2505 = (((((_2565 * _2224) + _605) * cbLight._m0[_2516].z) * _2584) * _2585) + _2395;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1921.y == 0u)
    {
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _2607)));
        float _2628 = (log2(_1699 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
        }
        else
        {
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            uint _2869 = 0u;
            uint _2878;
            bool _2879;
            for (;;)
            {
                _2878 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                _2879 = _2878 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2879)
                {
                    frontier_phi_66_pred = _2868;
                    frontier_phi_66_pred_1 = _2867;
                    frontier_phi_66_pred_2 = _2866;
                    frontier_phi_66_pred_3 = _2865;
                    frontier_phi_66_pred_4 = _2864;
                    frontier_phi_66_pred_5 = _2863;
                }
                else
                {
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    uint _2993;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2878;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    for (;;)
                    {
                        uint _2997 = uint(findLSB(_2993)) + (_2869 << 5u);
                        uint _2994 = (_2993 + 4294967295u) & _2993;
                        uint _2999 = _2997 * 48u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3019 = (_2997 * 48u) + 4u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3038 = (_2997 * 48u) + 8u;
                        vec3 _3049 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x));
                        float _3053 = _3013.x - _1697;
                        float _3054 = _3013.y - _1698;
                        float _3055 = _3013.z - _1699;
                        float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                        float _3059 = inversesqrt(_3056);
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3063 = dot(vec3(_558, _561, _564), vec3(_3060, _3061, _3062));
                        float _3068 = 1.0 - (_3056 * _3013.w);
                        float _4399 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3070 = sqrt(_3056) * _3032.w;
                        float _3073 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _3063) + _3074;
                        float _3080 = _3070 * _3070;
                        float _3084 = ((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3069) / ((_3080 * 0.699999988079071044921875) + 1.0);
                        float _3088 = (-0.0) - _1697;
                        float _3089 = (-0.0) - _1698;
                        float _3090 = (-0.0) - _1699;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3104 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                        float _3105 = 1.0 - _633;
                        float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                        float _3113 = _3112 * _3112;
                        float _3114 = _3113 * _3113;
                        float _3115 = _3095 + _3060;
                        float _3116 = _3096 + _3061;
                        float _3117 = _3097 + _3062;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3125 = dot(vec3(_558, _561, _564), vec3(_3095, _3096, _3097));
                        float _4415 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3129 = dot(vec3(_558, _561, _564), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                        float _4426 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                        float _3137 = _3073 * _3113;
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3063) + _3138;
                        float _4437 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3143 = 1.0 - _3113;
                        float _3153 = (0.5 / (((_3142 * ((_3128 * _3143) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3113) * _3128))) * _3142;
                        float _4448 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3164 = (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3136 * _3136) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125))) * _3069;
                        _2922 = (_3084 * _3032.x) + _2990;
                        _2923 = (_3084 * _3032.y) + _2991;
                        _2924 = (_3084 * _3032.z) + _2992;
                        _2919 = (_3164 * _3049.x) + _2987;
                        _2920 = (_3164 * _3049.y) + _2988;
                        _2921 = (_3164 * _3049.z) + _2989;
                        if (_2994 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2994;
                        }
                    }
                    frontier_phi_66_pred = _2924;
                    frontier_phi_66_pred_1 = _2923;
                    frontier_phi_66_pred_2 = _2922;
                    frontier_phi_66_pred_3 = _2921;
                    frontier_phi_66_pred_4 = _2920;
                    frontier_phi_66_pred_5 = _2919;
                }
                _2729 = frontier_phi_66_pred;
                _2727 = frontier_phi_66_pred_1;
                _2725 = frontier_phi_66_pred_2;
                _2723 = frontier_phi_66_pred_3;
                _2721 = frontier_phi_66_pred_4;
                _2719 = frontier_phi_66_pred_5;
                uint _2870 = _2869 + 1u;
                if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2863 = _2719;
                    _2864 = _2721;
                    _2865 = _2723;
                    _2866 = _2725;
                    _2867 = _2727;
                    _2868 = _2729;
                    _2869 = _2870;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
        }
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.z;
        uint _2735 = (_2733 >> 8u) & 15u;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((4294967295u << _2735) & _2638) == 0u)
        {
            _2831 = _2718;
            _2833 = _2720;
            _2835 = _2722;
            _2837 = _2724;
            _2839 = _2726;
            _2841 = _2728;
        }
        else
        {
            float _2856 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
            float _2857 = _2856 * _1697;
            float _2858 = _2856 * _1698;
            float _2859 = _2856 * _1699;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2735 < ((_2733 >> 12u) & 15u))
            {
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2970 = _2718;
                float _2971 = _2720;
                float _2972 = _2722;
                float _2973 = _2724;
                float _2974 = _2726;
                float _2975 = _2728;
                uint _2976 = _2735;
                uint _2985;
                bool _2986;
                for (;;)
                {
                    _2985 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                    _2986 = _2985 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2986)
                    {
                        frontier_phi_72_pred = _2975;
                        frontier_phi_72_pred_1 = _2974;
                        frontier_phi_72_pred_2 = _2973;
                        frontier_phi_72_pred_3 = _2972;
                        frontier_phi_72_pred_4 = _2971;
                        frontier_phi_72_pred_5 = _2970;
                    }
                    else
                    {
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3182 = _2970;
                        float _3183 = _2971;
                        float _3184 = _2972;
                        float _3185 = _2973;
                        float _3186 = _2974;
                        float _3187 = _2975;
                        uint _3188 = _2985;
                        uint _3189;
                        vec4 _3214;
                        float _3215;
                        vec4 _3230;
                        vec3 _3242;
                        vec4 _3258;
                        vec4 _3274;
                        float _3321;
                        bool _3322;
                        for (;;)
                        {
                            uint _3199 = ((_2976 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3188));
                            _3189 = (_3188 + 4294967295u) & _3188;
                            uint _3201 = _3199 * 40u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3215 = _3214.w;
                            uint _3217 = (_3199 * 40u) + 4u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3199 * 40u) + 8u;
                            _3242 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x));
                            uint _3245 = (_3199 * 40u) + 16u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3261 = (_3199 * 40u) + 20u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3277 = (_3199 * 40u) + 24u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3296 = (_3199 * 40u) + 28u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3321 = fma(_1699, _3309.z, fma(_1698, _3309.y, _3309.x * _1697)) + _3309.w;
                            _3322 = !((fma(_1699, _3290.z, fma(_1698, _3290.y, _3290.x * _1697)) + _3290.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3322)
                            {
                                float _3349 = _3214.x - _1697;
                                float _3350 = _3214.y - _1698;
                                float _3351 = _3214.z - _1699;
                                float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                                float _3355 = inversesqrt(_3352);
                                float _3356 = _3355 * _3349;
                                float _3357 = _3355 * _3350;
                                float _3358 = _3355 * _3351;
                                float _3362 = 1.0 - (_3352 / (_3215 * _3215));
                                float _4459 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3367 = sqrt(_3352) * _3230.w;
                                float _3369 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                                float _3370 = _3369 * _3369;
                                float _3373 = ((1.0 - _3370) * dot(vec3(_3356, _3357, _3358), vec3(_558, _561, _564))) + _3370;
                                float _3376 = _3367 * _3367;
                                float _3380 = (fma(_1699, _3258.z, fma(_1698, _3258.y, _3258.x * _1697)) + _3258.w) / _3321;
                                float _3381 = (fma(_1699, _3274.z, fma(_1698, _3274.y, _3274.x * _1697)) + _3274.w) / _3321;
                                float _3385 = 1.0 - dot(vec2(_3380, _3381), vec2(_3380, _3381));
                                float _4475 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3387 = _3386 * (((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3363) / ((_3376 * 0.699999988079071044921875) + 1.0));
                                float _3399 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                                float _3400 = 1.0 - _633;
                                float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                                float _3408 = _3407 * _3407;
                                float _3409 = _3408 * _3408;
                                float _3410 = _3356 - _2857;
                                float _3411 = _3357 - _2858;
                                float _3412 = _3358 - _2859;
                                float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                                float _3420 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2857, (-0.0) - _2858, (-0.0) - _2859));
                                float _4486 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3424 = dot(vec3(_558, _561, _564), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                                float _4497 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                                float _3432 = _3369 * _3408;
                                float _3433 = _3432 * _3432;
                                float _3439 = ((1.0 - _3433) * dot(vec3(_558, _561, _564), vec3(_3356, _3357, _3358))) + _3433;
                                float _4508 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3441 = 1.0 - _3408;
                                float _3451 = (0.5 / (((_3440 * ((_3423 * _3441) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3408) * _3423))) * _3440;
                                float _4519 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3461 = (_3386 * _3363) * (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3431 * _3431) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3387 * _3230.y;
                                frontier_phi_78_pred_1 = _3387 * _3230.x;
                                frontier_phi_78_pred_2 = _3461 * _3242.z;
                                frontier_phi_78_pred_3 = _3461 * _3242.y;
                                frontier_phi_78_pred_4 = _3461 * _3242.x;
                                frontier_phi_78_pred_5 = _3387 * _3230.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_78_pred;
                            _3468 = frontier_phi_78_pred_1;
                            _3467 = frontier_phi_78_pred_2;
                            _3466 = frontier_phi_78_pred_3;
                            _3465 = frontier_phi_78_pred_4;
                            _3470 = frontier_phi_78_pred_5;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            _3169 = _3465 + _3182;
                            _3170 = _3466 + _3183;
                            _3171 = _3467 + _3184;
                            if (_3189 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3189;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3174;
                        frontier_phi_72_pred_1 = _3173;
                        frontier_phi_72_pred_2 = _3172;
                        frontier_phi_72_pred_3 = _3171;
                        frontier_phi_72_pred_4 = _3170;
                        frontier_phi_72_pred_5 = _3169;
                    }
                    _2842 = frontier_phi_72_pred;
                    _2840 = frontier_phi_72_pred_1;
                    _2838 = frontier_phi_72_pred_2;
                    _2836 = frontier_phi_72_pred_3;
                    _2834 = frontier_phi_72_pred_4;
                    _2832 = frontier_phi_72_pred_5;
                    uint _2977 = _2976 + 1u;
                    if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2970 = _2832;
                        _2971 = _2834;
                        _2972 = _2836;
                        _2973 = _2838;
                        _2974 = _2840;
                        _2975 = _2842;
                        _2976 = _2977;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2842;
                frontier_phi_60_61_ladder_1 = _2840;
                frontier_phi_60_61_ladder_2 = _2836;
                frontier_phi_60_61_ladder_3 = _2834;
                frontier_phi_60_61_ladder_4 = _2832;
                frontier_phi_60_61_ladder_5 = _2838;
            }
            else
            {
                frontier_phi_60_61_ladder = _2728;
                frontier_phi_60_61_ladder_1 = _2726;
                frontier_phi_60_61_ladder_2 = _2722;
                frontier_phi_60_61_ladder_3 = _2720;
                frontier_phi_60_61_ladder_4 = _2718;
                frontier_phi_60_61_ladder_5 = _2724;
            }
            _2831 = frontier_phi_60_61_ladder_4;
            _2833 = frontier_phi_60_61_ladder_3;
            _2835 = frontier_phi_60_61_ladder_2;
            _2837 = frontier_phi_60_61_ladder_5;
            _2839 = frontier_phi_60_61_ladder_1;
            _2841 = frontier_phi_60_61_ladder;
        }
        float _2846 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _2651 = (_2846 * _2837) + _2163;
        _2653 = (_2846 * _2839) + _2165;
        _2655 = (_2846 * _2841) + _2167;
        _2657 = ((_2831 * _602) * _2846) + _2501;
        _2659 = ((_2833 * _604) * _2846) + _2503;
        _2661 = ((_2835 * _605) * _2846) + _2505;
    }
    else
    {
        _2651 = _2163;
        _2653 = _2165;
        _2655 = _2167;
        _2657 = _2501;
        _2659 = _2503;
        _2661 = _2505;
    }
    float _4535 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4546 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4557 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    uint _2681 = _577 + 6u;
    float _2689 = _537 / cbSceneParam._m0[86u].x;
    float _2690 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2743 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2744 = _2743 / _471;
        float _2755 = _2744 * _522;
        float _2756 = _523 * _2744;
        float _2757 = (-0.0) - _2756;
        float _2759 = _2744 * _524;
        float _2761 = (cbSceneParam._m0[77u].w * _2757) / _2743;
        float _2762 = _2761 + cbSceneParam._m0[79u].w;
        float _2763 = cbSceneParam._m0[79u].w - _2756;
        float _2769 = sqrt(((_2755 * _2755) + (_2756 * _2756)) + (_2759 * _2759));
        float _2772 = (1.0 - (cbSceneParam._m0[77u].w / _2743)) * _2769;
        float _2777 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2779 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2932;
        if (abs((_2757 - _2761) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2932 = ((((_2762 > 0.0) ? exp2(_2777 * _2762) : (2.0 - exp2(_2779 * _2762))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2772;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2763) ? _2762 : (isnan(_2762) ? _2763 : max(_2762, _2763));
            float _2894 = isnan(_2763) ? _2762 : (isnan(_2762) ? _2763 : min(_2762, _2763));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _2932 = ((abs(_2769 / _2757) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2777 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2777 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2779 * _2903) - exp2(_2779 * _2904)) * _2892))) + (_2772 * cbSceneParam._m0[80u].z);
        }
        vec4 _2934 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2943 = exp2((_2932 * (-1.44269502162933349609375)) * (1.0 - _2934.w));
        float _2944 = log2(_2943);
        float _2960 = log2(_2709);
        _2781 = (exp2(_2960 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].x)) * _2934.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2783 = (exp2(_2960 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].y)) * _2934.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2785 = (exp2(_2960 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].z)) * _2934.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2787 = _2943 * _2709;
    }
    else
    {
        _2781 = _2706;
        _2783 = _2707;
        _2785 = _2708;
        _2787 = _2709;
    }
    float _2799 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2800 = _2799 == 3.0;
    float _2801 = log2(_2787);
    float _2808 = exp2(_2801 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2651 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _617))) + ((_2657 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1427)) * cbPerFrame._m0[3u].x));
    float _2809 = exp2(_2801 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2653 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _617))) + ((_2659 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1427)) * cbPerFrame._m0[3u].x));
    float _2810 = exp2(_2801 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2655 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _617))) + ((_2661 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1427)) * cbPerFrame._m0[3u].x));
    float _2819 = (_2799 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2819 * (_2800 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.y = _2819 * (_2800 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.z = _2819 * (_2800 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2785)));
    SV_Target.w = cbInstanceData._m0[_2681].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2681].w;
}


