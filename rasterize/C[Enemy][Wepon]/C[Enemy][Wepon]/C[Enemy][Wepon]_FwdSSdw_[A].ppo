#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_24;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1035;
float _3446;
float _3447;
float _3448;
float _3449;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _236.z;
    float _249 = exp2(log2(_241 * cbMtdParam._m0[13u].x) * cbMtdParam._m0[12u].y);
    float _250 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _251 = isnan(1.0) ? _250 : (isnan(_250) ? 1.0 : min(_250, 1.0));
    float _271 = ((cbMtdParam._m0[10u].x - cbMtdParam._m0[9u].x) * _251) + cbMtdParam._m0[9u].x;
    float _272 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[9u].y) * _251) + cbMtdParam._m0[9u].y;
    float _273 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[9u].z) * _251) + cbMtdParam._m0[9u].z;
    float _291 = exp2(log2(texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x) * cbMtdParam._m0[13u].y);
    vec4 _313 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = (((_291 * (cbMtdParam._m0[11u].x - _271)) + _271) * 4.55000019073486328125) * _313.x;
    float _322 = (((_291 * (cbMtdParam._m0[11u].y - _272)) + _272) * 4.55000019073486328125) * _313.y;
    float _324 = (((_291 * (cbMtdParam._m0[11u].z - _273)) + _273) * 4.55000019073486328125) * _313.z;
    float _333 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].z) * _251) + cbMtdParam._m0[12u].z;
    float _336 = ((cbMtdParam._m0[12u].w - _333) * _291) + _333;
    vec4 _349 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _367 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _369 = _367.x;
    float _370 = _367.y;
    float _373 = cbMtdParam._m0[12u].x + _367.z;
    float _376 = (((cbMtdParam._m0[14u].x + _349.z) - _373) * _251) + _373;
    vec4 _389 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _398 = (((_389.z - _376) + cbMtdParam._m0[14u].z) * _291) + _376;
    float _404 = ((((_241 * 2.0) * _398) - _398) * cbMtdParam._m0[13u].z) + _398;
    float _415 = ((_349.x - _369) * _251) + _369;
    float _416 = ((_349.y - _370) * _251) + _370;
    float _425 = ((((_389.x - _415) * _291) + _415) * 2.0) + (-1.0);
    float _426 = ((((_389.y - _416) * _291) + _416) * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3468 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    float _435 = _425 + (cbMtdParam._m0[13u].w * ((_236.x * 2.0) + (-1.0)));
    float _436 = _426 + (cbMtdParam._m0[13u].w * ((_236.y * 2.0) + (-1.0)));
    float _439 = fma(_432, _202 * NORMAL.x, fma(_436, _209 * TANGENT.x, (_195 * _188) * _435));
    float _442 = fma(_432, _202 * NORMAL.y, fma(_436, _209 * TANGENT.y, (_195 * _189) * _435));
    float _445 = fma(_432, _202 * NORMAL.z, fma(_436, _209 * TANGENT.z, (_195 * _190) * _435));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    float _3479 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _453 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3501 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3512 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3523 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _457 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    vec4 _538 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _540 = _538.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _714 = sqrt(((_524 * _524) + (_525 * _525)) + (_526 * _526));
        float _720 = (cbMatDynParam._m0[5u].x * _714) + cbMatDynParam._m0[5u].y;
        float _3534 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _725 = (cbMatDynParam._m0[5u].z * _714) + cbMatDynParam._m0[5u].w;
        float _3545 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) - _721)) + _721) < ((_540 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_452, cbSceneParam._m0[5u].z, fma(_451, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _450));
    float _575 = fma(_452, cbSceneParam._m0[6u].z, fma(_451, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _450));
    float _578 = fma(_452, cbSceneParam._m0[7u].z, fma(_451, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _450));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = _591 + 9u;
    uint _593 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3556 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _605 = 1.0 - _457;
    float _606 = _602 * _605;
    float _607 = _603 * _605;
    float _608 = _604 * _605;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _457;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _457;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _457;
    float _616 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    float _619 = _615 + 0.039999999105930328369140625;
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _631 = _628.x * TEXCOORD.z;
    float _632 = dot(vec3(_450, _451, _452), vec3(_531, _532, _533));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _450) - _531;
    float _640 = (_635 * _451) - _532;
    float _641 = (_635 * _452) - _533;
    float _645 = abs(dot(vec3(_531, _532, _533), vec3(_450, _451, _452)));
    float _3589 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_453);
    float _660 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _666 = (1.0 - _660) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _667 = _660 * _647;
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1034;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_703, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695));
        float _763 = fma(_703, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695));
        float _767 = fma(_703, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695));
        float _792 = _695 + _450;
        float _793 = _699 + _451;
        float _794 = _703 + _452;
        float _804 = fma(_794, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792)) - _759;
        float _805 = fma(_794, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792)) - _763;
        float _806 = fma(_794, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792)) - _767;
        float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
        float _823 = ((_810 * _804) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_810 * _805) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_810 * _806) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        float _862 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_828.x + (-0.5));
        float _864 = _862 * (_828.y + (-0.5));
        float _865 = _862 * (_828.z + (-0.5));
        float _872 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_835.x + (-0.5));
        float _874 = _872 * (_835.y + (-0.5));
        float _875 = _872 * (_835.z + (-0.5));
        float _882 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_842.x + (-0.5));
        float _884 = _882 * (_842.y + (-0.5));
        float _885 = _882 * (_842.z + (-0.5));
        float _892 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_849.x + (-0.5));
        float _894 = _892 * (_849.y + (-0.5));
        float _895 = _892 * (_849.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _916 = (dot(vec3(_450, _451, _452), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _926 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3637 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_928 + 1.0))) + _933) * _896;
        float _943 = _864 * 0.5;
        float _944 = _874 * 0.5;
        float _945 = _884 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_450, _451, _452), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3670 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_970 + 1.0))) + _975) * _897;
        float _985 = _865 * 0.5;
        float _986 = _875 * 0.5;
        float _987 = _885 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_450, _451, _452), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3703 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1012 + 1.0))) + _1017) * _898;
        _1034 = _865;
        _1036 = _864;
        _1037 = _863;
        _1038 = _875;
        _1039 = _874;
        _1040 = _873;
        _1041 = _885;
        _1042 = _884;
        _1043 = _883;
        _1044 = _898;
        _1045 = _897;
        _1046 = _896;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _1035;
        _1036 = _1035;
        _1037 = _1035;
        _1038 = _1035;
        _1039 = _1035;
        _1040 = _1035;
        _1041 = _1035;
        _1042 = _1035;
        _1043 = _1035;
        _1044 = _1035;
        _1045 = _1035;
        _1046 = _1035;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_703, cbModelParam._m0[30u].z, fma(_699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _695));
        float _1082 = fma(_703, cbModelParam._m0[31u].z, fma(_699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _695));
        float _1086 = fma(_703, cbModelParam._m0[32u].z, fma(_699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _695));
        float _1109 = _695 + _450;
        float _1110 = _699 + _451;
        float _1111 = _703 + _452;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_450, _451, _452), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3766 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_450, _451, _452), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3799 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_450, _451, _452), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3832 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1035;
        _1348 = _1035;
        _1349 = _1035;
        _1350 = _1035;
        _1351 = _1035;
        _1352 = _1035;
        _1353 = _1035;
        _1354 = _1035;
        _1355 = _1035;
        _1356 = _1035;
        _1357 = _1035;
        _1358 = _1035;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1048)) + _1048;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _639 * 0.5;
    float _1416 = _640 * 0.5;
    float _1417 = _641 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1034, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _453);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_703, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_703, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_703, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1545 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1548 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1576 = frontier_phi_17_15_ladder;
        }
        float _1803;
        if (_1545 > 0.0)
        {
            _1803 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1803 = frontier_phi_26_22_ladder;
        }
        float _2060;
        if (_1548 > 0.0)
        {
            _2060 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2060 = frontier_phi_38_33_ladder;
        }
        float _2062 = isnan(_1803) ? _1576 : (isnan(_1576) ? _1803 : min(_1576, _1803));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1542) + _1531;
        float _2068 = (_2063 * _1545) + _1535;
        float _2069 = (_2063 * _1548) + _1539;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2197 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_16_38_ladder = _2197.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2197.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2197.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_16_38_ladder_2;
        _1566 = frontier_phi_16_38_ladder_1;
        _1568 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1484);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _453);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_703, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_703, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_703, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1644 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1647 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1808;
        if (_1641 > 0.0)
        {
            _1808 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1808 = frontier_phi_28_24_ladder;
        }
        float _2087;
        if (_1644 > 0.0)
        {
            _2087 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2087 = frontier_phi_40_35_ladder;
        }
        float _2300;
        if (_1647 > 0.0)
        {
            _2300 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2300 = frontier_phi_49_46_ladder;
        }
        float _2302 = isnan(_2087) ? _1808 : (isnan(_1808) ? _2087 : min(_1808, _2087));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1641) + _1630;
        float _2308 = (_2303 * _1644) + _1634;
        float _2309 = (_2303 * _1647) + _1638;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_25_49_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_25_49_ladder_2;
        _1668 = frontier_phi_25_49_ladder_1;
        _1670 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1573);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1683 = (((_666 * _616) + _667) * _631) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_666 * _618) + _667) * _631) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1687 = (((_666 * _619) + _667) * _631) * ((cbModelParam._m0[1u].w * (_1670 - _1568)) + _1568);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    vec4 _1704 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1706 = _1704.w;
    float _1718 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1706);
    float _1719 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1706);
    float _1720 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1706);
    uvec4 _1724 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1726 = _1724.x * 14u;
    uint _1727 = _1726 + 13u;
    float _1734 = _631 + (-1.0);
    float _1739 = (cbLight._m0[_1727].x * _1734) + 1.0;
    float _1740 = (cbLight._m0[_1727].y * _1734) + 1.0;
    float _1741 = (cbLight._m0[_1727].z * _1734) + 1.0;
    float _1742 = (cbLight._m0[_1727].w * _1734) + 1.0;
    uint _1743 = _1726 + 5u;
    float _1749 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1753 = _1726 + 4u;
    float _1762 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1766 = _1726 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_450, _451, _452));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_450, _451, _452));
    float _3968 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _3979 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1743].x * _1749) * _1787) + (((cbLight._m0[_1753].x * _1718) * _1762) * _1785);
    float _1795 = ((_1749 * cbLight._m0[_1743].y) * _1787) + (((cbLight._m0[_1753].y * _1719) * _1762) * _1785);
    float _1796 = ((_1749 * cbLight._m0[_1743].z) * _1787) + (((cbLight._m0[_1753].z * _1720) * _1762) * _1785);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1726 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1802)
    {
        _1813 = _1794;
        _1815 = _1795;
        _1817 = _1796;
    }
    else
    {
        uint _1821 = _1726 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1726 + 2u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3990 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1840 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1794;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1795;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1796;
    }
    bool _1820 = _1800.y == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1820)
    {
        _1858 = _1813;
        _1860 = _1815;
        _1862 = _1817;
    }
    else
    {
        uint _2031 = _1726 + 7u;
        float _2047 = (dot(vec3(cbLight._m0[_1726 + 3u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4006 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2050 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1858 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1813;
        _1860 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1815;
        _1862 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1817;
    }
    uint _1865 = _1726 + 8u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _453) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1726].x + _531;
    float _1881 = cbLight._m0[_1726].y + _532;
    float _1882 = cbLight._m0[_1726].z + _533;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1726].xyz));
    float _4022 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _1894 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1895 = dot(vec3(_450, _451, _452), vec3(_1887, _1888, _1889));
    float _4044 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1887, _1888, _1889));
    float _4055 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1915 = exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0);
    float _1916 = 0.959999978542327880859375 - _613;
    float _1918 = 0.959999978542327880859375 - _614;
    float _1919 = 0.959999978542327880859375 - _615;
    float _1926 = 1.0 - _1879;
    float _1937 = (0.5 / (((_1894 * ((_1893 * _1926) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1926) + _1879) * _1893))) * _1893;
    float _4066 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1953 = _1726 + 9u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _453) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1766].x + _531;
    float _1967 = cbLight._m0[_1766].y + _532;
    float _1968 = cbLight._m0[_1766].z + _533;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1766].xyz));
    float _4077 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1980 = dot(vec3(_450, _451, _452), vec3(_1973, _1974, _1975));
    float _4088 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1973, _1974, _1975));
    float _4099 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1965 * _1965;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
    float _2006 = 1.0 - _1965;
    float _2016 = (0.5 / (((_1894 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2006) + _1965) * _1979))) * _1979;
    float _4110 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    float _2028 = (((((_1999 * _1916) + _616) * cbLight._m0[_1953].x) * _2018) * _1749) + ((((cbLight._m0[_1865].x * _1718) * ((_1915 * _1916) + _616)) * _1939) * _1762);
    float _2029 = (((((_1999 * _1918) + _618) * cbLight._m0[_1953].y) * _2018) * _1749) + ((((cbLight._m0[_1865].y * _1719) * ((_1915 * _1918) + _618)) * _1939) * _1762);
    float _2030 = (((((_1999 * _1919) + _619) * cbLight._m0[_1953].z) * _2018) * _1749) + ((((cbLight._m0[_1865].z * _1720) * ((_1915 * _1919) + _619)) * _1939) * _1762);
    float _2092;
    float _2094;
    float _2096;
    if (_1802)
    {
        _2092 = _2028;
        _2094 = _2029;
        _2096 = _2030;
    }
    else
    {
        uint _2098 = _1726 + 2u;
        uint _2102 = _1726 + 10u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _453) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _531;
        float _2119 = cbLight._m0[_2098].y + _532;
        float _2120 = cbLight._m0[_2098].z + _533;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2098].xyz));
        float _4121 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2132 = dot(vec3(_450, _451, _452), vec3(_2125, _2126, _2127));
        float _4132 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4143 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
        float _2158 = 1.0 - _2117;
        float _2168 = (0.5 / (((_1894 * ((_2131 * _2158) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2158) + _2117) * _2131))) * _2131;
        float _4154 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2171 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2092 = (((((_2151 * _1916) + _616) * cbLight._m0[_2102].x) * _2170) * _2171) + _2028;
        _2094 = (((((_2151 * _1918) + _618) * cbLight._m0[_2102].y) * _2170) * _2171) + _2029;
        _2096 = (((((_2151 * _1919) + _619) * cbLight._m0[_2102].z) * _2170) * _2171) + _2030;
    }
    float _2206;
    float _2208;
    float _2210;
    if (_1820)
    {
        _2206 = _2092;
        _2208 = _2094;
        _2210 = _2096;
    }
    else
    {
        uint _2217 = _1726 + 3u;
        uint _2221 = _1726 + 11u;
        float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _453) * 0.949999988079071044921875);
        float _2236 = _2235 * _2235;
        float _2237 = cbLight._m0[_2217].x + _531;
        float _2238 = cbLight._m0[_2217].y + _532;
        float _2239 = cbLight._m0[_2217].z + _533;
        float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
        float _2244 = _2243 * _2237;
        float _2245 = _2243 * _2238;
        float _2246 = _2243 * _2239;
        float _2247 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2217].xyz));
        float _4170 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2251 = dot(vec3(_450, _451, _452), vec3(_2244, _2245, _2246));
        float _4181 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2255 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2244, _2245, _2246));
        float _4192 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2259 = _2236 * _2236;
        float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
        float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
        float _2277 = 1.0 - _2236;
        float _2287 = (0.5 / (((_1894 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2277) + _2236) * _2250))) * _2250;
        float _4203 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2206 = (((((_2270 * _1916) + _616) * cbLight._m0[_2221].x) * _2289) * _2290) + _2092;
        _2208 = (((((_2270 * _1918) + _618) * cbLight._m0[_2221].y) * _2289) * _2290) + _2094;
        _2210 = (((((_2270 * _1919) + _619) * cbLight._m0[_2221].z) * _2289) * _2290) + _2096;
    }
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_1724.y == 0u)
    {
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2365;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2365;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2365;
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.x;
        uint _2392 = uint((float(_2380.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2381))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2381)));
        float _2402 = (log2(_2368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2403 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        uint _2406 = uint(isnan(14.0) ? _2403 : (isnan(_2403) ? 14.0 : min(_2403, 14.0)));
        uvec4 _2411 = texelFetch(g_lightClusterGridBuffer, int(((_2406 << 2u) + (_2392 << 6u)) >> 2u));
        uint _2412 = _2411.x;
        uint _2413 = _2380.z;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((((1u << ((_2413 >> 4u) & 15u)) + 4294967295u) & _2412) == 0u) || ((_2413 & 240u) == 0u))
        {
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
        }
        else
        {
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            uint _2672 = 0u;
            uint _2681;
            bool _2682;
            for (;;)
            {
                _2681 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                _2682 = _2681 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2682)
                {
                    frontier_phi_66_pred = _2666;
                    frontier_phi_66_pred_1 = _2671;
                    frontier_phi_66_pred_2 = _2670;
                    frontier_phi_66_pred_3 = _2669;
                    frontier_phi_66_pred_4 = _2668;
                    frontier_phi_66_pred_5 = _2667;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2681;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2672 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _2366;
                        float _2878 = _2837.y - _2367;
                        float _2879 = _2837.z - _2368;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2887 = dot(vec3(_572, _575, _578), vec3(_2884, _2885, _2886));
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4229 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2887) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _2366;
                        float _2913 = (-0.0) - _2367;
                        float _2914 = (-0.0) - _2368;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2929 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                        float _2930 = 1.0 - _647;
                        float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                        float _2938 = _2937 * _2937;
                        float _2939 = _2938 * _2938;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2950 = dot(vec3(_572, _575, _578), vec3(_2919, _2920, _2921));
                        float _4245 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2954 = dot(vec3(_572, _575, _578), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                        float _4256 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                        float _2962 = _2897 * _2938;
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2887) + _2963;
                        float _4267 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2968 = 1.0 - _2938;
                        float _2978 = (0.5 / (((_2967 * ((_2953 * _2968) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2967 * _2968) + _2938) * _2953))) * _2967;
                        float _4278 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2989 = (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_2961 * _2961) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125))) * _2893;
                        _2741 = (_2908 * _2856.x) + _2814;
                        _2742 = (_2908 * _2856.y) + _2815;
                        _2743 = (_2908 * _2856.z) + _2816;
                        _2738 = (_2989 * _2873.x) + _2811;
                        _2739 = (_2989 * _2873.y) + _2812;
                        _2740 = (_2989 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_66_pred = _2738;
                    frontier_phi_66_pred_1 = _2743;
                    frontier_phi_66_pred_2 = _2742;
                    frontier_phi_66_pred_3 = _2741;
                    frontier_phi_66_pred_4 = _2740;
                    frontier_phi_66_pred_5 = _2739;
                }
                _2514 = frontier_phi_66_pred;
                _2524 = frontier_phi_66_pred_1;
                _2522 = frontier_phi_66_pred_2;
                _2520 = frontier_phi_66_pred_3;
                _2518 = frontier_phi_66_pred_4;
                _2516 = frontier_phi_66_pred_5;
                uint _2673 = _2672 + 1u;
                if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2666 = _2514;
                    _2667 = _2516;
                    _2668 = _2518;
                    _2669 = _2520;
                    _2670 = _2522;
                    _2671 = _2524;
                    _2672 = _2673;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
        }
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.z;
        uint _2530 = (_2528 >> 8u) & 15u;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((4294967295u << _2530) & _2412) == 0u)
        {
            _2634 = _2513;
            _2636 = _2515;
            _2638 = _2517;
            _2640 = _2519;
            _2642 = _2521;
            _2644 = _2523;
        }
        else
        {
            float _2659 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
            float _2660 = _2659 * _2366;
            float _2661 = _2659 * _2367;
            float _2662 = _2659 * _2368;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2530 < ((_2528 >> 12u) & 15u))
            {
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2794 = _2513;
                float _2795 = _2515;
                float _2796 = _2517;
                float _2797 = _2519;
                float _2798 = _2521;
                float _2799 = _2523;
                uint _2800 = _2530;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2810)
                    {
                        frontier_phi_77_pred = _2799;
                        frontier_phi_77_pred_1 = _2798;
                        frontier_phi_77_pred_2 = _2797;
                        frontier_phi_77_pred_3 = _2796;
                        frontier_phi_77_pred_4 = _2795;
                        frontier_phi_77_pred_5 = _2794;
                    }
                    else
                    {
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3016 = _2794;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        float _3020 = _2798;
                        float _3021 = _2799;
                        uint _3022 = _2809;
                        uint _3023;
                        vec4 _3048;
                        float _3049;
                        vec4 _3064;
                        vec3 _3076;
                        vec4 _3092;
                        vec4 _3108;
                        float _3155;
                        bool _3156;
                        for (;;)
                        {
                            uint _3033 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3022));
                            _3023 = (_3022 + 4294967295u) & _3022;
                            uint _3035 = _3033 * 40u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            _3049 = _3048.w;
                            uint _3051 = (_3033 * 40u) + 4u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3066 = (_3033 * 40u) + 8u;
                            _3076 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x));
                            uint _3079 = (_3033 * 40u) + 16u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3095 = (_3033 * 40u) + 20u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3111 = (_3033 * 40u) + 24u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3130 = (_3033 * 40u) + 28u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3155 = fma(_2368, _3143.z, fma(_2367, _3143.y, _3143.x * _2366)) + _3143.w;
                            _3156 = !((fma(_2368, _3124.z, fma(_2367, _3124.y, _3124.x * _2366)) + _3124.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3156)
                            {
                                float _3183 = _3048.x - _2366;
                                float _3184 = _3048.y - _2367;
                                float _3185 = _3048.z - _2368;
                                float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                                float _3189 = inversesqrt(_3186);
                                float _3190 = _3189 * _3183;
                                float _3191 = _3189 * _3184;
                                float _3192 = _3189 * _3185;
                                float _3196 = 1.0 - (_3186 / (_3049 * _3049));
                                float _4289 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3201 = sqrt(_3186) * _3064.w;
                                float _3203 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                                float _3204 = _3203 * _3203;
                                float _3207 = ((1.0 - _3204) * dot(vec3(_3190, _3191, _3192), vec3(_572, _575, _578))) + _3204;
                                float _3210 = _3201 * _3201;
                                float _3214 = (fma(_2368, _3092.z, fma(_2367, _3092.y, _3092.x * _2366)) + _3092.w) / _3155;
                                float _3215 = (fma(_2368, _3108.z, fma(_2367, _3108.y, _3108.x * _2366)) + _3108.w) / _3155;
                                float _3219 = 1.0 - dot(vec2(_3214, _3215), vec2(_3214, _3215));
                                float _4305 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3221 = _3220 * (((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3197) / ((_3210 * 0.699999988079071044921875) + 1.0));
                                float _3233 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                                float _3234 = 1.0 - _647;
                                float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                                float _3242 = _3241 * _3241;
                                float _3243 = _3242 * _3242;
                                float _3244 = _3190 - _2660;
                                float _3245 = _3191 - _2661;
                                float _3246 = _3192 - _2662;
                                float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                                float _3254 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2660, (-0.0) - _2661, (-0.0) - _2662));
                                float _4316 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3258 = dot(vec3(_572, _575, _578), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                                float _4327 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                                float _3266 = _3203 * _3242;
                                float _3267 = _3266 * _3266;
                                float _3273 = ((1.0 - _3267) * dot(vec3(_572, _575, _578), vec3(_3190, _3191, _3192))) + _3267;
                                float _4338 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3275 = 1.0 - _3242;
                                float _3285 = (0.5 / (((_3274 * ((_3257 * _3275) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3242) * _3257))) * _3274;
                                float _4349 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3295 = (_3220 * _3197) * (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) / ((_3265 * _3265) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3221 * _3064.y;
                                frontier_phi_83_pred_1 = _3221 * _3064.x;
                                frontier_phi_83_pred_2 = _3295 * _3076.z;
                                frontier_phi_83_pred_3 = _3295 * _3076.y;
                                frontier_phi_83_pred_4 = _3295 * _3076.x;
                                frontier_phi_83_pred_5 = _3221 * _3064.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_83_pred;
                            _3302 = frontier_phi_83_pred_1;
                            _3301 = frontier_phi_83_pred_2;
                            _3300 = frontier_phi_83_pred_3;
                            _3299 = frontier_phi_83_pred_4;
                            _3304 = frontier_phi_83_pred_5;
                            _3006 = _3302 + _3019;
                            _3007 = _3303 + _3020;
                            _3008 = _3304 + _3021;
                            _3003 = _3299 + _3016;
                            _3004 = _3300 + _3017;
                            _3005 = _3301 + _3018;
                            if (_3023 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3023;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3008;
                        frontier_phi_77_pred_1 = _3007;
                        frontier_phi_77_pred_2 = _3006;
                        frontier_phi_77_pred_3 = _3005;
                        frontier_phi_77_pred_4 = _3004;
                        frontier_phi_77_pred_5 = _3003;
                    }
                    _2645 = frontier_phi_77_pred;
                    _2643 = frontier_phi_77_pred_1;
                    _2641 = frontier_phi_77_pred_2;
                    _2639 = frontier_phi_77_pred_3;
                    _2637 = frontier_phi_77_pred_4;
                    _2635 = frontier_phi_77_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2635;
                        _2795 = _2637;
                        _2796 = _2639;
                        _2797 = _2641;
                        _2798 = _2643;
                        _2799 = _2645;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2639;
                frontier_phi_58_59_ladder_1 = _2645;
                frontier_phi_58_59_ladder_2 = _2643;
                frontier_phi_58_59_ladder_3 = _2641;
                frontier_phi_58_59_ladder_4 = _2637;
                frontier_phi_58_59_ladder_5 = _2635;
            }
            else
            {
                frontier_phi_58_59_ladder = _2517;
                frontier_phi_58_59_ladder_1 = _2523;
                frontier_phi_58_59_ladder_2 = _2521;
                frontier_phi_58_59_ladder_3 = _2519;
                frontier_phi_58_59_ladder_4 = _2515;
                frontier_phi_58_59_ladder_5 = _2513;
            }
            _2634 = frontier_phi_58_59_ladder_5;
            _2636 = frontier_phi_58_59_ladder_4;
            _2638 = frontier_phi_58_59_ladder;
            _2640 = frontier_phi_58_59_ladder_3;
            _2642 = frontier_phi_58_59_ladder_2;
            _2644 = frontier_phi_58_59_ladder_1;
        }
        float _2649 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _2425 = (_2649 * _2640) + _1858;
        _2427 = (_2649 * _2642) + _1860;
        _2429 = (_2649 * _2644) + _1862;
        _2431 = ((_2634 * _616) * _2649) + _2206;
        _2433 = ((_2636 * _618) * _2649) + _2208;
        _2435 = ((_2638 * _619) * _2649) + _2210;
    }
    else
    {
        _2425 = _1858;
        _2427 = _1860;
        _2429 = _1862;
        _2431 = _2206;
        _2433 = _2208;
        _2435 = _2210;
    }
    float _4365 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4376 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4387 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2452 = ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2425 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _631))) + ((_2431 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2453 = ((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2427 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _631))) + ((_2433 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2454 = ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2429 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _631))) + ((_2435 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    uint _2455 = _591 + 6u;
    float _2463 = _552 / cbSceneParam._m0[86u].x;
    float _2464 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2478 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2480 = _2478.x;
    float _2481 = _2478.y;
    float _2482 = _2478.z;
    float _2483 = _2478.w;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2538 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2539 = _2538 / _473;
        float _2550 = _2539 * _524;
        float _2551 = _525 * _2539;
        float _2552 = (-0.0) - _2551;
        float _2554 = _2539 * _526;
        float _2556 = (cbSceneParam._m0[77u].w * _2552) / _2538;
        float _2557 = _2556 + cbSceneParam._m0[79u].w;
        float _2558 = cbSceneParam._m0[79u].w - _2551;
        float _2564 = sqrt(((_2550 * _2550) + (_2551 * _2551)) + (_2554 * _2554));
        float _2567 = (1.0 - (cbSceneParam._m0[77u].w / _2538)) * _2564;
        float _2572 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2574 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2751;
        if (abs((_2552 - _2556) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2751 = ((((_2557 > 0.0) ? exp2(_2572 * _2557) : (2.0 - exp2(_2574 * _2557))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2567;
        }
        else
        {
            float _2695 = 1.0 / cbSceneParam._m0[80u].x;
            float _2696 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : max(_2557, _2558));
            float _2697 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : min(_2557, _2558));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            _2751 = ((abs(_2564 / _2552) * cbSceneParam._m0[80u].y) * ((((_2706 - _2707) * 2.0) - ((exp2(_2572 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0)))) - exp2(_2572 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))))) * _2695)) - ((exp2(_2574 * _2706) - exp2(_2574 * _2707)) * _2695))) + (_2567 * cbSceneParam._m0[80u].z);
        }
        vec4 _2753 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, 1.0), 0.0);
        float _2762 = exp2((_2751 * (-1.44269502162933349609375)) * (1.0 - _2753.w));
        float _2763 = log2(_2762);
        float _2779 = log2(_2483);
        _2576 = (exp2(_2779 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].x)) * _2753.x) / cbSceneParam._m0[78u].x)) + _2480;
        _2578 = (exp2(_2779 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].y)) * _2753.y) / cbSceneParam._m0[78u].y)) + _2481;
        _2580 = (exp2(_2779 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].z)) * _2753.z) / cbSceneParam._m0[78u].z)) + _2482;
        _2582 = _2762 * _2483;
    }
    else
    {
        _2576 = _2480;
        _2578 = _2481;
        _2580 = _2482;
        _2582 = _2483;
    }
    bool _2789;
    vec4 _2592;
    vec4 _2614;
    float _2616;
    float _2620;
    float _2621;
    float _2622;
    float _2623;
    bool _2633;
    for (;;)
    {
        _2592 = cbMatDynParam._m0[0u];
        float _2594 = roundEven(_2592.y);
        bool _2595 = _2594 == 3.0;
        float _2596 = log2(_2582);
        float _2603 = exp2(_2596 * cbSceneParam._m0[78u].x) * _2452;
        float _2604 = exp2(_2596 * cbSceneParam._m0[78u].y) * _2453;
        float _2605 = exp2(_2596 * cbSceneParam._m0[78u].z) * _2454;
        float _2612 = _540 + (-0.5);
        _2614 = cbMtdParam._m0[1u];
        _2616 = _2614.y * _2612;
        float _2619 = (_2594 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2620 = _2619 * (_2595 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2576)));
        _2621 = _2619 * (_2595 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2578)));
        _2622 = _2619 * (_2595 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2580)));
        _2623 = _2612 * 0.999000012874603271484375;
        _2633 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2633)
        {
            if ((cbInstanceData._m0[_591 + 7u].x + _2623) < 0.5)
            {
                _2789 = true;
                break;
            }
        }
        uint _2730 = _592 + uint(_2592.w);
        if ((cbInstanceData._m0[_2730].w < 1.0) && ((cbInstanceData._m0[_2730].w + _2623) < 0.5))
        {
            _2789 = true;
            break;
        }
        if ((_2616 + 1.0) < _2614.x)
        {
            _2789 = true;
            break;
        }
        _2789 = false;
        break;
    }
    float _2994;
    if (_2789)
    {
        discard_state = true;
        _2994 = 0.0;
    }
    else
    {
        _2994 = cbInstanceData._m0[_2455].w;
    }
    SV_Target.x = _2620;
    SV_Target.y = _2621;
    SV_Target.z = _2622;
    SV_Target.w = _2994;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2455].w;
    discard_exit();
}


