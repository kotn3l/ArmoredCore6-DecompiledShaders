#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1384;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _237 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _238 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _239 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _243 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _244 = _243 * _237;
    float _245 = _243 * _238;
    float _246 = _243 * _239;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _264 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _265 = _264 * TANGENT_2.x;
    float _266 = _264 * TANGENT_2.y;
    float _267 = _264 * TANGENT_2.z;
    float _272;
    float _273;
    float _274;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _272 = (-0.0) - _251;
        _273 = (-0.0) - _252;
        _274 = (-0.0) - _253;
    }
    else
    {
        _272 = _251;
        _273 = _252;
        _274 = _253;
    }
    vec4 _319 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _331 = 1.0 - ((1.0 - _319.x) * 1.39999997615814208984375);
    float _3996 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _339 = (_332 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[16u].x)) + cbMtdParam._m0[16u].x;
    float _340 = (_332 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[16u].y)) + cbMtdParam._m0[16u].y;
    float _341 = (_332 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z;
    float _343 = 1.0 - ((1.0 - _319.y) * 1.39999997615814208984375);
    float _4007 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _351 = (_344 * (cbMtdParam._m0[14u].x - _339)) + _339;
    float _352 = (_344 * (cbMtdParam._m0[14u].y - _340)) + _340;
    float _353 = (_344 * (cbMtdParam._m0[14u].z - _341)) + _341;
    float _355 = 1.0 - ((1.0 - _319.z) * 1.39999997615814208984375);
    float _4018 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    vec4 _381 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _383 = _381.x;
    float _384 = _383 * cbMtdParam._m0[20u].x;
    float _398 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _384) + (cbMtdParam._m0[17u].z * TEXCOORD_5.w))) + 1.0;
    float _4029 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _400 = 1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)));
    float _401 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _402 = isnan(1.0) ? _401 : (isnan(_401) ? 1.0 : min(_401, 1.0));
    float _410 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _384) + (cbMtdParam._m0[17u].y * TEXCOORD_5.z))) + 1.0;
    float _4050 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = 1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)));
    float _413 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    vec4 _432 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _437 = cbMtdParam._m0[12u].x * _414;
    float _439 = cbMtdParam._m0[12u].y * _414;
    float _441 = cbMtdParam._m0[12u].z * _414;
    float _461 = _412 + _400;
    float _462 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
    vec4 _481 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _486 = _481.w;
    float _487 = _481.x * cbMtdParam._m0[10u].x;
    float _488 = _481.y * cbMtdParam._m0[10u].y;
    float _489 = _481.z * cbMtdParam._m0[10u].z;
    float _509 = ((_487 - (_463 * _487)) + ((((((_434 * (cbMtdParam._m0[11u].x - _437)) * _402) + (_437 * _434)) * 4.55000019073486328125) * _463) * _487)) * ((_356 * (cbMtdParam._m0[15u].x - _351)) + _351);
    float _510 = ((((((((_435 * (cbMtdParam._m0[11u].y - _439)) * _402) + (_439 * _435)) * 4.55000019073486328125) * _463) * _488) + _488) - (_463 * _488)) * ((_356 * (cbMtdParam._m0[15u].y - _352)) + _352);
    float _511 = ((((((((_436 * (cbMtdParam._m0[11u].z - _441)) * _402) + (_441 * _436)) * 4.55000019073486328125) * _463) * _489) + _489) - (_463 * _489)) * ((_356 * (cbMtdParam._m0[15u].z - _353)) + _353);
    float _520 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[19u].y) + 1.0;
    float _4081 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _532 = ((((_383 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[19u].z) + 1.0;
    float _4092 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    vec4 _548 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _554 = (_548.x * 2.0) + (-1.0);
    float _555 = (_548.y * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _4103 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))));
    float _564 = fma(_561, _272, fma(_555, _258, _554 * _225));
    float _567 = fma(_561, _273, fma(_555, _259, _554 * _226));
    float _570 = fma(_561, _274, fma(_555, _260, _554 * _227));
    float _579 = exp2(log2(inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570))) * _567) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w;
    float _4114 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) + (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * (1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))));
    float _4125 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _585 = 3.0 - (_583 * 2.0);
    float _590 = _583 * _583;
    float _597 = ((_590 * (cbMtdParam._m0[13u].x - _509)) * _585) + _509;
    float _598 = ((_590 * (cbMtdParam._m0[13u].y - _510)) * _585) + _510;
    float _599 = ((_590 * (cbMtdParam._m0[13u].z - _511)) * _585) + _511;
    vec4 _613 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _617 = _613.z;
    float _620 = (_613.x * 2.0) + (-1.0);
    float _621 = (_613.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_620, _621), vec2(_620, _621));
    float _4136 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))));
    float _630 = fma(_627, _272, fma(_621, _265, _620 * _244));
    float _633 = fma(_627, _273, fma(_621, _266, _620 * _245));
    float _636 = fma(_627, _274, fma(_621, _267, _620 * _246));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    float _641 = _640 * _630;
    float _642 = _640 * _633;
    float _643 = _640 * _636;
    vec4 _656 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _663 = (_656.x * 2.0) + (-1.0);
    float _664 = (_656.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _4147 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _673 = ((_656.z - _617) * _582) + _617;
    vec4 _685 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _691 = (_685.x * 2.0) + (-1.0);
    float _692 = (_685.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4158 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))));
    float _701 = fma(_698, _272, fma(_692, _265, _691 * _244));
    float _704 = fma(_698, _273, fma(_692, _266, _691 * _245));
    float _707 = fma(_698, _274, fma(_692, _267, _691 * _246));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _717 = fma(_714, _227, fma(_713, _226, _712 * _225));
    float _720 = fma(_714, _260, fma(_713, _259, _712 * _258));
    float _723 = fma(_714, _274, fma(_713, _273, _712 * _272));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    float _731 = fma(_643, _227, fma(_642, _226, _641 * _225));
    float _734 = fma(_643, _260, fma(_642, _259, _641 * _258));
    float _737 = fma(_643, _274, fma(_642, _273, _641 * _272));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    vec4 _759 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _765 = (_759.x * 2.0) + (-1.0);
    float _766 = (_759.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4169 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))));
    float _775 = fma(_772, _272, fma(_766, _265, _765 * _244));
    float _778 = fma(_772, _273, fma(_766, _266, _765 * _245));
    float _781 = fma(_772, _274, fma(_766, _267, _765 * _246));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _791 = fma(_788, _227, fma(_787, _226, _786 * _225));
    float _794 = fma(_788, _260, fma(_787, _259, _786 * _258));
    float _797 = fma(_788, _274, fma(_787, _273, _786 * _272));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _817 = (((((_717 * _402) * _727) * cbMtdParam._m0[18u].y) + _554) + ((_741 * _731) * cbMtdParam._m0[19u].w)) + (((_791 * _414) * _801) * cbMtdParam._m0[19u].x);
    float _820 = (((((_720 * _402) * _727) * cbMtdParam._m0[18u].y) + _555) + ((_741 * _734) * cbMtdParam._m0[19u].w)) + (((_794 * _414) * _801) * cbMtdParam._m0[19u].x);
    float _827 = ((_663 - _817) * _582) + _817;
    float _828 = (_582 * (_664 - _820)) + _820;
    float _829 = (_582 * (sqrt(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) - _561)) + _561;
    float _832 = fma(_829, _272, fma(_828, _258, _827 * _225));
    float _835 = fma(_829, _273, fma(_828, _259, _827 * _226));
    float _838 = fma(_829, _274, fma(_828, _260, _827 * _227));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _4180 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _846 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _847 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4213 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4224 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4235 = isnan(0.0) ? cbMtdParam._m0[20u].y : (isnan(cbMtdParam._m0[20u].y) ? 0.0 : max(cbMtdParam._m0[20u].y, 0.0));
    float _851 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    float _932 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _933 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _951 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _954 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _957 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _970 = uint(roundEven(NORMAL.w)) * 13u;
    uint _972 = (_970 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_972].z;
    float _4246 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _984 = 1.0 - _851;
    float _985 = _981 * _984;
    float _986 = _982 * _984;
    float _987 = _983 * _984;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _851;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _851;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _851;
    float _995 = _992 + 0.039999999105930328369140625;
    float _997 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    vec4 _1007 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _932, cbSceneParam._m0[86u].y * _933));
    float _1010 = _1007.x * TEXCOORD_4;
    float _1011 = dot(vec3(_843, _844, _845), vec3(_924, _925, _926));
    float _1014 = _1011 * 2.0;
    float _1018 = (_1014 * _843) - _924;
    float _1019 = (_1014 * _844) - _925;
    float _1020 = (_1014 * _845) - _926;
    float _1024 = abs(dot(vec3(_924, _925, _926), vec3(_843, _844, _845)));
    float _4279 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1026 = sqrt(_847);
    float _1038 = exp2((_1026 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1026 * 3.0));
    float _1044 = (1.0 - _1038) * ((_1026 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1045 = _1038 * _1026;
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1383;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1108 = fma(_1081, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073));
        float _1112 = fma(_1081, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073));
        float _1116 = fma(_1081, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073));
        float _1141 = _1073 + _843;
        float _1142 = _1077 + _844;
        float _1143 = _1081 + _845;
        float _1153 = fma(_1143, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141)) - _1108;
        float _1154 = fma(_1143, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141)) - _1112;
        float _1155 = fma(_1143, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141)) - _1116;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1108 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1112 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[34u].z) + ((((((_1116 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1211 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1177.x + (-0.5));
        float _1213 = _1211 * (_1177.y + (-0.5));
        float _1214 = _1211 * (_1177.z + (-0.5));
        float _1221 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1184.x + (-0.5));
        float _1223 = _1221 * (_1184.y + (-0.5));
        float _1224 = _1221 * (_1184.z + (-0.5));
        float _1231 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1191.x + (-0.5));
        float _1233 = _1231 * (_1191.y + (-0.5));
        float _1234 = _1231 * (_1191.z + (-0.5));
        float _1241 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1198.x + (-0.5));
        float _1243 = _1241 * (_1198.y + (-0.5));
        float _1244 = _1241 * (_1198.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1265 = (dot(vec3(_843, _844, _845), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1275 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4327 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1277 + 1.0))) + _1282) * _1245;
        float _1292 = _1213 * 0.5;
        float _1293 = _1223 * 0.5;
        float _1294 = _1233 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_843, _844, _845), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4360 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1319 + 1.0))) + _1324) * _1246;
        float _1334 = _1214 * 0.5;
        float _1335 = _1224 * 0.5;
        float _1336 = _1234 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_843, _844, _845), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4393 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1361 + 1.0))) + _1366) * _1247;
        _1383 = _1214;
        _1385 = _1213;
        _1386 = _1212;
        _1387 = _1224;
        _1388 = _1223;
        _1389 = _1222;
        _1390 = _1234;
        _1391 = _1233;
        _1392 = _1232;
        _1393 = _1247;
        _1394 = _1246;
        _1395 = _1245;
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1384;
        _1385 = _1384;
        _1386 = _1384;
        _1387 = _1384;
        _1388 = _1384;
        _1389 = _1384;
        _1390 = _1384;
        _1391 = _1384;
        _1392 = _1384;
        _1393 = _1384;
        _1394 = _1384;
        _1395 = _1384;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1424 = fma(_1081, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073));
        float _1428 = fma(_1081, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073));
        float _1432 = fma(_1081, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073));
        float _1455 = _1073 + _843;
        float _1456 = _1077 + _844;
        float _1457 = _1081 + _845;
        float _1467 = fma(_1457, cbModelParam._m0[30u].z, fma(_1456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1455)) - _1424;
        float _1468 = fma(_1457, cbModelParam._m0[31u].z, fma(_1456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1455)) - _1428;
        float _1469 = fma(_1457, cbModelParam._m0[32u].z, fma(_1456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1455)) - _1432;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1486 = ((_1473 * _1467) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1424 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1473 * _1468) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1428 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1473 * _1469) / cbModelParam._m0[35u].z) + ((((((_1432 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        float _1523 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1490.x + (-0.5));
        float _1525 = _1523 * (_1490.y + (-0.5));
        float _1526 = _1523 * (_1490.z + (-0.5));
        float _1533 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1497.x + (-0.5));
        float _1535 = _1533 * (_1497.y + (-0.5));
        float _1536 = _1533 * (_1497.z + (-0.5));
        float _1543 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1504.x + (-0.5));
        float _1545 = _1543 * (_1504.y + (-0.5));
        float _1546 = _1543 * (_1504.z + (-0.5));
        float _1553 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1511.x + (-0.5));
        float _1555 = _1553 * (_1511.y + (-0.5));
        float _1556 = _1553 * (_1511.z + (-0.5));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = _1524 * 0.5;
        float _1561 = _1534 * 0.5;
        float _1562 = _1544 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_843, _844, _845), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4456 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1587 + 1.0))) + _1592) * _1557;
        float _1602 = _1525 * 0.5;
        float _1603 = _1535 * 0.5;
        float _1604 = _1545 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_843, _844, _845), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4489 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1629 + 1.0))) + _1634) * _1558;
        float _1644 = _1526 * 0.5;
        float _1645 = _1536 * 0.5;
        float _1646 = _1546 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_843, _844, _845), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4522 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1671 + 1.0))) + _1676) * _1559;
        _1693 = _1526;
        _1694 = _1525;
        _1695 = _1524;
        _1696 = _1536;
        _1697 = _1535;
        _1698 = _1534;
        _1699 = _1546;
        _1700 = _1545;
        _1701 = _1544;
        _1702 = _1559;
        _1703 = _1558;
        _1704 = _1557;
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
    }
    else
    {
        _1693 = _1384;
        _1694 = _1384;
        _1695 = _1384;
        _1696 = _1384;
        _1697 = _1384;
        _1698 = _1384;
        _1699 = _1384;
        _1700 = _1384;
        _1701 = _1384;
        _1702 = _1384;
        _1703 = _1384;
        _1704 = _1384;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1396)) + _1396;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1397)) + _1397;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1398)) + _1398;
    float _1740 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1717));
    float _1761 = _1018 * 0.5;
    float _1762 = _1019 * 0.5;
    float _1763 = _1020 * 0.5;
    float _1764 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1767 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1770 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1804;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1777 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1383, _1387, _1390, _1393));
        float _1781 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1785 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1792 = dot(vec4(cbModelParam._m0[39u]), vec4(_1761, _1762, _1763, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1815;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1806 = dot(vec4(cbModelParam._m0[40u]), vec4(_1761, _1762, _1763, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1819 = (_1815 * cbModelParam._m0[1u].x) + (_1804 * (1.0 - cbModelParam._m0[1u].x));
    float _1829 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _847);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1829 : min(cbModelParam._m0[25u].z, _1829));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1081, cbModelParam._m0[13u].z, fma(_1077, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1081, cbModelParam._m0[14u].z, fma(_1077, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1081, cbModelParam._m0[15u].z, fma(_1077, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_1020, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018));
        float _1891 = fma(_1020, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018));
        float _1894 = fma(_1020, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1922 = frontier_phi_16_14_ladder;
        }
        float _2094;
        if (_1891 > 0.0)
        {
            _2094 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2094 = frontier_phi_25_21_ladder;
        }
        float _2389;
        if (_1894 > 0.0)
        {
            _2389 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2389 = frontier_phi_37_32_ladder;
        }
        float _2391 = isnan(_2094) ? _1922 : (isnan(_1922) ? _2094 : min(_1922, _2094));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1888) + _1877;
        float _2397 = (_2392 * _1891) + _1881;
        float _2398 = (_2392 * _1894) + _1885;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1830);
            frontier_phi_15_37_ladder = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2543.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2543.z * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_15_37_ladder_1;
        _1912 = frontier_phi_15_37_ladder;
        _1914 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1018, _1019, _1020), _1830);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _847);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1973 = fma(_1081, cbModelParam._m0[21u].z, fma(_1077, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073)) + cbModelParam._m0[21u].w;
        float _1977 = fma(_1081, cbModelParam._m0[22u].z, fma(_1077, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073)) + cbModelParam._m0[22u].w;
        float _1981 = fma(_1081, cbModelParam._m0[23u].z, fma(_1077, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073)) + cbModelParam._m0[23u].w;
        float _1984 = fma(_1020, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018));
        float _1987 = fma(_1020, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018));
        float _1990 = fma(_1020, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018));
        float _2099;
        if (_1984 > 0.0)
        {
            _2099 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2099 = frontier_phi_27_23_ladder;
        }
        float _2416;
        if (_1987 > 0.0)
        {
            _2416 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2416 = frontier_phi_39_34_ladder;
        }
        float _2754;
        if (_1990 > 0.0)
        {
            _2754 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2754 = frontier_phi_49_46_ladder;
        }
        float _2756 = isnan(_2416) ? _2099 : (isnan(_2099) ? _2416 : min(_2099, _2416));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1984) + _1973;
        float _2762 = (_2757 * _1987) + _1977;
        float _2763 = (_2757 * _1990) + _1981;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_24_49_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _2009 = frontier_phi_24_49_ladder_2;
        _2011 = frontier_phi_24_49_ladder_1;
        _2013 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1018, _1019, _1020), _1919);
        _2009 = _1993.x * cbModelParam._m0[1u].z;
        _2011 = _1993.y * cbModelParam._m0[1u].z;
        _2013 = _1993.z * cbModelParam._m0[1u].z;
    }
    float _2026 = (((_1044 * _995) + _1045) * _1010) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2028 = (((_1044 * _997) + _1045) * _1010) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2030 = (((_1044 * _998) + _1045) * _1010) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2026 * cbSceneParam._m0[91u].x));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2086 = _2073 / _2085;
    float _2087 = _2077 / _2085;
    float _2088 = _2081 / _2085;
    float _2235;
    float _2236;
    float _2237;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2115 = ((uint(_2088 > cbSceneParam._m0[59u].y) + uint(_2088 > cbSceneParam._m0[59u].x)) + uint(_2088 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2116 = _2115 + 43u;
        uint _2124 = _2115 + 44u;
        uint _2132 = _2115 + 45u;
        uint _2140 = _2115 + 46u;
        float _2151 = fma(_2085, cbSceneParam._m0[_2116].w, fma(_2081, cbSceneParam._m0[_2116].z, fma(_2077, cbSceneParam._m0[_2116].y, _2073 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2085, cbSceneParam._m0[_2124].w, fma(_2081, cbSceneParam._m0[_2124].z, fma(_2077, cbSceneParam._m0[_2124].y, _2073 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2085, cbSceneParam._m0[_2140].w, fma(_2081, cbSceneParam._m0[_2140].z, fma(_2077, cbSceneParam._m0[_2140].y, _2073 * cbSceneParam._m0[_2140].x)));
        float _2168 = cbSceneParam._m0[33u].z * _2163;
        float _2170 = cbSceneParam._m0[33u].w * _2163;
        float _2173 = fma(_2085, cbSceneParam._m0[_2132].w, fma(_2081, cbSceneParam._m0[_2132].z, fma(_2077, cbSceneParam._m0[_2132].y, _2073 * cbSceneParam._m0[_2132].x))) / _2163;
        float _2221 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
        float _4648 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2228 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2151) / _2163, (_2170 + _2155) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2151) / _2163, (_2155 - _2168) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2168) / _2163, (_2155 - _2170) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2170) / _2163, (_2168 + _2155) / _2163), _2173), 0.0)).x), vec4(0.25)));
        _2235 = 1.0 - (_2228 * cbSceneParam._m0[34u].x);
        _2236 = 1.0 - (_2228 * cbSceneParam._m0[34u].y);
        _2237 = 1.0 - (_2228 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2235 = 1.0;
        _2236 = 1.0;
        _2237 = 1.0;
    }
    float _2301;
    float _2303;
    float _2305;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2289 = fma(_2085, cbSceneParam._m0[63u].w, fma(_2081, cbSceneParam._m0[63u].z, fma(_2077, cbSceneParam._m0[63u].y, _2073 * cbSceneParam._m0[63u].x)));
        float _2290 = fma(_2085, cbSceneParam._m0[60u].w, fma(_2081, cbSceneParam._m0[60u].z, fma(_2077, cbSceneParam._m0[60u].y, _2073 * cbSceneParam._m0[60u].x))) / _2289;
        float _2291 = fma(_2085, cbSceneParam._m0[61u].w, fma(_2081, cbSceneParam._m0[61u].z, fma(_2077, cbSceneParam._m0[61u].y, _2073 * cbSceneParam._m0[61u].x))) / _2289;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2290 >= cbSceneParam._m0[64u].x) && (_2291 >= cbSceneParam._m0[64u].y)) && (_2290 <= cbSceneParam._m0[64u].z)) && (_2291 <= cbSceneParam._m0[64u].w))
        {
            float _2429 = fma(_2085, cbSceneParam._m0[62u].w, fma(_2081, cbSceneParam._m0[62u].z, fma(_2077, cbSceneParam._m0[62u].y, _2073 * cbSceneParam._m0[62u].x))) / _2289;
            float _2433 = isnan(cbSceneParam._m0[41u].w) ? _2429 : (isnan(_2429) ? cbSceneParam._m0[41u].w : max(_2429, cbSceneParam._m0[41u].w));
            float _2476 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
            float _4664 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
            float _2483 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2290, cbSceneParam._m0[33u].w + _2291), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2290, _2291 - cbSceneParam._m0[33u].z), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].z, _2291 - cbSceneParam._m0[33u].w), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2291), _2433), 0.0)).x), vec4(0.25)));
            float _2487 = 1.0 - (_2483 * cbSceneParam._m0[34u].x);
            float _2488 = 1.0 - (_2483 * cbSceneParam._m0[34u].y);
            float _2489 = 1.0 - (_2483 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_36_35_ladder_1 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_36_35_ladder_2 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
        }
        else
        {
            frontier_phi_36_35_ladder = _2236;
            frontier_phi_36_35_ladder_1 = _2237;
            frontier_phi_36_35_ladder_2 = _2235;
        }
        _2301 = frontier_phi_36_35_ladder_2;
        _2303 = frontier_phi_36_35_ladder;
        _2305 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2301 = _2235;
        _2303 = _2236;
        _2305 = _2237;
    }
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_970 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _1010 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2348 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2352 = _2312 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_843, _844, _845));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_843, _844, _845));
    float _4700 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4711 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2329].x * _2335) * _2373) + (((cbLight._m0[_2339].x * _2301) * _2348) * _2371);
    float _2381 = ((_2335 * cbLight._m0[_2329].y) * _2373) + (((cbLight._m0[_2339].y * _2303) * _2348) * _2371);
    float _2382 = ((_2335 * cbLight._m0[_2329].z) * _2373) + (((cbLight._m0[_2339].z * _2305) * _2348) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2388)
    {
        _2490 = _2380;
        _2492 = _2381;
        _2494 = _2382;
    }
    else
    {
        uint _2498 = _2312 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4722 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2517 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2380;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2381;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2382;
    }
    bool _2497 = _2386.y == 0u;
    float _2552;
    float _2554;
    float _2556;
    if (_2497)
    {
        _2552 = _2490;
        _2554 = _2492;
        _2556 = _2494;
    }
    else
    {
        uint _2725 = _2312 + 7u;
        float _2741 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2742 = _2741 * _2741;
        float _4738 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2743 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2744 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2552 = (((cbLight._m0[_2725].x * 0.3183098733425140380859375) * _2743) * _2744) + _2490;
        _2554 = (((cbLight._m0[_2725].y * 0.3183098733425140380859375) * _2743) * _2744) + _2492;
        _2556 = (((cbLight._m0[_2725].z * 0.3183098733425140380859375) * _2743) * _2744) + _2494;
    }
    uint _2559 = _2312 + 8u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _847) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2312].x + _924;
    float _2575 = cbLight._m0[_2312].y + _925;
    float _2576 = cbLight._m0[_2312].z + _926;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2312].xyz));
    float _4754 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _4765 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2588 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2589 = dot(vec3(_843, _844, _845), vec3(_2581, _2582, _2583));
    float _4776 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2581, _2582, _2583));
    float _4787 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2573 * _2573;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2610 = 0.959999978542327880859375 - _992;
    float _2612 = 0.959999978542327880859375 - _993;
    float _2613 = 0.959999978542327880859375 - _994;
    float _2620 = 1.0 - _2573;
    float _2631 = (0.5 / (((_2588 * ((_2587 * _2620) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2620) + _2573) * _2587))) * _2587;
    float _4798 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2633 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    uint _2647 = _2312 + 9u;
    float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _847) * 0.949999988079071044921875);
    float _2659 = _2658 * _2658;
    float _2660 = cbLight._m0[_2352].x + _924;
    float _2661 = cbLight._m0[_2352].y + _925;
    float _2662 = cbLight._m0[_2352].z + _926;
    float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
    float _2667 = _2666 * _2660;
    float _2668 = _2666 * _2661;
    float _2669 = _2666 * _2662;
    float _2670 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2352].xyz));
    float _4809 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    float _2674 = dot(vec3(_843, _844, _845), vec3(_2667, _2668, _2669));
    float _4820 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2678 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2667, _2668, _2669));
    float _4831 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2682 = _2659 * _2659;
    float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
    float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
    float _2700 = 1.0 - _2659;
    float _2710 = (0.5 / (((_2588 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2700) + _2659) * _2673))) * _2673;
    float _4842 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2712 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
    float _2722 = (((((_2693 * _2610) + _995) * cbLight._m0[_2647].x) * _2712) * _2335) + ((((cbLight._m0[_2559].x * _2301) * ((_2609 * _2610) + _995)) * _2633) * _2348);
    float _2723 = (((((_2693 * _2612) + _997) * cbLight._m0[_2647].y) * _2712) * _2335) + ((((cbLight._m0[_2559].y * _2303) * ((_2609 * _2612) + _997)) * _2633) * _2348);
    float _2724 = (((((_2693 * _2613) + _998) * cbLight._m0[_2647].z) * _2712) * _2335) + ((((cbLight._m0[_2559].z * _2305) * ((_2609 * _2613) + _998)) * _2633) * _2348);
    float _2780;
    float _2782;
    float _2784;
    if (_2388)
    {
        _2780 = _2722;
        _2782 = _2723;
        _2784 = _2724;
    }
    else
    {
        uint _2786 = _2312 + 2u;
        uint _2790 = _2312 + 10u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _847) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _924;
        float _2807 = cbLight._m0[_2786].y + _925;
        float _2808 = cbLight._m0[_2786].z + _926;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2786].xyz));
        float _4853 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2820 = dot(vec3(_843, _844, _845), vec3(_2813, _2814, _2815));
        float _4864 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4875 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0);
        float _2846 = 1.0 - _2805;
        float _2856 = (0.5 / (((_2588 * ((_2819 * _2846) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2846) + _2805) * _2819))) * _2819;
        float _4886 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2780 = (((((_2839 * _2610) + _995) * cbLight._m0[_2790].x) * _2858) * _2859) + _2722;
        _2782 = (((((_2839 * _2612) + _997) * cbLight._m0[_2790].y) * _2858) * _2859) + _2723;
        _2784 = (((((_2839 * _2613) + _998) * cbLight._m0[_2790].z) * _2858) * _2859) + _2724;
    }
    float _2890;
    float _2892;
    float _2894;
    if (_2497)
    {
        _2890 = _2780;
        _2892 = _2782;
        _2894 = _2784;
    }
    else
    {
        uint _2901 = _2312 + 3u;
        uint _2905 = _2312 + 11u;
        float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2901].w)) * _847) * 0.949999988079071044921875);
        float _2920 = _2919 * _2919;
        float _2921 = cbLight._m0[_2901].x + _924;
        float _2922 = cbLight._m0[_2901].y + _925;
        float _2923 = cbLight._m0[_2901].z + _926;
        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
        float _2928 = _2927 * _2921;
        float _2929 = _2927 * _2922;
        float _2930 = _2927 * _2923;
        float _2931 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2901].xyz));
        float _4902 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
        float _2935 = dot(vec3(_843, _844, _845), vec3(_2928, _2929, _2930));
        float _4913 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2939 = dot(vec3(cbLight._m0[_2901].xyz), vec3(_2928, _2929, _2930));
        float _4924 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2943 = _2920 * _2920;
        float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
        float _2954 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
        float _2961 = 1.0 - _2920;
        float _2971 = (0.5 / (((_2588 * ((_2934 * _2961) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2961) + _2920) * _2934))) * _2934;
        float _4935 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2973 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
        float _2974 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2890 = (((((_2954 * _2610) + _995) * cbLight._m0[_2905].x) * _2973) * _2974) + _2780;
        _2892 = (((((_2954 * _2612) + _997) * cbLight._m0[_2905].y) * _2973) * _2974) + _2782;
        _2894 = (((((_2954 * _2613) + _998) * cbLight._m0[_2905].z) * _2973) * _2974) + _2784;
    }
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_2310.y == 0u)
    {
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.x;
        uint _3007 = uint((float(_2995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _933) / _2996))) + floor(float(uint(cbSceneParam._m0[85u].x * _932) / _2996)));
        float _3017 = (log2(_2088 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3018 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        uint _3021 = uint(isnan(14.0) ? _3018 : (isnan(_3018) ? 14.0 : min(_3018, 14.0)));
        uvec4 _3026 = texelFetch(g_lightClusterGridBuffer, int(((_3021 << 2u) + (_3007 << 6u)) >> 2u));
        uint _3027 = _3026.x;
        uint _3028 = _2995.z;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((((1u << ((_3028 >> 4u) & 15u)) + 4294967295u) & _3027) == 0u) || ((_3028 & 240u) == 0u))
        {
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
        }
        else
        {
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            uint _3258 = 0u;
            uint _3267;
            bool _3268;
            for (;;)
            {
                _3267 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                _3268 = _3267 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3268)
                {
                    frontier_phi_68_pred = _3257;
                    frontier_phi_68_pred_1 = _3256;
                    frontier_phi_68_pred_2 = _3255;
                    frontier_phi_68_pred_3 = _3253;
                    frontier_phi_68_pred_4 = _3252;
                    frontier_phi_68_pred_5 = _3254;
                }
                else
                {
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    uint _3382;
                    _3376 = _3252;
                    _3377 = _3253;
                    _3378 = _3254;
                    _3379 = _3255;
                    _3380 = _3256;
                    _3381 = _3257;
                    _3382 = _3267;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    for (;;)
                    {
                        uint _3386 = uint(findLSB(_3382)) + (_3258 << 5u);
                        uint _3383 = (_3382 + 4294967295u) & _3382;
                        uint _3388 = _3386 * 48u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3408 = (_3386 * 48u) + 4u;
                        vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3427 = (_3386 * 48u) + 8u;
                        vec3 _3438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x));
                        float _3442 = _3402.x - _2086;
                        float _3443 = _3402.y - _2087;
                        float _3444 = _3402.z - _2088;
                        float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                        float _3448 = inversesqrt(_3445);
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3452 = dot(vec3(_951, _954, _957), vec3(_3449, _3450, _3451));
                        float _3457 = 1.0 - (_3445 * _3402.w);
                        float _4961 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3459 = sqrt(_3445) * _3421.w;
                        float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3452) + _3462;
                        float _3468 = _3459 * _3459;
                        float _3472 = ((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3458) / ((_3468 * 0.699999988079071044921875) + 1.0);
                        float _3476 = (-0.0) - _2086;
                        float _3477 = (-0.0) - _2087;
                        float _3478 = (-0.0) - _2088;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3492 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                        float _3493 = 1.0 - _1026;
                        float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                        float _3501 = _3500 * _3500;
                        float _3502 = _3501 * _3501;
                        float _3503 = _3483 + _3449;
                        float _3504 = _3484 + _3450;
                        float _3505 = _3485 + _3451;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3513 = dot(vec3(_951, _954, _957), vec3(_3483, _3484, _3485));
                        float _4977 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3517 = dot(vec3(_951, _954, _957), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                        float _4988 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3520 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                        float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                        float _3525 = _3461 * _3501;
                        float _3526 = _3525 * _3525;
                        float _3529 = ((1.0 - _3526) * _3452) + _3526;
                        float _4999 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3530 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3531 = 1.0 - _3501;
                        float _3541 = (0.5 / (((_3530 * ((_3516 * _3531) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3501) * _3516))) * _3530;
                        float _5010 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3552 = (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3524 * _3524) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125))) * _3458;
                        _3311 = (_3472 * _3421.x) + _3379;
                        _3312 = (_3472 * _3421.y) + _3380;
                        _3313 = (_3472 * _3421.z) + _3381;
                        _3308 = (_3552 * _3438.x) + _3376;
                        _3309 = (_3552 * _3438.y) + _3377;
                        _3310 = (_3552 * _3438.z) + _3378;
                        if (_3383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3376 = _3308;
                            _3377 = _3309;
                            _3378 = _3310;
                            _3379 = _3311;
                            _3380 = _3312;
                            _3381 = _3313;
                            _3382 = _3383;
                        }
                    }
                    frontier_phi_68_pred = _3313;
                    frontier_phi_68_pred_1 = _3312;
                    frontier_phi_68_pred_2 = _3311;
                    frontier_phi_68_pred_3 = _3309;
                    frontier_phi_68_pred_4 = _3308;
                    frontier_phi_68_pred_5 = _3310;
                }
                _3119 = frontier_phi_68_pred;
                _3117 = frontier_phi_68_pred_1;
                _3115 = frontier_phi_68_pred_2;
                _3111 = frontier_phi_68_pred_3;
                _3109 = frontier_phi_68_pred_4;
                _3113 = frontier_phi_68_pred_5;
                uint _3259 = _3258 + 1u;
                if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3252 = _3109;
                    _3253 = _3111;
                    _3254 = _3113;
                    _3255 = _3115;
                    _3256 = _3117;
                    _3257 = _3119;
                    _3258 = _3259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
        }
        uvec4 _3122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3123 = _3122.z;
        uint _3125 = (_3123 >> 8u) & 15u;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((4294967295u << _3125) & _3027) == 0u)
        {
            _3220 = _3108;
            _3222 = _3110;
            _3224 = _3112;
            _3226 = _3114;
            _3228 = _3116;
            _3230 = _3118;
        }
        else
        {
            float _3245 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
            float _3246 = _3245 * _2086;
            float _3247 = _3245 * _2087;
            float _3248 = _3245 * _2088;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3125 < ((_3123 >> 12u) & 15u))
            {
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3359 = _3108;
                float _3360 = _3110;
                float _3361 = _3112;
                float _3362 = _3114;
                float _3363 = _3116;
                float _3364 = _3118;
                uint _3365 = _3125;
                uint _3374;
                bool _3375;
                for (;;)
                {
                    _3374 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                    _3375 = _3374 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3375)
                    {
                        frontier_phi_74_pred = _3361;
                        frontier_phi_74_pred_1 = _3360;
                        frontier_phi_74_pred_2 = _3359;
                        frontier_phi_74_pred_3 = _3364;
                        frontier_phi_74_pred_4 = _3363;
                        frontier_phi_74_pred_5 = _3362;
                    }
                    else
                    {
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3570 = _3359;
                        float _3571 = _3360;
                        float _3572 = _3361;
                        float _3573 = _3362;
                        float _3574 = _3363;
                        float _3575 = _3364;
                        uint _3576 = _3374;
                        uint _3577;
                        vec4 _3602;
                        float _3603;
                        vec4 _3618;
                        vec3 _3630;
                        vec4 _3645;
                        vec4 _3660;
                        float _3707;
                        bool _3708;
                        for (;;)
                        {
                            uint _3587 = ((_3365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3576));
                            _3577 = (_3576 + 4294967295u) & _3576;
                            uint _3589 = _3587 * 40u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3603 = _3602.w;
                            uint _3605 = (_3587 * 40u) + 4u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3587 * 40u) + 8u;
                            _3630 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x));
                            uint _3632 = (_3587 * 40u) + 16u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3587 * 40u) + 20u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3663 = (_3587 * 40u) + 24u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3682 = (_3587 * 40u) + 28u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            _3707 = fma(_2088, _3695.z, fma(_2087, _3695.y, _3695.x * _2086)) + _3695.w;
                            _3708 = !((fma(_2088, _3676.z, fma(_2087, _3676.y, _3676.x * _2086)) + _3676.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3708)
                            {
                                float _3735 = _3602.x - _2086;
                                float _3736 = _3602.y - _2087;
                                float _3737 = _3602.z - _2088;
                                float _3738 = dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737));
                                float _3741 = inversesqrt(_3738);
                                float _3742 = _3741 * _3735;
                                float _3743 = _3741 * _3736;
                                float _3744 = _3741 * _3737;
                                float _3748 = 1.0 - (_3738 / (_3603 * _3603));
                                float _5021 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3753 = sqrt(_3738) * _3618.w;
                                float _3755 = 1.39999997615814208984375 / (_3753 + 1.39999997615814208984375);
                                float _3756 = _3755 * _3755;
                                float _3759 = ((1.0 - _3756) * dot(vec3(_3742, _3743, _3744), vec3(_951, _954, _957))) + _3756;
                                float _3762 = _3753 * _3753;
                                float _3766 = (fma(_2088, _3645.z, fma(_2087, _3645.y, _3645.x * _2086)) + _3645.w) / _3707;
                                float _3767 = (fma(_2088, _3660.z, fma(_2087, _3660.y, _3660.x * _2086)) + _3660.w) / _3707;
                                float _3771 = 1.0 - dot(vec2(_3766, _3767), vec2(_3766, _3767));
                                float _5037 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3773 = _3772 * (((isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0))) * _3749) / ((_3762 * 0.699999988079071044921875) + 1.0));
                                float _3785 = exp2(log2(1.0 / ((_3762 * 3.5) + 5.0)) * 0.25);
                                float _3786 = 1.0 - _1026;
                                float _3793 = sqrt(1.0 - ((1.0 - (_3786 * _3786)) * (1.0 - (_3785 * _3785))));
                                float _3794 = _3793 * _3793;
                                float _3795 = _3794 * _3794;
                                float _3796 = _3742 - _3246;
                                float _3797 = _3743 - _3247;
                                float _3798 = _3744 - _3248;
                                float _3802 = inversesqrt(dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798)));
                                float _3806 = dot(vec3(_951, _954, _957), vec3((-0.0) - _3246, (-0.0) - _3247, (-0.0) - _3248));
                                float _5048 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3810 = dot(vec3(_951, _954, _957), vec3(_3802 * _3796, _3802 * _3797, _3802 * _3798));
                                float _5059 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3817 = ((_3813 * _3813) * (_3795 + (-1.0))) + 1.0;
                                float _3818 = _3755 * _3794;
                                float _3819 = _3818 * _3818;
                                float _3825 = ((1.0 - _3819) * dot(vec3(_951, _954, _957), vec3(_3742, _3743, _3744))) + _3819;
                                float _5070 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3827 = 1.0 - _3794;
                                float _3837 = (0.5 / (((_3826 * ((_3809 * _3827) + _3794)) + 9.9999999392252902907785028219223e-09) + (((_3826 * _3827) + _3794) * _3809))) * _3826;
                                float _5081 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3847 = (_3772 * _3749) * (((_3795 * 3.1415927410125732421875) * (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) / ((_3817 * _3817) * ((_3762 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3847 * _3630.z;
                                frontier_phi_80_pred_1 = _3847 * _3630.y;
                                frontier_phi_80_pred_2 = _3847 * _3630.x;
                                frontier_phi_80_pred_3 = _3773 * _3618.z;
                                frontier_phi_80_pred_4 = _3773 * _3618.y;
                                frontier_phi_80_pred_5 = _3773 * _3618.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3853 = frontier_phi_80_pred;
                            _3852 = frontier_phi_80_pred_1;
                            _3851 = frontier_phi_80_pred_2;
                            _3856 = frontier_phi_80_pred_3;
                            _3855 = frontier_phi_80_pred_4;
                            _3854 = frontier_phi_80_pred_5;
                            _3560 = _3854 + _3573;
                            _3561 = _3855 + _3574;
                            _3562 = _3856 + _3575;
                            _3557 = _3851 + _3570;
                            _3558 = _3852 + _3571;
                            _3559 = _3853 + _3572;
                            if (_3577 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3577;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3559;
                        frontier_phi_74_pred_1 = _3558;
                        frontier_phi_74_pred_2 = _3557;
                        frontier_phi_74_pred_3 = _3562;
                        frontier_phi_74_pred_4 = _3561;
                        frontier_phi_74_pred_5 = _3560;
                    }
                    _3225 = frontier_phi_74_pred;
                    _3223 = frontier_phi_74_pred_1;
                    _3221 = frontier_phi_74_pred_2;
                    _3231 = frontier_phi_74_pred_3;
                    _3229 = frontier_phi_74_pred_4;
                    _3227 = frontier_phi_74_pred_5;
                    uint _3366 = _3365 + 1u;
                    if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3359 = _3221;
                        _3360 = _3223;
                        _3361 = _3225;
                        _3362 = _3227;
                        _3363 = _3229;
                        _3364 = _3231;
                        _3365 = _3366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3229;
                frontier_phi_62_63_ladder_1 = _3227;
                frontier_phi_62_63_ladder_2 = _3225;
                frontier_phi_62_63_ladder_3 = _3231;
                frontier_phi_62_63_ladder_4 = _3223;
                frontier_phi_62_63_ladder_5 = _3221;
            }
            else
            {
                frontier_phi_62_63_ladder = _3116;
                frontier_phi_62_63_ladder_1 = _3114;
                frontier_phi_62_63_ladder_2 = _3112;
                frontier_phi_62_63_ladder_3 = _3118;
                frontier_phi_62_63_ladder_4 = _3110;
                frontier_phi_62_63_ladder_5 = _3108;
            }
            _3220 = frontier_phi_62_63_ladder_5;
            _3222 = frontier_phi_62_63_ladder_4;
            _3224 = frontier_phi_62_63_ladder_2;
            _3226 = frontier_phi_62_63_ladder_1;
            _3228 = frontier_phi_62_63_ladder;
            _3230 = frontier_phi_62_63_ladder_3;
        }
        float _3235 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        _3039 = (_3235 * _3226) + _2552;
        _3041 = (_3235 * _3228) + _2554;
        _3043 = (_3235 * _3230) + _2556;
        _3045 = ((_3220 * _995) * _3235) + _2890;
        _3047 = ((_3222 * _997) * _3235) + _2892;
        _3049 = ((_3224 * _998) * _3235) + _2894;
    }
    else
    {
        _3039 = _2552;
        _3041 = _2554;
        _3043 = _2556;
        _3045 = _2890;
        _3047 = _2892;
        _3049 = _2894;
    }
    float _5097 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _5108 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _5119 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _5130 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3074 = cbInstanceData._m0[_970 + 6u].w * (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0)));
    float _3079 = _932 / cbSceneParam._m0[86u].x;
    float _3080 = _933 / cbSceneParam._m0[86u].y;
    vec4 _3094 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3079, _3080, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3096 = _3094.x;
    float _3097 = _3094.y;
    float _3098 = _3094.z;
    float _3099 = _3094.w;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _3133 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _3134 = _3133 / _867;
        float _3145 = _3134 * _917;
        float _3146 = _918 * _3134;
        float _3147 = (-0.0) - _3146;
        float _3148 = _3134 * _919;
        float _3150 = (cbSceneParam._m0[77u].w * _3147) / _3133;
        float _3151 = _3150 + cbSceneParam._m0[79u].w;
        float _3152 = cbSceneParam._m0[79u].w - _3146;
        float _3158 = sqrt(((_3145 * _3145) + (_3146 * _3146)) + (_3148 * _3148));
        float _3161 = (1.0 - (cbSceneParam._m0[77u].w / _3133)) * _3158;
        float _3166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3321;
        if (abs((_3147 - _3150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3321 = ((((_3151 > 0.0) ? exp2(_3166 * _3151) : (2.0 - exp2(_3168 * _3151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3161;
        }
        else
        {
            float _3281 = 1.0 / cbSceneParam._m0[80u].x;
            float _3282 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : max(_3151, _3152));
            float _3283 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : min(_3151, _3152));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            _3321 = ((abs(_3158 / _3147) * cbSceneParam._m0[80u].y) * ((((_3292 - _3293) * 2.0) - ((exp2(_3166 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0)))) - exp2(_3166 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))))) * _3281)) - ((exp2(_3168 * _3292) - exp2(_3168 * _3293)) * _3281))) + (_3161 * cbSceneParam._m0[80u].z);
        }
        vec4 _3323 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3079, _3080, 1.0), 0.0);
        float _3332 = exp2((_3321 * (-1.44269502162933349609375)) * (1.0 - _3323.w));
        float _3333 = log2(_3332);
        float _3349 = log2(_3099);
        _3170 = (exp2(_3349 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].x)) * _3323.x) / cbSceneParam._m0[78u].x)) + _3096;
        _3172 = (exp2(_3349 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].y)) * _3323.y) / cbSceneParam._m0[78u].y)) + _3097;
        _3174 = (exp2(_3349 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].z)) * _3323.z) / cbSceneParam._m0[78u].z)) + _3098;
        _3176 = _3332 * _3099;
    }
    else
    {
        _3170 = _3096;
        _3172 = _3097;
        _3174 = _3098;
        _3176 = _3099;
    }
    float _3188 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3189 = _3188 == 3.0;
    float _3190 = log2(_3176);
    float _3197 = exp2(_3190 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3039 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1010))) + ((_3045 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3198 = exp2(_3190 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3041 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1010))) + ((_3047 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3199 = exp2(_3190 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3043 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1010))) + ((_3049 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3208 = (_3188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3208 * (_3189 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3170)));
    SV_Target.y = _3208 * (_3189 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3172)));
    SV_Target.z = _3208 * (_3189 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3174)));
    SV_Target.w = _3074;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3074;
}


