#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _233 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _234 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _235 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _239 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _240 = _239 * _233;
    float _241 = _239 * _234;
    float _242 = _239 * _235;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _260 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _261 = _260 * TANGENT_2.x;
    float _262 = _260 * TANGENT_2.y;
    float _263 = _260 * TANGENT_2.z;
    float _268;
    float _269;
    float _270;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _268 = (-0.0) - _247;
        _269 = (-0.0) - _248;
        _270 = (-0.0) - _249;
    }
    else
    {
        _268 = _247;
        _269 = _248;
        _270 = _249;
    }
    vec4 _315 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _327 = 1.0 - ((1.0 - _315.x) * 1.39999997615814208984375);
    float _3709 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _335 = (_328 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[16u].x)) + cbMtdParam._m0[16u].x;
    float _336 = (_328 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[16u].y)) + cbMtdParam._m0[16u].y;
    float _337 = (_328 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z;
    float _339 = 1.0 - ((1.0 - _315.y) * 1.39999997615814208984375);
    float _3720 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _347 = (_340 * (cbMtdParam._m0[14u].x - _335)) + _335;
    float _348 = (_340 * (cbMtdParam._m0[14u].y - _336)) + _336;
    float _349 = (_340 * (cbMtdParam._m0[14u].z - _337)) + _337;
    float _351 = 1.0 - ((1.0 - _315.z) * 1.39999997615814208984375);
    float _3731 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    vec4 _377 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _379 = _377.x;
    float _380 = _379 * cbMtdParam._m0[20u].x;
    float _394 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _380) + (cbMtdParam._m0[17u].z * TEXCOORD_5.w))) + 1.0;
    float _3742 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _396 = 1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)));
    float _397 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _398 = isnan(1.0) ? _397 : (isnan(_397) ? 1.0 : min(_397, 1.0));
    float _406 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _380) + (cbMtdParam._m0[17u].y * TEXCOORD_5.z))) + 1.0;
    float _3763 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _408 = 1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)));
    float _409 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    vec4 _428 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    float _433 = cbMtdParam._m0[12u].x * _410;
    float _435 = cbMtdParam._m0[12u].y * _410;
    float _437 = cbMtdParam._m0[12u].z * _410;
    float _457 = _408 + _396;
    float _458 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _459 = isnan(1.0) ? _458 : (isnan(_458) ? 1.0 : min(_458, 1.0));
    vec4 _477 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _482 = _477.w;
    float _483 = _477.x * cbMtdParam._m0[10u].x;
    float _484 = _477.y * cbMtdParam._m0[10u].y;
    float _485 = _477.z * cbMtdParam._m0[10u].z;
    float _505 = ((_483 - (_459 * _483)) + ((((((_430 * (cbMtdParam._m0[11u].x - _433)) * _398) + (_433 * _430)) * 4.55000019073486328125) * _459) * _483)) * ((_352 * (cbMtdParam._m0[15u].x - _347)) + _347);
    float _506 = ((((((((_431 * (cbMtdParam._m0[11u].y - _435)) * _398) + (_435 * _431)) * 4.55000019073486328125) * _459) * _484) + _484) - (_459 * _484)) * ((_352 * (cbMtdParam._m0[15u].y - _348)) + _348);
    float _507 = ((((((((_432 * (cbMtdParam._m0[11u].z - _437)) * _398) + (_437 * _432)) * 4.55000019073486328125) * _459) * _485) + _485) - (_459 * _485)) * ((_352 * (cbMtdParam._m0[15u].z - _349)) + _349);
    float _516 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[19u].y) + 1.0;
    float _3794 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _528 = ((((_379 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[19u].z) + 1.0;
    float _3805 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    vec4 _544 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _550 = (_544.x * 2.0) + (-1.0);
    float _551 = (_544.y * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3816 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))));
    float _560 = fma(_557, _268, fma(_551, _254, _550 * _221));
    float _563 = fma(_557, _269, fma(_551, _255, _550 * _222));
    float _566 = fma(_557, _270, fma(_551, _256, _550 * _223));
    float _575 = exp2(log2(inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566))) * _563) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w;
    float _3827 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) + (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * (1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    float _3838 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _581 = 3.0 - (_579 * 2.0);
    float _586 = _579 * _579;
    float _593 = ((_586 * (cbMtdParam._m0[13u].x - _505)) * _581) + _505;
    float _594 = ((_586 * (cbMtdParam._m0[13u].y - _506)) * _581) + _506;
    float _595 = ((_586 * (cbMtdParam._m0[13u].z - _507)) * _581) + _507;
    vec4 _609 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _613 = _609.z;
    float _616 = (_609.x * 2.0) + (-1.0);
    float _617 = (_609.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_616, _617), vec2(_616, _617));
    float _3849 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    float _626 = fma(_623, _268, fma(_617, _261, _616 * _240));
    float _629 = fma(_623, _269, fma(_617, _262, _616 * _241));
    float _632 = fma(_623, _270, fma(_617, _263, _616 * _242));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    vec4 _652 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _659 = (_652.x * 2.0) + (-1.0);
    float _660 = (_652.y * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _3860 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _669 = ((_652.z - _613) * _578) + _613;
    vec4 _681 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _687 = (_681.x * 2.0) + (-1.0);
    float _688 = (_681.y * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3871 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))));
    float _697 = fma(_694, _268, fma(_688, _261, _687 * _240));
    float _700 = fma(_694, _269, fma(_688, _262, _687 * _241));
    float _703 = fma(_694, _270, fma(_688, _263, _687 * _242));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _713 = fma(_710, _223, fma(_709, _222, _708 * _221));
    float _716 = fma(_710, _256, fma(_709, _255, _708 * _254));
    float _719 = fma(_710, _270, fma(_709, _269, _708 * _268));
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    float _727 = fma(_639, _223, fma(_638, _222, _637 * _221));
    float _730 = fma(_639, _256, fma(_638, _255, _637 * _254));
    float _733 = fma(_639, _270, fma(_638, _269, _637 * _268));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    vec4 _755 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _761 = (_755.x * 2.0) + (-1.0);
    float _762 = (_755.y * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3882 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))));
    float _771 = fma(_768, _268, fma(_762, _261, _761 * _240));
    float _774 = fma(_768, _269, fma(_762, _262, _761 * _241));
    float _777 = fma(_768, _270, fma(_762, _263, _761 * _242));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _787 = fma(_784, _223, fma(_783, _222, _782 * _221));
    float _790 = fma(_784, _256, fma(_783, _255, _782 * _254));
    float _793 = fma(_784, _270, fma(_783, _269, _782 * _268));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _813 = (((((_713 * _398) * _723) * cbMtdParam._m0[18u].y) + _550) + ((_737 * _727) * cbMtdParam._m0[19u].w)) + (((_787 * _410) * _797) * cbMtdParam._m0[19u].x);
    float _816 = (((((_716 * _398) * _723) * cbMtdParam._m0[18u].y) + _551) + ((_737 * _730) * cbMtdParam._m0[19u].w)) + (((_790 * _410) * _797) * cbMtdParam._m0[19u].x);
    float _823 = ((_659 - _813) * _578) + _813;
    float _824 = (_578 * (_660 - _816)) + _816;
    float _825 = (_578 * (sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _557)) + _557;
    float _828 = fma(_825, _268, fma(_824, _254, _823 * _221));
    float _831 = fma(_825, _269, fma(_824, _255, _823 * _222));
    float _834 = fma(_825, _270, fma(_824, _256, _823 * _223));
    float _838 = inversesqrt(dot(vec3(_828, _831, _834), vec3(_828, _831, _834)));
    float _839 = _838 * _828;
    float _840 = _838 * _831;
    float _841 = _838 * _834;
    float _3893 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _842 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _843 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3926 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3937 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3948 = isnan(0.0) ? cbMtdParam._m0[20u].y : (isnan(cbMtdParam._m0[20u].y) ? 0.0 : max(cbMtdParam._m0[20u].y, 0.0));
    float _847 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_841, cbSceneParam._m0[5u].z, fma(_840, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _839));
    float _950 = fma(_841, cbSceneParam._m0[6u].z, fma(_840, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _839));
    float _953 = fma(_841, cbSceneParam._m0[7u].z, fma(_840, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _839));
    uint _966 = uint(roundEven(NORMAL.w)) * 13u;
    uint _968 = (_966 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_968].z;
    float _3959 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _980 = 1.0 - _847;
    float _981 = _977 * _980;
    float _982 = _978 * _980;
    float _983 = _979 * _980;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _847;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _847;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _847;
    float _991 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = _1003.x * TEXCOORD_4;
    float _1007 = dot(vec3(_839, _840, _841), vec3(_920, _921, _922));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _839) - _920;
    float _1015 = (_1010 * _840) - _921;
    float _1016 = (_1010 * _841) - _922;
    float _1020 = abs(dot(vec3(_920, _921, _922), vec3(_839, _840, _841)));
    float _3992 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_843);
    float _1034 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1040 = (1.0 - _1034) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1041 = _1034 * _1022;
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1077, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069));
        float _1108 = fma(_1077, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069));
        float _1112 = fma(_1077, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069));
        float _1137 = _1069 + _839;
        float _1138 = _1073 + _840;
        float _1139 = _1077 + _841;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_839, _840, _841), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4040 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_839, _840, _841), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4073 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_839, _840, _841), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4106 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1077, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069));
        float _1424 = fma(_1077, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069));
        float _1428 = fma(_1077, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069));
        float _1451 = _1069 + _839;
        float _1452 = _1073 + _840;
        float _1453 = _1077 + _841;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_839, _840, _841), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4169 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_839, _840, _841), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4202 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_839, _840, _841), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4235 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1393)) + _1393;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _1014 * 0.5;
    float _1758 = _1015 * 0.5;
    float _1759 = _1016 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _843);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1077, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1077, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1077, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1887 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1890 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1918 = frontier_phi_16_14_ladder;
        }
        float _2121;
        if (_1887 > 0.0)
        {
            _2121 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2121 = frontier_phi_25_21_ladder;
        }
        float _2375;
        if (_1890 > 0.0)
        {
            _2375 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2375 = frontier_phi_37_32_ladder;
        }
        float _2377 = isnan(_2121) ? _1918 : (isnan(_1918) ? _2121 : min(_1918, _2121));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1884) + _1873;
        float _2383 = (_2378 * _1887) + _1877;
        float _2384 = (_2378 * _1890) + _1881;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2385;
        float _2389 = _2385 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 > _2389) || ((_2383 < _2387) || ((_2382 < _2387) || (_2382 > _2389))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2384, cbModelParam._m0[9u].z, fma(_2383, cbModelParam._m0[9u].y, _2382 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2384, cbModelParam._m0[10u].z, fma(_2383, cbModelParam._m0[10u].y, _2382 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2384, cbModelParam._m0[11u].z, fma(_2383, cbModelParam._m0[11u].y, _2382 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_15_37_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_15_37_ladder_2;
        _1908 = frontier_phi_15_37_ladder_1;
        _1910 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1826);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _843);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1077, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1077, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1077, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _1983 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _1986 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2126;
        if (_1980 > 0.0)
        {
            _2126 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2126 = frontier_phi_27_23_ladder;
        }
        float _2402;
        if (_1983 > 0.0)
        {
            _2402 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2402 = frontier_phi_39_34_ladder;
        }
        float _2615;
        if (_1986 > 0.0)
        {
            _2615 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2615 = frontier_phi_48_45_ladder;
        }
        float _2617 = isnan(_2402) ? _2126 : (isnan(_2126) ? _2402 : min(_2126, _2402));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1980) + _1969;
        float _2623 = (_2618 * _1983) + _1973;
        float _2624 = (_2618 * _1986) + _1977;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_24_48_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_24_48_ladder_2;
        _2007 = frontier_phi_24_48_ladder_1;
        _2009 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1915);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2022 = (((_1040 * _991) + _1041) * _1006) * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2024 = (((_1040 * _993) + _1041) * _1006) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1040 * _994) + _1041) * _1006) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_966 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2055 = _1006 + (-1.0);
    float _2060 = (cbLight._m0[_2048].x * _2055) + 1.0;
    float _2061 = (cbLight._m0[_2048].y * _2055) + 1.0;
    float _2062 = (cbLight._m0[_2048].z * _2055) + 1.0;
    float _2063 = (cbLight._m0[_2048].w * _2055) + 1.0;
    uint _2064 = _2047 + 5u;
    float _2070 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2074 = _2047 + 4u;
    float _2080 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2084 = _2047 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_839, _840, _841));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_839, _840, _841));
    float _4371 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4382 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2064].x * _2070) * _2105) + ((cbLight._m0[_2074].x * _2080) * _2103);
    float _2113 = ((_2070 * cbLight._m0[_2064].y) * _2105) + ((_2080 * cbLight._m0[_2074].y) * _2103);
    float _2114 = ((_2070 * cbLight._m0[_2064].z) * _2105) + ((_2080 * cbLight._m0[_2074].z) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2047 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2120)
    {
        _2131 = _2112;
        _2133 = _2113;
        _2135 = _2114;
    }
    else
    {
        uint _2139 = _2047 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_2047 + 2u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4393 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2158 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2112;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2113;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2114;
    }
    bool _2138 = _2118.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2138)
    {
        _2176 = _2131;
        _2178 = _2133;
        _2180 = _2135;
    }
    else
    {
        uint _2346 = _2047 + 7u;
        float _2362 = (dot(vec3(cbLight._m0[_2047 + 3u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4409 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2365 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2176 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2131;
        _2178 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2133;
        _2180 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2135;
    }
    uint _2183 = _2047 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _843) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2047].x + _920;
    float _2199 = cbLight._m0[_2047].y + _921;
    float _2200 = cbLight._m0[_2047].z + _922;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2047].xyz));
    float _4425 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2212 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2213 = dot(vec3(_839, _840, _841), vec3(_2205, _2206, _2207));
    float _4447 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2205, _2206, _2207));
    float _4458 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2234 = 0.959999978542327880859375 - _988;
    float _2236 = 0.959999978542327880859375 - _989;
    float _2237 = 0.959999978542327880859375 - _990;
    float _2244 = 1.0 - _2197;
    float _2255 = (0.5 / (((_2212 * ((_2211 * _2244) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2244) + _2197) * _2211))) * _2211;
    float _4469 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2268 = _2047 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _843) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2084].x + _920;
    float _2282 = cbLight._m0[_2084].y + _921;
    float _2283 = cbLight._m0[_2084].z + _922;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2084].xyz));
    float _4480 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2295 = dot(vec3(_839, _840, _841), vec3(_2288, _2289, _2290));
    float _4491 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2288, _2289, _2290));
    float _4502 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2321 = 1.0 - _2280;
    float _2331 = (0.5 / (((_2212 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2321) + _2280) * _2294))) * _2294;
    float _4513 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2343 = (((((_2314 * _2234) + _991) * cbLight._m0[_2268].x) * _2333) * _2070) + (((((_2233 * _2234) + _991) * cbLight._m0[_2183].x) * _2257) * _2080);
    float _2344 = (((((_2314 * _2236) + _993) * cbLight._m0[_2268].y) * _2333) * _2070) + (((((_2233 * _2236) + _993) * cbLight._m0[_2183].y) * _2257) * _2080);
    float _2345 = (((((_2314 * _2237) + _994) * cbLight._m0[_2268].z) * _2333) * _2070) + (((((_2233 * _2237) + _994) * cbLight._m0[_2183].z) * _2257) * _2080);
    float _2407;
    float _2409;
    float _2411;
    if (_2120)
    {
        _2407 = _2343;
        _2409 = _2344;
        _2411 = _2345;
    }
    else
    {
        uint _2413 = _2047 + 2u;
        uint _2417 = _2047 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _843) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _920;
        float _2434 = cbLight._m0[_2413].y + _921;
        float _2435 = cbLight._m0[_2413].z + _922;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2413].xyz));
        float _4524 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2447 = dot(vec3(_839, _840, _841), vec3(_2440, _2441, _2442));
        float _4535 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4546 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2212 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2473) + _2432) * _2446))) * _2446;
        float _4557 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2407 = (((((_2466 * _2234) + _991) * cbLight._m0[_2417].x) * _2485) * _2486) + _2343;
        _2409 = (((((_2466 * _2236) + _993) * cbLight._m0[_2417].y) * _2485) * _2486) + _2344;
        _2411 = (((((_2466 * _2237) + _994) * cbLight._m0[_2417].z) * _2485) * _2486) + _2345;
    }
    float _2521;
    float _2523;
    float _2525;
    if (_2138)
    {
        _2521 = _2407;
        _2523 = _2409;
        _2525 = _2411;
    }
    else
    {
        uint _2532 = _2047 + 3u;
        uint _2536 = _2047 + 11u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _843) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _920;
        float _2553 = cbLight._m0[_2532].y + _921;
        float _2554 = cbLight._m0[_2532].z + _922;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2532].xyz));
        float _4573 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2566 = dot(vec3(_839, _840, _841), vec3(_2559, _2560, _2561));
        float _4584 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4595 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2212 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2592) + _2551) * _2565))) * _2565;
        float _4606 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2521 = (((((_2585 * _2234) + _991) * cbLight._m0[_2536].x) * _2604) * _2605) + _2407;
        _2523 = (((((_2585 * _2236) + _993) * cbLight._m0[_2536].y) * _2604) * _2605) + _2409;
        _2525 = (((((_2585 * _2237) + _994) * cbLight._m0[_2536].z) * _2604) * _2605) + _2411;
    }
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_2045.y == 0u)
    {
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2680;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2680;
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2680;
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.x;
        uint _2707 = uint((float(_2695.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2696))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2696)));
        float _2717 = (log2(_2683 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2718 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        uint _2721 = uint(isnan(14.0) ? _2718 : (isnan(_2718) ? 14.0 : min(_2718, 14.0)));
        uvec4 _2726 = texelFetch(g_lightClusterGridBuffer, int(((_2721 << 2u) + (_2707 << 6u)) >> 2u));
        uint _2727 = _2726.x;
        uint _2728 = _2695.z;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((((1u << ((_2728 >> 4u) & 15u)) + 4294967295u) & _2727) == 0u) || ((_2728 & 240u) == 0u))
        {
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
        }
        else
        {
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            uint _2979 = 0u;
            uint _2988;
            bool _2989;
            for (;;)
            {
                _2988 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                _2989 = _2988 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2989)
                {
                    frontier_phi_63_pred = _2978;
                    frontier_phi_63_pred_1 = _2977;
                    frontier_phi_63_pred_2 = _2976;
                    frontier_phi_63_pred_3 = _2975;
                    frontier_phi_63_pred_4 = _2974;
                    frontier_phi_63_pred_5 = _2973;
                }
                else
                {
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    uint _3103;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2988;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    for (;;)
                    {
                        uint _3107 = uint(findLSB(_3103)) + (_2979 << 5u);
                        uint _3104 = (_3103 + 4294967295u) & _3103;
                        uint _3109 = _3107 * 48u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3129 = (_3107 * 48u) + 4u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3148 = (_3107 * 48u) + 8u;
                        vec3 _3159 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x));
                        float _3163 = _3123.x - _2681;
                        float _3164 = _3123.y - _2682;
                        float _3165 = _3123.z - _2683;
                        float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                        float _3169 = inversesqrt(_3166);
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3173 = dot(vec3(_947, _950, _953), vec3(_3170, _3171, _3172));
                        float _3178 = 1.0 - (_3166 * _3123.w);
                        float _4632 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3180 = sqrt(_3166) * _3142.w;
                        float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                        float _3183 = _3182 * _3182;
                        float _3186 = ((1.0 - _3183) * _3173) + _3183;
                        float _3189 = _3180 * _3180;
                        float _3193 = ((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3179) / ((_3189 * 0.699999988079071044921875) + 1.0);
                        float _3197 = (-0.0) - _2681;
                        float _3198 = (-0.0) - _2682;
                        float _3199 = (-0.0) - _2683;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3214 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                        float _3215 = 1.0 - _1022;
                        float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                        float _3223 = _3222 * _3222;
                        float _3224 = _3223 * _3223;
                        float _3225 = _3204 + _3170;
                        float _3226 = _3205 + _3171;
                        float _3227 = _3206 + _3172;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3235 = dot(vec3(_947, _950, _953), vec3(_3204, _3205, _3206));
                        float _4648 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3239 = dot(vec3(_947, _950, _953), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                        float _4659 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                        float _3247 = _3182 * _3223;
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3173) + _3248;
                        float _4670 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3253 = 1.0 - _3223;
                        float _3263 = (0.5 / (((_3252 * ((_3238 * _3253) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3223) * _3238))) * _3252;
                        float _4681 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3274 = (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3246 * _3246) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125))) * _3179;
                        _3032 = (_3193 * _3142.x) + _3100;
                        _3033 = (_3193 * _3142.y) + _3101;
                        _3034 = (_3193 * _3142.z) + _3102;
                        _3029 = (_3274 * _3159.x) + _3097;
                        _3030 = (_3274 * _3159.y) + _3098;
                        _3031 = (_3274 * _3159.z) + _3099;
                        if (_3104 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3104;
                        }
                    }
                    frontier_phi_63_pred = _3034;
                    frontier_phi_63_pred_1 = _3033;
                    frontier_phi_63_pred_2 = _3032;
                    frontier_phi_63_pred_3 = _3031;
                    frontier_phi_63_pred_4 = _3030;
                    frontier_phi_63_pred_5 = _3029;
                }
                _2840 = frontier_phi_63_pred;
                _2838 = frontier_phi_63_pred_1;
                _2836 = frontier_phi_63_pred_2;
                _2834 = frontier_phi_63_pred_3;
                _2832 = frontier_phi_63_pred_4;
                _2830 = frontier_phi_63_pred_5;
                uint _2980 = _2979 + 1u;
                if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2973 = _2830;
                    _2974 = _2832;
                    _2975 = _2834;
                    _2976 = _2836;
                    _2977 = _2838;
                    _2978 = _2840;
                    _2979 = _2980;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
        }
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.z;
        uint _2846 = (_2844 >> 8u) & 15u;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((4294967295u << _2846) & _2727) == 0u)
        {
            _2941 = _2829;
            _2943 = _2831;
            _2945 = _2833;
            _2947 = _2835;
            _2949 = _2837;
            _2951 = _2839;
        }
        else
        {
            float _2966 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
            float _2967 = _2966 * _2681;
            float _2968 = _2966 * _2682;
            float _2969 = _2966 * _2683;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2846 < ((_2844 >> 12u) & 15u))
            {
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _3080 = _2829;
                float _3081 = _2831;
                float _3082 = _2833;
                float _3083 = _2835;
                float _3084 = _2837;
                float _3085 = _2839;
                uint _3086 = _2846;
                uint _3095;
                bool _3096;
                for (;;)
                {
                    _3095 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                    _3096 = _3095 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3096)
                    {
                        frontier_phi_69_pred = _3085;
                        frontier_phi_69_pred_1 = _3084;
                        frontier_phi_69_pred_2 = _3083;
                        frontier_phi_69_pred_3 = _3082;
                        frontier_phi_69_pred_4 = _3081;
                        frontier_phi_69_pred_5 = _3080;
                    }
                    else
                    {
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        float _3295 = _3083;
                        float _3296 = _3084;
                        float _3297 = _3085;
                        uint _3298 = _3095;
                        uint _3299;
                        vec4 _3324;
                        float _3325;
                        vec4 _3340;
                        vec3 _3352;
                        vec4 _3367;
                        vec4 _3382;
                        float _3429;
                        bool _3430;
                        for (;;)
                        {
                            uint _3309 = ((_3086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3298));
                            _3299 = (_3298 + 4294967295u) & _3298;
                            uint _3311 = _3309 * 40u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3325 = _3324.w;
                            uint _3327 = (_3309 * 40u) + 4u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3309 * 40u) + 8u;
                            _3352 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x));
                            uint _3354 = (_3309 * 40u) + 16u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3309 * 40u) + 20u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3385 = (_3309 * 40u) + 24u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3404 = (_3309 * 40u) + 28u;
                            vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3429 = fma(_2683, _3417.z, fma(_2682, _3417.y, _3417.x * _2681)) + _3417.w;
                            _3430 = !((fma(_2683, _3398.z, fma(_2682, _3398.y, _3398.x * _2681)) + _3398.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3430)
                            {
                                float _3457 = _3324.x - _2681;
                                float _3458 = _3324.y - _2682;
                                float _3459 = _3324.z - _2683;
                                float _3460 = dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459));
                                float _3463 = inversesqrt(_3460);
                                float _3464 = _3463 * _3457;
                                float _3465 = _3463 * _3458;
                                float _3466 = _3463 * _3459;
                                float _3470 = 1.0 - (_3460 / (_3325 * _3325));
                                float _4692 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3475 = sqrt(_3460) * _3340.w;
                                float _3477 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                                float _3478 = _3477 * _3477;
                                float _3481 = ((1.0 - _3478) * dot(vec3(_3464, _3465, _3466), vec3(_947, _950, _953))) + _3478;
                                float _3484 = _3475 * _3475;
                                float _3488 = (fma(_2683, _3367.z, fma(_2682, _3367.y, _3367.x * _2681)) + _3367.w) / _3429;
                                float _3489 = (fma(_2683, _3382.z, fma(_2682, _3382.y, _3382.x * _2681)) + _3382.w) / _3429;
                                float _3493 = 1.0 - dot(vec2(_3488, _3489), vec2(_3488, _3489));
                                float _4708 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3495 = _3494 * (((isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))) * _3471) / ((_3484 * 0.699999988079071044921875) + 1.0));
                                float _3507 = exp2(log2(1.0 / ((_3484 * 3.5) + 5.0)) * 0.25);
                                float _3508 = 1.0 - _1022;
                                float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                                float _3516 = _3515 * _3515;
                                float _3517 = _3516 * _3516;
                                float _3518 = _3464 - _2967;
                                float _3519 = _3465 - _2968;
                                float _3520 = _3466 - _2969;
                                float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                                float _3528 = dot(vec3(_947, _950, _953), vec3((-0.0) - _2967, (-0.0) - _2968, (-0.0) - _2969));
                                float _4719 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3532 = dot(vec3(_947, _950, _953), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                                float _4730 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                                float _3540 = _3477 * _3516;
                                float _3541 = _3540 * _3540;
                                float _3547 = ((1.0 - _3541) * dot(vec3(_947, _950, _953), vec3(_3464, _3465, _3466))) + _3541;
                                float _4741 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3549 = 1.0 - _3516;
                                float _3559 = (0.5 / (((_3548 * ((_3531 * _3549) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3516) * _3531))) * _3548;
                                float _4752 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3569 = (_3494 * _3471) * (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3539 * _3539) * ((_3484 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3495 * _3340.z;
                                frontier_phi_75_pred_1 = _3495 * _3340.y;
                                frontier_phi_75_pred_2 = _3495 * _3340.x;
                                frontier_phi_75_pred_3 = _3569 * _3352.z;
                                frontier_phi_75_pred_4 = _3569 * _3352.y;
                                frontier_phi_75_pred_5 = _3569 * _3352.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3578 = frontier_phi_75_pred;
                            _3577 = frontier_phi_75_pred_1;
                            _3576 = frontier_phi_75_pred_2;
                            _3575 = frontier_phi_75_pred_3;
                            _3574 = frontier_phi_75_pred_4;
                            _3573 = frontier_phi_75_pred_5;
                            _3282 = _3576 + _3295;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3279 = _3573 + _3292;
                            _3280 = _3574 + _3293;
                            _3281 = _3575 + _3294;
                            if (_3299 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3299;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3284;
                        frontier_phi_69_pred_1 = _3283;
                        frontier_phi_69_pred_2 = _3282;
                        frontier_phi_69_pred_3 = _3281;
                        frontier_phi_69_pred_4 = _3280;
                        frontier_phi_69_pred_5 = _3279;
                    }
                    _2952 = frontier_phi_69_pred;
                    _2950 = frontier_phi_69_pred_1;
                    _2948 = frontier_phi_69_pred_2;
                    _2946 = frontier_phi_69_pred_3;
                    _2944 = frontier_phi_69_pred_4;
                    _2942 = frontier_phi_69_pred_5;
                    uint _3087 = _3086 + 1u;
                    if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3080 = _2942;
                        _3081 = _2944;
                        _3082 = _2946;
                        _3083 = _2948;
                        _3084 = _2950;
                        _3085 = _2952;
                        _3086 = _3087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2952;
                frontier_phi_57_58_ladder_1 = _2950;
                frontier_phi_57_58_ladder_2 = _2948;
                frontier_phi_57_58_ladder_3 = _2946;
                frontier_phi_57_58_ladder_4 = _2944;
                frontier_phi_57_58_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_57_58_ladder = _2839;
                frontier_phi_57_58_ladder_1 = _2837;
                frontier_phi_57_58_ladder_2 = _2835;
                frontier_phi_57_58_ladder_3 = _2833;
                frontier_phi_57_58_ladder_4 = _2831;
                frontier_phi_57_58_ladder_5 = _2829;
            }
            _2941 = frontier_phi_57_58_ladder_5;
            _2943 = frontier_phi_57_58_ladder_4;
            _2945 = frontier_phi_57_58_ladder_3;
            _2947 = frontier_phi_57_58_ladder_2;
            _2949 = frontier_phi_57_58_ladder_1;
            _2951 = frontier_phi_57_58_ladder;
        }
        float _2956 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _2739 = (_2956 * _2947) + _2176;
        _2741 = (_2956 * _2949) + _2178;
        _2743 = (_2956 * _2951) + _2180;
        _2745 = ((_2941 * _991) * _2956) + _2521;
        _2747 = ((_2943 * _993) * _2956) + _2523;
        _2749 = ((_2945 * _994) * _2956) + _2525;
    }
    else
    {
        _2739 = _2176;
        _2741 = _2178;
        _2743 = _2180;
        _2745 = _2521;
        _2747 = _2523;
        _2749 = _2525;
    }
    float _4768 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4779 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4790 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4801 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2774 = cbInstanceData._m0[_966 + 6u].w * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)));
    float _2779 = _928 / cbSceneParam._m0[86u].x;
    float _2780 = _929 / cbSceneParam._m0[86u].y;
    vec4 _2794 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2796 = _2794.x;
    float _2797 = _2794.y;
    float _2798 = _2794.z;
    float _2799 = _2794.w;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _2854 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _2855 = _2854 / _863;
        float _2866 = _2855 * _913;
        float _2867 = _914 * _2855;
        float _2868 = (-0.0) - _2867;
        float _2869 = _2855 * _915;
        float _2871 = (cbSceneParam._m0[77u].w * _2868) / _2854;
        float _2872 = _2871 + cbSceneParam._m0[79u].w;
        float _2873 = cbSceneParam._m0[79u].w - _2867;
        float _2879 = sqrt(((_2866 * _2866) + (_2867 * _2867)) + (_2869 * _2869));
        float _2882 = (1.0 - (cbSceneParam._m0[77u].w / _2854)) * _2879;
        float _2887 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2889 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3042;
        if (abs((_2868 - _2871) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3042 = ((((_2872 > 0.0) ? exp2(_2887 * _2872) : (2.0 - exp2(_2889 * _2872))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2882;
        }
        else
        {
            float _3002 = 1.0 / cbSceneParam._m0[80u].x;
            float _3003 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : max(_2872, _2873));
            float _3004 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : min(_2872, _2873));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            _3042 = ((abs(_2879 / _2868) * cbSceneParam._m0[80u].y) * ((((_3013 - _3014) * 2.0) - ((exp2(_2887 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0)))) - exp2(_2887 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))))) * _3002)) - ((exp2(_2889 * _3013) - exp2(_2889 * _3014)) * _3002))) + (_2882 * cbSceneParam._m0[80u].z);
        }
        vec4 _3044 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, 1.0), 0.0);
        float _3053 = exp2((_3042 * (-1.44269502162933349609375)) * (1.0 - _3044.w));
        float _3054 = log2(_3053);
        float _3070 = log2(_2799);
        _2891 = (exp2(_3070 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].x)) * _3044.x) / cbSceneParam._m0[78u].x)) + _2796;
        _2893 = (exp2(_3070 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].y)) * _3044.y) / cbSceneParam._m0[78u].y)) + _2797;
        _2895 = (exp2(_3070 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].z)) * _3044.z) / cbSceneParam._m0[78u].z)) + _2798;
        _2897 = _3053 * _2799;
    }
    else
    {
        _2891 = _2796;
        _2893 = _2797;
        _2895 = _2798;
        _2897 = _2799;
    }
    float _2909 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2910 = _2909 == 3.0;
    float _2911 = log2(_2897);
    float _2918 = exp2(_2911 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2739 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1006))) + ((_2745 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1815)) * cbPerFrame._m0[3u].x));
    float _2919 = exp2(_2911 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2741 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1006))) + ((_2747 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1815)) * cbPerFrame._m0[3u].x));
    float _2920 = exp2(_2911 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2743 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1006))) + ((_2749 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1815)) * cbPerFrame._m0[3u].x));
    float _2929 = (_2909 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2929 * (_2910 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.y = _2929 * (_2910 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2893)));
    SV_Target.z = _2929 * (_2910 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.w = _2774;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2774;
}


