#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1382;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _235 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _236 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _237 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _241 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _242 = _241 * _235;
    float _243 = _241 * _236;
    float _244 = _241 * _237;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _262 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _263 = _262 * TANGENT_2.x;
    float _264 = _262 * TANGENT_2.y;
    float _265 = _262 * TANGENT_2.z;
    float _270;
    float _271;
    float _272;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _270 = (-0.0) - _249;
        _271 = (-0.0) - _250;
        _272 = (-0.0) - _251;
    }
    else
    {
        _270 = _249;
        _271 = _250;
        _272 = _251;
    }
    vec4 _317 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _329 = 1.0 - ((1.0 - _317.x) * 1.39999997615814208984375);
    float _3735 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _337 = (_330 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[16u].x)) + cbMtdParam._m0[16u].x;
    float _338 = (_330 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[16u].y)) + cbMtdParam._m0[16u].y;
    float _339 = (_330 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z;
    float _341 = 1.0 - ((1.0 - _317.y) * 1.39999997615814208984375);
    float _3746 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _349 = (_342 * (cbMtdParam._m0[14u].x - _337)) + _337;
    float _350 = (_342 * (cbMtdParam._m0[14u].y - _338)) + _338;
    float _351 = (_342 * (cbMtdParam._m0[14u].z - _339)) + _339;
    float _353 = 1.0 - ((1.0 - _317.z) * 1.39999997615814208984375);
    float _3757 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    vec4 _379 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _381 = _379.x;
    float _382 = _381 * cbMtdParam._m0[20u].x;
    float _396 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _382) + (cbMtdParam._m0[17u].z * TEXCOORD_5.w))) + 1.0;
    float _3768 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _398 = 1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)));
    float _399 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _400 = isnan(1.0) ? _399 : (isnan(_399) ? 1.0 : min(_399, 1.0));
    float _408 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _382) + (cbMtdParam._m0[17u].y * TEXCOORD_5.z))) + 1.0;
    float _3789 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _410 = 1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)));
    float _411 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    vec4 _430 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _435 = cbMtdParam._m0[12u].x * _412;
    float _437 = cbMtdParam._m0[12u].y * _412;
    float _439 = cbMtdParam._m0[12u].z * _412;
    float _459 = _410 + _398;
    float _460 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
    vec4 _479 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _484 = _479.w;
    float _485 = _479.x * cbMtdParam._m0[10u].x;
    float _486 = _479.y * cbMtdParam._m0[10u].y;
    float _487 = _479.z * cbMtdParam._m0[10u].z;
    float _507 = ((_485 - (_461 * _485)) + ((((((_432 * (cbMtdParam._m0[11u].x - _435)) * _400) + (_435 * _432)) * 4.55000019073486328125) * _461) * _485)) * ((_354 * (cbMtdParam._m0[15u].x - _349)) + _349);
    float _508 = ((((((((_433 * (cbMtdParam._m0[11u].y - _437)) * _400) + (_437 * _433)) * 4.55000019073486328125) * _461) * _486) + _486) - (_461 * _486)) * ((_354 * (cbMtdParam._m0[15u].y - _350)) + _350);
    float _509 = ((((((((_434 * (cbMtdParam._m0[11u].z - _439)) * _400) + (_439 * _434)) * 4.55000019073486328125) * _461) * _487) + _487) - (_461 * _487)) * ((_354 * (cbMtdParam._m0[15u].z - _351)) + _351);
    float _518 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[19u].y) + 1.0;
    float _3820 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _530 = ((((_381 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[19u].z) + 1.0;
    float _3831 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    vec4 _546 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _552 = (_546.x * 2.0) + (-1.0);
    float _553 = (_546.y * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3842 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    float _562 = fma(_559, _270, fma(_553, _256, _552 * _223));
    float _565 = fma(_559, _271, fma(_553, _257, _552 * _224));
    float _568 = fma(_559, _272, fma(_553, _258, _552 * _225));
    float _577 = exp2(log2(inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568))) * _565) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w;
    float _3853 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) + (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * (1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    float _3864 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _581 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _583 = 3.0 - (_581 * 2.0);
    float _588 = _581 * _581;
    float _595 = ((_588 * (cbMtdParam._m0[13u].x - _507)) * _583) + _507;
    float _596 = ((_588 * (cbMtdParam._m0[13u].y - _508)) * _583) + _508;
    float _597 = ((_588 * (cbMtdParam._m0[13u].z - _509)) * _583) + _509;
    vec4 _611 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _615 = _611.z;
    float _618 = (_611.x * 2.0) + (-1.0);
    float _619 = (_611.y * 2.0) + (-1.0);
    float _620 = dot(vec2(_618, _619), vec2(_618, _619));
    float _3875 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _625 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _628 = fma(_625, _270, fma(_619, _263, _618 * _242));
    float _631 = fma(_625, _271, fma(_619, _264, _618 * _243));
    float _634 = fma(_625, _272, fma(_619, _265, _618 * _244));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    float _639 = _638 * _628;
    float _640 = _638 * _631;
    float _641 = _638 * _634;
    vec4 _654 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _661 = (_654.x * 2.0) + (-1.0);
    float _662 = (_654.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _3886 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _671 = ((_654.z - _615) * _580) + _615;
    vec4 _683 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _689 = (_683.x * 2.0) + (-1.0);
    float _690 = (_683.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3897 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _696 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    float _699 = fma(_696, _270, fma(_690, _263, _689 * _242));
    float _702 = fma(_696, _271, fma(_690, _264, _689 * _243));
    float _705 = fma(_696, _272, fma(_690, _265, _689 * _244));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    float _710 = _709 * _699;
    float _711 = _709 * _702;
    float _712 = _709 * _705;
    float _715 = fma(_712, _225, fma(_711, _224, _710 * _223));
    float _718 = fma(_712, _258, fma(_711, _257, _710 * _256));
    float _721 = fma(_712, _272, fma(_711, _271, _710 * _270));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _729 = fma(_641, _225, fma(_640, _224, _639 * _223));
    float _732 = fma(_641, _258, fma(_640, _257, _639 * _256));
    float _735 = fma(_641, _272, fma(_640, _271, _639 * _270));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    vec4 _757 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _763 = (_757.x * 2.0) + (-1.0);
    float _764 = (_757.y * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3908 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))));
    float _773 = fma(_770, _270, fma(_764, _263, _763 * _242));
    float _776 = fma(_770, _271, fma(_764, _264, _763 * _243));
    float _779 = fma(_770, _272, fma(_764, _265, _763 * _244));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _789 = fma(_786, _225, fma(_785, _224, _784 * _223));
    float _792 = fma(_786, _258, fma(_785, _257, _784 * _256));
    float _795 = fma(_786, _272, fma(_785, _271, _784 * _270));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _815 = (((((_715 * _400) * _725) * cbMtdParam._m0[18u].y) + _552) + ((_739 * _729) * cbMtdParam._m0[19u].w)) + (((_789 * _412) * _799) * cbMtdParam._m0[19u].x);
    float _818 = (((((_718 * _400) * _725) * cbMtdParam._m0[18u].y) + _553) + ((_739 * _732) * cbMtdParam._m0[19u].w)) + (((_792 * _412) * _799) * cbMtdParam._m0[19u].x);
    float _825 = ((_661 - _815) * _580) + _815;
    float _826 = (_580 * (_662 - _818)) + _818;
    float _827 = (_580 * (sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _559)) + _559;
    float _830 = fma(_827, _270, fma(_826, _256, _825 * _223));
    float _833 = fma(_827, _271, fma(_826, _257, _825 * _224));
    float _836 = fma(_827, _272, fma(_826, _258, _825 * _225));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _3919 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _844 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _845 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3952 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3963 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3974 = isnan(0.0) ? cbMtdParam._m0[20u].y : (isnan(cbMtdParam._m0[20u].y) ? 0.0 : max(cbMtdParam._m0[20u].y, 0.0));
    float _849 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _952 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _955 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _968 = uint(roundEven(NORMAL.w)) * 13u;
    uint _970 = (_968 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_970].z;
    float _3985 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _982 = 1.0 - _849;
    float _983 = _979 * _982;
    float _984 = _980 * _982;
    float _985 = _981 * _982;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _849;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _849;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _849;
    float _993 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    float _996 = _992 + 0.039999999105930328369140625;
    vec4 _1005 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = _1005.x * TEXCOORD_4;
    float _1009 = dot(vec3(_841, _842, _843), vec3(_922, _923, _924));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _841) - _922;
    float _1017 = (_1012 * _842) - _923;
    float _1018 = (_1012 * _843) - _924;
    float _1022 = abs(dot(vec3(_922, _923, _924), vec3(_841, _842, _843)));
    float _4018 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_845);
    float _1036 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1042 = (1.0 - _1036) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1043 = _1036 * _1024;
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1110 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1114 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1139 = _1071 + _841;
        float _1140 = _1075 + _842;
        float _1141 = _1079 + _843;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_841, _842, _843), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4066 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_841, _842, _843), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4099 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_841, _842, _843), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4132 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1426 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1430 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1453 = _1071 + _841;
        float _1454 = _1075 + _842;
        float _1455 = _1079 + _843;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_841, _842, _843), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4195 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_841, _842, _843), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4228 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_841, _842, _843), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4261 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1382;
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = _1382;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1395)) + _1395;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1396)) + _1396;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _1016 * 0.5;
    float _1760 = _1017 * 0.5;
    float _1761 = _1018 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _845);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1875 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1879 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1883 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1886 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1889 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1892 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1920;
        if (_1886 > 0.0)
        {
            _1920 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1920 = frontier_phi_16_14_ladder;
        }
        float _2144;
        if (_1889 > 0.0)
        {
            _2144 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2144 = frontier_phi_25_21_ladder;
        }
        float _2401;
        if (_1892 > 0.0)
        {
            _2401 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2401 = frontier_phi_37_32_ladder;
        }
        float _2403 = isnan(_2144) ? _1920 : (isnan(_1920) ? _2144 : min(_1920, _2144));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1886) + _1875;
        float _2409 = (_2404 * _1889) + _1879;
        float _2410 = (_2404 * _1892) + _1883;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2411;
        float _2415 = _2411 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 > _2415) || ((_2409 < _2413) || ((_2408 < _2413) || (_2408 > _2415))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2410, cbModelParam._m0[9u].z, fma(_2409, cbModelParam._m0[9u].y, _2408 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2410, cbModelParam._m0[10u].z, fma(_2409, cbModelParam._m0[10u].y, _2408 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2410, cbModelParam._m0[11u].z, fma(_2409, cbModelParam._m0[11u].y, _2408 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_15_37_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1908 = frontier_phi_15_37_ladder_2;
        _1910 = frontier_phi_15_37_ladder_1;
        _1912 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1828);
        _1908 = _1896.x * cbModelParam._m0[1u].y;
        _1910 = _1896.y * cbModelParam._m0[1u].y;
        _1912 = _1896.z * cbModelParam._m0[1u].y;
    }
    float _1916 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _845);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1916 : min(cbModelParam._m0[25u].w, _1916));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _1985 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _1988 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2149;
        if (_1982 > 0.0)
        {
            _2149 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2149 = frontier_phi_27_23_ladder;
        }
        float _2428;
        if (_1985 > 0.0)
        {
            _2428 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2428 = frontier_phi_39_34_ladder;
        }
        float _2641;
        if (_1988 > 0.0)
        {
            _2641 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2641 = frontier_phi_48_45_ladder;
        }
        float _2643 = isnan(_2428) ? _2149 : (isnan(_2149) ? _2428 : min(_2149, _2428));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1982) + _1971;
        float _2649 = (_2644 * _1985) + _1975;
        float _2650 = (_2644 * _1988) + _1979;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1917);
            frontier_phi_24_48_ladder = _2850.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2850.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2850.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_24_48_ladder_2;
        _2009 = frontier_phi_24_48_ladder_1;
        _2011 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1917);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2024 = (((_1042 * _993) + _1043) * _1008) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1042 * _995) + _1043) * _1008) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2028 = (((_1042 * _996) + _1043) * _1008) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    vec4 _2045 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_930, _931));
    float _2047 = _2045.w;
    float _2059 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2047);
    float _2060 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2047);
    float _2061 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2047);
    uvec4 _2065 = floatBitsToUint(cbInstanceData._m0[_968 + 5u]);
    uint _2067 = _2065.x * 14u;
    uint _2068 = _2067 + 13u;
    float _2075 = _1008 + (-1.0);
    float _2080 = (cbLight._m0[_2068].x * _2075) + 1.0;
    float _2081 = (cbLight._m0[_2068].y * _2075) + 1.0;
    float _2082 = (cbLight._m0[_2068].z * _2075) + 1.0;
    float _2083 = (cbLight._m0[_2068].w * _2075) + 1.0;
    uint _2084 = _2067 + 5u;
    float _2090 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2094 = _2067 + 4u;
    float _2103 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2107 = _2067 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_841, _842, _843));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_841, _842, _843));
    float _4397 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4408 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2084].x * _2090) * _2128) + (((cbLight._m0[_2094].x * _2059) * _2103) * _2126);
    float _2136 = ((_2090 * cbLight._m0[_2084].y) * _2128) + (((cbLight._m0[_2094].y * _2060) * _2103) * _2126);
    float _2137 = ((_2090 * cbLight._m0[_2084].z) * _2128) + (((cbLight._m0[_2094].z * _2061) * _2103) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2067 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2143)
    {
        _2154 = _2135;
        _2156 = _2136;
        _2158 = _2137;
    }
    else
    {
        uint _2162 = _2067 + 6u;
        float _2178 = (dot(vec3(cbLight._m0[_2067 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4419 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2181 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2154 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _2135;
        _2156 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _2136;
        _2158 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _2137;
    }
    bool _2161 = _2141.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2161)
    {
        _2199 = _2154;
        _2201 = _2156;
        _2203 = _2158;
    }
    else
    {
        uint _2372 = _2067 + 7u;
        float _2388 = (dot(vec3(cbLight._m0[_2067 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4435 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2391 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2199 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2154;
        _2201 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2156;
        _2203 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2158;
    }
    uint _2206 = _2067 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _845) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2067].x + _922;
    float _2222 = cbLight._m0[_2067].y + _923;
    float _2223 = cbLight._m0[_2067].z + _924;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2067].xyz));
    float _4451 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _4462 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2235 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2236 = dot(vec3(_841, _842, _843), vec3(_2228, _2229, _2230));
    float _4473 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2228, _2229, _2230));
    float _4484 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
    float _2257 = 0.959999978542327880859375 - _990;
    float _2259 = 0.959999978542327880859375 - _991;
    float _2260 = 0.959999978542327880859375 - _992;
    float _2267 = 1.0 - _2220;
    float _2278 = (0.5 / (((_2235 * ((_2234 * _2267) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2267) + _2220) * _2234))) * _2234;
    float _4495 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2294 = _2067 + 9u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _845) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2107].x + _922;
    float _2308 = cbLight._m0[_2107].y + _923;
    float _2309 = cbLight._m0[_2107].z + _924;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2107].xyz));
    float _4506 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2321 = dot(vec3(_841, _842, _843), vec3(_2314, _2315, _2316));
    float _4517 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2314, _2315, _2316));
    float _4528 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2306 * _2306;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
    float _2347 = 1.0 - _2306;
    float _2357 = (0.5 / (((_2235 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2347) + _2306) * _2320))) * _2320;
    float _4539 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    float _2369 = (((((_2340 * _2257) + _993) * cbLight._m0[_2294].x) * _2359) * _2090) + ((((cbLight._m0[_2206].x * _2059) * ((_2256 * _2257) + _993)) * _2280) * _2103);
    float _2370 = (((((_2340 * _2259) + _995) * cbLight._m0[_2294].y) * _2359) * _2090) + ((((cbLight._m0[_2206].y * _2060) * ((_2256 * _2259) + _995)) * _2280) * _2103);
    float _2371 = (((((_2340 * _2260) + _996) * cbLight._m0[_2294].z) * _2359) * _2090) + ((((cbLight._m0[_2206].z * _2061) * ((_2256 * _2260) + _996)) * _2280) * _2103);
    float _2433;
    float _2435;
    float _2437;
    if (_2143)
    {
        _2433 = _2369;
        _2435 = _2370;
        _2437 = _2371;
    }
    else
    {
        uint _2439 = _2067 + 2u;
        uint _2443 = _2067 + 10u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _845) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _922;
        float _2460 = cbLight._m0[_2439].y + _923;
        float _2461 = cbLight._m0[_2439].z + _924;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2439].xyz));
        float _4550 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2473 = dot(vec3(_841, _842, _843), vec3(_2466, _2467, _2468));
        float _4561 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4572 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2499 = 1.0 - _2458;
        float _2509 = (0.5 / (((_2235 * ((_2472 * _2499) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2499) + _2458) * _2472))) * _2472;
        float _4583 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2433 = (((((_2492 * _2257) + _993) * cbLight._m0[_2443].x) * _2511) * _2512) + _2369;
        _2435 = (((((_2492 * _2259) + _995) * cbLight._m0[_2443].y) * _2511) * _2512) + _2370;
        _2437 = (((((_2492 * _2260) + _996) * cbLight._m0[_2443].z) * _2511) * _2512) + _2371;
    }
    float _2547;
    float _2549;
    float _2551;
    if (_2161)
    {
        _2547 = _2433;
        _2549 = _2435;
        _2551 = _2437;
    }
    else
    {
        uint _2558 = _2067 + 3u;
        uint _2562 = _2067 + 11u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _845) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _922;
        float _2579 = cbLight._m0[_2558].y + _923;
        float _2580 = cbLight._m0[_2558].z + _924;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2558].xyz));
        float _4599 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2592 = dot(vec3(_841, _842, _843), vec3(_2585, _2586, _2587));
        float _4610 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4621 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2235 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2618) + _2577) * _2591))) * _2591;
        float _4632 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2547 = (((((_2611 * _2257) + _993) * cbLight._m0[_2562].x) * _2630) * _2631) + _2433;
        _2549 = (((((_2611 * _2259) + _995) * cbLight._m0[_2562].y) * _2630) * _2631) + _2435;
        _2551 = (((((_2611 * _2260) + _996) * cbLight._m0[_2562].z) * _2630) * _2631) + _2437;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2065.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
        }
        else
        {
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3015)
                {
                    frontier_phi_63_pred = _3004;
                    frontier_phi_63_pred_1 = _3003;
                    frontier_phi_63_pred_2 = _3002;
                    frontier_phi_63_pred_3 = _3001;
                    frontier_phi_63_pred_4 = _3000;
                    frontier_phi_63_pred_5 = _2999;
                }
                else
                {
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    uint _3129;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3014;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    for (;;)
                    {
                        uint _3133 = uint(findLSB(_3129)) + (_3005 << 5u);
                        uint _3130 = (_3129 + 4294967295u) & _3129;
                        uint _3135 = _3133 * 48u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3155 = (_3133 * 48u) + 4u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3174 = (_3133 * 48u) + 8u;
                        vec3 _3185 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x));
                        float _3189 = _3149.x - _2707;
                        float _3190 = _3149.y - _2708;
                        float _3191 = _3149.z - _2709;
                        float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                        float _3195 = inversesqrt(_3192);
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3199 = dot(vec3(_949, _952, _955), vec3(_3196, _3197, _3198));
                        float _3204 = 1.0 - (_3192 * _3149.w);
                        float _4658 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3206 = sqrt(_3192) * _3168.w;
                        float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3199) + _3209;
                        float _3215 = _3206 * _3206;
                        float _3219 = ((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3205) / ((_3215 * 0.699999988079071044921875) + 1.0);
                        float _3223 = (-0.0) - _2707;
                        float _3224 = (-0.0) - _2708;
                        float _3225 = (-0.0) - _2709;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3240 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                        float _3241 = 1.0 - _1024;
                        float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                        float _3249 = _3248 * _3248;
                        float _3250 = _3249 * _3249;
                        float _3251 = _3230 + _3196;
                        float _3252 = _3231 + _3197;
                        float _3253 = _3232 + _3198;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3261 = dot(vec3(_949, _952, _955), vec3(_3230, _3231, _3232));
                        float _4674 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3265 = dot(vec3(_949, _952, _955), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                        float _4685 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                        float _3273 = _3208 * _3249;
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3199) + _3274;
                        float _4696 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3279 = 1.0 - _3249;
                        float _3289 = (0.5 / (((_3278 * ((_3264 * _3279) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3249) * _3264))) * _3278;
                        float _4707 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3300 = (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3272 * _3272) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125))) * _3205;
                        _3058 = (_3219 * _3168.x) + _3126;
                        _3059 = (_3219 * _3168.y) + _3127;
                        _3060 = (_3219 * _3168.z) + _3128;
                        _3055 = (_3300 * _3185.x) + _3123;
                        _3056 = (_3300 * _3185.y) + _3124;
                        _3057 = (_3300 * _3185.z) + _3125;
                        if (_3130 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3130;
                        }
                    }
                    frontier_phi_63_pred = _3060;
                    frontier_phi_63_pred_1 = _3059;
                    frontier_phi_63_pred_2 = _3058;
                    frontier_phi_63_pred_3 = _3057;
                    frontier_phi_63_pred_4 = _3056;
                    frontier_phi_63_pred_5 = _3055;
                }
                _2866 = frontier_phi_63_pred;
                _2864 = frontier_phi_63_pred_1;
                _2862 = frontier_phi_63_pred_2;
                _2860 = frontier_phi_63_pred_3;
                _2858 = frontier_phi_63_pred_4;
                _2856 = frontier_phi_63_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2856;
                    _3000 = _2858;
                    _3001 = _2860;
                    _3002 = _2862;
                    _3003 = _2864;
                    _3004 = _2866;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
        }
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.z;
        uint _2872 = (_2870 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2872) & _2753) == 0u)
        {
            _2967 = _2855;
            _2969 = _2857;
            _2971 = _2859;
            _2973 = _2861;
            _2975 = _2863;
            _2977 = _2865;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _2993 = _2992 * _2707;
            float _2994 = _2992 * _2708;
            float _2995 = _2992 * _2709;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2872 < ((_2870 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3106 = _2855;
                float _3107 = _2857;
                float _3108 = _2859;
                float _3109 = _2861;
                float _3110 = _2863;
                float _3111 = _2865;
                uint _3112 = _2872;
                uint _3121;
                bool _3122;
                for (;;)
                {
                    _3121 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                    _3122 = _3121 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3122)
                    {
                        frontier_phi_69_pred = _3111;
                        frontier_phi_69_pred_1 = _3110;
                        frontier_phi_69_pred_2 = _3109;
                        frontier_phi_69_pred_3 = _3108;
                        frontier_phi_69_pred_4 = _3107;
                        frontier_phi_69_pred_5 = _3106;
                    }
                    else
                    {
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3318 = _3106;
                        float _3319 = _3107;
                        float _3320 = _3108;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        uint _3324 = _3121;
                        uint _3325;
                        vec4 _3350;
                        float _3351;
                        vec4 _3366;
                        vec3 _3378;
                        vec4 _3393;
                        vec4 _3408;
                        float _3455;
                        bool _3456;
                        for (;;)
                        {
                            uint _3335 = ((_3112 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3324));
                            _3325 = (_3324 + 4294967295u) & _3324;
                            uint _3337 = _3335 * 40u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3351 = _3350.w;
                            uint _3353 = (_3335 * 40u) + 4u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3335 * 40u) + 8u;
                            _3378 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x));
                            uint _3380 = (_3335 * 40u) + 16u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3335 * 40u) + 20u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3411 = (_3335 * 40u) + 24u;
                            vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3430 = (_3335 * 40u) + 28u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3455 = fma(_2709, _3443.z, fma(_2708, _3443.y, _3443.x * _2707)) + _3443.w;
                            _3456 = !((fma(_2709, _3424.z, fma(_2708, _3424.y, _3424.x * _2707)) + _3424.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3456)
                            {
                                float _3483 = _3350.x - _2707;
                                float _3484 = _3350.y - _2708;
                                float _3485 = _3350.z - _2709;
                                float _3486 = dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485));
                                float _3489 = inversesqrt(_3486);
                                float _3490 = _3489 * _3483;
                                float _3491 = _3489 * _3484;
                                float _3492 = _3489 * _3485;
                                float _3496 = 1.0 - (_3486 / (_3351 * _3351));
                                float _4718 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3501 = sqrt(_3486) * _3366.w;
                                float _3503 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                                float _3504 = _3503 * _3503;
                                float _3507 = ((1.0 - _3504) * dot(vec3(_3490, _3491, _3492), vec3(_949, _952, _955))) + _3504;
                                float _3510 = _3501 * _3501;
                                float _3514 = (fma(_2709, _3393.z, fma(_2708, _3393.y, _3393.x * _2707)) + _3393.w) / _3455;
                                float _3515 = (fma(_2709, _3408.z, fma(_2708, _3408.y, _3408.x * _2707)) + _3408.w) / _3455;
                                float _3519 = 1.0 - dot(vec2(_3514, _3515), vec2(_3514, _3515));
                                float _4734 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3521 = _3520 * (((isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0))) * _3497) / ((_3510 * 0.699999988079071044921875) + 1.0));
                                float _3533 = exp2(log2(1.0 / ((_3510 * 3.5) + 5.0)) * 0.25);
                                float _3534 = 1.0 - _1024;
                                float _3541 = sqrt(1.0 - ((1.0 - (_3534 * _3534)) * (1.0 - (_3533 * _3533))));
                                float _3542 = _3541 * _3541;
                                float _3543 = _3542 * _3542;
                                float _3544 = _3490 - _2993;
                                float _3545 = _3491 - _2994;
                                float _3546 = _3492 - _2995;
                                float _3550 = inversesqrt(dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546)));
                                float _3554 = dot(vec3(_949, _952, _955), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4745 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3558 = dot(vec3(_949, _952, _955), vec3(_3550 * _3544, _3550 * _3545, _3550 * _3546));
                                float _4756 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3561 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3565 = ((_3561 * _3561) * (_3543 + (-1.0))) + 1.0;
                                float _3566 = _3503 * _3542;
                                float _3567 = _3566 * _3566;
                                float _3573 = ((1.0 - _3567) * dot(vec3(_949, _952, _955), vec3(_3490, _3491, _3492))) + _3567;
                                float _4767 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3575 = 1.0 - _3542;
                                float _3585 = (0.5 / (((_3574 * ((_3557 * _3575) + _3542)) + 9.9999999392252902907785028219223e-09) + (((_3574 * _3575) + _3542) * _3557))) * _3574;
                                float _4778 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3595 = (_3520 * _3497) * (((_3543 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3565 * _3565) * ((_3510 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3521 * _3366.z;
                                frontier_phi_75_pred_1 = _3521 * _3366.y;
                                frontier_phi_75_pred_2 = _3521 * _3366.x;
                                frontier_phi_75_pred_3 = _3595 * _3378.z;
                                frontier_phi_75_pred_4 = _3595 * _3378.y;
                                frontier_phi_75_pred_5 = _3595 * _3378.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_75_pred;
                            _3603 = frontier_phi_75_pred_1;
                            _3602 = frontier_phi_75_pred_2;
                            _3601 = frontier_phi_75_pred_3;
                            _3600 = frontier_phi_75_pred_4;
                            _3599 = frontier_phi_75_pred_5;
                            _3308 = _3602 + _3321;
                            _3309 = _3603 + _3322;
                            _3310 = _3604 + _3323;
                            _3305 = _3599 + _3318;
                            _3306 = _3600 + _3319;
                            _3307 = _3601 + _3320;
                            if (_3325 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3325;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3310;
                        frontier_phi_69_pred_1 = _3309;
                        frontier_phi_69_pred_2 = _3308;
                        frontier_phi_69_pred_3 = _3307;
                        frontier_phi_69_pred_4 = _3306;
                        frontier_phi_69_pred_5 = _3305;
                    }
                    _2978 = frontier_phi_69_pred;
                    _2976 = frontier_phi_69_pred_1;
                    _2974 = frontier_phi_69_pred_2;
                    _2972 = frontier_phi_69_pred_3;
                    _2970 = frontier_phi_69_pred_4;
                    _2968 = frontier_phi_69_pred_5;
                    uint _3113 = _3112 + 1u;
                    if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3106 = _2968;
                        _3107 = _2970;
                        _3108 = _2972;
                        _3109 = _2974;
                        _3110 = _2976;
                        _3111 = _2978;
                        _3112 = _3113;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2978;
                frontier_phi_57_58_ladder_1 = _2976;
                frontier_phi_57_58_ladder_2 = _2974;
                frontier_phi_57_58_ladder_3 = _2972;
                frontier_phi_57_58_ladder_4 = _2970;
                frontier_phi_57_58_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_57_58_ladder = _2865;
                frontier_phi_57_58_ladder_1 = _2863;
                frontier_phi_57_58_ladder_2 = _2861;
                frontier_phi_57_58_ladder_3 = _2859;
                frontier_phi_57_58_ladder_4 = _2857;
                frontier_phi_57_58_ladder_5 = _2855;
            }
            _2967 = frontier_phi_57_58_ladder_5;
            _2969 = frontier_phi_57_58_ladder_4;
            _2971 = frontier_phi_57_58_ladder_3;
            _2973 = frontier_phi_57_58_ladder_2;
            _2975 = frontier_phi_57_58_ladder_1;
            _2977 = frontier_phi_57_58_ladder;
        }
        float _2982 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _2765 = (_2982 * _2973) + _2199;
        _2767 = (_2982 * _2975) + _2201;
        _2769 = (_2982 * _2977) + _2203;
        _2771 = ((_2967 * _993) * _2982) + _2547;
        _2773 = ((_2969 * _995) * _2982) + _2549;
        _2775 = ((_2971 * _996) * _2982) + _2551;
    }
    else
    {
        _2765 = _2199;
        _2767 = _2201;
        _2769 = _2203;
        _2771 = _2547;
        _2773 = _2549;
        _2775 = _2551;
    }
    float _4794 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4805 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4816 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4827 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2800 = cbInstanceData._m0[_968 + 6u].w * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)));
    float _2805 = _930 / cbSceneParam._m0[86u].x;
    float _2806 = _931 / cbSceneParam._m0[86u].y;
    vec4 _2820 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2822 = _2820.x;
    float _2823 = _2820.y;
    float _2824 = _2820.z;
    float _2825 = _2820.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _2880 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _2881 = _2880 / _865;
        float _2892 = _2881 * _915;
        float _2893 = _916 * _2881;
        float _2894 = (-0.0) - _2893;
        float _2895 = _2881 * _917;
        float _2897 = (cbSceneParam._m0[77u].w * _2894) / _2880;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2893;
        float _2905 = sqrt(((_2892 * _2892) + (_2893 * _2893)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2880)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3068;
        if (abs((_2894 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3068 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3030 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3068 = ((abs(_2905 / _2894) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2915 * _3039) - exp2(_2915 * _3040)) * _3028))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3070 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, 1.0), 0.0);
        float _3079 = exp2((_3068 * (-1.44269502162933349609375)) * (1.0 - _3070.w));
        float _3080 = log2(_3079);
        float _3096 = log2(_2825);
        _2917 = (exp2(_3096 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].x)) * _3070.x) / cbSceneParam._m0[78u].x)) + _2822;
        _2919 = (exp2(_3096 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].y)) * _3070.y) / cbSceneParam._m0[78u].y)) + _2823;
        _2921 = (exp2(_3096 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].z)) * _3070.z) / cbSceneParam._m0[78u].z)) + _2824;
        _2923 = _3079 * _2825;
    }
    else
    {
        _2917 = _2822;
        _2919 = _2823;
        _2921 = _2824;
        _2923 = _2825;
    }
    float _2935 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2936 = _2935 == 3.0;
    float _2937 = log2(_2923);
    float _2944 = exp2(_2937 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2765 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1008))) + ((_2771 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1817)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2937 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2767 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1008))) + ((_2773 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1817)) * cbPerFrame._m0[3u].x));
    float _2946 = exp2(_2937 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2769 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1008))) + ((_2775 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1817)) * cbPerFrame._m0[3u].x));
    float _2955 = (_2935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2955 * (_2936 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.y = _2955 * (_2936 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.z = _2955 * (_2936 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.w = _2800;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2800;
}


