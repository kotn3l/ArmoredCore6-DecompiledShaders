#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1427;
float _3834;
float _3835;
float _3836;
float _3837;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _239 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _240 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _241 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _245 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _246 = _245 * _239;
    float _247 = _245 * _240;
    float _248 = _245 * _241;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _266 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _267 = _266 * TANGENT_2.x;
    float _268 = _266 * TANGENT_2.y;
    float _269 = _266 * TANGENT_2.z;
    float _274;
    float _275;
    float _276;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _274 = (-0.0) - _253;
        _275 = (-0.0) - _254;
        _276 = (-0.0) - _255;
    }
    else
    {
        _274 = _253;
        _275 = _254;
        _276 = _255;
    }
    vec4 _321 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = 1.0 - ((1.0 - _321.x) * 1.39999997615814208984375);
    float _3846 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _341 = (_334 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[16u].x)) + cbMtdParam._m0[16u].x;
    float _342 = (_334 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[16u].y)) + cbMtdParam._m0[16u].y;
    float _343 = (_334 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z;
    float _345 = 1.0 - ((1.0 - _321.y) * 1.39999997615814208984375);
    float _3857 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _353 = (_346 * (cbMtdParam._m0[14u].x - _341)) + _341;
    float _354 = (_346 * (cbMtdParam._m0[14u].y - _342)) + _342;
    float _355 = (_346 * (cbMtdParam._m0[14u].z - _343)) + _343;
    float _357 = 1.0 - ((1.0 - _321.z) * 1.39999997615814208984375);
    float _3868 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    vec4 _383 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _385 = _383.x;
    float _386 = _385 * cbMtdParam._m0[20u].x;
    float _400 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _386) + (cbMtdParam._m0[17u].z * TEXCOORD_5.w))) + 1.0;
    float _3879 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _402 = 1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)));
    float _403 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _404 = isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0));
    float _412 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _386) + (cbMtdParam._m0[17u].y * TEXCOORD_5.z))) + 1.0;
    float _3900 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _414 = 1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)));
    float _415 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _416 = isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0));
    vec4 _434 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _439 = cbMtdParam._m0[12u].x * _416;
    float _441 = cbMtdParam._m0[12u].y * _416;
    float _443 = cbMtdParam._m0[12u].z * _416;
    float _463 = _414 + _402;
    float _464 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
    vec4 _483 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _488 = _483.w;
    float _489 = _483.x * cbMtdParam._m0[10u].x;
    float _490 = _483.y * cbMtdParam._m0[10u].y;
    float _491 = _483.z * cbMtdParam._m0[10u].z;
    float _511 = ((_489 - (_465 * _489)) + ((((((_436 * (cbMtdParam._m0[11u].x - _439)) * _404) + (_439 * _436)) * 4.55000019073486328125) * _465) * _489)) * ((_358 * (cbMtdParam._m0[15u].x - _353)) + _353);
    float _512 = ((((((((_437 * (cbMtdParam._m0[11u].y - _441)) * _404) + (_441 * _437)) * 4.55000019073486328125) * _465) * _490) + _490) - (_465 * _490)) * ((_358 * (cbMtdParam._m0[15u].y - _354)) + _354);
    float _513 = ((((((((_438 * (cbMtdParam._m0[11u].z - _443)) * _404) + (_443 * _438)) * 4.55000019073486328125) * _465) * _491) + _491) - (_465 * _491)) * ((_358 * (cbMtdParam._m0[15u].z - _355)) + _355);
    float _522 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[19u].y) + 1.0;
    float _3931 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _534 = ((((_385 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[19u].z) + 1.0;
    float _3942 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    vec4 _550 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _556 = (_550.x * 2.0) + (-1.0);
    float _557 = (_550.y * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _3953 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _566 = fma(_563, _274, fma(_557, _260, _556 * _227));
    float _569 = fma(_563, _275, fma(_557, _261, _556 * _228));
    float _572 = fma(_563, _276, fma(_557, _262, _556 * _229));
    float _581 = exp2(log2(inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572))) * _569) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w;
    float _3964 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) + (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * (1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))));
    float _3975 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _587 = 3.0 - (_585 * 2.0);
    float _592 = _585 * _585;
    float _599 = ((_592 * (cbMtdParam._m0[13u].x - _511)) * _587) + _511;
    float _600 = ((_592 * (cbMtdParam._m0[13u].y - _512)) * _587) + _512;
    float _601 = ((_592 * (cbMtdParam._m0[13u].z - _513)) * _587) + _513;
    vec4 _615 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _619 = _615.z;
    float _622 = (_615.x * 2.0) + (-1.0);
    float _623 = (_615.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3986 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    float _632 = fma(_629, _274, fma(_623, _267, _622 * _246));
    float _635 = fma(_629, _275, fma(_623, _268, _622 * _247));
    float _638 = fma(_629, _276, fma(_623, _269, _622 * _248));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    float _643 = _642 * _632;
    float _644 = _642 * _635;
    float _645 = _642 * _638;
    vec4 _658 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _665 = (_658.x * 2.0) + (-1.0);
    float _666 = (_658.y * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3997 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _675 = ((_658.z - _619) * _584) + _619;
    vec4 _687 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _693 = (_687.x * 2.0) + (-1.0);
    float _694 = (_687.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _4008 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _703 = fma(_700, _274, fma(_694, _267, _693 * _246));
    float _706 = fma(_700, _275, fma(_694, _268, _693 * _247));
    float _709 = fma(_700, _276, fma(_694, _269, _693 * _248));
    float _713 = inversesqrt(dot(vec3(_703, _706, _709), vec3(_703, _706, _709)));
    float _714 = _713 * _703;
    float _715 = _713 * _706;
    float _716 = _713 * _709;
    float _719 = fma(_716, _229, fma(_715, _228, _714 * _227));
    float _722 = fma(_716, _262, fma(_715, _261, _714 * _260));
    float _725 = fma(_716, _276, fma(_715, _275, _714 * _274));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    float _733 = fma(_645, _229, fma(_644, _228, _643 * _227));
    float _736 = fma(_645, _262, fma(_644, _261, _643 * _260));
    float _739 = fma(_645, _276, fma(_644, _275, _643 * _274));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    vec4 _761 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _767 = (_761.x * 2.0) + (-1.0);
    float _768 = (_761.y * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _4019 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))));
    float _777 = fma(_774, _274, fma(_768, _267, _767 * _246));
    float _780 = fma(_774, _275, fma(_768, _268, _767 * _247));
    float _783 = fma(_774, _276, fma(_768, _269, _767 * _248));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _793 = fma(_790, _229, fma(_789, _228, _788 * _227));
    float _796 = fma(_790, _262, fma(_789, _261, _788 * _260));
    float _799 = fma(_790, _276, fma(_789, _275, _788 * _274));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _819 = (((((_719 * _404) * _729) * cbMtdParam._m0[18u].y) + _556) + ((_743 * _733) * cbMtdParam._m0[19u].w)) + (((_793 * _416) * _803) * cbMtdParam._m0[19u].x);
    float _822 = (((((_722 * _404) * _729) * cbMtdParam._m0[18u].y) + _557) + ((_743 * _736) * cbMtdParam._m0[19u].w)) + (((_796 * _416) * _803) * cbMtdParam._m0[19u].x);
    float _829 = ((_665 - _819) * _584) + _819;
    float _830 = (_584 * (_666 - _822)) + _822;
    float _831 = (_584 * (sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _563)) + _563;
    float _834 = fma(_831, _274, fma(_830, _260, _829 * _227));
    float _837 = fma(_831, _275, fma(_830, _261, _829 * _228));
    float _840 = fma(_831, _276, fma(_830, _262, _829 * _229));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _4030 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _848 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _849 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4063 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4074 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4085 = isnan(0.0) ? cbMtdParam._m0[20u].y : (isnan(cbMtdParam._m0[20u].y) ? 0.0 : max(cbMtdParam._m0[20u].y, 0.0));
    float _853 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    vec4 _933 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _935 = _933.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1106 = sqrt(((_919 * _919) + (_920 * _920)) + (_921 * _921));
        float _1112 = (cbMatDynParam._m0[5u].x * _1106) + cbMatDynParam._m0[5u].y;
        float _4096 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1117 = (cbMatDynParam._m0[5u].z * _1106) + cbMatDynParam._m0[5u].w;
        float _4107 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) - _1113)) + _1113) < ((_935 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _968 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _971 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _984 = uint(roundEven(NORMAL.w)) * 13u;
    uint _985 = _984 + 9u;
    uint _986 = _985 + uint(cbMatDynParam._m0[0u].w);
    float _992 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_986].x;
    float _993 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_986].y;
    float _994 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_986].z;
    float _4118 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _998 = 1.0 - _853;
    float _999 = _995 * _998;
    float _1000 = _996 * _998;
    float _1001 = _997 * _998;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _853;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _853;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _853;
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    vec4 _1021 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1024 = _1021.x * TEXCOORD_4;
    float _1025 = dot(vec3(_845, _846, _847), vec3(_926, _927, _928));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _845) - _926;
    float _1033 = (_1028 * _846) - _927;
    float _1034 = (_1028 * _847) - _928;
    float _1038 = abs(dot(vec3(_926, _927, _928), vec3(_845, _846, _847)));
    float _4151 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_849);
    float _1052 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1058 = (1.0 - _1052) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1059 = _1052 * _1040;
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1426;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1151 = fma(_1095, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087));
        float _1155 = fma(_1095, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087));
        float _1159 = fma(_1095, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087));
        float _1184 = _1087 + _845;
        float _1185 = _1091 + _846;
        float _1186 = _1095 + _847;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1151;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1155;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1159;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1151 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1155 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1159 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1254 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1220.x + (-0.5));
        float _1256 = _1254 * (_1220.y + (-0.5));
        float _1257 = _1254 * (_1220.z + (-0.5));
        float _1264 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1227.x + (-0.5));
        float _1266 = _1264 * (_1227.y + (-0.5));
        float _1267 = _1264 * (_1227.z + (-0.5));
        float _1274 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1234.x + (-0.5));
        float _1276 = _1274 * (_1234.y + (-0.5));
        float _1277 = _1274 * (_1234.z + (-0.5));
        float _1284 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1241.x + (-0.5));
        float _1286 = _1284 * (_1241.y + (-0.5));
        float _1287 = _1284 * (_1241.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1308 = (dot(vec3(_845, _846, _847), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1318 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4199 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1320 + 1.0))) + _1325) * _1288;
        float _1335 = _1256 * 0.5;
        float _1336 = _1266 * 0.5;
        float _1337 = _1276 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_845, _846, _847), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4232 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1362 + 1.0))) + _1367) * _1289;
        float _1377 = _1257 * 0.5;
        float _1378 = _1267 * 0.5;
        float _1379 = _1277 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_845, _846, _847), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4265 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1404 + 1.0))) + _1409) * _1290;
        _1426 = _1257;
        _1428 = _1256;
        _1429 = _1255;
        _1430 = _1267;
        _1431 = _1266;
        _1432 = _1265;
        _1433 = _1277;
        _1434 = _1276;
        _1435 = _1275;
        _1436 = _1290;
        _1437 = _1289;
        _1438 = _1288;
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1427;
        _1428 = _1427;
        _1429 = _1427;
        _1430 = _1427;
        _1431 = _1427;
        _1432 = _1427;
        _1433 = _1427;
        _1434 = _1427;
        _1435 = _1427;
        _1436 = _1427;
        _1437 = _1427;
        _1438 = _1427;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1095, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087));
        float _1474 = fma(_1095, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087));
        float _1478 = fma(_1095, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087));
        float _1501 = _1087 + _845;
        float _1502 = _1091 + _846;
        float _1503 = _1095 + _847;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_845, _846, _847), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4328 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_845, _846, _847), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4361 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_845, _846, _847), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4394 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1427;
        _1740 = _1427;
        _1741 = _1427;
        _1742 = _1427;
        _1743 = _1427;
        _1744 = _1427;
        _1745 = _1427;
        _1746 = _1427;
        _1747 = _1427;
        _1748 = _1427;
        _1749 = _1427;
        _1750 = _1427;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1439)) + _1439;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1440)) + _1440;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1441)) + _1441;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1032 * 0.5;
    float _1808 = _1033 * 0.5;
    float _1809 = _1034 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1426, _1430, _1433, _1436));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1095, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1095, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1095, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1937 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1940 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1968 = frontier_phi_19_17_ladder;
        }
        float _2192;
        if (_1937 > 0.0)
        {
            _2192 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2192 = frontier_phi_28_24_ladder;
        }
        float _2449;
        if (_1940 > 0.0)
        {
            _2449 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2449 = frontier_phi_40_35_ladder;
        }
        float _2451 = isnan(_2192) ? _1968 : (isnan(_1968) ? _2192 : min(_1968, _2192));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1934) + _1923;
        float _2457 = (_2452 * _1937) + _1927;
        float _2458 = (_2452 * _1940) + _1931;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2459;
        float _2463 = _2459 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 > _2463) || ((_2457 < _2461) || ((_2456 < _2461) || (_2456 > _2463))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2458, cbModelParam._m0[9u].z, fma(_2457, cbModelParam._m0[9u].y, _2456 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2458, cbModelParam._m0[10u].z, fma(_2457, cbModelParam._m0[10u].y, _2456 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2458, cbModelParam._m0[11u].z, fma(_2457, cbModelParam._m0[11u].y, _2456 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_18_40_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_18_40_ladder_2;
        _1958 = frontier_phi_18_40_ladder_1;
        _1960 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1876);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1095, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1095, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1095, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2033 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2036 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2197;
        if (_2030 > 0.0)
        {
            _2197 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2197 = frontier_phi_30_26_ladder;
        }
        float _2476;
        if (_2033 > 0.0)
        {
            _2476 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2476 = frontier_phi_42_37_ladder;
        }
        float _2689;
        if (_2036 > 0.0)
        {
            _2689 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2689 = frontier_phi_51_48_ladder;
        }
        float _2691 = isnan(_2476) ? _2197 : (isnan(_2197) ? _2476 : min(_2197, _2476));
        float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
        float _2696 = (_2692 * _2030) + _2019;
        float _2697 = (_2692 * _2033) + _2023;
        float _2698 = (_2692 * _2036) + _2027;
        float _2699 = _2692 * 9.9999997473787516355514526367188e-05;
        float _2700 = (-1.0) - _2699;
        float _2702 = _2699 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2698 > _2702) || ((_2698 < _2700) || ((_2697 > _2702) || ((_2697 < _2700) || ((_2696 < _2700) || (_2696 > _2702))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2698, cbModelParam._m0[17u].z, fma(_2697, cbModelParam._m0[17u].y, _2696 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2698, cbModelParam._m0[18u].z, fma(_2697, cbModelParam._m0[18u].y, _2696 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2698, cbModelParam._m0[19u].z, fma(_2697, cbModelParam._m0[19u].y, _2696 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_27_51_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_27_51_ladder_2;
        _2057 = frontier_phi_27_51_ladder_1;
        _2059 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1965);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2072 = (((_1058 * _1009) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1058 * _1011) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1058 * _1012) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    vec4 _2093 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_946, _947));
    float _2095 = _2093.w;
    float _2107 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2095);
    float _2108 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2095);
    float _2109 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2095);
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_984 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _1024 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2151 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2155 = _2115 | 1u;
    float _2166 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_845, _846, _847));
    float _2169 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_845, _846, _847));
    float _4530 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _4541 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2174 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2176 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2183 = ((cbLight._m0[_2132].x * _2138) * _2176) + (((cbLight._m0[_2142].x * _2107) * _2151) * _2174);
    float _2184 = ((_2138 * cbLight._m0[_2132].y) * _2176) + (((cbLight._m0[_2142].y * _2108) * _2151) * _2174);
    float _2185 = ((_2138 * cbLight._m0[_2132].z) * _2176) + (((cbLight._m0[_2142].z * _2109) * _2151) * _2174);
    uvec4 _2189 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2191 = _2189.x == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2191)
    {
        _2202 = _2183;
        _2204 = _2184;
        _2206 = _2185;
    }
    else
    {
        uint _2210 = _2115 + 6u;
        float _2226 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4552 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2229 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2202 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _2183;
        _2204 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _2184;
        _2206 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _2185;
    }
    bool _2209 = _2189.y == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2209)
    {
        _2247 = _2202;
        _2249 = _2204;
        _2251 = _2206;
    }
    else
    {
        uint _2420 = _2115 + 7u;
        float _2436 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4568 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2439 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2247 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2202;
        _2249 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2204;
        _2251 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2206;
    }
    uint _2254 = _2115 + 8u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _849) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_2115].x + _926;
    float _2270 = cbLight._m0[_2115].y + _927;
    float _2271 = cbLight._m0[_2115].z + _928;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2115].xyz));
    float _4584 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2283 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2284 = dot(vec3(_845, _846, _847), vec3(_2276, _2277, _2278));
    float _4606 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2276, _2277, _2278));
    float _4617 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2268 * _2268;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2305 = 0.959999978542327880859375 - _1006;
    float _2307 = 0.959999978542327880859375 - _1007;
    float _2308 = 0.959999978542327880859375 - _1008;
    float _2315 = 1.0 - _2268;
    float _2326 = (0.5 / (((_2283 * ((_2282 * _2315) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2315) + _2268) * _2282))) * _2282;
    float _4628 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    uint _2342 = _2115 + 9u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _849) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2155].x + _926;
    float _2356 = cbLight._m0[_2155].y + _927;
    float _2357 = cbLight._m0[_2155].z + _928;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2155].xyz));
    float _4639 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2369 = dot(vec3(_845, _846, _847), vec3(_2362, _2363, _2364));
    float _4650 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2362, _2363, _2364));
    float _4661 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2354 * _2354;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
    float _2395 = 1.0 - _2354;
    float _2405 = (0.5 / (((_2283 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2395) + _2354) * _2368))) * _2368;
    float _4672 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    float _2417 = (((((_2388 * _2305) + _1009) * cbLight._m0[_2342].x) * _2407) * _2138) + ((((cbLight._m0[_2254].x * _2107) * ((_2304 * _2305) + _1009)) * _2328) * _2151);
    float _2418 = (((((_2388 * _2307) + _1011) * cbLight._m0[_2342].y) * _2407) * _2138) + ((((cbLight._m0[_2254].y * _2108) * ((_2304 * _2307) + _1011)) * _2328) * _2151);
    float _2419 = (((((_2388 * _2308) + _1012) * cbLight._m0[_2342].z) * _2407) * _2138) + ((((cbLight._m0[_2254].z * _2109) * ((_2304 * _2308) + _1012)) * _2328) * _2151);
    float _2481;
    float _2483;
    float _2485;
    if (_2191)
    {
        _2481 = _2417;
        _2483 = _2418;
        _2485 = _2419;
    }
    else
    {
        uint _2487 = _2115 + 2u;
        uint _2491 = _2115 + 10u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _849) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _926;
        float _2508 = cbLight._m0[_2487].y + _927;
        float _2509 = cbLight._m0[_2487].z + _928;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2487].xyz));
        float _4683 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2521 = dot(vec3(_845, _846, _847), vec3(_2514, _2515, _2516));
        float _4694 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4705 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2547 = 1.0 - _2506;
        float _2557 = (0.5 / (((_2283 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2547) + _2506) * _2520))) * _2520;
        float _4716 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2481 = (((((_2540 * _2305) + _1009) * cbLight._m0[_2491].x) * _2559) * _2560) + _2417;
        _2483 = (((((_2540 * _2307) + _1011) * cbLight._m0[_2491].y) * _2559) * _2560) + _2418;
        _2485 = (((((_2540 * _2308) + _1012) * cbLight._m0[_2491].z) * _2559) * _2560) + _2419;
    }
    float _2595;
    float _2597;
    float _2599;
    if (_2209)
    {
        _2595 = _2481;
        _2597 = _2483;
        _2599 = _2485;
    }
    else
    {
        uint _2606 = _2115 + 3u;
        uint _2610 = _2115 + 11u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _849) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _926;
        float _2627 = cbLight._m0[_2606].y + _927;
        float _2628 = cbLight._m0[_2606].z + _928;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2606].xyz));
        float _4732 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2640 = dot(vec3(_845, _846, _847), vec3(_2633, _2634, _2635));
        float _4743 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4754 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2283 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2666) + _2625) * _2639))) * _2639;
        float _4765 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2595 = (((((_2659 * _2305) + _1009) * cbLight._m0[_2610].x) * _2678) * _2679) + _2481;
        _2597 = (((((_2659 * _2307) + _1011) * cbLight._m0[_2610].y) * _2678) * _2679) + _2483;
        _2599 = (((((_2659 * _2308) + _1012) * cbLight._m0[_2610].z) * _2678) * _2679) + _2485;
    }
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_2113.y == 0u)
    {
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2754;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2754;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2754;
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.x;
        uint _2781 = uint((float(_2769.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _2770))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _2770)));
        float _2791 = (log2(_2757 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2792 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        uint _2795 = uint(isnan(14.0) ? _2792 : (isnan(_2792) ? 14.0 : min(_2792, 14.0)));
        uvec4 _2800 = texelFetch(g_lightClusterGridBuffer, int(((_2795 << 2u) + (_2781 << 6u)) >> 2u));
        uint _2801 = _2800.x;
        uint _2802 = _2769.z;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((((1u << ((_2802 >> 4u) & 15u)) + 4294967295u) & _2801) == 0u) || ((_2802 & 240u) == 0u))
        {
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
        }
        else
        {
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            uint _3061 = 0u;
            uint _3070;
            bool _3071;
            for (;;)
            {
                _3070 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                _3071 = _3070 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3071)
                {
                    frontier_phi_68_pred = _3057;
                    frontier_phi_68_pred_1 = _3060;
                    frontier_phi_68_pred_2 = _3059;
                    frontier_phi_68_pred_3 = _3058;
                    frontier_phi_68_pred_4 = _3056;
                    frontier_phi_68_pred_5 = _3055;
                }
                else
                {
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    uint _3206;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3070;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    for (;;)
                    {
                        uint _3210 = uint(findLSB(_3206)) + (_3061 << 5u);
                        uint _3207 = (_3206 + 4294967295u) & _3206;
                        uint _3212 = _3210 * 48u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3232 = (_3210 * 48u) + 4u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3251 = (_3210 * 48u) + 8u;
                        vec3 _3262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x));
                        float _3266 = _3226.x - _2755;
                        float _3267 = _3226.y - _2756;
                        float _3268 = _3226.z - _2757;
                        float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                        float _3272 = inversesqrt(_3269);
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3276 = dot(vec3(_965, _968, _971), vec3(_3273, _3274, _3275));
                        float _3281 = 1.0 - (_3269 * _3226.w);
                        float _4791 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3283 = sqrt(_3269) * _3245.w;
                        float _3285 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3276) + _3286;
                        float _3292 = _3283 * _3283;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3282) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _2755;
                        float _3301 = (-0.0) - _2756;
                        float _3302 = (-0.0) - _2757;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3317 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _1040;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3307 + _3273;
                        float _3329 = _3308 + _3274;
                        float _3330 = _3309 + _3275;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_965, _968, _971), vec3(_3307, _3308, _3309));
                        float _4807 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3342 = dot(vec3(_965, _968, _971), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4818 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3285 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3276) + _3351;
                        float _4829 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4840 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3349 * _3349) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3282;
                        _3130 = (_3296 * _3245.x) + _3203;
                        _3131 = (_3296 * _3245.y) + _3204;
                        _3132 = (_3296 * _3245.z) + _3205;
                        _3127 = (_3377 * _3262.x) + _3200;
                        _3128 = (_3377 * _3262.y) + _3201;
                        _3129 = (_3377 * _3262.z) + _3202;
                        if (_3207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3207;
                        }
                    }
                    frontier_phi_68_pred = _3129;
                    frontier_phi_68_pred_1 = _3132;
                    frontier_phi_68_pred_2 = _3131;
                    frontier_phi_68_pred_3 = _3130;
                    frontier_phi_68_pred_4 = _3128;
                    frontier_phi_68_pred_5 = _3127;
                }
                _2908 = frontier_phi_68_pred;
                _2914 = frontier_phi_68_pred_1;
                _2912 = frontier_phi_68_pred_2;
                _2910 = frontier_phi_68_pred_3;
                _2906 = frontier_phi_68_pred_4;
                _2904 = frontier_phi_68_pred_5;
                uint _3062 = _3061 + 1u;
                if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3055 = _2904;
                    _3056 = _2906;
                    _3057 = _2908;
                    _3058 = _2910;
                    _3059 = _2912;
                    _3060 = _2914;
                    _3061 = _3062;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
        }
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.z;
        uint _2920 = (_2918 >> 8u) & 15u;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((4294967295u << _2920) & _2801) == 0u)
        {
            _3023 = _2903;
            _3025 = _2905;
            _3027 = _2907;
            _3029 = _2909;
            _3031 = _2911;
            _3033 = _2913;
        }
        else
        {
            float _3048 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
            float _3049 = _3048 * _2755;
            float _3050 = _3048 * _2756;
            float _3051 = _3048 * _2757;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2920 < ((_2918 >> 12u) & 15u))
            {
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3183 = _2903;
                float _3184 = _2905;
                float _3185 = _2907;
                float _3186 = _2909;
                float _3187 = _2911;
                float _3188 = _2913;
                uint _3189 = _2920;
                uint _3198;
                bool _3199;
                for (;;)
                {
                    _3198 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                    _3199 = _3198 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3199)
                    {
                        frontier_phi_79_pred = _3188;
                        frontier_phi_79_pred_1 = _3187;
                        frontier_phi_79_pred_2 = _3186;
                        frontier_phi_79_pred_3 = _3185;
                        frontier_phi_79_pred_4 = _3184;
                        frontier_phi_79_pred_5 = _3183;
                    }
                    else
                    {
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3404 = _3183;
                        float _3405 = _3184;
                        float _3406 = _3185;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        uint _3410 = _3198;
                        uint _3411;
                        vec4 _3436;
                        float _3437;
                        vec4 _3452;
                        vec3 _3464;
                        vec4 _3479;
                        vec4 _3494;
                        float _3541;
                        bool _3542;
                        for (;;)
                        {
                            uint _3421 = ((_3189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3410));
                            _3411 = (_3410 + 4294967295u) & _3410;
                            uint _3423 = _3421 * 40u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3437 = _3436.w;
                            uint _3439 = (_3421 * 40u) + 4u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3421 * 40u) + 8u;
                            _3464 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x));
                            uint _3466 = (_3421 * 40u) + 16u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3421 * 40u) + 20u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3497 = (_3421 * 40u) + 24u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3516 = (_3421 * 40u) + 28u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3541 = fma(_2757, _3529.z, fma(_2756, _3529.y, _3529.x * _2755)) + _3529.w;
                            _3542 = !((fma(_2757, _3510.z, fma(_2756, _3510.y, _3510.x * _2755)) + _3510.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3542)
                            {
                                float _3569 = _3436.x - _2755;
                                float _3570 = _3436.y - _2756;
                                float _3571 = _3436.z - _2757;
                                float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                                float _3575 = inversesqrt(_3572);
                                float _3576 = _3575 * _3569;
                                float _3577 = _3575 * _3570;
                                float _3578 = _3575 * _3571;
                                float _3582 = 1.0 - (_3572 / (_3437 * _3437));
                                float _4851 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3587 = sqrt(_3572) * _3452.w;
                                float _3589 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                                float _3590 = _3589 * _3589;
                                float _3593 = ((1.0 - _3590) * dot(vec3(_3576, _3577, _3578), vec3(_965, _968, _971))) + _3590;
                                float _3596 = _3587 * _3587;
                                float _3600 = (fma(_2757, _3479.z, fma(_2756, _3479.y, _3479.x * _2755)) + _3479.w) / _3541;
                                float _3601 = (fma(_2757, _3494.z, fma(_2756, _3494.y, _3494.x * _2755)) + _3494.w) / _3541;
                                float _3605 = 1.0 - dot(vec2(_3600, _3601), vec2(_3600, _3601));
                                float _4867 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3607 = _3606 * (((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3583) / ((_3596 * 0.699999988079071044921875) + 1.0));
                                float _3619 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                                float _3620 = 1.0 - _1040;
                                float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                                float _3628 = _3627 * _3627;
                                float _3629 = _3628 * _3628;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                                float _3640 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3049, (-0.0) - _3050, (-0.0) - _3051));
                                float _4878 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3644 = dot(vec3(_965, _968, _971), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                                float _4889 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                                float _3652 = _3589 * _3628;
                                float _3653 = _3652 * _3652;
                                float _3659 = ((1.0 - _3653) * dot(vec3(_965, _968, _971), vec3(_3576, _3577, _3578))) + _3653;
                                float _4900 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3661 = 1.0 - _3628;
                                float _3671 = (0.5 / (((_3660 * ((_3643 * _3661) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3628) * _3643))) * _3660;
                                float _4911 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3681 = (_3606 * _3583) * (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3651 * _3651) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3607 * _3452.z;
                                frontier_phi_85_pred_1 = _3607 * _3452.y;
                                frontier_phi_85_pred_2 = _3607 * _3452.x;
                                frontier_phi_85_pred_3 = _3681 * _3464.z;
                                frontier_phi_85_pred_4 = _3681 * _3464.y;
                                frontier_phi_85_pred_5 = _3681 * _3464.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3690 = frontier_phi_85_pred;
                            _3689 = frontier_phi_85_pred_1;
                            _3688 = frontier_phi_85_pred_2;
                            _3687 = frontier_phi_85_pred_3;
                            _3686 = frontier_phi_85_pred_4;
                            _3685 = frontier_phi_85_pred_5;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            _3396 = _3690 + _3409;
                            _3391 = _3685 + _3404;
                            _3392 = _3686 + _3405;
                            _3393 = _3687 + _3406;
                            if (_3411 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3411;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3396;
                        frontier_phi_79_pred_1 = _3395;
                        frontier_phi_79_pred_2 = _3394;
                        frontier_phi_79_pred_3 = _3393;
                        frontier_phi_79_pred_4 = _3392;
                        frontier_phi_79_pred_5 = _3391;
                    }
                    _3034 = frontier_phi_79_pred;
                    _3032 = frontier_phi_79_pred_1;
                    _3030 = frontier_phi_79_pred_2;
                    _3028 = frontier_phi_79_pred_3;
                    _3026 = frontier_phi_79_pred_4;
                    _3024 = frontier_phi_79_pred_5;
                    uint _3190 = _3189 + 1u;
                    if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3183 = _3024;
                        _3184 = _3026;
                        _3185 = _3028;
                        _3186 = _3030;
                        _3187 = _3032;
                        _3188 = _3034;
                        _3189 = _3190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3030;
                frontier_phi_60_61_ladder_1 = _3034;
                frontier_phi_60_61_ladder_2 = _3032;
                frontier_phi_60_61_ladder_3 = _3028;
                frontier_phi_60_61_ladder_4 = _3026;
                frontier_phi_60_61_ladder_5 = _3024;
            }
            else
            {
                frontier_phi_60_61_ladder = _2909;
                frontier_phi_60_61_ladder_1 = _2913;
                frontier_phi_60_61_ladder_2 = _2911;
                frontier_phi_60_61_ladder_3 = _2907;
                frontier_phi_60_61_ladder_4 = _2905;
                frontier_phi_60_61_ladder_5 = _2903;
            }
            _3023 = frontier_phi_60_61_ladder_5;
            _3025 = frontier_phi_60_61_ladder_4;
            _3027 = frontier_phi_60_61_ladder_3;
            _3029 = frontier_phi_60_61_ladder;
            _3031 = frontier_phi_60_61_ladder_2;
            _3033 = frontier_phi_60_61_ladder_1;
        }
        float _3038 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _2813 = (_3038 * _3029) + _2247;
        _2815 = (_3038 * _3031) + _2249;
        _2817 = (_3038 * _3033) + _2251;
        _2819 = ((_3023 * _1009) * _3038) + _2595;
        _2821 = ((_3025 * _1011) * _3038) + _2597;
        _2823 = ((_3027 * _1012) * _3038) + _2599;
    }
    else
    {
        _2813 = _2247;
        _2815 = _2249;
        _2817 = _2251;
        _2819 = _2595;
        _2821 = _2597;
        _2823 = _2599;
    }
    float _4927 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4938 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4949 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4960 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2841 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2813 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1024))) + ((_2819 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2815 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1024))) + ((_2821 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2817 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1024))) + ((_2823 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _2848 = cbInstanceData._m0[_984 + 6u].w * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)));
    float _2853 = _946 / cbSceneParam._m0[86u].x;
    float _2854 = _947 / cbSceneParam._m0[86u].y;
    vec4 _2868 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2870 = _2868.x;
    float _2871 = _2868.y;
    float _2872 = _2868.z;
    float _2873 = _2868.w;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _2928 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _2929 = _2928 / _869;
        float _2940 = _2929 * _919;
        float _2941 = _920 * _2929;
        float _2942 = (-0.0) - _2941;
        float _2943 = _2929 * _921;
        float _2945 = (cbSceneParam._m0[77u].w * _2942) / _2928;
        float _2946 = _2945 + cbSceneParam._m0[79u].w;
        float _2947 = cbSceneParam._m0[79u].w - _2941;
        float _2953 = sqrt(((_2940 * _2940) + (_2941 * _2941)) + (_2943 * _2943));
        float _2956 = (1.0 - (cbSceneParam._m0[77u].w / _2928)) * _2953;
        float _2961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3140;
        if (abs((_2942 - _2945) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3140 = ((((_2946 > 0.0) ? exp2(_2961 * _2946) : (2.0 - exp2(_2963 * _2946))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2956;
        }
        else
        {
            float _3084 = 1.0 / cbSceneParam._m0[80u].x;
            float _3085 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : max(_2946, _2947));
            float _3086 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : min(_2946, _2947));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            _3140 = ((abs(_2953 / _2942) * cbSceneParam._m0[80u].y) * ((((_3095 - _3096) * 2.0) - ((exp2(_2961 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)))) - exp2(_2961 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))))) * _3084)) - ((exp2(_2963 * _3095) - exp2(_2963 * _3096)) * _3084))) + (_2956 * cbSceneParam._m0[80u].z);
        }
        vec4 _3142 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, 1.0), 0.0);
        float _3151 = exp2((_3140 * (-1.44269502162933349609375)) * (1.0 - _3142.w));
        float _3152 = log2(_3151);
        float _3168 = log2(_2873);
        _2965 = (exp2(_3168 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].x)) * _3142.x) / cbSceneParam._m0[78u].x)) + _2870;
        _2967 = (exp2(_3168 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].y)) * _3142.y) / cbSceneParam._m0[78u].y)) + _2871;
        _2969 = (exp2(_3168 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].z)) * _3142.z) / cbSceneParam._m0[78u].z)) + _2872;
        _2971 = _3151 * _2873;
    }
    else
    {
        _2965 = _2870;
        _2967 = _2871;
        _2969 = _2872;
        _2971 = _2873;
    }
    bool _3178;
    vec4 _2981;
    vec4 _3003;
    float _3005;
    float _3009;
    float _3010;
    float _3011;
    float _3012;
    bool _3022;
    for (;;)
    {
        _2981 = cbMatDynParam._m0[0u];
        float _2983 = roundEven(_2981.y);
        bool _2984 = _2983 == 3.0;
        float _2985 = log2(_2971);
        float _2992 = exp2(_2985 * cbSceneParam._m0[78u].x) * _2841;
        float _2993 = exp2(_2985 * cbSceneParam._m0[78u].y) * _2842;
        float _2994 = exp2(_2985 * cbSceneParam._m0[78u].z) * _2843;
        float _3001 = _935 + (-0.5);
        _3003 = cbMtdParam._m0[1u];
        _3005 = _3003.y * _3001;
        float _3008 = (_2983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3009 = _3008 * (_2984 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2965)));
        _3010 = _3008 * (_2984 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2967)));
        _3011 = _3008 * (_2984 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2969)));
        _3012 = _3001 * 0.999000012874603271484375;
        _3022 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3022)
        {
            if ((cbInstanceData._m0[_984 + 7u].x + _3012) < 0.5)
            {
                _3178 = true;
                break;
            }
        }
        uint _3119 = _985 + uint(_2981.w);
        if ((cbInstanceData._m0[_3119].w < 1.0) && ((cbInstanceData._m0[_3119].w + _3012) < 0.5))
        {
            _3178 = true;
            break;
        }
        if ((_3005 + _488) < _3003.x)
        {
            _3178 = true;
            break;
        }
        _3178 = false;
        break;
    }
    float _3382;
    if (_3178)
    {
        discard_state = true;
        _3382 = 0.0;
    }
    else
    {
        _3382 = _2848;
    }
    SV_Target.x = _3009;
    SV_Target.y = _3010;
    SV_Target.z = _3011;
    SV_Target.w = _3382;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2848;
    discard_exit();
}


