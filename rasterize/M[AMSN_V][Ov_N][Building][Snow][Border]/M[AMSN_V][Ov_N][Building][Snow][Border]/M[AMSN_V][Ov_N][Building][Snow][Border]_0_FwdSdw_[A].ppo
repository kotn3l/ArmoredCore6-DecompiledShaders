#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1429;
float _4095;
float _4096;
float _4097;
float _4098;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _241 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _242 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _243 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _247 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _248 = _247 * _241;
    float _249 = _247 * _242;
    float _250 = _247 * _243;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _268 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _269 = _268 * TANGENT_2.x;
    float _270 = _268 * TANGENT_2.y;
    float _271 = _268 * TANGENT_2.z;
    float _276;
    float _277;
    float _278;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _276 = (-0.0) - _255;
        _277 = (-0.0) - _256;
        _278 = (-0.0) - _257;
    }
    else
    {
        _276 = _255;
        _277 = _256;
        _278 = _257;
    }
    vec4 _323 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _335 = 1.0 - ((1.0 - _323.x) * 1.39999997615814208984375);
    float _4107 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _336 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _343 = (_336 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[16u].x)) + cbMtdParam._m0[16u].x;
    float _344 = (_336 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[16u].y)) + cbMtdParam._m0[16u].y;
    float _345 = (_336 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z;
    float _347 = 1.0 - ((1.0 - _323.y) * 1.39999997615814208984375);
    float _4118 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _355 = (_348 * (cbMtdParam._m0[14u].x - _343)) + _343;
    float _356 = (_348 * (cbMtdParam._m0[14u].y - _344)) + _344;
    float _357 = (_348 * (cbMtdParam._m0[14u].z - _345)) + _345;
    float _359 = 1.0 - ((1.0 - _323.z) * 1.39999997615814208984375);
    float _4129 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    vec4 _385 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _387 = _385.x;
    float _388 = _387 * cbMtdParam._m0[20u].x;
    float _402 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _388) + (cbMtdParam._m0[17u].z * TEXCOORD_5.w))) + 1.0;
    float _4140 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _404 = 1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)));
    float _405 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _406 = isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0));
    float _414 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _388) + (cbMtdParam._m0[17u].y * TEXCOORD_5.z))) + 1.0;
    float _4161 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _416 = 1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)));
    float _417 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _418 = isnan(1.0) ? _417 : (isnan(_417) ? 1.0 : min(_417, 1.0));
    vec4 _436 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _441 = cbMtdParam._m0[12u].x * _418;
    float _443 = cbMtdParam._m0[12u].y * _418;
    float _445 = cbMtdParam._m0[12u].z * _418;
    float _465 = _416 + _404;
    float _466 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
    vec4 _485 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _490 = _485.w;
    float _491 = _485.x * cbMtdParam._m0[10u].x;
    float _492 = _485.y * cbMtdParam._m0[10u].y;
    float _493 = _485.z * cbMtdParam._m0[10u].z;
    float _513 = ((_491 - (_467 * _491)) + ((((((_438 * (cbMtdParam._m0[11u].x - _441)) * _406) + (_441 * _438)) * 4.55000019073486328125) * _467) * _491)) * ((_360 * (cbMtdParam._m0[15u].x - _355)) + _355);
    float _514 = ((((((((_439 * (cbMtdParam._m0[11u].y - _443)) * _406) + (_443 * _439)) * 4.55000019073486328125) * _467) * _492) + _492) - (_467 * _492)) * ((_360 * (cbMtdParam._m0[15u].y - _356)) + _356);
    float _515 = ((((((((_440 * (cbMtdParam._m0[11u].z - _445)) * _406) + (_445 * _440)) * 4.55000019073486328125) * _467) * _493) + _493) - (_467 * _493)) * ((_360 * (cbMtdParam._m0[15u].z - _357)) + _357);
    float _524 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[19u].y) + 1.0;
    float _4192 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _536 = ((((_387 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[19u].z) + 1.0;
    float _4203 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    vec4 _552 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _558 = (_552.x * 2.0) + (-1.0);
    float _559 = (_552.y * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _4214 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))));
    float _568 = fma(_565, _276, fma(_559, _262, _558 * _229));
    float _571 = fma(_565, _277, fma(_559, _263, _558 * _230));
    float _574 = fma(_565, _278, fma(_559, _264, _558 * _231));
    float _583 = exp2(log2(inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574))) * _571) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w;
    float _4225 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = ((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) + (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * (1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))));
    float _4236 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _589 = 3.0 - (_587 * 2.0);
    float _594 = _587 * _587;
    float _601 = ((_594 * (cbMtdParam._m0[13u].x - _513)) * _589) + _513;
    float _602 = ((_594 * (cbMtdParam._m0[13u].y - _514)) * _589) + _514;
    float _603 = ((_594 * (cbMtdParam._m0[13u].z - _515)) * _589) + _515;
    vec4 _617 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _621 = _617.z;
    float _624 = (_617.x * 2.0) + (-1.0);
    float _625 = (_617.y * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _4247 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))));
    float _634 = fma(_631, _276, fma(_625, _269, _624 * _248));
    float _637 = fma(_631, _277, fma(_625, _270, _624 * _249));
    float _640 = fma(_631, _278, fma(_625, _271, _624 * _250));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    float _645 = _644 * _634;
    float _646 = _644 * _637;
    float _647 = _644 * _640;
    vec4 _660 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _4258 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _677 = ((_660.z - _621) * _586) + _621;
    vec4 _689 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _695 = (_689.x * 2.0) + (-1.0);
    float _696 = (_689.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _4269 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))));
    float _705 = fma(_702, _276, fma(_696, _269, _695 * _248));
    float _708 = fma(_702, _277, fma(_696, _270, _695 * _249));
    float _711 = fma(_702, _278, fma(_696, _271, _695 * _250));
    float _715 = inversesqrt(dot(vec3(_705, _708, _711), vec3(_705, _708, _711)));
    float _716 = _715 * _705;
    float _717 = _715 * _708;
    float _718 = _715 * _711;
    float _721 = fma(_718, _231, fma(_717, _230, _716 * _229));
    float _724 = fma(_718, _264, fma(_717, _263, _716 * _262));
    float _727 = fma(_718, _278, fma(_717, _277, _716 * _276));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    float _735 = fma(_647, _231, fma(_646, _230, _645 * _229));
    float _738 = fma(_647, _264, fma(_646, _263, _645 * _262));
    float _741 = fma(_647, _278, fma(_646, _277, _645 * _276));
    float _745 = inversesqrt(dot(vec3(_735, _738, _741), vec3(_735, _738, _741)));
    vec4 _763 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _769 = (_763.x * 2.0) + (-1.0);
    float _770 = (_763.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4280 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))));
    float _779 = fma(_776, _276, fma(_770, _269, _769 * _248));
    float _782 = fma(_776, _277, fma(_770, _270, _769 * _249));
    float _785 = fma(_776, _278, fma(_770, _271, _769 * _250));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _795 = fma(_792, _231, fma(_791, _230, _790 * _229));
    float _798 = fma(_792, _264, fma(_791, _263, _790 * _262));
    float _801 = fma(_792, _278, fma(_791, _277, _790 * _276));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _821 = (((((_721 * _406) * _731) * cbMtdParam._m0[18u].y) + _558) + ((_745 * _735) * cbMtdParam._m0[19u].w)) + (((_795 * _418) * _805) * cbMtdParam._m0[19u].x);
    float _824 = (((((_724 * _406) * _731) * cbMtdParam._m0[18u].y) + _559) + ((_745 * _738) * cbMtdParam._m0[19u].w)) + (((_798 * _418) * _805) * cbMtdParam._m0[19u].x);
    float _831 = ((_667 - _821) * _586) + _821;
    float _832 = (_586 * (_668 - _824)) + _824;
    float _833 = (_586 * (sqrt(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) - _565)) + _565;
    float _836 = fma(_833, _276, fma(_832, _262, _831 * _229));
    float _839 = fma(_833, _277, fma(_832, _263, _831 * _230));
    float _842 = fma(_833, _278, fma(_832, _264, _831 * _231));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    float _847 = _846 * _836;
    float _848 = _846 * _839;
    float _849 = _846 * _842;
    float _4291 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _850 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _851 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _4313 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4324 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4335 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4346 = isnan(0.0) ? cbMtdParam._m0[20u].y : (isnan(cbMtdParam._m0[20u].y) ? 0.0 : max(cbMtdParam._m0[20u].y, 0.0));
    float _855 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _871 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _921 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _911);
    float _922 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _911);
    float _923 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _911);
    float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
    float _928 = _921 * _927;
    float _929 = _922 * _927;
    float _930 = _923 * _927;
    vec4 _935 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _937 = _935.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1108 = sqrt(((_921 * _921) + (_922 * _922)) + (_923 * _923));
        float _1114 = (cbMatDynParam._m0[5u].x * _1108) + cbMatDynParam._m0[5u].y;
        float _4357 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1119 = (cbMatDynParam._m0[5u].z * _1108) + cbMatDynParam._m0[5u].w;
        float _4368 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) - _1115)) + _1115) < ((_937 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _948 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _949 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _967 = fma(_849, cbSceneParam._m0[5u].z, fma(_848, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _847));
    float _970 = fma(_849, cbSceneParam._m0[6u].z, fma(_848, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _847));
    float _973 = fma(_849, cbSceneParam._m0[7u].z, fma(_848, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _847));
    uint _986 = uint(roundEven(NORMAL.w)) * 13u;
    uint _987 = _986 + 9u;
    uint _988 = _987 + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * cbInstanceData._m0[_988].z;
    float _4379 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _1000 = 1.0 - _855;
    float _1001 = _997 * _1000;
    float _1002 = _998 * _1000;
    float _1003 = _999 * _1000;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _855;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _855;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _855;
    float _1011 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    vec4 _1023 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _948, cbSceneParam._m0[86u].y * _949));
    float _1026 = _1023.x * TEXCOORD_4;
    float _1027 = dot(vec3(_847, _848, _849), vec3(_928, _929, _930));
    float _1030 = _1027 * 2.0;
    float _1034 = (_1030 * _847) - _928;
    float _1035 = (_1030 * _848) - _929;
    float _1036 = (_1030 * _849) - _930;
    float _1040 = abs(dot(vec3(_928, _929, _930), vec3(_847, _848, _849)));
    float _4412 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1042 = sqrt(_851);
    float _1054 = exp2((_1042 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1042 * 3.0));
    float _1060 = (1.0 - _1054) * ((_1042 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1061 = _1054 * _1042;
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1428;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1153 = fma(_1097, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089));
        float _1157 = fma(_1097, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089));
        float _1161 = fma(_1097, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089));
        float _1186 = _1089 + _847;
        float _1187 = _1093 + _848;
        float _1188 = _1097 + _849;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1153;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1157;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1161;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1153 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1157 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1161 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1256 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1222.x + (-0.5));
        float _1258 = _1256 * (_1222.y + (-0.5));
        float _1259 = _1256 * (_1222.z + (-0.5));
        float _1266 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1229.x + (-0.5));
        float _1268 = _1266 * (_1229.y + (-0.5));
        float _1269 = _1266 * (_1229.z + (-0.5));
        float _1276 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1236.x + (-0.5));
        float _1278 = _1276 * (_1236.y + (-0.5));
        float _1279 = _1276 * (_1236.z + (-0.5));
        float _1286 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1243.x + (-0.5));
        float _1288 = _1286 * (_1243.y + (-0.5));
        float _1289 = _1286 * (_1243.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1310 = (dot(vec3(_847, _848, _849), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1320 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4460 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1322 + 1.0))) + _1327) * _1290;
        float _1337 = _1258 * 0.5;
        float _1338 = _1268 * 0.5;
        float _1339 = _1278 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_847, _848, _849), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4493 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1364 + 1.0))) + _1369) * _1291;
        float _1379 = _1259 * 0.5;
        float _1380 = _1269 * 0.5;
        float _1381 = _1279 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_847, _848, _849), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4526 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1406 + 1.0))) + _1411) * _1292;
        _1428 = _1259;
        _1430 = _1258;
        _1431 = _1257;
        _1432 = _1269;
        _1433 = _1268;
        _1434 = _1267;
        _1435 = _1279;
        _1436 = _1278;
        _1437 = _1277;
        _1438 = _1292;
        _1439 = _1291;
        _1440 = _1290;
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1429;
        _1430 = _1429;
        _1431 = _1429;
        _1432 = _1429;
        _1433 = _1429;
        _1434 = _1429;
        _1435 = _1429;
        _1436 = _1429;
        _1437 = _1429;
        _1438 = _1429;
        _1439 = _1429;
        _1440 = _1429;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1472 = fma(_1097, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089));
        float _1476 = fma(_1097, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089));
        float _1480 = fma(_1097, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089));
        float _1503 = _1089 + _847;
        float _1504 = _1093 + _848;
        float _1505 = _1097 + _849;
        float _1515 = fma(_1505, cbModelParam._m0[30u].z, fma(_1504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503)) - _1472;
        float _1516 = fma(_1505, cbModelParam._m0[31u].z, fma(_1504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503)) - _1476;
        float _1517 = fma(_1505, cbModelParam._m0[32u].z, fma(_1504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503)) - _1480;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1472 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1476 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[35u].z) + ((((((_1480 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1571 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1538.x + (-0.5));
        float _1573 = _1571 * (_1538.y + (-0.5));
        float _1574 = _1571 * (_1538.z + (-0.5));
        float _1581 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1545.x + (-0.5));
        float _1583 = _1581 * (_1545.y + (-0.5));
        float _1584 = _1581 * (_1545.z + (-0.5));
        float _1591 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1552.x + (-0.5));
        float _1593 = _1591 * (_1552.y + (-0.5));
        float _1594 = _1591 * (_1552.z + (-0.5));
        float _1601 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1559.x + (-0.5));
        float _1603 = _1601 * (_1559.y + (-0.5));
        float _1604 = _1601 * (_1559.z + (-0.5));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = _1572 * 0.5;
        float _1609 = _1582 * 0.5;
        float _1610 = _1592 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_847, _848, _849), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4567 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4578 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4589 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_1635 + 1.0))) + _1640) * _1605;
        float _1650 = _1573 * 0.5;
        float _1651 = _1583 * 0.5;
        float _1652 = _1593 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_847, _848, _849), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4600 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4611 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4622 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_1677 + 1.0))) + _1682) * _1606;
        float _1692 = _1574 * 0.5;
        float _1693 = _1584 * 0.5;
        float _1694 = _1594 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_847, _848, _849), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4633 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4644 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4655 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_1719 + 1.0))) + _1724) * _1607;
        _1741 = _1574;
        _1742 = _1573;
        _1743 = _1572;
        _1744 = _1584;
        _1745 = _1583;
        _1746 = _1582;
        _1747 = _1594;
        _1748 = _1593;
        _1749 = _1592;
        _1750 = _1607;
        _1751 = _1606;
        _1752 = _1605;
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
    }
    else
    {
        _1741 = _1429;
        _1742 = _1429;
        _1743 = _1429;
        _1744 = _1429;
        _1745 = _1429;
        _1746 = _1429;
        _1747 = _1429;
        _1748 = _1429;
        _1749 = _1429;
        _1750 = _1429;
        _1751 = _1429;
        _1752 = _1429;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1441)) + _1441;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1442)) + _1442;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1443)) + _1443;
    float _1788 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1765));
    float _1809 = _1034 * 0.5;
    float _1810 = _1035 * 0.5;
    float _1811 = _1036 * 0.5;
    float _1812 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1815 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1818 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1852;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1825 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1428, _1432, _1435, _1438));
        float _1829 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1833 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1840 = dot(vec4(cbModelParam._m0[39u]), vec4(_1809, _1810, _1811, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1863;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1854 = dot(vec4(cbModelParam._m0[40u]), vec4(_1809, _1810, _1811, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1867 = (_1863 * cbModelParam._m0[1u].x) + (_1852 * (1.0 - cbModelParam._m0[1u].x));
    float _1877 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1877 : min(cbModelParam._m0[25u].z, _1877));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1925 = fma(_1097, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089)) + cbModelParam._m0[13u].w;
        float _1929 = fma(_1097, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089)) + cbModelParam._m0[14u].w;
        float _1933 = fma(_1097, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089)) + cbModelParam._m0[15u].w;
        float _1936 = fma(_1036, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034));
        float _1939 = fma(_1036, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034));
        float _1942 = fma(_1036, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034));
        float _1970;
        if (_1936 > 0.0)
        {
            _1970 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1970 = frontier_phi_19_17_ladder;
        }
        float _2142;
        if (_1939 > 0.0)
        {
            _2142 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2142 = frontier_phi_28_24_ladder;
        }
        float _2437;
        if (_1942 > 0.0)
        {
            _2437 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2437 = frontier_phi_40_35_ladder;
        }
        float _2439 = isnan(_2142) ? _1970 : (isnan(_1970) ? _2142 : min(_1970, _2142));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1936) + _1925;
        float _2445 = (_2440 * _1939) + _1929;
        float _2446 = (_2440 * _1942) + _1933;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2447;
        float _2451 = _2447 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 > _2451) || ((_2445 < _2449) || ((_2444 < _2449) || (_2444 > _2451))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2446, cbModelParam._m0[9u].z, fma(_2445, cbModelParam._m0[9u].y, _2444 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2446, cbModelParam._m0[10u].z, fma(_2445, cbModelParam._m0[10u].y, _2444 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2446, cbModelParam._m0[11u].z, fma(_2445, cbModelParam._m0[11u].y, _2444 * cbModelParam._m0[11u].x))), _1878);
            frontier_phi_18_40_ladder = _2591.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2591.x * cbModelParam._m0[1u].y;
        }
        _1958 = frontier_phi_18_40_ladder_2;
        _1960 = frontier_phi_18_40_ladder_1;
        _1962 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1034, _1035, _1036), _1878);
        _1958 = _1946.x * cbModelParam._m0[1u].y;
        _1960 = _1946.y * cbModelParam._m0[1u].y;
        _1962 = _1946.z * cbModelParam._m0[1u].y;
    }
    float _1966 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1966 : min(cbModelParam._m0[25u].w, _1966));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1097, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1097, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1097, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1036, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034));
        float _2035 = fma(_1036, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034));
        float _2038 = fma(_1036, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034));
        float _2147;
        if (_2032 > 0.0)
        {
            _2147 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2147 = frontier_phi_30_26_ladder;
        }
        float _2464;
        if (_2035 > 0.0)
        {
            _2464 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2464 = frontier_phi_42_37_ladder;
        }
        float _2802;
        if (_2038 > 0.0)
        {
            _2802 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2802 = frontier_phi_52_49_ladder;
        }
        float _2804 = isnan(_2464) ? _2147 : (isnan(_2147) ? _2464 : min(_2147, _2464));
        float _2805 = isnan(_2802) ? _2804 : (isnan(_2804) ? _2802 : min(_2804, _2802));
        float _2809 = (_2805 * _2032) + _2021;
        float _2810 = (_2805 * _2035) + _2025;
        float _2811 = (_2805 * _2038) + _2029;
        float _2812 = _2805 * 9.9999997473787516355514526367188e-05;
        float _2813 = (-1.0) - _2812;
        float _2815 = _2812 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2811 > _2815) || ((_2811 < _2813) || ((_2810 > _2815) || ((_2810 < _2813) || ((_2809 < _2813) || (_2809 > _2815))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2811, cbModelParam._m0[17u].z, fma(_2810, cbModelParam._m0[17u].y, _2809 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2811, cbModelParam._m0[18u].z, fma(_2810, cbModelParam._m0[18u].y, _2809 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2811, cbModelParam._m0[19u].z, fma(_2810, cbModelParam._m0[19u].y, _2809 * cbModelParam._m0[19u].x))), _1967);
            frontier_phi_27_52_ladder = _2933.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2933.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2933.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_27_52_ladder_2;
        _2059 = frontier_phi_27_52_ladder_1;
        _2061 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1034, _1035, _1036), _1967);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2074 = (((_1060 * _1011) + _1061) * _1026) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1060 * _1013) + _1061) * _1026) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1060 * _1014) + _1061) * _1026) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2134 = _2121 / _2133;
    float _2135 = _2125 / _2133;
    float _2136 = _2129 / _2133;
    float _2283;
    float _2284;
    float _2285;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2163 = ((uint(_2136 > cbSceneParam._m0[59u].y) + uint(_2136 > cbSceneParam._m0[59u].x)) + uint(_2136 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2164 = _2163 + 43u;
        uint _2172 = _2163 + 44u;
        uint _2180 = _2163 + 45u;
        uint _2188 = _2163 + 46u;
        float _2199 = fma(_2133, cbSceneParam._m0[_2164].w, fma(_2129, cbSceneParam._m0[_2164].z, fma(_2125, cbSceneParam._m0[_2164].y, _2121 * cbSceneParam._m0[_2164].x)));
        float _2203 = fma(_2133, cbSceneParam._m0[_2172].w, fma(_2129, cbSceneParam._m0[_2172].z, fma(_2125, cbSceneParam._m0[_2172].y, _2121 * cbSceneParam._m0[_2172].x)));
        float _2211 = fma(_2133, cbSceneParam._m0[_2188].w, fma(_2129, cbSceneParam._m0[_2188].z, fma(_2125, cbSceneParam._m0[_2188].y, _2121 * cbSceneParam._m0[_2188].x)));
        float _2216 = cbSceneParam._m0[33u].z * _2211;
        float _2218 = cbSceneParam._m0[33u].w * _2211;
        float _2221 = fma(_2133, cbSceneParam._m0[_2180].w, fma(_2129, cbSceneParam._m0[_2180].z, fma(_2125, cbSceneParam._m0[_2180].y, _2121 * cbSceneParam._m0[_2180].x))) / _2211;
        float _2269 = (cbSceneParam._m0[33u].x - sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136))) * cbSceneParam._m0[33u].y;
        float _4781 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2276 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 + _2199) / _2211, (_2218 + _2203) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2199) / _2211, (_2203 - _2216) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 - _2216) / _2211, (_2203 - _2218) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 - _2218) / _2211, (_2216 + _2203) / _2211), _2221), 0.0)).x), vec4(0.25)));
        _2283 = 1.0 - (_2276 * cbSceneParam._m0[34u].x);
        _2284 = 1.0 - (_2276 * cbSceneParam._m0[34u].y);
        _2285 = 1.0 - (_2276 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2283 = 1.0;
        _2284 = 1.0;
        _2285 = 1.0;
    }
    float _2349;
    float _2351;
    float _2353;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2337 = fma(_2133, cbSceneParam._m0[63u].w, fma(_2129, cbSceneParam._m0[63u].z, fma(_2125, cbSceneParam._m0[63u].y, _2121 * cbSceneParam._m0[63u].x)));
        float _2338 = fma(_2133, cbSceneParam._m0[60u].w, fma(_2129, cbSceneParam._m0[60u].z, fma(_2125, cbSceneParam._m0[60u].y, _2121 * cbSceneParam._m0[60u].x))) / _2337;
        float _2339 = fma(_2133, cbSceneParam._m0[61u].w, fma(_2129, cbSceneParam._m0[61u].z, fma(_2125, cbSceneParam._m0[61u].y, _2121 * cbSceneParam._m0[61u].x))) / _2337;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2338 >= cbSceneParam._m0[64u].x) && (_2339 >= cbSceneParam._m0[64u].y)) && (_2338 <= cbSceneParam._m0[64u].z)) && (_2339 <= cbSceneParam._m0[64u].w))
        {
            float _2477 = fma(_2133, cbSceneParam._m0[62u].w, fma(_2129, cbSceneParam._m0[62u].z, fma(_2125, cbSceneParam._m0[62u].y, _2121 * cbSceneParam._m0[62u].x))) / _2337;
            float _2481 = isnan(cbSceneParam._m0[41u].w) ? _2477 : (isnan(_2477) ? cbSceneParam._m0[41u].w : max(_2477, cbSceneParam._m0[41u].w));
            float _2524 = (cbSceneParam._m0[33u].x - sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136))) * cbSceneParam._m0[33u].y;
            float _4797 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
            float _2531 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2338, cbSceneParam._m0[33u].w + _2339), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2338, _2339 - cbSceneParam._m0[33u].z), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2338 - cbSceneParam._m0[33u].z, _2339 - cbSceneParam._m0[33u].w), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2338 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2339), _2481), 0.0)).x), vec4(0.25)));
            float _2535 = 1.0 - (_2531 * cbSceneParam._m0[34u].x);
            float _2536 = 1.0 - (_2531 * cbSceneParam._m0[34u].y);
            float _2537 = 1.0 - (_2531 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
            frontier_phi_39_38_ladder_1 = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
            frontier_phi_39_38_ladder_2 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
        }
        else
        {
            frontier_phi_39_38_ladder = _2284;
            frontier_phi_39_38_ladder_1 = _2283;
            frontier_phi_39_38_ladder_2 = _2285;
        }
        _2349 = frontier_phi_39_38_ladder_1;
        _2351 = frontier_phi_39_38_ladder;
        _2353 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2349 = _2283;
        _2351 = _2284;
        _2353 = _2285;
    }
    uvec4 _2358 = floatBitsToUint(cbInstanceData._m0[_986 + 5u]);
    uint _2360 = _2358.x * 14u;
    uint _2361 = _2360 + 13u;
    float _2368 = _1026 + (-1.0);
    float _2373 = (cbLight._m0[_2361].x * _2368) + 1.0;
    float _2374 = (cbLight._m0[_2361].y * _2368) + 1.0;
    float _2375 = (cbLight._m0[_2361].z * _2368) + 1.0;
    float _2376 = (cbLight._m0[_2361].w * _2368) + 1.0;
    uint _2377 = _2360 + 5u;
    float _2383 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    uint _2387 = _2360 + 4u;
    float _2396 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2400 = _2360 | 1u;
    float _2411 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_847, _848, _849));
    float _2414 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_847, _848, _849));
    float _4833 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _4844 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2419 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * 0.3183098733425140380859375;
    float _2421 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * 0.3183098733425140380859375;
    float _2428 = ((cbLight._m0[_2377].x * _2383) * _2421) + (((cbLight._m0[_2387].x * _2349) * _2396) * _2419);
    float _2429 = ((_2383 * cbLight._m0[_2377].y) * _2421) + (((cbLight._m0[_2387].y * _2351) * _2396) * _2419);
    float _2430 = ((_2383 * cbLight._m0[_2377].z) * _2421) + (((cbLight._m0[_2387].z * _2353) * _2396) * _2419);
    uvec4 _2434 = floatBitsToUint(cbLight._m0[_2360 + 12u]);
    bool _2436 = _2434.x == 0u;
    float _2538;
    float _2540;
    float _2542;
    if (_2436)
    {
        _2538 = _2428;
        _2540 = _2429;
        _2542 = _2430;
    }
    else
    {
        uint _2546 = _2360 + 6u;
        float _2562 = (dot(vec3(cbLight._m0[_2360 + 2u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2563 = _2562 * _2562;
        float _4855 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2564 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2565 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2538 = (((cbLight._m0[_2546].x * 0.3183098733425140380859375) * _2564) * _2565) + _2428;
        _2540 = (((cbLight._m0[_2546].y * 0.3183098733425140380859375) * _2564) * _2565) + _2429;
        _2542 = (((cbLight._m0[_2546].z * 0.3183098733425140380859375) * _2564) * _2565) + _2430;
    }
    bool _2545 = _2434.y == 0u;
    float _2600;
    float _2602;
    float _2604;
    if (_2545)
    {
        _2600 = _2538;
        _2602 = _2540;
        _2604 = _2542;
    }
    else
    {
        uint _2773 = _2360 + 7u;
        float _2789 = (dot(vec3(cbLight._m0[_2360 + 3u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2790 = _2789 * _2789;
        float _4871 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2791 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2792 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2600 = (((cbLight._m0[_2773].x * 0.3183098733425140380859375) * _2791) * _2792) + _2538;
        _2602 = (((cbLight._m0[_2773].y * 0.3183098733425140380859375) * _2791) * _2792) + _2540;
        _2604 = (((cbLight._m0[_2773].z * 0.3183098733425140380859375) * _2791) * _2792) + _2542;
    }
    uint _2607 = _2360 + 8u;
    float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _851) * 0.949999988079071044921875);
    float _2621 = _2620 * _2620;
    float _2622 = cbLight._m0[_2360].x + _928;
    float _2623 = cbLight._m0[_2360].y + _929;
    float _2624 = cbLight._m0[_2360].z + _930;
    float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
    float _2629 = _2628 * _2622;
    float _2630 = _2628 * _2623;
    float _2631 = _2628 * _2624;
    float _2632 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2360].xyz));
    float _4887 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _4898 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2636 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2637 = dot(vec3(_847, _848, _849), vec3(_2629, _2630, _2631));
    float _4909 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2629, _2630, _2631));
    float _4920 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2621 * _2621;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0);
    float _2658 = 0.959999978542327880859375 - _1008;
    float _2660 = 0.959999978542327880859375 - _1009;
    float _2661 = 0.959999978542327880859375 - _1010;
    float _2668 = 1.0 - _2621;
    float _2679 = (0.5 / (((_2636 * ((_2635 * _2668) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2668) + _2621) * _2635))) * _2635;
    float _4931 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    uint _2695 = _2360 + 9u;
    float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _851) * 0.949999988079071044921875);
    float _2707 = _2706 * _2706;
    float _2708 = cbLight._m0[_2400].x + _928;
    float _2709 = cbLight._m0[_2400].y + _929;
    float _2710 = cbLight._m0[_2400].z + _930;
    float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
    float _2715 = _2714 * _2708;
    float _2716 = _2714 * _2709;
    float _2717 = _2714 * _2710;
    float _2718 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2400].xyz));
    float _4942 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
    float _2722 = dot(vec3(_847, _848, _849), vec3(_2715, _2716, _2717));
    float _4953 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
    float _2726 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2715, _2716, _2717));
    float _4964 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2730 = _2707 * _2707;
    float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
    float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0);
    float _2748 = 1.0 - _2707;
    float _2758 = (0.5 / (((_2636 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2748) + _2707) * _2721))) * _2721;
    float _4975 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2760 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
    float _2770 = (((((_2741 * _2658) + _1011) * cbLight._m0[_2695].x) * _2760) * _2383) + ((((cbLight._m0[_2607].x * _2349) * ((_2657 * _2658) + _1011)) * _2681) * _2396);
    float _2771 = (((((_2741 * _2660) + _1013) * cbLight._m0[_2695].y) * _2760) * _2383) + ((((cbLight._m0[_2607].y * _2351) * ((_2657 * _2660) + _1013)) * _2681) * _2396);
    float _2772 = (((((_2741 * _2661) + _1014) * cbLight._m0[_2695].z) * _2760) * _2383) + ((((cbLight._m0[_2607].z * _2353) * ((_2657 * _2661) + _1014)) * _2681) * _2396);
    float _2828;
    float _2830;
    float _2832;
    if (_2436)
    {
        _2828 = _2770;
        _2830 = _2771;
        _2832 = _2772;
    }
    else
    {
        uint _2834 = _2360 + 2u;
        uint _2838 = _2360 + 10u;
        float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2834].w)) * _851) * 0.949999988079071044921875);
        float _2853 = _2852 * _2852;
        float _2854 = cbLight._m0[_2834].x + _928;
        float _2855 = cbLight._m0[_2834].y + _929;
        float _2856 = cbLight._m0[_2834].z + _930;
        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
        float _2861 = _2860 * _2854;
        float _2862 = _2860 * _2855;
        float _2863 = _2860 * _2856;
        float _2864 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2834].xyz));
        float _4986 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _2868 = dot(vec3(_847, _848, _849), vec3(_2861, _2862, _2863));
        float _4997 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _2872 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_2861, _2862, _2863));
        float _5008 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2876 = _2853 * _2853;
        float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
        float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) * 5.0);
        float _2894 = 1.0 - _2853;
        float _2904 = (0.5 / (((_2636 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2894) + _2853) * _2867))) * _2867;
        float _5019 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2828 = (((((_2887 * _2658) + _1011) * cbLight._m0[_2838].x) * _2906) * _2907) + _2770;
        _2830 = (((((_2887 * _2660) + _1013) * cbLight._m0[_2838].y) * _2906) * _2907) + _2771;
        _2832 = (((((_2887 * _2661) + _1014) * cbLight._m0[_2838].z) * _2906) * _2907) + _2772;
    }
    float _2938;
    float _2940;
    float _2942;
    if (_2545)
    {
        _2938 = _2828;
        _2940 = _2830;
        _2942 = _2832;
    }
    else
    {
        uint _2949 = _2360 + 3u;
        uint _2953 = _2360 + 11u;
        float _2967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2949].w)) * _851) * 0.949999988079071044921875);
        float _2968 = _2967 * _2967;
        float _2969 = cbLight._m0[_2949].x + _928;
        float _2970 = cbLight._m0[_2949].y + _929;
        float _2971 = cbLight._m0[_2949].z + _930;
        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
        float _2976 = _2975 * _2969;
        float _2977 = _2975 * _2970;
        float _2978 = _2975 * _2971;
        float _2979 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2949].xyz));
        float _5035 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
        float _2983 = dot(vec3(_847, _848, _849), vec3(_2976, _2977, _2978));
        float _5046 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2986 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
        float _2987 = dot(vec3(cbLight._m0[_2949].xyz), vec3(_2976, _2977, _2978));
        float _5057 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2991 = _2968 * _2968;
        float _2995 = ((_2986 * _2986) * (_2991 + (-1.0))) + 1.0;
        float _3002 = exp2(log2(1.0 - (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) * 5.0);
        float _3009 = 1.0 - _2968;
        float _3019 = (0.5 / (((_2636 * ((_2982 * _3009) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _3009) + _2968) * _2982))) * _2982;
        float _5068 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3021 = (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_2991 / ((_2995 * _2995) * 3.141590118408203125));
        float _3022 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2938 = (((((_3002 * _2658) + _1011) * cbLight._m0[_2953].x) * _3021) * _3022) + _2828;
        _2940 = (((((_3002 * _2660) + _1013) * cbLight._m0[_2953].y) * _3021) * _3022) + _2830;
        _2942 = (((((_3002 * _2661) + _1014) * cbLight._m0[_2953].z) * _3021) * _3022) + _2832;
    }
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_2358.y == 0u)
    {
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.x;
        uint _3055 = uint((float(_3043.y) * floor(float(uint(cbSceneParam._m0[85u].y * _949) / _3044))) + floor(float(uint(cbSceneParam._m0[85u].x * _948) / _3044)));
        float _3065 = (log2(_2136 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3066 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        uint _3069 = uint(isnan(14.0) ? _3066 : (isnan(_3066) ? 14.0 : min(_3066, 14.0)));
        uvec4 _3074 = texelFetch(g_lightClusterGridBuffer, int(((_3069 << 2u) + (_3055 << 6u)) >> 2u));
        uint _3075 = _3074.x;
        uint _3076 = _3043.z;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((((1u << ((_3076 >> 4u) & 15u)) + 4294967295u) & _3075) == 0u) || ((_3076 & 240u) == 0u))
        {
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
        }
        else
        {
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3167;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            float _3313 = 0.0;
            uint _3314 = 0u;
            uint _3323;
            bool _3324;
            for (;;)
            {
                _3323 = texelFetch(g_lightClassification, int((((_3069 << 5u) + (_3055 << 9u)) + (_3314 << 2u)) >> 2u)).x;
                _3324 = _3323 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3324)
                {
                    frontier_phi_73_pred = _3313;
                    frontier_phi_73_pred_1 = _3312;
                    frontier_phi_73_pred_2 = _3311;
                    frontier_phi_73_pred_3 = _3310;
                    frontier_phi_73_pred_4 = _3309;
                    frontier_phi_73_pred_5 = _3308;
                }
                else
                {
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    uint _3459;
                    _3453 = _3308;
                    _3454 = _3309;
                    _3455 = _3310;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3313;
                    _3459 = _3323;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    for (;;)
                    {
                        uint _3463 = uint(findLSB(_3459)) + (_3314 << 5u);
                        uint _3460 = (_3459 + 4294967295u) & _3459;
                        uint _3465 = _3463 * 48u;
                        vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3485 = (_3463 * 48u) + 4u;
                        vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3485)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 3u)).x));
                        uint _3504 = (_3463 * 48u) + 8u;
                        vec3 _3515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x));
                        float _3519 = _3479.x - _2134;
                        float _3520 = _3479.y - _2135;
                        float _3521 = _3479.z - _2136;
                        float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                        float _3525 = inversesqrt(_3522);
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3529 = dot(vec3(_967, _970, _973), vec3(_3526, _3527, _3528));
                        float _3534 = 1.0 - (_3522 * _3479.w);
                        float _5094 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3536 = sqrt(_3522) * _3498.w;
                        float _3538 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3529) + _3539;
                        float _3545 = _3536 * _3536;
                        float _3549 = ((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3535) / ((_3545 * 0.699999988079071044921875) + 1.0);
                        float _3553 = (-0.0) - _2134;
                        float _3554 = (-0.0) - _2135;
                        float _3555 = (-0.0) - _2136;
                        float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                        float _3560 = _3559 * _3553;
                        float _3561 = _3559 * _3554;
                        float _3562 = _3559 * _3555;
                        float _3569 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                        float _3570 = 1.0 - _1042;
                        float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                        float _3578 = _3577 * _3577;
                        float _3579 = _3578 * _3578;
                        float _3580 = _3560 + _3526;
                        float _3581 = _3561 + _3527;
                        float _3582 = _3562 + _3528;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3590 = dot(vec3(_967, _970, _973), vec3(_3560, _3561, _3562));
                        float _5110 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3593 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3594 = dot(vec3(_967, _970, _973), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                        float _5121 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                        float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                        float _3602 = _3538 * _3578;
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3529) + _3603;
                        float _5132 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                        float _3608 = 1.0 - _3578;
                        float _3618 = (0.5 / (((_3607 * ((_3593 * _3608) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3578) * _3593))) * _3607;
                        float _5143 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3629 = (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) / ((_3601 * _3601) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125))) * _3535;
                        _3383 = (_3549 * _3498.x) + _3456;
                        _3384 = (_3549 * _3498.y) + _3457;
                        _3385 = (_3549 * _3498.z) + _3458;
                        _3380 = (_3629 * _3515.x) + _3453;
                        _3381 = (_3629 * _3515.y) + _3454;
                        _3382 = (_3629 * _3515.z) + _3455;
                        if (_3460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3453 = _3380;
                            _3454 = _3381;
                            _3455 = _3382;
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3385;
                            _3459 = _3460;
                        }
                    }
                    frontier_phi_73_pred = _3385;
                    frontier_phi_73_pred_1 = _3384;
                    frontier_phi_73_pred_2 = _3383;
                    frontier_phi_73_pred_3 = _3382;
                    frontier_phi_73_pred_4 = _3381;
                    frontier_phi_73_pred_5 = _3380;
                }
                _3167 = frontier_phi_73_pred;
                _3165 = frontier_phi_73_pred_1;
                _3163 = frontier_phi_73_pred_2;
                _3161 = frontier_phi_73_pred_3;
                _3159 = frontier_phi_73_pred_4;
                _3157 = frontier_phi_73_pred_5;
                uint _3315 = _3314 + 1u;
                if (_3315 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3308 = _3157;
                    _3309 = _3159;
                    _3310 = _3161;
                    _3311 = _3163;
                    _3312 = _3165;
                    _3313 = _3167;
                    _3314 = _3315;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
        }
        uvec4 _3170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3171 = _3170.z;
        uint _3173 = (_3171 >> 8u) & 15u;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        if (((4294967295u << _3173) & _3075) == 0u)
        {
            _3276 = _3156;
            _3278 = _3158;
            _3280 = _3160;
            _3282 = _3162;
            _3284 = _3164;
            _3286 = _3166;
        }
        else
        {
            float _3301 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
            float _3302 = _3301 * _2134;
            float _3303 = _3301 * _2135;
            float _3304 = _3301 * _2136;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3173 < ((_3171 >> 12u) & 15u))
            {
                float _3277;
                float _3279;
                float _3281;
                float _3283;
                float _3285;
                float _3287;
                float _3436 = _3156;
                float _3437 = _3158;
                float _3438 = _3160;
                float _3439 = _3162;
                float _3440 = _3164;
                float _3441 = _3166;
                uint _3442 = _3173;
                uint _3451;
                bool _3452;
                for (;;)
                {
                    _3451 = texelFetch(g_lightClassification, int((((_3069 << 5u) + (_3055 << 9u)) + (_3442 << 2u)) >> 2u)).x;
                    _3452 = _3451 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3452)
                    {
                        frontier_phi_84_pred = _3440;
                        frontier_phi_84_pred_1 = _3439;
                        frontier_phi_84_pred_2 = _3438;
                        frontier_phi_84_pred_3 = _3437;
                        frontier_phi_84_pred_4 = _3436;
                        frontier_phi_84_pred_5 = _3441;
                    }
                    else
                    {
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3937;
                        float _3938;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3656 = _3436;
                        float _3657 = _3437;
                        float _3658 = _3438;
                        float _3659 = _3439;
                        float _3660 = _3440;
                        float _3661 = _3441;
                        uint _3662 = _3451;
                        uint _3663;
                        vec4 _3688;
                        float _3689;
                        vec4 _3704;
                        vec3 _3716;
                        vec4 _3731;
                        vec4 _3746;
                        float _3793;
                        bool _3794;
                        for (;;)
                        {
                            uint _3673 = ((_3442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3662));
                            _3663 = (_3662 + 4294967295u) & _3662;
                            uint _3675 = _3673 * 40u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            _3689 = _3688.w;
                            uint _3691 = (_3673 * 40u) + 4u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3706 = (_3673 * 40u) + 8u;
                            _3716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x));
                            uint _3718 = (_3673 * 40u) + 16u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3673 * 40u) + 20u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3749 = (_3673 * 40u) + 24u;
                            vec4 _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3768 = (_3673 * 40u) + 28u;
                            vec4 _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            _3793 = fma(_2136, _3781.z, fma(_2135, _3781.y, _3781.x * _2134)) + _3781.w;
                            _3794 = !((fma(_2136, _3762.z, fma(_2135, _3762.y, _3762.x * _2134)) + _3762.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3794)
                            {
                                float _3821 = _3688.x - _2134;
                                float _3822 = _3688.y - _2135;
                                float _3823 = _3688.z - _2136;
                                float _3824 = dot(vec3(_3821, _3822, _3823), vec3(_3821, _3822, _3823));
                                float _3827 = inversesqrt(_3824);
                                float _3828 = _3827 * _3821;
                                float _3829 = _3827 * _3822;
                                float _3830 = _3827 * _3823;
                                float _3834 = 1.0 - (_3824 / (_3689 * _3689));
                                float _5154 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3839 = sqrt(_3824) * _3704.w;
                                float _3841 = 1.39999997615814208984375 / (_3839 + 1.39999997615814208984375);
                                float _3842 = _3841 * _3841;
                                float _3845 = ((1.0 - _3842) * dot(vec3(_3828, _3829, _3830), vec3(_967, _970, _973))) + _3842;
                                float _3848 = _3839 * _3839;
                                float _3852 = (fma(_2136, _3731.z, fma(_2135, _3731.y, _3731.x * _2134)) + _3731.w) / _3793;
                                float _3853 = (fma(_2136, _3746.z, fma(_2135, _3746.y, _3746.x * _2134)) + _3746.w) / _3793;
                                float _3857 = 1.0 - dot(vec2(_3852, _3853), vec2(_3852, _3853));
                                float _5170 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3859 = _3858 * (((isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0))) * _3835) / ((_3848 * 0.699999988079071044921875) + 1.0));
                                float _3871 = exp2(log2(1.0 / ((_3848 * 3.5) + 5.0)) * 0.25);
                                float _3872 = 1.0 - _1042;
                                float _3879 = sqrt(1.0 - ((1.0 - (_3872 * _3872)) * (1.0 - (_3871 * _3871))));
                                float _3880 = _3879 * _3879;
                                float _3881 = _3880 * _3880;
                                float _3882 = _3828 - _3302;
                                float _3883 = _3829 - _3303;
                                float _3884 = _3830 - _3304;
                                float _3888 = inversesqrt(dot(vec3(_3882, _3883, _3884), vec3(_3882, _3883, _3884)));
                                float _3892 = dot(vec3(_967, _970, _973), vec3((-0.0) - _3302, (-0.0) - _3303, (-0.0) - _3304));
                                float _5181 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3895 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _3896 = dot(vec3(_967, _970, _973), vec3(_3888 * _3882, _3888 * _3883, _3888 * _3884));
                                float _5192 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3899 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                                float _3903 = ((_3899 * _3899) * (_3881 + (-1.0))) + 1.0;
                                float _3904 = _3841 * _3880;
                                float _3905 = _3904 * _3904;
                                float _3911 = ((1.0 - _3905) * dot(vec3(_967, _970, _973), vec3(_3828, _3829, _3830))) + _3905;
                                float _5203 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3912 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                                float _3913 = 1.0 - _3880;
                                float _3923 = (0.5 / (((_3912 * ((_3895 * _3913) + _3880)) + 9.9999999392252902907785028219223e-09) + (((_3912 * _3913) + _3880) * _3895))) * _3912;
                                float _5214 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3933 = (_3858 * _3835) * (((_3881 * 3.1415927410125732421875) * (isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0)))) / ((_3903 * _3903) * ((_3848 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3859 * _3704.y;
                                frontier_phi_90_pred_1 = _3859 * _3704.x;
                                frontier_phi_90_pred_2 = _3933 * _3716.z;
                                frontier_phi_90_pred_3 = _3933 * _3716.y;
                                frontier_phi_90_pred_4 = _3933 * _3716.x;
                                frontier_phi_90_pred_5 = _3859 * _3704.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3941 = frontier_phi_90_pred;
                            _3940 = frontier_phi_90_pred_1;
                            _3939 = frontier_phi_90_pred_2;
                            _3938 = frontier_phi_90_pred_3;
                            _3937 = frontier_phi_90_pred_4;
                            _3942 = frontier_phi_90_pred_5;
                            _3646 = _3940 + _3659;
                            _3647 = _3941 + _3660;
                            _3648 = _3942 + _3661;
                            _3643 = _3937 + _3656;
                            _3644 = _3938 + _3657;
                            _3645 = _3939 + _3658;
                            if (_3663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3663;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3647;
                        frontier_phi_84_pred_1 = _3646;
                        frontier_phi_84_pred_2 = _3645;
                        frontier_phi_84_pred_3 = _3644;
                        frontier_phi_84_pred_4 = _3643;
                        frontier_phi_84_pred_5 = _3648;
                    }
                    _3285 = frontier_phi_84_pred;
                    _3283 = frontier_phi_84_pred_1;
                    _3281 = frontier_phi_84_pred_2;
                    _3279 = frontier_phi_84_pred_3;
                    _3277 = frontier_phi_84_pred_4;
                    _3287 = frontier_phi_84_pred_5;
                    uint _3443 = _3442 + 1u;
                    if (_3443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3436 = _3277;
                        _3437 = _3279;
                        _3438 = _3281;
                        _3439 = _3283;
                        _3440 = _3285;
                        _3441 = _3287;
                        _3442 = _3443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3287;
                frontier_phi_65_66_ladder_1 = _3283;
                frontier_phi_65_66_ladder_2 = _3285;
                frontier_phi_65_66_ladder_3 = _3279;
                frontier_phi_65_66_ladder_4 = _3277;
                frontier_phi_65_66_ladder_5 = _3281;
            }
            else
            {
                frontier_phi_65_66_ladder = _3166;
                frontier_phi_65_66_ladder_1 = _3162;
                frontier_phi_65_66_ladder_2 = _3164;
                frontier_phi_65_66_ladder_3 = _3158;
                frontier_phi_65_66_ladder_4 = _3156;
                frontier_phi_65_66_ladder_5 = _3160;
            }
            _3276 = frontier_phi_65_66_ladder_4;
            _3278 = frontier_phi_65_66_ladder_3;
            _3280 = frontier_phi_65_66_ladder_5;
            _3282 = frontier_phi_65_66_ladder_1;
            _3284 = frontier_phi_65_66_ladder_2;
            _3286 = frontier_phi_65_66_ladder;
        }
        float _3291 = isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0));
        _3087 = (_3291 * _3282) + _2600;
        _3089 = (_3291 * _3284) + _2602;
        _3091 = (_3291 * _3286) + _2604;
        _3093 = ((_3276 * _1011) * _3291) + _2938;
        _3095 = ((_3278 * _1013) * _3291) + _2940;
        _3097 = ((_3280 * _1014) * _3291) + _2942;
    }
    else
    {
        _3087 = _2600;
        _3089 = _2602;
        _3091 = _2604;
        _3093 = _2938;
        _3095 = _2940;
        _3097 = _2942;
    }
    float _5230 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _5241 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _5252 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _5263 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _3115 = ((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3087 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1026))) + ((_3093 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _3116 = ((isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3089 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1026))) + ((_3095 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _3117 = ((isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0))) * (_3091 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1026))) + ((_3097 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _3122 = cbInstanceData._m0[_986 + 6u].w * (isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0)));
    float _3127 = _948 / cbSceneParam._m0[86u].x;
    float _3128 = _949 / cbSceneParam._m0[86u].y;
    vec4 _3142 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, (log2((isnan(cbSceneParam._m0[77u].w) ? _871 : (isnan(_871) ? cbSceneParam._m0[77u].w : min(_871, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3144 = _3142.x;
    float _3145 = _3142.y;
    float _3146 = _3142.z;
    float _3147 = _3142.w;
    float _3218;
    float _3220;
    float _3222;
    float _3224;
    if (_871 > cbSceneParam._m0[78u].w)
    {
        float _3181 = isnan(_871) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _871 : min(cbSceneParam._m0[80u].w, _871));
        float _3182 = _3181 / _871;
        float _3193 = _3182 * _921;
        float _3194 = _922 * _3182;
        float _3195 = (-0.0) - _3194;
        float _3196 = _3182 * _923;
        float _3198 = (cbSceneParam._m0[77u].w * _3195) / _3181;
        float _3199 = _3198 + cbSceneParam._m0[79u].w;
        float _3200 = cbSceneParam._m0[79u].w - _3194;
        float _3206 = sqrt(((_3193 * _3193) + (_3194 * _3194)) + (_3196 * _3196));
        float _3209 = (1.0 - (cbSceneParam._m0[77u].w / _3181)) * _3206;
        float _3214 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3216 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3393;
        if (abs((_3195 - _3198) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3393 = ((((_3199 > 0.0) ? exp2(_3214 * _3199) : (2.0 - exp2(_3216 * _3199))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3209;
        }
        else
        {
            float _3337 = 1.0 / cbSceneParam._m0[80u].x;
            float _3338 = isnan(_3200) ? _3199 : (isnan(_3199) ? _3200 : max(_3199, _3200));
            float _3339 = isnan(_3200) ? _3199 : (isnan(_3199) ? _3200 : min(_3199, _3200));
            float _3348 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : min(_3338, 0.0));
            float _3349 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : min(_3339, 0.0));
            _3393 = ((abs(_3206 / _3195) * cbSceneParam._m0[80u].y) * ((((_3348 - _3349) * 2.0) - ((exp2(_3214 * (isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0)))) - exp2(_3214 * (isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))))) * _3337)) - ((exp2(_3216 * _3348) - exp2(_3216 * _3349)) * _3337))) + (_3209 * cbSceneParam._m0[80u].z);
        }
        vec4 _3395 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, 1.0), 0.0);
        float _3404 = exp2((_3393 * (-1.44269502162933349609375)) * (1.0 - _3395.w));
        float _3405 = log2(_3404);
        float _3421 = log2(_3147);
        _3218 = (exp2(_3421 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3405 * cbSceneParam._m0[78u].x)) * _3395.x) / cbSceneParam._m0[78u].x)) + _3144;
        _3220 = (exp2(_3421 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3405 * cbSceneParam._m0[78u].y)) * _3395.y) / cbSceneParam._m0[78u].y)) + _3145;
        _3222 = (exp2(_3421 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3405 * cbSceneParam._m0[78u].z)) * _3395.z) / cbSceneParam._m0[78u].z)) + _3146;
        _3224 = _3404 * _3147;
    }
    else
    {
        _3218 = _3144;
        _3220 = _3145;
        _3222 = _3146;
        _3224 = _3147;
    }
    bool _3431;
    vec4 _3234;
    vec4 _3256;
    float _3258;
    float _3262;
    float _3263;
    float _3264;
    float _3265;
    bool _3275;
    for (;;)
    {
        _3234 = cbMatDynParam._m0[0u];
        float _3236 = roundEven(_3234.y);
        bool _3237 = _3236 == 3.0;
        float _3238 = log2(_3224);
        float _3245 = exp2(_3238 * cbSceneParam._m0[78u].x) * _3115;
        float _3246 = exp2(_3238 * cbSceneParam._m0[78u].y) * _3116;
        float _3247 = exp2(_3238 * cbSceneParam._m0[78u].z) * _3117;
        float _3254 = _937 + (-0.5);
        _3256 = cbMtdParam._m0[1u];
        _3258 = _3256.y * _3254;
        float _3261 = (_3236 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3262 = _3261 * (_3237 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3218)));
        _3263 = _3261 * (_3237 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3220)));
        _3264 = _3261 * (_3237 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3222)));
        _3265 = _3254 * 0.999000012874603271484375;
        _3275 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3275)
        {
            if ((cbInstanceData._m0[_986 + 7u].x + _3265) < 0.5)
            {
                _3431 = true;
                break;
            }
        }
        uint _3372 = _987 + uint(_3234.w);
        if ((cbInstanceData._m0[_3372].w < 1.0) && ((cbInstanceData._m0[_3372].w + _3265) < 0.5))
        {
            _3431 = true;
            break;
        }
        if ((_3258 + _490) < _3256.x)
        {
            _3431 = true;
            break;
        }
        _3431 = false;
        break;
    }
    float _3634;
    if (_3431)
    {
        discard_state = true;
        _3634 = 0.0;
    }
    else
    {
        _3634 = _3122;
    }
    SV_Target.x = _3262;
    SV_Target.y = _3263;
    SV_Target.z = _3264;
    SV_Target.w = _3634;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3122;
    discard_exit();
}


