#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1425;
float _3808;
float _3809;
float _3810;
float _3811;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _237 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _238 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _239 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _243 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _244 = _243 * _237;
    float _245 = _243 * _238;
    float _246 = _243 * _239;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _264 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _265 = _264 * TANGENT_2.x;
    float _266 = _264 * TANGENT_2.y;
    float _267 = _264 * TANGENT_2.z;
    float _272;
    float _273;
    float _274;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _272 = (-0.0) - _251;
        _273 = (-0.0) - _252;
        _274 = (-0.0) - _253;
    }
    else
    {
        _272 = _251;
        _273 = _252;
        _274 = _253;
    }
    vec4 _319 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _331 = 1.0 - ((1.0 - _319.x) * 1.39999997615814208984375);
    float _3820 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _339 = (_332 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[16u].x)) + cbMtdParam._m0[16u].x;
    float _340 = (_332 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[16u].y)) + cbMtdParam._m0[16u].y;
    float _341 = (_332 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z;
    float _343 = 1.0 - ((1.0 - _319.y) * 1.39999997615814208984375);
    float _3831 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _351 = (_344 * (cbMtdParam._m0[14u].x - _339)) + _339;
    float _352 = (_344 * (cbMtdParam._m0[14u].y - _340)) + _340;
    float _353 = (_344 * (cbMtdParam._m0[14u].z - _341)) + _341;
    float _355 = 1.0 - ((1.0 - _319.z) * 1.39999997615814208984375);
    float _3842 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    vec4 _381 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _383 = _381.x;
    float _384 = _383 * cbMtdParam._m0[20u].x;
    float _398 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _384) + (cbMtdParam._m0[17u].z * TEXCOORD_5.w))) + 1.0;
    float _3853 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _400 = 1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)));
    float _401 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _402 = isnan(1.0) ? _401 : (isnan(_401) ? 1.0 : min(_401, 1.0));
    float _410 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _384) + (cbMtdParam._m0[17u].y * TEXCOORD_5.z))) + 1.0;
    float _3874 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = 1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)));
    float _413 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    vec4 _432 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _437 = cbMtdParam._m0[12u].x * _414;
    float _439 = cbMtdParam._m0[12u].y * _414;
    float _441 = cbMtdParam._m0[12u].z * _414;
    float _461 = _412 + _400;
    float _462 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
    vec4 _481 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _486 = _481.w;
    float _487 = _481.x * cbMtdParam._m0[10u].x;
    float _488 = _481.y * cbMtdParam._m0[10u].y;
    float _489 = _481.z * cbMtdParam._m0[10u].z;
    float _509 = ((_487 - (_463 * _487)) + ((((((_434 * (cbMtdParam._m0[11u].x - _437)) * _402) + (_437 * _434)) * 4.55000019073486328125) * _463) * _487)) * ((_356 * (cbMtdParam._m0[15u].x - _351)) + _351);
    float _510 = ((((((((_435 * (cbMtdParam._m0[11u].y - _439)) * _402) + (_439 * _435)) * 4.55000019073486328125) * _463) * _488) + _488) - (_463 * _488)) * ((_356 * (cbMtdParam._m0[15u].y - _352)) + _352);
    float _511 = ((((((((_436 * (cbMtdParam._m0[11u].z - _441)) * _402) + (_441 * _436)) * 4.55000019073486328125) * _463) * _489) + _489) - (_463 * _489)) * ((_356 * (cbMtdParam._m0[15u].z - _353)) + _353);
    float _520 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[19u].y) + 1.0;
    float _3905 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _532 = ((((_383 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[19u].z) + 1.0;
    float _3916 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    vec4 _548 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _554 = (_548.x * 2.0) + (-1.0);
    float _555 = (_548.y * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3927 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    float _564 = fma(_561, _272, fma(_555, _258, _554 * _225));
    float _567 = fma(_561, _273, fma(_555, _259, _554 * _226));
    float _570 = fma(_561, _274, fma(_555, _260, _554 * _227));
    float _579 = exp2(log2(inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570))) * _567) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w;
    float _3938 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) + (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * (1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))));
    float _3949 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _585 = 3.0 - (_583 * 2.0);
    float _590 = _583 * _583;
    float _597 = ((_590 * (cbMtdParam._m0[13u].x - _509)) * _585) + _509;
    float _598 = ((_590 * (cbMtdParam._m0[13u].y - _510)) * _585) + _510;
    float _599 = ((_590 * (cbMtdParam._m0[13u].z - _511)) * _585) + _511;
    vec4 _613 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _617 = _613.z;
    float _620 = (_613.x * 2.0) + (-1.0);
    float _621 = (_613.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_620, _621), vec2(_620, _621));
    float _3960 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    float _630 = fma(_627, _272, fma(_621, _265, _620 * _244));
    float _633 = fma(_627, _273, fma(_621, _266, _620 * _245));
    float _636 = fma(_627, _274, fma(_621, _267, _620 * _246));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    float _641 = _640 * _630;
    float _642 = _640 * _633;
    float _643 = _640 * _636;
    vec4 _656 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _663 = (_656.x * 2.0) + (-1.0);
    float _664 = (_656.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3971 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _673 = ((_656.z - _617) * _582) + _617;
    vec4 _685 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _691 = (_685.x * 2.0) + (-1.0);
    float _692 = (_685.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3982 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))));
    float _701 = fma(_698, _272, fma(_692, _265, _691 * _244));
    float _704 = fma(_698, _273, fma(_692, _266, _691 * _245));
    float _707 = fma(_698, _274, fma(_692, _267, _691 * _246));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _717 = fma(_714, _227, fma(_713, _226, _712 * _225));
    float _720 = fma(_714, _260, fma(_713, _259, _712 * _258));
    float _723 = fma(_714, _274, fma(_713, _273, _712 * _272));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    float _731 = fma(_643, _227, fma(_642, _226, _641 * _225));
    float _734 = fma(_643, _260, fma(_642, _259, _641 * _258));
    float _737 = fma(_643, _274, fma(_642, _273, _641 * _272));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    vec4 _759 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _765 = (_759.x * 2.0) + (-1.0);
    float _766 = (_759.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3993 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    float _775 = fma(_772, _272, fma(_766, _265, _765 * _244));
    float _778 = fma(_772, _273, fma(_766, _266, _765 * _245));
    float _781 = fma(_772, _274, fma(_766, _267, _765 * _246));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _791 = fma(_788, _227, fma(_787, _226, _786 * _225));
    float _794 = fma(_788, _260, fma(_787, _259, _786 * _258));
    float _797 = fma(_788, _274, fma(_787, _273, _786 * _272));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _817 = (((((_717 * _402) * _727) * cbMtdParam._m0[18u].y) + _554) + ((_741 * _731) * cbMtdParam._m0[19u].w)) + (((_791 * _414) * _801) * cbMtdParam._m0[19u].x);
    float _820 = (((((_720 * _402) * _727) * cbMtdParam._m0[18u].y) + _555) + ((_741 * _734) * cbMtdParam._m0[19u].w)) + (((_794 * _414) * _801) * cbMtdParam._m0[19u].x);
    float _827 = ((_663 - _817) * _582) + _817;
    float _828 = (_582 * (_664 - _820)) + _820;
    float _829 = (_582 * (sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) - _561)) + _561;
    float _832 = fma(_829, _272, fma(_828, _258, _827 * _225));
    float _835 = fma(_829, _273, fma(_828, _259, _827 * _226));
    float _838 = fma(_829, _274, fma(_828, _260, _827 * _227));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _4004 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _846 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _847 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4037 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4048 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4059 = isnan(0.0) ? cbMtdParam._m0[20u].y : (isnan(cbMtdParam._m0[20u].y) ? 0.0 : max(cbMtdParam._m0[20u].y, 0.0));
    float _851 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    vec4 _931 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _933 = _931.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1104 = sqrt(((_917 * _917) + (_918 * _918)) + (_919 * _919));
        float _1110 = (cbMatDynParam._m0[5u].x * _1104) + cbMatDynParam._m0[5u].y;
        float _4070 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1115 = (cbMatDynParam._m0[5u].z * _1104) + cbMatDynParam._m0[5u].w;
        float _4081 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) - _1111)) + _1111) < ((_933 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _966 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _969 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _982 = uint(roundEven(NORMAL.w)) * 13u;
    uint _983 = _982 + 9u;
    uint _984 = _983 + uint(cbMatDynParam._m0[0u].w);
    float _990 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_984].x;
    float _991 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_984].y;
    float _992 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_984].z;
    float _4092 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _996 = 1.0 - _851;
    float _997 = _993 * _996;
    float _998 = _994 * _996;
    float _999 = _995 * _996;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _851;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _851;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _851;
    float _1007 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    vec4 _1019 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1022 = _1019.x * TEXCOORD_4;
    float _1023 = dot(vec3(_843, _844, _845), vec3(_924, _925, _926));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _843) - _924;
    float _1031 = (_1026 * _844) - _925;
    float _1032 = (_1026 * _845) - _926;
    float _1036 = abs(dot(vec3(_924, _925, _926), vec3(_843, _844, _845)));
    float _4125 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_847);
    float _1050 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1056 = (1.0 - _1050) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1057 = _1050 * _1038;
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1424;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1149 = fma(_1093, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085));
        float _1153 = fma(_1093, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085));
        float _1157 = fma(_1093, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085));
        float _1182 = _1085 + _843;
        float _1183 = _1089 + _844;
        float _1184 = _1093 + _845;
        float _1194 = fma(_1184, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182)) - _1149;
        float _1195 = fma(_1184, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182)) - _1153;
        float _1196 = fma(_1184, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182)) - _1157;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1149 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1153 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[34u].z) + ((((((_1157 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1252 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1218.x + (-0.5));
        float _1254 = _1252 * (_1218.y + (-0.5));
        float _1255 = _1252 * (_1218.z + (-0.5));
        float _1262 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1225.x + (-0.5));
        float _1264 = _1262 * (_1225.y + (-0.5));
        float _1265 = _1262 * (_1225.z + (-0.5));
        float _1272 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1232.x + (-0.5));
        float _1274 = _1272 * (_1232.y + (-0.5));
        float _1275 = _1272 * (_1232.z + (-0.5));
        float _1282 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1239.x + (-0.5));
        float _1284 = _1282 * (_1239.y + (-0.5));
        float _1285 = _1282 * (_1239.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1306 = (dot(vec3(_843, _844, _845), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1316 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4173 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1318 + 1.0))) + _1323) * _1286;
        float _1333 = _1254 * 0.5;
        float _1334 = _1264 * 0.5;
        float _1335 = _1274 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_843, _844, _845), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4206 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1360 + 1.0))) + _1365) * _1287;
        float _1375 = _1255 * 0.5;
        float _1376 = _1265 * 0.5;
        float _1377 = _1275 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_843, _844, _845), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4239 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1402 + 1.0))) + _1407) * _1288;
        _1424 = _1255;
        _1426 = _1254;
        _1427 = _1253;
        _1428 = _1265;
        _1429 = _1264;
        _1430 = _1263;
        _1431 = _1275;
        _1432 = _1274;
        _1433 = _1273;
        _1434 = _1288;
        _1435 = _1287;
        _1436 = _1286;
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1425;
        _1426 = _1425;
        _1427 = _1425;
        _1428 = _1425;
        _1429 = _1425;
        _1430 = _1425;
        _1431 = _1425;
        _1432 = _1425;
        _1433 = _1425;
        _1434 = _1425;
        _1435 = _1425;
        _1436 = _1425;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1468 = fma(_1093, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085));
        float _1472 = fma(_1093, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085));
        float _1476 = fma(_1093, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085));
        float _1499 = _1085 + _843;
        float _1500 = _1089 + _844;
        float _1501 = _1093 + _845;
        float _1511 = fma(_1501, cbModelParam._m0[30u].z, fma(_1500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1499)) - _1468;
        float _1512 = fma(_1501, cbModelParam._m0[31u].z, fma(_1500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1499)) - _1472;
        float _1513 = fma(_1501, cbModelParam._m0[32u].z, fma(_1500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1499)) - _1476;
        float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
        float _1530 = ((_1517 * _1511) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1468 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1517 * _1512) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1472 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1517 * _1513) / cbModelParam._m0[35u].z) + ((((((_1476 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        float _1567 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1534.x + (-0.5));
        float _1569 = _1567 * (_1534.y + (-0.5));
        float _1570 = _1567 * (_1534.z + (-0.5));
        float _1577 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1541.x + (-0.5));
        float _1579 = _1577 * (_1541.y + (-0.5));
        float _1580 = _1577 * (_1541.z + (-0.5));
        float _1587 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1548.x + (-0.5));
        float _1589 = _1587 * (_1548.y + (-0.5));
        float _1590 = _1587 * (_1548.z + (-0.5));
        float _1597 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1555.x + (-0.5));
        float _1599 = _1597 * (_1555.y + (-0.5));
        float _1600 = _1597 * (_1555.z + (-0.5));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = _1568 * 0.5;
        float _1605 = _1578 * 0.5;
        float _1606 = _1588 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_843, _844, _845), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4302 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1631 + 1.0))) + _1636) * _1601;
        float _1646 = _1569 * 0.5;
        float _1647 = _1579 * 0.5;
        float _1648 = _1589 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_843, _844, _845), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4335 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1673 + 1.0))) + _1678) * _1602;
        float _1688 = _1570 * 0.5;
        float _1689 = _1580 * 0.5;
        float _1690 = _1590 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_843, _844, _845), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4368 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1715 + 1.0))) + _1720) * _1603;
        _1737 = _1570;
        _1738 = _1569;
        _1739 = _1568;
        _1740 = _1580;
        _1741 = _1579;
        _1742 = _1578;
        _1743 = _1590;
        _1744 = _1589;
        _1745 = _1588;
        _1746 = _1603;
        _1747 = _1602;
        _1748 = _1601;
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
    }
    else
    {
        _1737 = _1425;
        _1738 = _1425;
        _1739 = _1425;
        _1740 = _1425;
        _1741 = _1425;
        _1742 = _1425;
        _1743 = _1425;
        _1744 = _1425;
        _1745 = _1425;
        _1746 = _1425;
        _1747 = _1425;
        _1748 = _1425;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1437)) + _1437;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1438)) + _1438;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1439)) + _1439;
    float _1784 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1761));
    float _1805 = _1030 * 0.5;
    float _1806 = _1031 * 0.5;
    float _1807 = _1032 * 0.5;
    float _1808 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1811 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1814 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1821 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1424, _1428, _1431, _1434));
        float _1825 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1829 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1836 = dot(vec4(cbModelParam._m0[39u]), vec4(_1805, _1806, _1807, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1805, _1806, _1807, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _847);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1921 = fma(_1093, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085)) + cbModelParam._m0[13u].w;
        float _1925 = fma(_1093, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085)) + cbModelParam._m0[14u].w;
        float _1929 = fma(_1093, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085)) + cbModelParam._m0[15u].w;
        float _1932 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1935 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1938 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1966;
        if (_1932 > 0.0)
        {
            _1966 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1966 = frontier_phi_19_17_ladder;
        }
        float _2169;
        if (_1935 > 0.0)
        {
            _2169 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2169 = frontier_phi_28_24_ladder;
        }
        float _2423;
        if (_1938 > 0.0)
        {
            _2423 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2423 = frontier_phi_40_35_ladder;
        }
        float _2425 = isnan(_2169) ? _1966 : (isnan(_1966) ? _2169 : min(_1966, _2169));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1932) + _1921;
        float _2431 = (_2426 * _1935) + _1925;
        float _2432 = (_2426 * _1938) + _1929;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2433;
        float _2437 = _2433 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 > _2437) || ((_2431 < _2435) || ((_2430 < _2435) || (_2430 > _2437))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2432, cbModelParam._m0[9u].z, fma(_2431, cbModelParam._m0[9u].y, _2430 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2432, cbModelParam._m0[10u].z, fma(_2431, cbModelParam._m0[10u].y, _2430 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2432, cbModelParam._m0[11u].z, fma(_2431, cbModelParam._m0[11u].y, _2430 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_18_40_ladder = _2560.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2560.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2560.x * cbModelParam._m0[1u].y;
        }
        _1954 = frontier_phi_18_40_ladder_2;
        _1956 = frontier_phi_18_40_ladder_1;
        _1958 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1874);
        _1954 = _1942.x * cbModelParam._m0[1u].y;
        _1956 = _1942.y * cbModelParam._m0[1u].y;
        _1958 = _1942.z * cbModelParam._m0[1u].y;
    }
    float _1962 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _847);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1962 : min(cbModelParam._m0[25u].w, _1962));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1093, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1093, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1093, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _2031 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _2034 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2174;
        if (_2028 > 0.0)
        {
            _2174 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2174 = frontier_phi_30_26_ladder;
        }
        float _2450;
        if (_2031 > 0.0)
        {
            _2450 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2450 = frontier_phi_42_37_ladder;
        }
        float _2663;
        if (_2034 > 0.0)
        {
            _2663 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2663 = frontier_phi_51_48_ladder;
        }
        float _2665 = isnan(_2450) ? _2174 : (isnan(_2174) ? _2450 : min(_2174, _2450));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _2028) + _2017;
        float _2671 = (_2666 * _2031) + _2021;
        float _2672 = (_2666 * _2034) + _2025;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1963);
            frontier_phi_27_51_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_27_51_ladder_2;
        _2055 = frontier_phi_27_51_ladder_1;
        _2057 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1963);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2070 = (((_1056 * _1007) + _1057) * _1022) * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2072 = (((_1056 * _1009) + _1057) * _1022) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1056 * _1010) + _1057) * _1022) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2072, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2072, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2072, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    uvec4 _2093 = floatBitsToUint(cbInstanceData._m0[_982 + 5u]);
    uint _2095 = _2093.x * 14u;
    uint _2096 = _2095 + 13u;
    float _2103 = _1022 + (-1.0);
    float _2108 = (cbLight._m0[_2096].x * _2103) + 1.0;
    float _2109 = (cbLight._m0[_2096].y * _2103) + 1.0;
    float _2110 = (cbLight._m0[_2096].z * _2103) + 1.0;
    float _2111 = (cbLight._m0[_2096].w * _2103) + 1.0;
    uint _2112 = _2095 + 5u;
    float _2118 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2122 = _2095 + 4u;
    float _2128 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2132 = _2095 | 1u;
    float _2143 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_843, _844, _845));
    float _2146 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_843, _844, _845));
    float _4504 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _4515 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2151 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2153 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2160 = ((cbLight._m0[_2112].x * _2118) * _2153) + ((cbLight._m0[_2122].x * _2128) * _2151);
    float _2161 = ((_2118 * cbLight._m0[_2112].y) * _2153) + ((_2128 * cbLight._m0[_2122].y) * _2151);
    float _2162 = ((_2118 * cbLight._m0[_2112].z) * _2153) + ((_2128 * cbLight._m0[_2122].z) * _2151);
    uvec4 _2166 = floatBitsToUint(cbLight._m0[_2095 + 12u]);
    bool _2168 = _2166.x == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2168)
    {
        _2179 = _2160;
        _2181 = _2161;
        _2183 = _2162;
    }
    else
    {
        uint _2187 = _2095 + 6u;
        float _2203 = (dot(vec3(cbLight._m0[_2095 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2204 = _2203 * _2203;
        float _4526 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2205 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2206 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2179 = (((cbLight._m0[_2187].x * 0.3183098733425140380859375) * _2205) * _2206) + _2160;
        _2181 = (((cbLight._m0[_2187].y * 0.3183098733425140380859375) * _2205) * _2206) + _2161;
        _2183 = (((cbLight._m0[_2187].z * 0.3183098733425140380859375) * _2205) * _2206) + _2162;
    }
    bool _2186 = _2166.y == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2186)
    {
        _2224 = _2179;
        _2226 = _2181;
        _2228 = _2183;
    }
    else
    {
        uint _2394 = _2095 + 7u;
        float _2410 = (dot(vec3(cbLight._m0[_2095 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2411 = _2410 * _2410;
        float _4542 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2412 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2413 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2224 = (((cbLight._m0[_2394].x * 0.3183098733425140380859375) * _2412) * _2413) + _2179;
        _2226 = (((cbLight._m0[_2394].y * 0.3183098733425140380859375) * _2412) * _2413) + _2181;
        _2228 = (((cbLight._m0[_2394].z * 0.3183098733425140380859375) * _2412) * _2413) + _2183;
    }
    uint _2231 = _2095 + 8u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _847) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2095].x + _924;
    float _2247 = cbLight._m0[_2095].y + _925;
    float _2248 = cbLight._m0[_2095].z + _926;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2095].xyz));
    float _4558 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2260 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2261 = dot(vec3(_843, _844, _845), vec3(_2253, _2254, _2255));
    float _4580 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2253, _2254, _2255));
    float _4591 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2245 * _2245;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2282 = 0.959999978542327880859375 - _1004;
    float _2284 = 0.959999978542327880859375 - _1005;
    float _2285 = 0.959999978542327880859375 - _1006;
    float _2292 = 1.0 - _2245;
    float _2303 = (0.5 / (((_2260 * ((_2259 * _2292) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2292) + _2245) * _2259))) * _2259;
    float _4602 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    uint _2316 = _2095 + 9u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _847) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2132].x + _924;
    float _2330 = cbLight._m0[_2132].y + _925;
    float _2331 = cbLight._m0[_2132].z + _926;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2132].xyz));
    float _4613 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2343 = dot(vec3(_843, _844, _845), vec3(_2336, _2337, _2338));
    float _4624 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2336, _2337, _2338));
    float _4635 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2328 * _2328;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2369 = 1.0 - _2328;
    float _2379 = (0.5 / (((_2260 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2369) + _2328) * _2342))) * _2342;
    float _4646 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    float _2391 = (((((_2362 * _2282) + _1007) * cbLight._m0[_2316].x) * _2381) * _2118) + (((((_2281 * _2282) + _1007) * cbLight._m0[_2231].x) * _2305) * _2128);
    float _2392 = (((((_2362 * _2284) + _1009) * cbLight._m0[_2316].y) * _2381) * _2118) + (((((_2281 * _2284) + _1009) * cbLight._m0[_2231].y) * _2305) * _2128);
    float _2393 = (((((_2362 * _2285) + _1010) * cbLight._m0[_2316].z) * _2381) * _2118) + (((((_2281 * _2285) + _1010) * cbLight._m0[_2231].z) * _2305) * _2128);
    float _2455;
    float _2457;
    float _2459;
    if (_2168)
    {
        _2455 = _2391;
        _2457 = _2392;
        _2459 = _2393;
    }
    else
    {
        uint _2461 = _2095 + 2u;
        uint _2465 = _2095 + 10u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _847) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _924;
        float _2482 = cbLight._m0[_2461].y + _925;
        float _2483 = cbLight._m0[_2461].z + _926;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2461].xyz));
        float _4657 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2495 = dot(vec3(_843, _844, _845), vec3(_2488, _2489, _2490));
        float _4668 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4679 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2260 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2521) + _2480) * _2494))) * _2494;
        float _4690 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2455 = (((((_2514 * _2282) + _1007) * cbLight._m0[_2465].x) * _2533) * _2534) + _2391;
        _2457 = (((((_2514 * _2284) + _1009) * cbLight._m0[_2465].y) * _2533) * _2534) + _2392;
        _2459 = (((((_2514 * _2285) + _1010) * cbLight._m0[_2465].z) * _2533) * _2534) + _2393;
    }
    float _2569;
    float _2571;
    float _2573;
    if (_2186)
    {
        _2569 = _2455;
        _2571 = _2457;
        _2573 = _2459;
    }
    else
    {
        uint _2580 = _2095 + 3u;
        uint _2584 = _2095 + 11u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _847) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _924;
        float _2601 = cbLight._m0[_2580].y + _925;
        float _2602 = cbLight._m0[_2580].z + _926;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2580].xyz));
        float _4706 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2614 = dot(vec3(_843, _844, _845), vec3(_2607, _2608, _2609));
        float _4717 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4728 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
        float _2640 = 1.0 - _2599;
        float _2650 = (0.5 / (((_2260 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2640) + _2599) * _2613))) * _2613;
        float _4739 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2569 = (((((_2633 * _2282) + _1007) * cbLight._m0[_2584].x) * _2652) * _2653) + _2455;
        _2571 = (((((_2633 * _2284) + _1009) * cbLight._m0[_2584].y) * _2652) * _2653) + _2457;
        _2573 = (((((_2633 * _2285) + _1010) * cbLight._m0[_2584].z) * _2652) * _2653) + _2459;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2093.y == 0u)
    {
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2728;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2728;
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2728;
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.x;
        uint _2755 = uint((float(_2743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2744))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2744)));
        float _2765 = (log2(_2731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2766 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        uint _2769 = uint(isnan(14.0) ? _2766 : (isnan(_2766) ? 14.0 : min(_2766, 14.0)));
        uvec4 _2774 = texelFetch(g_lightClusterGridBuffer, int(((_2769 << 2u) + (_2755 << 6u)) >> 2u));
        uint _2775 = _2774.x;
        uint _2776 = _2743.z;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((((1u << ((_2776 >> 4u) & 15u)) + 4294967295u) & _2775) == 0u) || ((_2776 & 240u) == 0u))
        {
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
        }
        else
        {
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            uint _3035 = 0u;
            uint _3044;
            bool _3045;
            for (;;)
            {
                _3044 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                _3045 = _3044 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3045)
                {
                    frontier_phi_68_pred = _3031;
                    frontier_phi_68_pred_1 = _3034;
                    frontier_phi_68_pred_2 = _3033;
                    frontier_phi_68_pred_3 = _3032;
                    frontier_phi_68_pred_4 = _3030;
                    frontier_phi_68_pred_5 = _3029;
                }
                else
                {
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    uint _3180;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3044;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3184 = uint(findLSB(_3180)) + (_3035 << 5u);
                        uint _3181 = (_3180 + 4294967295u) & _3180;
                        uint _3186 = _3184 * 48u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3206 = (_3184 * 48u) + 4u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3225 = (_3184 * 48u) + 8u;
                        vec3 _3236 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x));
                        float _3240 = _3200.x - _2729;
                        float _3241 = _3200.y - _2730;
                        float _3242 = _3200.z - _2731;
                        float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                        float _3246 = inversesqrt(_3243);
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3250 = dot(vec3(_963, _966, _969), vec3(_3247, _3248, _3249));
                        float _3255 = 1.0 - (_3243 * _3200.w);
                        float _4765 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3257 = sqrt(_3243) * _3219.w;
                        float _3259 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3250) + _3260;
                        float _3266 = _3257 * _3257;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3256) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _2729;
                        float _3275 = (-0.0) - _2730;
                        float _3276 = (-0.0) - _2731;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3291 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _1038;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3281 + _3247;
                        float _3303 = _3282 + _3248;
                        float _3304 = _3283 + _3249;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_963, _966, _969), vec3(_3281, _3282, _3283));
                        float _4781 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3316 = dot(vec3(_963, _966, _969), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4792 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3259 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3250) + _3325;
                        float _4803 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4814 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3323 * _3323) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3256;
                        _3104 = (_3270 * _3219.x) + _3177;
                        _3105 = (_3270 * _3219.y) + _3178;
                        _3106 = (_3270 * _3219.z) + _3179;
                        _3101 = (_3351 * _3236.x) + _3174;
                        _3102 = (_3351 * _3236.y) + _3175;
                        _3103 = (_3351 * _3236.z) + _3176;
                        if (_3181 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3181;
                        }
                    }
                    frontier_phi_68_pred = _3103;
                    frontier_phi_68_pred_1 = _3106;
                    frontier_phi_68_pred_2 = _3105;
                    frontier_phi_68_pred_3 = _3104;
                    frontier_phi_68_pred_4 = _3102;
                    frontier_phi_68_pred_5 = _3101;
                }
                _2882 = frontier_phi_68_pred;
                _2888 = frontier_phi_68_pred_1;
                _2886 = frontier_phi_68_pred_2;
                _2884 = frontier_phi_68_pred_3;
                _2880 = frontier_phi_68_pred_4;
                _2878 = frontier_phi_68_pred_5;
                uint _3036 = _3035 + 1u;
                if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _2888;
                    _3035 = _3036;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
        }
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.z;
        uint _2894 = (_2892 >> 8u) & 15u;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((4294967295u << _2894) & _2775) == 0u)
        {
            _2997 = _2877;
            _2999 = _2879;
            _3001 = _2881;
            _3003 = _2883;
            _3005 = _2885;
            _3007 = _2887;
        }
        else
        {
            float _3022 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
            float _3023 = _3022 * _2729;
            float _3024 = _3022 * _2730;
            float _3025 = _3022 * _2731;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2894 < ((_2892 >> 12u) & 15u))
            {
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3157 = _2877;
                float _3158 = _2879;
                float _3159 = _2881;
                float _3160 = _2883;
                float _3161 = _2885;
                float _3162 = _2887;
                uint _3163 = _2894;
                uint _3172;
                bool _3173;
                for (;;)
                {
                    _3172 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                    _3173 = _3172 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3173)
                    {
                        frontier_phi_79_pred = _3162;
                        frontier_phi_79_pred_1 = _3161;
                        frontier_phi_79_pred_2 = _3160;
                        frontier_phi_79_pred_3 = _3159;
                        frontier_phi_79_pred_4 = _3158;
                        frontier_phi_79_pred_5 = _3157;
                    }
                    else
                    {
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        float _3380 = _3159;
                        float _3381 = _3160;
                        float _3382 = _3161;
                        float _3383 = _3162;
                        uint _3384 = _3172;
                        uint _3385;
                        vec4 _3410;
                        float _3411;
                        vec4 _3426;
                        vec3 _3438;
                        vec4 _3453;
                        vec4 _3468;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3395 = ((_3163 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3384));
                            _3385 = (_3384 + 4294967295u) & _3384;
                            uint _3397 = _3395 * 40u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3411 = _3410.w;
                            uint _3413 = (_3395 * 40u) + 4u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3395 * 40u) + 8u;
                            _3438 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x));
                            uint _3440 = (_3395 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3395 * 40u) + 20u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3471 = (_3395 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3395 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_2731, _3503.z, fma(_2730, _3503.y, _3503.x * _2729)) + _3503.w;
                            _3516 = !((fma(_2731, _3484.z, fma(_2730, _3484.y, _3484.x * _2729)) + _3484.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3410.x - _2729;
                                float _3544 = _3410.y - _2730;
                                float _3545 = _3410.z - _2731;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3411 * _3411));
                                float _4825 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3561 = sqrt(_3546) * _3426.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_963, _966, _969))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_2731, _3453.z, fma(_2730, _3453.y, _3453.x * _2729)) + _3453.w) / _3515;
                                float _3575 = (fma(_2731, _3468.z, fma(_2730, _3468.y, _3468.x * _2729)) + _3468.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4841 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _1038;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3023;
                                float _3605 = _3551 - _3024;
                                float _3606 = _3552 - _3025;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3023, (-0.0) - _3024, (-0.0) - _3025));
                                float _4852 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3618 = dot(vec3(_963, _966, _969), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4863 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_963, _966, _969), vec3(_3550, _3551, _3552))) + _3627;
                                float _4874 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4885 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3581 * _3426.z;
                                frontier_phi_85_pred_1 = _3581 * _3426.y;
                                frontier_phi_85_pred_2 = _3581 * _3426.x;
                                frontier_phi_85_pred_3 = _3655 * _3438.z;
                                frontier_phi_85_pred_4 = _3655 * _3438.y;
                                frontier_phi_85_pred_5 = _3655 * _3438.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_85_pred;
                            _3663 = frontier_phi_85_pred_1;
                            _3662 = frontier_phi_85_pred_2;
                            _3661 = frontier_phi_85_pred_3;
                            _3660 = frontier_phi_85_pred_4;
                            _3659 = frontier_phi_85_pred_5;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            _3367 = _3661 + _3380;
                            if (_3385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3385;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3370;
                        frontier_phi_79_pred_1 = _3369;
                        frontier_phi_79_pred_2 = _3368;
                        frontier_phi_79_pred_3 = _3367;
                        frontier_phi_79_pred_4 = _3366;
                        frontier_phi_79_pred_5 = _3365;
                    }
                    _3008 = frontier_phi_79_pred;
                    _3006 = frontier_phi_79_pred_1;
                    _3004 = frontier_phi_79_pred_2;
                    _3002 = frontier_phi_79_pred_3;
                    _3000 = frontier_phi_79_pred_4;
                    _2998 = frontier_phi_79_pred_5;
                    uint _3164 = _3163 + 1u;
                    if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3157 = _2998;
                        _3158 = _3000;
                        _3159 = _3002;
                        _3160 = _3004;
                        _3161 = _3006;
                        _3162 = _3008;
                        _3163 = _3164;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3004;
                frontier_phi_60_61_ladder_1 = _3008;
                frontier_phi_60_61_ladder_2 = _3006;
                frontier_phi_60_61_ladder_3 = _3002;
                frontier_phi_60_61_ladder_4 = _3000;
                frontier_phi_60_61_ladder_5 = _2998;
            }
            else
            {
                frontier_phi_60_61_ladder = _2883;
                frontier_phi_60_61_ladder_1 = _2887;
                frontier_phi_60_61_ladder_2 = _2885;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2879;
                frontier_phi_60_61_ladder_5 = _2877;
            }
            _2997 = frontier_phi_60_61_ladder_5;
            _2999 = frontier_phi_60_61_ladder_4;
            _3001 = frontier_phi_60_61_ladder_3;
            _3003 = frontier_phi_60_61_ladder;
            _3005 = frontier_phi_60_61_ladder_2;
            _3007 = frontier_phi_60_61_ladder_1;
        }
        float _3012 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _2787 = (_3012 * _3003) + _2224;
        _2789 = (_3012 * _3005) + _2226;
        _2791 = (_3012 * _3007) + _2228;
        _2793 = ((_2997 * _1007) * _3012) + _2569;
        _2795 = ((_2999 * _1009) * _3012) + _2571;
        _2797 = ((_3001 * _1010) * _3012) + _2573;
    }
    else
    {
        _2787 = _2224;
        _2789 = _2226;
        _2791 = _2228;
        _2793 = _2569;
        _2795 = _2571;
        _2797 = _2573;
    }
    float _4901 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4912 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4923 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4934 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2815 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2787 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1022))) + ((_2793 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2789 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1022))) + ((_2795 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _2817 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2791 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1022))) + ((_2797 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _2822 = cbInstanceData._m0[_982 + 6u].w * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)));
    float _2827 = _944 / cbSceneParam._m0[86u].x;
    float _2828 = _945 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _2902 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _2903 = _2902 / _867;
        float _2914 = _2903 * _917;
        float _2915 = _918 * _2903;
        float _2916 = (-0.0) - _2915;
        float _2917 = _2903 * _919;
        float _2919 = (cbSceneParam._m0[77u].w * _2916) / _2902;
        float _2920 = _2919 + cbSceneParam._m0[79u].w;
        float _2921 = cbSceneParam._m0[79u].w - _2915;
        float _2927 = sqrt(((_2914 * _2914) + (_2915 * _2915)) + (_2917 * _2917));
        float _2930 = (1.0 - (cbSceneParam._m0[77u].w / _2902)) * _2927;
        float _2935 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2937 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2916 - _2919) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2920 > 0.0) ? exp2(_2935 * _2920) : (2.0 - exp2(_2937 * _2920))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2930;
        }
        else
        {
            float _3058 = 1.0 / cbSceneParam._m0[80u].x;
            float _3059 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : max(_2920, _2921));
            float _3060 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : min(_2920, _2921));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            _3114 = ((abs(_2927 / _2916) * cbSceneParam._m0[80u].y) * ((((_3069 - _3070) * 2.0) - ((exp2(_2935 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0)))) - exp2(_2935 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))))) * _3058)) - ((exp2(_2937 * _3069) - exp2(_2937 * _3070)) * _3058))) + (_2930 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2847);
        _2939 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2941 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2943 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2945 = _3125 * _2847;
    }
    else
    {
        _2939 = _2844;
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
    }
    bool _3152;
    vec4 _2955;
    vec4 _2977;
    float _2979;
    float _2983;
    float _2984;
    float _2985;
    float _2986;
    bool _2996;
    for (;;)
    {
        _2955 = cbMatDynParam._m0[0u];
        float _2957 = roundEven(_2955.y);
        bool _2958 = _2957 == 3.0;
        float _2959 = log2(_2945);
        float _2966 = exp2(_2959 * cbSceneParam._m0[78u].x) * _2815;
        float _2967 = exp2(_2959 * cbSceneParam._m0[78u].y) * _2816;
        float _2968 = exp2(_2959 * cbSceneParam._m0[78u].z) * _2817;
        float _2975 = _933 + (-0.5);
        _2977 = cbMtdParam._m0[1u];
        _2979 = _2977.y * _2975;
        float _2982 = (_2957 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2983 = _2982 * (_2958 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2939)));
        _2984 = _2982 * (_2958 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2941)));
        _2985 = _2982 * (_2958 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2943)));
        _2986 = _2975 * 0.999000012874603271484375;
        _2996 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2996)
        {
            if ((cbInstanceData._m0[_982 + 7u].x + _2986) < 0.5)
            {
                _3152 = true;
                break;
            }
        }
        uint _3093 = _983 + uint(_2955.w);
        if ((cbInstanceData._m0[_3093].w < 1.0) && ((cbInstanceData._m0[_3093].w + _2986) < 0.5))
        {
            _3152 = true;
            break;
        }
        if ((_2979 + _486) < _2977.x)
        {
            _3152 = true;
            break;
        }
        _3152 = false;
        break;
    }
    float _3356;
    if (_3152)
    {
        discard_state = true;
        _3356 = 0.0;
    }
    else
    {
        _3356 = _2822;
    }
    SV_Target.x = _2983;
    SV_Target.y = _2984;
    SV_Target.z = _2985;
    SV_Target.w = _3356;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2822;
    discard_exit();
}


