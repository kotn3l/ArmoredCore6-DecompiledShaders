#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _893;
float _3305;
float _3306;
float _3307;
float _3308;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _236 = _230.w;
    float _237 = _236 * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3317 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))));
    vec4 _283 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _293 = fma(_270, _214, fma(_263, _206 * TANGENT.x, (_192 * _184) * _261));
    float _296 = fma(_270, _215, fma(_263, _206 * TANGENT.y, (_192 * _185) * _261));
    float _299 = fma(_270, _216, fma(_263, _206 * TANGENT.z, (_192 * _186) * _261));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3328 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _307 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _308 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3361 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3372 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3383 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _312 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _572 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _578 = (cbMatDynParam._m0[5u].x * _572) + cbMatDynParam._m0[5u].y;
        float _3394 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _579 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _583 = (cbMatDynParam._m0[5u].z * _572) + cbMatDynParam._m0[5u].w;
        float _3405 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) - _579)) + _579) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _432 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _435 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3416 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _463 = 1.0 - _312;
    float _464 = _460 * _463;
    float _465 = _461 * _463;
    float _466 = _462 * _463;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _312;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _312;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _312;
    float _474 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _489 = _486.x * TEXCOORD_1.w;
    float _490 = dot(vec3(_304, _305, _306), vec3(_387, _388, _389));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _304) - _387;
    float _498 = (_493 * _305) - _388;
    float _499 = (_493 * _306) - _389;
    float _503 = abs(dot(vec3(_387, _388, _389), vec3(_304, _305, _306)));
    float _3449 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_308);
    float _518 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _524 = (1.0 - _518) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _525 = _518 * _505;
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _621 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _625 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _650 = _553 + _304;
        float _651 = _557 + _305;
        float _652 = _561 + _306;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_304, _305, _306), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3497 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_304, _305, _306), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3530 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_304, _305, _306), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3563 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _940 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _944 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _967 = _553 + _304;
        float _968 = _557 + _305;
        float _969 = _561 + _306;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_304, _305, _306), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3626 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_304, _305, _306), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3659 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_304, _305, _306), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3692 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = _893;
        _1215 = _893;
        _1216 = _893;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _497 * 0.5;
    float _1274 = _498 * 0.5;
    float _1275 = _499 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_892, _896, _899, _902));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_894, _897, _900, _903));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1405 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1408 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1436 = frontier_phi_19_17_ladder;
        }
        float _1644;
        if (_1405 > 0.0)
        {
            _1644 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1644 = frontier_phi_28_24_ladder;
        }
        float _1898;
        if (_1408 > 0.0)
        {
            _1898 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1898 = frontier_phi_40_35_ladder;
        }
        float _1900 = isnan(_1644) ? _1436 : (isnan(_1436) ? _1644 : min(_1436, _1644));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1402) + _1391;
        float _1906 = (_1901 * _1405) + _1395;
        float _1907 = (_1901 * _1408) + _1399;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_18_40_ladder = _2035.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2035.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_18_40_ladder_2;
        _1426 = frontier_phi_18_40_ladder_1;
        _1428 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1504 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1507 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1649;
        if (_1501 > 0.0)
        {
            _1649 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1649 = frontier_phi_30_26_ladder;
        }
        float _1925;
        if (_1504 > 0.0)
        {
            _1925 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1925 = frontier_phi_42_37_ladder;
        }
        float _2138;
        if (_1507 > 0.0)
        {
            _2138 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2138 = frontier_phi_51_48_ladder;
        }
        float _2140 = isnan(_1925) ? _1649 : (isnan(_1649) ? _1925 : min(_1649, _1925));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1501) + _1490;
        float _2146 = (_2141 * _1504) + _1494;
        float _2147 = (_2141 * _1507) + _1498;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2148;
        float _2151 = _2148 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2147 > _2151) || ((_2147 < _2149) || ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 < _2149) || (_2145 > _2151))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2147, cbModelParam._m0[17u].z, fma(_2146, cbModelParam._m0[17u].y, _2145 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2147, cbModelParam._m0[18u].z, fma(_2146, cbModelParam._m0[18u].y, _2145 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2147, cbModelParam._m0[19u].z, fma(_2146, cbModelParam._m0[19u].y, _2145 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_27_51_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_27_51_ladder_2;
        _1528 = frontier_phi_27_51_ladder_1;
        _1530 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1543 = (((_524 * _474) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_524 * _476) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_524 * _477) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    uvec4 _1566 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1568 = _1566.x * 14u;
    uint _1569 = _1568 + 13u;
    float _1576 = _489 + (-1.0);
    float _1581 = (cbLight._m0[_1569].x * _1576) + 1.0;
    float _1582 = (cbLight._m0[_1569].y * _1576) + 1.0;
    float _1583 = (cbLight._m0[_1569].z * _1576) + 1.0;
    float _1584 = (cbLight._m0[_1569].w * _1576) + 1.0;
    uint _1585 = _1568 + 5u;
    float _1591 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
    uint _1595 = _1568 + 4u;
    float _1602 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1606 = _1568 | 1u;
    float _1617 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_304, _305, _306));
    float _1620 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_304, _305, _306));
    float _3828 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _3839 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1625 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1627 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.3183098733425140380859375;
    float _1634 = ((cbLight._m0[_1585].x * _1591) * _1627) + ((cbLight._m0[_1595].x * _1602) * _1625);
    float _1635 = ((_1591 * cbLight._m0[_1585].y) * _1627) + ((_1602 * cbLight._m0[_1595].y) * _1625);
    float _1636 = ((_1591 * cbLight._m0[_1585].z) * _1627) + ((_1602 * cbLight._m0[_1595].z) * _1625);
    uvec4 _1641 = floatBitsToUint(cbLight._m0[_1568 + 12u]);
    bool _1643 = _1641.x == 0u;
    float _1654;
    float _1656;
    float _1658;
    if (_1643)
    {
        _1654 = _1634;
        _1656 = _1635;
        _1658 = _1636;
    }
    else
    {
        uint _1662 = _1568 + 6u;
        float _1678 = (dot(vec3(cbLight._m0[_1568 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1679 = _1678 * _1678;
        float _3850 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1681 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1654 = (((cbLight._m0[_1662].x * 0.3183098733425140380859375) * _1680) * _1681) + _1634;
        _1656 = (((cbLight._m0[_1662].y * 0.3183098733425140380859375) * _1680) * _1681) + _1635;
        _1658 = (((cbLight._m0[_1662].z * 0.3183098733425140380859375) * _1680) * _1681) + _1636;
    }
    bool _1661 = _1641.y == 0u;
    float _1699;
    float _1701;
    float _1703;
    if (_1661)
    {
        _1699 = _1654;
        _1701 = _1656;
        _1703 = _1658;
    }
    else
    {
        uint _1869 = _1568 + 7u;
        float _1885 = (dot(vec3(cbLight._m0[_1568 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3866 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1888 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _1699 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1654;
        _1701 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1656;
        _1703 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1658;
    }
    uint _1706 = _1568 + 8u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1568].w)) * _308) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1568].x + _387;
    float _1722 = cbLight._m0[_1568].y + _388;
    float _1723 = cbLight._m0[_1568].z + _389;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1568].xyz));
    float _3882 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _1735 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1736 = dot(vec3(_304, _305, _306), vec3(_1728, _1729, _1730));
    float _3904 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_1728, _1729, _1730));
    float _3915 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1720 * _1720;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1756 = exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0);
    float _1757 = 0.959999978542327880859375 - _471;
    float _1759 = 0.959999978542327880859375 - _472;
    float _1760 = 0.959999978542327880859375 - _473;
    float _1767 = 1.0 - _1720;
    float _1778 = (0.5 / (((_1735 * ((_1734 * _1767) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1767) + _1720) * _1734))) * _1734;
    float _3926 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1780 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    uint _1791 = _1568 + 9u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1606].w)) * _308) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1606].x + _387;
    float _1805 = cbLight._m0[_1606].y + _388;
    float _1806 = cbLight._m0[_1606].z + _389;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1606].xyz));
    float _3937 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1818 = dot(vec3(_304, _305, _306), vec3(_1811, _1812, _1813));
    float _3948 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_1811, _1812, _1813));
    float _3959 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1803 * _1803;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1837 = exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0);
    float _1844 = 1.0 - _1803;
    float _1854 = (0.5 / (((_1735 * ((_1817 * _1844) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1844) + _1803) * _1817))) * _1817;
    float _3970 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    float _1866 = (((((_1837 * _1757) + _474) * cbLight._m0[_1791].x) * _1856) * _1591) + (((((_1756 * _1757) + _474) * cbLight._m0[_1706].x) * _1780) * _1602);
    float _1867 = (((((_1837 * _1759) + _476) * cbLight._m0[_1791].y) * _1856) * _1591) + (((((_1756 * _1759) + _476) * cbLight._m0[_1706].y) * _1780) * _1602);
    float _1868 = (((((_1837 * _1760) + _477) * cbLight._m0[_1791].z) * _1856) * _1591) + (((((_1756 * _1760) + _477) * cbLight._m0[_1706].z) * _1780) * _1602);
    float _1930;
    float _1932;
    float _1934;
    if (_1643)
    {
        _1930 = _1866;
        _1932 = _1867;
        _1934 = _1868;
    }
    else
    {
        uint _1936 = _1568 + 2u;
        uint _1940 = _1568 + 10u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _308) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _387;
        float _1957 = cbLight._m0[_1936].y + _388;
        float _1958 = cbLight._m0[_1936].z + _389;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1936].xyz));
        float _3981 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1970 = dot(vec3(_304, _305, _306), vec3(_1963, _1964, _1965));
        float _3992 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _4003 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
        float _1996 = 1.0 - _1955;
        float _2006 = (0.5 / (((_1735 * ((_1969 * _1996) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1996) + _1955) * _1969))) * _1969;
        float _4014 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1930 = (((((_1989 * _1757) + _474) * cbLight._m0[_1940].x) * _2008) * _2009) + _1866;
        _1932 = (((((_1989 * _1759) + _476) * cbLight._m0[_1940].y) * _2008) * _2009) + _1867;
        _1934 = (((((_1989 * _1760) + _477) * cbLight._m0[_1940].z) * _2008) * _2009) + _1868;
    }
    float _2044;
    float _2046;
    float _2048;
    if (_1661)
    {
        _2044 = _1930;
        _2046 = _1932;
        _2048 = _1934;
    }
    else
    {
        uint _2055 = _1568 + 3u;
        uint _2059 = _1568 + 11u;
        float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _308) * 0.949999988079071044921875);
        float _2074 = _2073 * _2073;
        float _2075 = cbLight._m0[_2055].x + _387;
        float _2076 = cbLight._m0[_2055].y + _388;
        float _2077 = cbLight._m0[_2055].z + _389;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2082 = _2081 * _2075;
        float _2083 = _2081 * _2076;
        float _2084 = _2081 * _2077;
        float _2085 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2055].xyz));
        float _4030 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2089 = dot(vec3(_304, _305, _306), vec3(_2082, _2083, _2084));
        float _4041 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2082, _2083, _2084));
        float _4052 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2097 = _2074 * _2074;
        float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
        float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0);
        float _2115 = 1.0 - _2074;
        float _2125 = (0.5 / (((_1735 * ((_2088 * _2115) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _2115) + _2074) * _2088))) * _2088;
        float _4063 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
        float _2128 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _2044 = (((((_2108 * _1757) + _474) * cbLight._m0[_2059].x) * _2127) * _2128) + _1930;
        _2046 = (((((_2108 * _1759) + _476) * cbLight._m0[_2059].y) * _2127) * _2128) + _1932;
        _2048 = (((((_2108 * _1760) + _477) * cbLight._m0[_2059].z) * _2127) * _2128) + _1934;
    }
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    if (_1566.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
        }
        else
        {
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            uint _2529 = 0u;
            uint _2538;
            bool _2539;
            for (;;)
            {
                _2538 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                _2539 = _2538 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2539)
                {
                    frontier_phi_68_pred = _2525;
                    frontier_phi_68_pred_1 = _2528;
                    frontier_phi_68_pred_2 = _2527;
                    frontier_phi_68_pred_3 = _2526;
                    frontier_phi_68_pred_4 = _2524;
                    frontier_phi_68_pred_5 = _2523;
                }
                else
                {
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    uint _2674;
                    _2668 = _2523;
                    _2669 = _2524;
                    _2670 = _2525;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2538;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    for (;;)
                    {
                        uint _2678 = uint(findLSB(_2674)) + (_2529 << 5u);
                        uint _2675 = (_2674 + 4294967295u) & _2674;
                        uint _2680 = _2678 * 48u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2700 = (_2678 * 48u) + 4u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2719 = (_2678 * 48u) + 8u;
                        vec3 _2730 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x));
                        float _2734 = _2694.x - _2204;
                        float _2735 = _2694.y - _2205;
                        float _2736 = _2694.z - _2206;
                        float _2737 = dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736));
                        float _2740 = inversesqrt(_2737);
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2744 = dot(vec3(_429, _432, _435), vec3(_2741, _2742, _2743));
                        float _2749 = 1.0 - (_2737 * _2694.w);
                        float _4089 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2750 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2751 = sqrt(_2737) * _2713.w;
                        float _2754 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                        float _2755 = _2754 * _2754;
                        float _2758 = ((1.0 - _2755) * _2744) + _2755;
                        float _2761 = _2751 * _2751;
                        float _2765 = ((isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))) * _2750) / ((_2761 * 0.699999988079071044921875) + 1.0);
                        float _2769 = (-0.0) - _2204;
                        float _2770 = (-0.0) - _2205;
                        float _2771 = (-0.0) - _2206;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2786 = exp2(log2(1.0 / ((_2761 * 3.5) + 5.0)) * 0.25);
                        float _2787 = 1.0 - _505;
                        float _2794 = sqrt(1.0 - ((1.0 - (_2787 * _2787)) * (1.0 - (_2786 * _2786))));
                        float _2795 = _2794 * _2794;
                        float _2796 = _2795 * _2795;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2807 = dot(vec3(_429, _432, _435), vec3(_2776, _2777, _2778));
                        float _4105 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2811 = dot(vec3(_429, _432, _435), vec3(_2803 * _2797, _2803 * _2798, _2803 * _2799));
                        float _4116 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2818 = ((_2814 * _2814) * (_2796 + (-1.0))) + 1.0;
                        float _2819 = _2754 * _2795;
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2744) + _2820;
                        float _4127 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2825 = 1.0 - _2795;
                        float _2835 = (0.5 / (((_2824 * ((_2810 * _2825) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2824 * _2825) + _2795) * _2810))) * _2824;
                        float _4138 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2846 = (((_2796 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_2818 * _2818) * ((_2761 * 2.1991131305694580078125) + 3.141590118408203125))) * _2750;
                        _2598 = (_2765 * _2713.x) + _2671;
                        _2599 = (_2765 * _2713.y) + _2672;
                        _2600 = (_2765 * _2713.z) + _2673;
                        _2595 = (_2846 * _2730.x) + _2668;
                        _2596 = (_2846 * _2730.y) + _2669;
                        _2597 = (_2846 * _2730.z) + _2670;
                        if (_2675 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2668 = _2595;
                            _2669 = _2596;
                            _2670 = _2597;
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2675;
                        }
                    }
                    frontier_phi_68_pred = _2597;
                    frontier_phi_68_pred_1 = _2600;
                    frontier_phi_68_pred_2 = _2599;
                    frontier_phi_68_pred_3 = _2598;
                    frontier_phi_68_pred_4 = _2596;
                    frontier_phi_68_pred_5 = _2595;
                }
                _2376 = frontier_phi_68_pred;
                _2382 = frontier_phi_68_pred_1;
                _2380 = frontier_phi_68_pred_2;
                _2378 = frontier_phi_68_pred_3;
                _2374 = frontier_phi_68_pred_4;
                _2372 = frontier_phi_68_pred_5;
                uint _2530 = _2529 + 1u;
                if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2523 = _2372;
                    _2524 = _2374;
                    _2525 = _2376;
                    _2526 = _2378;
                    _2527 = _2380;
                    _2528 = _2382;
                    _2529 = _2530;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
        }
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.z;
        uint _2388 = (_2386 >> 8u) & 15u;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((4294967295u << _2388) & _2250) == 0u)
        {
            _2491 = _2371;
            _2493 = _2373;
            _2495 = _2375;
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
        }
        else
        {
            float _2516 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2517 = _2516 * _2204;
            float _2518 = _2516 * _2205;
            float _2519 = _2516 * _2206;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2388 < ((_2386 >> 12u) & 15u))
            {
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2651 = _2371;
                float _2652 = _2373;
                float _2653 = _2375;
                float _2654 = _2377;
                float _2655 = _2379;
                float _2656 = _2381;
                uint _2657 = _2388;
                uint _2666;
                bool _2667;
                for (;;)
                {
                    _2666 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                    _2667 = _2666 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2667)
                    {
                        frontier_phi_79_pred = _2656;
                        frontier_phi_79_pred_1 = _2655;
                        frontier_phi_79_pred_2 = _2654;
                        frontier_phi_79_pred_3 = _2653;
                        frontier_phi_79_pred_4 = _2652;
                        frontier_phi_79_pred_5 = _2651;
                    }
                    else
                    {
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _2873 = _2651;
                        float _2874 = _2652;
                        float _2875 = _2653;
                        float _2876 = _2654;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        uint _2879 = _2666;
                        uint _2880;
                        vec4 _2905;
                        float _2906;
                        vec4 _2921;
                        vec3 _2933;
                        vec4 _2949;
                        vec4 _2965;
                        float _3012;
                        bool _3013;
                        for (;;)
                        {
                            uint _2890 = ((_2657 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2879));
                            _2880 = (_2879 + 4294967295u) & _2879;
                            uint _2892 = _2890 * 40u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2906 = _2905.w;
                            uint _2908 = (_2890 * 40u) + 4u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2890 * 40u) + 8u;
                            _2933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x));
                            uint _2936 = (_2890 * 40u) + 16u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2952 = (_2890 * 40u) + 20u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2890 * 40u) + 24u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2987 = (_2890 * 40u) + 28u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3012 = fma(_2206, _3000.z, fma(_2205, _3000.y, _3000.x * _2204)) + _3000.w;
                            _3013 = !((fma(_2206, _2981.z, fma(_2205, _2981.y, _2981.x * _2204)) + _2981.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3013)
                            {
                                float _3040 = _2905.x - _2204;
                                float _3041 = _2905.y - _2205;
                                float _3042 = _2905.z - _2206;
                                float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                                float _3046 = inversesqrt(_3043);
                                float _3047 = _3046 * _3040;
                                float _3048 = _3046 * _3041;
                                float _3049 = _3046 * _3042;
                                float _3053 = 1.0 - (_3043 / (_2906 * _2906));
                                float _4149 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3058 = sqrt(_3043) * _2921.w;
                                float _3060 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                                float _3061 = _3060 * _3060;
                                float _3064 = ((1.0 - _3061) * dot(vec3(_3047, _3048, _3049), vec3(_429, _432, _435))) + _3061;
                                float _3067 = _3058 * _3058;
                                float _3071 = (fma(_2206, _2949.z, fma(_2205, _2949.y, _2949.x * _2204)) + _2949.w) / _3012;
                                float _3072 = (fma(_2206, _2965.z, fma(_2205, _2965.y, _2965.x * _2204)) + _2965.w) / _3012;
                                float _3076 = 1.0 - dot(vec2(_3071, _3072), vec2(_3071, _3072));
                                float _4165 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3078 = _3077 * (((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3054) / ((_3067 * 0.699999988079071044921875) + 1.0));
                                float _3090 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                                float _3091 = 1.0 - _505;
                                float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                                float _3099 = _3098 * _3098;
                                float _3100 = _3099 * _3099;
                                float _3101 = _3047 - _2517;
                                float _3102 = _3048 - _2518;
                                float _3103 = _3049 - _2519;
                                float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                                float _3111 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2517, (-0.0) - _2518, (-0.0) - _2519));
                                float _4176 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3115 = dot(vec3(_429, _432, _435), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                                float _4187 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                                float _3123 = _3060 * _3099;
                                float _3124 = _3123 * _3123;
                                float _3130 = ((1.0 - _3124) * dot(vec3(_429, _432, _435), vec3(_3047, _3048, _3049))) + _3124;
                                float _4198 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3132 = 1.0 - _3099;
                                float _3142 = (0.5 / (((_3131 * ((_3114 * _3132) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3099) * _3114))) * _3131;
                                float _4209 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3152 = (_3077 * _3054) * (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_3122 * _3122) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3078 * _2921.z;
                                frontier_phi_85_pred_1 = _3078 * _2921.y;
                                frontier_phi_85_pred_2 = _3078 * _2921.x;
                                frontier_phi_85_pred_3 = _3152 * _2933.z;
                                frontier_phi_85_pred_4 = _3152 * _2933.y;
                                frontier_phi_85_pred_5 = _3152 * _2933.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3161 = frontier_phi_85_pred;
                            _3160 = frontier_phi_85_pred_1;
                            _3159 = frontier_phi_85_pred_2;
                            _3158 = frontier_phi_85_pred_3;
                            _3157 = frontier_phi_85_pred_4;
                            _3156 = frontier_phi_85_pred_5;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            if (_2880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2880;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2865;
                        frontier_phi_79_pred_1 = _2864;
                        frontier_phi_79_pred_2 = _2863;
                        frontier_phi_79_pred_3 = _2862;
                        frontier_phi_79_pred_4 = _2861;
                        frontier_phi_79_pred_5 = _2860;
                    }
                    _2502 = frontier_phi_79_pred;
                    _2500 = frontier_phi_79_pred_1;
                    _2498 = frontier_phi_79_pred_2;
                    _2496 = frontier_phi_79_pred_3;
                    _2494 = frontier_phi_79_pred_4;
                    _2492 = frontier_phi_79_pred_5;
                    uint _2658 = _2657 + 1u;
                    if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2651 = _2492;
                        _2652 = _2494;
                        _2653 = _2496;
                        _2654 = _2498;
                        _2655 = _2500;
                        _2656 = _2502;
                        _2657 = _2658;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2498;
                frontier_phi_60_61_ladder_1 = _2502;
                frontier_phi_60_61_ladder_2 = _2500;
                frontier_phi_60_61_ladder_3 = _2496;
                frontier_phi_60_61_ladder_4 = _2494;
                frontier_phi_60_61_ladder_5 = _2492;
            }
            else
            {
                frontier_phi_60_61_ladder = _2377;
                frontier_phi_60_61_ladder_1 = _2381;
                frontier_phi_60_61_ladder_2 = _2379;
                frontier_phi_60_61_ladder_3 = _2375;
                frontier_phi_60_61_ladder_4 = _2373;
                frontier_phi_60_61_ladder_5 = _2371;
            }
            _2491 = frontier_phi_60_61_ladder_5;
            _2493 = frontier_phi_60_61_ladder_4;
            _2495 = frontier_phi_60_61_ladder_3;
            _2497 = frontier_phi_60_61_ladder;
            _2499 = frontier_phi_60_61_ladder_2;
            _2501 = frontier_phi_60_61_ladder_1;
        }
        float _2506 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2262 = (_2506 * _2497) + _1699;
        _2264 = (_2506 * _2499) + _1701;
        _2266 = (_2506 * _2501) + _1703;
        _2268 = ((_2491 * _474) * _2506) + _2044;
        _2270 = ((_2493 * _476) * _2506) + _2046;
        _2272 = ((_2495 * _477) * _2506) + _2048;
    }
    else
    {
        _2262 = _1699;
        _2264 = _1701;
        _2266 = _1703;
        _2268 = _2044;
        _2270 = _2046;
        _2272 = _2048;
    }
    uint _2278 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _4225 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4236 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4247 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4258 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _2304 = (((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2262 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _489))) + ((_2268 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((_283.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2278].x);
    float _2306 = (((_283.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2278].y) + ((_2270 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2264 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _489)));
    float _2308 = (((_283.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2278].z) + ((_2272 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2266 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _489)));
    float _2309 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2310 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2311 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2316 = cbInstanceData._m0[_448 + 6u].w * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)));
    float _2321 = _408 / cbSceneParam._m0[86u].x;
    float _2322 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2336 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2338 = _2336.x;
    float _2339 = _2336.y;
    float _2340 = _2336.z;
    float _2341 = _2336.w;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2396 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2397 = _2396 / _328;
        float _2408 = _2397 * _380;
        float _2409 = _381 * _2397;
        float _2410 = (-0.0) - _2409;
        float _2411 = _2397 * _382;
        float _2413 = (cbSceneParam._m0[77u].w * _2410) / _2396;
        float _2414 = _2413 + cbSceneParam._m0[79u].w;
        float _2415 = cbSceneParam._m0[79u].w - _2409;
        float _2421 = sqrt(((_2408 * _2408) + (_2409 * _2409)) + (_2411 * _2411));
        float _2424 = (1.0 - (cbSceneParam._m0[77u].w / _2396)) * _2421;
        float _2429 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2431 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2608;
        if (abs((_2410 - _2413) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2608 = ((((_2414 > 0.0) ? exp2(_2429 * _2414) : (2.0 - exp2(_2431 * _2414))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2424;
        }
        else
        {
            float _2552 = 1.0 / cbSceneParam._m0[80u].x;
            float _2553 = isnan(_2415) ? _2414 : (isnan(_2414) ? _2415 : max(_2414, _2415));
            float _2554 = isnan(_2415) ? _2414 : (isnan(_2414) ? _2415 : min(_2414, _2415));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            _2608 = ((abs(_2421 / _2410) * cbSceneParam._m0[80u].y) * ((((_2563 - _2564) * 2.0) - ((exp2(_2429 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)))) - exp2(_2429 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))))) * _2552)) - ((exp2(_2431 * _2563) - exp2(_2431 * _2564)) * _2552))) + (_2424 * cbSceneParam._m0[80u].z);
        }
        vec4 _2610 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, 1.0), 0.0);
        float _2619 = exp2((_2608 * (-1.44269502162933349609375)) * (1.0 - _2610.w));
        float _2620 = log2(_2619);
        float _2636 = log2(_2341);
        _2433 = (exp2(_2636 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].x)) * _2610.x) / cbSceneParam._m0[78u].x)) + _2338;
        _2435 = (exp2(_2636 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].y)) * _2610.y) / cbSceneParam._m0[78u].y)) + _2339;
        _2437 = (exp2(_2636 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].z)) * _2610.z) / cbSceneParam._m0[78u].z)) + _2340;
        _2439 = _2619 * _2341;
    }
    else
    {
        _2433 = _2338;
        _2435 = _2339;
        _2437 = _2340;
        _2439 = _2341;
    }
    bool _2646;
    vec4 _2449;
    vec4 _2471;
    float _2473;
    float _2477;
    float _2478;
    float _2479;
    float _2480;
    bool _2490;
    for (;;)
    {
        _2449 = cbMatDynParam._m0[0u];
        float _2451 = roundEven(_2449.y);
        bool _2452 = _2451 == 3.0;
        float _2453 = log2(_2439);
        float _2460 = exp2(_2453 * cbSceneParam._m0[78u].x) * _2309;
        float _2461 = exp2(_2453 * cbSceneParam._m0[78u].y) * _2310;
        float _2462 = exp2(_2453 * cbSceneParam._m0[78u].z) * _2311;
        float _2469 = _396 + (-0.5);
        _2471 = cbMtdParam._m0[1u];
        _2473 = _2471.y * _2469;
        float _2476 = (_2451 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2477 = _2476 * (_2452 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2433)));
        _2478 = _2476 * (_2452 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2435)));
        _2479 = _2476 * (_2452 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2437)));
        _2480 = _2469 * 0.999000012874603271484375;
        _2490 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2490)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2480) < 0.5)
            {
                _2646 = true;
                break;
            }
        }
        uint _2587 = _450 + uint(_2449.w);
        if ((cbInstanceData._m0[_2587].w < 1.0) && ((cbInstanceData._m0[_2587].w + _2480) < 0.5))
        {
            _2646 = true;
            break;
        }
        if ((_2473 + _236) < _2471.x)
        {
            _2646 = true;
            break;
        }
        _2646 = false;
        break;
    }
    float _2851;
    if (_2646)
    {
        discard_state = true;
        _2851 = 0.0;
    }
    else
    {
        _2851 = _2316;
    }
    SV_Target.x = _2477;
    SV_Target.y = _2478;
    SV_Target.z = _2479;
    SV_Target.w = _2851;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2316;
    discard_exit();
}


