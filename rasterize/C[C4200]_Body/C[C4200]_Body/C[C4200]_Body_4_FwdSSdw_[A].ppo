#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1532;
float _3969;
float _3970;
float _3971;
float _3972;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _263 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _277 = exp2(log2(_263.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _278 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _279 = isnan(1.0) ? _278 : (isnan(_278) ? 1.0 : min(_278, 1.0));
    vec4 _293 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _297 = _293.z;
    float _305 = exp2(log2(_297 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _319 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _322 = _319.y;
    float _325 = (_319.x + (-0.02500000037252902984619140625)) * 8.0;
    float _329 = roundEven(5.0 - _325);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(4.0) ? _330 : (isnan(_330) ? 4.0 : min(_330, 4.0));
    float _344 = floor(_331);
    vec4 _347 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _344));
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[17u].x;
    _194[0u] = cbMtdParam._m0[17u].y;
    _195[0u] = cbMtdParam._m0[17u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[14u].x;
    _194[2u] = cbMtdParam._m0[14u].y;
    _195[2u] = cbMtdParam._m0[14u].z;
    _193[3u] = cbMtdParam._m0[13u].x;
    _194[3u] = cbMtdParam._m0[13u].y;
    _195[3u] = cbMtdParam._m0[13u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[18u].x;
    _194[5u] = cbMtdParam._m0[18u].y;
    _195[5u] = cbMtdParam._m0[18u].z;
    float _411 = roundEven(_325);
    float _412 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    uint _414 = uint(int(isnan(5.0) ? _412 : (isnan(_412) ? 5.0 : min(_412, 5.0))));
    vec4 _444 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _455 = cbMtdParam._m0[9u].x * _444.x;
    float _456 = cbMtdParam._m0[9u].y * _444.y;
    float _457 = cbMtdParam._m0[9u].z * _444.z;
    float _464 = ((((((_193[_414] - cbMtdParam._m0[10u].x) * _322) + cbMtdParam._m0[10u].x) * _347.x) - _455) * _307) + _455;
    float _465 = ((((((_194[_414] - cbMtdParam._m0[10u].y) * _322) + cbMtdParam._m0[10u].y) * _347.y) - _456) * _307) + _456;
    float _466 = ((((((_195[_414] - cbMtdParam._m0[10u].z) * _322) + cbMtdParam._m0[10u].z) * _347.z) - _457) * _307) + _457;
    float _472 = exp2(log2(_293.w) * cbMtdParam._m0[24u].w);
    vec4 _485 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _505 = (((cbMtdParam._m0[16u].x * _485.x) - _464) * _472) + _464;
    float _506 = (((cbMtdParam._m0[16u].y * _485.y) - _465) * _472) + _465;
    float _507 = (((cbMtdParam._m0[16u].z * _485.z) - _466) * _472) + _466;
    vec4 _519 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _544 = (_263.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _519.x) - _505) * _279) + _505);
    float _546 = (_263.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _519.y) - _506) * _279) + _506);
    float _548 = (_263.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _519.z) - _507) * _279) + _507);
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[30u].z;
    _189[0u] = cbMtdParam._m0[30u].w;
    _188[1u] = cbMtdParam._m0[32u].z;
    _189[1u] = cbMtdParam._m0[32u].w;
    _188[2u] = cbMtdParam._m0[32u].x;
    _189[2u] = cbMtdParam._m0[32u].y;
    _188[3u] = cbMtdParam._m0[31u].z;
    _189[3u] = cbMtdParam._m0[31u].w;
    _188[4u] = cbMtdParam._m0[31u].x;
    _189[4u] = cbMtdParam._m0[31u].y;
    float _584 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    uint _586 = uint(int(isnan(4.0) ? _584 : (isnan(_584) ? 4.0 : min(_584, 4.0))));
    float _593 = ((_189[_586] - cbMtdParam._m0[23u].z) * _307) + cbMtdParam._m0[23u].z;
    float _596 = ((cbMtdParam._m0[23u].w - _593) * _472) + _593;
    float _599 = ((cbMtdParam._m0[26u].y - _596) * _279) + _596;
    vec4 _614 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _344));
    vec4 _631 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _639 = cbMtdParam._m0[23u].x + _631.z;
    float _642 = (((_614.z + _188[_586]) - _639) * _307) + _639;
    vec4 _654 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _665 = (((_654.z - _642) + cbMtdParam._m0[30u].x) * _472) + _642;
    float _671 = ((((_297 * 2.0) * _665) - _665) * cbMtdParam._m0[25u].w) + _665;
    vec4 _683 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _694 = (((cbMtdParam._m0[24u].z + _683.z) - _671) * _279) + _671;
    float _707 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _730 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_707 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _707) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _734 = cbPerFrame._m0[22u].x * 2.0;
    float _735 = _734 * cbMtdParam._m0[28u].z;
    float _738 = (_730.x * 0.5) + (-0.25);
    float _741 = (_730.y * 0.5) + (-0.25);
    float _742 = _741 * cbMtdParam._m0[28u].y;
    float _744 = (-0.0) - (cbMtdParam._m0[28u].y * _738);
    float _746 = fract(_735);
    float _748 = fract(_735 + 0.5);
    float _760 = abs((_746 * 2.0) + (-1.0));
    vec4 _776 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_746 * _744) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_742 * _746) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _778 = _776.x;
    float _779 = _776.y;
    float _780 = _776.z;
    vec4 _781 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_748 * _744) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_742 * _748) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _792 = ((_781.x - _778) * _760) + _778;
    float _799 = exp2(log2(_792 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _800 = isnan(cbMtdParam._m0[29u].y) ? _799 : (isnan(_799) ? cbMtdParam._m0[29u].y : max(_799, cbMtdParam._m0[29u].y));
    float _801 = isnan(cbMtdParam._m0[29u].z) ? _800 : (isnan(_800) ? cbMtdParam._m0[29u].z : min(_800, cbMtdParam._m0[29u].z));
    float _825 = (cbMtdParam._m0[33u].x * _707) + TEXCOORD;
    float _826 = (cbMtdParam._m0[33u].y * _707) + TEXCOORD_1;
    float _829 = _734 * cbMtdParam._m0[27u].w;
    float _830 = _741 * cbMtdParam._m0[27u].z;
    float _832 = (-0.0) - (cbMtdParam._m0[27u].z * _738);
    float _833 = fract(_829);
    float _835 = fract(_829 + 0.5);
    float _846 = abs((_833 * 2.0) + (-1.0));
    vec4 _863 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_833 * _832) + _825) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_830 * _833) + _826) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _868 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_835 * _832) + _825) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_830 * _835) + _826) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _902 = ((_614.x - _633) * _307) + _633;
    float _903 = ((_614.y - _634) * _307) + _634;
    float _908 = ((_654.x - _902) * _472) + _902;
    float _909 = ((_654.y - _903) * _472) + _903;
    float _918 = ((((_683.x - _908) * _279) + _908) * 2.0) + (-1.0);
    float _919 = ((((_683.y - _909) * _279) + _909) * 2.0) + (-1.0);
    float _920 = dot(vec2(_918, _919), vec2(_918, _919));
    float _4041 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _925 = sqrt(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))));
    float _928 = (cbMtdParam._m0[26u].z * ((_293.x * 2.0) + (-1.0))) + _918;
    float _929 = (cbMtdParam._m0[26u].z * ((_293.y * 2.0) + (-1.0))) + _919;
    float _931 = gl_FragCoord.x * 0.125;
    float _933 = gl_FragCoord.y * 0.125;
    float _944 = fma(_925, _235 * NORMAL.x, fma(_929, _242 * TANGENT.x, (_228 * _220) * _928));
    float _947 = fma(_925, _235 * NORMAL.y, fma(_929, _242 * TANGENT.y, (_228 * _221) * _928));
    float _950 = fma(_925, _235 * NORMAL.z, fma(_929, _242 * TANGENT.z, (_228 * _222) * _928));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4052 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _958 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4074 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4085 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4096 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _962 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_931, _933)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _982 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1033 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1023);
    float _1034 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1023);
    float _1035 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1023);
    float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
    float _1040 = _1033 * _1039;
    float _1041 = _1034 * _1039;
    float _1042 = _1035 * _1039;
    vec4 _1044 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_931, _933));
    float _1046 = _1044.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1216 = sqrt(((_1033 * _1033) + (_1034 * _1034)) + (_1035 * _1035));
        float _1222 = (cbMatDynParam._m0[5u].x * _1216) + cbMatDynParam._m0[5u].y;
        float _4107 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1227 = (cbMatDynParam._m0[5u].z * _1216) + cbMatDynParam._m0[5u].w;
        float _4118 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) - _1223)) + _1223) < ((_1046 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1057 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1058 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1076 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1079 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1082 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1095 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1096 = _1095 + 9u;
    uint _1097 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _1103 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1097].x;
    float _1104 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_1097].y;
    float _1105 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_1097].z;
    float _4129 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1109 = 1.0 - _962;
    float _1110 = _1106 * _1109;
    float _1111 = _1107 * _1109;
    float _1112 = _1108 * _1109;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _962;
    float _1118 = (_1107 + (-0.039999999105930328369140625)) * _962;
    float _1119 = (_1108 + (-0.039999999105930328369140625)) * _962;
    float _1120 = _1117 + 0.039999999105930328369140625;
    float _1122 = _1118 + 0.039999999105930328369140625;
    float _1123 = _1119 + 0.039999999105930328369140625;
    vec4 _1132 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1057, cbSceneParam._m0[86u].y * _1058));
    float _1135 = _1132.x * TEXCOORD_3.w;
    float _1136 = dot(vec3(_955, _956, _957), vec3(_1040, _1041, _1042));
    float _1139 = _1136 * 2.0;
    float _1143 = (_1139 * _955) - _1040;
    float _1144 = (_1139 * _956) - _1041;
    float _1145 = (_1139 * _957) - _1042;
    float _1149 = abs(dot(vec3(_1040, _1041, _1042), vec3(_955, _956, _957)));
    float _4162 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1151 = sqrt(_958);
    float _1162 = exp2((_1151 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1151 * 3.0));
    float _1168 = (1.0 - _1162) * ((_1151 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1169 = _1162 * _1151;
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1258 = fma(_1205, cbModelParam._m0[26u].z, fma(_1201, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197));
        float _1262 = fma(_1205, cbModelParam._m0[27u].z, fma(_1201, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197));
        float _1266 = fma(_1205, cbModelParam._m0[28u].z, fma(_1201, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197));
        float _1290 = _1197 + _955;
        float _1291 = _1201 + _956;
        float _1292 = _1205 + _957;
        float _1302 = fma(_1292, cbModelParam._m0[26u].z, fma(_1291, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290)) - _1258;
        float _1303 = fma(_1292, cbModelParam._m0[27u].z, fma(_1291, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290)) - _1262;
        float _1304 = fma(_1292, cbModelParam._m0[28u].z, fma(_1291, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290)) - _1266;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1320 = ((_1308 * _1302) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1258 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1308 * _1303) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1262 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1304) / cbModelParam._m0[34u].z) + ((((((_1266 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_955, _956, _957), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4210 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_955, _956, _957), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4243 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_955, _956, _957), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4276 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1569 = fma(_1205, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197));
        float _1573 = fma(_1205, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197));
        float _1577 = fma(_1205, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197));
        float _1600 = _1197 + _955;
        float _1601 = _1201 + _956;
        float _1602 = _1205 + _957;
        float _1612 = fma(_1602, cbModelParam._m0[30u].z, fma(_1601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1600)) - _1569;
        float _1613 = fma(_1602, cbModelParam._m0[31u].z, fma(_1601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1600)) - _1573;
        float _1614 = fma(_1602, cbModelParam._m0[32u].z, fma(_1601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1600)) - _1577;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1631 = ((_1618 * _1612) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1569 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1618 * _1613) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1573 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1618 * _1614) / cbModelParam._m0[35u].z) + ((((((_1577 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        float _1668 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1635.x + (-0.5));
        float _1670 = _1668 * (_1635.y + (-0.5));
        float _1671 = _1668 * (_1635.z + (-0.5));
        float _1678 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1642.x + (-0.5));
        float _1680 = _1678 * (_1642.y + (-0.5));
        float _1681 = _1678 * (_1642.z + (-0.5));
        float _1688 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1649.x + (-0.5));
        float _1690 = _1688 * (_1649.y + (-0.5));
        float _1691 = _1688 * (_1649.z + (-0.5));
        float _1698 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1656.x + (-0.5));
        float _1700 = _1698 * (_1656.y + (-0.5));
        float _1701 = _1698 * (_1656.z + (-0.5));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = _1669 * 0.5;
        float _1706 = _1679 * 0.5;
        float _1707 = _1689 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_955, _956, _957), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4339 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1732 + 1.0))) + _1737) * _1702;
        float _1747 = _1670 * 0.5;
        float _1748 = _1680 * 0.5;
        float _1749 = _1690 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_955, _956, _957), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4372 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1774 + 1.0))) + _1779) * _1703;
        float _1789 = _1671 * 0.5;
        float _1790 = _1681 * 0.5;
        float _1791 = _1691 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_955, _956, _957), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4405 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1816 + 1.0))) + _1821) * _1704;
        _1838 = _1671;
        _1839 = _1670;
        _1840 = _1669;
        _1841 = _1681;
        _1842 = _1680;
        _1843 = _1679;
        _1844 = _1691;
        _1845 = _1690;
        _1846 = _1689;
        _1847 = _1704;
        _1848 = _1703;
        _1849 = _1702;
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
    }
    else
    {
        _1838 = _1532;
        _1839 = _1532;
        _1840 = _1532;
        _1841 = _1532;
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = 0.0;
        _1851 = 0.0;
        _1852 = 0.0;
    }
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1544)) + _1544;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1545)) + _1545;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1546)) + _1546;
    float _1885 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1862));
    float _1906 = _1143 * 0.5;
    float _1907 = _1144 * 0.5;
    float _1908 = _1145 * 0.5;
    float _1909 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1912 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1915 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1949;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1922 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1926 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1930 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1937 = dot(vec4(cbModelParam._m0[39u]), vec4(_1906, _1907, _1908, 1.0));
        _1949 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1949 = 1.0;
    }
    float _1960;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1951 = dot(vec4(cbModelParam._m0[40u]), vec4(_1906, _1907, _1908, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1951) ? 0.0 : (isnan(0.0) ? _1951 : max(0.0, _1951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1964 = (_1960 * cbModelParam._m0[1u].x) + (_1949 * (1.0 - cbModelParam._m0[1u].x));
    float _1974 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1975 = isnan(_1974) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1974 : min(cbModelParam._m0[25u].z, _1974));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2022 = fma(_1205, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197)) + cbModelParam._m0[13u].w;
        float _2026 = fma(_1205, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197)) + cbModelParam._m0[14u].w;
        float _2030 = fma(_1205, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197)) + cbModelParam._m0[15u].w;
        float _2033 = fma(_1145, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143));
        float _2036 = fma(_1145, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143));
        float _2039 = fma(_1145, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143));
        float _2067;
        if (_2033 > 0.0)
        {
            _2067 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2067 = frontier_phi_19_17_ladder;
        }
        float _2290;
        if (_2036 > 0.0)
        {
            _2290 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2290 = frontier_phi_28_24_ladder;
        }
        float _2547;
        if (_2039 > 0.0)
        {
            _2547 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2547 = frontier_phi_40_35_ladder;
        }
        float _2549 = isnan(_2290) ? _2067 : (isnan(_2067) ? _2290 : min(_2067, _2290));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _2033) + _2022;
        float _2555 = (_2550 * _2036) + _2026;
        float _2556 = (_2550 * _2039) + _2030;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2557;
        float _2561 = _2557 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 > _2561) || ((_2555 < _2559) || ((_2554 < _2559) || (_2554 > _2561))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2556, cbModelParam._m0[9u].z, fma(_2555, cbModelParam._m0[9u].y, _2554 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2556, cbModelParam._m0[10u].z, fma(_2555, cbModelParam._m0[10u].y, _2554 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2556, cbModelParam._m0[11u].z, fma(_2555, cbModelParam._m0[11u].y, _2554 * cbModelParam._m0[11u].x))), _1975);
            frontier_phi_18_40_ladder = _2684.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2684.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2684.x * cbModelParam._m0[1u].y;
        }
        _2055 = frontier_phi_18_40_ladder_2;
        _2057 = frontier_phi_18_40_ladder_1;
        _2059 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1143, _1144, _1145), _1975);
        _2055 = _2043.x * cbModelParam._m0[1u].y;
        _2057 = _2043.y * cbModelParam._m0[1u].y;
        _2059 = _2043.z * cbModelParam._m0[1u].y;
    }
    float _2063 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2064 = isnan(_2063) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2063 : min(cbModelParam._m0[25u].w, _2063));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1205, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1205, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1205, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1145, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143));
        float _2131 = fma(_1145, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143));
        float _2134 = fma(_1145, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143));
        float _2295;
        if (_2128 > 0.0)
        {
            _2295 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2295 = frontier_phi_30_26_ladder;
        }
        float _2574;
        if (_2131 > 0.0)
        {
            _2574 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2574 = frontier_phi_42_37_ladder;
        }
        float _2787;
        if (_2134 > 0.0)
        {
            _2787 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2787 = frontier_phi_51_48_ladder;
        }
        float _2789 = isnan(_2574) ? _2295 : (isnan(_2295) ? _2574 : min(_2295, _2574));
        float _2790 = isnan(_2787) ? _2789 : (isnan(_2789) ? _2787 : min(_2789, _2787));
        float _2794 = (_2790 * _2128) + _2117;
        float _2795 = (_2790 * _2131) + _2121;
        float _2796 = (_2790 * _2134) + _2125;
        float _2797 = _2790 * 9.9999997473787516355514526367188e-05;
        float _2798 = (-1.0) - _2797;
        float _2800 = _2797 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2796 > _2800) || ((_2796 < _2798) || ((_2795 > _2800) || ((_2795 < _2798) || ((_2794 < _2798) || (_2794 > _2800))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2796, cbModelParam._m0[17u].z, fma(_2795, cbModelParam._m0[17u].y, _2794 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2796, cbModelParam._m0[18u].z, fma(_2795, cbModelParam._m0[18u].y, _2794 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2796, cbModelParam._m0[19u].z, fma(_2795, cbModelParam._m0[19u].y, _2794 * cbModelParam._m0[19u].x))), _2064);
            frontier_phi_27_51_ladder = _3024.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3024.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3024.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_27_51_ladder_2;
        _2155 = frontier_phi_27_51_ladder_1;
        _2157 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1143, _1144, _1145), _2064);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2170 = (((_1168 * _1120) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2172 = (((_1168 * _1122) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2174 = (((_1168 * _1123) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2172, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2172, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2172, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    vec4 _2191 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1057, _1058));
    float _2193 = _2191.w;
    float _2205 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2193);
    float _2206 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2193);
    float _2207 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2193);
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_1095 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _1135 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_955, _956, _957));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_955, _956, _957));
    float _4541 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4552 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2205) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2206) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2207) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2289)
    {
        _2300 = _2281;
        _2302 = _2282;
        _2304 = _2283;
    }
    else
    {
        uint _2308 = _2213 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4563 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2327 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2281;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2282;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2283;
    }
    bool _2307 = _2287.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2307)
    {
        _2345 = _2300;
        _2347 = _2302;
        _2349 = _2304;
    }
    else
    {
        uint _2518 = _2213 + 7u;
        float _2534 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4579 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2537 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2345 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2300;
        _2347 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2302;
        _2349 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2304;
    }
    uint _2352 = _2213 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _958) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2213].x + _1040;
    float _2368 = cbLight._m0[_2213].y + _1041;
    float _2369 = cbLight._m0[_2213].z + _1042;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2213].xyz));
    float _4595 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _4606 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _2381 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2382 = dot(vec3(_955, _956, _957), vec3(_2374, _2375, _2376));
    float _4617 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2374, _2375, _2376));
    float _4628 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
    float _2403 = 0.959999978542327880859375 - _1117;
    float _2405 = 0.959999978542327880859375 - _1118;
    float _2406 = 0.959999978542327880859375 - _1119;
    float _2413 = 1.0 - _2366;
    float _2424 = (0.5 / (((_2381 * ((_2380 * _2413) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2413) + _2366) * _2380))) * _2380;
    float _4639 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2440 = _2213 + 9u;
    float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _958) * 0.949999988079071044921875);
    float _2452 = _2451 * _2451;
    float _2453 = cbLight._m0[_2253].x + _1040;
    float _2454 = cbLight._m0[_2253].y + _1041;
    float _2455 = cbLight._m0[_2253].z + _1042;
    float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
    float _2460 = _2459 * _2453;
    float _2461 = _2459 * _2454;
    float _2462 = _2459 * _2455;
    float _2463 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2253].xyz));
    float _4650 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2467 = dot(vec3(_955, _956, _957), vec3(_2460, _2461, _2462));
    float _4661 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2471 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2460, _2461, _2462));
    float _4672 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2475 = _2452 * _2452;
    float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
    float _2493 = 1.0 - _2452;
    float _2503 = (0.5 / (((_2381 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2493) + _2452) * _2466))) * _2466;
    float _4683 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
    float _2515 = (((((_2486 * _2403) + _1120) * cbLight._m0[_2440].x) * _2505) * _2236) + ((((cbLight._m0[_2352].x * _2205) * ((_2402 * _2403) + _1120)) * _2426) * _2249);
    float _2516 = (((((_2486 * _2405) + _1122) * cbLight._m0[_2440].y) * _2505) * _2236) + ((((cbLight._m0[_2352].y * _2206) * ((_2402 * _2405) + _1122)) * _2426) * _2249);
    float _2517 = (((((_2486 * _2406) + _1123) * cbLight._m0[_2440].z) * _2505) * _2236) + ((((cbLight._m0[_2352].z * _2207) * ((_2402 * _2406) + _1123)) * _2426) * _2249);
    float _2579;
    float _2581;
    float _2583;
    if (_2289)
    {
        _2579 = _2515;
        _2581 = _2516;
        _2583 = _2517;
    }
    else
    {
        uint _2585 = _2213 + 2u;
        uint _2589 = _2213 + 10u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _958) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _1040;
        float _2606 = cbLight._m0[_2585].y + _1041;
        float _2607 = cbLight._m0[_2585].z + _1042;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2585].xyz));
        float _4694 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2619 = dot(vec3(_955, _956, _957), vec3(_2612, _2613, _2614));
        float _4705 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4716 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2381 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2645) + _2604) * _2618))) * _2618;
        float _4727 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2579 = (((((_2638 * _2403) + _1120) * cbLight._m0[_2589].x) * _2657) * _2658) + _2515;
        _2581 = (((((_2638 * _2405) + _1122) * cbLight._m0[_2589].y) * _2657) * _2658) + _2516;
        _2583 = (((((_2638 * _2406) + _1123) * cbLight._m0[_2589].z) * _2657) * _2658) + _2517;
    }
    float _2693;
    float _2695;
    float _2697;
    if (_2307)
    {
        _2693 = _2579;
        _2695 = _2581;
        _2697 = _2583;
    }
    else
    {
        uint _2704 = _2213 + 3u;
        uint _2708 = _2213 + 11u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _958) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _1040;
        float _2725 = cbLight._m0[_2704].y + _1041;
        float _2726 = cbLight._m0[_2704].z + _1042;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2704].xyz));
        float _4743 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2738 = dot(vec3(_955, _956, _957), vec3(_2731, _2732, _2733));
        float _4754 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4765 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
        float _2764 = 1.0 - _2723;
        float _2774 = (0.5 / (((_2381 * ((_2737 * _2764) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2764) + _2723) * _2737))) * _2737;
        float _4776 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2693 = (((((_2757 * _2403) + _1120) * cbLight._m0[_2708].x) * _2776) * _2777) + _2579;
        _2695 = (((((_2757 * _2405) + _1122) * cbLight._m0[_2708].y) * _2776) * _2777) + _2581;
        _2697 = (((((_2757 * _2406) + _1123) * cbLight._m0[_2708].z) * _2776) * _2777) + _2583;
    }
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_2211.y == 0u)
    {
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2852;
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2852;
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2852;
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.x;
        uint _2879 = uint((float(_2867.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1058) / _2868))) + floor(float(uint(cbSceneParam._m0[85u].x * _1057) / _2868)));
        float _2889 = (log2(_2855 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2890 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        uint _2893 = uint(isnan(14.0) ? _2890 : (isnan(_2890) ? 14.0 : min(_2890, 14.0)));
        uvec4 _2898 = texelFetch(g_lightClusterGridBuffer, int(((_2893 << 2u) + (_2879 << 6u)) >> 2u));
        uint _2899 = _2898.x;
        uint _2900 = _2867.z;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((((1u << ((_2900 >> 4u) & 15u)) + 4294967295u) & _2899) == 0u) || ((_2900 & 240u) == 0u))
        {
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
        }
        else
        {
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            uint _3196 = 0u;
            uint _3205;
            bool _3206;
            for (;;)
            {
                _3205 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                _3206 = _3205 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3206)
                {
                    frontier_phi_68_pred = _3190;
                    frontier_phi_68_pred_1 = _3195;
                    frontier_phi_68_pred_2 = _3194;
                    frontier_phi_68_pred_3 = _3193;
                    frontier_phi_68_pred_4 = _3192;
                    frontier_phi_68_pred_5 = _3191;
                }
                else
                {
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    uint _3341;
                    _3335 = _3190;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3205;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    for (;;)
                    {
                        uint _3345 = uint(findLSB(_3341)) + (_3196 << 5u);
                        uint _3342 = (_3341 + 4294967295u) & _3341;
                        uint _3347 = _3345 * 48u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3367 = (_3345 * 48u) + 4u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3386 = (_3345 * 48u) + 8u;
                        vec3 _3397 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x));
                        float _3401 = _3361.x - _2853;
                        float _3402 = _3361.y - _2854;
                        float _3403 = _3361.z - _2855;
                        float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                        float _3407 = inversesqrt(_3404);
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3411 = dot(vec3(_1076, _1079, _1082), vec3(_3408, _3409, _3410));
                        float _3416 = 1.0 - (_3404 * _3361.w);
                        float _4802 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3418 = sqrt(_3404) * _3380.w;
                        float _3421 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3411) + _3422;
                        float _3428 = _3418 * _3418;
                        float _3432 = ((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3417) / ((_3428 * 0.699999988079071044921875) + 1.0);
                        float _3436 = (-0.0) - _2853;
                        float _3437 = (-0.0) - _2854;
                        float _3438 = (-0.0) - _2855;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3453 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                        float _3454 = 1.0 - _1151;
                        float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                        float _3462 = _3461 * _3461;
                        float _3463 = _3462 * _3462;
                        float _3464 = _3443 + _3408;
                        float _3465 = _3444 + _3409;
                        float _3466 = _3445 + _3410;
                        float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                        float _3474 = dot(vec3(_1076, _1079, _1082), vec3(_3443, _3444, _3445));
                        float _4818 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3477 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3478 = dot(vec3(_1076, _1079, _1082), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                        float _4829 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                        float _3486 = _3421 * _3462;
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3411) + _3487;
                        float _4840 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3492 = 1.0 - _3462;
                        float _3502 = (0.5 / (((_3491 * ((_3477 * _3492) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3462) * _3477))) * _3491;
                        float _4851 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3513 = (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3485 * _3485) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125))) * _3417;
                        _3265 = (_3432 * _3380.x) + _3338;
                        _3266 = (_3432 * _3380.y) + _3339;
                        _3267 = (_3432 * _3380.z) + _3340;
                        _3262 = (_3513 * _3397.x) + _3335;
                        _3263 = (_3513 * _3397.y) + _3336;
                        _3264 = (_3513 * _3397.z) + _3337;
                        if (_3342 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3335 = _3262;
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3342;
                        }
                    }
                    frontier_phi_68_pred = _3262;
                    frontier_phi_68_pred_1 = _3267;
                    frontier_phi_68_pred_2 = _3266;
                    frontier_phi_68_pred_3 = _3265;
                    frontier_phi_68_pred_4 = _3264;
                    frontier_phi_68_pred_5 = _3263;
                }
                _3030 = frontier_phi_68_pred;
                _3040 = frontier_phi_68_pred_1;
                _3038 = frontier_phi_68_pred_2;
                _3036 = frontier_phi_68_pred_3;
                _3034 = frontier_phi_68_pred_4;
                _3032 = frontier_phi_68_pred_5;
                uint _3197 = _3196 + 1u;
                if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3190 = _3030;
                    _3191 = _3032;
                    _3192 = _3034;
                    _3193 = _3036;
                    _3194 = _3038;
                    _3195 = _3040;
                    _3196 = _3197;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
        }
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.z;
        uint _3046 = (_3044 >> 8u) & 15u;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        if (((4294967295u << _3046) & _2899) == 0u)
        {
            _3158 = _3029;
            _3160 = _3031;
            _3162 = _3033;
            _3164 = _3035;
            _3166 = _3037;
            _3168 = _3039;
        }
        else
        {
            float _3183 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
            float _3184 = _3183 * _2853;
            float _3185 = _3183 * _2854;
            float _3186 = _3183 * _2855;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3046 < ((_3044 >> 12u) & 15u))
            {
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3318 = _3029;
                float _3319 = _3031;
                float _3320 = _3033;
                float _3321 = _3035;
                float _3322 = _3037;
                float _3323 = _3039;
                uint _3324 = _3046;
                uint _3333;
                bool _3334;
                for (;;)
                {
                    _3333 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                    _3334 = _3333 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3334)
                    {
                        frontier_phi_79_pred = _3323;
                        frontier_phi_79_pred_1 = _3322;
                        frontier_phi_79_pred_2 = _3321;
                        frontier_phi_79_pred_3 = _3320;
                        frontier_phi_79_pred_4 = _3319;
                        frontier_phi_79_pred_5 = _3318;
                    }
                    else
                    {
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3540 = _3318;
                        float _3541 = _3319;
                        float _3542 = _3320;
                        float _3543 = _3321;
                        float _3544 = _3322;
                        float _3545 = _3323;
                        uint _3546 = _3333;
                        uint _3547;
                        vec4 _3572;
                        float _3573;
                        vec4 _3588;
                        vec3 _3600;
                        vec4 _3615;
                        vec4 _3630;
                        float _3676;
                        bool _3677;
                        for (;;)
                        {
                            uint _3557 = ((_3324 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3546));
                            _3547 = (_3546 + 4294967295u) & _3546;
                            uint _3559 = _3557 * 40u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3573 = _3572.w;
                            uint _3575 = (_3557 * 40u) + 4u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3557 * 40u) + 8u;
                            _3600 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x));
                            uint _3602 = (_3557 * 40u) + 16u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3557 * 40u) + 20u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3557 * 40u) + 24u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3651 = (_3557 * 40u) + 28u;
                            vec4 _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            _3676 = fma(_2855, _3664.z, fma(_2854, _3664.y, _3664.x * _2853)) + _3664.w;
                            _3677 = !((fma(_2855, _3645.z, fma(_2854, _3645.y, _3645.x * _2853)) + _3645.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3677)
                            {
                                float _3704 = _3572.x - _2853;
                                float _3705 = _3572.y - _2854;
                                float _3706 = _3572.z - _2855;
                                float _3707 = dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706));
                                float _3710 = inversesqrt(_3707);
                                float _3711 = _3710 * _3704;
                                float _3712 = _3710 * _3705;
                                float _3713 = _3710 * _3706;
                                float _3717 = 1.0 - (_3707 / (_3573 * _3573));
                                float _4862 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3722 = sqrt(_3707) * _3588.w;
                                float _3724 = 1.39999997615814208984375 / (_3722 + 1.39999997615814208984375);
                                float _3725 = _3724 * _3724;
                                float _3728 = ((1.0 - _3725) * dot(vec3(_3711, _3712, _3713), vec3(_1076, _1079, _1082))) + _3725;
                                float _3731 = _3722 * _3722;
                                float _3735 = (fma(_2855, _3615.z, fma(_2854, _3615.y, _3615.x * _2853)) + _3615.w) / _3676;
                                float _3736 = (fma(_2855, _3630.z, fma(_2854, _3630.y, _3630.x * _2853)) + _3630.w) / _3676;
                                float _3740 = 1.0 - dot(vec2(_3735, _3736), vec2(_3735, _3736));
                                float _4878 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3742 = _3741 * (((isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0))) * _3718) / ((_3731 * 0.699999988079071044921875) + 1.0));
                                float _3754 = exp2(log2(1.0 / ((_3731 * 3.5) + 5.0)) * 0.25);
                                float _3755 = 1.0 - _1151;
                                float _3762 = sqrt(1.0 - ((1.0 - (_3755 * _3755)) * (1.0 - (_3754 * _3754))));
                                float _3763 = _3762 * _3762;
                                float _3764 = _3763 * _3763;
                                float _3765 = _3711 - _3184;
                                float _3766 = _3712 - _3185;
                                float _3767 = _3713 - _3186;
                                float _3771 = inversesqrt(dot(vec3(_3765, _3766, _3767), vec3(_3765, _3766, _3767)));
                                float _3775 = dot(vec3(_1076, _1079, _1082), vec3((-0.0) - _3184, (-0.0) - _3185, (-0.0) - _3186));
                                float _4889 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3778 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3779 = dot(vec3(_1076, _1079, _1082), vec3(_3771 * _3765, _3771 * _3766, _3771 * _3767));
                                float _4900 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3782 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3786 = ((_3782 * _3782) * (_3764 + (-1.0))) + 1.0;
                                float _3787 = _3724 * _3763;
                                float _3788 = _3787 * _3787;
                                float _3794 = ((1.0 - _3788) * dot(vec3(_1076, _1079, _1082), vec3(_3711, _3712, _3713))) + _3788;
                                float _4911 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3795 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3796 = 1.0 - _3763;
                                float _3806 = (0.5 / (((_3795 * ((_3778 * _3796) + _3763)) + 9.9999999392252902907785028219223e-09) + (((_3795 * _3796) + _3763) * _3778))) * _3795;
                                float _4922 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3816 = (_3741 * _3718) * (((_3764 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3786 * _3786) * ((_3731 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3742 * _3588.y;
                                frontier_phi_85_pred_1 = _3742 * _3588.x;
                                frontier_phi_85_pred_2 = _3816 * _3600.z;
                                frontier_phi_85_pred_3 = _3816 * _3600.y;
                                frontier_phi_85_pred_4 = _3816 * _3600.x;
                                frontier_phi_85_pred_5 = _3742 * _3588.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3824 = frontier_phi_85_pred;
                            _3823 = frontier_phi_85_pred_1;
                            _3822 = frontier_phi_85_pred_2;
                            _3821 = frontier_phi_85_pred_3;
                            _3820 = frontier_phi_85_pred_4;
                            _3825 = frontier_phi_85_pred_5;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            if (_3547 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3547;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3532;
                        frontier_phi_79_pred_1 = _3531;
                        frontier_phi_79_pred_2 = _3530;
                        frontier_phi_79_pred_3 = _3529;
                        frontier_phi_79_pred_4 = _3528;
                        frontier_phi_79_pred_5 = _3527;
                    }
                    _3169 = frontier_phi_79_pred;
                    _3167 = frontier_phi_79_pred_1;
                    _3165 = frontier_phi_79_pred_2;
                    _3163 = frontier_phi_79_pred_3;
                    _3161 = frontier_phi_79_pred_4;
                    _3159 = frontier_phi_79_pred_5;
                    uint _3325 = _3324 + 1u;
                    if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3318 = _3159;
                        _3319 = _3161;
                        _3320 = _3163;
                        _3321 = _3165;
                        _3322 = _3167;
                        _3323 = _3169;
                        _3324 = _3325;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3163;
                frontier_phi_60_61_ladder_1 = _3169;
                frontier_phi_60_61_ladder_2 = _3167;
                frontier_phi_60_61_ladder_3 = _3165;
                frontier_phi_60_61_ladder_4 = _3161;
                frontier_phi_60_61_ladder_5 = _3159;
            }
            else
            {
                frontier_phi_60_61_ladder = _3033;
                frontier_phi_60_61_ladder_1 = _3039;
                frontier_phi_60_61_ladder_2 = _3037;
                frontier_phi_60_61_ladder_3 = _3035;
                frontier_phi_60_61_ladder_4 = _3031;
                frontier_phi_60_61_ladder_5 = _3029;
            }
            _3158 = frontier_phi_60_61_ladder_5;
            _3160 = frontier_phi_60_61_ladder_4;
            _3162 = frontier_phi_60_61_ladder;
            _3164 = frontier_phi_60_61_ladder_3;
            _3166 = frontier_phi_60_61_ladder_2;
            _3168 = frontier_phi_60_61_ladder_1;
        }
        float _3173 = isnan(1.0) ? _1135 : (isnan(_1135) ? 1.0 : min(_1135, 1.0));
        _2912 = (_3173 * _3164) + _2345;
        _2914 = (_3173 * _3166) + _2347;
        _2916 = (_3173 * _3168) + _2349;
        _2918 = ((_3158 * _1120) * _3173) + _2693;
        _2920 = ((_3160 * _1122) * _3173) + _2695;
        _2922 = ((_3162 * _1123) * _3173) + _2697;
    }
    else
    {
        _2912 = _2345;
        _2914 = _2347;
        _2916 = _2349;
        _2918 = _2693;
        _2920 = _2695;
        _2922 = _2697;
    }
    uint _2928 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _2934 = ((((((_868.x - _863.x) * _846) + _863.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _792) * cbMtdParam._m0[20u].x)) * _801) * cbInstanceData._m0[_2928].x;
    float _2935 = ((((((_868.y - _863.y) * _846) + _863.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_781.y - _779) * _760) + _779)) * cbMtdParam._m0[20u].y)) * _801) * cbInstanceData._m0[_2928].y;
    float _2936 = ((((((_868.z - _863.z) * _846) + _863.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_781.z - _780) * _760) + _780)) * cbMtdParam._m0[20u].z)) * _801) * cbInstanceData._m0[_2928].z;
    float _4938 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _4949 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _4960 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _2953 = (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2912 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1135))) + ((_2918 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1964)) * cbPerFrame._m0[3u].x)) + _2934;
    float _2955 = (_2935 + ((_2920 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1964)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2914 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1135)));
    float _2957 = (_2936 + ((_2922 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1964)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2916 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1135)));
    float _2958 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
    float _2959 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
    float _2960 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
    float _2966 = cbMtdParam._m0[2u].x * _2934;
    float _2967 = cbMtdParam._m0[2u].y * _2935;
    float _2968 = cbMtdParam._m0[2u].z * _2936;
    float _4986 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2970 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
    uint _2971 = _1095 + 6u;
    float _2979 = _1057 / cbSceneParam._m0[86u].x;
    float _2980 = _1058 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _982 : (isnan(_982) ? cbSceneParam._m0[77u].w : min(_982, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_982 > cbSceneParam._m0[78u].w)
    {
        float _3054 = isnan(_982) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _982 : min(cbSceneParam._m0[80u].w, _982));
        float _3055 = _3054 / _982;
        float _3066 = _3055 * _1033;
        float _3067 = _1034 * _3055;
        float _3068 = (-0.0) - _3067;
        float _3069 = _3055 * _1035;
        float _3071 = (cbSceneParam._m0[77u].w * _3068) / _3054;
        float _3072 = _3071 + cbSceneParam._m0[79u].w;
        float _3073 = cbSceneParam._m0[79u].w - _3067;
        float _3079 = sqrt(((_3066 * _3066) + (_3067 * _3067)) + (_3069 * _3069));
        float _3082 = (1.0 - (cbSceneParam._m0[77u].w / _3054)) * _3079;
        float _3087 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3089 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3275;
        if (abs((_3068 - _3071) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3275 = ((((_3072 > 0.0) ? exp2(_3087 * _3072) : (2.0 - exp2(_3089 * _3072))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3082;
        }
        else
        {
            float _3219 = 1.0 / cbSceneParam._m0[80u].x;
            float _3220 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : max(_3072, _3073));
            float _3221 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : min(_3072, _3073));
            float _3230 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : min(_3220, 0.0));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            _3275 = ((abs(_3079 / _3068) * cbSceneParam._m0[80u].y) * ((((_3230 - _3231) * 2.0) - ((exp2(_3087 * (isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0)))) - exp2(_3087 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))))) * _3219)) - ((exp2(_3089 * _3230) - exp2(_3089 * _3231)) * _3219))) + (_3082 * cbSceneParam._m0[80u].z);
        }
        vec4 _3277 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3286 = exp2((_3275 * (-1.44269502162933349609375)) * (1.0 - _3277.w));
        float _3287 = log2(_3286);
        float _3303 = log2(_2999);
        _3091 = (exp2(_3303 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].x)) * _3277.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3093 = (exp2(_3303 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].y)) * _3277.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3095 = (exp2(_3303 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].z)) * _3277.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3097 = _3286 * _2999;
    }
    else
    {
        _3091 = _2996;
        _3093 = _2997;
        _3095 = _2998;
        _3097 = _2999;
    }
    bool _3313;
    vec4 _3107;
    vec4 _3129;
    float _3131;
    float _3135;
    float _3136;
    float _3137;
    float _3140;
    float _3143;
    float _3146;
    float _3147;
    bool _3157;
    for (;;)
    {
        _3107 = cbMatDynParam._m0[0u];
        float _3109 = roundEven(_3107.y);
        bool _3110 = _3109 == 3.0;
        float _3111 = log2(_3097);
        float _3115 = exp2(_3111 * cbSceneParam._m0[78u].x);
        float _3116 = exp2(_3111 * cbSceneParam._m0[78u].y);
        float _3117 = exp2(_3111 * cbSceneParam._m0[78u].z);
        float _3118 = _3115 * _2958;
        float _3119 = _3116 * _2959;
        float _3120 = _3117 * _2960;
        float _3127 = _1046 + (-0.5);
        _3129 = cbMtdParam._m0[1u];
        _3131 = _3129.y * _3127;
        float _3134 = (_3109 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3135 = _3134 * (_3110 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3091)));
        _3136 = _3134 * (_3110 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3093)));
        _3137 = _3134 * (_3110 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3095)));
        _3140 = ((_2966 * _2970) * _3115) * _3134;
        _3143 = ((_2967 * _2970) * _3116) * _3134;
        _3146 = ((_2968 * _2970) * _3117) * _3134;
        _3147 = _3127 * 0.999000012874603271484375;
        _3157 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3157)
        {
            if ((cbInstanceData._m0[_1095 + 7u].x + _3147) < 0.5)
            {
                _3313 = true;
                break;
            }
        }
        uint _3254 = _1096 + uint(_3107.w);
        if ((cbInstanceData._m0[_3254].w < 1.0) && ((cbInstanceData._m0[_3254].w + _3147) < 0.5))
        {
            _3313 = true;
            break;
        }
        if ((_3131 + 1.0) < _3129.x)
        {
            _3313 = true;
            break;
        }
        _3313 = false;
        break;
    }
    float _3518;
    if (_3313)
    {
        discard_state = true;
        _3518 = 0.0;
    }
    else
    {
        _3518 = cbInstanceData._m0[_2971].w;
    }
    SV_Target.x = _3135;
    SV_Target.y = _3136;
    SV_Target.z = _3137;
    SV_Target.w = _3518;
    SV_Target_1.x = _3140;
    SV_Target_1.y = _3143;
    SV_Target_1.z = _3146;
    SV_Target_1.w = cbInstanceData._m0[_2971].w;
    discard_exit();
}


