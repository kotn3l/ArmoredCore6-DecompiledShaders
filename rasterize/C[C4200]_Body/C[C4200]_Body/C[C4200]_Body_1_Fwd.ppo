#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1400;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _265 = exp2(log2(_251.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _266 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _267 = isnan(1.0) ? _266 : (isnan(_266) ? 1.0 : min(_266, 1.0));
    vec4 _281 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _285 = _281.z;
    float _293 = exp2(log2(_285 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    float _316 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(4.0) ? _317 : (isnan(_317) ? 4.0 : min(_317, 4.0));
    float _331 = floor(_318);
    vec4 _334 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _331));
    vec4 _359 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _370 = cbMtdParam._m0[9u].x * _359.x;
    float _371 = cbMtdParam._m0[9u].y * _359.y;
    float _372 = cbMtdParam._m0[9u].z * _359.z;
    float _379 = (((cbMtdParam._m0[10u].x * _334.x) - _370) * _295) + _370;
    float _380 = (((cbMtdParam._m0[10u].y * _334.y) - _371) * _295) + _371;
    float _381 = (((cbMtdParam._m0[10u].z * _334.z) - _372) * _295) + _372;
    float _387 = exp2(log2(_281.w) * cbMtdParam._m0[24u].w);
    vec4 _400 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _420 = (((cbMtdParam._m0[16u].x * _400.x) - _379) * _387) + _379;
    float _421 = (((cbMtdParam._m0[16u].y * _400.y) - _380) * _387) + _380;
    float _422 = (((cbMtdParam._m0[16u].z * _400.z) - _381) * _387) + _381;
    vec4 _435 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _460 = (_251.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _435.x) - _420) * _267) + _420);
    float _462 = (_251.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _435.y) - _421) * _267) + _421);
    float _464 = (_251.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _435.z) - _422) * _267) + _422);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[30u].z;
    _183[0u] = cbMtdParam._m0[30u].w;
    _182[1u] = cbMtdParam._m0[32u].z;
    _183[1u] = cbMtdParam._m0[32u].w;
    _182[2u] = cbMtdParam._m0[32u].x;
    _183[2u] = cbMtdParam._m0[32u].y;
    _182[3u] = cbMtdParam._m0[31u].z;
    _183[3u] = cbMtdParam._m0[31u].w;
    _182[4u] = cbMtdParam._m0[31u].x;
    _183[4u] = cbMtdParam._m0[31u].y;
    float _502 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    uint _504 = uint(int(isnan(4.0) ? _502 : (isnan(_502) ? 4.0 : min(_502, 4.0))));
    float _511 = ((_183[_504] - cbMtdParam._m0[23u].z) * _295) + cbMtdParam._m0[23u].z;
    float _514 = ((cbMtdParam._m0[23u].w - _511) * _387) + _511;
    float _517 = ((cbMtdParam._m0[26u].y - _514) * _267) + _514;
    vec4 _532 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _331));
    vec4 _550 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _552 = _550.x;
    float _553 = _550.y;
    float _558 = cbMtdParam._m0[23u].x + _550.z;
    float _561 = (((_532.z + _182[_504]) - _558) * _295) + _558;
    vec4 _573 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _584 = (((_573.z - _561) + cbMtdParam._m0[30u].x) * _387) + _561;
    float _590 = ((((_285 * 2.0) * _584) - _584) * cbMtdParam._m0[25u].w) + _584;
    vec4 _602 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _613 = (((cbMtdParam._m0[24u].z + _602.z) - _590) * _267) + _590;
    float _626 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _649 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_626 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _626) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _653 = cbPerFrame._m0[22u].x * 2.0;
    float _654 = _653 * cbMtdParam._m0[28u].z;
    float _657 = (_649.x * 0.5) + (-0.25);
    float _660 = (_649.y * 0.5) + (-0.25);
    float _661 = _660 * cbMtdParam._m0[28u].y;
    float _663 = (-0.0) - (cbMtdParam._m0[28u].y * _657);
    float _665 = fract(_654);
    float _667 = fract(_654 + 0.5);
    float _679 = abs((_665 * 2.0) + (-1.0));
    vec4 _696 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_665 * _663) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_661 * _665) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _698 = _696.x;
    float _699 = _696.y;
    float _700 = _696.z;
    vec4 _701 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_667 * _663) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_661 * _667) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _712 = ((_701.x - _698) * _679) + _698;
    float _719 = exp2(log2(_712 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _720 = isnan(cbMtdParam._m0[29u].y) ? _719 : (isnan(_719) ? cbMtdParam._m0[29u].y : max(_719, cbMtdParam._m0[29u].y));
    float _721 = isnan(cbMtdParam._m0[29u].z) ? _720 : (isnan(_720) ? cbMtdParam._m0[29u].z : min(_720, cbMtdParam._m0[29u].z));
    float _745 = (cbMtdParam._m0[33u].x * _626) + TEXCOORD;
    float _746 = (cbMtdParam._m0[33u].y * _626) + TEXCOORD_1;
    float _749 = _653 * cbMtdParam._m0[27u].w;
    float _750 = _660 * cbMtdParam._m0[27u].z;
    float _752 = (-0.0) - (cbMtdParam._m0[27u].z * _657);
    float _753 = fract(_749);
    float _755 = fract(_749 + 0.5);
    float _766 = abs((_753 * 2.0) + (-1.0));
    vec4 _783 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_753 * _752) + _745) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_750 * _753) + _746) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _788 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_755 * _752) + _745) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_750 * _755) + _746) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _822 = ((_532.x - _552) * _295) + _552;
    float _823 = ((_532.y - _553) * _295) + _553;
    float _828 = ((_573.x - _822) * _387) + _822;
    float _829 = ((_573.y - _823) * _387) + _823;
    float _838 = ((((_602.x - _828) * _267) + _828) * 2.0) + (-1.0);
    float _839 = ((((_602.y - _829) * _267) + _829) * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3811 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _845 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    float _848 = (cbMtdParam._m0[26u].z * ((_281.x * 2.0) + (-1.0))) + _838;
    float _849 = (cbMtdParam._m0[26u].z * ((_281.y * 2.0) + (-1.0))) + _839;
    float _852 = fma(_845, _223 * NORMAL.x, fma(_849, _230 * TANGENT.x, (_216 * _208) * _848));
    float _855 = fma(_845, _223 * NORMAL.y, fma(_849, _230 * TANGENT.y, (_216 * _209) * _848));
    float _858 = fma(_845, _223 * NORMAL.z, fma(_849, _230 * TANGENT.z, (_216 * _210) * _848));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _3822 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _866 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3844 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3855 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3866 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _870 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _937 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _927);
    float _938 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _927);
    float _939 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _927);
    float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
    float _944 = _937 * _943;
    float _945 = _938 * _943;
    float _946 = _939 * _943;
    float _952 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _953 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _971 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _974 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _977 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    uint _990 = uint(roundEven(NORMAL.w)) * 13u;
    uint _991 = _990 + 9u;
    uint _992 = _991 + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_992].z;
    float _3877 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1004 = 1.0 - _870;
    float _1005 = _1001 * _1004;
    float _1006 = _1002 * _1004;
    float _1007 = _1003 * _1004;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _870;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _870;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _870;
    float _1015 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    vec4 _1027 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _952, cbSceneParam._m0[86u].y * _953));
    float _1030 = _1027.x * TEXCOORD_3.w;
    float _1031 = dot(vec3(_863, _864, _865), vec3(_944, _945, _946));
    float _1034 = _1031 * 2.0;
    float _1038 = (_1034 * _863) - _944;
    float _1039 = (_1034 * _864) - _945;
    float _1040 = (_1034 * _865) - _946;
    float _1044 = abs(dot(vec3(_944, _945, _946), vec3(_863, _864, _865)));
    float _3910 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_866);
    float _1057 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1063 = (1.0 - _1057) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1064 = _1057 * _1046;
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1126 = fma(_1100, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092));
        float _1130 = fma(_1100, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092));
        float _1134 = fma(_1100, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092));
        float _1158 = _1092 + _863;
        float _1159 = _1096 + _864;
        float _1160 = _1100 + _865;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1126;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1130;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1134;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1188 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1126 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1130 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1134 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_863, _864, _865), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3958 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_863, _864, _865), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3991 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_863, _864, _865), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4024 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1437 = fma(_1100, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092));
        float _1441 = fma(_1100, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092));
        float _1445 = fma(_1100, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092));
        float _1468 = _1092 + _863;
        float _1469 = _1096 + _864;
        float _1470 = _1100 + _865;
        float _1480 = fma(_1470, cbModelParam._m0[30u].z, fma(_1469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1468)) - _1437;
        float _1481 = fma(_1470, cbModelParam._m0[31u].z, fma(_1469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1468)) - _1441;
        float _1482 = fma(_1470, cbModelParam._m0[32u].z, fma(_1469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1468)) - _1445;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1499 = ((_1486 * _1480) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1437 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1481) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1441 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1486 * _1482) / cbModelParam._m0[35u].z) + ((((((_1445 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        float _1536 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1503.x + (-0.5));
        float _1538 = _1536 * (_1503.y + (-0.5));
        float _1539 = _1536 * (_1503.z + (-0.5));
        float _1546 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1510.x + (-0.5));
        float _1548 = _1546 * (_1510.y + (-0.5));
        float _1549 = _1546 * (_1510.z + (-0.5));
        float _1556 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1517.x + (-0.5));
        float _1558 = _1556 * (_1517.y + (-0.5));
        float _1559 = _1556 * (_1517.z + (-0.5));
        float _1566 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1524.x + (-0.5));
        float _1568 = _1566 * (_1524.y + (-0.5));
        float _1569 = _1566 * (_1524.z + (-0.5));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = _1537 * 0.5;
        float _1574 = _1547 * 0.5;
        float _1575 = _1557 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_863, _864, _865), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4087 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1600 + 1.0))) + _1605) * _1570;
        float _1615 = _1538 * 0.5;
        float _1616 = _1548 * 0.5;
        float _1617 = _1558 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_863, _864, _865), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4120 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1642 + 1.0))) + _1647) * _1571;
        float _1657 = _1539 * 0.5;
        float _1658 = _1549 * 0.5;
        float _1659 = _1559 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_863, _864, _865), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4153 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1684 + 1.0))) + _1689) * _1572;
        _1706 = _1539;
        _1707 = _1538;
        _1708 = _1537;
        _1709 = _1549;
        _1710 = _1548;
        _1711 = _1547;
        _1712 = _1559;
        _1713 = _1558;
        _1714 = _1557;
        _1715 = _1572;
        _1716 = _1571;
        _1717 = _1570;
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
    }
    else
    {
        _1706 = _1400;
        _1707 = _1400;
        _1708 = _1400;
        _1709 = _1400;
        _1710 = _1400;
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1412)) + _1412;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1413)) + _1413;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1414)) + _1414;
    float _1753 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1730));
    float _1774 = _1038 * 0.5;
    float _1775 = _1039 * 0.5;
    float _1776 = _1040 * 0.5;
    float _1777 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1780 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1783 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1817;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1790 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1794 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1798 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1805 = dot(vec4(cbModelParam._m0[39u]), vec4(_1774, _1775, _1776, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1828;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1819 = dot(vec4(cbModelParam._m0[40u]), vec4(_1774, _1775, _1776, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1832 = (_1828 * cbModelParam._m0[1u].x) + (_1817 * (1.0 - cbModelParam._m0[1u].x));
    float _1842 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _866);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1842 : min(cbModelParam._m0[25u].z, _1842));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1890 = fma(_1100, cbModelParam._m0[13u].z, fma(_1096, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092)) + cbModelParam._m0[13u].w;
        float _1894 = fma(_1100, cbModelParam._m0[14u].z, fma(_1096, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092)) + cbModelParam._m0[14u].w;
        float _1898 = fma(_1100, cbModelParam._m0[15u].z, fma(_1096, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092)) + cbModelParam._m0[15u].w;
        float _1901 = fma(_1040, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038));
        float _1904 = fma(_1040, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038));
        float _1907 = fma(_1040, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038));
        float _1935;
        if (_1901 > 0.0)
        {
            _1935 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1935 = frontier_phi_14_12_ladder;
        }
        float _2138;
        if (_1904 > 0.0)
        {
            _2138 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2138 = frontier_phi_23_19_ladder;
        }
        float _2392;
        if (_1907 > 0.0)
        {
            _2392 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2392 = frontier_phi_35_30_ladder;
        }
        float _2394 = isnan(_2138) ? _1935 : (isnan(_1935) ? _2138 : min(_1935, _2138));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1901) + _1890;
        float _2400 = (_2395 * _1904) + _1894;
        float _2401 = (_2395 * _1907) + _1898;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1843);
            frontier_phi_13_35_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1923 = frontier_phi_13_35_ladder_2;
        _1925 = frontier_phi_13_35_ladder_1;
        _1927 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1038, _1039, _1040), _1843);
        _1923 = _1911.x * cbModelParam._m0[1u].y;
        _1925 = _1911.y * cbModelParam._m0[1u].y;
        _1927 = _1911.z * cbModelParam._m0[1u].y;
    }
    float _1931 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _866);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1931 : min(cbModelParam._m0[25u].w, _1931));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1100, cbModelParam._m0[21u].z, fma(_1096, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1100, cbModelParam._m0[22u].z, fma(_1096, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1100, cbModelParam._m0[23u].z, fma(_1096, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1040, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038));
        float _1999 = fma(_1040, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038));
        float _2002 = fma(_1040, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038));
        float _2143;
        if (_1996 > 0.0)
        {
            _2143 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2143 = frontier_phi_25_21_ladder;
        }
        float _2419;
        if (_1999 > 0.0)
        {
            _2419 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2419 = frontier_phi_37_32_ladder;
        }
        float _2632;
        if (_2002 > 0.0)
        {
            _2632 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2632 = frontier_phi_46_43_ladder;
        }
        float _2634 = isnan(_2419) ? _2143 : (isnan(_2143) ? _2419 : min(_2143, _2419));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1996) + _1985;
        float _2640 = (_2635 * _1999) + _1989;
        float _2641 = (_2635 * _2002) + _1993;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1932);
            frontier_phi_22_46_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_22_46_ladder_2;
        _2023 = frontier_phi_22_46_ladder_1;
        _2025 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1038, _1039, _1040), _1932);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2038 = (((_1063 * _1015) + _1064) * _1030) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2040 = (((_1063 * _1017) + _1064) * _1030) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2042 = (((_1063 * _1018) + _1064) * _1030) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2040, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2040, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2040, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    uvec4 _2061 = floatBitsToUint(cbInstanceData._m0[_990 + 5u]);
    uint _2063 = _2061.x * 14u;
    uint _2064 = _2063 + 13u;
    float _2071 = _1030 + (-1.0);
    float _2076 = (cbLight._m0[_2064].x * _2071) + 1.0;
    float _2077 = (cbLight._m0[_2064].y * _2071) + 1.0;
    float _2078 = (cbLight._m0[_2064].z * _2071) + 1.0;
    float _2079 = (cbLight._m0[_2064].w * _2071) + 1.0;
    uint _2080 = _2063 + 5u;
    float _2086 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2090 = _2063 + 4u;
    float _2096 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2100 = _2063 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_863, _864, _865));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_863, _864, _865));
    float _4289 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4300 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2080].x * _2086) * _2121) + ((cbLight._m0[_2090].x * _2096) * _2119);
    float _2129 = ((_2086 * cbLight._m0[_2080].y) * _2121) + ((_2096 * cbLight._m0[_2090].y) * _2119);
    float _2130 = ((_2086 * cbLight._m0[_2080].z) * _2121) + ((_2096 * cbLight._m0[_2090].z) * _2119);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2063 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2137)
    {
        _2148 = _2128;
        _2150 = _2129;
        _2152 = _2130;
    }
    else
    {
        uint _2156 = _2063 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_2063 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4311 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2175 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2128;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2129;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2130;
    }
    bool _2155 = _2135.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2155)
    {
        _2193 = _2148;
        _2195 = _2150;
        _2197 = _2152;
    }
    else
    {
        uint _2363 = _2063 + 7u;
        float _2379 = (dot(vec3(cbLight._m0[_2063 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4327 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2382 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2193 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2148;
        _2195 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2150;
        _2197 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2152;
    }
    uint _2200 = _2063 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _866) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2063].x + _944;
    float _2216 = cbLight._m0[_2063].y + _945;
    float _2217 = cbLight._m0[_2063].z + _946;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2063].xyz));
    float _4343 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2229 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2230 = dot(vec3(_863, _864, _865), vec3(_2222, _2223, _2224));
    float _4365 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2222, _2223, _2224));
    float _4376 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
    float _2251 = 0.959999978542327880859375 - _1012;
    float _2253 = 0.959999978542327880859375 - _1013;
    float _2254 = 0.959999978542327880859375 - _1014;
    float _2261 = 1.0 - _2214;
    float _2272 = (0.5 / (((_2229 * ((_2228 * _2261) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2261) + _2214) * _2228))) * _2228;
    float _4387 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2285 = _2063 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _866) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2100].x + _944;
    float _2299 = cbLight._m0[_2100].y + _945;
    float _2300 = cbLight._m0[_2100].z + _946;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2100].xyz));
    float _4398 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2312 = dot(vec3(_863, _864, _865), vec3(_2305, _2306, _2307));
    float _4409 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2305, _2306, _2307));
    float _4420 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
    float _2338 = 1.0 - _2297;
    float _2348 = (0.5 / (((_2229 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2338) + _2297) * _2311))) * _2311;
    float _4431 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2360 = (((((_2331 * _2251) + _1015) * cbLight._m0[_2285].x) * _2350) * _2086) + (((((_2250 * _2251) + _1015) * cbLight._m0[_2200].x) * _2274) * _2096);
    float _2361 = (((((_2331 * _2253) + _1017) * cbLight._m0[_2285].y) * _2350) * _2086) + (((((_2250 * _2253) + _1017) * cbLight._m0[_2200].y) * _2274) * _2096);
    float _2362 = (((((_2331 * _2254) + _1018) * cbLight._m0[_2285].z) * _2350) * _2086) + (((((_2250 * _2254) + _1018) * cbLight._m0[_2200].z) * _2274) * _2096);
    float _2424;
    float _2426;
    float _2428;
    if (_2137)
    {
        _2424 = _2360;
        _2426 = _2361;
        _2428 = _2362;
    }
    else
    {
        uint _2430 = _2063 + 2u;
        uint _2434 = _2063 + 10u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _866) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _944;
        float _2451 = cbLight._m0[_2430].y + _945;
        float _2452 = cbLight._m0[_2430].z + _946;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2430].xyz));
        float _4442 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2464 = dot(vec3(_863, _864, _865), vec3(_2457, _2458, _2459));
        float _4453 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4464 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2229 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2490) + _2449) * _2463))) * _2463;
        float _4475 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2424 = (((((_2483 * _2251) + _1015) * cbLight._m0[_2434].x) * _2502) * _2503) + _2360;
        _2426 = (((((_2483 * _2253) + _1017) * cbLight._m0[_2434].y) * _2502) * _2503) + _2361;
        _2428 = (((((_2483 * _2254) + _1018) * cbLight._m0[_2434].z) * _2502) * _2503) + _2362;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2155)
    {
        _2538 = _2424;
        _2540 = _2426;
        _2542 = _2428;
    }
    else
    {
        uint _2549 = _2063 + 3u;
        uint _2553 = _2063 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _866) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _944;
        float _2570 = cbLight._m0[_2549].y + _945;
        float _2571 = cbLight._m0[_2549].z + _946;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2549].xyz));
        float _4491 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2583 = dot(vec3(_863, _864, _865), vec3(_2576, _2577, _2578));
        float _4502 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4513 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2609 = 1.0 - _2568;
        float _2619 = (0.5 / (((_2229 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2609) + _2568) * _2582))) * _2582;
        float _4524 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2538 = (((((_2602 * _2251) + _1015) * cbLight._m0[_2553].x) * _2621) * _2622) + _2424;
        _2540 = (((((_2602 * _2253) + _1017) * cbLight._m0[_2553].y) * _2621) * _2622) + _2426;
        _2542 = (((((_2602 * _2254) + _1018) * cbLight._m0[_2553].z) * _2621) * _2622) + _2428;
    }
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_2061.y == 0u)
    {
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2697;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2697;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2697;
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.x;
        uint _2724 = uint((float(_2712.y) * floor(float(uint(cbSceneParam._m0[85u].y * _953) / _2713))) + floor(float(uint(cbSceneParam._m0[85u].x * _952) / _2713)));
        float _2734 = (log2(_2700 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        uint _2738 = uint(isnan(14.0) ? _2735 : (isnan(_2735) ? 14.0 : min(_2735, 14.0)));
        uvec4 _2743 = texelFetch(g_lightClusterGridBuffer, int(((_2738 << 2u) + (_2724 << 6u)) >> 2u));
        uint _2744 = _2743.x;
        uint _2745 = _2712.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2745 >> 4u) & 15u)) + 4294967295u) & _2744) == 0u) || ((_2745 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3043)
                {
                    frontier_phi_61_pred = _3027;
                    frontier_phi_61_pred_1 = _3032;
                    frontier_phi_61_pred_2 = _3031;
                    frontier_phi_61_pred_3 = _3030;
                    frontier_phi_61_pred_4 = _3029;
                    frontier_phi_61_pred_5 = _3028;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3042;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3033 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2698;
                        float _3218 = _3177.y - _2699;
                        float _3219 = _3177.z - _2700;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_971, _974, _977), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4550 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2698;
                        float _3253 = (-0.0) - _2699;
                        float _3254 = (-0.0) - _2700;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _1046;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_971, _974, _977), vec3(_3259, _3260, _3261));
                        float _4566 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3294 = dot(vec3(_971, _974, _977), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4577 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4588 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4599 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3086 = (_3248 * _3196.x) + _3154;
                        _3087 = (_3248 * _3196.y) + _3155;
                        _3088 = (_3248 * _3196.z) + _3156;
                        _3083 = (_3329 * _3213.x) + _3151;
                        _3084 = (_3329 * _3213.y) + _3152;
                        _3085 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_61_pred = _3083;
                    frontier_phi_61_pred_1 = _3088;
                    frontier_phi_61_pred_2 = _3087;
                    frontier_phi_61_pred_3 = _3086;
                    frontier_phi_61_pred_4 = _3085;
                    frontier_phi_61_pred_5 = _3084;
                }
                _2875 = frontier_phi_61_pred;
                _2885 = frontier_phi_61_pred_1;
                _2883 = frontier_phi_61_pred_2;
                _2881 = frontier_phi_61_pred_3;
                _2879 = frontier_phi_61_pred_4;
                _2877 = frontier_phi_61_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2875;
                    _3028 = _2877;
                    _3029 = _2879;
                    _3030 = _2881;
                    _3031 = _2883;
                    _3032 = _2885;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2891) & _2744) == 0u)
        {
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
            float _3021 = _3020 * _2698;
            float _3022 = _3020 * _2699;
            float _3023 = _3020 * _2700;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3134 = _2874;
                float _3135 = _2876;
                float _3136 = _2878;
                float _3137 = _2880;
                float _3138 = _2882;
                float _3139 = _2884;
                uint _3140 = _2891;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3150)
                    {
                        frontier_phi_67_pred = _3137;
                        frontier_phi_67_pred_1 = _3138;
                        frontier_phi_67_pred_2 = _3139;
                        frontier_phi_67_pred_3 = _3136;
                        frontier_phi_67_pred_4 = _3135;
                        frontier_phi_67_pred_5 = _3134;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        uint _3353 = _3149;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3437;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3364 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3364 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3364 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3364 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_2700, _3471.z, fma(_2699, _3471.y, _3471.x * _2698)) + _3471.w;
                            _3484 = !((fma(_2700, _3452.z, fma(_2699, _3452.y, _3452.x * _2698)) + _3452.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3379.x - _2698;
                                float _3512 = _3379.y - _2699;
                                float _3513 = _3379.z - _2700;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3380 * _3380));
                                float _4610 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3529 = sqrt(_3514) * _3395.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_971, _974, _977))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_2700, _3422.z, fma(_2699, _3422.y, _3422.x * _2698)) + _3422.w) / _3483;
                                float _3543 = (fma(_2700, _3437.z, fma(_2699, _3437.y, _3437.x * _2698)) + _3437.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4626 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _1046;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _3021;
                                float _3573 = _3519 - _3022;
                                float _3574 = _3520 - _3023;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_971, _974, _977), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4637 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3586 = dot(vec3(_971, _974, _977), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4648 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_971, _974, _977), vec3(_3518, _3519, _3520))) + _3595;
                                float _4659 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4670 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3623 * _3407.x;
                                frontier_phi_73_pred_1 = _3623 * _3407.y;
                                frontier_phi_73_pred_2 = _3549 * _3395.z;
                                frontier_phi_73_pred_3 = _3549 * _3395.y;
                                frontier_phi_73_pred_4 = _3549 * _3395.x;
                                frontier_phi_73_pred_5 = _3623 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3627 = frontier_phi_73_pred;
                            _3628 = frontier_phi_73_pred_1;
                            _3632 = frontier_phi_73_pred_2;
                            _3631 = frontier_phi_73_pred_3;
                            _3630 = frontier_phi_73_pred_4;
                            _3629 = frontier_phi_73_pred_5;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3337;
                        frontier_phi_67_pred_1 = _3338;
                        frontier_phi_67_pred_2 = _3339;
                        frontier_phi_67_pred_3 = _3336;
                        frontier_phi_67_pred_4 = _3335;
                        frontier_phi_67_pred_5 = _3334;
                    }
                    _3002 = frontier_phi_67_pred;
                    _3004 = frontier_phi_67_pred_1;
                    _3006 = frontier_phi_67_pred_2;
                    _3000 = frontier_phi_67_pred_3;
                    _2998 = frontier_phi_67_pred_4;
                    _2996 = frontier_phi_67_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2996;
                        _3135 = _2998;
                        _3136 = _3000;
                        _3137 = _3002;
                        _3138 = _3004;
                        _3139 = _3006;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3004;
                frontier_phi_55_56_ladder_1 = _3006;
                frontier_phi_55_56_ladder_2 = _3002;
                frontier_phi_55_56_ladder_3 = _3000;
                frontier_phi_55_56_ladder_4 = _2998;
                frontier_phi_55_56_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_55_56_ladder = _2882;
                frontier_phi_55_56_ladder_1 = _2884;
                frontier_phi_55_56_ladder_2 = _2880;
                frontier_phi_55_56_ladder_3 = _2878;
                frontier_phi_55_56_ladder_4 = _2876;
                frontier_phi_55_56_ladder_5 = _2874;
            }
            _2995 = frontier_phi_55_56_ladder_5;
            _2997 = frontier_phi_55_56_ladder_4;
            _2999 = frontier_phi_55_56_ladder_3;
            _3001 = frontier_phi_55_56_ladder_2;
            _3003 = frontier_phi_55_56_ladder;
            _3005 = frontier_phi_55_56_ladder_1;
        }
        float _3010 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
        _2757 = (_3010 * _3001) + _2193;
        _2759 = (_3010 * _3003) + _2195;
        _2761 = (_3010 * _3005) + _2197;
        _2763 = ((_2995 * _1015) * _3010) + _2538;
        _2765 = ((_2997 * _1017) * _3010) + _2540;
        _2767 = ((_2999 * _1018) * _3010) + _2542;
    }
    else
    {
        _2757 = _2193;
        _2759 = _2195;
        _2761 = _2197;
        _2763 = _2538;
        _2765 = _2540;
        _2767 = _2542;
    }
    uint _2773 = _991 + uint(cbMatDynParam._m0[0u].w);
    float _2779 = ((((((_788.x - _783.x) * _766) + _783.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _712) * cbMtdParam._m0[20u].x)) * _721) * cbInstanceData._m0[_2773].x;
    float _2780 = ((((((_788.y - _783.y) * _766) + _783.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_701.y - _699) * _679) + _699)) * cbMtdParam._m0[20u].y)) * _721) * cbInstanceData._m0[_2773].y;
    float _2781 = ((((((_788.z - _783.z) * _766) + _783.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_701.z - _700) * _679) + _700)) * cbMtdParam._m0[20u].z)) * _721) * cbInstanceData._m0[_2773].z;
    float _4686 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4697 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4708 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2798 = (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2757 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1030))) + ((_2763 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1832)) * cbPerFrame._m0[3u].x)) + _2779;
    float _2800 = (_2780 + ((_2765 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1832)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2759 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1030)));
    float _2802 = (_2781 + ((_2767 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1832)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2761 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1030)));
    float _4734 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2815 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    uint _2816 = _990 + 6u;
    float _2824 = _952 / cbSceneParam._m0[86u].x;
    float _2825 = _953 / cbSceneParam._m0[86u].y;
    vec4 _2839 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2841 = _2839.x;
    float _2842 = _2839.y;
    float _2843 = _2839.z;
    float _2844 = _2839.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _2900 = _2899 / _886;
        float _2911 = _2900 * _937;
        float _2912 = _938 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2914 = _2900 * _939;
        float _2916 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2917 = _2916 + cbSceneParam._m0[79u].w;
        float _2918 = cbSceneParam._m0[79u].w - _2912;
        float _2924 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2914 * _2914));
        float _2927 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2924;
        float _2932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2913 - _2916) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2917 > 0.0) ? exp2(_2932 * _2917) : (2.0 - exp2(_2934 * _2917))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2927;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : max(_2917, _2918));
            float _3058 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : min(_2917, _2918));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3096 = ((abs(_2924 / _2913) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2932 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2932 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2934 * _3067) - exp2(_2934 * _3068)) * _3056))) + (_2927 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2844);
        _2936 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2841;
        _2938 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2842;
        _2940 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2843;
        _2942 = _3107 * _2844;
    }
    else
    {
        _2936 = _2841;
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
    }
    float _2954 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2955 = _2954 == 3.0;
    float _2956 = log2(_2942);
    float _2960 = exp2(_2956 * cbSceneParam._m0[78u].x);
    float _2961 = exp2(_2956 * cbSceneParam._m0[78u].y);
    float _2962 = exp2(_2956 * cbSceneParam._m0[78u].z);
    float _2963 = _2960 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0)));
    float _2964 = _2961 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)));
    float _2965 = _2962 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)));
    float _2974 = (_2954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2974 * (_2955 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.y = _2974 * (_2955 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.z = _2974 * (_2955 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.w = cbInstanceData._m0[_2816].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2779) * _2815) * _2960) * _2974;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2780) * _2815) * _2961) * _2974;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2781) * _2815) * _2962) * _2974;
    SV_Target_1.w = cbInstanceData._m0[_2816].w;
}


