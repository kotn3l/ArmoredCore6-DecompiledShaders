#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1473;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _267 = log2(0.0);
    float _269 = exp2(_267 * cbMtdParam._m0[24u].x);
    float _270 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _271 = isnan(1.0) ? _270 : (isnan(_270) ? 1.0 : min(_270, 1.0));
    vec4 _285 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _289 = _285.z;
    float _297 = exp2(log2(_289 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _311 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _314 = _311.y;
    float _317 = (_311.x + (-0.02500000037252902984619140625)) * 8.0;
    float _321 = roundEven(5.0 - _317);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(4.0) ? _322 : (isnan(_322) ? 4.0 : min(_322, 4.0));
    float _336 = floor(_323);
    vec4 _339 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _336));
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[17u].x;
    _192[0u] = cbMtdParam._m0[17u].y;
    _193[0u] = cbMtdParam._m0[17u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[14u].x;
    _192[2u] = cbMtdParam._m0[14u].y;
    _193[2u] = cbMtdParam._m0[14u].z;
    _191[3u] = cbMtdParam._m0[13u].x;
    _192[3u] = cbMtdParam._m0[13u].y;
    _193[3u] = cbMtdParam._m0[13u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[18u].x;
    _192[5u] = cbMtdParam._m0[18u].y;
    _193[5u] = cbMtdParam._m0[18u].z;
    float _403 = roundEven(_317);
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    uint _406 = uint(int(isnan(5.0) ? _404 : (isnan(_404) ? 5.0 : min(_404, 5.0))));
    vec4 _436 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _447 = cbMtdParam._m0[9u].x * _436.x;
    float _448 = cbMtdParam._m0[9u].y * _436.y;
    float _449 = cbMtdParam._m0[9u].z * _436.z;
    float _456 = ((((((_191[_406] - cbMtdParam._m0[10u].x) * _314) + cbMtdParam._m0[10u].x) * _339.x) - _447) * _299) + _447;
    float _457 = ((((((_192[_406] - cbMtdParam._m0[10u].y) * _314) + cbMtdParam._m0[10u].y) * _339.y) - _448) * _299) + _448;
    float _458 = ((((((_193[_406] - cbMtdParam._m0[10u].z) * _314) + cbMtdParam._m0[10u].z) * _339.z) - _449) * _299) + _449;
    float _464 = exp2(log2(_285.w) * cbMtdParam._m0[24u].w);
    vec4 _477 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _497 = (((cbMtdParam._m0[16u].x * _477.x) - _456) * _464) + _456;
    float _498 = (((cbMtdParam._m0[16u].y * _477.y) - _457) * _464) + _457;
    float _499 = (((cbMtdParam._m0[16u].z * _477.z) - _458) * _464) + _458;
    vec4 _511 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _536 = (_257.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _511.x) - _497) * _271) + _497);
    float _538 = (_257.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _511.y) - _498) * _271) + _498);
    float _540 = (_257.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _511.z) - _499) * _271) + _499);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _577 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    uint _579 = uint(int(isnan(4.0) ? _577 : (isnan(_577) ? 4.0 : min(_577, 4.0))));
    float _586 = ((_187[_579] - cbMtdParam._m0[23u].z) * _299) + cbMtdParam._m0[23u].z;
    float _589 = ((cbMtdParam._m0[23u].w - _586) * _464) + _586;
    float _592 = ((cbMtdParam._m0[26u].y - _589) * _271) + _589;
    vec4 _607 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _336));
    vec4 _624 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _632 = cbMtdParam._m0[23u].x + _624.z;
    float _635 = (((_607.z + _186[_579]) - _632) * _299) + _632;
    vec4 _647 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _658 = (((_647.z - _635) + cbMtdParam._m0[30u].x) * _464) + _635;
    float _664 = ((((_289 * 2.0) * _658) - _658) * cbMtdParam._m0[25u].w) + _658;
    vec4 _676 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _687 = (((cbMtdParam._m0[24u].z + _676.z) - _664) * _271) + _664;
    float _700 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _723 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_700 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _700) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _727 = cbPerFrame._m0[22u].x * 2.0;
    float _728 = _727 * cbMtdParam._m0[28u].z;
    float _731 = (_723.x * 0.5) + (-0.25);
    float _734 = (_723.y * 0.5) + (-0.25);
    float _735 = _734 * cbMtdParam._m0[28u].y;
    float _737 = (-0.0) - (cbMtdParam._m0[28u].y * _731);
    float _739 = fract(_728);
    float _741 = fract(_728 + 0.5);
    float _753 = abs((_739 * 2.0) + (-1.0));
    vec4 _769 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_739 * _737) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_735 * _739) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _771 = _769.x;
    float _772 = _769.y;
    float _773 = _769.z;
    vec4 _774 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_741 * _737) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_735 * _741) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _785 = ((_774.x - _771) * _753) + _771;
    float _792 = exp2(log2(_785 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _793 = isnan(cbMtdParam._m0[29u].y) ? _792 : (isnan(_792) ? cbMtdParam._m0[29u].y : max(_792, cbMtdParam._m0[29u].y));
    float _794 = isnan(cbMtdParam._m0[29u].z) ? _793 : (isnan(_793) ? cbMtdParam._m0[29u].z : min(_793, cbMtdParam._m0[29u].z));
    float _818 = (cbMtdParam._m0[33u].x * _700) + TEXCOORD;
    float _819 = (cbMtdParam._m0[33u].y * _700) + TEXCOORD_1;
    float _822 = _727 * cbMtdParam._m0[27u].w;
    float _823 = _734 * cbMtdParam._m0[27u].z;
    float _825 = (-0.0) - (cbMtdParam._m0[27u].z * _731);
    float _826 = fract(_822);
    float _828 = fract(_822 + 0.5);
    float _839 = abs((_826 * 2.0) + (-1.0));
    vec4 _856 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_826 * _825) + _818) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_823 * _826) + _819) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _861 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_828 * _825) + _818) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_823 * _828) + _819) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _895 = ((_607.x - _626) * _299) + _626;
    float _896 = ((_607.y - _627) * _299) + _627;
    float _901 = ((_647.x - _895) * _464) + _895;
    float _902 = ((_647.y - _896) * _464) + _896;
    float _911 = ((((_676.x - _901) * _271) + _901) * 2.0) + (-1.0);
    float _912 = ((((_676.y - _902) * _271) + _902) * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4175 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _918 = sqrt(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))));
    float _921 = (cbMtdParam._m0[26u].z * ((_285.x * 2.0) + (-1.0))) + _911;
    float _922 = (cbMtdParam._m0[26u].z * ((_285.y * 2.0) + (-1.0))) + _912;
    float _925 = fma(_918, _233 * NORMAL.x, fma(_922, _240 * TANGENT.x, (_226 * _218) * _921));
    float _928 = fma(_918, _233 * NORMAL.y, fma(_922, _240 * TANGENT.y, (_226 * _219) * _921));
    float _931 = fma(_918, _233 * NORMAL.z, fma(_922, _240 * TANGENT.z, (_226 * _220) * _921));
    float _935 = inversesqrt(dot(vec3(_925, _928, _931), vec3(_925, _928, _931)));
    float _936 = _935 * _925;
    float _937 = _935 * _928;
    float _938 = _935 * _931;
    float _4186 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _939 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4208 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4219 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4230 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _943 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _959 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1010 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1000);
    float _1011 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1000);
    float _1012 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1000);
    float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
    float _1017 = _1010 * _1016;
    float _1018 = _1011 * _1016;
    float _1019 = _1012 * _1016;
    float _1025 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1026 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1044 = fma(_938, cbSceneParam._m0[5u].z, fma(_937, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _936));
    float _1047 = fma(_938, cbSceneParam._m0[6u].z, fma(_937, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _936));
    float _1050 = fma(_938, cbSceneParam._m0[7u].z, fma(_937, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _936));
    uint _1063 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1064 = _1063 + 9u;
    uint _1065 = _1064 + uint(cbMatDynParam._m0[0u].w);
    float _1071 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_1065].x;
    float _1072 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbInstanceData._m0[_1065].y;
    float _1073 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * cbInstanceData._m0[_1065].z;
    float _4241 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _1077 = 1.0 - _943;
    float _1078 = _1074 * _1077;
    float _1079 = _1075 * _1077;
    float _1080 = _1076 * _1077;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _943;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _943;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _943;
    float _1088 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    vec4 _1100 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1025, cbSceneParam._m0[86u].y * _1026));
    float _1103 = _1100.x * TEXCOORD_3.w;
    float _1104 = dot(vec3(_936, _937, _938), vec3(_1017, _1018, _1019));
    float _1107 = _1104 * 2.0;
    float _1111 = (_1107 * _936) - _1017;
    float _1112 = (_1107 * _937) - _1018;
    float _1113 = (_1107 * _938) - _1019;
    float _1117 = abs(dot(vec3(_1017, _1018, _1019), vec3(_936, _937, _938)));
    float _4274 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1119 = sqrt(_939);
    float _1130 = exp2((_1119 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1119 * 3.0));
    float _1136 = (1.0 - _1130) * ((_1119 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1137 = _1130 * _1119;
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1472;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1173, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165));
        float _1203 = fma(_1173, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165));
        float _1207 = fma(_1173, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165));
        float _1231 = _1165 + _936;
        float _1232 = _1169 + _937;
        float _1233 = _1173 + _938;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1199;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1203;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1207;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1261 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1300 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1266.x + (-0.5));
        float _1302 = _1300 * (_1266.y + (-0.5));
        float _1303 = _1300 * (_1266.z + (-0.5));
        float _1310 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1273.x + (-0.5));
        float _1312 = _1310 * (_1273.y + (-0.5));
        float _1313 = _1310 * (_1273.z + (-0.5));
        float _1320 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1280.x + (-0.5));
        float _1322 = _1320 * (_1280.y + (-0.5));
        float _1323 = _1320 * (_1280.z + (-0.5));
        float _1330 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1287.x + (-0.5));
        float _1332 = _1330 * (_1287.y + (-0.5));
        float _1333 = _1330 * (_1287.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1354 = (dot(vec3(_936, _937, _938), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1364 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4322 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1366 + 1.0))) + _1371) * _1334;
        float _1381 = _1302 * 0.5;
        float _1382 = _1312 * 0.5;
        float _1383 = _1322 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_936, _937, _938), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4355 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1408 + 1.0))) + _1413) * _1335;
        float _1423 = _1303 * 0.5;
        float _1424 = _1313 * 0.5;
        float _1425 = _1323 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_936, _937, _938), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4388 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1450 + 1.0))) + _1455) * _1336;
        _1472 = _1303;
        _1474 = _1302;
        _1475 = _1301;
        _1476 = _1313;
        _1477 = _1312;
        _1478 = _1311;
        _1479 = _1323;
        _1480 = _1322;
        _1481 = _1321;
        _1482 = _1336;
        _1483 = _1335;
        _1484 = _1334;
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1473;
        _1474 = _1473;
        _1475 = _1473;
        _1476 = _1473;
        _1477 = _1473;
        _1478 = _1473;
        _1479 = _1473;
        _1480 = _1473;
        _1481 = _1473;
        _1482 = _1473;
        _1483 = _1473;
        _1484 = _1473;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1510 = fma(_1173, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165));
        float _1514 = fma(_1173, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165));
        float _1518 = fma(_1173, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165));
        float _1541 = _1165 + _936;
        float _1542 = _1169 + _937;
        float _1543 = _1173 + _938;
        float _1553 = fma(_1543, cbModelParam._m0[30u].z, fma(_1542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1541)) - _1510;
        float _1554 = fma(_1543, cbModelParam._m0[31u].z, fma(_1542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1541)) - _1514;
        float _1555 = fma(_1543, cbModelParam._m0[32u].z, fma(_1542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1541)) - _1518;
        float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
        float _1572 = ((_1559 * _1553) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1510 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1573 = ((_1559 * _1554) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1514 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1559 * _1555) / cbModelParam._m0[35u].z) + ((((((_1518 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        float _1609 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1576.x + (-0.5));
        float _1611 = _1609 * (_1576.y + (-0.5));
        float _1612 = _1609 * (_1576.z + (-0.5));
        float _1619 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1583.x + (-0.5));
        float _1621 = _1619 * (_1583.y + (-0.5));
        float _1622 = _1619 * (_1583.z + (-0.5));
        float _1629 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1590.x + (-0.5));
        float _1631 = _1629 * (_1590.y + (-0.5));
        float _1632 = _1629 * (_1590.z + (-0.5));
        float _1639 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1597.x + (-0.5));
        float _1641 = _1639 * (_1597.y + (-0.5));
        float _1642 = _1639 * (_1597.z + (-0.5));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = _1610 * 0.5;
        float _1647 = _1620 * 0.5;
        float _1648 = _1630 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_936, _937, _938), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4451 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1673 + 1.0))) + _1678) * _1643;
        float _1688 = _1611 * 0.5;
        float _1689 = _1621 * 0.5;
        float _1690 = _1631 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_936, _937, _938), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4484 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1715 + 1.0))) + _1720) * _1644;
        float _1730 = _1612 * 0.5;
        float _1731 = _1622 * 0.5;
        float _1732 = _1632 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_936, _937, _938), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4517 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1757 + 1.0))) + _1762) * _1645;
        _1779 = _1612;
        _1780 = _1611;
        _1781 = _1610;
        _1782 = _1622;
        _1783 = _1621;
        _1784 = _1620;
        _1785 = _1632;
        _1786 = _1631;
        _1787 = _1630;
        _1788 = _1645;
        _1789 = _1644;
        _1790 = _1643;
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
    }
    else
    {
        _1779 = _1473;
        _1780 = _1473;
        _1781 = _1473;
        _1782 = _1473;
        _1783 = _1473;
        _1784 = _1473;
        _1785 = _1473;
        _1786 = _1473;
        _1787 = _1473;
        _1788 = _1473;
        _1789 = _1473;
        _1790 = _1473;
        _1791 = 0.0;
        _1792 = 0.0;
        _1793 = 0.0;
    }
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1485)) + _1485;
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1486)) + _1486;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1487)) + _1487;
    float _1826 = fma(_1805, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1803 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1805, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1803 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1805, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1803));
    float _1847 = _1111 * 0.5;
    float _1848 = _1112 * 0.5;
    float _1849 = _1113 * 0.5;
    float _1850 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1853 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1856 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1890;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1863 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1472, _1476, _1479, _1482));
        float _1867 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1871 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1878 = dot(vec4(cbModelParam._m0[39u]), vec4(_1847, _1848, _1849, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1878) ? 0.0 : (isnan(0.0) ? _1878 : max(0.0, _1878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1901;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1892 = dot(vec4(cbModelParam._m0[40u]), vec4(_1847, _1848, _1849, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1905 = (_1901 * cbModelParam._m0[1u].x) + (_1890 * (1.0 - cbModelParam._m0[1u].x));
    float _1915 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _939);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1915 : min(cbModelParam._m0[25u].z, _1915));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1963 = fma(_1173, cbModelParam._m0[13u].z, fma(_1169, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165)) + cbModelParam._m0[13u].w;
        float _1967 = fma(_1173, cbModelParam._m0[14u].z, fma(_1169, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165)) + cbModelParam._m0[14u].w;
        float _1971 = fma(_1173, cbModelParam._m0[15u].z, fma(_1169, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165)) + cbModelParam._m0[15u].w;
        float _1974 = fma(_1113, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111));
        float _1977 = fma(_1113, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111));
        float _1980 = fma(_1113, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111));
        float _2008;
        if (_1974 > 0.0)
        {
            _2008 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2008 = frontier_phi_14_12_ladder;
        }
        float _2179;
        if (_1977 > 0.0)
        {
            _2179 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2179 = frontier_phi_23_19_ladder;
        }
        float _2473;
        if (_1980 > 0.0)
        {
            _2473 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2473 = frontier_phi_35_30_ladder;
        }
        float _2475 = isnan(_2179) ? _2008 : (isnan(_2008) ? _2179 : min(_2008, _2179));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1974) + _1963;
        float _2481 = (_2476 * _1977) + _1967;
        float _2482 = (_2476 * _1980) + _1971;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2483;
        float _2487 = _2483 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 > _2487) || ((_2481 < _2485) || ((_2480 < _2485) || (_2480 > _2487))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2482, cbModelParam._m0[9u].z, fma(_2481, cbModelParam._m0[9u].y, _2480 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2482, cbModelParam._m0[10u].z, fma(_2481, cbModelParam._m0[10u].y, _2480 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2482, cbModelParam._m0[11u].z, fma(_2481, cbModelParam._m0[11u].y, _2480 * cbModelParam._m0[11u].x))), _1916);
            frontier_phi_13_35_ladder = _2627.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2627.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2627.x * cbModelParam._m0[1u].y;
        }
        _1996 = frontier_phi_13_35_ladder_2;
        _1998 = frontier_phi_13_35_ladder_1;
        _2000 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1111, _1112, _1113), _1916);
        _1996 = _1984.x * cbModelParam._m0[1u].y;
        _1998 = _1984.y * cbModelParam._m0[1u].y;
        _2000 = _1984.z * cbModelParam._m0[1u].y;
    }
    float _2004 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _939);
    float _2005 = isnan(_2004) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2004 : min(cbModelParam._m0[25u].w, _2004));
    float _2094;
    float _2096;
    float _2098;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2058 = fma(_1173, cbModelParam._m0[21u].z, fma(_1169, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165)) + cbModelParam._m0[21u].w;
        float _2062 = fma(_1173, cbModelParam._m0[22u].z, fma(_1169, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165)) + cbModelParam._m0[22u].w;
        float _2066 = fma(_1173, cbModelParam._m0[23u].z, fma(_1169, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165)) + cbModelParam._m0[23u].w;
        float _2069 = fma(_1113, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111));
        float _2072 = fma(_1113, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111));
        float _2075 = fma(_1113, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111));
        float _2184;
        if (_2069 > 0.0)
        {
            _2184 = abs((1.0 - _2058) / _2069);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2058 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2184 = frontier_phi_25_21_ladder;
        }
        float _2500;
        if (_2072 > 0.0)
        {
            _2500 = abs((1.0 - _2062) / _2072);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2062 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2500 = frontier_phi_37_32_ladder;
        }
        float _2838;
        if (_2075 > 0.0)
        {
            _2838 = abs((1.0 - _2066) / _2075);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2066 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2838 = frontier_phi_47_44_ladder;
        }
        float _2840 = isnan(_2500) ? _2184 : (isnan(_2184) ? _2500 : min(_2184, _2500));
        float _2841 = isnan(_2838) ? _2840 : (isnan(_2840) ? _2838 : min(_2840, _2838));
        float _2845 = (_2841 * _2069) + _2058;
        float _2846 = (_2841 * _2072) + _2062;
        float _2847 = (_2841 * _2075) + _2066;
        float _2848 = _2841 * 9.9999997473787516355514526367188e-05;
        float _2849 = (-1.0) - _2848;
        float _2851 = _2848 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2847 > _2851) || ((_2847 < _2849) || ((_2846 > _2851) || ((_2846 < _2849) || ((_2845 < _2849) || (_2845 > _2851))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2847, cbModelParam._m0[17u].z, fma(_2846, cbModelParam._m0[17u].y, _2845 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2847, cbModelParam._m0[18u].z, fma(_2846, cbModelParam._m0[18u].y, _2845 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2847, cbModelParam._m0[19u].z, fma(_2846, cbModelParam._m0[19u].y, _2845 * cbModelParam._m0[19u].x))), _2005);
            frontier_phi_22_47_ladder = _2969.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2969.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2969.x * cbModelParam._m0[1u].z;
        }
        _2094 = frontier_phi_22_47_ladder_2;
        _2096 = frontier_phi_22_47_ladder_1;
        _2098 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2078 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1111, _1112, _1113), _2005);
        _2094 = _2078.x * cbModelParam._m0[1u].z;
        _2096 = _2078.y * cbModelParam._m0[1u].z;
        _2098 = _2078.z * cbModelParam._m0[1u].z;
    }
    float _2111 = (((_1136 * _1088) + _1137) * _1103) * ((cbModelParam._m0[1u].w * (_2094 - _1996)) + _1996);
    float _2113 = (((_1136 * _1090) + _1137) * _1103) * ((cbModelParam._m0[1u].w * (_2096 - _1998)) + _1998);
    float _2115 = (((_1136 * _1091) + _1137) * _1103) * ((cbModelParam._m0[1u].w * (_2098 - _2000)) + _2000);
    float _2118 = fma(_2115, cbSceneParam._m0[89u].z, fma(_2113, cbSceneParam._m0[89u].y, _2111 * cbSceneParam._m0[89u].x));
    float _2121 = fma(_2115, cbSceneParam._m0[90u].z, fma(_2113, cbSceneParam._m0[90u].y, _2111 * cbSceneParam._m0[90u].x));
    float _2124 = fma(_2115, cbSceneParam._m0[91u].z, fma(_2113, cbSceneParam._m0[91u].y, _2111 * cbSceneParam._m0[91u].x));
    float _2158 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2162 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2171 = _2158 / _2170;
    float _2172 = _2162 / _2170;
    float _2173 = _2166 / _2170;
    float _2319;
    float _2320;
    float _2321;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2200 = ((uint(_2173 > cbSceneParam._m0[59u].y) + uint(_2173 > cbSceneParam._m0[59u].x)) + uint(_2173 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2201 = _2200 + 43u;
        uint _2209 = _2200 + 44u;
        uint _2217 = _2200 + 45u;
        uint _2225 = _2200 + 46u;
        float _2236 = fma(_2170, cbSceneParam._m0[_2201].w, fma(_2166, cbSceneParam._m0[_2201].z, fma(_2162, cbSceneParam._m0[_2201].y, _2158 * cbSceneParam._m0[_2201].x)));
        float _2240 = fma(_2170, cbSceneParam._m0[_2209].w, fma(_2166, cbSceneParam._m0[_2209].z, fma(_2162, cbSceneParam._m0[_2209].y, _2158 * cbSceneParam._m0[_2209].x)));
        float _2248 = fma(_2170, cbSceneParam._m0[_2225].w, fma(_2166, cbSceneParam._m0[_2225].z, fma(_2162, cbSceneParam._m0[_2225].y, _2158 * cbSceneParam._m0[_2225].x)));
        float _2252 = cbSceneParam._m0[33u].z * _2248;
        float _2254 = cbSceneParam._m0[33u].w * _2248;
        float _2257 = fma(_2170, cbSceneParam._m0[_2217].w, fma(_2166, cbSceneParam._m0[_2217].z, fma(_2162, cbSceneParam._m0[_2217].y, _2158 * cbSceneParam._m0[_2217].x))) / _2248;
        float _2305 = (cbSceneParam._m0[33u].x - sqrt(((_2172 * _2172) + (_2171 * _2171)) + (_2173 * _2173))) * cbSceneParam._m0[33u].y;
        float _4643 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2312 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 + _2236) / _2248, (_2254 + _2240) / _2248), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2254 + _2236) / _2248, (_2240 - _2252) / _2248), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2236 - _2252) / _2248, (_2240 - _2254) / _2248), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2236 - _2254) / _2248, (_2252 + _2240) / _2248), _2257), 0.0)).x), vec4(0.25)));
        _2319 = 1.0 - (_2312 * cbSceneParam._m0[34u].x);
        _2320 = 1.0 - (_2312 * cbSceneParam._m0[34u].y);
        _2321 = 1.0 - (_2312 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2319 = 1.0;
        _2320 = 1.0;
        _2321 = 1.0;
    }
    float _2385;
    float _2387;
    float _2389;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2373 = fma(_2170, cbSceneParam._m0[63u].w, fma(_2166, cbSceneParam._m0[63u].z, fma(_2162, cbSceneParam._m0[63u].y, _2158 * cbSceneParam._m0[63u].x)));
        float _2374 = fma(_2170, cbSceneParam._m0[60u].w, fma(_2166, cbSceneParam._m0[60u].z, fma(_2162, cbSceneParam._m0[60u].y, _2158 * cbSceneParam._m0[60u].x))) / _2373;
        float _2375 = fma(_2170, cbSceneParam._m0[61u].w, fma(_2166, cbSceneParam._m0[61u].z, fma(_2162, cbSceneParam._m0[61u].y, _2158 * cbSceneParam._m0[61u].x))) / _2373;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2374 >= cbSceneParam._m0[64u].x) && (_2375 >= cbSceneParam._m0[64u].y)) && (_2374 <= cbSceneParam._m0[64u].z)) && (_2375 <= cbSceneParam._m0[64u].w))
        {
            float _2513 = fma(_2170, cbSceneParam._m0[62u].w, fma(_2166, cbSceneParam._m0[62u].z, fma(_2162, cbSceneParam._m0[62u].y, _2158 * cbSceneParam._m0[62u].x))) / _2373;
            float _2517 = isnan(cbSceneParam._m0[41u].w) ? _2513 : (isnan(_2513) ? cbSceneParam._m0[41u].w : max(_2513, cbSceneParam._m0[41u].w));
            float _2560 = (cbSceneParam._m0[33u].x - sqrt(((_2172 * _2172) + (_2171 * _2171)) + (_2173 * _2173))) * cbSceneParam._m0[33u].y;
            float _4659 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
            float _2567 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2374, cbSceneParam._m0[33u].w + _2375), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2374, _2375 - cbSceneParam._m0[33u].z), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2374 - cbSceneParam._m0[33u].z, _2375 - cbSceneParam._m0[33u].w), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2374 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2375), _2517), 0.0)).x), vec4(0.25)));
            float _2571 = 1.0 - (_2567 * cbSceneParam._m0[34u].x);
            float _2572 = 1.0 - (_2567 * cbSceneParam._m0[34u].y);
            float _2573 = 1.0 - (_2567 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2573) ? _2321 : (isnan(_2321) ? _2573 : min(_2321, _2573));
            frontier_phi_34_33_ladder_1 = isnan(_2572) ? _2320 : (isnan(_2320) ? _2572 : min(_2320, _2572));
            frontier_phi_34_33_ladder_2 = isnan(_2571) ? _2319 : (isnan(_2319) ? _2571 : min(_2319, _2571));
        }
        else
        {
            frontier_phi_34_33_ladder = _2321;
            frontier_phi_34_33_ladder_1 = _2320;
            frontier_phi_34_33_ladder_2 = _2319;
        }
        _2385 = frontier_phi_34_33_ladder_2;
        _2387 = frontier_phi_34_33_ladder_1;
        _2389 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2385 = _2319;
        _2387 = _2320;
        _2389 = _2321;
    }
    uvec4 _2394 = floatBitsToUint(cbInstanceData._m0[_1063 + 5u]);
    uint _2396 = _2394.x * 14u;
    uint _2397 = _2396 + 13u;
    float _2404 = _1103 + (-1.0);
    float _2409 = (cbLight._m0[_2397].x * _2404) + 1.0;
    float _2410 = (cbLight._m0[_2397].y * _2404) + 1.0;
    float _2411 = (cbLight._m0[_2397].z * _2404) + 1.0;
    float _2412 = (cbLight._m0[_2397].w * _2404) + 1.0;
    uint _2413 = _2396 + 5u;
    float _2419 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
    uint _2423 = _2396 + 4u;
    float _2432 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
    uint _2436 = _2396 | 1u;
    float _2447 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_936, _937, _938));
    float _2450 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_936, _937, _938));
    float _4695 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _4706 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2455 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * 0.3183098733425140380859375;
    float _2457 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * 0.3183098733425140380859375;
    float _2464 = ((cbLight._m0[_2413].x * _2419) * _2457) + (((cbLight._m0[_2423].x * _2385) * _2432) * _2455);
    float _2465 = ((_2419 * cbLight._m0[_2413].y) * _2457) + (((cbLight._m0[_2423].y * _2387) * _2432) * _2455);
    float _2466 = ((_2419 * cbLight._m0[_2413].z) * _2457) + (((cbLight._m0[_2423].z * _2389) * _2432) * _2455);
    uvec4 _2470 = floatBitsToUint(cbLight._m0[_2396 + 12u]);
    bool _2472 = _2470.x == 0u;
    float _2574;
    float _2576;
    float _2578;
    if (_2472)
    {
        _2574 = _2464;
        _2576 = _2465;
        _2578 = _2466;
    }
    else
    {
        uint _2582 = _2396 + 6u;
        float _2598 = (dot(vec3(cbLight._m0[_2396 + 2u].xyz), vec3(_936, _937, _938)) * 0.5) + 0.5;
        float _2599 = _2598 * _2598;
        float _4717 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2600 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2601 = isnan(1.0) ? _2411 : (isnan(_2411) ? 1.0 : min(_2411, 1.0));
        _2574 = (((cbLight._m0[_2582].x * 0.3183098733425140380859375) * _2600) * _2601) + _2464;
        _2576 = (((cbLight._m0[_2582].y * 0.3183098733425140380859375) * _2600) * _2601) + _2465;
        _2578 = (((cbLight._m0[_2582].z * 0.3183098733425140380859375) * _2600) * _2601) + _2466;
    }
    bool _2581 = _2470.y == 0u;
    float _2636;
    float _2638;
    float _2640;
    if (_2581)
    {
        _2636 = _2574;
        _2638 = _2576;
        _2640 = _2578;
    }
    else
    {
        uint _2809 = _2396 + 7u;
        float _2825 = (dot(vec3(cbLight._m0[_2396 + 3u].xyz), vec3(_936, _937, _938)) * 0.5) + 0.5;
        float _2826 = _2825 * _2825;
        float _4733 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2827 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2828 = isnan(1.0) ? _2412 : (isnan(_2412) ? 1.0 : min(_2412, 1.0));
        _2636 = (((cbLight._m0[_2809].x * 0.3183098733425140380859375) * _2827) * _2828) + _2574;
        _2638 = (((cbLight._m0[_2809].y * 0.3183098733425140380859375) * _2827) * _2828) + _2576;
        _2640 = (((cbLight._m0[_2809].z * 0.3183098733425140380859375) * _2827) * _2828) + _2578;
    }
    uint _2643 = _2396 + 8u;
    float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _939) * 0.949999988079071044921875);
    float _2657 = _2656 * _2656;
    float _2658 = cbLight._m0[_2396].x + _1017;
    float _2659 = cbLight._m0[_2396].y + _1018;
    float _2660 = cbLight._m0[_2396].z + _1019;
    float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
    float _2665 = _2664 * _2658;
    float _2666 = _2664 * _2659;
    float _2667 = _2664 * _2660;
    float _2668 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2396].xyz));
    float _4749 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _4760 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _2672 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2673 = dot(vec3(_936, _937, _938), vec3(_2665, _2666, _2667));
    float _4771 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2677 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2665, _2666, _2667));
    float _4782 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2681 = _2657 * _2657;
    float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
    float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
    float _2694 = 0.959999978542327880859375 - _1085;
    float _2696 = 0.959999978542327880859375 - _1086;
    float _2697 = 0.959999978542327880859375 - _1087;
    float _2704 = 1.0 - _2657;
    float _2715 = (0.5 / (((_2672 * ((_2671 * _2704) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2672 * _2704) + _2657) * _2671))) * _2671;
    float _4793 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2717 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
    uint _2731 = _2396 + 9u;
    float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _939) * 0.949999988079071044921875);
    float _2743 = _2742 * _2742;
    float _2744 = cbLight._m0[_2436].x + _1017;
    float _2745 = cbLight._m0[_2436].y + _1018;
    float _2746 = cbLight._m0[_2436].z + _1019;
    float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
    float _2751 = _2750 * _2744;
    float _2752 = _2750 * _2745;
    float _2753 = _2750 * _2746;
    float _2754 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2436].xyz));
    float _4804 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
    float _2758 = dot(vec3(_936, _937, _938), vec3(_2751, _2752, _2753));
    float _4815 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _2762 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2751, _2752, _2753));
    float _4826 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2766 = _2743 * _2743;
    float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
    float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0);
    float _2784 = 1.0 - _2743;
    float _2794 = (0.5 / (((_2672 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2672 * _2784) + _2743) * _2757))) * _2757;
    float _4837 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2796 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
    float _2806 = (((((_2777 * _2694) + _1088) * cbLight._m0[_2731].x) * _2796) * _2419) + ((((cbLight._m0[_2643].x * _2385) * ((_2693 * _2694) + _1088)) * _2717) * _2432);
    float _2807 = (((((_2777 * _2696) + _1090) * cbLight._m0[_2731].y) * _2796) * _2419) + ((((cbLight._m0[_2643].y * _2387) * ((_2693 * _2696) + _1090)) * _2717) * _2432);
    float _2808 = (((((_2777 * _2697) + _1091) * cbLight._m0[_2731].z) * _2796) * _2419) + ((((cbLight._m0[_2643].z * _2389) * ((_2693 * _2697) + _1091)) * _2717) * _2432);
    float _2864;
    float _2866;
    float _2868;
    if (_2472)
    {
        _2864 = _2806;
        _2866 = _2807;
        _2868 = _2808;
    }
    else
    {
        uint _2870 = _2396 + 2u;
        uint _2874 = _2396 + 10u;
        float _2888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2870].w)) * _939) * 0.949999988079071044921875);
        float _2889 = _2888 * _2888;
        float _2890 = cbLight._m0[_2870].x + _1017;
        float _2891 = cbLight._m0[_2870].y + _1018;
        float _2892 = cbLight._m0[_2870].z + _1019;
        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
        float _2897 = _2896 * _2890;
        float _2898 = _2896 * _2891;
        float _2899 = _2896 * _2892;
        float _2900 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2870].xyz));
        float _4848 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2904 = dot(vec3(_936, _937, _938), vec3(_2897, _2898, _2899));
        float _4859 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2908 = dot(vec3(cbLight._m0[_2870].xyz), vec3(_2897, _2898, _2899));
        float _4870 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2912 = _2889 * _2889;
        float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
        float _2923 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
        float _2930 = 1.0 - _2889;
        float _2940 = (0.5 / (((_2672 * ((_2903 * _2930) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2672 * _2930) + _2889) * _2903))) * _2903;
        float _4881 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2942 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
        float _2943 = isnan(1.0) ? _2411 : (isnan(_2411) ? 1.0 : min(_2411, 1.0));
        _2864 = (((((_2923 * _2694) + _1088) * cbLight._m0[_2874].x) * _2942) * _2943) + _2806;
        _2866 = (((((_2923 * _2696) + _1090) * cbLight._m0[_2874].y) * _2942) * _2943) + _2807;
        _2868 = (((((_2923 * _2697) + _1091) * cbLight._m0[_2874].z) * _2942) * _2943) + _2808;
    }
    float _2974;
    float _2976;
    float _2978;
    if (_2581)
    {
        _2974 = _2864;
        _2976 = _2866;
        _2978 = _2868;
    }
    else
    {
        uint _2985 = _2396 + 3u;
        uint _2989 = _2396 + 11u;
        float _3003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2985].w)) * _939) * 0.949999988079071044921875);
        float _3004 = _3003 * _3003;
        float _3005 = cbLight._m0[_2985].x + _1017;
        float _3006 = cbLight._m0[_2985].y + _1018;
        float _3007 = cbLight._m0[_2985].z + _1019;
        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
        float _3012 = _3011 * _3005;
        float _3013 = _3011 * _3006;
        float _3014 = _3011 * _3007;
        float _3015 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2985].xyz));
        float _4897 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3018 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _3019 = dot(vec3(_936, _937, _938), vec3(_3012, _3013, _3014));
        float _4908 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3022 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _3023 = dot(vec3(cbLight._m0[_2985].xyz), vec3(_3012, _3013, _3014));
        float _4919 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3027 = _3004 * _3004;
        float _3031 = ((_3022 * _3022) * (_3027 + (-1.0))) + 1.0;
        float _3038 = exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0);
        float _3045 = 1.0 - _3004;
        float _3055 = (0.5 / (((_2672 * ((_3018 * _3045) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_2672 * _3045) + _3004) * _3018))) * _3018;
        float _4930 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3057 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_3027 / ((_3031 * _3031) * 3.141590118408203125));
        float _3058 = isnan(1.0) ? _2412 : (isnan(_2412) ? 1.0 : min(_2412, 1.0));
        _2974 = (((((_3038 * _2694) + _1088) * cbLight._m0[_2989].x) * _3057) * _3058) + _2864;
        _2976 = (((((_3038 * _2696) + _1090) * cbLight._m0[_2989].y) * _3057) * _3058) + _2866;
        _2978 = (((((_3038 * _2697) + _1091) * cbLight._m0[_2989].z) * _3057) * _3058) + _2868;
    }
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    if (_2394.y == 0u)
    {
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.x;
        uint _3091 = uint((float(_3079.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1026) / _3080))) + floor(float(uint(cbSceneParam._m0[85u].x * _1025) / _3080)));
        float _3101 = (log2(_2173 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3102 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        uint _3105 = uint(isnan(14.0) ? _3102 : (isnan(_3102) ? 14.0 : min(_3102, 14.0)));
        uvec4 _3110 = texelFetch(g_lightClusterGridBuffer, int(((_3105 << 2u) + (_3091 << 6u)) >> 2u));
        uint _3111 = _3110.x;
        uint _3112 = _3079.z;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((((1u << ((_3112 >> 4u) & 15u)) + 4294967295u) & _3111) == 0u) || ((_3112 & 240u) == 0u))
        {
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
        }
        else
        {
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            uint _3379 = 0u;
            uint _3388;
            bool _3389;
            for (;;)
            {
                _3388 = texelFetch(g_lightClassification, int((((_3105 << 5u) + (_3091 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                _3389 = _3388 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3389)
                {
                    frontier_phi_66_pred = _3378;
                    frontier_phi_66_pred_1 = _3377;
                    frontier_phi_66_pred_2 = _3376;
                    frontier_phi_66_pred_3 = _3375;
                    frontier_phi_66_pred_4 = _3374;
                    frontier_phi_66_pred_5 = _3373;
                }
                else
                {
                    float _3497;
                    float _3498;
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    uint _3503;
                    _3497 = _3373;
                    _3498 = _3374;
                    _3499 = _3375;
                    _3500 = _3376;
                    _3501 = _3377;
                    _3502 = _3378;
                    _3503 = _3388;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    for (;;)
                    {
                        uint _3507 = uint(findLSB(_3503)) + (_3379 << 5u);
                        uint _3504 = (_3503 + 4294967295u) & _3503;
                        uint _3509 = _3507 * 48u;
                        vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3529 = (_3507 * 48u) + 4u;
                        vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3548 = (_3507 * 48u) + 8u;
                        vec3 _3559 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3548)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 2u)).x));
                        float _3563 = _3523.x - _2171;
                        float _3564 = _3523.y - _2172;
                        float _3565 = _3523.z - _2173;
                        float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                        float _3569 = inversesqrt(_3566);
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3573 = dot(vec3(_1044, _1047, _1050), vec3(_3570, _3571, _3572));
                        float _3578 = 1.0 - (_3566 * _3523.w);
                        float _4956 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3579 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3580 = sqrt(_3566) * _3542.w;
                        float _3583 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3573) + _3584;
                        float _3590 = _3580 * _3580;
                        float _3594 = ((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3579) / ((_3590 * 0.699999988079071044921875) + 1.0);
                        float _3598 = (-0.0) - _2171;
                        float _3599 = (-0.0) - _2172;
                        float _3600 = (-0.0) - _2173;
                        float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                        float _3605 = _3604 * _3598;
                        float _3606 = _3604 * _3599;
                        float _3607 = _3604 * _3600;
                        float _3614 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                        float _3615 = 1.0 - _1119;
                        float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                        float _3623 = _3622 * _3622;
                        float _3624 = _3623 * _3623;
                        float _3625 = _3605 + _3570;
                        float _3626 = _3606 + _3571;
                        float _3627 = _3607 + _3572;
                        float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                        float _3635 = dot(vec3(_1044, _1047, _1050), vec3(_3605, _3606, _3607));
                        float _4972 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3638 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3639 = dot(vec3(_1044, _1047, _1050), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                        float _4983 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                        float _3647 = _3583 * _3623;
                        float _3648 = _3647 * _3647;
                        float _3651 = ((1.0 - _3648) * _3573) + _3648;
                        float _4994 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3652 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3653 = 1.0 - _3623;
                        float _3663 = (0.5 / (((_3652 * ((_3638 * _3653) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3652 * _3653) + _3623) * _3638))) * _3652;
                        float _5005 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3674 = (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3646 * _3646) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125))) * _3579;
                        _3432 = (_3594 * _3542.x) + _3500;
                        _3433 = (_3594 * _3542.y) + _3501;
                        _3434 = (_3594 * _3542.z) + _3502;
                        _3429 = (_3674 * _3559.x) + _3497;
                        _3430 = (_3674 * _3559.y) + _3498;
                        _3431 = (_3674 * _3559.z) + _3499;
                        if (_3504 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3497 = _3429;
                            _3498 = _3430;
                            _3499 = _3431;
                            _3500 = _3432;
                            _3501 = _3433;
                            _3502 = _3434;
                            _3503 = _3504;
                        }
                    }
                    frontier_phi_66_pred = _3434;
                    frontier_phi_66_pred_1 = _3433;
                    frontier_phi_66_pred_2 = _3432;
                    frontier_phi_66_pred_3 = _3431;
                    frontier_phi_66_pred_4 = _3430;
                    frontier_phi_66_pred_5 = _3429;
                }
                _3231 = frontier_phi_66_pred;
                _3229 = frontier_phi_66_pred_1;
                _3227 = frontier_phi_66_pred_2;
                _3225 = frontier_phi_66_pred_3;
                _3223 = frontier_phi_66_pred_4;
                _3221 = frontier_phi_66_pred_5;
                uint _3380 = _3379 + 1u;
                if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3373 = _3221;
                    _3374 = _3223;
                    _3375 = _3225;
                    _3376 = _3227;
                    _3377 = _3229;
                    _3378 = _3231;
                    _3379 = _3380;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
        }
        uvec4 _3234 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3235 = _3234.z;
        uint _3237 = (_3235 >> 8u) & 15u;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        if (((4294967295u << _3237) & _3111) == 0u)
        {
            _3341 = _3220;
            _3343 = _3222;
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
        }
        else
        {
            float _3366 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
            float _3367 = _3366 * _2171;
            float _3368 = _3366 * _2172;
            float _3369 = _3366 * _2173;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3237 < ((_3235 >> 12u) & 15u))
            {
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3480 = _3220;
                float _3481 = _3222;
                float _3482 = _3224;
                float _3483 = _3226;
                float _3484 = _3228;
                float _3485 = _3230;
                uint _3486 = _3237;
                uint _3495;
                bool _3496;
                for (;;)
                {
                    _3495 = texelFetch(g_lightClassification, int((((_3105 << 5u) + (_3091 << 9u)) + (_3486 << 2u)) >> 2u)).x;
                    _3496 = _3495 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3496)
                    {
                        frontier_phi_72_pred = _3485;
                        frontier_phi_72_pred_1 = _3484;
                        frontier_phi_72_pred_2 = _3483;
                        frontier_phi_72_pred_3 = _3482;
                        frontier_phi_72_pred_4 = _3481;
                        frontier_phi_72_pred_5 = _3480;
                    }
                    else
                    {
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3976;
                        float _3977;
                        float _3692 = _3480;
                        float _3693 = _3481;
                        float _3694 = _3482;
                        float _3695 = _3483;
                        float _3696 = _3484;
                        float _3697 = _3485;
                        uint _3698 = _3495;
                        uint _3699;
                        vec4 _3724;
                        float _3725;
                        vec4 _3740;
                        vec3 _3752;
                        vec4 _3767;
                        vec4 _3782;
                        float _3828;
                        bool _3829;
                        for (;;)
                        {
                            uint _3709 = ((_3486 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3698));
                            _3699 = (_3698 + 4294967295u) & _3698;
                            uint _3711 = _3709 * 40u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            _3725 = _3724.w;
                            uint _3727 = (_3709 * 40u) + 4u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3742 = (_3709 * 40u) + 8u;
                            _3752 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x));
                            uint _3754 = (_3709 * 40u) + 16u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3709 * 40u) + 20u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3709 * 40u) + 24u;
                            vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            uint _3803 = (_3709 * 40u) + 28u;
                            vec4 _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            _3828 = fma(_2173, _3816.z, fma(_2172, _3816.y, _3816.x * _2171)) + _3816.w;
                            _3829 = !((fma(_2173, _3797.z, fma(_2172, _3797.y, _3797.x * _2171)) + _3797.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3829)
                            {
                                float _3856 = _3724.x - _2171;
                                float _3857 = _3724.y - _2172;
                                float _3858 = _3724.z - _2173;
                                float _3859 = dot(vec3(_3856, _3857, _3858), vec3(_3856, _3857, _3858));
                                float _3862 = inversesqrt(_3859);
                                float _3863 = _3862 * _3856;
                                float _3864 = _3862 * _3857;
                                float _3865 = _3862 * _3858;
                                float _3869 = 1.0 - (_3859 / (_3725 * _3725));
                                float _5016 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3874 = sqrt(_3859) * _3740.w;
                                float _3876 = 1.39999997615814208984375 / (_3874 + 1.39999997615814208984375);
                                float _3877 = _3876 * _3876;
                                float _3880 = ((1.0 - _3877) * dot(vec3(_3863, _3864, _3865), vec3(_1044, _1047, _1050))) + _3877;
                                float _3883 = _3874 * _3874;
                                float _3887 = (fma(_2173, _3767.z, fma(_2172, _3767.y, _3767.x * _2171)) + _3767.w) / _3828;
                                float _3888 = (fma(_2173, _3782.z, fma(_2172, _3782.y, _3782.x * _2171)) + _3782.w) / _3828;
                                float _3892 = 1.0 - dot(vec2(_3887, _3888), vec2(_3887, _3888));
                                float _5032 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3894 = _3893 * (((isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0))) * _3870) / ((_3883 * 0.699999988079071044921875) + 1.0));
                                float _3906 = exp2(log2(1.0 / ((_3883 * 3.5) + 5.0)) * 0.25);
                                float _3907 = 1.0 - _1119;
                                float _3914 = sqrt(1.0 - ((1.0 - (_3907 * _3907)) * (1.0 - (_3906 * _3906))));
                                float _3915 = _3914 * _3914;
                                float _3916 = _3915 * _3915;
                                float _3917 = _3863 - _3367;
                                float _3918 = _3864 - _3368;
                                float _3919 = _3865 - _3369;
                                float _3923 = inversesqrt(dot(vec3(_3917, _3918, _3919), vec3(_3917, _3918, _3919)));
                                float _3927 = dot(vec3(_1044, _1047, _1050), vec3((-0.0) - _3367, (-0.0) - _3368, (-0.0) - _3369));
                                float _5043 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3930 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3931 = dot(vec3(_1044, _1047, _1050), vec3(_3923 * _3917, _3923 * _3918, _3923 * _3919));
                                float _5054 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3934 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3938 = ((_3934 * _3934) * (_3916 + (-1.0))) + 1.0;
                                float _3939 = _3876 * _3915;
                                float _3940 = _3939 * _3939;
                                float _3946 = ((1.0 - _3940) * dot(vec3(_1044, _1047, _1050), vec3(_3863, _3864, _3865))) + _3940;
                                float _5065 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3947 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3948 = 1.0 - _3915;
                                float _3958 = (0.5 / (((_3947 * ((_3930 * _3948) + _3915)) + 9.9999999392252902907785028219223e-09) + (((_3947 * _3948) + _3915) * _3930))) * _3947;
                                float _5076 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3968 = (_3893 * _3870) * (((_3916 * 3.1415927410125732421875) * (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) / ((_3938 * _3938) * ((_3883 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3894 * _3740.y;
                                frontier_phi_78_pred_1 = _3894 * _3740.x;
                                frontier_phi_78_pred_2 = _3968 * _3752.z;
                                frontier_phi_78_pred_3 = _3968 * _3752.y;
                                frontier_phi_78_pred_4 = _3968 * _3752.x;
                                frontier_phi_78_pred_5 = _3894 * _3740.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3976 = frontier_phi_78_pred;
                            _3975 = frontier_phi_78_pred_1;
                            _3974 = frontier_phi_78_pred_2;
                            _3973 = frontier_phi_78_pred_3;
                            _3972 = frontier_phi_78_pred_4;
                            _3977 = frontier_phi_78_pred_5;
                            _3682 = _3975 + _3695;
                            _3683 = _3976 + _3696;
                            _3684 = _3977 + _3697;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            if (_3699 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3683;
                                _3697 = _3684;
                                _3698 = _3699;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3684;
                        frontier_phi_72_pred_1 = _3683;
                        frontier_phi_72_pred_2 = _3682;
                        frontier_phi_72_pred_3 = _3681;
                        frontier_phi_72_pred_4 = _3680;
                        frontier_phi_72_pred_5 = _3679;
                    }
                    _3352 = frontier_phi_72_pred;
                    _3350 = frontier_phi_72_pred_1;
                    _3348 = frontier_phi_72_pred_2;
                    _3346 = frontier_phi_72_pred_3;
                    _3344 = frontier_phi_72_pred_4;
                    _3342 = frontier_phi_72_pred_5;
                    uint _3487 = _3486 + 1u;
                    if (_3487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3480 = _3342;
                        _3481 = _3344;
                        _3482 = _3346;
                        _3483 = _3348;
                        _3484 = _3350;
                        _3485 = _3352;
                        _3486 = _3487;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3352;
                frontier_phi_60_61_ladder_1 = _3350;
                frontier_phi_60_61_ladder_2 = _3346;
                frontier_phi_60_61_ladder_3 = _3344;
                frontier_phi_60_61_ladder_4 = _3342;
                frontier_phi_60_61_ladder_5 = _3348;
            }
            else
            {
                frontier_phi_60_61_ladder = _3230;
                frontier_phi_60_61_ladder_1 = _3228;
                frontier_phi_60_61_ladder_2 = _3224;
                frontier_phi_60_61_ladder_3 = _3222;
                frontier_phi_60_61_ladder_4 = _3220;
                frontier_phi_60_61_ladder_5 = _3226;
            }
            _3341 = frontier_phi_60_61_ladder_4;
            _3343 = frontier_phi_60_61_ladder_3;
            _3345 = frontier_phi_60_61_ladder_2;
            _3347 = frontier_phi_60_61_ladder_5;
            _3349 = frontier_phi_60_61_ladder_1;
            _3351 = frontier_phi_60_61_ladder;
        }
        float _3356 = isnan(1.0) ? _1103 : (isnan(_1103) ? 1.0 : min(_1103, 1.0));
        _3124 = (_3356 * _3347) + _2636;
        _3126 = (_3356 * _3349) + _2638;
        _3128 = (_3356 * _3351) + _2640;
        _3130 = ((_3341 * _1088) * _3356) + _2974;
        _3132 = ((_3343 * _1090) * _3356) + _2976;
        _3134 = ((_3345 * _1091) * _3356) + _2978;
    }
    else
    {
        _3124 = _2636;
        _3126 = _2638;
        _3128 = _2640;
        _3130 = _2974;
        _3132 = _2976;
        _3134 = _2978;
    }
    uint _3140 = _1064 + uint(cbMatDynParam._m0[0u].w);
    float _3146 = ((((((_861.x - _856.x) * _839) + _856.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _785) * cbMtdParam._m0[20u].x)) * _794) * cbInstanceData._m0[_3140].x;
    float _3147 = ((((((_861.y - _856.y) * _839) + _856.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_774.y - _772) * _753) + _772)) * cbMtdParam._m0[20u].y)) * _794) * cbInstanceData._m0[_3140].y;
    float _3148 = ((((((_861.z - _856.z) * _839) + _856.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_774.z - _773) * _753) + _773)) * cbMtdParam._m0[20u].z)) * _794) * cbInstanceData._m0[_3140].z;
    float _5092 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _5103 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _5114 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _3165 = (((isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3124 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1103))) + ((_3130 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1905)) * cbPerFrame._m0[3u].x)) + _3146;
    float _3167 = (_3147 + ((_3132 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1905)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_3126 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1103)));
    float _3169 = (_3148 + ((_3134 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1905)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3128 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1103)));
    float _5140 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3182 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
    uint _3183 = _1063 + 6u;
    float _3191 = _1025 / cbSceneParam._m0[86u].x;
    float _3192 = _1026 / cbSceneParam._m0[86u].y;
    vec4 _3206 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3191, _3192, (log2((isnan(cbSceneParam._m0[77u].w) ? _959 : (isnan(_959) ? cbSceneParam._m0[77u].w : min(_959, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3208 = _3206.x;
    float _3209 = _3206.y;
    float _3210 = _3206.z;
    float _3211 = _3206.w;
    float _3282;
    float _3284;
    float _3286;
    float _3288;
    if (_959 > cbSceneParam._m0[78u].w)
    {
        float _3245 = isnan(_959) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _959 : min(cbSceneParam._m0[80u].w, _959));
        float _3246 = _3245 / _959;
        float _3257 = _3246 * _1010;
        float _3258 = _1011 * _3246;
        float _3259 = (-0.0) - _3258;
        float _3260 = _3246 * _1012;
        float _3262 = (cbSceneParam._m0[77u].w * _3259) / _3245;
        float _3263 = _3262 + cbSceneParam._m0[79u].w;
        float _3264 = cbSceneParam._m0[79u].w - _3258;
        float _3270 = sqrt(((_3257 * _3257) + (_3258 * _3258)) + (_3260 * _3260));
        float _3273 = (1.0 - (cbSceneParam._m0[77u].w / _3245)) * _3270;
        float _3278 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3280 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3442;
        if (abs((_3259 - _3262) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3442 = ((((_3263 > 0.0) ? exp2(_3278 * _3263) : (2.0 - exp2(_3280 * _3263))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3273;
        }
        else
        {
            float _3402 = 1.0 / cbSceneParam._m0[80u].x;
            float _3403 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : max(_3263, _3264));
            float _3404 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : min(_3263, _3264));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            float _3414 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : min(_3404, 0.0));
            _3442 = ((abs(_3270 / _3259) * cbSceneParam._m0[80u].y) * ((((_3413 - _3414) * 2.0) - ((exp2(_3278 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0)))) - exp2(_3278 * (isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))))) * _3402)) - ((exp2(_3280 * _3413) - exp2(_3280 * _3414)) * _3402))) + (_3273 * cbSceneParam._m0[80u].z);
        }
        vec4 _3444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3191, _3192, 1.0), 0.0);
        float _3453 = exp2((_3442 * (-1.44269502162933349609375)) * (1.0 - _3444.w));
        float _3454 = log2(_3453);
        float _3470 = log2(_3211);
        _3282 = (exp2(_3470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].x)) * _3444.x) / cbSceneParam._m0[78u].x)) + _3208;
        _3284 = (exp2(_3470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].y)) * _3444.y) / cbSceneParam._m0[78u].y)) + _3209;
        _3286 = (exp2(_3470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].z)) * _3444.z) / cbSceneParam._m0[78u].z)) + _3210;
        _3288 = _3453 * _3211;
    }
    else
    {
        _3282 = _3208;
        _3284 = _3209;
        _3286 = _3210;
        _3288 = _3211;
    }
    float _3300 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3301 = _3300 == 3.0;
    float _3302 = log2(_3288);
    float _3306 = exp2(_3302 * cbSceneParam._m0[78u].x);
    float _3307 = exp2(_3302 * cbSceneParam._m0[78u].y);
    float _3308 = exp2(_3302 * cbSceneParam._m0[78u].z);
    float _3309 = _3306 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0)));
    float _3310 = _3307 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0)));
    float _3311 = _3308 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)));
    float _3320 = (_3300 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3320 * (_3301 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3282)));
    SV_Target.y = _3320 * (_3301 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3284)));
    SV_Target.z = _3320 * (_3301 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3286)));
    SV_Target.w = cbInstanceData._m0[_3183].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3146) * _3182) * _3306) * _3320;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3147) * _3182) * _3307) * _3320;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3148) * _3182) * _3308) * _3320;
    SV_Target_1.w = cbInstanceData._m0[_3183].w;
}


