#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1527;
float _3964;
float _3965;
float _3966;
float _3967;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _259 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _269 = log2(0.0);
    float _271 = exp2(_269 * cbMtdParam._m0[24u].x);
    float _272 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _273 = isnan(1.0) ? _272 : (isnan(_272) ? 1.0 : min(_272, 1.0));
    vec4 _287 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _291 = _287.z;
    float _299 = exp2(log2(_291 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _313 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _316 = _313.y;
    float _319 = (_313.x + (-0.02500000037252902984619140625)) * 8.0;
    float _323 = roundEven(5.0 - _319);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(4.0) ? _324 : (isnan(_324) ? 4.0 : min(_324, 4.0));
    float _338 = floor(_325);
    vec4 _341 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _338));
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[17u].x;
    _194[0u] = cbMtdParam._m0[17u].y;
    _195[0u] = cbMtdParam._m0[17u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[14u].x;
    _194[2u] = cbMtdParam._m0[14u].y;
    _195[2u] = cbMtdParam._m0[14u].z;
    _193[3u] = cbMtdParam._m0[13u].x;
    _194[3u] = cbMtdParam._m0[13u].y;
    _195[3u] = cbMtdParam._m0[13u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[18u].x;
    _194[5u] = cbMtdParam._m0[18u].y;
    _195[5u] = cbMtdParam._m0[18u].z;
    float _405 = roundEven(_319);
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    uint _408 = uint(int(isnan(5.0) ? _406 : (isnan(_406) ? 5.0 : min(_406, 5.0))));
    vec4 _438 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _449 = cbMtdParam._m0[9u].x * _438.x;
    float _450 = cbMtdParam._m0[9u].y * _438.y;
    float _451 = cbMtdParam._m0[9u].z * _438.z;
    float _458 = ((((((_193[_408] - cbMtdParam._m0[10u].x) * _316) + cbMtdParam._m0[10u].x) * _341.x) - _449) * _301) + _449;
    float _459 = ((((((_194[_408] - cbMtdParam._m0[10u].y) * _316) + cbMtdParam._m0[10u].y) * _341.y) - _450) * _301) + _450;
    float _460 = ((((((_195[_408] - cbMtdParam._m0[10u].z) * _316) + cbMtdParam._m0[10u].z) * _341.z) - _451) * _301) + _451;
    float _466 = exp2(log2(_287.w) * cbMtdParam._m0[24u].w);
    vec4 _479 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _499 = (((cbMtdParam._m0[16u].x * _479.x) - _458) * _466) + _458;
    float _500 = (((cbMtdParam._m0[16u].y * _479.y) - _459) * _466) + _459;
    float _501 = (((cbMtdParam._m0[16u].z * _479.z) - _460) * _466) + _460;
    vec4 _513 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _538 = (_259.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _513.x) - _499) * _273) + _499);
    float _540 = (_259.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _513.y) - _500) * _273) + _500);
    float _542 = (_259.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _513.z) - _501) * _273) + _501);
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[30u].z;
    _189[0u] = cbMtdParam._m0[30u].w;
    _188[1u] = cbMtdParam._m0[32u].z;
    _189[1u] = cbMtdParam._m0[32u].w;
    _188[2u] = cbMtdParam._m0[32u].x;
    _189[2u] = cbMtdParam._m0[32u].y;
    _188[3u] = cbMtdParam._m0[31u].z;
    _189[3u] = cbMtdParam._m0[31u].w;
    _188[4u] = cbMtdParam._m0[31u].x;
    _189[4u] = cbMtdParam._m0[31u].y;
    float _579 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    uint _581 = uint(int(isnan(4.0) ? _579 : (isnan(_579) ? 4.0 : min(_579, 4.0))));
    float _588 = ((_189[_581] - cbMtdParam._m0[23u].z) * _301) + cbMtdParam._m0[23u].z;
    float _591 = ((cbMtdParam._m0[23u].w - _588) * _466) + _588;
    float _594 = ((cbMtdParam._m0[26u].y - _591) * _273) + _591;
    vec4 _609 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _338));
    vec4 _626 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _634 = cbMtdParam._m0[23u].x + _626.z;
    float _637 = (((_609.z + _188[_581]) - _634) * _301) + _634;
    vec4 _649 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _660 = (((_649.z - _637) + cbMtdParam._m0[30u].x) * _466) + _637;
    float _666 = ((((_291 * 2.0) * _660) - _660) * cbMtdParam._m0[25u].w) + _660;
    vec4 _678 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _689 = (((cbMtdParam._m0[24u].z + _678.z) - _666) * _273) + _666;
    float _702 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _725 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_702 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _702) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _729 = cbPerFrame._m0[22u].x * 2.0;
    float _730 = _729 * cbMtdParam._m0[28u].z;
    float _733 = (_725.x * 0.5) + (-0.25);
    float _736 = (_725.y * 0.5) + (-0.25);
    float _737 = _736 * cbMtdParam._m0[28u].y;
    float _739 = (-0.0) - (cbMtdParam._m0[28u].y * _733);
    float _741 = fract(_730);
    float _743 = fract(_730 + 0.5);
    float _755 = abs((_741 * 2.0) + (-1.0));
    vec4 _771 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_741 * _739) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_737 * _741) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _773 = _771.x;
    float _774 = _771.y;
    float _775 = _771.z;
    vec4 _776 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_743 * _739) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_737 * _743) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _787 = ((_776.x - _773) * _755) + _773;
    float _794 = exp2(log2(_787 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _795 = isnan(cbMtdParam._m0[29u].y) ? _794 : (isnan(_794) ? cbMtdParam._m0[29u].y : max(_794, cbMtdParam._m0[29u].y));
    float _796 = isnan(cbMtdParam._m0[29u].z) ? _795 : (isnan(_795) ? cbMtdParam._m0[29u].z : min(_795, cbMtdParam._m0[29u].z));
    float _820 = (cbMtdParam._m0[33u].x * _702) + TEXCOORD;
    float _821 = (cbMtdParam._m0[33u].y * _702) + TEXCOORD_1;
    float _824 = _729 * cbMtdParam._m0[27u].w;
    float _825 = _736 * cbMtdParam._m0[27u].z;
    float _827 = (-0.0) - (cbMtdParam._m0[27u].z * _733);
    float _828 = fract(_824);
    float _830 = fract(_824 + 0.5);
    float _841 = abs((_828 * 2.0) + (-1.0));
    vec4 _858 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_828 * _827) + _820) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_825 * _828) + _821) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _863 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_830 * _827) + _820) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_825 * _830) + _821) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _897 = ((_609.x - _628) * _301) + _628;
    float _898 = ((_609.y - _629) * _301) + _629;
    float _903 = ((_649.x - _897) * _466) + _897;
    float _904 = ((_649.y - _898) * _466) + _898;
    float _913 = ((((_678.x - _903) * _273) + _903) * 2.0) + (-1.0);
    float _914 = ((((_678.y - _904) * _273) + _904) * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4036 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _920 = sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))));
    float _923 = (cbMtdParam._m0[26u].z * ((_287.x * 2.0) + (-1.0))) + _913;
    float _924 = (cbMtdParam._m0[26u].z * ((_287.y * 2.0) + (-1.0))) + _914;
    float _926 = gl_FragCoord.x * 0.125;
    float _928 = gl_FragCoord.y * 0.125;
    float _939 = fma(_920, _235 * NORMAL.x, fma(_924, _242 * TANGENT.x, (_228 * _220) * _923));
    float _942 = fma(_920, _235 * NORMAL.y, fma(_924, _242 * TANGENT.y, (_228 * _221) * _923));
    float _945 = fma(_920, _235 * NORMAL.z, fma(_924, _242 * TANGENT.z, (_228 * _222) * _923));
    float _949 = inversesqrt(dot(vec3(_939, _942, _945), vec3(_939, _942, _945)));
    float _950 = _949 * _939;
    float _951 = _949 * _942;
    float _952 = _949 * _945;
    float _4047 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _953 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4069 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4080 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4091 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _957 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_926, _928)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1028 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1018);
    float _1029 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1018);
    float _1030 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1018);
    float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
    float _1035 = _1028 * _1034;
    float _1036 = _1029 * _1034;
    float _1037 = _1030 * _1034;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_926, _928));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1211 = sqrt(((_1028 * _1028) + (_1029 * _1029)) + (_1030 * _1030));
        float _1217 = (cbMatDynParam._m0[5u].x * _1211) + cbMatDynParam._m0[5u].y;
        float _4102 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1222 = (cbMatDynParam._m0[5u].z * _1211) + cbMatDynParam._m0[5u].w;
        float _4113 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) - _1218)) + _1218) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1071 = fma(_952, cbSceneParam._m0[5u].z, fma(_951, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _950));
    float _1074 = fma(_952, cbSceneParam._m0[6u].z, fma(_951, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _950));
    float _1077 = fma(_952, cbSceneParam._m0[7u].z, fma(_951, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _950));
    uint _1090 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1091 = _1090 + 9u;
    uint _1092 = _1091 + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _4124 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _1104 = 1.0 - _957;
    float _1105 = _1101 * _1104;
    float _1106 = _1102 * _1104;
    float _1107 = _1103 * _1104;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _957;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _957;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _957;
    float _1115 = _1112 + 0.039999999105930328369140625;
    float _1117 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    vec4 _1127 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1130 = _1127.x * TEXCOORD_3.w;
    float _1131 = dot(vec3(_950, _951, _952), vec3(_1035, _1036, _1037));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _950) - _1035;
    float _1139 = (_1134 * _951) - _1036;
    float _1140 = (_1134 * _952) - _1037;
    float _1144 = abs(dot(vec3(_1035, _1036, _1037), vec3(_950, _951, _952)));
    float _4157 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_953);
    float _1157 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1163 = (1.0 - _1157) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1164 = _1157 * _1146;
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1526;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1253 = fma(_1200, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192));
        float _1257 = fma(_1200, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192));
        float _1261 = fma(_1200, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192));
        float _1285 = _1192 + _950;
        float _1286 = _1196 + _951;
        float _1287 = _1200 + _952;
        float _1297 = fma(_1287, cbModelParam._m0[26u].z, fma(_1286, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285)) - _1253;
        float _1298 = fma(_1287, cbModelParam._m0[27u].z, fma(_1286, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285)) - _1257;
        float _1299 = fma(_1287, cbModelParam._m0[28u].z, fma(_1286, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285)) - _1261;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1315 = ((_1303 * _1297) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1253 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1303 * _1298) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1257 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1299) / cbModelParam._m0[34u].z) + ((((((_1261 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1354 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1320.x + (-0.5));
        float _1356 = _1354 * (_1320.y + (-0.5));
        float _1357 = _1354 * (_1320.z + (-0.5));
        float _1364 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1327.x + (-0.5));
        float _1366 = _1364 * (_1327.y + (-0.5));
        float _1367 = _1364 * (_1327.z + (-0.5));
        float _1374 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1334.x + (-0.5));
        float _1376 = _1374 * (_1334.y + (-0.5));
        float _1377 = _1374 * (_1334.z + (-0.5));
        float _1384 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1341.x + (-0.5));
        float _1386 = _1384 * (_1341.y + (-0.5));
        float _1387 = _1384 * (_1341.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1408 = (dot(vec3(_950, _951, _952), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1418 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4205 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1420 + 1.0))) + _1425) * _1388;
        float _1435 = _1356 * 0.5;
        float _1436 = _1366 * 0.5;
        float _1437 = _1376 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_950, _951, _952), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4238 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1462 + 1.0))) + _1467) * _1389;
        float _1477 = _1357 * 0.5;
        float _1478 = _1367 * 0.5;
        float _1479 = _1377 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_950, _951, _952), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4271 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1504 + 1.0))) + _1509) * _1390;
        _1526 = _1357;
        _1528 = _1356;
        _1529 = _1355;
        _1530 = _1367;
        _1531 = _1366;
        _1532 = _1365;
        _1533 = _1377;
        _1534 = _1376;
        _1535 = _1375;
        _1536 = _1390;
        _1537 = _1389;
        _1538 = _1388;
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1527;
        _1528 = _1527;
        _1529 = _1527;
        _1530 = _1527;
        _1531 = _1527;
        _1532 = _1527;
        _1533 = _1527;
        _1534 = _1527;
        _1535 = _1527;
        _1536 = _1527;
        _1537 = _1527;
        _1538 = _1527;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1564 = fma(_1200, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192));
        float _1568 = fma(_1200, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192));
        float _1572 = fma(_1200, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192));
        float _1595 = _1192 + _950;
        float _1596 = _1196 + _951;
        float _1597 = _1200 + _952;
        float _1607 = fma(_1597, cbModelParam._m0[30u].z, fma(_1596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1595)) - _1564;
        float _1608 = fma(_1597, cbModelParam._m0[31u].z, fma(_1596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1595)) - _1568;
        float _1609 = fma(_1597, cbModelParam._m0[32u].z, fma(_1596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1595)) - _1572;
        float _1613 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
        float _1626 = ((_1613 * _1607) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1564 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1627 = ((_1613 * _1608) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1568 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1628 = ((_1613 * _1609) / cbModelParam._m0[35u].z) + ((((((_1572 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        float _1663 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1630.x + (-0.5));
        float _1665 = _1663 * (_1630.y + (-0.5));
        float _1666 = _1663 * (_1630.z + (-0.5));
        float _1673 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1637.x + (-0.5));
        float _1675 = _1673 * (_1637.y + (-0.5));
        float _1676 = _1673 * (_1637.z + (-0.5));
        float _1683 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1644.x + (-0.5));
        float _1685 = _1683 * (_1644.y + (-0.5));
        float _1686 = _1683 * (_1644.z + (-0.5));
        float _1693 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1651.x + (-0.5));
        float _1695 = _1693 * (_1651.y + (-0.5));
        float _1696 = _1693 * (_1651.z + (-0.5));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = _1664 * 0.5;
        float _1701 = _1674 * 0.5;
        float _1702 = _1684 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_950, _951, _952), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4334 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1727 + 1.0))) + _1732) * _1697;
        float _1742 = _1665 * 0.5;
        float _1743 = _1675 * 0.5;
        float _1744 = _1685 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_950, _951, _952), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4367 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1769 + 1.0))) + _1774) * _1698;
        float _1784 = _1666 * 0.5;
        float _1785 = _1676 * 0.5;
        float _1786 = _1686 * 0.5;
        float _1787 = dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786));
        float _1792 = (_1787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1787);
        float _1800 = (dot(vec3(_950, _951, _952), vec3(_1792 * _1784, _1792 * _1785, _1792 * _1786)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1811 = _1810 * 2.0;
        float _1815 = (1.0 - _1810) / (_1810 + 1.0);
        float _4400 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1825 = ((((1.0 - _1816) * (_1811 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1811 + 1.0))) + _1816) * _1699;
        _1833 = _1666;
        _1834 = _1665;
        _1835 = _1664;
        _1836 = _1676;
        _1837 = _1675;
        _1838 = _1674;
        _1839 = _1686;
        _1840 = _1685;
        _1841 = _1684;
        _1842 = _1699;
        _1843 = _1698;
        _1844 = _1697;
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)));
    }
    else
    {
        _1833 = _1527;
        _1834 = _1527;
        _1835 = _1527;
        _1836 = _1527;
        _1837 = _1527;
        _1838 = _1527;
        _1839 = _1527;
        _1840 = _1527;
        _1841 = _1527;
        _1842 = _1527;
        _1843 = _1527;
        _1844 = _1527;
        _1845 = 0.0;
        _1846 = 0.0;
        _1847 = 0.0;
    }
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1539)) + _1539;
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1540)) + _1540;
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1541)) + _1541;
    float _1880 = fma(_1859, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1883 = fma(_1859, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1886 = fma(_1859, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1857));
    float _1901 = _1138 * 0.5;
    float _1902 = _1139 * 0.5;
    float _1903 = _1140 * 0.5;
    float _1904 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1907 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1910 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1944;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1917 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1526, _1530, _1533, _1536));
        float _1921 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1925 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1932 = dot(vec4(cbModelParam._m0[39u]), vec4(_1901, _1902, _1903, 1.0));
        _1944 = dot(vec3(isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1944 = 1.0;
    }
    float _1955;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1946 = dot(vec4(cbModelParam._m0[40u]), vec4(_1901, _1902, _1903, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1946) ? 0.0 : (isnan(0.0) ? _1946 : max(0.0, _1946))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1959 = (_1955 * cbModelParam._m0[1u].x) + (_1944 * (1.0 - cbModelParam._m0[1u].x));
    float _1969 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1969 : min(cbModelParam._m0[25u].z, _1969));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2017 = fma(_1200, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1192)) + cbModelParam._m0[13u].w;
        float _2021 = fma(_1200, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1192)) + cbModelParam._m0[14u].w;
        float _2025 = fma(_1200, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1192)) + cbModelParam._m0[15u].w;
        float _2028 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2031 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2034 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2062;
        if (_2028 > 0.0)
        {
            _2062 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2062 = frontier_phi_19_17_ladder;
        }
        float _2285;
        if (_2031 > 0.0)
        {
            _2285 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2285 = frontier_phi_28_24_ladder;
        }
        float _2542;
        if (_2034 > 0.0)
        {
            _2542 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2542 = frontier_phi_40_35_ladder;
        }
        float _2544 = isnan(_2285) ? _2062 : (isnan(_2062) ? _2285 : min(_2062, _2285));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _2028) + _2017;
        float _2550 = (_2545 * _2031) + _2021;
        float _2551 = (_2545 * _2034) + _2025;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2552;
        float _2556 = _2552 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 > _2556) || ((_2550 < _2554) || ((_2549 < _2554) || (_2549 > _2556))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2551, cbModelParam._m0[9u].z, fma(_2550, cbModelParam._m0[9u].y, _2549 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2551, cbModelParam._m0[10u].z, fma(_2550, cbModelParam._m0[10u].y, _2549 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2551, cbModelParam._m0[11u].z, fma(_2550, cbModelParam._m0[11u].y, _2549 * cbModelParam._m0[11u].x))), _1970);
            frontier_phi_18_40_ladder = _2679.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2679.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2679.x * cbModelParam._m0[1u].y;
        }
        _2050 = frontier_phi_18_40_ladder_2;
        _2052 = frontier_phi_18_40_ladder_1;
        _2054 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1970);
        _2050 = _2038.x * cbModelParam._m0[1u].y;
        _2052 = _2038.y * cbModelParam._m0[1u].y;
        _2054 = _2038.z * cbModelParam._m0[1u].y;
    }
    float _2058 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _2059 = isnan(_2058) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2058 : min(cbModelParam._m0[25u].w, _2058));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2112 = fma(_1200, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1192)) + cbModelParam._m0[21u].w;
        float _2116 = fma(_1200, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1192)) + cbModelParam._m0[22u].w;
        float _2120 = fma(_1200, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1192)) + cbModelParam._m0[23u].w;
        float _2123 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2126 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2129 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2290;
        if (_2123 > 0.0)
        {
            _2290 = abs((1.0 - _2112) / _2123);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2112 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2290 = frontier_phi_30_26_ladder;
        }
        float _2569;
        if (_2126 > 0.0)
        {
            _2569 = abs((1.0 - _2116) / _2126);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2116 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2569 = frontier_phi_42_37_ladder;
        }
        float _2782;
        if (_2129 > 0.0)
        {
            _2782 = abs((1.0 - _2120) / _2129);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2120 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2782 = frontier_phi_51_48_ladder;
        }
        float _2784 = isnan(_2569) ? _2290 : (isnan(_2290) ? _2569 : min(_2290, _2569));
        float _2785 = isnan(_2782) ? _2784 : (isnan(_2784) ? _2782 : min(_2784, _2782));
        float _2789 = (_2785 * _2123) + _2112;
        float _2790 = (_2785 * _2126) + _2116;
        float _2791 = (_2785 * _2129) + _2120;
        float _2792 = _2785 * 9.9999997473787516355514526367188e-05;
        float _2793 = (-1.0) - _2792;
        float _2795 = _2792 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2791 > _2795) || ((_2791 < _2793) || ((_2790 > _2795) || ((_2790 < _2793) || ((_2789 < _2793) || (_2789 > _2795))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2791, cbModelParam._m0[17u].z, fma(_2790, cbModelParam._m0[17u].y, _2789 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2791, cbModelParam._m0[18u].z, fma(_2790, cbModelParam._m0[18u].y, _2789 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2791, cbModelParam._m0[19u].z, fma(_2790, cbModelParam._m0[19u].y, _2789 * cbModelParam._m0[19u].x))), _2059);
            frontier_phi_27_51_ladder = _3019.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3019.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3019.x * cbModelParam._m0[1u].z;
        }
        _2148 = frontier_phi_27_51_ladder_2;
        _2150 = frontier_phi_27_51_ladder_1;
        _2152 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2059);
        _2148 = _2132.x * cbModelParam._m0[1u].z;
        _2150 = _2132.y * cbModelParam._m0[1u].z;
        _2152 = _2132.z * cbModelParam._m0[1u].z;
    }
    float _2165 = (((_1163 * _1115) + _1164) * _1130) * ((cbModelParam._m0[1u].w * (_2148 - _2050)) + _2050);
    float _2167 = (((_1163 * _1117) + _1164) * _1130) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2169 = (((_1163 * _1118) + _1164) * _1130) * ((cbModelParam._m0[1u].w * (_2152 - _2054)) + _2054);
    float _2172 = fma(_2169, cbSceneParam._m0[89u].z, fma(_2167, cbSceneParam._m0[89u].y, _2165 * cbSceneParam._m0[89u].x));
    float _2175 = fma(_2169, cbSceneParam._m0[90u].z, fma(_2167, cbSceneParam._m0[90u].y, _2165 * cbSceneParam._m0[90u].x));
    float _2178 = fma(_2169, cbSceneParam._m0[91u].z, fma(_2167, cbSceneParam._m0[91u].y, _2165 * cbSceneParam._m0[91u].x));
    vec4 _2186 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1052, _1053));
    float _2188 = _2186.w;
    float _2200 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2188);
    float _2201 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2188);
    float _2202 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2188);
    uvec4 _2206 = floatBitsToUint(cbInstanceData._m0[_1090 + 5u]);
    uint _2208 = _2206.x * 14u;
    uint _2209 = _2208 + 13u;
    float _2216 = _1130 + (-1.0);
    float _2221 = (cbLight._m0[_2209].x * _2216) + 1.0;
    float _2222 = (cbLight._m0[_2209].y * _2216) + 1.0;
    float _2223 = (cbLight._m0[_2209].z * _2216) + 1.0;
    float _2224 = (cbLight._m0[_2209].w * _2216) + 1.0;
    uint _2225 = _2208 + 5u;
    float _2231 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2235 = _2208 + 4u;
    float _2244 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2248 = _2208 | 1u;
    float _2259 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_950, _951, _952));
    float _2262 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_950, _951, _952));
    float _4536 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _4547 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2267 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2269 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2276 = ((cbLight._m0[_2225].x * _2231) * _2269) + (((cbLight._m0[_2235].x * _2200) * _2244) * _2267);
    float _2277 = ((_2231 * cbLight._m0[_2225].y) * _2269) + (((cbLight._m0[_2235].y * _2201) * _2244) * _2267);
    float _2278 = ((_2231 * cbLight._m0[_2225].z) * _2269) + (((cbLight._m0[_2235].z * _2202) * _2244) * _2267);
    uvec4 _2282 = floatBitsToUint(cbLight._m0[_2208 + 12u]);
    bool _2284 = _2282.x == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2284)
    {
        _2295 = _2276;
        _2297 = _2277;
        _2299 = _2278;
    }
    else
    {
        uint _2303 = _2208 + 6u;
        float _2319 = (dot(vec3(cbLight._m0[_2208 + 2u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4558 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2322 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2295 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2276;
        _2297 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2277;
        _2299 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2278;
    }
    bool _2302 = _2282.y == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2302)
    {
        _2340 = _2295;
        _2342 = _2297;
        _2344 = _2299;
    }
    else
    {
        uint _2513 = _2208 + 7u;
        float _2529 = (dot(vec3(cbLight._m0[_2208 + 3u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2530 = _2529 * _2529;
        float _4574 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2531 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2532 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2340 = (((cbLight._m0[_2513].x * 0.3183098733425140380859375) * _2531) * _2532) + _2295;
        _2342 = (((cbLight._m0[_2513].y * 0.3183098733425140380859375) * _2531) * _2532) + _2297;
        _2344 = (((cbLight._m0[_2513].z * 0.3183098733425140380859375) * _2531) * _2532) + _2299;
    }
    uint _2347 = _2208 + 8u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _953) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2208].x + _1035;
    float _2363 = cbLight._m0[_2208].y + _1036;
    float _2364 = cbLight._m0[_2208].z + _1037;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2208].xyz));
    float _4590 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _4601 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2376 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2377 = dot(vec3(_950, _951, _952), vec3(_2369, _2370, _2371));
    float _4612 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2369, _2370, _2371));
    float _4623 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2361 * _2361;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
    float _2398 = 0.959999978542327880859375 - _1112;
    float _2400 = 0.959999978542327880859375 - _1113;
    float _2401 = 0.959999978542327880859375 - _1114;
    float _2408 = 1.0 - _2361;
    float _2419 = (0.5 / (((_2376 * ((_2375 * _2408) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2408) + _2361) * _2375))) * _2375;
    float _4634 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    uint _2435 = _2208 + 9u;
    float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _953) * 0.949999988079071044921875);
    float _2447 = _2446 * _2446;
    float _2448 = cbLight._m0[_2248].x + _1035;
    float _2449 = cbLight._m0[_2248].y + _1036;
    float _2450 = cbLight._m0[_2248].z + _1037;
    float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
    float _2455 = _2454 * _2448;
    float _2456 = _2454 * _2449;
    float _2457 = _2454 * _2450;
    float _2458 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2248].xyz));
    float _4645 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2462 = dot(vec3(_950, _951, _952), vec3(_2455, _2456, _2457));
    float _4656 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2466 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2455, _2456, _2457));
    float _4667 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2470 = _2447 * _2447;
    float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
    float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
    float _2488 = 1.0 - _2447;
    float _2498 = (0.5 / (((_2376 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2488) + _2447) * _2461))) * _2461;
    float _4678 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2500 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
    float _2510 = (((((_2481 * _2398) + _1115) * cbLight._m0[_2435].x) * _2500) * _2231) + ((((cbLight._m0[_2347].x * _2200) * ((_2397 * _2398) + _1115)) * _2421) * _2244);
    float _2511 = (((((_2481 * _2400) + _1117) * cbLight._m0[_2435].y) * _2500) * _2231) + ((((cbLight._m0[_2347].y * _2201) * ((_2397 * _2400) + _1117)) * _2421) * _2244);
    float _2512 = (((((_2481 * _2401) + _1118) * cbLight._m0[_2435].z) * _2500) * _2231) + ((((cbLight._m0[_2347].z * _2202) * ((_2397 * _2401) + _1118)) * _2421) * _2244);
    float _2574;
    float _2576;
    float _2578;
    if (_2284)
    {
        _2574 = _2510;
        _2576 = _2511;
        _2578 = _2512;
    }
    else
    {
        uint _2580 = _2208 + 2u;
        uint _2584 = _2208 + 10u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _953) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _1035;
        float _2601 = cbLight._m0[_2580].y + _1036;
        float _2602 = cbLight._m0[_2580].z + _1037;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2580].xyz));
        float _4689 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2614 = dot(vec3(_950, _951, _952), vec3(_2607, _2608, _2609));
        float _4700 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4711 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2640 = 1.0 - _2599;
        float _2650 = (0.5 / (((_2376 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2640) + _2599) * _2613))) * _2613;
        float _4722 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2574 = (((((_2633 * _2398) + _1115) * cbLight._m0[_2584].x) * _2652) * _2653) + _2510;
        _2576 = (((((_2633 * _2400) + _1117) * cbLight._m0[_2584].y) * _2652) * _2653) + _2511;
        _2578 = (((((_2633 * _2401) + _1118) * cbLight._m0[_2584].z) * _2652) * _2653) + _2512;
    }
    float _2688;
    float _2690;
    float _2692;
    if (_2302)
    {
        _2688 = _2574;
        _2690 = _2576;
        _2692 = _2578;
    }
    else
    {
        uint _2699 = _2208 + 3u;
        uint _2703 = _2208 + 11u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _953) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _1035;
        float _2720 = cbLight._m0[_2699].y + _1036;
        float _2721 = cbLight._m0[_2699].z + _1037;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2699].xyz));
        float _4738 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2733 = dot(vec3(_950, _951, _952), vec3(_2726, _2727, _2728));
        float _4749 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4760 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2376 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2759) + _2718) * _2732))) * _2732;
        float _4771 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2688 = (((((_2752 * _2398) + _1115) * cbLight._m0[_2703].x) * _2771) * _2772) + _2574;
        _2690 = (((((_2752 * _2400) + _1117) * cbLight._m0[_2703].y) * _2771) * _2772) + _2576;
        _2692 = (((((_2752 * _2401) + _1118) * cbLight._m0[_2703].z) * _2771) * _2772) + _2578;
    }
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_2206.y == 0u)
    {
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2848 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2847;
        float _2849 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2847;
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2847;
        uvec4 _2862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2863 = _2862.x;
        uint _2874 = uint((float(_2862.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _2863))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _2863)));
        float _2884 = (log2(_2850 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2885 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        uint _2888 = uint(isnan(14.0) ? _2885 : (isnan(_2885) ? 14.0 : min(_2885, 14.0)));
        uvec4 _2893 = texelFetch(g_lightClusterGridBuffer, int(((_2888 << 2u) + (_2874 << 6u)) >> 2u));
        uint _2894 = _2893.x;
        uint _2895 = _2862.z;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((((1u << ((_2895 >> 4u) & 15u)) + 4294967295u) & _2894) == 0u) || ((_2895 & 240u) == 0u))
        {
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
        }
        else
        {
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            uint _3191 = 0u;
            uint _3200;
            bool _3201;
            for (;;)
            {
                _3200 = texelFetch(g_lightClassification, int((((_2888 << 5u) + (_2874 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                _3201 = _3200 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3201)
                {
                    frontier_phi_68_pred = _3185;
                    frontier_phi_68_pred_1 = _3190;
                    frontier_phi_68_pred_2 = _3189;
                    frontier_phi_68_pred_3 = _3188;
                    frontier_phi_68_pred_4 = _3187;
                    frontier_phi_68_pred_5 = _3186;
                }
                else
                {
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    uint _3336;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3200;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    for (;;)
                    {
                        uint _3340 = uint(findLSB(_3336)) + (_3191 << 5u);
                        uint _3337 = (_3336 + 4294967295u) & _3336;
                        uint _3342 = _3340 * 48u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3362 = (_3340 * 48u) + 4u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3381 = (_3340 * 48u) + 8u;
                        vec3 _3392 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x));
                        float _3396 = _3356.x - _2848;
                        float _3397 = _3356.y - _2849;
                        float _3398 = _3356.z - _2850;
                        float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                        float _3402 = inversesqrt(_3399);
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3406 = dot(vec3(_1071, _1074, _1077), vec3(_3403, _3404, _3405));
                        float _3411 = 1.0 - (_3399 * _3356.w);
                        float _4797 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3413 = sqrt(_3399) * _3375.w;
                        float _3416 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3406) + _3417;
                        float _3423 = _3413 * _3413;
                        float _3427 = ((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3412) / ((_3423 * 0.699999988079071044921875) + 1.0);
                        float _3431 = (-0.0) - _2848;
                        float _3432 = (-0.0) - _2849;
                        float _3433 = (-0.0) - _2850;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3448 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                        float _3449 = 1.0 - _1146;
                        float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                        float _3457 = _3456 * _3456;
                        float _3458 = _3457 * _3457;
                        float _3459 = _3438 + _3403;
                        float _3460 = _3439 + _3404;
                        float _3461 = _3440 + _3405;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3469 = dot(vec3(_1071, _1074, _1077), vec3(_3438, _3439, _3440));
                        float _4813 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3473 = dot(vec3(_1071, _1074, _1077), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                        float _4824 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                        float _3481 = _3416 * _3457;
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3406) + _3482;
                        float _4835 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3487 = 1.0 - _3457;
                        float _3497 = (0.5 / (((_3486 * ((_3472 * _3487) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3457) * _3472))) * _3486;
                        float _4846 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3508 = (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3480 * _3480) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125))) * _3412;
                        _3260 = (_3427 * _3375.x) + _3333;
                        _3261 = (_3427 * _3375.y) + _3334;
                        _3262 = (_3427 * _3375.z) + _3335;
                        _3257 = (_3508 * _3392.x) + _3330;
                        _3258 = (_3508 * _3392.y) + _3331;
                        _3259 = (_3508 * _3392.z) + _3332;
                        if (_3337 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3337;
                        }
                    }
                    frontier_phi_68_pred = _3257;
                    frontier_phi_68_pred_1 = _3262;
                    frontier_phi_68_pred_2 = _3261;
                    frontier_phi_68_pred_3 = _3260;
                    frontier_phi_68_pred_4 = _3259;
                    frontier_phi_68_pred_5 = _3258;
                }
                _3025 = frontier_phi_68_pred;
                _3035 = frontier_phi_68_pred_1;
                _3033 = frontier_phi_68_pred_2;
                _3031 = frontier_phi_68_pred_3;
                _3029 = frontier_phi_68_pred_4;
                _3027 = frontier_phi_68_pred_5;
                uint _3192 = _3191 + 1u;
                if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3185 = _3025;
                    _3186 = _3027;
                    _3187 = _3029;
                    _3188 = _3031;
                    _3189 = _3033;
                    _3190 = _3035;
                    _3191 = _3192;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
        }
        uvec4 _3038 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3039 = _3038.z;
        uint _3041 = (_3039 >> 8u) & 15u;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((4294967295u << _3041) & _2894) == 0u)
        {
            _3153 = _3024;
            _3155 = _3026;
            _3157 = _3028;
            _3159 = _3030;
            _3161 = _3032;
            _3163 = _3034;
        }
        else
        {
            float _3178 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
            float _3179 = _3178 * _2848;
            float _3180 = _3178 * _2849;
            float _3181 = _3178 * _2850;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3041 < ((_3039 >> 12u) & 15u))
            {
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3313 = _3024;
                float _3314 = _3026;
                float _3315 = _3028;
                float _3316 = _3030;
                float _3317 = _3032;
                float _3318 = _3034;
                uint _3319 = _3041;
                uint _3328;
                bool _3329;
                for (;;)
                {
                    _3328 = texelFetch(g_lightClassification, int((((_2888 << 5u) + (_2874 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                    _3329 = _3328 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3329)
                    {
                        frontier_phi_79_pred = _3318;
                        frontier_phi_79_pred_1 = _3317;
                        frontier_phi_79_pred_2 = _3316;
                        frontier_phi_79_pred_3 = _3315;
                        frontier_phi_79_pred_4 = _3314;
                        frontier_phi_79_pred_5 = _3313;
                    }
                    else
                    {
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3535 = _3313;
                        float _3536 = _3314;
                        float _3537 = _3315;
                        float _3538 = _3316;
                        float _3539 = _3317;
                        float _3540 = _3318;
                        uint _3541 = _3328;
                        uint _3542;
                        vec4 _3567;
                        float _3568;
                        vec4 _3583;
                        vec3 _3595;
                        vec4 _3610;
                        vec4 _3625;
                        float _3671;
                        bool _3672;
                        for (;;)
                        {
                            uint _3552 = ((_3319 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3541));
                            _3542 = (_3541 + 4294967295u) & _3541;
                            uint _3554 = _3552 * 40u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            _3568 = _3567.w;
                            uint _3570 = (_3552 * 40u) + 4u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3552 * 40u) + 8u;
                            _3595 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x));
                            uint _3597 = (_3552 * 40u) + 16u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3612 = (_3552 * 40u) + 20u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3552 * 40u) + 24u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3646 = (_3552 * 40u) + 28u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3671 = fma(_2850, _3659.z, fma(_2849, _3659.y, _3659.x * _2848)) + _3659.w;
                            _3672 = !((fma(_2850, _3640.z, fma(_2849, _3640.y, _3640.x * _2848)) + _3640.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3672)
                            {
                                float _3699 = _3567.x - _2848;
                                float _3700 = _3567.y - _2849;
                                float _3701 = _3567.z - _2850;
                                float _3702 = dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701));
                                float _3705 = inversesqrt(_3702);
                                float _3706 = _3705 * _3699;
                                float _3707 = _3705 * _3700;
                                float _3708 = _3705 * _3701;
                                float _3712 = 1.0 - (_3702 / (_3568 * _3568));
                                float _4857 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3717 = sqrt(_3702) * _3583.w;
                                float _3719 = 1.39999997615814208984375 / (_3717 + 1.39999997615814208984375);
                                float _3720 = _3719 * _3719;
                                float _3723 = ((1.0 - _3720) * dot(vec3(_3706, _3707, _3708), vec3(_1071, _1074, _1077))) + _3720;
                                float _3726 = _3717 * _3717;
                                float _3730 = (fma(_2850, _3610.z, fma(_2849, _3610.y, _3610.x * _2848)) + _3610.w) / _3671;
                                float _3731 = (fma(_2850, _3625.z, fma(_2849, _3625.y, _3625.x * _2848)) + _3625.w) / _3671;
                                float _3735 = 1.0 - dot(vec2(_3730, _3731), vec2(_3730, _3731));
                                float _4873 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3737 = _3736 * (((isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0))) * _3713) / ((_3726 * 0.699999988079071044921875) + 1.0));
                                float _3749 = exp2(log2(1.0 / ((_3726 * 3.5) + 5.0)) * 0.25);
                                float _3750 = 1.0 - _1146;
                                float _3757 = sqrt(1.0 - ((1.0 - (_3750 * _3750)) * (1.0 - (_3749 * _3749))));
                                float _3758 = _3757 * _3757;
                                float _3759 = _3758 * _3758;
                                float _3760 = _3706 - _3179;
                                float _3761 = _3707 - _3180;
                                float _3762 = _3708 - _3181;
                                float _3766 = inversesqrt(dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762)));
                                float _3770 = dot(vec3(_1071, _1074, _1077), vec3((-0.0) - _3179, (-0.0) - _3180, (-0.0) - _3181));
                                float _4884 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3774 = dot(vec3(_1071, _1074, _1077), vec3(_3766 * _3760, _3766 * _3761, _3766 * _3762));
                                float _4895 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3777 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3781 = ((_3777 * _3777) * (_3759 + (-1.0))) + 1.0;
                                float _3782 = _3719 * _3758;
                                float _3783 = _3782 * _3782;
                                float _3789 = ((1.0 - _3783) * dot(vec3(_1071, _1074, _1077), vec3(_3706, _3707, _3708))) + _3783;
                                float _4906 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3791 = 1.0 - _3758;
                                float _3801 = (0.5 / (((_3790 * ((_3773 * _3791) + _3758)) + 9.9999999392252902907785028219223e-09) + (((_3790 * _3791) + _3758) * _3773))) * _3790;
                                float _4917 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3811 = (_3736 * _3713) * (((_3759 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3781 * _3781) * ((_3726 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3737 * _3583.y;
                                frontier_phi_85_pred_1 = _3737 * _3583.x;
                                frontier_phi_85_pred_2 = _3811 * _3595.z;
                                frontier_phi_85_pred_3 = _3811 * _3595.y;
                                frontier_phi_85_pred_4 = _3811 * _3595.x;
                                frontier_phi_85_pred_5 = _3737 * _3583.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_85_pred;
                            _3818 = frontier_phi_85_pred_1;
                            _3817 = frontier_phi_85_pred_2;
                            _3816 = frontier_phi_85_pred_3;
                            _3815 = frontier_phi_85_pred_4;
                            _3820 = frontier_phi_85_pred_5;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3527 = _3820 + _3540;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3524 = _3817 + _3537;
                            if (_3542 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3542;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3527;
                        frontier_phi_79_pred_1 = _3526;
                        frontier_phi_79_pred_2 = _3525;
                        frontier_phi_79_pred_3 = _3524;
                        frontier_phi_79_pred_4 = _3523;
                        frontier_phi_79_pred_5 = _3522;
                    }
                    _3164 = frontier_phi_79_pred;
                    _3162 = frontier_phi_79_pred_1;
                    _3160 = frontier_phi_79_pred_2;
                    _3158 = frontier_phi_79_pred_3;
                    _3156 = frontier_phi_79_pred_4;
                    _3154 = frontier_phi_79_pred_5;
                    uint _3320 = _3319 + 1u;
                    if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3313 = _3154;
                        _3314 = _3156;
                        _3315 = _3158;
                        _3316 = _3160;
                        _3317 = _3162;
                        _3318 = _3164;
                        _3319 = _3320;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3158;
                frontier_phi_60_61_ladder_1 = _3164;
                frontier_phi_60_61_ladder_2 = _3162;
                frontier_phi_60_61_ladder_3 = _3160;
                frontier_phi_60_61_ladder_4 = _3156;
                frontier_phi_60_61_ladder_5 = _3154;
            }
            else
            {
                frontier_phi_60_61_ladder = _3028;
                frontier_phi_60_61_ladder_1 = _3034;
                frontier_phi_60_61_ladder_2 = _3032;
                frontier_phi_60_61_ladder_3 = _3030;
                frontier_phi_60_61_ladder_4 = _3026;
                frontier_phi_60_61_ladder_5 = _3024;
            }
            _3153 = frontier_phi_60_61_ladder_5;
            _3155 = frontier_phi_60_61_ladder_4;
            _3157 = frontier_phi_60_61_ladder;
            _3159 = frontier_phi_60_61_ladder_3;
            _3161 = frontier_phi_60_61_ladder_2;
            _3163 = frontier_phi_60_61_ladder_1;
        }
        float _3168 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2907 = (_3168 * _3159) + _2340;
        _2909 = (_3168 * _3161) + _2342;
        _2911 = (_3168 * _3163) + _2344;
        _2913 = ((_3153 * _1115) * _3168) + _2688;
        _2915 = ((_3155 * _1117) * _3168) + _2690;
        _2917 = ((_3157 * _1118) * _3168) + _2692;
    }
    else
    {
        _2907 = _2340;
        _2909 = _2342;
        _2911 = _2344;
        _2913 = _2688;
        _2915 = _2690;
        _2917 = _2692;
    }
    uint _2923 = _1091 + uint(cbMatDynParam._m0[0u].w);
    float _2929 = ((((((_863.x - _858.x) * _841) + _858.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _787) * cbMtdParam._m0[20u].x)) * _796) * cbInstanceData._m0[_2923].x;
    float _2930 = ((((((_863.y - _858.y) * _841) + _858.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_776.y - _774) * _755) + _774)) * cbMtdParam._m0[20u].y)) * _796) * cbInstanceData._m0[_2923].y;
    float _2931 = ((((((_863.z - _858.z) * _841) + _858.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_776.z - _775) * _755) + _775)) * cbMtdParam._m0[20u].z)) * _796) * cbInstanceData._m0[_2923].z;
    float _4933 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4944 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4955 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2948 = (((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2907 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1130))) + ((_2913 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1959)) * cbPerFrame._m0[3u].x)) + _2929;
    float _2950 = (_2930 + ((_2915 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1959)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2909 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1130)));
    float _2952 = (_2931 + ((_2917 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1959)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2911 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1130)));
    float _2953 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
    float _2954 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2955 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
    float _2961 = cbMtdParam._m0[2u].x * _2929;
    float _2962 = cbMtdParam._m0[2u].y * _2930;
    float _2963 = cbMtdParam._m0[2u].z * _2931;
    float _4981 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2965 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
    uint _2966 = _1090 + 6u;
    float _2974 = _1052 / cbSceneParam._m0[86u].x;
    float _2975 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _2989 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2991 = _2989.x;
    float _2992 = _2989.y;
    float _2993 = _2989.z;
    float _2994 = _2989.w;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3049 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3050 = _3049 / _977;
        float _3061 = _3050 * _1028;
        float _3062 = _1029 * _3050;
        float _3063 = (-0.0) - _3062;
        float _3064 = _3050 * _1030;
        float _3066 = (cbSceneParam._m0[77u].w * _3063) / _3049;
        float _3067 = _3066 + cbSceneParam._m0[79u].w;
        float _3068 = cbSceneParam._m0[79u].w - _3062;
        float _3074 = sqrt(((_3061 * _3061) + (_3062 * _3062)) + (_3064 * _3064));
        float _3077 = (1.0 - (cbSceneParam._m0[77u].w / _3049)) * _3074;
        float _3082 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3084 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3270;
        if (abs((_3063 - _3066) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3270 = ((((_3067 > 0.0) ? exp2(_3082 * _3067) : (2.0 - exp2(_3084 * _3067))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3077;
        }
        else
        {
            float _3214 = 1.0 / cbSceneParam._m0[80u].x;
            float _3215 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : max(_3067, _3068));
            float _3216 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : min(_3067, _3068));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            _3270 = ((abs(_3074 / _3063) * cbSceneParam._m0[80u].y) * ((((_3225 - _3226) * 2.0) - ((exp2(_3082 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0)))) - exp2(_3082 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))))) * _3214)) - ((exp2(_3084 * _3225) - exp2(_3084 * _3226)) * _3214))) + (_3077 * cbSceneParam._m0[80u].z);
        }
        vec4 _3272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, 1.0), 0.0);
        float _3281 = exp2((_3270 * (-1.44269502162933349609375)) * (1.0 - _3272.w));
        float _3282 = log2(_3281);
        float _3298 = log2(_2994);
        _3086 = (exp2(_3298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].x)) * _3272.x) / cbSceneParam._m0[78u].x)) + _2991;
        _3088 = (exp2(_3298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].y)) * _3272.y) / cbSceneParam._m0[78u].y)) + _2992;
        _3090 = (exp2(_3298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].z)) * _3272.z) / cbSceneParam._m0[78u].z)) + _2993;
        _3092 = _3281 * _2994;
    }
    else
    {
        _3086 = _2991;
        _3088 = _2992;
        _3090 = _2993;
        _3092 = _2994;
    }
    bool _3308;
    vec4 _3102;
    vec4 _3124;
    float _3126;
    float _3130;
    float _3131;
    float _3132;
    float _3135;
    float _3138;
    float _3141;
    float _3142;
    bool _3152;
    for (;;)
    {
        _3102 = cbMatDynParam._m0[0u];
        float _3104 = roundEven(_3102.y);
        bool _3105 = _3104 == 3.0;
        float _3106 = log2(_3092);
        float _3110 = exp2(_3106 * cbSceneParam._m0[78u].x);
        float _3111 = exp2(_3106 * cbSceneParam._m0[78u].y);
        float _3112 = exp2(_3106 * cbSceneParam._m0[78u].z);
        float _3113 = _3110 * _2953;
        float _3114 = _3111 * _2954;
        float _3115 = _3112 * _2955;
        float _3122 = _1041 + (-0.5);
        _3124 = cbMtdParam._m0[1u];
        _3126 = _3124.y * _3122;
        float _3129 = (_3104 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3130 = _3129 * (_3105 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3086)));
        _3131 = _3129 * (_3105 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3088)));
        _3132 = _3129 * (_3105 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3090)));
        _3135 = ((_2961 * _2965) * _3110) * _3129;
        _3138 = ((_2962 * _2965) * _3111) * _3129;
        _3141 = ((_2963 * _2965) * _3112) * _3129;
        _3142 = _3122 * 0.999000012874603271484375;
        _3152 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3152)
        {
            if ((cbInstanceData._m0[_1090 + 7u].x + _3142) < 0.5)
            {
                _3308 = true;
                break;
            }
        }
        uint _3249 = _1091 + uint(_3102.w);
        if ((cbInstanceData._m0[_3249].w < 1.0) && ((cbInstanceData._m0[_3249].w + _3142) < 0.5))
        {
            _3308 = true;
            break;
        }
        if ((_3126 + 1.0) < _3124.x)
        {
            _3308 = true;
            break;
        }
        _3308 = false;
        break;
    }
    float _3513;
    if (_3308)
    {
        discard_state = true;
        _3513 = 0.0;
    }
    else
    {
        _3513 = cbInstanceData._m0[_2966].w;
    }
    SV_Target.x = _3130;
    SV_Target.y = _3131;
    SV_Target.z = _3132;
    SV_Target.w = _3513;
    SV_Target_1.x = _3135;
    SV_Target_1.y = _3138;
    SV_Target_1.z = _3141;
    SV_Target_1.w = cbInstanceData._m0[_2966].w;
    discard_exit();
}


