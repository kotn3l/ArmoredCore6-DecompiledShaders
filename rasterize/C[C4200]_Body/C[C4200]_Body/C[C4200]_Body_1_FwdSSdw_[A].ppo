#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1458;
float _3896;
float _3897;
float _3898;
float _3899;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _271 = exp2(log2(_257.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _272 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _273 = isnan(1.0) ? _272 : (isnan(_272) ? 1.0 : min(_272, 1.0));
    vec4 _287 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _291 = _287.z;
    float _299 = exp2(log2(_291 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _322 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(4.0) ? _323 : (isnan(_323) ? 4.0 : min(_323, 4.0));
    float _337 = floor(_324);
    vec4 _340 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _337));
    vec4 _365 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _376 = cbMtdParam._m0[9u].x * _365.x;
    float _377 = cbMtdParam._m0[9u].y * _365.y;
    float _378 = cbMtdParam._m0[9u].z * _365.z;
    float _385 = (((cbMtdParam._m0[10u].x * _340.x) - _376) * _301) + _376;
    float _386 = (((cbMtdParam._m0[10u].y * _340.y) - _377) * _301) + _377;
    float _387 = (((cbMtdParam._m0[10u].z * _340.z) - _378) * _301) + _378;
    float _393 = exp2(log2(_287.w) * cbMtdParam._m0[24u].w);
    vec4 _406 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _426 = (((cbMtdParam._m0[16u].x * _406.x) - _385) * _393) + _385;
    float _427 = (((cbMtdParam._m0[16u].y * _406.y) - _386) * _393) + _386;
    float _428 = (((cbMtdParam._m0[16u].z * _406.z) - _387) * _393) + _387;
    vec4 _441 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _466 = (_257.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _441.x) - _426) * _273) + _426);
    float _468 = (_257.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _441.y) - _427) * _273) + _427);
    float _470 = (_257.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _441.z) - _428) * _273) + _428);
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[30u].z;
    _189[0u] = cbMtdParam._m0[30u].w;
    _188[1u] = cbMtdParam._m0[32u].z;
    _189[1u] = cbMtdParam._m0[32u].w;
    _188[2u] = cbMtdParam._m0[32u].x;
    _189[2u] = cbMtdParam._m0[32u].y;
    _188[3u] = cbMtdParam._m0[31u].z;
    _189[3u] = cbMtdParam._m0[31u].w;
    _188[4u] = cbMtdParam._m0[31u].x;
    _189[4u] = cbMtdParam._m0[31u].y;
    float _508 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    uint _510 = uint(int(isnan(4.0) ? _508 : (isnan(_508) ? 4.0 : min(_508, 4.0))));
    float _517 = ((_189[_510] - cbMtdParam._m0[23u].z) * _301) + cbMtdParam._m0[23u].z;
    float _520 = ((cbMtdParam._m0[23u].w - _517) * _393) + _517;
    float _523 = ((cbMtdParam._m0[26u].y - _520) * _273) + _520;
    vec4 _538 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _337));
    vec4 _556 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _564 = cbMtdParam._m0[23u].x + _556.z;
    float _567 = (((_538.z + _188[_510]) - _564) * _301) + _564;
    vec4 _579 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _590 = (((_579.z - _567) + cbMtdParam._m0[30u].x) * _393) + _567;
    float _596 = ((((_291 * 2.0) * _590) - _590) * cbMtdParam._m0[25u].w) + _590;
    vec4 _608 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _619 = (((cbMtdParam._m0[24u].z + _608.z) - _596) * _273) + _596;
    float _632 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _655 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_632 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _632) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _659 = cbPerFrame._m0[22u].x * 2.0;
    float _660 = _659 * cbMtdParam._m0[28u].z;
    float _663 = (_655.x * 0.5) + (-0.25);
    float _666 = (_655.y * 0.5) + (-0.25);
    float _667 = _666 * cbMtdParam._m0[28u].y;
    float _669 = (-0.0) - (cbMtdParam._m0[28u].y * _663);
    float _671 = fract(_660);
    float _673 = fract(_660 + 0.5);
    float _685 = abs((_671 * 2.0) + (-1.0));
    vec4 _702 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_671 * _669) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_667 * _671) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _704 = _702.x;
    float _705 = _702.y;
    float _706 = _702.z;
    vec4 _707 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_673 * _669) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_667 * _673) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _718 = ((_707.x - _704) * _685) + _704;
    float _725 = exp2(log2(_718 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _726 = isnan(cbMtdParam._m0[29u].y) ? _725 : (isnan(_725) ? cbMtdParam._m0[29u].y : max(_725, cbMtdParam._m0[29u].y));
    float _727 = isnan(cbMtdParam._m0[29u].z) ? _726 : (isnan(_726) ? cbMtdParam._m0[29u].z : min(_726, cbMtdParam._m0[29u].z));
    float _751 = (cbMtdParam._m0[33u].x * _632) + TEXCOORD;
    float _752 = (cbMtdParam._m0[33u].y * _632) + TEXCOORD_1;
    float _755 = _659 * cbMtdParam._m0[27u].w;
    float _756 = _666 * cbMtdParam._m0[27u].z;
    float _758 = (-0.0) - (cbMtdParam._m0[27u].z * _663);
    float _759 = fract(_755);
    float _761 = fract(_755 + 0.5);
    float _772 = abs((_759 * 2.0) + (-1.0));
    vec4 _789 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_759 * _758) + _751) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_756 * _759) + _752) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _794 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_761 * _758) + _751) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_756 * _761) + _752) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _828 = ((_538.x - _558) * _301) + _558;
    float _829 = ((_538.y - _559) * _301) + _559;
    float _834 = ((_579.x - _828) * _393) + _828;
    float _835 = ((_579.y - _829) * _393) + _829;
    float _844 = ((((_608.x - _834) * _273) + _834) * 2.0) + (-1.0);
    float _845 = ((((_608.y - _835) * _273) + _835) * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _3958 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _851 = sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))));
    float _854 = (cbMtdParam._m0[26u].z * ((_287.x * 2.0) + (-1.0))) + _844;
    float _855 = (cbMtdParam._m0[26u].z * ((_287.y * 2.0) + (-1.0))) + _845;
    float _857 = gl_FragCoord.x * 0.125;
    float _859 = gl_FragCoord.y * 0.125;
    float _870 = fma(_851, _229 * NORMAL.x, fma(_855, _236 * TANGENT.x, (_222 * _214) * _854));
    float _873 = fma(_851, _229 * NORMAL.y, fma(_855, _236 * TANGENT.y, (_222 * _215) * _854));
    float _876 = fma(_851, _229 * NORMAL.z, fma(_855, _236 * TANGENT.z, (_222 * _216) * _854));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _3969 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _884 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3991 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4002 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4013 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _888 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_857, _859)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _908 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _959 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _949);
    float _960 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _949);
    float _961 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _949);
    float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
    float _966 = _959 * _965;
    float _967 = _960 * _965;
    float _968 = _961 * _965;
    vec4 _970 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_857, _859));
    float _972 = _970.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1142 = sqrt(((_959 * _959) + (_960 * _960)) + (_961 * _961));
        float _1148 = (cbMatDynParam._m0[5u].x * _1142) + cbMatDynParam._m0[5u].y;
        float _4024 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1153 = (cbMatDynParam._m0[5u].z * _1142) + cbMatDynParam._m0[5u].w;
        float _4035 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) - _1149)) + _1149) < ((_972 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _983 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _984 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1002 = fma(_883, cbSceneParam._m0[5u].z, fma(_882, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _881));
    float _1005 = fma(_883, cbSceneParam._m0[6u].z, fma(_882, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _881));
    float _1008 = fma(_883, cbSceneParam._m0[7u].z, fma(_882, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _881));
    uint _1021 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1022 = _1021 + 9u;
    uint _1023 = _1022 + uint(cbMatDynParam._m0[0u].w);
    float _1029 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_1023].x;
    float _1030 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1023].y;
    float _1031 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1023].z;
    float _4046 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1035 = 1.0 - _888;
    float _1036 = _1032 * _1035;
    float _1037 = _1033 * _1035;
    float _1038 = _1034 * _1035;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _888;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _888;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _888;
    float _1046 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    vec4 _1058 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _983, cbSceneParam._m0[86u].y * _984));
    float _1061 = _1058.x * TEXCOORD_3.w;
    float _1062 = dot(vec3(_881, _882, _883), vec3(_966, _967, _968));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _881) - _966;
    float _1070 = (_1065 * _882) - _967;
    float _1071 = (_1065 * _883) - _968;
    float _1075 = abs(dot(vec3(_966, _967, _968), vec3(_881, _882, _883)));
    float _4079 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_884);
    float _1088 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1094 = (1.0 - _1088) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1095 = _1088 * _1077;
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1457;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1184 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1188 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1192 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1216 = _1123 + _881;
        float _1217 = _1127 + _882;
        float _1218 = _1131 + _883;
        float _1228 = fma(_1218, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216)) - _1184;
        float _1229 = fma(_1218, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216)) - _1188;
        float _1230 = fma(_1218, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216)) - _1192;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1246 = ((_1234 * _1228) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1184 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1234 * _1229) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1188 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1230) / cbModelParam._m0[34u].z) + ((((((_1192 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1285 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1251.x + (-0.5));
        float _1287 = _1285 * (_1251.y + (-0.5));
        float _1288 = _1285 * (_1251.z + (-0.5));
        float _1295 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1258.x + (-0.5));
        float _1297 = _1295 * (_1258.y + (-0.5));
        float _1298 = _1295 * (_1258.z + (-0.5));
        float _1305 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1265.x + (-0.5));
        float _1307 = _1305 * (_1265.y + (-0.5));
        float _1308 = _1305 * (_1265.z + (-0.5));
        float _1315 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1272.x + (-0.5));
        float _1317 = _1315 * (_1272.y + (-0.5));
        float _1318 = _1315 * (_1272.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1339 = (dot(vec3(_881, _882, _883), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1349 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4127 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1351 + 1.0))) + _1356) * _1319;
        float _1366 = _1287 * 0.5;
        float _1367 = _1297 * 0.5;
        float _1368 = _1307 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_881, _882, _883), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4160 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1393 + 1.0))) + _1398) * _1320;
        float _1408 = _1288 * 0.5;
        float _1409 = _1298 * 0.5;
        float _1410 = _1308 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_881, _882, _883), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4193 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1435 + 1.0))) + _1440) * _1321;
        _1457 = _1288;
        _1459 = _1287;
        _1460 = _1286;
        _1461 = _1298;
        _1462 = _1297;
        _1463 = _1296;
        _1464 = _1308;
        _1465 = _1307;
        _1466 = _1306;
        _1467 = _1321;
        _1468 = _1320;
        _1469 = _1319;
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1458;
        _1459 = _1458;
        _1460 = _1458;
        _1461 = _1458;
        _1462 = _1458;
        _1463 = _1458;
        _1464 = _1458;
        _1465 = _1458;
        _1466 = _1458;
        _1467 = _1458;
        _1468 = _1458;
        _1469 = _1458;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1499 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1503 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1526 = _1123 + _881;
        float _1527 = _1127 + _882;
        float _1528 = _1131 + _883;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_881, _882, _883), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4256 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_881, _882, _883), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4289 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_881, _882, _883), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4322 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1458;
        _1765 = _1458;
        _1766 = _1458;
        _1767 = _1458;
        _1768 = _1458;
        _1769 = _1458;
        _1770 = _1458;
        _1771 = _1458;
        _1772 = _1458;
        _1773 = _1458;
        _1774 = _1458;
        _1775 = _1458;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1470)) + _1470;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1471)) + _1471;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1472)) + _1472;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1069 * 0.5;
    float _1833 = _1070 * 0.5;
    float _1834 = _1071 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1457, _1461, _1464, _1467));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _884);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1948 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1952 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1956 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1959 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1962 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1965 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1993;
        if (_1959 > 0.0)
        {
            _1993 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1993 = frontier_phi_19_17_ladder;
        }
        float _2217;
        if (_1962 > 0.0)
        {
            _2217 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2217 = frontier_phi_28_24_ladder;
        }
        float _2474;
        if (_1965 > 0.0)
        {
            _2474 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2474 = frontier_phi_40_35_ladder;
        }
        float _2476 = isnan(_2217) ? _1993 : (isnan(_1993) ? _2217 : min(_1993, _2217));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1959) + _1948;
        float _2482 = (_2477 * _1962) + _1952;
        float _2483 = (_2477 * _1965) + _1956;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2484;
        float _2488 = _2484 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 > _2488) || ((_2482 < _2486) || ((_2481 < _2486) || (_2481 > _2488))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2483, cbModelParam._m0[9u].z, fma(_2482, cbModelParam._m0[9u].y, _2481 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2483, cbModelParam._m0[10u].z, fma(_2482, cbModelParam._m0[10u].y, _2481 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2483, cbModelParam._m0[11u].z, fma(_2482, cbModelParam._m0[11u].y, _2481 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_18_40_ladder = _2611.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2611.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2611.x * cbModelParam._m0[1u].y;
        }
        _1981 = frontier_phi_18_40_ladder_2;
        _1983 = frontier_phi_18_40_ladder_1;
        _1985 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1901);
        _1981 = _1969.x * cbModelParam._m0[1u].y;
        _1983 = _1969.y * cbModelParam._m0[1u].y;
        _1985 = _1969.z * cbModelParam._m0[1u].y;
    }
    float _1989 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _884);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1989 : min(cbModelParam._m0[25u].w, _1989));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2057 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2060 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2222;
        if (_2054 > 0.0)
        {
            _2222 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2222 = frontier_phi_30_26_ladder;
        }
        float _2501;
        if (_2057 > 0.0)
        {
            _2501 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2501 = frontier_phi_42_37_ladder;
        }
        float _2714;
        if (_2060 > 0.0)
        {
            _2714 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2714 = frontier_phi_51_48_ladder;
        }
        float _2716 = isnan(_2501) ? _2222 : (isnan(_2222) ? _2501 : min(_2222, _2501));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _2054) + _2043;
        float _2722 = (_2717 * _2057) + _2047;
        float _2723 = (_2717 * _2060) + _2051;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _1990);
            frontier_phi_27_51_ladder = _2951.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2951.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2951.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_27_51_ladder_2;
        _2081 = frontier_phi_27_51_ladder_1;
        _2083 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1990);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1094 * _1046) + _1095) * _1061) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1094 * _1048) + _1095) * _1061) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1094 * _1049) + _1095) * _1061) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    vec4 _2117 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_983, _984));
    float _2119 = _2117.w;
    float _2131 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2119);
    float _2132 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2119);
    float _2133 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2119);
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_1021 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _1061 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2175 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2179 = _2139 | 1u;
    float _2190 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_881, _882, _883));
    float _2193 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_881, _882, _883));
    float _4458 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _4469 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2198 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2200 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2207 = ((cbLight._m0[_2156].x * _2162) * _2200) + (((cbLight._m0[_2166].x * _2131) * _2175) * _2198);
    float _2208 = ((_2162 * cbLight._m0[_2156].y) * _2200) + (((cbLight._m0[_2166].y * _2132) * _2175) * _2198);
    float _2209 = ((_2162 * cbLight._m0[_2156].z) * _2200) + (((cbLight._m0[_2166].z * _2133) * _2175) * _2198);
    uvec4 _2214 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2216 = _2214.x == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2216)
    {
        _2227 = _2207;
        _2229 = _2208;
        _2231 = _2209;
    }
    else
    {
        uint _2235 = _2139 + 6u;
        float _2251 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4480 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2254 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2227 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2207;
        _2229 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2208;
        _2231 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2209;
    }
    bool _2234 = _2214.y == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2234)
    {
        _2272 = _2227;
        _2274 = _2229;
        _2276 = _2231;
    }
    else
    {
        uint _2445 = _2139 + 7u;
        float _2461 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4496 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2464 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2272 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2227;
        _2274 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2229;
        _2276 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2231;
    }
    uint _2279 = _2139 + 8u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _884) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2139].x + _966;
    float _2295 = cbLight._m0[_2139].y + _967;
    float _2296 = cbLight._m0[_2139].z + _968;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2139].xyz));
    float _4512 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2308 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2309 = dot(vec3(_881, _882, _883), vec3(_2301, _2302, _2303));
    float _4534 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2301, _2302, _2303));
    float _4545 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2293 * _2293;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
    float _2330 = 0.959999978542327880859375 - _1043;
    float _2332 = 0.959999978542327880859375 - _1044;
    float _2333 = 0.959999978542327880859375 - _1045;
    float _2340 = 1.0 - _2293;
    float _2351 = (0.5 / (((_2308 * ((_2307 * _2340) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2340) + _2293) * _2307))) * _2307;
    float _4556 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    uint _2367 = _2139 + 9u;
    float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _884) * 0.949999988079071044921875);
    float _2379 = _2378 * _2378;
    float _2380 = cbLight._m0[_2179].x + _966;
    float _2381 = cbLight._m0[_2179].y + _967;
    float _2382 = cbLight._m0[_2179].z + _968;
    float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
    float _2387 = _2386 * _2380;
    float _2388 = _2386 * _2381;
    float _2389 = _2386 * _2382;
    float _2390 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2179].xyz));
    float _4567 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2394 = dot(vec3(_881, _882, _883), vec3(_2387, _2388, _2389));
    float _4578 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2398 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2387, _2388, _2389));
    float _4589 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2402 = _2379 * _2379;
    float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
    float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2420 = 1.0 - _2379;
    float _2430 = (0.5 / (((_2308 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2420) + _2379) * _2393))) * _2393;
    float _4600 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
    float _2442 = (((((_2413 * _2330) + _1046) * cbLight._m0[_2367].x) * _2432) * _2162) + ((((cbLight._m0[_2279].x * _2131) * ((_2329 * _2330) + _1046)) * _2353) * _2175);
    float _2443 = (((((_2413 * _2332) + _1048) * cbLight._m0[_2367].y) * _2432) * _2162) + ((((cbLight._m0[_2279].y * _2132) * ((_2329 * _2332) + _1048)) * _2353) * _2175);
    float _2444 = (((((_2413 * _2333) + _1049) * cbLight._m0[_2367].z) * _2432) * _2162) + ((((cbLight._m0[_2279].z * _2133) * ((_2329 * _2333) + _1049)) * _2353) * _2175);
    float _2506;
    float _2508;
    float _2510;
    if (_2216)
    {
        _2506 = _2442;
        _2508 = _2443;
        _2510 = _2444;
    }
    else
    {
        uint _2512 = _2139 + 2u;
        uint _2516 = _2139 + 10u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _884) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _966;
        float _2533 = cbLight._m0[_2512].y + _967;
        float _2534 = cbLight._m0[_2512].z + _968;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2512].xyz));
        float _4611 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2546 = dot(vec3(_881, _882, _883), vec3(_2539, _2540, _2541));
        float _4622 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4633 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2308 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2572) + _2531) * _2545))) * _2545;
        float _4644 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2506 = (((((_2565 * _2330) + _1046) * cbLight._m0[_2516].x) * _2584) * _2585) + _2442;
        _2508 = (((((_2565 * _2332) + _1048) * cbLight._m0[_2516].y) * _2584) * _2585) + _2443;
        _2510 = (((((_2565 * _2333) + _1049) * cbLight._m0[_2516].z) * _2584) * _2585) + _2444;
    }
    float _2620;
    float _2622;
    float _2624;
    if (_2234)
    {
        _2620 = _2506;
        _2622 = _2508;
        _2624 = _2510;
    }
    else
    {
        uint _2631 = _2139 + 3u;
        uint _2635 = _2139 + 11u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _884) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _966;
        float _2652 = cbLight._m0[_2631].y + _967;
        float _2653 = cbLight._m0[_2631].z + _968;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2631].xyz));
        float _4660 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2665 = dot(vec3(_881, _882, _883), vec3(_2658, _2659, _2660));
        float _4671 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4682 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0);
        float _2691 = 1.0 - _2650;
        float _2701 = (0.5 / (((_2308 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2691) + _2650) * _2664))) * _2664;
        float _4693 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2620 = (((((_2684 * _2330) + _1046) * cbLight._m0[_2635].x) * _2703) * _2704) + _2506;
        _2622 = (((((_2684 * _2332) + _1048) * cbLight._m0[_2635].y) * _2703) * _2704) + _2508;
        _2624 = (((((_2684 * _2333) + _1049) * cbLight._m0[_2635].z) * _2703) * _2704) + _2510;
    }
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_2137.y == 0u)
    {
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2779;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2779;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2779;
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.x;
        uint _2806 = uint((float(_2794.y) * floor(float(uint(cbSceneParam._m0[85u].y * _984) / _2795))) + floor(float(uint(cbSceneParam._m0[85u].x * _983) / _2795)));
        float _2816 = (log2(_2782 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2817 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        uint _2820 = uint(isnan(14.0) ? _2817 : (isnan(_2817) ? 14.0 : min(_2817, 14.0)));
        uvec4 _2825 = texelFetch(g_lightClusterGridBuffer, int(((_2820 << 2u) + (_2806 << 6u)) >> 2u));
        uint _2826 = _2825.x;
        uint _2827 = _2794.z;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((((1u << ((_2827 >> 4u) & 15u)) + 4294967295u) & _2826) == 0u) || ((_2827 & 240u) == 0u))
        {
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
        }
        else
        {
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            uint _3123 = 0u;
            uint _3132;
            bool _3133;
            for (;;)
            {
                _3132 = texelFetch(g_lightClassification, int((((_2820 << 5u) + (_2806 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                _3133 = _3132 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3133)
                {
                    frontier_phi_68_pred = _3117;
                    frontier_phi_68_pred_1 = _3122;
                    frontier_phi_68_pred_2 = _3121;
                    frontier_phi_68_pred_3 = _3120;
                    frontier_phi_68_pred_4 = _3119;
                    frontier_phi_68_pred_5 = _3118;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3132;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3123 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _2780;
                        float _3329 = _3288.y - _2781;
                        float _3330 = _3288.z - _2782;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_1002, _1005, _1008), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4719 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3359 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _2780;
                        float _3364 = (-0.0) - _2781;
                        float _3365 = (-0.0) - _2782;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3380 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _1077;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3370 + _3335;
                        float _3392 = _3371 + _3336;
                        float _3393 = _3372 + _3337;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_1002, _1005, _1008), vec3(_3370, _3371, _3372));
                        float _4735 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3405 = dot(vec3(_1002, _1005, _1008), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4746 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3348 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3338) + _3414;
                        float _4757 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4768 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3412 * _3412) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3192 = (_3359 * _3307.x) + _3265;
                        _3193 = (_3359 * _3307.y) + _3266;
                        _3194 = (_3359 * _3307.z) + _3267;
                        _3189 = (_3440 * _3324.x) + _3262;
                        _3190 = (_3440 * _3324.y) + _3263;
                        _3191 = (_3440 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_68_pred = _3189;
                    frontier_phi_68_pred_1 = _3194;
                    frontier_phi_68_pred_2 = _3193;
                    frontier_phi_68_pred_3 = _3192;
                    frontier_phi_68_pred_4 = _3191;
                    frontier_phi_68_pred_5 = _3190;
                }
                _2957 = frontier_phi_68_pred;
                _2967 = frontier_phi_68_pred_1;
                _2965 = frontier_phi_68_pred_2;
                _2963 = frontier_phi_68_pred_3;
                _2961 = frontier_phi_68_pred_4;
                _2959 = frontier_phi_68_pred_5;
                uint _3124 = _3123 + 1u;
                if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3117 = _2957;
                    _3118 = _2959;
                    _3119 = _2961;
                    _3120 = _2963;
                    _3121 = _2965;
                    _3122 = _2967;
                    _3123 = _3124;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
        }
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.z;
        uint _2973 = (_2971 >> 8u) & 15u;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((4294967295u << _2973) & _2826) == 0u)
        {
            _3085 = _2956;
            _3087 = _2958;
            _3089 = _2960;
            _3091 = _2962;
            _3093 = _2964;
            _3095 = _2966;
        }
        else
        {
            float _3110 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
            float _3111 = _3110 * _2780;
            float _3112 = _3110 * _2781;
            float _3113 = _3110 * _2782;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2973 < ((_2971 >> 12u) & 15u))
            {
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3245 = _2956;
                float _3246 = _2958;
                float _3247 = _2960;
                float _3248 = _2962;
                float _3249 = _2964;
                float _3250 = _2966;
                uint _3251 = _2973;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2820 << 5u) + (_2806 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3261)
                    {
                        frontier_phi_79_pred = _3250;
                        frontier_phi_79_pred_1 = _3249;
                        frontier_phi_79_pred_2 = _3248;
                        frontier_phi_79_pred_3 = _3247;
                        frontier_phi_79_pred_4 = _3246;
                        frontier_phi_79_pred_5 = _3245;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        uint _3473 = _3260;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3542;
                        vec4 _3557;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3484 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3529 = (_3484 * 40u) + 16u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3484 * 40u) + 20u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3484 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3484 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_2782, _3591.z, fma(_2781, _3591.y, _3591.x * _2780)) + _3591.w;
                            _3604 = !((fma(_2782, _3572.z, fma(_2781, _3572.y, _3572.x * _2780)) + _3572.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3499.x - _2780;
                                float _3632 = _3499.y - _2781;
                                float _3633 = _3499.z - _2782;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3500 * _3500));
                                float _4779 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3649 = sqrt(_3634) * _3515.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_1002, _1005, _1008))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_2782, _3542.z, fma(_2781, _3542.y, _3542.x * _2780)) + _3542.w) / _3603;
                                float _3663 = (fma(_2782, _3557.z, fma(_2781, _3557.y, _3557.x * _2780)) + _3557.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4795 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _1077;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3111;
                                float _3693 = _3639 - _3112;
                                float _3694 = _3640 - _3113;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_1002, _1005, _1008), vec3((-0.0) - _3111, (-0.0) - _3112, (-0.0) - _3113));
                                float _4806 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3706 = dot(vec3(_1002, _1005, _1008), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4817 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_1002, _1005, _1008), vec3(_3638, _3639, _3640))) + _3715;
                                float _4828 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4839 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3669 * _3515.y;
                                frontier_phi_85_pred_1 = _3669 * _3515.x;
                                frontier_phi_85_pred_2 = _3743 * _3527.z;
                                frontier_phi_85_pred_3 = _3743 * _3527.y;
                                frontier_phi_85_pred_4 = _3743 * _3527.x;
                                frontier_phi_85_pred_5 = _3669 * _3515.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_85_pred;
                            _3750 = frontier_phi_85_pred_1;
                            _3749 = frontier_phi_85_pred_2;
                            _3748 = frontier_phi_85_pred_3;
                            _3747 = frontier_phi_85_pred_4;
                            _3752 = frontier_phi_85_pred_5;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3459;
                        frontier_phi_79_pred_1 = _3458;
                        frontier_phi_79_pred_2 = _3457;
                        frontier_phi_79_pred_3 = _3456;
                        frontier_phi_79_pred_4 = _3455;
                        frontier_phi_79_pred_5 = _3454;
                    }
                    _3096 = frontier_phi_79_pred;
                    _3094 = frontier_phi_79_pred_1;
                    _3092 = frontier_phi_79_pred_2;
                    _3090 = frontier_phi_79_pred_3;
                    _3088 = frontier_phi_79_pred_4;
                    _3086 = frontier_phi_79_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3086;
                        _3246 = _3088;
                        _3247 = _3090;
                        _3248 = _3092;
                        _3249 = _3094;
                        _3250 = _3096;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3090;
                frontier_phi_60_61_ladder_1 = _3096;
                frontier_phi_60_61_ladder_2 = _3094;
                frontier_phi_60_61_ladder_3 = _3092;
                frontier_phi_60_61_ladder_4 = _3088;
                frontier_phi_60_61_ladder_5 = _3086;
            }
            else
            {
                frontier_phi_60_61_ladder = _2960;
                frontier_phi_60_61_ladder_1 = _2966;
                frontier_phi_60_61_ladder_2 = _2964;
                frontier_phi_60_61_ladder_3 = _2962;
                frontier_phi_60_61_ladder_4 = _2958;
                frontier_phi_60_61_ladder_5 = _2956;
            }
            _3085 = frontier_phi_60_61_ladder_5;
            _3087 = frontier_phi_60_61_ladder_4;
            _3089 = frontier_phi_60_61_ladder;
            _3091 = frontier_phi_60_61_ladder_3;
            _3093 = frontier_phi_60_61_ladder_2;
            _3095 = frontier_phi_60_61_ladder_1;
        }
        float _3100 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2839 = (_3100 * _3091) + _2272;
        _2841 = (_3100 * _3093) + _2274;
        _2843 = (_3100 * _3095) + _2276;
        _2845 = ((_3085 * _1046) * _3100) + _2620;
        _2847 = ((_3087 * _1048) * _3100) + _2622;
        _2849 = ((_3089 * _1049) * _3100) + _2624;
    }
    else
    {
        _2839 = _2272;
        _2841 = _2274;
        _2843 = _2276;
        _2845 = _2620;
        _2847 = _2622;
        _2849 = _2624;
    }
    uint _2855 = _1022 + uint(cbMatDynParam._m0[0u].w);
    float _2861 = ((((((_794.x - _789.x) * _772) + _789.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _718) * cbMtdParam._m0[20u].x)) * _727) * cbInstanceData._m0[_2855].x;
    float _2862 = ((((((_794.y - _789.y) * _772) + _789.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_707.y - _705) * _685) + _705)) * cbMtdParam._m0[20u].y)) * _727) * cbInstanceData._m0[_2855].y;
    float _2863 = ((((((_794.z - _789.z) * _772) + _789.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_707.z - _706) * _685) + _706)) * cbMtdParam._m0[20u].z)) * _727) * cbInstanceData._m0[_2855].z;
    float _4855 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4866 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4877 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2880 = (((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2839 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1061))) + ((_2845 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1890)) * cbPerFrame._m0[3u].x)) + _2861;
    float _2882 = (_2862 + ((_2847 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1890)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2841 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1061)));
    float _2884 = (_2863 + ((_2849 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1890)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2843 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1061)));
    float _2885 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
    float _2886 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
    float _2887 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
    float _2893 = cbMtdParam._m0[2u].x * _2861;
    float _2894 = cbMtdParam._m0[2u].y * _2862;
    float _2895 = cbMtdParam._m0[2u].z * _2863;
    float _4903 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2897 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    uint _2898 = _1021 + 6u;
    float _2906 = _983 / cbSceneParam._m0[86u].x;
    float _2907 = _984 / cbSceneParam._m0[86u].y;
    vec4 _2921 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, (log2((isnan(cbSceneParam._m0[77u].w) ? _908 : (isnan(_908) ? cbSceneParam._m0[77u].w : min(_908, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2923 = _2921.x;
    float _2924 = _2921.y;
    float _2925 = _2921.z;
    float _2926 = _2921.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_908 > cbSceneParam._m0[78u].w)
    {
        float _2981 = isnan(_908) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _908 : min(cbSceneParam._m0[80u].w, _908));
        float _2982 = _2981 / _908;
        float _2993 = _2982 * _959;
        float _2994 = _960 * _2982;
        float _2995 = (-0.0) - _2994;
        float _2996 = _2982 * _961;
        float _2998 = (cbSceneParam._m0[77u].w * _2995) / _2981;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2994;
        float _3006 = sqrt(((_2993 * _2993) + (_2994 * _2994)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2981)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3202;
        if (abs((_2995 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3202 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3146 = 1.0 / cbSceneParam._m0[80u].x;
            float _3147 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3148 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            _3202 = ((abs(_3006 / _2995) * cbSceneParam._m0[80u].y) * ((((_3157 - _3158) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))))) * _3146)) - ((exp2(_3016 * _3157) - exp2(_3016 * _3158)) * _3146))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3204 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, 1.0), 0.0);
        float _3213 = exp2((_3202 * (-1.44269502162933349609375)) * (1.0 - _3204.w));
        float _3214 = log2(_3213);
        float _3230 = log2(_2926);
        _3018 = (exp2(_3230 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].x)) * _3204.x) / cbSceneParam._m0[78u].x)) + _2923;
        _3020 = (exp2(_3230 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].y)) * _3204.y) / cbSceneParam._m0[78u].y)) + _2924;
        _3022 = (exp2(_3230 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].z)) * _3204.z) / cbSceneParam._m0[78u].z)) + _2925;
        _3024 = _3213 * _2926;
    }
    else
    {
        _3018 = _2923;
        _3020 = _2924;
        _3022 = _2925;
        _3024 = _2926;
    }
    bool _3240;
    vec4 _3034;
    vec4 _3056;
    float _3058;
    float _3062;
    float _3063;
    float _3064;
    float _3067;
    float _3070;
    float _3073;
    float _3074;
    bool _3084;
    for (;;)
    {
        _3034 = cbMatDynParam._m0[0u];
        float _3036 = roundEven(_3034.y);
        bool _3037 = _3036 == 3.0;
        float _3038 = log2(_3024);
        float _3042 = exp2(_3038 * cbSceneParam._m0[78u].x);
        float _3043 = exp2(_3038 * cbSceneParam._m0[78u].y);
        float _3044 = exp2(_3038 * cbSceneParam._m0[78u].z);
        float _3045 = _3042 * _2885;
        float _3046 = _3043 * _2886;
        float _3047 = _3044 * _2887;
        float _3054 = _972 + (-0.5);
        _3056 = cbMtdParam._m0[1u];
        _3058 = _3056.y * _3054;
        float _3061 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3062 = _3061 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
        _3063 = _3061 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
        _3064 = _3061 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
        _3067 = ((_2893 * _2897) * _3042) * _3061;
        _3070 = ((_2894 * _2897) * _3043) * _3061;
        _3073 = ((_2895 * _2897) * _3044) * _3061;
        _3074 = _3054 * 0.999000012874603271484375;
        _3084 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3084)
        {
            if ((cbInstanceData._m0[_1021 + 7u].x + _3074) < 0.5)
            {
                _3240 = true;
                break;
            }
        }
        uint _3181 = _1022 + uint(_3034.w);
        if ((cbInstanceData._m0[_3181].w < 1.0) && ((cbInstanceData._m0[_3181].w + _3074) < 0.5))
        {
            _3240 = true;
            break;
        }
        if ((_3058 + 1.0) < _3056.x)
        {
            _3240 = true;
            break;
        }
        _3240 = false;
        break;
    }
    float _3445;
    if (_3240)
    {
        discard_state = true;
        _3445 = 0.0;
    }
    else
    {
        _3445 = cbInstanceData._m0[_2898].w;
    }
    SV_Target.x = _3062;
    SV_Target.y = _3063;
    SV_Target.z = _3064;
    SV_Target.w = _3445;
    SV_Target_1.x = _3067;
    SV_Target_1.y = _3070;
    SV_Target_1.z = _3073;
    SV_Target_1.w = cbInstanceData._m0[_2898].w;
    discard_exit();
}


