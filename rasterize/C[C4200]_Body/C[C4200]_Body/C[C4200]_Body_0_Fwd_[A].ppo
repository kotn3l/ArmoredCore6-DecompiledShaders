#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1451;
float _3865;
float _3866;
float _3867;
float _3868;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _261 = log2(0.0);
    float _263 = exp2(_261 * cbMtdParam._m0[24u].x);
    float _264 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _265 = isnan(1.0) ? _264 : (isnan(_264) ? 1.0 : min(_264, 1.0));
    vec4 _279 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _283 = _279.z;
    float _291 = exp2(log2(_283 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _292 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    float _314 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(4.0) ? _315 : (isnan(_315) ? 4.0 : min(_315, 4.0));
    float _329 = floor(_316);
    vec4 _332 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _329));
    vec4 _357 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _368 = cbMtdParam._m0[9u].x * _357.x;
    float _369 = cbMtdParam._m0[9u].y * _357.y;
    float _370 = cbMtdParam._m0[9u].z * _357.z;
    float _377 = (((cbMtdParam._m0[10u].x * _332.x) - _368) * _293) + _368;
    float _378 = (((cbMtdParam._m0[10u].y * _332.y) - _369) * _293) + _369;
    float _379 = (((cbMtdParam._m0[10u].z * _332.z) - _370) * _293) + _370;
    float _385 = exp2(log2(_279.w) * cbMtdParam._m0[24u].w);
    vec4 _398 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _418 = (((cbMtdParam._m0[16u].x * _398.x) - _377) * _385) + _377;
    float _419 = (((cbMtdParam._m0[16u].y * _398.y) - _378) * _385) + _378;
    float _420 = (((cbMtdParam._m0[16u].z * _398.z) - _379) * _385) + _379;
    vec4 _433 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _458 = (_251.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _433.x) - _418) * _265) + _418);
    float _460 = (_251.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _433.y) - _419) * _265) + _419);
    float _462 = (_251.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _433.z) - _420) * _265) + _420);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _501 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    uint _503 = uint(int(isnan(4.0) ? _501 : (isnan(_501) ? 4.0 : min(_501, 4.0))));
    float _510 = ((_187[_503] - cbMtdParam._m0[23u].z) * _293) + cbMtdParam._m0[23u].z;
    float _513 = ((cbMtdParam._m0[23u].w - _510) * _385) + _510;
    float _516 = ((cbMtdParam._m0[26u].y - _513) * _265) + _513;
    vec4 _531 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _329));
    vec4 _549 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _557 = cbMtdParam._m0[23u].x + _549.z;
    float _560 = (((_531.z + _186[_503]) - _557) * _293) + _557;
    vec4 _572 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _583 = (((_572.z - _560) + cbMtdParam._m0[30u].x) * _385) + _560;
    float _589 = ((((_283 * 2.0) * _583) - _583) * cbMtdParam._m0[25u].w) + _583;
    vec4 _601 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _612 = (((cbMtdParam._m0[24u].z + _601.z) - _589) * _265) + _589;
    float _625 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _648 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_625 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _625) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _652 = cbPerFrame._m0[22u].x * 2.0;
    float _653 = _652 * cbMtdParam._m0[28u].z;
    float _656 = (_648.x * 0.5) + (-0.25);
    float _659 = (_648.y * 0.5) + (-0.25);
    float _660 = _659 * cbMtdParam._m0[28u].y;
    float _662 = (-0.0) - (cbMtdParam._m0[28u].y * _656);
    float _664 = fract(_653);
    float _666 = fract(_653 + 0.5);
    float _678 = abs((_664 * 2.0) + (-1.0));
    vec4 _695 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_664 * _662) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_660 * _664) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _697 = _695.x;
    float _698 = _695.y;
    float _699 = _695.z;
    vec4 _700 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_666 * _662) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_660 * _666) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _711 = ((_700.x - _697) * _678) + _697;
    float _718 = exp2(log2(_711 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _719 = isnan(cbMtdParam._m0[29u].y) ? _718 : (isnan(_718) ? cbMtdParam._m0[29u].y : max(_718, cbMtdParam._m0[29u].y));
    float _720 = isnan(cbMtdParam._m0[29u].z) ? _719 : (isnan(_719) ? cbMtdParam._m0[29u].z : min(_719, cbMtdParam._m0[29u].z));
    float _744 = (cbMtdParam._m0[33u].x * _625) + TEXCOORD;
    float _745 = (cbMtdParam._m0[33u].y * _625) + TEXCOORD_1;
    float _748 = _652 * cbMtdParam._m0[27u].w;
    float _749 = _659 * cbMtdParam._m0[27u].z;
    float _751 = (-0.0) - (cbMtdParam._m0[27u].z * _656);
    float _752 = fract(_748);
    float _754 = fract(_748 + 0.5);
    float _765 = abs((_752 * 2.0) + (-1.0));
    vec4 _782 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_752 * _751) + _744) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_749 * _752) + _745) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _787 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_754 * _751) + _744) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_749 * _754) + _745) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _821 = ((_531.x - _551) * _293) + _551;
    float _822 = ((_531.y - _552) * _293) + _552;
    float _827 = ((_572.x - _821) * _385) + _821;
    float _828 = ((_572.y - _822) * _385) + _822;
    float _837 = ((((_601.x - _827) * _265) + _827) * 2.0) + (-1.0);
    float _838 = ((((_601.y - _828) * _265) + _828) * 2.0) + (-1.0);
    float _839 = dot(vec2(_837, _838), vec2(_837, _838));
    float _3927 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _844 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    float _847 = (cbMtdParam._m0[26u].z * ((_279.x * 2.0) + (-1.0))) + _837;
    float _848 = (cbMtdParam._m0[26u].z * ((_279.y * 2.0) + (-1.0))) + _838;
    float _850 = gl_FragCoord.x * 0.125;
    float _852 = gl_FragCoord.y * 0.125;
    float _863 = fma(_844, _227 * NORMAL.x, fma(_848, _234 * TANGENT.x, (_220 * _212) * _847));
    float _866 = fma(_844, _227 * NORMAL.y, fma(_848, _234 * TANGENT.y, (_220 * _213) * _847));
    float _869 = fma(_844, _227 * NORMAL.z, fma(_848, _234 * TANGENT.z, (_220 * _214) * _847));
    float _873 = inversesqrt(dot(vec3(_863, _866, _869), vec3(_863, _866, _869)));
    float _874 = _873 * _863;
    float _875 = _873 * _866;
    float _876 = _873 * _869;
    float _3938 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _877 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3960 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3971 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3982 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _881 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_850, _852)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _901 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _952 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _942);
    float _953 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _942);
    float _954 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _942);
    float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
    float _959 = _952 * _958;
    float _960 = _953 * _958;
    float _961 = _954 * _958;
    vec4 _963 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_850, _852));
    float _965 = _963.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1135 = sqrt(((_952 * _952) + (_953 * _953)) + (_954 * _954));
        float _1141 = (cbMatDynParam._m0[5u].x * _1135) + cbMatDynParam._m0[5u].y;
        float _3993 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1146 = (cbMatDynParam._m0[5u].z * _1135) + cbMatDynParam._m0[5u].w;
        float _4004 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) - _1142)) + _1142) < ((_965 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _976 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _977 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _995 = fma(_876, cbSceneParam._m0[5u].z, fma(_875, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _874));
    float _998 = fma(_876, cbSceneParam._m0[6u].z, fma(_875, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _874));
    float _1001 = fma(_876, cbSceneParam._m0[7u].z, fma(_875, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _874));
    uint _1014 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1015 = _1014 + 9u;
    uint _1016 = _1015 + uint(cbMatDynParam._m0[0u].w);
    float _1022 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_1016].x;
    float _1023 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_1016].y;
    float _1024 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_1016].z;
    float _4015 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1028 = 1.0 - _881;
    float _1029 = _1025 * _1028;
    float _1030 = _1026 * _1028;
    float _1031 = _1027 * _1028;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _881;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _881;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _881;
    float _1039 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    vec4 _1051 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _976, cbSceneParam._m0[86u].y * _977));
    float _1054 = _1051.x * TEXCOORD_3.w;
    float _1055 = dot(vec3(_874, _875, _876), vec3(_959, _960, _961));
    float _1058 = _1055 * 2.0;
    float _1062 = (_1058 * _874) - _959;
    float _1063 = (_1058 * _875) - _960;
    float _1064 = (_1058 * _876) - _961;
    float _1068 = abs(dot(vec3(_959, _960, _961), vec3(_874, _875, _876)));
    float _4048 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1070 = sqrt(_877);
    float _1081 = exp2((_1070 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1070 * 3.0));
    float _1087 = (1.0 - _1081) * ((_1070 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1088 = _1081 * _1070;
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1450;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1177 = fma(_1124, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116));
        float _1181 = fma(_1124, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116));
        float _1185 = fma(_1124, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116));
        float _1209 = _1116 + _874;
        float _1210 = _1120 + _875;
        float _1211 = _1124 + _876;
        float _1221 = fma(_1211, cbModelParam._m0[26u].z, fma(_1210, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209)) - _1177;
        float _1222 = fma(_1211, cbModelParam._m0[27u].z, fma(_1210, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209)) - _1181;
        float _1223 = fma(_1211, cbModelParam._m0[28u].z, fma(_1210, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209)) - _1185;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1239 = ((_1227 * _1221) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1177 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1227 * _1222) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1181 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1223) / cbModelParam._m0[34u].z) + ((((((_1185 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1278 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1244.x + (-0.5));
        float _1280 = _1278 * (_1244.y + (-0.5));
        float _1281 = _1278 * (_1244.z + (-0.5));
        float _1288 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1251.x + (-0.5));
        float _1290 = _1288 * (_1251.y + (-0.5));
        float _1291 = _1288 * (_1251.z + (-0.5));
        float _1298 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1258.x + (-0.5));
        float _1300 = _1298 * (_1258.y + (-0.5));
        float _1301 = _1298 * (_1258.z + (-0.5));
        float _1308 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1265.x + (-0.5));
        float _1310 = _1308 * (_1265.y + (-0.5));
        float _1311 = _1308 * (_1265.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1332 = (dot(vec3(_874, _875, _876), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1342 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4096 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1344 + 1.0))) + _1349) * _1312;
        float _1359 = _1280 * 0.5;
        float _1360 = _1290 * 0.5;
        float _1361 = _1300 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_874, _875, _876), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4129 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1386 + 1.0))) + _1391) * _1313;
        float _1401 = _1281 * 0.5;
        float _1402 = _1291 * 0.5;
        float _1403 = _1301 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_874, _875, _876), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4162 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1428 + 1.0))) + _1433) * _1314;
        _1450 = _1281;
        _1452 = _1280;
        _1453 = _1279;
        _1454 = _1291;
        _1455 = _1290;
        _1456 = _1289;
        _1457 = _1301;
        _1458 = _1300;
        _1459 = _1299;
        _1460 = _1314;
        _1461 = _1313;
        _1462 = _1312;
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1451;
        _1452 = _1451;
        _1453 = _1451;
        _1454 = _1451;
        _1455 = _1451;
        _1456 = _1451;
        _1457 = _1451;
        _1458 = _1451;
        _1459 = _1451;
        _1460 = _1451;
        _1461 = _1451;
        _1462 = _1451;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1488 = fma(_1124, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116));
        float _1492 = fma(_1124, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116));
        float _1496 = fma(_1124, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116));
        float _1519 = _1116 + _874;
        float _1520 = _1120 + _875;
        float _1521 = _1124 + _876;
        float _1531 = fma(_1521, cbModelParam._m0[30u].z, fma(_1520, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1519)) - _1488;
        float _1532 = fma(_1521, cbModelParam._m0[31u].z, fma(_1520, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1519)) - _1492;
        float _1533 = fma(_1521, cbModelParam._m0[32u].z, fma(_1520, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1519)) - _1496;
        float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
        float _1550 = ((_1537 * _1531) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1488 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1537 * _1532) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1492 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1537 * _1533) / cbModelParam._m0[35u].z) + ((((((_1496 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        float _1587 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1554.x + (-0.5));
        float _1589 = _1587 * (_1554.y + (-0.5));
        float _1590 = _1587 * (_1554.z + (-0.5));
        float _1597 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1561.x + (-0.5));
        float _1599 = _1597 * (_1561.y + (-0.5));
        float _1600 = _1597 * (_1561.z + (-0.5));
        float _1607 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1568.x + (-0.5));
        float _1609 = _1607 * (_1568.y + (-0.5));
        float _1610 = _1607 * (_1568.z + (-0.5));
        float _1617 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1575.x + (-0.5));
        float _1619 = _1617 * (_1575.y + (-0.5));
        float _1620 = _1617 * (_1575.z + (-0.5));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = _1588 * 0.5;
        float _1625 = _1598 * 0.5;
        float _1626 = _1608 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_874, _875, _876), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4225 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1651 + 1.0))) + _1656) * _1621;
        float _1666 = _1589 * 0.5;
        float _1667 = _1599 * 0.5;
        float _1668 = _1609 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_874, _875, _876), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4258 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1693 + 1.0))) + _1698) * _1622;
        float _1708 = _1590 * 0.5;
        float _1709 = _1600 * 0.5;
        float _1710 = _1610 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_874, _875, _876), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4291 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1735 + 1.0))) + _1740) * _1623;
        _1757 = _1590;
        _1758 = _1589;
        _1759 = _1588;
        _1760 = _1600;
        _1761 = _1599;
        _1762 = _1598;
        _1763 = _1610;
        _1764 = _1609;
        _1765 = _1608;
        _1766 = _1623;
        _1767 = _1622;
        _1768 = _1621;
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
    }
    else
    {
        _1757 = _1451;
        _1758 = _1451;
        _1759 = _1451;
        _1760 = _1451;
        _1761 = _1451;
        _1762 = _1451;
        _1763 = _1451;
        _1764 = _1451;
        _1765 = _1451;
        _1766 = _1451;
        _1767 = _1451;
        _1768 = _1451;
        _1769 = 0.0;
        _1770 = 0.0;
        _1771 = 0.0;
    }
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1463)) + _1463;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1464)) + _1464;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1804 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1781));
    float _1825 = _1062 * 0.5;
    float _1826 = _1063 * 0.5;
    float _1827 = _1064 * 0.5;
    float _1828 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1831 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1834 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1868;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1841 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1450, _1454, _1457, _1460));
        float _1845 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1849 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1856 = dot(vec4(cbModelParam._m0[39u]), vec4(_1825, _1826, _1827, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1879;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1870 = dot(vec4(cbModelParam._m0[40u]), vec4(_1825, _1826, _1827, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1883 = (_1879 * cbModelParam._m0[1u].x) + (_1868 * (1.0 - cbModelParam._m0[1u].x));
    float _1893 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _877);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1893 : min(cbModelParam._m0[25u].z, _1893));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1941 = fma(_1124, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116)) + cbModelParam._m0[13u].w;
        float _1945 = fma(_1124, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116)) + cbModelParam._m0[14u].w;
        float _1949 = fma(_1124, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116)) + cbModelParam._m0[15u].w;
        float _1952 = fma(_1064, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062));
        float _1955 = fma(_1064, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062));
        float _1958 = fma(_1064, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062));
        float _1986;
        if (_1952 > 0.0)
        {
            _1986 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1986 = frontier_phi_19_17_ladder;
        }
        float _2189;
        if (_1955 > 0.0)
        {
            _2189 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2189 = frontier_phi_28_24_ladder;
        }
        float _2443;
        if (_1958 > 0.0)
        {
            _2443 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2443 = frontier_phi_40_35_ladder;
        }
        float _2445 = isnan(_2189) ? _1986 : (isnan(_1986) ? _2189 : min(_1986, _2189));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1952) + _1941;
        float _2451 = (_2446 * _1955) + _1945;
        float _2452 = (_2446 * _1958) + _1949;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2453;
        float _2457 = _2453 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 > _2457) || ((_2451 < _2455) || ((_2450 < _2455) || (_2450 > _2457))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1894);
            frontier_phi_18_40_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1974 = frontier_phi_18_40_ladder_2;
        _1976 = frontier_phi_18_40_ladder_1;
        _1978 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1062, _1063, _1064), _1894);
        _1974 = _1962.x * cbModelParam._m0[1u].y;
        _1976 = _1962.y * cbModelParam._m0[1u].y;
        _1978 = _1962.z * cbModelParam._m0[1u].y;
    }
    float _1982 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _877);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1982 : min(cbModelParam._m0[25u].w, _1982));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2036 = fma(_1124, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116)) + cbModelParam._m0[21u].w;
        float _2040 = fma(_1124, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116)) + cbModelParam._m0[22u].w;
        float _2044 = fma(_1124, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116)) + cbModelParam._m0[23u].w;
        float _2047 = fma(_1064, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062));
        float _2050 = fma(_1064, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062));
        float _2053 = fma(_1064, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062));
        float _2194;
        if (_2047 > 0.0)
        {
            _2194 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2194 = frontier_phi_30_26_ladder;
        }
        float _2470;
        if (_2050 > 0.0)
        {
            _2470 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2470 = frontier_phi_42_37_ladder;
        }
        float _2683;
        if (_2053 > 0.0)
        {
            _2683 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2683 = frontier_phi_51_48_ladder;
        }
        float _2685 = isnan(_2470) ? _2194 : (isnan(_2194) ? _2470 : min(_2194, _2470));
        float _2686 = isnan(_2683) ? _2685 : (isnan(_2685) ? _2683 : min(_2685, _2683));
        float _2690 = (_2686 * _2047) + _2036;
        float _2691 = (_2686 * _2050) + _2040;
        float _2692 = (_2686 * _2053) + _2044;
        float _2693 = _2686 * 9.9999997473787516355514526367188e-05;
        float _2694 = (-1.0) - _2693;
        float _2696 = _2693 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2692 > _2696) || ((_2692 < _2694) || ((_2691 > _2696) || ((_2691 < _2694) || ((_2690 < _2694) || (_2690 > _2696))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2692, cbModelParam._m0[17u].z, fma(_2691, cbModelParam._m0[17u].y, _2690 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2692, cbModelParam._m0[18u].z, fma(_2691, cbModelParam._m0[18u].y, _2690 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2692, cbModelParam._m0[19u].z, fma(_2691, cbModelParam._m0[19u].y, _2690 * cbModelParam._m0[19u].x))), _1983);
            frontier_phi_27_51_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2072 = frontier_phi_27_51_ladder_2;
        _2074 = frontier_phi_27_51_ladder_1;
        _2076 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1062, _1063, _1064), _1983);
        _2072 = _2056.x * cbModelParam._m0[1u].z;
        _2074 = _2056.y * cbModelParam._m0[1u].z;
        _2076 = _2056.z * cbModelParam._m0[1u].z;
    }
    float _2089 = (((_1087 * _1039) + _1088) * _1054) * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2091 = (((_1087 * _1041) + _1088) * _1054) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1087 * _1042) + _1088) * _1054) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2096 = fma(_2093, cbSceneParam._m0[89u].z, fma(_2091, cbSceneParam._m0[89u].y, _2089 * cbSceneParam._m0[89u].x));
    float _2099 = fma(_2093, cbSceneParam._m0[90u].z, fma(_2091, cbSceneParam._m0[90u].y, _2089 * cbSceneParam._m0[90u].x));
    float _2102 = fma(_2093, cbSceneParam._m0[91u].z, fma(_2091, cbSceneParam._m0[91u].y, _2089 * cbSceneParam._m0[91u].x));
    uvec4 _2112 = floatBitsToUint(cbInstanceData._m0[_1014 + 5u]);
    uint _2114 = _2112.x * 14u;
    uint _2115 = _2114 + 13u;
    float _2122 = _1054 + (-1.0);
    float _2127 = (cbLight._m0[_2115].x * _2122) + 1.0;
    float _2128 = (cbLight._m0[_2115].y * _2122) + 1.0;
    float _2129 = (cbLight._m0[_2115].z * _2122) + 1.0;
    float _2130 = (cbLight._m0[_2115].w * _2122) + 1.0;
    uint _2131 = _2114 + 5u;
    float _2137 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2141 = _2114 + 4u;
    float _2147 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2151 = _2114 | 1u;
    float _2162 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_874, _875, _876));
    float _2165 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_874, _875, _876));
    float _4427 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _4438 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2170 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2172 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2179 = ((cbLight._m0[_2131].x * _2137) * _2172) + ((cbLight._m0[_2141].x * _2147) * _2170);
    float _2180 = ((_2137 * cbLight._m0[_2131].y) * _2172) + ((_2147 * cbLight._m0[_2141].y) * _2170);
    float _2181 = ((_2137 * cbLight._m0[_2131].z) * _2172) + ((_2147 * cbLight._m0[_2141].z) * _2170);
    uvec4 _2186 = floatBitsToUint(cbLight._m0[_2114 + 12u]);
    bool _2188 = _2186.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2188)
    {
        _2199 = _2179;
        _2201 = _2180;
        _2203 = _2181;
    }
    else
    {
        uint _2207 = _2114 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2114 + 2u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4449 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2226 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2179;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2180;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2181;
    }
    bool _2206 = _2186.y == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2206)
    {
        _2244 = _2199;
        _2246 = _2201;
        _2248 = _2203;
    }
    else
    {
        uint _2414 = _2114 + 7u;
        float _2430 = (dot(vec3(cbLight._m0[_2114 + 3u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4465 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2433 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2244 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2199;
        _2246 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2201;
        _2248 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2203;
    }
    uint _2251 = _2114 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _877) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2114].x + _959;
    float _2267 = cbLight._m0[_2114].y + _960;
    float _2268 = cbLight._m0[_2114].z + _961;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2114].xyz));
    float _4481 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _2280 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2281 = dot(vec3(_874, _875, _876), vec3(_2273, _2274, _2275));
    float _4503 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2273, _2274, _2275));
    float _4514 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2302 = 0.959999978542327880859375 - _1036;
    float _2304 = 0.959999978542327880859375 - _1037;
    float _2305 = 0.959999978542327880859375 - _1038;
    float _2312 = 1.0 - _2265;
    float _2323 = (0.5 / (((_2280 * ((_2279 * _2312) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2312) + _2265) * _2279))) * _2279;
    float _4525 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2336 = _2114 + 9u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _877) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2151].x + _959;
    float _2350 = cbLight._m0[_2151].y + _960;
    float _2351 = cbLight._m0[_2151].z + _961;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2151].xyz));
    float _4536 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2363 = dot(vec3(_874, _875, _876), vec3(_2356, _2357, _2358));
    float _4547 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2356, _2357, _2358));
    float _4558 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2348 * _2348;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2389 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2280 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2389) + _2348) * _2362))) * _2362;
    float _4569 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    float _2411 = (((((_2382 * _2302) + _1039) * cbLight._m0[_2336].x) * _2401) * _2137) + (((((_2301 * _2302) + _1039) * cbLight._m0[_2251].x) * _2325) * _2147);
    float _2412 = (((((_2382 * _2304) + _1041) * cbLight._m0[_2336].y) * _2401) * _2137) + (((((_2301 * _2304) + _1041) * cbLight._m0[_2251].y) * _2325) * _2147);
    float _2413 = (((((_2382 * _2305) + _1042) * cbLight._m0[_2336].z) * _2401) * _2137) + (((((_2301 * _2305) + _1042) * cbLight._m0[_2251].z) * _2325) * _2147);
    float _2475;
    float _2477;
    float _2479;
    if (_2188)
    {
        _2475 = _2411;
        _2477 = _2412;
        _2479 = _2413;
    }
    else
    {
        uint _2481 = _2114 + 2u;
        uint _2485 = _2114 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _877) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _959;
        float _2502 = cbLight._m0[_2481].y + _960;
        float _2503 = cbLight._m0[_2481].z + _961;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2481].xyz));
        float _4580 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2515 = dot(vec3(_874, _875, _876), vec3(_2508, _2509, _2510));
        float _4591 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4602 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2541 = 1.0 - _2500;
        float _2551 = (0.5 / (((_2280 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2541) + _2500) * _2514))) * _2514;
        float _4613 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2475 = (((((_2534 * _2302) + _1039) * cbLight._m0[_2485].x) * _2553) * _2554) + _2411;
        _2477 = (((((_2534 * _2304) + _1041) * cbLight._m0[_2485].y) * _2553) * _2554) + _2412;
        _2479 = (((((_2534 * _2305) + _1042) * cbLight._m0[_2485].z) * _2553) * _2554) + _2413;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2206)
    {
        _2589 = _2475;
        _2591 = _2477;
        _2593 = _2479;
    }
    else
    {
        uint _2600 = _2114 + 3u;
        uint _2604 = _2114 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _877) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _959;
        float _2621 = cbLight._m0[_2600].y + _960;
        float _2622 = cbLight._m0[_2600].z + _961;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2600].xyz));
        float _4629 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2634 = dot(vec3(_874, _875, _876), vec3(_2627, _2628, _2629));
        float _4640 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4651 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2280 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2660) + _2619) * _2633))) * _2633;
        float _4662 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2589 = (((((_2653 * _2302) + _1039) * cbLight._m0[_2604].x) * _2672) * _2673) + _2475;
        _2591 = (((((_2653 * _2304) + _1041) * cbLight._m0[_2604].y) * _2672) * _2673) + _2477;
        _2593 = (((((_2653 * _2305) + _1042) * cbLight._m0[_2604].z) * _2672) * _2673) + _2479;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2112.y == 0u)
    {
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2748;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2748;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2748;
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _977) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _976) / _2764)));
        float _2785 = (log2(_2751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            uint _3092 = 0u;
            uint _3101;
            bool _3102;
            for (;;)
            {
                _3101 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                _3102 = _3101 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3102)
                {
                    frontier_phi_68_pred = _3086;
                    frontier_phi_68_pred_1 = _3091;
                    frontier_phi_68_pred_2 = _3090;
                    frontier_phi_68_pred_3 = _3089;
                    frontier_phi_68_pred_4 = _3088;
                    frontier_phi_68_pred_5 = _3087;
                }
                else
                {
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    uint _3237;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3101;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3241 = uint(findLSB(_3237)) + (_3092 << 5u);
                        uint _3238 = (_3237 + 4294967295u) & _3237;
                        uint _3243 = _3241 * 48u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3263 = (_3241 * 48u) + 4u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3282 = (_3241 * 48u) + 8u;
                        vec3 _3293 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x));
                        float _3297 = _3257.x - _2749;
                        float _3298 = _3257.y - _2750;
                        float _3299 = _3257.z - _2751;
                        float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                        float _3303 = inversesqrt(_3300);
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3307 = dot(vec3(_995, _998, _1001), vec3(_3304, _3305, _3306));
                        float _3312 = 1.0 - (_3300 * _3257.w);
                        float _4688 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3314 = sqrt(_3300) * _3276.w;
                        float _3317 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3307) + _3318;
                        float _3324 = _3314 * _3314;
                        float _3328 = ((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3313) / ((_3324 * 0.699999988079071044921875) + 1.0);
                        float _3332 = (-0.0) - _2749;
                        float _3333 = (-0.0) - _2750;
                        float _3334 = (-0.0) - _2751;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3349 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                        float _3350 = 1.0 - _1070;
                        float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                        float _3358 = _3357 * _3357;
                        float _3359 = _3358 * _3358;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3362 = _3341 + _3306;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3370 = dot(vec3(_995, _998, _1001), vec3(_3339, _3340, _3341));
                        float _4704 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3374 = dot(vec3(_995, _998, _1001), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                        float _4715 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                        float _3382 = _3317 * _3358;
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3307) + _3383;
                        float _4726 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3388 = 1.0 - _3358;
                        float _3398 = (0.5 / (((_3387 * ((_3373 * _3388) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3358) * _3373))) * _3387;
                        float _4737 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3409 = (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3381 * _3381) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125))) * _3313;
                        _3161 = (_3328 * _3276.x) + _3234;
                        _3162 = (_3328 * _3276.y) + _3235;
                        _3163 = (_3328 * _3276.z) + _3236;
                        _3158 = (_3409 * _3293.x) + _3231;
                        _3159 = (_3409 * _3293.y) + _3232;
                        _3160 = (_3409 * _3293.z) + _3233;
                        if (_3238 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3238;
                        }
                    }
                    frontier_phi_68_pred = _3158;
                    frontier_phi_68_pred_1 = _3163;
                    frontier_phi_68_pred_2 = _3162;
                    frontier_phi_68_pred_3 = _3161;
                    frontier_phi_68_pred_4 = _3160;
                    frontier_phi_68_pred_5 = _3159;
                }
                _2926 = frontier_phi_68_pred;
                _2936 = frontier_phi_68_pred_1;
                _2934 = frontier_phi_68_pred_2;
                _2932 = frontier_phi_68_pred_3;
                _2930 = frontier_phi_68_pred_4;
                _2928 = frontier_phi_68_pred_5;
                uint _3093 = _3092 + 1u;
                if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3086 = _2926;
                    _3087 = _2928;
                    _3088 = _2930;
                    _3089 = _2932;
                    _3090 = _2934;
                    _3091 = _2936;
                    _3092 = _3093;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((4294967295u << _2942) & _2795) == 0u)
        {
            _3054 = _2925;
            _3056 = _2927;
            _3058 = _2929;
            _3060 = _2931;
            _3062 = _2933;
            _3064 = _2935;
        }
        else
        {
            float _3079 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
            float _3080 = _3079 * _2749;
            float _3081 = _3079 * _2750;
            float _3082 = _3079 * _2751;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3214 = _2925;
                float _3215 = _2927;
                float _3216 = _2929;
                float _3217 = _2931;
                float _3218 = _2933;
                float _3219 = _2935;
                uint _3220 = _2942;
                uint _3229;
                bool _3230;
                for (;;)
                {
                    _3229 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                    _3230 = _3229 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3230)
                    {
                        frontier_phi_79_pred = _3219;
                        frontier_phi_79_pred_1 = _3218;
                        frontier_phi_79_pred_2 = _3217;
                        frontier_phi_79_pred_3 = _3216;
                        frontier_phi_79_pred_4 = _3215;
                        frontier_phi_79_pred_5 = _3214;
                    }
                    else
                    {
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        uint _3442 = _3229;
                        uint _3443;
                        vec4 _3468;
                        float _3469;
                        vec4 _3484;
                        vec3 _3496;
                        vec4 _3511;
                        vec4 _3526;
                        float _3572;
                        bool _3573;
                        for (;;)
                        {
                            uint _3453 = ((_3220 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3442));
                            _3443 = (_3442 + 4294967295u) & _3442;
                            uint _3455 = _3453 * 40u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3469 = _3468.w;
                            uint _3471 = (_3453 * 40u) + 4u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3453 * 40u) + 8u;
                            _3496 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x));
                            uint _3498 = (_3453 * 40u) + 16u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3453 * 40u) + 20u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3453 * 40u) + 24u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3547 = (_3453 * 40u) + 28u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3572 = fma(_2751, _3560.z, fma(_2750, _3560.y, _3560.x * _2749)) + _3560.w;
                            _3573 = !((fma(_2751, _3541.z, fma(_2750, _3541.y, _3541.x * _2749)) + _3541.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3573)
                            {
                                float _3600 = _3468.x - _2749;
                                float _3601 = _3468.y - _2750;
                                float _3602 = _3468.z - _2751;
                                float _3603 = dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602));
                                float _3606 = inversesqrt(_3603);
                                float _3607 = _3606 * _3600;
                                float _3608 = _3606 * _3601;
                                float _3609 = _3606 * _3602;
                                float _3613 = 1.0 - (_3603 / (_3469 * _3469));
                                float _4748 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3618 = sqrt(_3603) * _3484.w;
                                float _3620 = 1.39999997615814208984375 / (_3618 + 1.39999997615814208984375);
                                float _3621 = _3620 * _3620;
                                float _3624 = ((1.0 - _3621) * dot(vec3(_3607, _3608, _3609), vec3(_995, _998, _1001))) + _3621;
                                float _3627 = _3618 * _3618;
                                float _3631 = (fma(_2751, _3511.z, fma(_2750, _3511.y, _3511.x * _2749)) + _3511.w) / _3572;
                                float _3632 = (fma(_2751, _3526.z, fma(_2750, _3526.y, _3526.x * _2749)) + _3526.w) / _3572;
                                float _3636 = 1.0 - dot(vec2(_3631, _3632), vec2(_3631, _3632));
                                float _4764 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3638 = _3637 * (((isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0))) * _3614) / ((_3627 * 0.699999988079071044921875) + 1.0));
                                float _3650 = exp2(log2(1.0 / ((_3627 * 3.5) + 5.0)) * 0.25);
                                float _3651 = 1.0 - _1070;
                                float _3658 = sqrt(1.0 - ((1.0 - (_3651 * _3651)) * (1.0 - (_3650 * _3650))));
                                float _3659 = _3658 * _3658;
                                float _3660 = _3659 * _3659;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3663 = _3609 - _3082;
                                float _3667 = inversesqrt(dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663)));
                                float _3671 = dot(vec3(_995, _998, _1001), vec3((-0.0) - _3080, (-0.0) - _3081, (-0.0) - _3082));
                                float _4775 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3675 = dot(vec3(_995, _998, _1001), vec3(_3667 * _3661, _3667 * _3662, _3667 * _3663));
                                float _4786 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3682 = ((_3678 * _3678) * (_3660 + (-1.0))) + 1.0;
                                float _3683 = _3620 * _3659;
                                float _3684 = _3683 * _3683;
                                float _3690 = ((1.0 - _3684) * dot(vec3(_995, _998, _1001), vec3(_3607, _3608, _3609))) + _3684;
                                float _4797 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3692 = 1.0 - _3659;
                                float _3702 = (0.5 / (((_3691 * ((_3674 * _3692) + _3659)) + 9.9999999392252902907785028219223e-09) + (((_3691 * _3692) + _3659) * _3674))) * _3691;
                                float _4808 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3712 = (_3637 * _3614) * (((_3660 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3682 * _3682) * ((_3627 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3638 * _3484.y;
                                frontier_phi_85_pred_1 = _3638 * _3484.x;
                                frontier_phi_85_pred_2 = _3712 * _3496.z;
                                frontier_phi_85_pred_3 = _3712 * _3496.y;
                                frontier_phi_85_pred_4 = _3712 * _3496.x;
                                frontier_phi_85_pred_5 = _3638 * _3484.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3720 = frontier_phi_85_pred;
                            _3719 = frontier_phi_85_pred_1;
                            _3718 = frontier_phi_85_pred_2;
                            _3717 = frontier_phi_85_pred_3;
                            _3716 = frontier_phi_85_pred_4;
                            _3721 = frontier_phi_85_pred_5;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            if (_3443 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3443;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3428;
                        frontier_phi_79_pred_1 = _3427;
                        frontier_phi_79_pred_2 = _3426;
                        frontier_phi_79_pred_3 = _3425;
                        frontier_phi_79_pred_4 = _3424;
                        frontier_phi_79_pred_5 = _3423;
                    }
                    _3065 = frontier_phi_79_pred;
                    _3063 = frontier_phi_79_pred_1;
                    _3061 = frontier_phi_79_pred_2;
                    _3059 = frontier_phi_79_pred_3;
                    _3057 = frontier_phi_79_pred_4;
                    _3055 = frontier_phi_79_pred_5;
                    uint _3221 = _3220 + 1u;
                    if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3214 = _3055;
                        _3215 = _3057;
                        _3216 = _3059;
                        _3217 = _3061;
                        _3218 = _3063;
                        _3219 = _3065;
                        _3220 = _3221;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3059;
                frontier_phi_60_61_ladder_1 = _3065;
                frontier_phi_60_61_ladder_2 = _3063;
                frontier_phi_60_61_ladder_3 = _3061;
                frontier_phi_60_61_ladder_4 = _3057;
                frontier_phi_60_61_ladder_5 = _3055;
            }
            else
            {
                frontier_phi_60_61_ladder = _2929;
                frontier_phi_60_61_ladder_1 = _2935;
                frontier_phi_60_61_ladder_2 = _2933;
                frontier_phi_60_61_ladder_3 = _2931;
                frontier_phi_60_61_ladder_4 = _2927;
                frontier_phi_60_61_ladder_5 = _2925;
            }
            _3054 = frontier_phi_60_61_ladder_5;
            _3056 = frontier_phi_60_61_ladder_4;
            _3058 = frontier_phi_60_61_ladder;
            _3060 = frontier_phi_60_61_ladder_3;
            _3062 = frontier_phi_60_61_ladder_2;
            _3064 = frontier_phi_60_61_ladder_1;
        }
        float _3069 = isnan(1.0) ? _1054 : (isnan(_1054) ? 1.0 : min(_1054, 1.0));
        _2808 = (_3069 * _3060) + _2244;
        _2810 = (_3069 * _3062) + _2246;
        _2812 = (_3069 * _3064) + _2248;
        _2814 = ((_3054 * _1039) * _3069) + _2589;
        _2816 = ((_3056 * _1041) * _3069) + _2591;
        _2818 = ((_3058 * _1042) * _3069) + _2593;
    }
    else
    {
        _2808 = _2244;
        _2810 = _2246;
        _2812 = _2248;
        _2814 = _2589;
        _2816 = _2591;
        _2818 = _2593;
    }
    uint _2824 = _1015 + uint(cbMatDynParam._m0[0u].w);
    float _2830 = ((((((_787.x - _782.x) * _765) + _782.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _711) * cbMtdParam._m0[20u].x)) * _720) * cbInstanceData._m0[_2824].x;
    float _2831 = ((((((_787.y - _782.y) * _765) + _782.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_700.y - _698) * _678) + _698)) * cbMtdParam._m0[20u].y)) * _720) * cbInstanceData._m0[_2824].y;
    float _2832 = ((((((_787.z - _782.z) * _765) + _782.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_700.z - _699) * _678) + _699)) * cbMtdParam._m0[20u].z)) * _720) * cbInstanceData._m0[_2824].z;
    float _4824 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4835 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4846 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2849 = (((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2808 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1054))) + ((_2814 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1883)) * cbPerFrame._m0[3u].x)) + _2830;
    float _2851 = (_2831 + ((_2816 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1883)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2810 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1054)));
    float _2853 = (_2832 + ((_2818 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1883)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2812 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1054)));
    float _2854 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
    float _2855 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2856 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2862 = cbMtdParam._m0[2u].x * _2830;
    float _2863 = cbMtdParam._m0[2u].y * _2831;
    float _2864 = cbMtdParam._m0[2u].z * _2832;
    float _4872 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2866 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    uint _2867 = _1014 + 6u;
    float _2875 = _976 / cbSceneParam._m0[86u].x;
    float _2876 = _977 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _901 : (isnan(_901) ? cbSceneParam._m0[77u].w : min(_901, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    if (_901 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_901) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _901 : min(cbSceneParam._m0[80u].w, _901));
        float _2951 = _2950 / _901;
        float _2962 = _2951 * _952;
        float _2963 = _953 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2965 = _2951 * _954;
        float _2967 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2968 = _2967 + cbSceneParam._m0[79u].w;
        float _2969 = cbSceneParam._m0[79u].w - _2963;
        float _2975 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2965 * _2965));
        float _2978 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2975;
        float _2983 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2985 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2964 - _2967) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_2968 > 0.0) ? exp2(_2983 * _2968) : (2.0 - exp2(_2985 * _2968))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2978;
        }
        else
        {
            float _3115 = 1.0 / cbSceneParam._m0[80u].x;
            float _3116 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : max(_2968, _2969));
            float _3117 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : min(_2968, _2969));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            _3171 = ((abs(_2975 / _2964) * cbSceneParam._m0[80u].y) * ((((_3126 - _3127) * 2.0) - ((exp2(_2983 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0)))) - exp2(_2983 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))))) * _3115)) - ((exp2(_2985 * _3126) - exp2(_2985 * _3127)) * _3115))) + (_2978 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2895);
        _2987 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2989 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2991 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2993 = _3182 * _2895;
    }
    else
    {
        _2987 = _2892;
        _2989 = _2893;
        _2991 = _2894;
        _2993 = _2895;
    }
    bool _3209;
    vec4 _3003;
    vec4 _3025;
    float _3027;
    float _3031;
    float _3032;
    float _3033;
    float _3036;
    float _3039;
    float _3042;
    float _3043;
    bool _3053;
    for (;;)
    {
        _3003 = cbMatDynParam._m0[0u];
        float _3005 = roundEven(_3003.y);
        bool _3006 = _3005 == 3.0;
        float _3007 = log2(_2993);
        float _3011 = exp2(_3007 * cbSceneParam._m0[78u].x);
        float _3012 = exp2(_3007 * cbSceneParam._m0[78u].y);
        float _3013 = exp2(_3007 * cbSceneParam._m0[78u].z);
        float _3014 = _3011 * _2854;
        float _3015 = _3012 * _2855;
        float _3016 = _3013 * _2856;
        float _3023 = _965 + (-0.5);
        _3025 = cbMtdParam._m0[1u];
        _3027 = _3025.y * _3023;
        float _3030 = (_3005 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3031 = _3030 * (_3006 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2987)));
        _3032 = _3030 * (_3006 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2989)));
        _3033 = _3030 * (_3006 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2991)));
        _3036 = ((_2862 * _2866) * _3011) * _3030;
        _3039 = ((_2863 * _2866) * _3012) * _3030;
        _3042 = ((_2864 * _2866) * _3013) * _3030;
        _3043 = _3023 * 0.999000012874603271484375;
        _3053 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3053)
        {
            if ((cbInstanceData._m0[_1014 + 7u].x + _3043) < 0.5)
            {
                _3209 = true;
                break;
            }
        }
        uint _3150 = _1015 + uint(_3003.w);
        if ((cbInstanceData._m0[_3150].w < 1.0) && ((cbInstanceData._m0[_3150].w + _3043) < 0.5))
        {
            _3209 = true;
            break;
        }
        if ((_3027 + 1.0) < _3025.x)
        {
            _3209 = true;
            break;
        }
        _3209 = false;
        break;
    }
    float _3414;
    if (_3209)
    {
        discard_state = true;
        _3414 = 0.0;
    }
    else
    {
        _3414 = cbInstanceData._m0[_2867].w;
    }
    SV_Target.x = _3031;
    SV_Target.y = _3032;
    SV_Target.z = _3033;
    SV_Target.w = _3414;
    SV_Target_1.x = _3036;
    SV_Target_1.y = _3039;
    SV_Target_1.z = _3042;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
    discard_exit();
}


