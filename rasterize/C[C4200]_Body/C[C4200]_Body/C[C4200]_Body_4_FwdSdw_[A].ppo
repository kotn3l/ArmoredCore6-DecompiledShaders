#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1534;
float _4229;
float _4230;
float _4231;
float _4232;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _265 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _279 = exp2(log2(_265.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _280 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _281 = isnan(1.0) ? _280 : (isnan(_280) ? 1.0 : min(_280, 1.0));
    vec4 _295 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _299 = _295.z;
    float _307 = exp2(log2(_299 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _321 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _324 = _321.y;
    float _327 = (_321.x + (-0.02500000037252902984619140625)) * 8.0;
    float _331 = roundEven(5.0 - _327);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(4.0) ? _332 : (isnan(_332) ? 4.0 : min(_332, 4.0));
    float _346 = floor(_333);
    vec4 _349 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _346));
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[17u].x;
    _196[0u] = cbMtdParam._m0[17u].y;
    _197[0u] = cbMtdParam._m0[17u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[14u].x;
    _196[2u] = cbMtdParam._m0[14u].y;
    _197[2u] = cbMtdParam._m0[14u].z;
    _195[3u] = cbMtdParam._m0[13u].x;
    _196[3u] = cbMtdParam._m0[13u].y;
    _197[3u] = cbMtdParam._m0[13u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[18u].x;
    _196[5u] = cbMtdParam._m0[18u].y;
    _197[5u] = cbMtdParam._m0[18u].z;
    float _413 = roundEven(_327);
    float _414 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    uint _416 = uint(int(isnan(5.0) ? _414 : (isnan(_414) ? 5.0 : min(_414, 5.0))));
    vec4 _446 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _457 = cbMtdParam._m0[9u].x * _446.x;
    float _458 = cbMtdParam._m0[9u].y * _446.y;
    float _459 = cbMtdParam._m0[9u].z * _446.z;
    float _466 = ((((((_195[_416] - cbMtdParam._m0[10u].x) * _324) + cbMtdParam._m0[10u].x) * _349.x) - _457) * _309) + _457;
    float _467 = ((((((_196[_416] - cbMtdParam._m0[10u].y) * _324) + cbMtdParam._m0[10u].y) * _349.y) - _458) * _309) + _458;
    float _468 = ((((((_197[_416] - cbMtdParam._m0[10u].z) * _324) + cbMtdParam._m0[10u].z) * _349.z) - _459) * _309) + _459;
    float _474 = exp2(log2(_295.w) * cbMtdParam._m0[24u].w);
    vec4 _487 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _507 = (((cbMtdParam._m0[16u].x * _487.x) - _466) * _474) + _466;
    float _508 = (((cbMtdParam._m0[16u].y * _487.y) - _467) * _474) + _467;
    float _509 = (((cbMtdParam._m0[16u].z * _487.z) - _468) * _474) + _468;
    vec4 _521 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _546 = (_265.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _521.x) - _507) * _281) + _507);
    float _548 = (_265.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _521.y) - _508) * _281) + _508);
    float _550 = (_265.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _521.z) - _509) * _281) + _509);
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[30u].z;
    _191[0u] = cbMtdParam._m0[30u].w;
    _190[1u] = cbMtdParam._m0[32u].z;
    _191[1u] = cbMtdParam._m0[32u].w;
    _190[2u] = cbMtdParam._m0[32u].x;
    _191[2u] = cbMtdParam._m0[32u].y;
    _190[3u] = cbMtdParam._m0[31u].z;
    _191[3u] = cbMtdParam._m0[31u].w;
    _190[4u] = cbMtdParam._m0[31u].x;
    _191[4u] = cbMtdParam._m0[31u].y;
    float _586 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    uint _588 = uint(int(isnan(4.0) ? _586 : (isnan(_586) ? 4.0 : min(_586, 4.0))));
    float _595 = ((_191[_588] - cbMtdParam._m0[23u].z) * _309) + cbMtdParam._m0[23u].z;
    float _598 = ((cbMtdParam._m0[23u].w - _595) * _474) + _595;
    float _601 = ((cbMtdParam._m0[26u].y - _598) * _281) + _598;
    vec4 _616 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _346));
    vec4 _633 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _635 = _633.x;
    float _636 = _633.y;
    float _641 = cbMtdParam._m0[23u].x + _633.z;
    float _644 = (((_616.z + _190[_588]) - _641) * _309) + _641;
    vec4 _656 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _667 = (((_656.z - _644) + cbMtdParam._m0[30u].x) * _474) + _644;
    float _673 = ((((_299 * 2.0) * _667) - _667) * cbMtdParam._m0[25u].w) + _667;
    vec4 _685 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _696 = (((cbMtdParam._m0[24u].z + _685.z) - _673) * _281) + _673;
    float _709 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _732 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_709 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _709) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _736 = cbPerFrame._m0[22u].x * 2.0;
    float _737 = _736 * cbMtdParam._m0[28u].z;
    float _740 = (_732.x * 0.5) + (-0.25);
    float _743 = (_732.y * 0.5) + (-0.25);
    float _744 = _743 * cbMtdParam._m0[28u].y;
    float _746 = (-0.0) - (cbMtdParam._m0[28u].y * _740);
    float _748 = fract(_737);
    float _750 = fract(_737 + 0.5);
    float _762 = abs((_748 * 2.0) + (-1.0));
    vec4 _778 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_748 * _746) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_744 * _748) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _780 = _778.x;
    float _781 = _778.y;
    float _782 = _778.z;
    vec4 _783 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_750 * _746) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_744 * _750) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _794 = ((_783.x - _780) * _762) + _780;
    float _801 = exp2(log2(_794 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _802 = isnan(cbMtdParam._m0[29u].y) ? _801 : (isnan(_801) ? cbMtdParam._m0[29u].y : max(_801, cbMtdParam._m0[29u].y));
    float _803 = isnan(cbMtdParam._m0[29u].z) ? _802 : (isnan(_802) ? cbMtdParam._m0[29u].z : min(_802, cbMtdParam._m0[29u].z));
    float _827 = (cbMtdParam._m0[33u].x * _709) + TEXCOORD;
    float _828 = (cbMtdParam._m0[33u].y * _709) + TEXCOORD_1;
    float _831 = _736 * cbMtdParam._m0[27u].w;
    float _832 = _743 * cbMtdParam._m0[27u].z;
    float _834 = (-0.0) - (cbMtdParam._m0[27u].z * _740);
    float _835 = fract(_831);
    float _837 = fract(_831 + 0.5);
    float _848 = abs((_835 * 2.0) + (-1.0));
    vec4 _865 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_835 * _834) + _827) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_832 * _835) + _828) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _870 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_837 * _834) + _827) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_832 * _837) + _828) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _904 = ((_616.x - _635) * _309) + _635;
    float _905 = ((_616.y - _636) * _309) + _636;
    float _910 = ((_656.x - _904) * _474) + _904;
    float _911 = ((_656.y - _905) * _474) + _905;
    float _920 = ((((_685.x - _910) * _281) + _910) * 2.0) + (-1.0);
    float _921 = ((((_685.y - _911) * _281) + _911) * 2.0) + (-1.0);
    float _922 = dot(vec2(_920, _921), vec2(_920, _921));
    float _4301 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _927 = sqrt(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))));
    float _930 = (cbMtdParam._m0[26u].z * ((_295.x * 2.0) + (-1.0))) + _920;
    float _931 = (cbMtdParam._m0[26u].z * ((_295.y * 2.0) + (-1.0))) + _921;
    float _933 = gl_FragCoord.x * 0.125;
    float _935 = gl_FragCoord.y * 0.125;
    float _946 = fma(_927, _237 * NORMAL.x, fma(_931, _244 * TANGENT.x, (_230 * _222) * _930));
    float _949 = fma(_927, _237 * NORMAL.y, fma(_931, _244 * TANGENT.y, (_230 * _223) * _930));
    float _952 = fma(_927, _237 * NORMAL.z, fma(_931, _244 * TANGENT.z, (_230 * _224) * _930));
    float _956 = inversesqrt(dot(vec3(_946, _949, _952), vec3(_946, _949, _952)));
    float _957 = _956 * _946;
    float _958 = _956 * _949;
    float _959 = _956 * _952;
    float _4312 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _960 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4334 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4345 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4356 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _964 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_933, _935)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _984 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1035 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1025);
    float _1036 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1025);
    float _1037 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1025);
    float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
    float _1042 = _1035 * _1041;
    float _1043 = _1036 * _1041;
    float _1044 = _1037 * _1041;
    vec4 _1046 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_933, _935));
    float _1048 = _1046.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1218 = sqrt(((_1035 * _1035) + (_1036 * _1036)) + (_1037 * _1037));
        float _1224 = (cbMatDynParam._m0[5u].x * _1218) + cbMatDynParam._m0[5u].y;
        float _4367 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1229 = (cbMatDynParam._m0[5u].z * _1218) + cbMatDynParam._m0[5u].w;
        float _4378 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) - _1225)) + _1225) < ((_1048 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1059 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1060 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1078 = fma(_959, cbSceneParam._m0[5u].z, fma(_958, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _957));
    float _1081 = fma(_959, cbSceneParam._m0[6u].z, fma(_958, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _957));
    float _1084 = fma(_959, cbSceneParam._m0[7u].z, fma(_958, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _957));
    uint _1097 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1098 = _1097 + 9u;
    uint _1099 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _1105 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1099].x;
    float _1106 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * cbInstanceData._m0[_1099].y;
    float _1107 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * cbInstanceData._m0[_1099].z;
    float _4389 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _1111 = 1.0 - _964;
    float _1112 = _1108 * _1111;
    float _1113 = _1109 * _1111;
    float _1114 = _1110 * _1111;
    float _1119 = (_1108 + (-0.039999999105930328369140625)) * _964;
    float _1120 = (_1109 + (-0.039999999105930328369140625)) * _964;
    float _1121 = (_1110 + (-0.039999999105930328369140625)) * _964;
    float _1122 = _1119 + 0.039999999105930328369140625;
    float _1124 = _1120 + 0.039999999105930328369140625;
    float _1125 = _1121 + 0.039999999105930328369140625;
    vec4 _1134 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1059, cbSceneParam._m0[86u].y * _1060));
    float _1137 = _1134.x * TEXCOORD_3.w;
    float _1138 = dot(vec3(_957, _958, _959), vec3(_1042, _1043, _1044));
    float _1141 = _1138 * 2.0;
    float _1145 = (_1141 * _957) - _1042;
    float _1146 = (_1141 * _958) - _1043;
    float _1147 = (_1141 * _959) - _1044;
    float _1151 = abs(dot(vec3(_1042, _1043, _1044), vec3(_957, _958, _959)));
    float _4422 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1153 = sqrt(_960);
    float _1164 = exp2((_1153 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1153 * 3.0));
    float _1170 = (1.0 - _1164) * ((_1153 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1171 = _1164 * _1153;
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1533;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1260 = fma(_1207, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199));
        float _1264 = fma(_1207, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199));
        float _1268 = fma(_1207, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199));
        float _1292 = _1199 + _957;
        float _1293 = _1203 + _958;
        float _1294 = _1207 + _959;
        float _1304 = fma(_1294, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1292)) - _1260;
        float _1305 = fma(_1294, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1292)) - _1264;
        float _1306 = fma(_1294, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1292)) - _1268;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1322 = ((_1310 * _1304) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1260 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1310 * _1305) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1264 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1306) / cbModelParam._m0[34u].z) + ((((((_1268 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1361 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1327.x + (-0.5));
        float _1363 = _1361 * (_1327.y + (-0.5));
        float _1364 = _1361 * (_1327.z + (-0.5));
        float _1371 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1334.x + (-0.5));
        float _1373 = _1371 * (_1334.y + (-0.5));
        float _1374 = _1371 * (_1334.z + (-0.5));
        float _1381 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1341.x + (-0.5));
        float _1383 = _1381 * (_1341.y + (-0.5));
        float _1384 = _1381 * (_1341.z + (-0.5));
        float _1391 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1348.x + (-0.5));
        float _1393 = _1391 * (_1348.y + (-0.5));
        float _1394 = _1391 * (_1348.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1415 = (dot(vec3(_957, _958, _959), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1425 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4470 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1427 + 1.0))) + _1432) * _1395;
        float _1442 = _1363 * 0.5;
        float _1443 = _1373 * 0.5;
        float _1444 = _1383 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_957, _958, _959), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4503 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1469 + 1.0))) + _1474) * _1396;
        float _1484 = _1364 * 0.5;
        float _1485 = _1374 * 0.5;
        float _1486 = _1384 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_957, _958, _959), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4536 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1511 + 1.0))) + _1516) * _1397;
        _1533 = _1364;
        _1535 = _1363;
        _1536 = _1362;
        _1537 = _1374;
        _1538 = _1373;
        _1539 = _1372;
        _1540 = _1384;
        _1541 = _1383;
        _1542 = _1382;
        _1543 = _1397;
        _1544 = _1396;
        _1545 = _1395;
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1534;
        _1535 = _1534;
        _1536 = _1534;
        _1537 = _1534;
        _1538 = _1534;
        _1539 = _1534;
        _1540 = _1534;
        _1541 = _1534;
        _1542 = _1534;
        _1543 = _1534;
        _1544 = _1534;
        _1545 = _1534;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1571 = fma(_1207, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199));
        float _1575 = fma(_1207, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199));
        float _1579 = fma(_1207, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199));
        float _1602 = _1199 + _957;
        float _1603 = _1203 + _958;
        float _1604 = _1207 + _959;
        float _1614 = fma(_1604, cbModelParam._m0[30u].z, fma(_1603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1602)) - _1571;
        float _1615 = fma(_1604, cbModelParam._m0[31u].z, fma(_1603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1602)) - _1575;
        float _1616 = fma(_1604, cbModelParam._m0[32u].z, fma(_1603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1602)) - _1579;
        float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
        float _1633 = ((_1620 * _1614) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1571 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1620 * _1615) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1575 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1620 * _1616) / cbModelParam._m0[35u].z) + ((((((_1579 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        float _1670 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1637.x + (-0.5));
        float _1672 = _1670 * (_1637.y + (-0.5));
        float _1673 = _1670 * (_1637.z + (-0.5));
        float _1680 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1644.x + (-0.5));
        float _1682 = _1680 * (_1644.y + (-0.5));
        float _1683 = _1680 * (_1644.z + (-0.5));
        float _1690 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1651.x + (-0.5));
        float _1692 = _1690 * (_1651.y + (-0.5));
        float _1693 = _1690 * (_1651.z + (-0.5));
        float _1700 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1658.x + (-0.5));
        float _1702 = _1700 * (_1658.y + (-0.5));
        float _1703 = _1700 * (_1658.z + (-0.5));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = _1671 * 0.5;
        float _1708 = _1681 * 0.5;
        float _1709 = _1691 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_957, _958, _959), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4599 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1734 + 1.0))) + _1739) * _1704;
        float _1749 = _1672 * 0.5;
        float _1750 = _1682 * 0.5;
        float _1751 = _1692 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_957, _958, _959), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4610 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4621 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4632 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_1776 + 1.0))) + _1781) * _1705;
        float _1791 = _1673 * 0.5;
        float _1792 = _1683 * 0.5;
        float _1793 = _1693 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_957, _958, _959), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4643 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4654 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4665 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_1818 + 1.0))) + _1823) * _1706;
        _1840 = _1673;
        _1841 = _1672;
        _1842 = _1671;
        _1843 = _1683;
        _1844 = _1682;
        _1845 = _1681;
        _1846 = _1693;
        _1847 = _1692;
        _1848 = _1691;
        _1849 = _1706;
        _1850 = _1705;
        _1851 = _1704;
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
    }
    else
    {
        _1840 = _1534;
        _1841 = _1534;
        _1842 = _1534;
        _1843 = _1534;
        _1844 = _1534;
        _1845 = _1534;
        _1846 = _1534;
        _1847 = _1534;
        _1848 = _1534;
        _1849 = _1534;
        _1850 = _1534;
        _1851 = _1534;
        _1852 = 0.0;
        _1853 = 0.0;
        _1854 = 0.0;
    }
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1546)) + _1546;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1547)) + _1547;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1548)) + _1548;
    float _1887 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1864));
    float _1908 = _1145 * 0.5;
    float _1909 = _1146 * 0.5;
    float _1910 = _1147 * 0.5;
    float _1911 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1914 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1917 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1951;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1924 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1533, _1537, _1540, _1543));
        float _1928 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1932 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1939 = dot(vec4(cbModelParam._m0[39u]), vec4(_1908, _1909, _1910, 1.0));
        _1951 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1951 = 1.0;
    }
    float _1962;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1953 = dot(vec4(cbModelParam._m0[40u]), vec4(_1908, _1909, _1910, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1953) ? 0.0 : (isnan(0.0) ? _1953 : max(0.0, _1953))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1966 = (_1962 * cbModelParam._m0[1u].x) + (_1951 * (1.0 - cbModelParam._m0[1u].x));
    float _1976 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1976 : min(cbModelParam._m0[25u].z, _1976));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2024 = fma(_1207, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199)) + cbModelParam._m0[13u].w;
        float _2028 = fma(_1207, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199)) + cbModelParam._m0[14u].w;
        float _2032 = fma(_1207, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199)) + cbModelParam._m0[15u].w;
        float _2035 = fma(_1147, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145));
        float _2038 = fma(_1147, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145));
        float _2041 = fma(_1147, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145));
        float _2069;
        if (_2035 > 0.0)
        {
            _2069 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2069 = frontier_phi_19_17_ladder;
        }
        float _2240;
        if (_2038 > 0.0)
        {
            _2240 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2240 = frontier_phi_28_24_ladder;
        }
        float _2534;
        if (_2041 > 0.0)
        {
            _2534 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2534 = frontier_phi_40_35_ladder;
        }
        float _2536 = isnan(_2240) ? _2069 : (isnan(_2069) ? _2240 : min(_2069, _2240));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _2035) + _2024;
        float _2542 = (_2537 * _2038) + _2028;
        float _2543 = (_2537 * _2041) + _2032;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2544;
        float _2548 = _2544 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 > _2548) || ((_2542 < _2546) || ((_2541 < _2546) || (_2541 > _2548))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2543, cbModelParam._m0[9u].z, fma(_2542, cbModelParam._m0[9u].y, _2541 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2543, cbModelParam._m0[10u].z, fma(_2542, cbModelParam._m0[10u].y, _2541 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2543, cbModelParam._m0[11u].z, fma(_2542, cbModelParam._m0[11u].y, _2541 * cbModelParam._m0[11u].x))), _1977);
            frontier_phi_18_40_ladder = _2688.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2688.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2688.x * cbModelParam._m0[1u].y;
        }
        _2057 = frontier_phi_18_40_ladder_2;
        _2059 = frontier_phi_18_40_ladder_1;
        _2061 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1145, _1146, _1147), _1977);
        _2057 = _2045.x * cbModelParam._m0[1u].y;
        _2059 = _2045.y * cbModelParam._m0[1u].y;
        _2061 = _2045.z * cbModelParam._m0[1u].y;
    }
    float _2065 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2065 : min(cbModelParam._m0[25u].w, _2065));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2119 = fma(_1207, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199)) + cbModelParam._m0[21u].w;
        float _2123 = fma(_1207, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199)) + cbModelParam._m0[22u].w;
        float _2127 = fma(_1207, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199)) + cbModelParam._m0[23u].w;
        float _2130 = fma(_1147, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145));
        float _2133 = fma(_1147, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145));
        float _2136 = fma(_1147, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145));
        float _2245;
        if (_2130 > 0.0)
        {
            _2245 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2245 = frontier_phi_30_26_ladder;
        }
        float _2561;
        if (_2133 > 0.0)
        {
            _2561 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2561 = frontier_phi_42_37_ladder;
        }
        float _2899;
        if (_2136 > 0.0)
        {
            _2899 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2899 = frontier_phi_52_49_ladder;
        }
        float _2901 = isnan(_2561) ? _2245 : (isnan(_2245) ? _2561 : min(_2245, _2561));
        float _2902 = isnan(_2899) ? _2901 : (isnan(_2901) ? _2899 : min(_2901, _2899));
        float _2906 = (_2902 * _2130) + _2119;
        float _2907 = (_2902 * _2133) + _2123;
        float _2908 = (_2902 * _2136) + _2127;
        float _2909 = _2902 * 9.9999997473787516355514526367188e-05;
        float _2910 = (-1.0) - _2909;
        float _2912 = _2909 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2908 > _2912) || ((_2908 < _2910) || ((_2907 > _2912) || ((_2907 < _2910) || ((_2906 < _2910) || (_2906 > _2912))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2908, cbModelParam._m0[17u].z, fma(_2907, cbModelParam._m0[17u].y, _2906 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2908, cbModelParam._m0[18u].z, fma(_2907, cbModelParam._m0[18u].y, _2906 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2908, cbModelParam._m0[19u].z, fma(_2907, cbModelParam._m0[19u].y, _2906 * cbModelParam._m0[19u].x))), _2066);
            frontier_phi_27_52_ladder = _3030.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3030.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3030.x * cbModelParam._m0[1u].z;
        }
        _2155 = frontier_phi_27_52_ladder_2;
        _2157 = frontier_phi_27_52_ladder_1;
        _2159 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1145, _1146, _1147), _2066);
        _2155 = _2139.x * cbModelParam._m0[1u].z;
        _2157 = _2139.y * cbModelParam._m0[1u].z;
        _2159 = _2139.z * cbModelParam._m0[1u].z;
    }
    float _2172 = (((_1170 * _1122) + _1171) * _1137) * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2174 = (((_1170 * _1124) + _1171) * _1137) * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2176 = (((_1170 * _1125) + _1171) * _1137) * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2179 = fma(_2176, cbSceneParam._m0[89u].z, fma(_2174, cbSceneParam._m0[89u].y, _2172 * cbSceneParam._m0[89u].x));
    float _2182 = fma(_2176, cbSceneParam._m0[90u].z, fma(_2174, cbSceneParam._m0[90u].y, _2172 * cbSceneParam._m0[90u].x));
    float _2185 = fma(_2176, cbSceneParam._m0[91u].z, fma(_2174, cbSceneParam._m0[91u].y, _2172 * cbSceneParam._m0[91u].x));
    float _2219 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2223 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2232 = _2219 / _2231;
    float _2233 = _2223 / _2231;
    float _2234 = _2227 / _2231;
    float _2380;
    float _2381;
    float _2382;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2261 = ((uint(_2234 > cbSceneParam._m0[59u].y) + uint(_2234 > cbSceneParam._m0[59u].x)) + uint(_2234 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2262 = _2261 + 43u;
        uint _2270 = _2261 + 44u;
        uint _2278 = _2261 + 45u;
        uint _2286 = _2261 + 46u;
        float _2297 = fma(_2231, cbSceneParam._m0[_2262].w, fma(_2227, cbSceneParam._m0[_2262].z, fma(_2223, cbSceneParam._m0[_2262].y, _2219 * cbSceneParam._m0[_2262].x)));
        float _2301 = fma(_2231, cbSceneParam._m0[_2270].w, fma(_2227, cbSceneParam._m0[_2270].z, fma(_2223, cbSceneParam._m0[_2270].y, _2219 * cbSceneParam._m0[_2270].x)));
        float _2309 = fma(_2231, cbSceneParam._m0[_2286].w, fma(_2227, cbSceneParam._m0[_2286].z, fma(_2223, cbSceneParam._m0[_2286].y, _2219 * cbSceneParam._m0[_2286].x)));
        float _2313 = cbSceneParam._m0[33u].z * _2309;
        float _2315 = cbSceneParam._m0[33u].w * _2309;
        float _2318 = fma(_2231, cbSceneParam._m0[_2278].w, fma(_2227, cbSceneParam._m0[_2278].z, fma(_2223, cbSceneParam._m0[_2278].y, _2219 * cbSceneParam._m0[_2278].x))) / _2309;
        float _2366 = (cbSceneParam._m0[33u].x - sqrt(((_2233 * _2233) + (_2232 * _2232)) + (_2234 * _2234))) * cbSceneParam._m0[33u].y;
        float _4791 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2373 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2313 + _2297) / _2309, (_2315 + _2301) / _2309), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2315 + _2297) / _2309, (_2301 - _2313) / _2309), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 - _2313) / _2309, (_2301 - _2315) / _2309), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 - _2315) / _2309, (_2313 + _2301) / _2309), _2318), 0.0)).x), vec4(0.25)));
        _2380 = 1.0 - (_2373 * cbSceneParam._m0[34u].x);
        _2381 = 1.0 - (_2373 * cbSceneParam._m0[34u].y);
        _2382 = 1.0 - (_2373 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2380 = 1.0;
        _2381 = 1.0;
        _2382 = 1.0;
    }
    float _2446;
    float _2448;
    float _2450;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2434 = fma(_2231, cbSceneParam._m0[63u].w, fma(_2227, cbSceneParam._m0[63u].z, fma(_2223, cbSceneParam._m0[63u].y, _2219 * cbSceneParam._m0[63u].x)));
        float _2435 = fma(_2231, cbSceneParam._m0[60u].w, fma(_2227, cbSceneParam._m0[60u].z, fma(_2223, cbSceneParam._m0[60u].y, _2219 * cbSceneParam._m0[60u].x))) / _2434;
        float _2436 = fma(_2231, cbSceneParam._m0[61u].w, fma(_2227, cbSceneParam._m0[61u].z, fma(_2223, cbSceneParam._m0[61u].y, _2219 * cbSceneParam._m0[61u].x))) / _2434;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2435 >= cbSceneParam._m0[64u].x) && (_2436 >= cbSceneParam._m0[64u].y)) && (_2435 <= cbSceneParam._m0[64u].z)) && (_2436 <= cbSceneParam._m0[64u].w))
        {
            float _2574 = fma(_2231, cbSceneParam._m0[62u].w, fma(_2227, cbSceneParam._m0[62u].z, fma(_2223, cbSceneParam._m0[62u].y, _2219 * cbSceneParam._m0[62u].x))) / _2434;
            float _2578 = isnan(cbSceneParam._m0[41u].w) ? _2574 : (isnan(_2574) ? cbSceneParam._m0[41u].w : max(_2574, cbSceneParam._m0[41u].w));
            float _2621 = (cbSceneParam._m0[33u].x - sqrt(((_2233 * _2233) + (_2232 * _2232)) + (_2234 * _2234))) * cbSceneParam._m0[33u].y;
            float _4807 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
            float _2628 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2435, cbSceneParam._m0[33u].w + _2436), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2435, _2436 - cbSceneParam._m0[33u].z), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2435 - cbSceneParam._m0[33u].z, _2436 - cbSceneParam._m0[33u].w), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2435 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2436), _2578), 0.0)).x), vec4(0.25)));
            float _2632 = 1.0 - (_2628 * cbSceneParam._m0[34u].x);
            float _2633 = 1.0 - (_2628 * cbSceneParam._m0[34u].y);
            float _2634 = 1.0 - (_2628 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2634) ? _2382 : (isnan(_2382) ? _2634 : min(_2382, _2634));
            frontier_phi_39_38_ladder_1 = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
            frontier_phi_39_38_ladder_2 = isnan(_2632) ? _2380 : (isnan(_2380) ? _2632 : min(_2380, _2632));
        }
        else
        {
            frontier_phi_39_38_ladder = _2382;
            frontier_phi_39_38_ladder_1 = _2381;
            frontier_phi_39_38_ladder_2 = _2380;
        }
        _2446 = frontier_phi_39_38_ladder_2;
        _2448 = frontier_phi_39_38_ladder_1;
        _2450 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2446 = _2380;
        _2448 = _2381;
        _2450 = _2382;
    }
    uvec4 _2455 = floatBitsToUint(cbInstanceData._m0[_1097 + 5u]);
    uint _2457 = _2455.x * 14u;
    uint _2458 = _2457 + 13u;
    float _2465 = _1137 + (-1.0);
    float _2470 = (cbLight._m0[_2458].x * _2465) + 1.0;
    float _2471 = (cbLight._m0[_2458].y * _2465) + 1.0;
    float _2472 = (cbLight._m0[_2458].z * _2465) + 1.0;
    float _2473 = (cbLight._m0[_2458].w * _2465) + 1.0;
    uint _2474 = _2457 + 5u;
    float _2480 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    uint _2484 = _2457 + 4u;
    float _2493 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    uint _2497 = _2457 | 1u;
    float _2508 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_957, _958, _959));
    float _2511 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_957, _958, _959));
    float _4843 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _4854 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2516 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * 0.3183098733425140380859375;
    float _2518 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * 0.3183098733425140380859375;
    float _2525 = ((cbLight._m0[_2474].x * _2480) * _2518) + (((cbLight._m0[_2484].x * _2446) * _2493) * _2516);
    float _2526 = ((_2480 * cbLight._m0[_2474].y) * _2518) + (((cbLight._m0[_2484].y * _2448) * _2493) * _2516);
    float _2527 = ((_2480 * cbLight._m0[_2474].z) * _2518) + (((cbLight._m0[_2484].z * _2450) * _2493) * _2516);
    uvec4 _2531 = floatBitsToUint(cbLight._m0[_2457 + 12u]);
    bool _2533 = _2531.x == 0u;
    float _2635;
    float _2637;
    float _2639;
    if (_2533)
    {
        _2635 = _2525;
        _2637 = _2526;
        _2639 = _2527;
    }
    else
    {
        uint _2643 = _2457 + 6u;
        float _2659 = (dot(vec3(cbLight._m0[_2457 + 2u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4865 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2662 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2635 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2525;
        _2637 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2526;
        _2639 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2527;
    }
    bool _2642 = _2531.y == 0u;
    float _2697;
    float _2699;
    float _2701;
    if (_2642)
    {
        _2697 = _2635;
        _2699 = _2637;
        _2701 = _2639;
    }
    else
    {
        uint _2870 = _2457 + 7u;
        float _2886 = (dot(vec3(cbLight._m0[_2457 + 3u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2887 = _2886 * _2886;
        float _4881 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2888 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2889 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2697 = (((cbLight._m0[_2870].x * 0.3183098733425140380859375) * _2888) * _2889) + _2635;
        _2699 = (((cbLight._m0[_2870].y * 0.3183098733425140380859375) * _2888) * _2889) + _2637;
        _2701 = (((cbLight._m0[_2870].z * 0.3183098733425140380859375) * _2888) * _2889) + _2639;
    }
    uint _2704 = _2457 + 8u;
    float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _960) * 0.949999988079071044921875);
    float _2718 = _2717 * _2717;
    float _2719 = cbLight._m0[_2457].x + _1042;
    float _2720 = cbLight._m0[_2457].y + _1043;
    float _2721 = cbLight._m0[_2457].z + _1044;
    float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
    float _2726 = _2725 * _2719;
    float _2727 = _2725 * _2720;
    float _2728 = _2725 * _2721;
    float _2729 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2457].xyz));
    float _4897 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _4908 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _2733 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _2734 = dot(vec3(_957, _958, _959), vec3(_2726, _2727, _2728));
    float _4919 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    float _2738 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2726, _2727, _2728));
    float _4930 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2742 = _2718 * _2718;
    float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
    float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0);
    float _2755 = 0.959999978542327880859375 - _1119;
    float _2757 = 0.959999978542327880859375 - _1120;
    float _2758 = 0.959999978542327880859375 - _1121;
    float _2765 = 1.0 - _2718;
    float _2776 = (0.5 / (((_2733 * ((_2732 * _2765) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2765) + _2718) * _2732))) * _2732;
    float _4941 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2778 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
    uint _2792 = _2457 + 9u;
    float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _960) * 0.949999988079071044921875);
    float _2804 = _2803 * _2803;
    float _2805 = cbLight._m0[_2497].x + _1042;
    float _2806 = cbLight._m0[_2497].y + _1043;
    float _2807 = cbLight._m0[_2497].z + _1044;
    float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
    float _2812 = _2811 * _2805;
    float _2813 = _2811 * _2806;
    float _2814 = _2811 * _2807;
    float _2815 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2497].xyz));
    float _4952 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2818 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
    float _2819 = dot(vec3(_957, _958, _959), vec3(_2812, _2813, _2814));
    float _4963 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
    float _2823 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2812, _2813, _2814));
    float _4974 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2827 = _2804 * _2804;
    float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
    float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) * 5.0);
    float _2845 = 1.0 - _2804;
    float _2855 = (0.5 / (((_2733 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2845) + _2804) * _2818))) * _2818;
    float _4985 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2857 = (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
    float _2867 = (((((_2838 * _2755) + _1122) * cbLight._m0[_2792].x) * _2857) * _2480) + ((((cbLight._m0[_2704].x * _2446) * ((_2754 * _2755) + _1122)) * _2778) * _2493);
    float _2868 = (((((_2838 * _2757) + _1124) * cbLight._m0[_2792].y) * _2857) * _2480) + ((((cbLight._m0[_2704].y * _2448) * ((_2754 * _2757) + _1124)) * _2778) * _2493);
    float _2869 = (((((_2838 * _2758) + _1125) * cbLight._m0[_2792].z) * _2857) * _2480) + ((((cbLight._m0[_2704].z * _2450) * ((_2754 * _2758) + _1125)) * _2778) * _2493);
    float _2925;
    float _2927;
    float _2929;
    if (_2533)
    {
        _2925 = _2867;
        _2927 = _2868;
        _2929 = _2869;
    }
    else
    {
        uint _2931 = _2457 + 2u;
        uint _2935 = _2457 + 10u;
        float _2949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2931].w)) * _960) * 0.949999988079071044921875);
        float _2950 = _2949 * _2949;
        float _2951 = cbLight._m0[_2931].x + _1042;
        float _2952 = cbLight._m0[_2931].y + _1043;
        float _2953 = cbLight._m0[_2931].z + _1044;
        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
        float _2958 = _2957 * _2951;
        float _2959 = _2957 * _2952;
        float _2960 = _2957 * _2953;
        float _2961 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2931].xyz));
        float _4996 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _2965 = dot(vec3(_957, _958, _959), vec3(_2958, _2959, _2960));
        float _5007 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _2969 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_2958, _2959, _2960));
        float _5018 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2973 = _2950 * _2950;
        float _2977 = ((_2968 * _2968) * (_2973 + (-1.0))) + 1.0;
        float _2984 = exp2(log2(1.0 - (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) * 5.0);
        float _2991 = 1.0 - _2950;
        float _3001 = (0.5 / (((_2733 * ((_2964 * _2991) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2991) + _2950) * _2964))) * _2964;
        float _5029 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3003 = (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2973 / ((_2977 * _2977) * 3.141590118408203125));
        float _3004 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2925 = (((((_2984 * _2755) + _1122) * cbLight._m0[_2935].x) * _3003) * _3004) + _2867;
        _2927 = (((((_2984 * _2757) + _1124) * cbLight._m0[_2935].y) * _3003) * _3004) + _2868;
        _2929 = (((((_2984 * _2758) + _1125) * cbLight._m0[_2935].z) * _3003) * _3004) + _2869;
    }
    float _3035;
    float _3037;
    float _3039;
    if (_2642)
    {
        _3035 = _2925;
        _3037 = _2927;
        _3039 = _2929;
    }
    else
    {
        uint _3046 = _2457 + 3u;
        uint _3050 = _2457 + 11u;
        float _3064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3046].w)) * _960) * 0.949999988079071044921875);
        float _3065 = _3064 * _3064;
        float _3066 = cbLight._m0[_3046].x + _1042;
        float _3067 = cbLight._m0[_3046].y + _1043;
        float _3068 = cbLight._m0[_3046].z + _1044;
        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
        float _3073 = _3072 * _3066;
        float _3074 = _3072 * _3067;
        float _3075 = _3072 * _3068;
        float _3076 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_3046].xyz));
        float _5045 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3079 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
        float _3080 = dot(vec3(_957, _958, _959), vec3(_3073, _3074, _3075));
        float _5056 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3083 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
        float _3084 = dot(vec3(cbLight._m0[_3046].xyz), vec3(_3073, _3074, _3075));
        float _5067 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        float _3088 = _3065 * _3065;
        float _3092 = ((_3083 * _3083) * (_3088 + (-1.0))) + 1.0;
        float _3099 = exp2(log2(1.0 - (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) * 5.0);
        float _3106 = 1.0 - _3065;
        float _3116 = (0.5 / (((_2733 * ((_3079 * _3106) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _3106) + _3065) * _3079))) * _3079;
        float _5078 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        float _3118 = (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3088 / ((_3092 * _3092) * 3.141590118408203125));
        float _3119 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _3035 = (((((_3099 * _2755) + _1122) * cbLight._m0[_3050].x) * _3118) * _3119) + _2925;
        _3037 = (((((_3099 * _2757) + _1124) * cbLight._m0[_3050].y) * _3118) * _3119) + _2927;
        _3039 = (((((_3099 * _2758) + _1125) * cbLight._m0[_3050].z) * _3118) * _3119) + _2929;
    }
    float _3185;
    float _3187;
    float _3189;
    float _3191;
    float _3193;
    float _3195;
    if (_2455.y == 0u)
    {
        uvec4 _3140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3141 = _3140.x;
        uint _3152 = uint((float(_3140.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1060) / _3141))) + floor(float(uint(cbSceneParam._m0[85u].x * _1059) / _3141)));
        float _3162 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3163 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
        uint _3166 = uint(isnan(14.0) ? _3163 : (isnan(_3163) ? 14.0 : min(_3163, 14.0)));
        uvec4 _3171 = texelFetch(g_lightClusterGridBuffer, int(((_3166 << 2u) + (_3152 << 6u)) >> 2u));
        uint _3172 = _3171.x;
        uint _3173 = _3140.z;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        if (((((1u << ((_3173 >> 4u) & 15u)) + 4294967295u) & _3172) == 0u) || ((_3173 & 240u) == 0u))
        {
            _3281 = 0.0;
            _3283 = 0.0;
            _3285 = 0.0;
            _3287 = 0.0;
            _3289 = 0.0;
            _3291 = 0.0;
        }
        else
        {
            float _3282;
            float _3284;
            float _3286;
            float _3288;
            float _3290;
            float _3292;
            float _3442 = 0.0;
            float _3443 = 0.0;
            float _3444 = 0.0;
            float _3445 = 0.0;
            float _3446 = 0.0;
            float _3447 = 0.0;
            uint _3448 = 0u;
            uint _3457;
            bool _3458;
            for (;;)
            {
                _3457 = texelFetch(g_lightClassification, int((((_3166 << 5u) + (_3152 << 9u)) + (_3448 << 2u)) >> 2u)).x;
                _3458 = _3457 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3458)
                {
                    frontier_phi_73_pred = _3447;
                    frontier_phi_73_pred_1 = _3446;
                    frontier_phi_73_pred_2 = _3445;
                    frontier_phi_73_pred_3 = _3444;
                    frontier_phi_73_pred_4 = _3443;
                    frontier_phi_73_pred_5 = _3442;
                }
                else
                {
                    float _3587;
                    float _3588;
                    float _3589;
                    float _3590;
                    float _3591;
                    float _3592;
                    uint _3593;
                    _3587 = _3442;
                    _3588 = _3443;
                    _3589 = _3444;
                    _3590 = _3445;
                    _3591 = _3446;
                    _3592 = _3447;
                    _3593 = _3457;
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    for (;;)
                    {
                        uint _3597 = uint(findLSB(_3593)) + (_3448 << 5u);
                        uint _3594 = (_3593 + 4294967295u) & _3593;
                        uint _3599 = _3597 * 48u;
                        vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3599)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 3u)).x));
                        uint _3619 = (_3597 * 48u) + 4u;
                        vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3619)).x, texelFetch(g_PointLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3619 + 3u)).x));
                        uint _3638 = (_3597 * 48u) + 8u;
                        vec3 _3649 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3638)).x, texelFetch(g_PointLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3638 + 2u)).x));
                        float _3653 = _3613.x - _2232;
                        float _3654 = _3613.y - _2233;
                        float _3655 = _3613.z - _2234;
                        float _3656 = dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655));
                        float _3659 = inversesqrt(_3656);
                        float _3660 = _3659 * _3653;
                        float _3661 = _3659 * _3654;
                        float _3662 = _3659 * _3655;
                        float _3663 = dot(vec3(_1078, _1081, _1084), vec3(_3660, _3661, _3662));
                        float _3668 = 1.0 - (_3656 * _3613.w);
                        float _5104 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3669 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3670 = sqrt(_3656) * _3632.w;
                        float _3673 = 1.39999997615814208984375 / (_3670 + 1.39999997615814208984375);
                        float _3674 = _3673 * _3673;
                        float _3677 = ((1.0 - _3674) * _3663) + _3674;
                        float _3680 = _3670 * _3670;
                        float _3684 = ((isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0))) * _3669) / ((_3680 * 0.699999988079071044921875) + 1.0);
                        float _3688 = (-0.0) - _2232;
                        float _3689 = (-0.0) - _2233;
                        float _3690 = (-0.0) - _2234;
                        float _3694 = inversesqrt(dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690)));
                        float _3695 = _3694 * _3688;
                        float _3696 = _3694 * _3689;
                        float _3697 = _3694 * _3690;
                        float _3704 = exp2(log2(1.0 / ((_3680 * 3.5) + 5.0)) * 0.25);
                        float _3705 = 1.0 - _1153;
                        float _3712 = sqrt(1.0 - ((1.0 - (_3705 * _3705)) * (1.0 - (_3704 * _3704))));
                        float _3713 = _3712 * _3712;
                        float _3714 = _3713 * _3713;
                        float _3715 = _3695 + _3660;
                        float _3716 = _3696 + _3661;
                        float _3717 = _3697 + _3662;
                        float _3721 = inversesqrt(dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717)));
                        float _3725 = dot(vec3(_1078, _1081, _1084), vec3(_3695, _3696, _3697));
                        float _5120 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                        float _3728 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                        float _3729 = dot(vec3(_1078, _1081, _1084), vec3(_3721 * _3715, _3721 * _3716, _3721 * _3717));
                        float _5131 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                        float _3732 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                        float _3736 = ((_3732 * _3732) * (_3714 + (-1.0))) + 1.0;
                        float _3737 = _3673 * _3713;
                        float _3738 = _3737 * _3737;
                        float _3741 = ((1.0 - _3738) * _3663) + _3738;
                        float _5142 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                        float _3742 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                        float _3743 = 1.0 - _3713;
                        float _3753 = (0.5 / (((_3742 * ((_3728 * _3743) + _3713)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3713) * _3728))) * _3742;
                        float _5153 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                        float _3764 = (((_3714 * 3.1415927410125732421875) * (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0)))) / ((_3736 * _3736) * ((_3680 * 2.1991131305694580078125) + 3.141590118408203125))) * _3669;
                        _3517 = (_3684 * _3632.x) + _3590;
                        _3518 = (_3684 * _3632.y) + _3591;
                        _3519 = (_3684 * _3632.z) + _3592;
                        _3514 = (_3764 * _3649.x) + _3587;
                        _3515 = (_3764 * _3649.y) + _3588;
                        _3516 = (_3764 * _3649.z) + _3589;
                        if (_3594 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3587 = _3514;
                            _3588 = _3515;
                            _3589 = _3516;
                            _3590 = _3517;
                            _3591 = _3518;
                            _3592 = _3519;
                            _3593 = _3594;
                        }
                    }
                    frontier_phi_73_pred = _3519;
                    frontier_phi_73_pred_1 = _3518;
                    frontier_phi_73_pred_2 = _3517;
                    frontier_phi_73_pred_3 = _3516;
                    frontier_phi_73_pred_4 = _3515;
                    frontier_phi_73_pred_5 = _3514;
                }
                _3292 = frontier_phi_73_pred;
                _3290 = frontier_phi_73_pred_1;
                _3288 = frontier_phi_73_pred_2;
                _3286 = frontier_phi_73_pred_3;
                _3284 = frontier_phi_73_pred_4;
                _3282 = frontier_phi_73_pred_5;
                uint _3449 = _3448 + 1u;
                if (_3449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3442 = _3282;
                    _3443 = _3284;
                    _3444 = _3286;
                    _3445 = _3288;
                    _3446 = _3290;
                    _3447 = _3292;
                    _3448 = _3449;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3281 = _3282;
            _3283 = _3284;
            _3285 = _3286;
            _3287 = _3288;
            _3289 = _3290;
            _3291 = _3292;
        }
        uvec4 _3295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3296 = _3295.z;
        uint _3298 = (_3296 >> 8u) & 15u;
        float _3410;
        float _3412;
        float _3414;
        float _3416;
        float _3418;
        float _3420;
        if (((4294967295u << _3298) & _3172) == 0u)
        {
            _3410 = _3281;
            _3412 = _3283;
            _3414 = _3285;
            _3416 = _3287;
            _3418 = _3289;
            _3420 = _3291;
        }
        else
        {
            float _3435 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _3436 = _3435 * _2232;
            float _3437 = _3435 * _2233;
            float _3438 = _3435 * _2234;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3298 < ((_3296 >> 12u) & 15u))
            {
                float _3411;
                float _3413;
                float _3415;
                float _3417;
                float _3419;
                float _3421;
                float _3570 = _3281;
                float _3571 = _3283;
                float _3572 = _3285;
                float _3573 = _3287;
                float _3574 = _3289;
                float _3575 = _3291;
                uint _3576 = _3298;
                uint _3585;
                bool _3586;
                for (;;)
                {
                    _3585 = texelFetch(g_lightClassification, int((((_3166 << 5u) + (_3152 << 9u)) + (_3576 << 2u)) >> 2u)).x;
                    _3586 = _3585 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3586)
                    {
                        frontier_phi_84_pred = _3575;
                        frontier_phi_84_pred_1 = _3574;
                        frontier_phi_84_pred_2 = _3573;
                        frontier_phi_84_pred_3 = _3572;
                        frontier_phi_84_pred_4 = _3571;
                        frontier_phi_84_pred_5 = _3570;
                    }
                    else
                    {
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _4071;
                        float _4072;
                        float _4073;
                        float _4074;
                        float _4075;
                        float _4076;
                        float _3791 = _3570;
                        float _3792 = _3571;
                        float _3793 = _3572;
                        float _3794 = _3573;
                        float _3795 = _3574;
                        float _3796 = _3575;
                        uint _3797 = _3585;
                        uint _3798;
                        vec4 _3823;
                        float _3824;
                        vec4 _3839;
                        vec3 _3851;
                        vec4 _3866;
                        vec4 _3881;
                        float _3927;
                        bool _3928;
                        for (;;)
                        {
                            uint _3808 = ((_3576 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3797));
                            _3798 = (_3797 + 4294967295u) & _3797;
                            uint _3810 = _3808 * 40u;
                            _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            _3824 = _3823.w;
                            uint _3826 = (_3808 * 40u) + 4u;
                            _3839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 3u)).x));
                            uint _3841 = (_3808 * 40u) + 8u;
                            _3851 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 2u)).x));
                            uint _3853 = (_3808 * 40u) + 16u;
                            _3866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 3u)).x));
                            uint _3868 = (_3808 * 40u) + 20u;
                            _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            uint _3883 = (_3808 * 40u) + 24u;
                            vec4 _3896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 3u)).x));
                            uint _3902 = (_3808 * 40u) + 28u;
                            vec4 _3915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 3u)).x));
                            _3927 = fma(_2234, _3915.z, fma(_2233, _3915.y, _3915.x * _2232)) + _3915.w;
                            _3928 = !((fma(_2234, _3896.z, fma(_2233, _3896.y, _3896.x * _2232)) + _3896.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3928)
                            {
                                float _3955 = _3823.x - _2232;
                                float _3956 = _3823.y - _2233;
                                float _3957 = _3823.z - _2234;
                                float _3958 = dot(vec3(_3955, _3956, _3957), vec3(_3955, _3956, _3957));
                                float _3961 = inversesqrt(_3958);
                                float _3962 = _3961 * _3955;
                                float _3963 = _3961 * _3956;
                                float _3964 = _3961 * _3957;
                                float _3968 = 1.0 - (_3958 / (_3824 * _3824));
                                float _5164 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3969 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3973 = sqrt(_3958) * _3839.w;
                                float _3975 = 1.39999997615814208984375 / (_3973 + 1.39999997615814208984375);
                                float _3976 = _3975 * _3975;
                                float _3979 = ((1.0 - _3976) * dot(vec3(_3962, _3963, _3964), vec3(_1078, _1081, _1084))) + _3976;
                                float _3982 = _3973 * _3973;
                                float _3986 = (fma(_2234, _3866.z, fma(_2233, _3866.y, _3866.x * _2232)) + _3866.w) / _3927;
                                float _3987 = (fma(_2234, _3881.z, fma(_2233, _3881.y, _3881.x * _2232)) + _3881.w) / _3927;
                                float _3991 = 1.0 - dot(vec2(_3986, _3987), vec2(_3986, _3987));
                                float _5180 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3992 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3993 = _3992 * (((isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0))) * _3969) / ((_3982 * 0.699999988079071044921875) + 1.0));
                                float _4005 = exp2(log2(1.0 / ((_3982 * 3.5) + 5.0)) * 0.25);
                                float _4006 = 1.0 - _1153;
                                float _4013 = sqrt(1.0 - ((1.0 - (_4006 * _4006)) * (1.0 - (_4005 * _4005))));
                                float _4014 = _4013 * _4013;
                                float _4015 = _4014 * _4014;
                                float _4016 = _3962 - _3436;
                                float _4017 = _3963 - _3437;
                                float _4018 = _3964 - _3438;
                                float _4022 = inversesqrt(dot(vec3(_4016, _4017, _4018), vec3(_4016, _4017, _4018)));
                                float _4026 = dot(vec3(_1078, _1081, _1084), vec3((-0.0) - _3436, (-0.0) - _3437, (-0.0) - _3438));
                                float _5191 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4029 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                                float _4030 = dot(vec3(_1078, _1081, _1084), vec3(_4022 * _4016, _4022 * _4017, _4022 * _4018));
                                float _5202 = isnan(0.0) ? _4030 : (isnan(_4030) ? 0.0 : max(_4030, 0.0));
                                float _4033 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
                                float _4037 = ((_4033 * _4033) * (_4015 + (-1.0))) + 1.0;
                                float _4038 = _3975 * _4014;
                                float _4039 = _4038 * _4038;
                                float _4045 = ((1.0 - _4039) * dot(vec3(_1078, _1081, _1084), vec3(_3962, _3963, _3964))) + _4039;
                                float _5213 = isnan(0.0) ? _4045 : (isnan(_4045) ? 0.0 : max(_4045, 0.0));
                                float _4046 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
                                float _4047 = 1.0 - _4014;
                                float _4057 = (0.5 / (((_4046 * ((_4029 * _4047) + _4014)) + 9.9999999392252902907785028219223e-09) + (((_4046 * _4047) + _4014) * _4029))) * _4046;
                                float _5224 = isnan(0.0) ? _4057 : (isnan(_4057) ? 0.0 : max(_4057, 0.0));
                                float _4067 = (_3992 * _3969) * (((_4015 * 3.1415927410125732421875) * (isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0)))) / ((_4037 * _4037) * ((_3982 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3993 * _3839.z;
                                frontier_phi_90_pred_1 = _3993 * _3839.y;
                                frontier_phi_90_pred_2 = _3993 * _3839.x;
                                frontier_phi_90_pred_3 = _4067 * _3851.z;
                                frontier_phi_90_pred_4 = _4067 * _3851.y;
                                frontier_phi_90_pred_5 = _4067 * _3851.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4076 = frontier_phi_90_pred;
                            _4075 = frontier_phi_90_pred_1;
                            _4074 = frontier_phi_90_pred_2;
                            _4073 = frontier_phi_90_pred_3;
                            _4072 = frontier_phi_90_pred_4;
                            _4071 = frontier_phi_90_pred_5;
                            _3781 = _4074 + _3794;
                            _3782 = _4075 + _3795;
                            _3783 = _4076 + _3796;
                            _3778 = _4071 + _3791;
                            _3779 = _4072 + _3792;
                            _3780 = _4073 + _3793;
                            if (_3798 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3791 = _3778;
                                _3792 = _3779;
                                _3793 = _3780;
                                _3794 = _3781;
                                _3795 = _3782;
                                _3796 = _3783;
                                _3797 = _3798;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3783;
                        frontier_phi_84_pred_1 = _3782;
                        frontier_phi_84_pred_2 = _3781;
                        frontier_phi_84_pred_3 = _3780;
                        frontier_phi_84_pred_4 = _3779;
                        frontier_phi_84_pred_5 = _3778;
                    }
                    _3421 = frontier_phi_84_pred;
                    _3419 = frontier_phi_84_pred_1;
                    _3417 = frontier_phi_84_pred_2;
                    _3415 = frontier_phi_84_pred_3;
                    _3413 = frontier_phi_84_pred_4;
                    _3411 = frontier_phi_84_pred_5;
                    uint _3577 = _3576 + 1u;
                    if (_3577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3570 = _3411;
                        _3571 = _3413;
                        _3572 = _3415;
                        _3573 = _3417;
                        _3574 = _3419;
                        _3575 = _3421;
                        _3576 = _3577;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3417;
                frontier_phi_65_66_ladder_1 = _3421;
                frontier_phi_65_66_ladder_2 = _3419;
                frontier_phi_65_66_ladder_3 = _3415;
                frontier_phi_65_66_ladder_4 = _3413;
                frontier_phi_65_66_ladder_5 = _3411;
            }
            else
            {
                frontier_phi_65_66_ladder = _3287;
                frontier_phi_65_66_ladder_1 = _3291;
                frontier_phi_65_66_ladder_2 = _3289;
                frontier_phi_65_66_ladder_3 = _3285;
                frontier_phi_65_66_ladder_4 = _3283;
                frontier_phi_65_66_ladder_5 = _3281;
            }
            _3410 = frontier_phi_65_66_ladder_5;
            _3412 = frontier_phi_65_66_ladder_4;
            _3414 = frontier_phi_65_66_ladder_3;
            _3416 = frontier_phi_65_66_ladder;
            _3418 = frontier_phi_65_66_ladder_2;
            _3420 = frontier_phi_65_66_ladder_1;
        }
        float _3425 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
        _3185 = (_3425 * _3416) + _2697;
        _3187 = (_3425 * _3418) + _2699;
        _3189 = (_3425 * _3420) + _2701;
        _3191 = ((_3410 * _1122) * _3425) + _3035;
        _3193 = ((_3412 * _1124) * _3425) + _3037;
        _3195 = ((_3414 * _1125) * _3425) + _3039;
    }
    else
    {
        _3185 = _2697;
        _3187 = _2699;
        _3189 = _2701;
        _3191 = _3035;
        _3193 = _3037;
        _3195 = _3039;
    }
    uint _3201 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _3207 = ((((((_870.x - _865.x) * _848) + _865.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _794) * cbMtdParam._m0[20u].x)) * _803) * cbInstanceData._m0[_3201].x;
    float _3208 = ((((((_870.y - _865.y) * _848) + _865.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_783.y - _781) * _762) + _781)) * cbMtdParam._m0[20u].y)) * _803) * cbInstanceData._m0[_3201].y;
    float _3209 = ((((((_870.z - _865.z) * _848) + _865.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_783.z - _782) * _762) + _782)) * cbMtdParam._m0[20u].z)) * _803) * cbInstanceData._m0[_3201].z;
    float _5240 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _5251 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _5262 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _3226 = (((isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0))) * (_3185 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1137))) + ((_3191 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1966)) * cbPerFrame._m0[3u].x)) + _3207;
    float _3228 = (_3208 + ((_3193 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1966)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0))) * (_3187 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1137)));
    float _3230 = (_3209 + ((_3195 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1966)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0))) * (_3189 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1137)));
    float _3231 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
    float _3232 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
    float _3233 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
    float _3239 = cbMtdParam._m0[2u].x * _3207;
    float _3240 = cbMtdParam._m0[2u].y * _3208;
    float _3241 = cbMtdParam._m0[2u].z * _3209;
    float _5288 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3243 = isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0));
    uint _3244 = _1097 + 6u;
    float _3252 = _1059 / cbSceneParam._m0[86u].x;
    float _3253 = _1060 / cbSceneParam._m0[86u].y;
    vec4 _3267 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3252, _3253, (log2((isnan(cbSceneParam._m0[77u].w) ? _984 : (isnan(_984) ? cbSceneParam._m0[77u].w : min(_984, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3269 = _3267.x;
    float _3270 = _3267.y;
    float _3271 = _3267.z;
    float _3272 = _3267.w;
    float _3343;
    float _3345;
    float _3347;
    float _3349;
    if (_984 > cbSceneParam._m0[78u].w)
    {
        float _3306 = isnan(_984) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _984 : min(cbSceneParam._m0[80u].w, _984));
        float _3307 = _3306 / _984;
        float _3318 = _3307 * _1035;
        float _3319 = _1036 * _3307;
        float _3320 = (-0.0) - _3319;
        float _3321 = _3307 * _1037;
        float _3323 = (cbSceneParam._m0[77u].w * _3320) / _3306;
        float _3324 = _3323 + cbSceneParam._m0[79u].w;
        float _3325 = cbSceneParam._m0[79u].w - _3319;
        float _3331 = sqrt(((_3318 * _3318) + (_3319 * _3319)) + (_3321 * _3321));
        float _3334 = (1.0 - (cbSceneParam._m0[77u].w / _3306)) * _3331;
        float _3339 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3341 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3527;
        if (abs((_3320 - _3323) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3527 = ((((_3324 > 0.0) ? exp2(_3339 * _3324) : (2.0 - exp2(_3341 * _3324))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3334;
        }
        else
        {
            float _3471 = 1.0 / cbSceneParam._m0[80u].x;
            float _3472 = isnan(_3325) ? _3324 : (isnan(_3324) ? _3325 : max(_3324, _3325));
            float _3473 = isnan(_3325) ? _3324 : (isnan(_3324) ? _3325 : min(_3324, _3325));
            float _3482 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : min(_3472, 0.0));
            float _3483 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : min(_3473, 0.0));
            _3527 = ((abs(_3331 / _3320) * cbSceneParam._m0[80u].y) * ((((_3482 - _3483) * 2.0) - ((exp2(_3339 * (isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0)))) - exp2(_3339 * (isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))))) * _3471)) - ((exp2(_3341 * _3482) - exp2(_3341 * _3483)) * _3471))) + (_3334 * cbSceneParam._m0[80u].z);
        }
        vec4 _3529 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3252, _3253, 1.0), 0.0);
        float _3538 = exp2((_3527 * (-1.44269502162933349609375)) * (1.0 - _3529.w));
        float _3539 = log2(_3538);
        float _3555 = log2(_3272);
        _3343 = (exp2(_3555 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3539 * cbSceneParam._m0[78u].x)) * _3529.x) / cbSceneParam._m0[78u].x)) + _3269;
        _3345 = (exp2(_3555 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3539 * cbSceneParam._m0[78u].y)) * _3529.y) / cbSceneParam._m0[78u].y)) + _3270;
        _3347 = (exp2(_3555 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3539 * cbSceneParam._m0[78u].z)) * _3529.z) / cbSceneParam._m0[78u].z)) + _3271;
        _3349 = _3538 * _3272;
    }
    else
    {
        _3343 = _3269;
        _3345 = _3270;
        _3347 = _3271;
        _3349 = _3272;
    }
    bool _3565;
    vec4 _3359;
    vec4 _3381;
    float _3383;
    float _3387;
    float _3388;
    float _3389;
    float _3392;
    float _3395;
    float _3398;
    float _3399;
    bool _3409;
    for (;;)
    {
        _3359 = cbMatDynParam._m0[0u];
        float _3361 = roundEven(_3359.y);
        bool _3362 = _3361 == 3.0;
        float _3363 = log2(_3349);
        float _3367 = exp2(_3363 * cbSceneParam._m0[78u].x);
        float _3368 = exp2(_3363 * cbSceneParam._m0[78u].y);
        float _3369 = exp2(_3363 * cbSceneParam._m0[78u].z);
        float _3370 = _3367 * _3231;
        float _3371 = _3368 * _3232;
        float _3372 = _3369 * _3233;
        float _3379 = _1048 + (-0.5);
        _3381 = cbMtdParam._m0[1u];
        _3383 = _3381.y * _3379;
        float _3386 = (_3361 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3387 = _3386 * (_3362 ? _3370 : (_3370 + (cbSceneParam._m0[72u].w * _3343)));
        _3388 = _3386 * (_3362 ? _3371 : (_3371 + (cbSceneParam._m0[72u].w * _3345)));
        _3389 = _3386 * (_3362 ? _3372 : (_3372 + (cbSceneParam._m0[72u].w * _3347)));
        _3392 = ((_3239 * _3243) * _3367) * _3386;
        _3395 = ((_3240 * _3243) * _3368) * _3386;
        _3398 = ((_3241 * _3243) * _3369) * _3386;
        _3399 = _3379 * 0.999000012874603271484375;
        _3409 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3409)
        {
            if ((cbInstanceData._m0[_1097 + 7u].x + _3399) < 0.5)
            {
                _3565 = true;
                break;
            }
        }
        uint _3506 = _1098 + uint(_3359.w);
        if ((cbInstanceData._m0[_3506].w < 1.0) && ((cbInstanceData._m0[_3506].w + _3399) < 0.5))
        {
            _3565 = true;
            break;
        }
        if ((_3383 + 1.0) < _3381.x)
        {
            _3565 = true;
            break;
        }
        _3565 = false;
        break;
    }
    float _3769;
    if (_3565)
    {
        discard_state = true;
        _3769 = 0.0;
    }
    else
    {
        _3769 = cbInstanceData._m0[_3244].w;
    }
    SV_Target.x = _3387;
    SV_Target.y = _3388;
    SV_Target.z = _3389;
    SV_Target.w = _3769;
    SV_Target_1.x = _3392;
    SV_Target_1.y = _3395;
    SV_Target_1.z = _3398;
    SV_Target_1.w = cbInstanceData._m0[_3244].w;
    discard_exit();
}


