#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1404;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _269 = exp2(log2(_255.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _270 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _271 = isnan(1.0) ? _270 : (isnan(_270) ? 1.0 : min(_270, 1.0));
    vec4 _285 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _289 = _285.z;
    float _297 = exp2(log2(_289 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _320 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(4.0) ? _321 : (isnan(_321) ? 4.0 : min(_321, 4.0));
    float _335 = floor(_322);
    vec4 _338 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _335));
    vec4 _363 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _374 = cbMtdParam._m0[9u].x * _363.x;
    float _375 = cbMtdParam._m0[9u].y * _363.y;
    float _376 = cbMtdParam._m0[9u].z * _363.z;
    float _383 = (((cbMtdParam._m0[10u].x * _338.x) - _374) * _299) + _374;
    float _384 = (((cbMtdParam._m0[10u].y * _338.y) - _375) * _299) + _375;
    float _385 = (((cbMtdParam._m0[10u].z * _338.z) - _376) * _299) + _376;
    float _391 = exp2(log2(_285.w) * cbMtdParam._m0[24u].w);
    vec4 _404 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _424 = (((cbMtdParam._m0[16u].x * _404.x) - _383) * _391) + _383;
    float _425 = (((cbMtdParam._m0[16u].y * _404.y) - _384) * _391) + _384;
    float _426 = (((cbMtdParam._m0[16u].z * _404.z) - _385) * _391) + _385;
    vec4 _439 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _464 = (_255.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _439.x) - _424) * _271) + _424);
    float _466 = (_255.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _439.y) - _425) * _271) + _425);
    float _468 = (_255.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _439.z) - _426) * _271) + _426);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _506 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    uint _508 = uint(int(isnan(4.0) ? _506 : (isnan(_506) ? 4.0 : min(_506, 4.0))));
    float _515 = ((_187[_508] - cbMtdParam._m0[23u].z) * _299) + cbMtdParam._m0[23u].z;
    float _518 = ((cbMtdParam._m0[23u].w - _515) * _391) + _515;
    float _521 = ((cbMtdParam._m0[26u].y - _518) * _271) + _518;
    vec4 _536 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _335));
    vec4 _554 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _562 = cbMtdParam._m0[23u].x + _554.z;
    float _565 = (((_536.z + _186[_508]) - _562) * _299) + _562;
    vec4 _577 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _588 = (((_577.z - _565) + cbMtdParam._m0[30u].x) * _391) + _565;
    float _594 = ((((_289 * 2.0) * _588) - _588) * cbMtdParam._m0[25u].w) + _588;
    vec4 _606 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _617 = (((cbMtdParam._m0[24u].z + _606.z) - _594) * _271) + _594;
    float _630 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _653 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_630 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _630) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _657 = cbPerFrame._m0[22u].x * 2.0;
    float _658 = _657 * cbMtdParam._m0[28u].z;
    float _661 = (_653.x * 0.5) + (-0.25);
    float _664 = (_653.y * 0.5) + (-0.25);
    float _665 = _664 * cbMtdParam._m0[28u].y;
    float _667 = (-0.0) - (cbMtdParam._m0[28u].y * _661);
    float _669 = fract(_658);
    float _671 = fract(_658 + 0.5);
    float _683 = abs((_669 * 2.0) + (-1.0));
    vec4 _700 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_669 * _667) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_665 * _669) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _702 = _700.x;
    float _703 = _700.y;
    float _704 = _700.z;
    vec4 _705 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_671 * _667) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_665 * _671) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _716 = ((_705.x - _702) * _683) + _702;
    float _723 = exp2(log2(_716 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _724 = isnan(cbMtdParam._m0[29u].y) ? _723 : (isnan(_723) ? cbMtdParam._m0[29u].y : max(_723, cbMtdParam._m0[29u].y));
    float _725 = isnan(cbMtdParam._m0[29u].z) ? _724 : (isnan(_724) ? cbMtdParam._m0[29u].z : min(_724, cbMtdParam._m0[29u].z));
    float _749 = (cbMtdParam._m0[33u].x * _630) + TEXCOORD;
    float _750 = (cbMtdParam._m0[33u].y * _630) + TEXCOORD_1;
    float _753 = _657 * cbMtdParam._m0[27u].w;
    float _754 = _664 * cbMtdParam._m0[27u].z;
    float _756 = (-0.0) - (cbMtdParam._m0[27u].z * _661);
    float _757 = fract(_753);
    float _759 = fract(_753 + 0.5);
    float _770 = abs((_757 * 2.0) + (-1.0));
    vec4 _787 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_757 * _756) + _749) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_754 * _757) + _750) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _792 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_759 * _756) + _749) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_754 * _759) + _750) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _826 = ((_536.x - _556) * _299) + _556;
    float _827 = ((_536.y - _557) * _299) + _557;
    float _832 = ((_577.x - _826) * _391) + _826;
    float _833 = ((_577.y - _827) * _391) + _827;
    float _842 = ((((_606.x - _832) * _271) + _832) * 2.0) + (-1.0);
    float _843 = ((((_606.y - _833) * _271) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4097 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))));
    float _852 = (cbMtdParam._m0[26u].z * ((_285.x * 2.0) + (-1.0))) + _842;
    float _853 = (cbMtdParam._m0[26u].z * ((_285.y * 2.0) + (-1.0))) + _843;
    float _856 = fma(_849, _227 * NORMAL.x, fma(_853, _234 * TANGENT.x, (_220 * _212) * _852));
    float _859 = fma(_849, _227 * NORMAL.y, fma(_853, _234 * TANGENT.y, (_220 * _213) * _852));
    float _862 = fma(_849, _227 * NORMAL.z, fma(_853, _234 * TANGENT.z, (_220 * _214) * _852));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _4108 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _870 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4130 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4141 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4152 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _874 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _890 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _941 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _931);
    float _942 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _931);
    float _943 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _931);
    float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
    float _948 = _941 * _947;
    float _949 = _942 * _947;
    float _950 = _943 * _947;
    float _956 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _957 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _975 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _978 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _981 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    uint _994 = uint(roundEven(NORMAL.w)) * 13u;
    uint _995 = _994 + 9u;
    uint _996 = _995 + uint(cbMatDynParam._m0[0u].w);
    float _1002 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_996].x;
    float _1003 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_996].y;
    float _1004 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_996].z;
    float _4163 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _1008 = 1.0 - _874;
    float _1009 = _1005 * _1008;
    float _1010 = _1006 * _1008;
    float _1011 = _1007 * _1008;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _874;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _874;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _874;
    float _1019 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    vec4 _1031 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _956, cbSceneParam._m0[86u].y * _957));
    float _1034 = _1031.x * TEXCOORD_3.w;
    float _1035 = dot(vec3(_867, _868, _869), vec3(_948, _949, _950));
    float _1038 = _1035 * 2.0;
    float _1042 = (_1038 * _867) - _948;
    float _1043 = (_1038 * _868) - _949;
    float _1044 = (_1038 * _869) - _950;
    float _1048 = abs(dot(vec3(_948, _949, _950), vec3(_867, _868, _869)));
    float _4196 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1050 = sqrt(_870);
    float _1061 = exp2((_1050 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1050 * 3.0));
    float _1067 = (1.0 - _1061) * ((_1050 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1068 = _1061 * _1050;
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1403;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1104, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096));
        float _1134 = fma(_1104, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096));
        float _1138 = fma(_1104, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096));
        float _1162 = _1096 + _867;
        float _1163 = _1100 + _868;
        float _1164 = _1104 + _869;
        float _1174 = fma(_1164, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162)) - _1130;
        float _1175 = fma(_1164, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162)) - _1134;
        float _1176 = fma(_1164, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162)) - _1138;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1192 = ((_1180 * _1174) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1180 * _1175) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1176) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1231 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1197.x + (-0.5));
        float _1233 = _1231 * (_1197.y + (-0.5));
        float _1234 = _1231 * (_1197.z + (-0.5));
        float _1241 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1204.x + (-0.5));
        float _1243 = _1241 * (_1204.y + (-0.5));
        float _1244 = _1241 * (_1204.z + (-0.5));
        float _1251 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1211.x + (-0.5));
        float _1253 = _1251 * (_1211.y + (-0.5));
        float _1254 = _1251 * (_1211.z + (-0.5));
        float _1261 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1218.x + (-0.5));
        float _1263 = _1261 * (_1218.y + (-0.5));
        float _1264 = _1261 * (_1218.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1285 = (dot(vec3(_867, _868, _869), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1295 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4244 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1297 + 1.0))) + _1302) * _1265;
        float _1312 = _1233 * 0.5;
        float _1313 = _1243 * 0.5;
        float _1314 = _1253 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_867, _868, _869), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4277 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1339 + 1.0))) + _1344) * _1266;
        float _1354 = _1234 * 0.5;
        float _1355 = _1244 * 0.5;
        float _1356 = _1254 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_867, _868, _869), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4310 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1381 + 1.0))) + _1386) * _1267;
        _1403 = _1234;
        _1405 = _1233;
        _1406 = _1232;
        _1407 = _1244;
        _1408 = _1243;
        _1409 = _1242;
        _1410 = _1254;
        _1411 = _1253;
        _1412 = _1252;
        _1413 = _1267;
        _1414 = _1266;
        _1415 = _1265;
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1404;
        _1405 = _1404;
        _1406 = _1404;
        _1407 = _1404;
        _1408 = _1404;
        _1409 = _1404;
        _1410 = _1404;
        _1411 = _1404;
        _1412 = _1404;
        _1413 = _1404;
        _1414 = _1404;
        _1415 = _1404;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1441 = fma(_1104, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096));
        float _1445 = fma(_1104, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096));
        float _1449 = fma(_1104, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096));
        float _1472 = _1096 + _867;
        float _1473 = _1100 + _868;
        float _1474 = _1104 + _869;
        float _1484 = fma(_1474, cbModelParam._m0[30u].z, fma(_1473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1472)) - _1441;
        float _1485 = fma(_1474, cbModelParam._m0[31u].z, fma(_1473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1472)) - _1445;
        float _1486 = fma(_1474, cbModelParam._m0[32u].z, fma(_1473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1472)) - _1449;
        float _1490 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
        float _1503 = ((_1490 * _1484) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1441 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1490 * _1485) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1445 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1490 * _1486) / cbModelParam._m0[35u].z) + ((((((_1449 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        float _1540 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1507.x + (-0.5));
        float _1542 = _1540 * (_1507.y + (-0.5));
        float _1543 = _1540 * (_1507.z + (-0.5));
        float _1550 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1514.x + (-0.5));
        float _1552 = _1550 * (_1514.y + (-0.5));
        float _1553 = _1550 * (_1514.z + (-0.5));
        float _1560 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1521.x + (-0.5));
        float _1562 = _1560 * (_1521.y + (-0.5));
        float _1563 = _1560 * (_1521.z + (-0.5));
        float _1570 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1528.x + (-0.5));
        float _1572 = _1570 * (_1528.y + (-0.5));
        float _1573 = _1570 * (_1528.z + (-0.5));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = _1541 * 0.5;
        float _1578 = _1551 * 0.5;
        float _1579 = _1561 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_867, _868, _869), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4373 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1604 + 1.0))) + _1609) * _1574;
        float _1619 = _1542 * 0.5;
        float _1620 = _1552 * 0.5;
        float _1621 = _1562 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_867, _868, _869), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4406 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1646 + 1.0))) + _1651) * _1575;
        float _1661 = _1543 * 0.5;
        float _1662 = _1553 * 0.5;
        float _1663 = _1563 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_867, _868, _869), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4439 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1688 + 1.0))) + _1693) * _1576;
        _1710 = _1543;
        _1711 = _1542;
        _1712 = _1541;
        _1713 = _1553;
        _1714 = _1552;
        _1715 = _1551;
        _1716 = _1563;
        _1717 = _1562;
        _1718 = _1561;
        _1719 = _1576;
        _1720 = _1575;
        _1721 = _1574;
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
    }
    else
    {
        _1710 = _1404;
        _1711 = _1404;
        _1712 = _1404;
        _1713 = _1404;
        _1714 = _1404;
        _1715 = _1404;
        _1716 = _1404;
        _1717 = _1404;
        _1718 = _1404;
        _1719 = _1404;
        _1720 = _1404;
        _1721 = _1404;
        _1722 = 0.0;
        _1723 = 0.0;
        _1724 = 0.0;
    }
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1416)) + _1416;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1417)) + _1417;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1418)) + _1418;
    float _1757 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1734));
    float _1778 = _1042 * 0.5;
    float _1779 = _1043 * 0.5;
    float _1780 = _1044 * 0.5;
    float _1781 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1784 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1787 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1821;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1794 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1403, _1407, _1410, _1413));
        float _1798 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1802 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1809 = dot(vec4(cbModelParam._m0[39u]), vec4(_1778, _1779, _1780, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1832;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1823 = dot(vec4(cbModelParam._m0[40u]), vec4(_1778, _1779, _1780, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1836 = (_1832 * cbModelParam._m0[1u].x) + (_1821 * (1.0 - cbModelParam._m0[1u].x));
    float _1846 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1846 : min(cbModelParam._m0[25u].z, _1846));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1894 = fma(_1104, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096)) + cbModelParam._m0[13u].w;
        float _1898 = fma(_1104, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096)) + cbModelParam._m0[14u].w;
        float _1902 = fma(_1104, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096)) + cbModelParam._m0[15u].w;
        float _1905 = fma(_1044, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042));
        float _1908 = fma(_1044, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042));
        float _1911 = fma(_1044, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042));
        float _1939;
        if (_1905 > 0.0)
        {
            _1939 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1939 = frontier_phi_14_12_ladder;
        }
        float _2111;
        if (_1908 > 0.0)
        {
            _2111 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2111 = frontier_phi_23_19_ladder;
        }
        float _2405;
        if (_1911 > 0.0)
        {
            _2405 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2405 = frontier_phi_35_30_ladder;
        }
        float _2407 = isnan(_2111) ? _1939 : (isnan(_1939) ? _2111 : min(_1939, _2111));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1905) + _1894;
        float _2413 = (_2408 * _1908) + _1898;
        float _2414 = (_2408 * _1911) + _1902;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2415;
        float _2419 = _2415 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 > _2419) || ((_2413 < _2417) || ((_2412 < _2417) || (_2412 > _2419))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2414, cbModelParam._m0[9u].z, fma(_2413, cbModelParam._m0[9u].y, _2412 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2414, cbModelParam._m0[10u].z, fma(_2413, cbModelParam._m0[10u].y, _2412 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2414, cbModelParam._m0[11u].z, fma(_2413, cbModelParam._m0[11u].y, _2412 * cbModelParam._m0[11u].x))), _1847);
            frontier_phi_13_35_ladder = _2559.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2559.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2559.x * cbModelParam._m0[1u].y;
        }
        _1927 = frontier_phi_13_35_ladder_2;
        _1929 = frontier_phi_13_35_ladder_1;
        _1931 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1042, _1043, _1044), _1847);
        _1927 = _1915.x * cbModelParam._m0[1u].y;
        _1929 = _1915.y * cbModelParam._m0[1u].y;
        _1931 = _1915.z * cbModelParam._m0[1u].y;
    }
    float _1935 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1935 : min(cbModelParam._m0[25u].w, _1935));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1104, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1104, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1104, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1044, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042));
        float _2003 = fma(_1044, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042));
        float _2006 = fma(_1044, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042));
        float _2116;
        if (_2000 > 0.0)
        {
            _2116 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2432;
        if (_2003 > 0.0)
        {
            _2432 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2432 = frontier_phi_37_32_ladder;
        }
        float _2770;
        if (_2006 > 0.0)
        {
            _2770 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2770 = frontier_phi_47_44_ladder;
        }
        float _2772 = isnan(_2432) ? _2116 : (isnan(_2116) ? _2432 : min(_2116, _2432));
        float _2773 = isnan(_2770) ? _2772 : (isnan(_2772) ? _2770 : min(_2772, _2770));
        float _2777 = (_2773 * _2000) + _1989;
        float _2778 = (_2773 * _2003) + _1993;
        float _2779 = (_2773 * _2006) + _1997;
        float _2780 = _2773 * 9.9999997473787516355514526367188e-05;
        float _2781 = (-1.0) - _2780;
        float _2783 = _2780 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2779 > _2783) || ((_2779 < _2781) || ((_2778 > _2783) || ((_2778 < _2781) || ((_2777 < _2781) || (_2777 > _2783))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2779, cbModelParam._m0[17u].z, fma(_2778, cbModelParam._m0[17u].y, _2777 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2779, cbModelParam._m0[18u].z, fma(_2778, cbModelParam._m0[18u].y, _2777 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2779, cbModelParam._m0[19u].z, fma(_2778, cbModelParam._m0[19u].y, _2777 * cbModelParam._m0[19u].x))), _1936);
            frontier_phi_22_47_ladder = _2901.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2901.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2901.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_22_47_ladder_2;
        _2027 = frontier_phi_22_47_ladder_1;
        _2029 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1042, _1043, _1044), _1936);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2042 = (((_1067 * _1019) + _1068) * _1034) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2044 = (((_1067 * _1021) + _1068) * _1034) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2046 = (((_1067 * _1022) + _1068) * _1034) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2049 = fma(_2046, cbSceneParam._m0[89u].z, fma(_2044, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2046, cbSceneParam._m0[90u].z, fma(_2044, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2046, cbSceneParam._m0[91u].z, fma(_2044, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2094 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2103 = _2090 / _2102;
    float _2104 = _2094 / _2102;
    float _2105 = _2098 / _2102;
    float _2251;
    float _2252;
    float _2253;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2132 = ((uint(_2105 > cbSceneParam._m0[59u].y) + uint(_2105 > cbSceneParam._m0[59u].x)) + uint(_2105 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2133 = _2132 + 43u;
        uint _2141 = _2132 + 44u;
        uint _2149 = _2132 + 45u;
        uint _2157 = _2132 + 46u;
        float _2168 = fma(_2102, cbSceneParam._m0[_2133].w, fma(_2098, cbSceneParam._m0[_2133].z, fma(_2094, cbSceneParam._m0[_2133].y, _2090 * cbSceneParam._m0[_2133].x)));
        float _2172 = fma(_2102, cbSceneParam._m0[_2141].w, fma(_2098, cbSceneParam._m0[_2141].z, fma(_2094, cbSceneParam._m0[_2141].y, _2090 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2102, cbSceneParam._m0[_2157].w, fma(_2098, cbSceneParam._m0[_2157].z, fma(_2094, cbSceneParam._m0[_2157].y, _2090 * cbSceneParam._m0[_2157].x)));
        float _2184 = cbSceneParam._m0[33u].z * _2180;
        float _2186 = cbSceneParam._m0[33u].w * _2180;
        float _2189 = fma(_2102, cbSceneParam._m0[_2149].w, fma(_2098, cbSceneParam._m0[_2149].z, fma(_2094, cbSceneParam._m0[_2149].y, _2090 * cbSceneParam._m0[_2149].x))) / _2180;
        float _2237 = (cbSceneParam._m0[33u].x - sqrt(((_2104 * _2104) + (_2103 * _2103)) + (_2105 * _2105))) * cbSceneParam._m0[33u].y;
        float _4565 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2244 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2184 + _2168) / _2180, (_2186 + _2172) / _2180), _2189), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 + _2168) / _2180, (_2172 - _2184) / _2180), _2189), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 - _2184) / _2180, (_2172 - _2186) / _2180), _2189), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 - _2186) / _2180, (_2184 + _2172) / _2180), _2189), 0.0)).x), vec4(0.25)));
        _2251 = 1.0 - (_2244 * cbSceneParam._m0[34u].x);
        _2252 = 1.0 - (_2244 * cbSceneParam._m0[34u].y);
        _2253 = 1.0 - (_2244 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2251 = 1.0;
        _2252 = 1.0;
        _2253 = 1.0;
    }
    float _2317;
    float _2319;
    float _2321;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2305 = fma(_2102, cbSceneParam._m0[63u].w, fma(_2098, cbSceneParam._m0[63u].z, fma(_2094, cbSceneParam._m0[63u].y, _2090 * cbSceneParam._m0[63u].x)));
        float _2306 = fma(_2102, cbSceneParam._m0[60u].w, fma(_2098, cbSceneParam._m0[60u].z, fma(_2094, cbSceneParam._m0[60u].y, _2090 * cbSceneParam._m0[60u].x))) / _2305;
        float _2307 = fma(_2102, cbSceneParam._m0[61u].w, fma(_2098, cbSceneParam._m0[61u].z, fma(_2094, cbSceneParam._m0[61u].y, _2090 * cbSceneParam._m0[61u].x))) / _2305;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2306 >= cbSceneParam._m0[64u].x) && (_2307 >= cbSceneParam._m0[64u].y)) && (_2306 <= cbSceneParam._m0[64u].z)) && (_2307 <= cbSceneParam._m0[64u].w))
        {
            float _2445 = fma(_2102, cbSceneParam._m0[62u].w, fma(_2098, cbSceneParam._m0[62u].z, fma(_2094, cbSceneParam._m0[62u].y, _2090 * cbSceneParam._m0[62u].x))) / _2305;
            float _2449 = isnan(cbSceneParam._m0[41u].w) ? _2445 : (isnan(_2445) ? cbSceneParam._m0[41u].w : max(_2445, cbSceneParam._m0[41u].w));
            float _2492 = (cbSceneParam._m0[33u].x - sqrt(((_2104 * _2104) + (_2103 * _2103)) + (_2105 * _2105))) * cbSceneParam._m0[33u].y;
            float _4581 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
            float _2499 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2306, cbSceneParam._m0[33u].w + _2307), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2306, _2307 - cbSceneParam._m0[33u].z), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2306 - cbSceneParam._m0[33u].z, _2307 - cbSceneParam._m0[33u].w), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2306 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2307), _2449), 0.0)).x), vec4(0.25)));
            float _2503 = 1.0 - (_2499 * cbSceneParam._m0[34u].x);
            float _2504 = 1.0 - (_2499 * cbSceneParam._m0[34u].y);
            float _2505 = 1.0 - (_2499 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
            frontier_phi_34_33_ladder_1 = isnan(_2504) ? _2252 : (isnan(_2252) ? _2504 : min(_2252, _2504));
            frontier_phi_34_33_ladder_2 = isnan(_2503) ? _2251 : (isnan(_2251) ? _2503 : min(_2251, _2503));
        }
        else
        {
            frontier_phi_34_33_ladder = _2253;
            frontier_phi_34_33_ladder_1 = _2252;
            frontier_phi_34_33_ladder_2 = _2251;
        }
        _2317 = frontier_phi_34_33_ladder_2;
        _2319 = frontier_phi_34_33_ladder_1;
        _2321 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2317 = _2251;
        _2319 = _2252;
        _2321 = _2253;
    }
    uvec4 _2326 = floatBitsToUint(cbInstanceData._m0[_994 + 5u]);
    uint _2328 = _2326.x * 14u;
    uint _2329 = _2328 + 13u;
    float _2336 = _1034 + (-1.0);
    float _2341 = (cbLight._m0[_2329].x * _2336) + 1.0;
    float _2342 = (cbLight._m0[_2329].y * _2336) + 1.0;
    float _2343 = (cbLight._m0[_2329].z * _2336) + 1.0;
    float _2344 = (cbLight._m0[_2329].w * _2336) + 1.0;
    uint _2345 = _2328 + 5u;
    float _2351 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
    uint _2355 = _2328 + 4u;
    float _2364 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
    uint _2368 = _2328 | 1u;
    float _2379 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_867, _868, _869));
    float _2382 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_867, _868, _869));
    float _4617 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _4628 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2387 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2389 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2396 = ((cbLight._m0[_2345].x * _2351) * _2389) + (((cbLight._m0[_2355].x * _2317) * _2364) * _2387);
    float _2397 = ((_2351 * cbLight._m0[_2345].y) * _2389) + (((cbLight._m0[_2355].y * _2319) * _2364) * _2387);
    float _2398 = ((_2351 * cbLight._m0[_2345].z) * _2389) + (((cbLight._m0[_2355].z * _2321) * _2364) * _2387);
    uvec4 _2402 = floatBitsToUint(cbLight._m0[_2328 + 12u]);
    bool _2404 = _2402.x == 0u;
    float _2506;
    float _2508;
    float _2510;
    if (_2404)
    {
        _2506 = _2396;
        _2508 = _2397;
        _2510 = _2398;
    }
    else
    {
        uint _2514 = _2328 + 6u;
        float _2530 = (dot(vec3(cbLight._m0[_2328 + 2u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2531 = _2530 * _2530;
        float _4639 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2532 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2533 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2506 = (((cbLight._m0[_2514].x * 0.3183098733425140380859375) * _2532) * _2533) + _2396;
        _2508 = (((cbLight._m0[_2514].y * 0.3183098733425140380859375) * _2532) * _2533) + _2397;
        _2510 = (((cbLight._m0[_2514].z * 0.3183098733425140380859375) * _2532) * _2533) + _2398;
    }
    bool _2513 = _2402.y == 0u;
    float _2568;
    float _2570;
    float _2572;
    if (_2513)
    {
        _2568 = _2506;
        _2570 = _2508;
        _2572 = _2510;
    }
    else
    {
        uint _2741 = _2328 + 7u;
        float _2757 = (dot(vec3(cbLight._m0[_2328 + 3u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2758 = _2757 * _2757;
        float _4655 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2759 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2760 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2568 = (((cbLight._m0[_2741].x * 0.3183098733425140380859375) * _2759) * _2760) + _2506;
        _2570 = (((cbLight._m0[_2741].y * 0.3183098733425140380859375) * _2759) * _2760) + _2508;
        _2572 = (((cbLight._m0[_2741].z * 0.3183098733425140380859375) * _2759) * _2760) + _2510;
    }
    uint _2575 = _2328 + 8u;
    float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _870) * 0.949999988079071044921875);
    float _2589 = _2588 * _2588;
    float _2590 = cbLight._m0[_2328].x + _948;
    float _2591 = cbLight._m0[_2328].y + _949;
    float _2592 = cbLight._m0[_2328].z + _950;
    float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
    float _2597 = _2596 * _2590;
    float _2598 = _2596 * _2591;
    float _2599 = _2596 * _2592;
    float _2600 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2328].xyz));
    float _4671 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _4682 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _2604 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2605 = dot(vec3(_867, _868, _869), vec3(_2597, _2598, _2599));
    float _4693 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2609 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2597, _2598, _2599));
    float _4704 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2613 = _2589 * _2589;
    float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
    float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
    float _2626 = 0.959999978542327880859375 - _1016;
    float _2628 = 0.959999978542327880859375 - _1017;
    float _2629 = 0.959999978542327880859375 - _1018;
    float _2636 = 1.0 - _2589;
    float _2647 = (0.5 / (((_2604 * ((_2603 * _2636) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2636) + _2589) * _2603))) * _2603;
    float _4715 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2649 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
    uint _2663 = _2328 + 9u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _870) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2368].x + _948;
    float _2677 = cbLight._m0[_2368].y + _949;
    float _2678 = cbLight._m0[_2368].z + _950;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2368].xyz));
    float _4726 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2690 = dot(vec3(_867, _868, _869), vec3(_2683, _2684, _2685));
    float _4737 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2694 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2683, _2684, _2685));
    float _4748 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = _2675 * _2675;
    float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
    float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
    float _2716 = 1.0 - _2675;
    float _2726 = (0.5 / (((_2604 * ((_2689 * _2716) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2716) + _2675) * _2689))) * _2689;
    float _4759 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2728 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
    float _2738 = (((((_2709 * _2626) + _1019) * cbLight._m0[_2663].x) * _2728) * _2351) + ((((cbLight._m0[_2575].x * _2317) * ((_2625 * _2626) + _1019)) * _2649) * _2364);
    float _2739 = (((((_2709 * _2628) + _1021) * cbLight._m0[_2663].y) * _2728) * _2351) + ((((cbLight._m0[_2575].y * _2319) * ((_2625 * _2628) + _1021)) * _2649) * _2364);
    float _2740 = (((((_2709 * _2629) + _1022) * cbLight._m0[_2663].z) * _2728) * _2351) + ((((cbLight._m0[_2575].z * _2321) * ((_2625 * _2629) + _1022)) * _2649) * _2364);
    float _2796;
    float _2798;
    float _2800;
    if (_2404)
    {
        _2796 = _2738;
        _2798 = _2739;
        _2800 = _2740;
    }
    else
    {
        uint _2802 = _2328 + 2u;
        uint _2806 = _2328 + 10u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _870) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _948;
        float _2823 = cbLight._m0[_2802].y + _949;
        float _2824 = cbLight._m0[_2802].z + _950;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2802].xyz));
        float _4770 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2836 = dot(vec3(_867, _868, _869), vec3(_2829, _2830, _2831));
        float _4781 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4792 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2604 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2862) + _2821) * _2835))) * _2835;
        float _4803 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2796 = (((((_2855 * _2626) + _1019) * cbLight._m0[_2806].x) * _2874) * _2875) + _2738;
        _2798 = (((((_2855 * _2628) + _1021) * cbLight._m0[_2806].y) * _2874) * _2875) + _2739;
        _2800 = (((((_2855 * _2629) + _1022) * cbLight._m0[_2806].z) * _2874) * _2875) + _2740;
    }
    float _2906;
    float _2908;
    float _2910;
    if (_2513)
    {
        _2906 = _2796;
        _2908 = _2798;
        _2910 = _2800;
    }
    else
    {
        uint _2917 = _2328 + 3u;
        uint _2921 = _2328 + 11u;
        float _2935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2917].w)) * _870) * 0.949999988079071044921875);
        float _2936 = _2935 * _2935;
        float _2937 = cbLight._m0[_2917].x + _948;
        float _2938 = cbLight._m0[_2917].y + _949;
        float _2939 = cbLight._m0[_2917].z + _950;
        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
        float _2944 = _2943 * _2937;
        float _2945 = _2943 * _2938;
        float _2946 = _2943 * _2939;
        float _2947 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2917].xyz));
        float _4819 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2950 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2951 = dot(vec3(_867, _868, _869), vec3(_2944, _2945, _2946));
        float _4830 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2955 = dot(vec3(cbLight._m0[_2917].xyz), vec3(_2944, _2945, _2946));
        float _4841 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2959 = _2936 * _2936;
        float _2963 = ((_2954 * _2954) * (_2959 + (-1.0))) + 1.0;
        float _2970 = exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0);
        float _2977 = 1.0 - _2936;
        float _2987 = (0.5 / (((_2604 * ((_2950 * _2977) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2977) + _2936) * _2950))) * _2950;
        float _4852 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2989 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2959 / ((_2963 * _2963) * 3.141590118408203125));
        float _2990 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2906 = (((((_2970 * _2626) + _1019) * cbLight._m0[_2921].x) * _2989) * _2990) + _2796;
        _2908 = (((((_2970 * _2628) + _1021) * cbLight._m0[_2921].y) * _2989) * _2990) + _2798;
        _2910 = (((((_2970 * _2629) + _1022) * cbLight._m0[_2921].z) * _2989) * _2990) + _2800;
    }
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    if (_2326.y == 0u)
    {
        uvec4 _3011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3012 = _3011.x;
        uint _3023 = uint((float(_3011.y) * floor(float(uint(cbSceneParam._m0[85u].y * _957) / _3012))) + floor(float(uint(cbSceneParam._m0[85u].x * _956) / _3012)));
        float _3033 = (log2(_2105 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3034 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        uint _3037 = uint(isnan(14.0) ? _3034 : (isnan(_3034) ? 14.0 : min(_3034, 14.0)));
        uvec4 _3042 = texelFetch(g_lightClusterGridBuffer, int(((_3037 << 2u) + (_3023 << 6u)) >> 2u));
        uint _3043 = _3042.x;
        uint _3044 = _3011.z;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((((1u << ((_3044 >> 4u) & 15u)) + 4294967295u) & _3043) == 0u) || ((_3044 & 240u) == 0u))
        {
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
        }
        else
        {
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            uint _3311 = 0u;
            uint _3320;
            bool _3321;
            for (;;)
            {
                _3320 = texelFetch(g_lightClassification, int((((_3037 << 5u) + (_3023 << 9u)) + (_3311 << 2u)) >> 2u)).x;
                _3321 = _3320 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3321)
                {
                    frontier_phi_66_pred = _3310;
                    frontier_phi_66_pred_1 = _3309;
                    frontier_phi_66_pred_2 = _3308;
                    frontier_phi_66_pred_3 = _3307;
                    frontier_phi_66_pred_4 = _3306;
                    frontier_phi_66_pred_5 = _3305;
                }
                else
                {
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    uint _3435;
                    _3429 = _3305;
                    _3430 = _3306;
                    _3431 = _3307;
                    _3432 = _3308;
                    _3433 = _3309;
                    _3434 = _3310;
                    _3435 = _3320;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    for (;;)
                    {
                        uint _3439 = uint(findLSB(_3435)) + (_3311 << 5u);
                        uint _3436 = (_3435 + 4294967295u) & _3435;
                        uint _3441 = _3439 * 48u;
                        vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3461 = (_3439 * 48u) + 4u;
                        vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3480 = (_3439 * 48u) + 8u;
                        vec3 _3491 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3480)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 2u)).x));
                        float _3495 = _3455.x - _2103;
                        float _3496 = _3455.y - _2104;
                        float _3497 = _3455.z - _2105;
                        float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                        float _3501 = inversesqrt(_3498);
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3505 = dot(vec3(_975, _978, _981), vec3(_3502, _3503, _3504));
                        float _3510 = 1.0 - (_3498 * _3455.w);
                        float _4878 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3512 = sqrt(_3498) * _3474.w;
                        float _3515 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3505) + _3516;
                        float _3522 = _3512 * _3512;
                        float _3526 = ((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3511) / ((_3522 * 0.699999988079071044921875) + 1.0);
                        float _3530 = (-0.0) - _2103;
                        float _3531 = (-0.0) - _2104;
                        float _3532 = (-0.0) - _2105;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3537 = _3536 * _3530;
                        float _3538 = _3536 * _3531;
                        float _3539 = _3536 * _3532;
                        float _3546 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                        float _3547 = 1.0 - _1050;
                        float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                        float _3555 = _3554 * _3554;
                        float _3556 = _3555 * _3555;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                        float _3567 = dot(vec3(_975, _978, _981), vec3(_3537, _3538, _3539));
                        float _4894 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3570 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3571 = dot(vec3(_975, _978, _981), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                        float _4905 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                        float _3579 = _3515 * _3555;
                        float _3580 = _3579 * _3579;
                        float _3583 = ((1.0 - _3580) * _3505) + _3580;
                        float _4916 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3585 = 1.0 - _3555;
                        float _3595 = (0.5 / (((_3584 * ((_3570 * _3585) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3555) * _3570))) * _3584;
                        float _4927 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3606 = (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3578 * _3578) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125))) * _3511;
                        _3364 = (_3526 * _3474.x) + _3432;
                        _3365 = (_3526 * _3474.y) + _3433;
                        _3366 = (_3526 * _3474.z) + _3434;
                        _3361 = (_3606 * _3491.x) + _3429;
                        _3362 = (_3606 * _3491.y) + _3430;
                        _3363 = (_3606 * _3491.z) + _3431;
                        if (_3436 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3429 = _3361;
                            _3430 = _3362;
                            _3431 = _3363;
                            _3432 = _3364;
                            _3433 = _3365;
                            _3434 = _3366;
                            _3435 = _3436;
                        }
                    }
                    frontier_phi_66_pred = _3366;
                    frontier_phi_66_pred_1 = _3365;
                    frontier_phi_66_pred_2 = _3364;
                    frontier_phi_66_pred_3 = _3363;
                    frontier_phi_66_pred_4 = _3362;
                    frontier_phi_66_pred_5 = _3361;
                }
                _3163 = frontier_phi_66_pred;
                _3161 = frontier_phi_66_pred_1;
                _3159 = frontier_phi_66_pred_2;
                _3157 = frontier_phi_66_pred_3;
                _3155 = frontier_phi_66_pred_4;
                _3153 = frontier_phi_66_pred_5;
                uint _3312 = _3311 + 1u;
                if (_3312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3305 = _3153;
                    _3306 = _3155;
                    _3307 = _3157;
                    _3308 = _3159;
                    _3309 = _3161;
                    _3310 = _3163;
                    _3311 = _3312;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
        }
        uvec4 _3166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3167 = _3166.z;
        uint _3169 = (_3167 >> 8u) & 15u;
        float _3273;
        float _3275;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        if (((4294967295u << _3169) & _3043) == 0u)
        {
            _3273 = _3152;
            _3275 = _3154;
            _3277 = _3156;
            _3279 = _3158;
            _3281 = _3160;
            _3283 = _3162;
        }
        else
        {
            float _3298 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
            float _3299 = _3298 * _2103;
            float _3300 = _3298 * _2104;
            float _3301 = _3298 * _2105;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3169 < ((_3167 >> 12u) & 15u))
            {
                float _3274;
                float _3276;
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3412 = _3152;
                float _3413 = _3154;
                float _3414 = _3156;
                float _3415 = _3158;
                float _3416 = _3160;
                float _3417 = _3162;
                uint _3418 = _3169;
                uint _3427;
                bool _3428;
                for (;;)
                {
                    _3427 = texelFetch(g_lightClassification, int((((_3037 << 5u) + (_3023 << 9u)) + (_3418 << 2u)) >> 2u)).x;
                    _3428 = _3427 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3428)
                    {
                        frontier_phi_72_pred = _3417;
                        frontier_phi_72_pred_1 = _3416;
                        frontier_phi_72_pred_2 = _3415;
                        frontier_phi_72_pred_3 = _3414;
                        frontier_phi_72_pred_4 = _3413;
                        frontier_phi_72_pred_5 = _3412;
                    }
                    else
                    {
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3624 = _3412;
                        float _3625 = _3413;
                        float _3626 = _3414;
                        float _3627 = _3415;
                        float _3628 = _3416;
                        float _3629 = _3417;
                        uint _3630 = _3427;
                        uint _3631;
                        vec4 _3656;
                        float _3657;
                        vec4 _3672;
                        vec3 _3684;
                        vec4 _3699;
                        vec4 _3714;
                        float _3760;
                        bool _3761;
                        for (;;)
                        {
                            uint _3641 = ((_3418 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3630));
                            _3631 = (_3630 + 4294967295u) & _3630;
                            uint _3643 = _3641 * 40u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            _3657 = _3656.w;
                            uint _3659 = (_3641 * 40u) + 4u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3641 * 40u) + 8u;
                            _3684 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x));
                            uint _3686 = (_3641 * 40u) + 16u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3641 * 40u) + 20u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3641 * 40u) + 24u;
                            vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3735 = (_3641 * 40u) + 28u;
                            vec4 _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            _3760 = fma(_2105, _3748.z, fma(_2104, _3748.y, _3748.x * _2103)) + _3748.w;
                            _3761 = !((fma(_2105, _3729.z, fma(_2104, _3729.y, _3729.x * _2103)) + _3729.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3761)
                            {
                                float _3788 = _3656.x - _2103;
                                float _3789 = _3656.y - _2104;
                                float _3790 = _3656.z - _2105;
                                float _3791 = dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790));
                                float _3794 = inversesqrt(_3791);
                                float _3795 = _3794 * _3788;
                                float _3796 = _3794 * _3789;
                                float _3797 = _3794 * _3790;
                                float _3801 = 1.0 - (_3791 / (_3657 * _3657));
                                float _4938 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3806 = sqrt(_3791) * _3672.w;
                                float _3808 = 1.39999997615814208984375 / (_3806 + 1.39999997615814208984375);
                                float _3809 = _3808 * _3808;
                                float _3812 = ((1.0 - _3809) * dot(vec3(_3795, _3796, _3797), vec3(_975, _978, _981))) + _3809;
                                float _3815 = _3806 * _3806;
                                float _3819 = (fma(_2105, _3699.z, fma(_2104, _3699.y, _3699.x * _2103)) + _3699.w) / _3760;
                                float _3820 = (fma(_2105, _3714.z, fma(_2104, _3714.y, _3714.x * _2103)) + _3714.w) / _3760;
                                float _3824 = 1.0 - dot(vec2(_3819, _3820), vec2(_3819, _3820));
                                float _4954 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3826 = _3825 * (((isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0))) * _3802) / ((_3815 * 0.699999988079071044921875) + 1.0));
                                float _3838 = exp2(log2(1.0 / ((_3815 * 3.5) + 5.0)) * 0.25);
                                float _3839 = 1.0 - _1050;
                                float _3846 = sqrt(1.0 - ((1.0 - (_3839 * _3839)) * (1.0 - (_3838 * _3838))));
                                float _3847 = _3846 * _3846;
                                float _3848 = _3847 * _3847;
                                float _3849 = _3795 - _3299;
                                float _3850 = _3796 - _3300;
                                float _3851 = _3797 - _3301;
                                float _3855 = inversesqrt(dot(vec3(_3849, _3850, _3851), vec3(_3849, _3850, _3851)));
                                float _3859 = dot(vec3(_975, _978, _981), vec3((-0.0) - _3299, (-0.0) - _3300, (-0.0) - _3301));
                                float _4965 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3862 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3863 = dot(vec3(_975, _978, _981), vec3(_3855 * _3849, _3855 * _3850, _3855 * _3851));
                                float _4976 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3866 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3870 = ((_3866 * _3866) * (_3848 + (-1.0))) + 1.0;
                                float _3871 = _3808 * _3847;
                                float _3872 = _3871 * _3871;
                                float _3878 = ((1.0 - _3872) * dot(vec3(_975, _978, _981), vec3(_3795, _3796, _3797))) + _3872;
                                float _4987 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3879 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3880 = 1.0 - _3847;
                                float _3890 = (0.5 / (((_3879 * ((_3862 * _3880) + _3847)) + 9.9999999392252902907785028219223e-09) + (((_3879 * _3880) + _3847) * _3862))) * _3879;
                                float _4998 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3900 = (_3825 * _3802) * (((_3848 * 3.1415927410125732421875) * (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) / ((_3870 * _3870) * ((_3815 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3826 * _3672.y;
                                frontier_phi_78_pred_1 = _3826 * _3672.x;
                                frontier_phi_78_pred_2 = _3900 * _3684.z;
                                frontier_phi_78_pred_3 = _3900 * _3684.y;
                                frontier_phi_78_pred_4 = _3900 * _3684.x;
                                frontier_phi_78_pred_5 = _3826 * _3672.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3908 = frontier_phi_78_pred;
                            _3907 = frontier_phi_78_pred_1;
                            _3906 = frontier_phi_78_pred_2;
                            _3905 = frontier_phi_78_pred_3;
                            _3904 = frontier_phi_78_pred_4;
                            _3909 = frontier_phi_78_pred_5;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            if (_3631 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3631;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3616;
                        frontier_phi_72_pred_1 = _3615;
                        frontier_phi_72_pred_2 = _3614;
                        frontier_phi_72_pred_3 = _3613;
                        frontier_phi_72_pred_4 = _3612;
                        frontier_phi_72_pred_5 = _3611;
                    }
                    _3284 = frontier_phi_72_pred;
                    _3282 = frontier_phi_72_pred_1;
                    _3280 = frontier_phi_72_pred_2;
                    _3278 = frontier_phi_72_pred_3;
                    _3276 = frontier_phi_72_pred_4;
                    _3274 = frontier_phi_72_pred_5;
                    uint _3419 = _3418 + 1u;
                    if (_3419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3412 = _3274;
                        _3413 = _3276;
                        _3414 = _3278;
                        _3415 = _3280;
                        _3416 = _3282;
                        _3417 = _3284;
                        _3418 = _3419;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3284;
                frontier_phi_60_61_ladder_1 = _3282;
                frontier_phi_60_61_ladder_2 = _3278;
                frontier_phi_60_61_ladder_3 = _3276;
                frontier_phi_60_61_ladder_4 = _3274;
                frontier_phi_60_61_ladder_5 = _3280;
            }
            else
            {
                frontier_phi_60_61_ladder = _3162;
                frontier_phi_60_61_ladder_1 = _3160;
                frontier_phi_60_61_ladder_2 = _3156;
                frontier_phi_60_61_ladder_3 = _3154;
                frontier_phi_60_61_ladder_4 = _3152;
                frontier_phi_60_61_ladder_5 = _3158;
            }
            _3273 = frontier_phi_60_61_ladder_4;
            _3275 = frontier_phi_60_61_ladder_3;
            _3277 = frontier_phi_60_61_ladder_2;
            _3279 = frontier_phi_60_61_ladder_5;
            _3281 = frontier_phi_60_61_ladder_1;
            _3283 = frontier_phi_60_61_ladder;
        }
        float _3288 = isnan(1.0) ? _1034 : (isnan(_1034) ? 1.0 : min(_1034, 1.0));
        _3056 = (_3288 * _3279) + _2568;
        _3058 = (_3288 * _3281) + _2570;
        _3060 = (_3288 * _3283) + _2572;
        _3062 = ((_3273 * _1019) * _3288) + _2906;
        _3064 = ((_3275 * _1021) * _3288) + _2908;
        _3066 = ((_3277 * _1022) * _3288) + _2910;
    }
    else
    {
        _3056 = _2568;
        _3058 = _2570;
        _3060 = _2572;
        _3062 = _2906;
        _3064 = _2908;
        _3066 = _2910;
    }
    uint _3072 = _995 + uint(cbMatDynParam._m0[0u].w);
    float _3078 = ((((((_792.x - _787.x) * _770) + _787.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _716) * cbMtdParam._m0[20u].x)) * _725) * cbInstanceData._m0[_3072].x;
    float _3079 = ((((((_792.y - _787.y) * _770) + _787.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_705.y - _703) * _683) + _703)) * cbMtdParam._m0[20u].y)) * _725) * cbInstanceData._m0[_3072].y;
    float _3080 = ((((((_792.z - _787.z) * _770) + _787.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_705.z - _704) * _683) + _704)) * cbMtdParam._m0[20u].z)) * _725) * cbInstanceData._m0[_3072].z;
    float _5014 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5025 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _5036 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _3097 = (((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_3056 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1034))) + ((_3062 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1836)) * cbPerFrame._m0[3u].x)) + _3078;
    float _3099 = (_3079 + ((_3064 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1836)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3058 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1034)));
    float _3101 = (_3080 + ((_3066 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1836)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3060 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1034)));
    float _5062 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3114 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
    uint _3115 = _994 + 6u;
    float _3123 = _956 / cbSceneParam._m0[86u].x;
    float _3124 = _957 / cbSceneParam._m0[86u].y;
    vec4 _3138 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, (log2((isnan(cbSceneParam._m0[77u].w) ? _890 : (isnan(_890) ? cbSceneParam._m0[77u].w : min(_890, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3140 = _3138.x;
    float _3141 = _3138.y;
    float _3142 = _3138.z;
    float _3143 = _3138.w;
    float _3214;
    float _3216;
    float _3218;
    float _3220;
    if (_890 > cbSceneParam._m0[78u].w)
    {
        float _3177 = isnan(_890) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _890 : min(cbSceneParam._m0[80u].w, _890));
        float _3178 = _3177 / _890;
        float _3189 = _3178 * _941;
        float _3190 = _942 * _3178;
        float _3191 = (-0.0) - _3190;
        float _3192 = _3178 * _943;
        float _3194 = (cbSceneParam._m0[77u].w * _3191) / _3177;
        float _3195 = _3194 + cbSceneParam._m0[79u].w;
        float _3196 = cbSceneParam._m0[79u].w - _3190;
        float _3202 = sqrt(((_3189 * _3189) + (_3190 * _3190)) + (_3192 * _3192));
        float _3205 = (1.0 - (cbSceneParam._m0[77u].w / _3177)) * _3202;
        float _3210 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3212 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3374;
        if (abs((_3191 - _3194) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3374 = ((((_3195 > 0.0) ? exp2(_3210 * _3195) : (2.0 - exp2(_3212 * _3195))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3205;
        }
        else
        {
            float _3334 = 1.0 / cbSceneParam._m0[80u].x;
            float _3335 = isnan(_3196) ? _3195 : (isnan(_3195) ? _3196 : max(_3195, _3196));
            float _3336 = isnan(_3196) ? _3195 : (isnan(_3195) ? _3196 : min(_3195, _3196));
            float _3345 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : min(_3335, 0.0));
            float _3346 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : min(_3336, 0.0));
            _3374 = ((abs(_3202 / _3191) * cbSceneParam._m0[80u].y) * ((((_3345 - _3346) * 2.0) - ((exp2(_3210 * (isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0)))) - exp2(_3210 * (isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))))) * _3334)) - ((exp2(_3212 * _3345) - exp2(_3212 * _3346)) * _3334))) + (_3205 * cbSceneParam._m0[80u].z);
        }
        vec4 _3376 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, 1.0), 0.0);
        float _3385 = exp2((_3374 * (-1.44269502162933349609375)) * (1.0 - _3376.w));
        float _3386 = log2(_3385);
        float _3402 = log2(_3143);
        _3214 = (exp2(_3402 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3386 * cbSceneParam._m0[78u].x)) * _3376.x) / cbSceneParam._m0[78u].x)) + _3140;
        _3216 = (exp2(_3402 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3386 * cbSceneParam._m0[78u].y)) * _3376.y) / cbSceneParam._m0[78u].y)) + _3141;
        _3218 = (exp2(_3402 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3386 * cbSceneParam._m0[78u].z)) * _3376.z) / cbSceneParam._m0[78u].z)) + _3142;
        _3220 = _3385 * _3143;
    }
    else
    {
        _3214 = _3140;
        _3216 = _3141;
        _3218 = _3142;
        _3220 = _3143;
    }
    float _3232 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3233 = _3232 == 3.0;
    float _3234 = log2(_3220);
    float _3238 = exp2(_3234 * cbSceneParam._m0[78u].x);
    float _3239 = exp2(_3234 * cbSceneParam._m0[78u].y);
    float _3240 = exp2(_3234 * cbSceneParam._m0[78u].z);
    float _3241 = _3238 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)));
    float _3242 = _3239 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)));
    float _3243 = _3240 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0)));
    float _3252 = (_3232 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3252 * (_3233 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3214)));
    SV_Target.y = _3252 * (_3233 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3216)));
    SV_Target.z = _3252 * (_3233 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3218)));
    SV_Target.w = cbInstanceData._m0[_3115].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3078) * _3114) * _3238) * _3252;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3079) * _3114) * _3239) * _3252;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3080) * _3114) * _3240) * _3252;
    SV_Target_1.w = cbInstanceData._m0[_3115].w;
}


