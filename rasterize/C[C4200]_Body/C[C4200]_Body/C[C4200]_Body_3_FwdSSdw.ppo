#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1471;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _265 = log2(0.0);
    float _267 = exp2(_265 * cbMtdParam._m0[24u].x);
    float _268 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _269 = isnan(1.0) ? _268 : (isnan(_268) ? 1.0 : min(_268, 1.0));
    vec4 _283 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _287 = _283.z;
    float _295 = exp2(log2(_287 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _309 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _312 = _309.y;
    float _315 = (_309.x + (-0.02500000037252902984619140625)) * 8.0;
    float _319 = roundEven(5.0 - _315);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(4.0) ? _320 : (isnan(_320) ? 4.0 : min(_320, 4.0));
    float _334 = floor(_321);
    vec4 _337 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _334));
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[17u].x;
    _190[0u] = cbMtdParam._m0[17u].y;
    _191[0u] = cbMtdParam._m0[17u].z;
    _189[1u] = cbMtdParam._m0[15u].x;
    _190[1u] = cbMtdParam._m0[15u].y;
    _191[1u] = cbMtdParam._m0[15u].z;
    _189[2u] = cbMtdParam._m0[14u].x;
    _190[2u] = cbMtdParam._m0[14u].y;
    _191[2u] = cbMtdParam._m0[14u].z;
    _189[3u] = cbMtdParam._m0[13u].x;
    _190[3u] = cbMtdParam._m0[13u].y;
    _191[3u] = cbMtdParam._m0[13u].z;
    _189[4u] = cbMtdParam._m0[12u].x;
    _190[4u] = cbMtdParam._m0[12u].y;
    _191[4u] = cbMtdParam._m0[12u].z;
    _189[5u] = cbMtdParam._m0[18u].x;
    _190[5u] = cbMtdParam._m0[18u].y;
    _191[5u] = cbMtdParam._m0[18u].z;
    float _401 = roundEven(_315);
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    uint _404 = uint(int(isnan(5.0) ? _402 : (isnan(_402) ? 5.0 : min(_402, 5.0))));
    vec4 _434 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _445 = cbMtdParam._m0[9u].x * _434.x;
    float _446 = cbMtdParam._m0[9u].y * _434.y;
    float _447 = cbMtdParam._m0[9u].z * _434.z;
    float _454 = ((((((_189[_404] - cbMtdParam._m0[10u].x) * _312) + cbMtdParam._m0[10u].x) * _337.x) - _445) * _297) + _445;
    float _455 = ((((((_190[_404] - cbMtdParam._m0[10u].y) * _312) + cbMtdParam._m0[10u].y) * _337.y) - _446) * _297) + _446;
    float _456 = ((((((_191[_404] - cbMtdParam._m0[10u].z) * _312) + cbMtdParam._m0[10u].z) * _337.z) - _447) * _297) + _447;
    float _462 = exp2(log2(_283.w) * cbMtdParam._m0[24u].w);
    vec4 _475 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _495 = (((cbMtdParam._m0[16u].x * _475.x) - _454) * _462) + _454;
    float _496 = (((cbMtdParam._m0[16u].y * _475.y) - _455) * _462) + _455;
    float _497 = (((cbMtdParam._m0[16u].z * _475.z) - _456) * _462) + _456;
    vec4 _509 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _534 = (_255.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _509.x) - _495) * _269) + _495);
    float _536 = (_255.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _509.y) - _496) * _269) + _496);
    float _538 = (_255.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _509.z) - _497) * _269) + _497);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[30u].z;
    _185[0u] = cbMtdParam._m0[30u].w;
    _184[1u] = cbMtdParam._m0[32u].z;
    _185[1u] = cbMtdParam._m0[32u].w;
    _184[2u] = cbMtdParam._m0[32u].x;
    _185[2u] = cbMtdParam._m0[32u].y;
    _184[3u] = cbMtdParam._m0[31u].z;
    _185[3u] = cbMtdParam._m0[31u].w;
    _184[4u] = cbMtdParam._m0[31u].x;
    _185[4u] = cbMtdParam._m0[31u].y;
    float _575 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    uint _577 = uint(int(isnan(4.0) ? _575 : (isnan(_575) ? 4.0 : min(_575, 4.0))));
    float _584 = ((_185[_577] - cbMtdParam._m0[23u].z) * _297) + cbMtdParam._m0[23u].z;
    float _587 = ((cbMtdParam._m0[23u].w - _584) * _462) + _584;
    float _590 = ((cbMtdParam._m0[26u].y - _587) * _269) + _587;
    vec4 _605 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _334));
    vec4 _622 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _630 = cbMtdParam._m0[23u].x + _622.z;
    float _633 = (((_605.z + _184[_577]) - _630) * _297) + _630;
    vec4 _645 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _656 = (((_645.z - _633) + cbMtdParam._m0[30u].x) * _462) + _633;
    float _662 = ((((_287 * 2.0) * _656) - _656) * cbMtdParam._m0[25u].w) + _656;
    vec4 _674 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _685 = (((cbMtdParam._m0[24u].z + _674.z) - _662) * _269) + _662;
    float _698 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _721 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_698 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _698) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _725 = cbPerFrame._m0[22u].x * 2.0;
    float _726 = _725 * cbMtdParam._m0[28u].z;
    float _729 = (_721.x * 0.5) + (-0.25);
    float _732 = (_721.y * 0.5) + (-0.25);
    float _733 = _732 * cbMtdParam._m0[28u].y;
    float _735 = (-0.0) - (cbMtdParam._m0[28u].y * _729);
    float _737 = fract(_726);
    float _739 = fract(_726 + 0.5);
    float _751 = abs((_737 * 2.0) + (-1.0));
    vec4 _767 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_737 * _735) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_733 * _737) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _769 = _767.x;
    float _770 = _767.y;
    float _771 = _767.z;
    vec4 _772 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_739 * _735) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_733 * _739) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _783 = ((_772.x - _769) * _751) + _769;
    float _790 = exp2(log2(_783 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _791 = isnan(cbMtdParam._m0[29u].y) ? _790 : (isnan(_790) ? cbMtdParam._m0[29u].y : max(_790, cbMtdParam._m0[29u].y));
    float _792 = isnan(cbMtdParam._m0[29u].z) ? _791 : (isnan(_791) ? cbMtdParam._m0[29u].z : min(_791, cbMtdParam._m0[29u].z));
    float _816 = (cbMtdParam._m0[33u].x * _698) + TEXCOORD;
    float _817 = (cbMtdParam._m0[33u].y * _698) + TEXCOORD_1;
    float _820 = _725 * cbMtdParam._m0[27u].w;
    float _821 = _732 * cbMtdParam._m0[27u].z;
    float _823 = (-0.0) - (cbMtdParam._m0[27u].z * _729);
    float _824 = fract(_820);
    float _826 = fract(_820 + 0.5);
    float _837 = abs((_824 * 2.0) + (-1.0));
    vec4 _854 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_824 * _823) + _816) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_821 * _824) + _817) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _859 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_826 * _823) + _816) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_821 * _826) + _817) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _893 = ((_605.x - _624) * _297) + _624;
    float _894 = ((_605.y - _625) * _297) + _625;
    float _899 = ((_645.x - _893) * _462) + _893;
    float _900 = ((_645.y - _894) * _462) + _894;
    float _909 = ((((_674.x - _899) * _269) + _899) * 2.0) + (-1.0);
    float _910 = ((((_674.y - _900) * _269) + _900) * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _3915 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _916 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    float _919 = (cbMtdParam._m0[26u].z * ((_283.x * 2.0) + (-1.0))) + _909;
    float _920 = (cbMtdParam._m0[26u].z * ((_283.y * 2.0) + (-1.0))) + _910;
    float _923 = fma(_916, _231 * NORMAL.x, fma(_920, _238 * TANGENT.x, (_224 * _216) * _919));
    float _926 = fma(_916, _231 * NORMAL.y, fma(_920, _238 * TANGENT.y, (_224 * _217) * _919));
    float _929 = fma(_916, _231 * NORMAL.z, fma(_920, _238 * TANGENT.z, (_224 * _218) * _919));
    float _933 = inversesqrt(dot(vec3(_923, _926, _929), vec3(_923, _926, _929)));
    float _934 = _933 * _923;
    float _935 = _933 * _926;
    float _936 = _933 * _929;
    float _3926 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _937 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3948 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3959 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3970 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _941 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _957 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1008 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _998);
    float _1009 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _998);
    float _1010 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _998);
    float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
    float _1015 = _1008 * _1014;
    float _1016 = _1009 * _1014;
    float _1017 = _1010 * _1014;
    float _1023 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1024 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1042 = fma(_936, cbSceneParam._m0[5u].z, fma(_935, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _934));
    float _1045 = fma(_936, cbSceneParam._m0[6u].z, fma(_935, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _934));
    float _1048 = fma(_936, cbSceneParam._m0[7u].z, fma(_935, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _934));
    uint _1061 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1062 = _1061 + 9u;
    uint _1063 = _1062 + uint(cbMatDynParam._m0[0u].w);
    float _1069 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_1063].x;
    float _1070 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_1063].y;
    float _1071 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_1063].z;
    float _3981 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1075 = 1.0 - _941;
    float _1076 = _1072 * _1075;
    float _1077 = _1073 * _1075;
    float _1078 = _1074 * _1075;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _941;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _941;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _941;
    float _1086 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    vec4 _1098 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1023, cbSceneParam._m0[86u].y * _1024));
    float _1101 = _1098.x * TEXCOORD_3.w;
    float _1102 = dot(vec3(_934, _935, _936), vec3(_1015, _1016, _1017));
    float _1105 = _1102 * 2.0;
    float _1109 = (_1105 * _934) - _1015;
    float _1110 = (_1105 * _935) - _1016;
    float _1111 = (_1105 * _936) - _1017;
    float _1115 = abs(dot(vec3(_1015, _1016, _1017), vec3(_934, _935, _936)));
    float _4014 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1117 = sqrt(_937);
    float _1128 = exp2((_1117 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1117 * 3.0));
    float _1134 = (1.0 - _1128) * ((_1117 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1135 = _1128 * _1117;
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1197 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1201 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1205 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1229 = _1163 + _934;
        float _1230 = _1167 + _935;
        float _1231 = _1171 + _936;
        float _1241 = fma(_1231, cbModelParam._m0[26u].z, fma(_1230, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1229)) - _1197;
        float _1242 = fma(_1231, cbModelParam._m0[27u].z, fma(_1230, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1229)) - _1201;
        float _1243 = fma(_1231, cbModelParam._m0[28u].z, fma(_1230, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1229)) - _1205;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1259 = ((_1247 * _1241) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1197 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1247 * _1242) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1201 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1243) / cbModelParam._m0[34u].z) + ((((((_1205 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_934, _935, _936), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4062 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_934, _935, _936), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4095 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_934, _935, _936), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4128 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1508 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1512 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1516 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1539 = _1163 + _934;
        float _1540 = _1167 + _935;
        float _1541 = _1171 + _936;
        float _1551 = fma(_1541, cbModelParam._m0[30u].z, fma(_1540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1539)) - _1508;
        float _1552 = fma(_1541, cbModelParam._m0[31u].z, fma(_1540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1539)) - _1512;
        float _1553 = fma(_1541, cbModelParam._m0[32u].z, fma(_1540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1539)) - _1516;
        float _1557 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
        float _1570 = ((_1557 * _1551) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1508 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1557 * _1552) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1512 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1557 * _1553) / cbModelParam._m0[35u].z) + ((((((_1516 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        float _1607 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1574.x + (-0.5));
        float _1609 = _1607 * (_1574.y + (-0.5));
        float _1610 = _1607 * (_1574.z + (-0.5));
        float _1617 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1581.x + (-0.5));
        float _1619 = _1617 * (_1581.y + (-0.5));
        float _1620 = _1617 * (_1581.z + (-0.5));
        float _1627 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1588.x + (-0.5));
        float _1629 = _1627 * (_1588.y + (-0.5));
        float _1630 = _1627 * (_1588.z + (-0.5));
        float _1637 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1595.x + (-0.5));
        float _1639 = _1637 * (_1595.y + (-0.5));
        float _1640 = _1637 * (_1595.z + (-0.5));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = _1608 * 0.5;
        float _1645 = _1618 * 0.5;
        float _1646 = _1628 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_934, _935, _936), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4191 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1671 + 1.0))) + _1676) * _1641;
        float _1686 = _1609 * 0.5;
        float _1687 = _1619 * 0.5;
        float _1688 = _1629 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_934, _935, _936), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4224 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1713 + 1.0))) + _1718) * _1642;
        float _1728 = _1610 * 0.5;
        float _1729 = _1620 * 0.5;
        float _1730 = _1630 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_934, _935, _936), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4257 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1755 + 1.0))) + _1760) * _1643;
        _1777 = _1610;
        _1778 = _1609;
        _1779 = _1608;
        _1780 = _1620;
        _1781 = _1619;
        _1782 = _1618;
        _1783 = _1630;
        _1784 = _1629;
        _1785 = _1628;
        _1786 = _1643;
        _1787 = _1642;
        _1788 = _1641;
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
    }
    else
    {
        _1777 = _1471;
        _1778 = _1471;
        _1779 = _1471;
        _1780 = _1471;
        _1781 = _1471;
        _1782 = _1471;
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = 0.0;
        _1790 = 0.0;
        _1791 = 0.0;
    }
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1483)) + _1483;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1484)) + _1484;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1485)) + _1485;
    float _1824 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1801));
    float _1845 = _1109 * 0.5;
    float _1846 = _1110 * 0.5;
    float _1847 = _1111 * 0.5;
    float _1848 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1851 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1854 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1888;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1861 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1865 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1869 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1876 = dot(vec4(cbModelParam._m0[39u]), vec4(_1845, _1846, _1847, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1876) ? 0.0 : (isnan(0.0) ? _1876 : max(0.0, _1876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1899;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1890 = dot(vec4(cbModelParam._m0[40u]), vec4(_1845, _1846, _1847, 1.0));
        _1899 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1899 = 1.0;
    }
    float _1903 = (_1899 * cbModelParam._m0[1u].x) + (_1888 * (1.0 - cbModelParam._m0[1u].x));
    float _1913 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _937);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1913 : min(cbModelParam._m0[25u].z, _1913));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1961 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _1965 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _1969 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _1972 = fma(_1111, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109));
        float _1975 = fma(_1111, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109));
        float _1978 = fma(_1111, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109));
        float _2006;
        if (_1972 > 0.0)
        {
            _2006 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2006 = frontier_phi_14_12_ladder;
        }
        float _2229;
        if (_1975 > 0.0)
        {
            _2229 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2229 = frontier_phi_23_19_ladder;
        }
        float _2486;
        if (_1978 > 0.0)
        {
            _2486 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2486 = frontier_phi_35_30_ladder;
        }
        float _2488 = isnan(_2229) ? _2006 : (isnan(_2006) ? _2229 : min(_2006, _2229));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1972) + _1961;
        float _2494 = (_2489 * _1975) + _1965;
        float _2495 = (_2489 * _1978) + _1969;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2496;
        float _2500 = _2496 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 > _2500) || ((_2494 < _2498) || ((_2493 < _2498) || (_2493 > _2500))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2495, cbModelParam._m0[9u].z, fma(_2494, cbModelParam._m0[9u].y, _2493 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2495, cbModelParam._m0[10u].z, fma(_2494, cbModelParam._m0[10u].y, _2493 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2495, cbModelParam._m0[11u].z, fma(_2494, cbModelParam._m0[11u].y, _2493 * cbModelParam._m0[11u].x))), _1914);
            frontier_phi_13_35_ladder = _2623.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2623.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2623.x * cbModelParam._m0[1u].y;
        }
        _1994 = frontier_phi_13_35_ladder_2;
        _1996 = frontier_phi_13_35_ladder_1;
        _1998 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1109, _1110, _1111), _1914);
        _1994 = _1982.x * cbModelParam._m0[1u].y;
        _1996 = _1982.y * cbModelParam._m0[1u].y;
        _1998 = _1982.z * cbModelParam._m0[1u].y;
    }
    float _2002 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _937);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2002 : min(cbModelParam._m0[25u].w, _2002));
    float _2092;
    float _2094;
    float _2096;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2056 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2060 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2064 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2067 = fma(_1111, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109));
        float _2070 = fma(_1111, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109));
        float _2073 = fma(_1111, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109));
        float _2234;
        if (_2067 > 0.0)
        {
            _2234 = abs((1.0 - _2056) / _2067);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2056 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2234 = frontier_phi_25_21_ladder;
        }
        float _2513;
        if (_2070 > 0.0)
        {
            _2513 = abs((1.0 - _2060) / _2070);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2060 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2513 = frontier_phi_37_32_ladder;
        }
        float _2726;
        if (_2073 > 0.0)
        {
            _2726 = abs((1.0 - _2064) / _2073);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2064 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2726 = frontier_phi_46_43_ladder;
        }
        float _2728 = isnan(_2513) ? _2234 : (isnan(_2234) ? _2513 : min(_2234, _2513));
        float _2729 = isnan(_2726) ? _2728 : (isnan(_2728) ? _2726 : min(_2728, _2726));
        float _2733 = (_2729 * _2067) + _2056;
        float _2734 = (_2729 * _2070) + _2060;
        float _2735 = (_2729 * _2073) + _2064;
        float _2736 = _2729 * 9.9999997473787516355514526367188e-05;
        float _2737 = (-1.0) - _2736;
        float _2739 = _2736 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2735 > _2739) || ((_2735 < _2737) || ((_2734 > _2739) || ((_2734 < _2737) || ((_2733 < _2737) || (_2733 > _2739))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2735, cbModelParam._m0[17u].z, fma(_2734, cbModelParam._m0[17u].y, _2733 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2735, cbModelParam._m0[18u].z, fma(_2734, cbModelParam._m0[18u].y, _2733 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2735, cbModelParam._m0[19u].z, fma(_2734, cbModelParam._m0[19u].y, _2733 * cbModelParam._m0[19u].x))), _2003);
            frontier_phi_22_46_ladder = _2963.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2963.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2963.x * cbModelParam._m0[1u].z;
        }
        _2092 = frontier_phi_22_46_ladder_2;
        _2094 = frontier_phi_22_46_ladder_1;
        _2096 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1109, _1110, _1111), _2003);
        _2092 = _2076.x * cbModelParam._m0[1u].z;
        _2094 = _2076.y * cbModelParam._m0[1u].z;
        _2096 = _2076.z * cbModelParam._m0[1u].z;
    }
    float _2109 = (((_1134 * _1086) + _1135) * _1101) * ((cbModelParam._m0[1u].w * (_2092 - _1994)) + _1994);
    float _2111 = (((_1134 * _1088) + _1135) * _1101) * ((cbModelParam._m0[1u].w * (_2094 - _1996)) + _1996);
    float _2113 = (((_1134 * _1089) + _1135) * _1101) * ((cbModelParam._m0[1u].w * (_2096 - _1998)) + _1998);
    float _2116 = fma(_2113, cbSceneParam._m0[89u].z, fma(_2111, cbSceneParam._m0[89u].y, _2109 * cbSceneParam._m0[89u].x));
    float _2119 = fma(_2113, cbSceneParam._m0[90u].z, fma(_2111, cbSceneParam._m0[90u].y, _2109 * cbSceneParam._m0[90u].x));
    float _2122 = fma(_2113, cbSceneParam._m0[91u].z, fma(_2111, cbSceneParam._m0[91u].y, _2109 * cbSceneParam._m0[91u].x));
    vec4 _2130 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1023, _1024));
    float _2132 = _2130.w;
    float _2144 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2132);
    float _2145 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2132);
    float _2146 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2132);
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_1061 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _1101 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2188 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2192 = _2152 | 1u;
    float _2203 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_934, _935, _936));
    float _2206 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_934, _935, _936));
    float _4393 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _4404 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2213 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2220 = ((cbLight._m0[_2169].x * _2175) * _2213) + (((cbLight._m0[_2179].x * _2144) * _2188) * _2211);
    float _2221 = ((_2175 * cbLight._m0[_2169].y) * _2213) + (((cbLight._m0[_2179].y * _2145) * _2188) * _2211);
    float _2222 = ((_2175 * cbLight._m0[_2169].z) * _2213) + (((cbLight._m0[_2179].z * _2146) * _2188) * _2211);
    uvec4 _2226 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2228 = _2226.x == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2228)
    {
        _2239 = _2220;
        _2241 = _2221;
        _2243 = _2222;
    }
    else
    {
        uint _2247 = _2152 + 6u;
        float _2263 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_934, _935, _936)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4415 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2266 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2239 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2220;
        _2241 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2221;
        _2243 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2222;
    }
    bool _2246 = _2226.y == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2246)
    {
        _2284 = _2239;
        _2286 = _2241;
        _2288 = _2243;
    }
    else
    {
        uint _2457 = _2152 + 7u;
        float _2473 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_934, _935, _936)) * 0.5) + 0.5;
        float _2474 = _2473 * _2473;
        float _4431 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2475 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2476 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2284 = (((cbLight._m0[_2457].x * 0.3183098733425140380859375) * _2475) * _2476) + _2239;
        _2286 = (((cbLight._m0[_2457].y * 0.3183098733425140380859375) * _2475) * _2476) + _2241;
        _2288 = (((cbLight._m0[_2457].z * 0.3183098733425140380859375) * _2475) * _2476) + _2243;
    }
    uint _2291 = _2152 + 8u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _937) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2152].x + _1015;
    float _2307 = cbLight._m0[_2152].y + _1016;
    float _2308 = cbLight._m0[_2152].z + _1017;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_934, _935, _936), vec3(cbLight._m0[_2152].xyz));
    float _4447 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2320 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2321 = dot(vec3(_934, _935, _936), vec3(_2313, _2314, _2315));
    float _4469 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2313, _2314, _2315));
    float _4480 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2305 * _2305;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2342 = 0.959999978542327880859375 - _1083;
    float _2344 = 0.959999978542327880859375 - _1084;
    float _2345 = 0.959999978542327880859375 - _1085;
    float _2352 = 1.0 - _2305;
    float _2363 = (0.5 / (((_2320 * ((_2319 * _2352) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2352) + _2305) * _2319))) * _2319;
    float _4491 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    uint _2379 = _2152 + 9u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _937) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2192].x + _1015;
    float _2393 = cbLight._m0[_2192].y + _1016;
    float _2394 = cbLight._m0[_2192].z + _1017;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_934, _935, _936), vec3(cbLight._m0[_2192].xyz));
    float _4502 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2406 = dot(vec3(_934, _935, _936), vec3(_2399, _2400, _2401));
    float _4513 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2399, _2400, _2401));
    float _4524 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2391 * _2391;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2432 = 1.0 - _2391;
    float _2442 = (0.5 / (((_2320 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2432) + _2391) * _2405))) * _2405;
    float _4535 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2444 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    float _2454 = (((((_2425 * _2342) + _1086) * cbLight._m0[_2379].x) * _2444) * _2175) + ((((cbLight._m0[_2291].x * _2144) * ((_2341 * _2342) + _1086)) * _2365) * _2188);
    float _2455 = (((((_2425 * _2344) + _1088) * cbLight._m0[_2379].y) * _2444) * _2175) + ((((cbLight._m0[_2291].y * _2145) * ((_2341 * _2344) + _1088)) * _2365) * _2188);
    float _2456 = (((((_2425 * _2345) + _1089) * cbLight._m0[_2379].z) * _2444) * _2175) + ((((cbLight._m0[_2291].z * _2146) * ((_2341 * _2345) + _1089)) * _2365) * _2188);
    float _2518;
    float _2520;
    float _2522;
    if (_2228)
    {
        _2518 = _2454;
        _2520 = _2455;
        _2522 = _2456;
    }
    else
    {
        uint _2524 = _2152 + 2u;
        uint _2528 = _2152 + 10u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _937) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _1015;
        float _2545 = cbLight._m0[_2524].y + _1016;
        float _2546 = cbLight._m0[_2524].z + _1017;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_934, _935, _936), vec3(cbLight._m0[_2524].xyz));
        float _4546 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2558 = dot(vec3(_934, _935, _936), vec3(_2551, _2552, _2553));
        float _4557 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4568 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
        float _2584 = 1.0 - _2543;
        float _2594 = (0.5 / (((_2320 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2584) + _2543) * _2557))) * _2557;
        float _4579 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2518 = (((((_2577 * _2342) + _1086) * cbLight._m0[_2528].x) * _2596) * _2597) + _2454;
        _2520 = (((((_2577 * _2344) + _1088) * cbLight._m0[_2528].y) * _2596) * _2597) + _2455;
        _2522 = (((((_2577 * _2345) + _1089) * cbLight._m0[_2528].z) * _2596) * _2597) + _2456;
    }
    float _2632;
    float _2634;
    float _2636;
    if (_2246)
    {
        _2632 = _2518;
        _2634 = _2520;
        _2636 = _2522;
    }
    else
    {
        uint _2643 = _2152 + 3u;
        uint _2647 = _2152 + 11u;
        float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2643].w)) * _937) * 0.949999988079071044921875);
        float _2662 = _2661 * _2661;
        float _2663 = cbLight._m0[_2643].x + _1015;
        float _2664 = cbLight._m0[_2643].y + _1016;
        float _2665 = cbLight._m0[_2643].z + _1017;
        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
        float _2670 = _2669 * _2663;
        float _2671 = _2669 * _2664;
        float _2672 = _2669 * _2665;
        float _2673 = dot(vec3(_934, _935, _936), vec3(cbLight._m0[_2643].xyz));
        float _4595 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2677 = dot(vec3(_934, _935, _936), vec3(_2670, _2671, _2672));
        float _4606 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2681 = dot(vec3(cbLight._m0[_2643].xyz), vec3(_2670, _2671, _2672));
        float _4617 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2685 = _2662 * _2662;
        float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
        float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
        float _2703 = 1.0 - _2662;
        float _2713 = (0.5 / (((_2320 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2703) + _2662) * _2676))) * _2676;
        float _4628 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2632 = (((((_2696 * _2342) + _1086) * cbLight._m0[_2647].x) * _2715) * _2716) + _2518;
        _2634 = (((((_2696 * _2344) + _1088) * cbLight._m0[_2647].y) * _2715) * _2716) + _2520;
        _2636 = (((((_2696 * _2345) + _1089) * cbLight._m0[_2647].z) * _2715) * _2716) + _2522;
    }
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_2150.y == 0u)
    {
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2791;
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2791;
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2791;
        uvec4 _2806 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2807 = _2806.x;
        uint _2818 = uint((float(_2806.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1024) / _2807))) + floor(float(uint(cbSceneParam._m0[85u].x * _1023) / _2807)));
        float _2828 = (log2(_2794 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2829 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        uint _2832 = uint(isnan(14.0) ? _2829 : (isnan(_2829) ? 14.0 : min(_2829, 14.0)));
        uvec4 _2837 = texelFetch(g_lightClusterGridBuffer, int(((_2832 << 2u) + (_2818 << 6u)) >> 2u));
        uint _2838 = _2837.x;
        uint _2839 = _2806.z;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((((1u << ((_2839 >> 4u) & 15u)) + 4294967295u) & _2838) == 0u) || ((_2839 & 240u) == 0u))
        {
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
        }
        else
        {
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            uint _3127 = 0u;
            uint _3136;
            bool _3137;
            for (;;)
            {
                _3136 = texelFetch(g_lightClassification, int((((_2832 << 5u) + (_2818 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                _3137 = _3136 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3137)
                {
                    frontier_phi_61_pred = _3121;
                    frontier_phi_61_pred_1 = _3126;
                    frontier_phi_61_pred_2 = _3125;
                    frontier_phi_61_pred_3 = _3124;
                    frontier_phi_61_pred_4 = _3123;
                    frontier_phi_61_pred_5 = _3122;
                }
                else
                {
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    uint _3251;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3136;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    for (;;)
                    {
                        uint _3255 = uint(findLSB(_3251)) + (_3127 << 5u);
                        uint _3252 = (_3251 + 4294967295u) & _3251;
                        uint _3257 = _3255 * 48u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3277 = (_3255 * 48u) + 4u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3296 = (_3255 * 48u) + 8u;
                        vec3 _3307 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x));
                        float _3311 = _3271.x - _2792;
                        float _3312 = _3271.y - _2793;
                        float _3313 = _3271.z - _2794;
                        float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                        float _3317 = inversesqrt(_3314);
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3321 = dot(vec3(_1042, _1045, _1048), vec3(_3318, _3319, _3320));
                        float _3326 = 1.0 - (_3314 * _3271.w);
                        float _4654 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3328 = sqrt(_3314) * _3290.w;
                        float _3331 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3321) + _3332;
                        float _3338 = _3328 * _3328;
                        float _3342 = ((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3327) / ((_3338 * 0.699999988079071044921875) + 1.0);
                        float _3346 = (-0.0) - _2792;
                        float _3347 = (-0.0) - _2793;
                        float _3348 = (-0.0) - _2794;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3363 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                        float _3364 = 1.0 - _1117;
                        float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                        float _3372 = _3371 * _3371;
                        float _3373 = _3372 * _3372;
                        float _3374 = _3353 + _3318;
                        float _3375 = _3354 + _3319;
                        float _3376 = _3355 + _3320;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3384 = dot(vec3(_1042, _1045, _1048), vec3(_3353, _3354, _3355));
                        float _4670 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3388 = dot(vec3(_1042, _1045, _1048), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                        float _4681 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                        float _3396 = _3331 * _3372;
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3321) + _3397;
                        float _4692 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3402 = 1.0 - _3372;
                        float _3412 = (0.5 / (((_3401 * ((_3387 * _3402) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3372) * _3387))) * _3401;
                        float _4703 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3423 = (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3395 * _3395) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125))) * _3327;
                        _3180 = (_3342 * _3290.x) + _3248;
                        _3181 = (_3342 * _3290.y) + _3249;
                        _3182 = (_3342 * _3290.z) + _3250;
                        _3177 = (_3423 * _3307.x) + _3245;
                        _3178 = (_3423 * _3307.y) + _3246;
                        _3179 = (_3423 * _3307.z) + _3247;
                        if (_3252 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3252;
                        }
                    }
                    frontier_phi_61_pred = _3177;
                    frontier_phi_61_pred_1 = _3182;
                    frontier_phi_61_pred_2 = _3181;
                    frontier_phi_61_pred_3 = _3180;
                    frontier_phi_61_pred_4 = _3179;
                    frontier_phi_61_pred_5 = _3178;
                }
                _2969 = frontier_phi_61_pred;
                _2979 = frontier_phi_61_pred_1;
                _2977 = frontier_phi_61_pred_2;
                _2975 = frontier_phi_61_pred_3;
                _2973 = frontier_phi_61_pred_4;
                _2971 = frontier_phi_61_pred_5;
                uint _3128 = _3127 + 1u;
                if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3121 = _2969;
                    _3122 = _2971;
                    _3123 = _2973;
                    _3124 = _2975;
                    _3125 = _2977;
                    _3126 = _2979;
                    _3127 = _3128;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
        }
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.z;
        uint _2985 = (_2983 >> 8u) & 15u;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((4294967295u << _2985) & _2838) == 0u)
        {
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
        }
        else
        {
            float _3114 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
            float _3115 = _3114 * _2792;
            float _3116 = _3114 * _2793;
            float _3117 = _3114 * _2794;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2985 < ((_2983 >> 12u) & 15u))
            {
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3228 = _2968;
                float _3229 = _2970;
                float _3230 = _2972;
                float _3231 = _2974;
                float _3232 = _2976;
                float _3233 = _2978;
                uint _3234 = _2985;
                uint _3243;
                bool _3244;
                for (;;)
                {
                    _3243 = texelFetch(g_lightClassification, int((((_2832 << 5u) + (_2818 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                    _3244 = _3243 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3244)
                    {
                        frontier_phi_67_pred = _3231;
                        frontier_phi_67_pred_1 = _3232;
                        frontier_phi_67_pred_2 = _3233;
                        frontier_phi_67_pred_3 = _3230;
                        frontier_phi_67_pred_4 = _3229;
                        frontier_phi_67_pred_5 = _3228;
                    }
                    else
                    {
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3441 = _3228;
                        float _3442 = _3229;
                        float _3443 = _3230;
                        float _3444 = _3231;
                        float _3445 = _3232;
                        float _3446 = _3233;
                        uint _3447 = _3243;
                        uint _3448;
                        vec4 _3473;
                        float _3474;
                        vec4 _3489;
                        vec3 _3501;
                        vec4 _3516;
                        vec4 _3531;
                        float _3577;
                        bool _3578;
                        for (;;)
                        {
                            uint _3458 = ((_3234 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3447));
                            _3448 = (_3447 + 4294967295u) & _3447;
                            uint _3460 = _3458 * 40u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3474 = _3473.w;
                            uint _3476 = (_3458 * 40u) + 4u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3458 * 40u) + 8u;
                            _3501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x));
                            uint _3503 = (_3458 * 40u) + 16u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3458 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3458 * 40u) + 24u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3552 = (_3458 * 40u) + 28u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3577 = fma(_2794, _3565.z, fma(_2793, _3565.y, _3565.x * _2792)) + _3565.w;
                            _3578 = !((fma(_2794, _3546.z, fma(_2793, _3546.y, _3546.x * _2792)) + _3546.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3578)
                            {
                                float _3605 = _3473.x - _2792;
                                float _3606 = _3473.y - _2793;
                                float _3607 = _3473.z - _2794;
                                float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                                float _3611 = inversesqrt(_3608);
                                float _3612 = _3611 * _3605;
                                float _3613 = _3611 * _3606;
                                float _3614 = _3611 * _3607;
                                float _3618 = 1.0 - (_3608 / (_3474 * _3474));
                                float _4714 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3623 = sqrt(_3608) * _3489.w;
                                float _3625 = 1.39999997615814208984375 / (_3623 + 1.39999997615814208984375);
                                float _3626 = _3625 * _3625;
                                float _3629 = ((1.0 - _3626) * dot(vec3(_3612, _3613, _3614), vec3(_1042, _1045, _1048))) + _3626;
                                float _3632 = _3623 * _3623;
                                float _3636 = (fma(_2794, _3516.z, fma(_2793, _3516.y, _3516.x * _2792)) + _3516.w) / _3577;
                                float _3637 = (fma(_2794, _3531.z, fma(_2793, _3531.y, _3531.x * _2792)) + _3531.w) / _3577;
                                float _3641 = 1.0 - dot(vec2(_3636, _3637), vec2(_3636, _3637));
                                float _4730 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3643 = _3642 * (((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3619) / ((_3632 * 0.699999988079071044921875) + 1.0));
                                float _3655 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _1117;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3612 - _3115;
                                float _3667 = _3613 - _3116;
                                float _3668 = _3614 - _3117;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_1042, _1045, _1048), vec3((-0.0) - _3115, (-0.0) - _3116, (-0.0) - _3117));
                                float _4741 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3680 = dot(vec3(_1042, _1045, _1048), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4752 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = _3625 * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_1042, _1045, _1048), vec3(_3612, _3613, _3614))) + _3689;
                                float _4763 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4774 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = (_3642 * _3619) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3687 * _3687) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3717 * _3501.x;
                                frontier_phi_73_pred_1 = _3717 * _3501.y;
                                frontier_phi_73_pred_2 = _3643 * _3489.z;
                                frontier_phi_73_pred_3 = _3643 * _3489.y;
                                frontier_phi_73_pred_4 = _3643 * _3489.x;
                                frontier_phi_73_pred_5 = _3717 * _3501.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3721 = frontier_phi_73_pred;
                            _3722 = frontier_phi_73_pred_1;
                            _3726 = frontier_phi_73_pred_2;
                            _3725 = frontier_phi_73_pred_3;
                            _3724 = frontier_phi_73_pred_4;
                            _3723 = frontier_phi_73_pred_5;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            if (_3448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3448;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3431;
                        frontier_phi_67_pred_1 = _3432;
                        frontier_phi_67_pred_2 = _3433;
                        frontier_phi_67_pred_3 = _3430;
                        frontier_phi_67_pred_4 = _3429;
                        frontier_phi_67_pred_5 = _3428;
                    }
                    _3096 = frontier_phi_67_pred;
                    _3098 = frontier_phi_67_pred_1;
                    _3100 = frontier_phi_67_pred_2;
                    _3094 = frontier_phi_67_pred_3;
                    _3092 = frontier_phi_67_pred_4;
                    _3090 = frontier_phi_67_pred_5;
                    uint _3235 = _3234 + 1u;
                    if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3228 = _3090;
                        _3229 = _3092;
                        _3230 = _3094;
                        _3231 = _3096;
                        _3232 = _3098;
                        _3233 = _3100;
                        _3234 = _3235;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3098;
                frontier_phi_55_56_ladder_1 = _3100;
                frontier_phi_55_56_ladder_2 = _3096;
                frontier_phi_55_56_ladder_3 = _3094;
                frontier_phi_55_56_ladder_4 = _3092;
                frontier_phi_55_56_ladder_5 = _3090;
            }
            else
            {
                frontier_phi_55_56_ladder = _2976;
                frontier_phi_55_56_ladder_1 = _2978;
                frontier_phi_55_56_ladder_2 = _2974;
                frontier_phi_55_56_ladder_3 = _2972;
                frontier_phi_55_56_ladder_4 = _2970;
                frontier_phi_55_56_ladder_5 = _2968;
            }
            _3089 = frontier_phi_55_56_ladder_5;
            _3091 = frontier_phi_55_56_ladder_4;
            _3093 = frontier_phi_55_56_ladder_3;
            _3095 = frontier_phi_55_56_ladder_2;
            _3097 = frontier_phi_55_56_ladder;
            _3099 = frontier_phi_55_56_ladder_1;
        }
        float _3104 = isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0));
        _2851 = (_3104 * _3095) + _2284;
        _2853 = (_3104 * _3097) + _2286;
        _2855 = (_3104 * _3099) + _2288;
        _2857 = ((_3089 * _1086) * _3104) + _2632;
        _2859 = ((_3091 * _1088) * _3104) + _2634;
        _2861 = ((_3093 * _1089) * _3104) + _2636;
    }
    else
    {
        _2851 = _2284;
        _2853 = _2286;
        _2855 = _2288;
        _2857 = _2632;
        _2859 = _2634;
        _2861 = _2636;
    }
    uint _2867 = _1062 + uint(cbMatDynParam._m0[0u].w);
    float _2873 = ((((((_859.x - _854.x) * _837) + _854.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _783) * cbMtdParam._m0[20u].x)) * _792) * cbInstanceData._m0[_2867].x;
    float _2874 = ((((((_859.y - _854.y) * _837) + _854.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_772.y - _770) * _751) + _770)) * cbMtdParam._m0[20u].y)) * _792) * cbInstanceData._m0[_2867].y;
    float _2875 = ((((((_859.z - _854.z) * _837) + _854.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_772.z - _771) * _751) + _771)) * cbMtdParam._m0[20u].z)) * _792) * cbInstanceData._m0[_2867].z;
    float _4790 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4801 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4812 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2892 = (((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2851 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1101))) + ((_2857 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1903)) * cbPerFrame._m0[3u].x)) + _2873;
    float _2894 = (_2874 + ((_2859 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1903)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2853 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1101)));
    float _2896 = (_2875 + ((_2861 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1903)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2855 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1101)));
    float _4838 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2909 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    uint _2910 = _1061 + 6u;
    float _2918 = _1023 / cbSceneParam._m0[86u].x;
    float _2919 = _1024 / cbSceneParam._m0[86u].y;
    vec4 _2933 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2918, _2919, (log2((isnan(cbSceneParam._m0[77u].w) ? _957 : (isnan(_957) ? cbSceneParam._m0[77u].w : min(_957, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2935 = _2933.x;
    float _2936 = _2933.y;
    float _2937 = _2933.z;
    float _2938 = _2933.w;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_957 > cbSceneParam._m0[78u].w)
    {
        float _2993 = isnan(_957) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _957 : min(cbSceneParam._m0[80u].w, _957));
        float _2994 = _2993 / _957;
        float _3005 = _2994 * _1008;
        float _3006 = _1009 * _2994;
        float _3007 = (-0.0) - _3006;
        float _3008 = _2994 * _1010;
        float _3010 = (cbSceneParam._m0[77u].w * _3007) / _2993;
        float _3011 = _3010 + cbSceneParam._m0[79u].w;
        float _3012 = cbSceneParam._m0[79u].w - _3006;
        float _3018 = sqrt(((_3005 * _3005) + (_3006 * _3006)) + (_3008 * _3008));
        float _3021 = (1.0 - (cbSceneParam._m0[77u].w / _2993)) * _3018;
        float _3026 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3028 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3190;
        if (abs((_3007 - _3010) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3190 = ((((_3011 > 0.0) ? exp2(_3026 * _3011) : (2.0 - exp2(_3028 * _3011))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3021;
        }
        else
        {
            float _3150 = 1.0 / cbSceneParam._m0[80u].x;
            float _3151 = isnan(_3012) ? _3011 : (isnan(_3011) ? _3012 : max(_3011, _3012));
            float _3152 = isnan(_3012) ? _3011 : (isnan(_3011) ? _3012 : min(_3011, _3012));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            _3190 = ((abs(_3018 / _3007) * cbSceneParam._m0[80u].y) * ((((_3161 - _3162) * 2.0) - ((exp2(_3026 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0)))) - exp2(_3026 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))))) * _3150)) - ((exp2(_3028 * _3161) - exp2(_3028 * _3162)) * _3150))) + (_3021 * cbSceneParam._m0[80u].z);
        }
        vec4 _3192 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2918, _2919, 1.0), 0.0);
        float _3201 = exp2((_3190 * (-1.44269502162933349609375)) * (1.0 - _3192.w));
        float _3202 = log2(_3201);
        float _3218 = log2(_2938);
        _3030 = (exp2(_3218 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].x)) * _3192.x) / cbSceneParam._m0[78u].x)) + _2935;
        _3032 = (exp2(_3218 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].y)) * _3192.y) / cbSceneParam._m0[78u].y)) + _2936;
        _3034 = (exp2(_3218 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].z)) * _3192.z) / cbSceneParam._m0[78u].z)) + _2937;
        _3036 = _3201 * _2938;
    }
    else
    {
        _3030 = _2935;
        _3032 = _2936;
        _3034 = _2937;
        _3036 = _2938;
    }
    float _3048 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3049 = _3048 == 3.0;
    float _3050 = log2(_3036);
    float _3054 = exp2(_3050 * cbSceneParam._m0[78u].x);
    float _3055 = exp2(_3050 * cbSceneParam._m0[78u].y);
    float _3056 = exp2(_3050 * cbSceneParam._m0[78u].z);
    float _3057 = _3054 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0)));
    float _3058 = _3055 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)));
    float _3059 = _3056 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)));
    float _3068 = (_3048 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3068 * (_3049 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3030)));
    SV_Target.y = _3068 * (_3049 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.z = _3068 * (_3049 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3034)));
    SV_Target.w = cbInstanceData._m0[_2910].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2873) * _2909) * _3054) * _3068;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2874) * _2909) * _3055) * _3068;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2875) * _2909) * _3056) * _3068;
    SV_Target_1.w = cbInstanceData._m0[_2910].w;
}


