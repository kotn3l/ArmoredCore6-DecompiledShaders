#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1476;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _259 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _273 = exp2(log2(_259.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _274 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _275 = isnan(1.0) ? _274 : (isnan(_274) ? 1.0 : min(_274, 1.0));
    vec4 _289 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _293 = _289.z;
    float _301 = exp2(log2(_293 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _315 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _318 = _315.y;
    float _321 = (_315.x + (-0.02500000037252902984619140625)) * 8.0;
    float _325 = roundEven(5.0 - _321);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(4.0) ? _326 : (isnan(_326) ? 4.0 : min(_326, 4.0));
    float _340 = floor(_327);
    vec4 _343 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _340));
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[17u].x;
    _190[0u] = cbMtdParam._m0[17u].y;
    _191[0u] = cbMtdParam._m0[17u].z;
    _189[1u] = cbMtdParam._m0[15u].x;
    _190[1u] = cbMtdParam._m0[15u].y;
    _191[1u] = cbMtdParam._m0[15u].z;
    _189[2u] = cbMtdParam._m0[14u].x;
    _190[2u] = cbMtdParam._m0[14u].y;
    _191[2u] = cbMtdParam._m0[14u].z;
    _189[3u] = cbMtdParam._m0[13u].x;
    _190[3u] = cbMtdParam._m0[13u].y;
    _191[3u] = cbMtdParam._m0[13u].z;
    _189[4u] = cbMtdParam._m0[12u].x;
    _190[4u] = cbMtdParam._m0[12u].y;
    _191[4u] = cbMtdParam._m0[12u].z;
    _189[5u] = cbMtdParam._m0[18u].x;
    _190[5u] = cbMtdParam._m0[18u].y;
    _191[5u] = cbMtdParam._m0[18u].z;
    float _407 = roundEven(_321);
    float _408 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    uint _410 = uint(int(isnan(5.0) ? _408 : (isnan(_408) ? 5.0 : min(_408, 5.0))));
    vec4 _440 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _451 = cbMtdParam._m0[9u].x * _440.x;
    float _452 = cbMtdParam._m0[9u].y * _440.y;
    float _453 = cbMtdParam._m0[9u].z * _440.z;
    float _460 = ((((((_189[_410] - cbMtdParam._m0[10u].x) * _318) + cbMtdParam._m0[10u].x) * _343.x) - _451) * _303) + _451;
    float _461 = ((((((_190[_410] - cbMtdParam._m0[10u].y) * _318) + cbMtdParam._m0[10u].y) * _343.y) - _452) * _303) + _452;
    float _462 = ((((((_191[_410] - cbMtdParam._m0[10u].z) * _318) + cbMtdParam._m0[10u].z) * _343.z) - _453) * _303) + _453;
    float _468 = exp2(log2(_289.w) * cbMtdParam._m0[24u].w);
    vec4 _481 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _501 = (((cbMtdParam._m0[16u].x * _481.x) - _460) * _468) + _460;
    float _502 = (((cbMtdParam._m0[16u].y * _481.y) - _461) * _468) + _461;
    float _503 = (((cbMtdParam._m0[16u].z * _481.z) - _462) * _468) + _462;
    vec4 _515 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _540 = (_259.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _515.x) - _501) * _275) + _501);
    float _542 = (_259.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _515.y) - _502) * _275) + _502);
    float _544 = (_259.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _515.z) - _503) * _275) + _503);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[30u].z;
    _185[0u] = cbMtdParam._m0[30u].w;
    _184[1u] = cbMtdParam._m0[32u].z;
    _185[1u] = cbMtdParam._m0[32u].w;
    _184[2u] = cbMtdParam._m0[32u].x;
    _185[2u] = cbMtdParam._m0[32u].y;
    _184[3u] = cbMtdParam._m0[31u].z;
    _185[3u] = cbMtdParam._m0[31u].w;
    _184[4u] = cbMtdParam._m0[31u].x;
    _185[4u] = cbMtdParam._m0[31u].y;
    float _580 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    uint _582 = uint(int(isnan(4.0) ? _580 : (isnan(_580) ? 4.0 : min(_580, 4.0))));
    float _589 = ((_185[_582] - cbMtdParam._m0[23u].z) * _303) + cbMtdParam._m0[23u].z;
    float _592 = ((cbMtdParam._m0[23u].w - _589) * _468) + _589;
    float _595 = ((cbMtdParam._m0[26u].y - _592) * _275) + _592;
    vec4 _610 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _340));
    vec4 _627 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _635 = cbMtdParam._m0[23u].x + _627.z;
    float _638 = (((_610.z + _184[_582]) - _635) * _303) + _635;
    vec4 _650 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _661 = (((_650.z - _638) + cbMtdParam._m0[30u].x) * _468) + _638;
    float _667 = ((((_293 * 2.0) * _661) - _661) * cbMtdParam._m0[25u].w) + _661;
    vec4 _679 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _690 = (((cbMtdParam._m0[24u].z + _679.z) - _667) * _275) + _667;
    float _703 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _726 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_703 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _703) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _730 = cbPerFrame._m0[22u].x * 2.0;
    float _731 = _730 * cbMtdParam._m0[28u].z;
    float _734 = (_726.x * 0.5) + (-0.25);
    float _737 = (_726.y * 0.5) + (-0.25);
    float _738 = _737 * cbMtdParam._m0[28u].y;
    float _740 = (-0.0) - (cbMtdParam._m0[28u].y * _734);
    float _742 = fract(_731);
    float _744 = fract(_731 + 0.5);
    float _756 = abs((_742 * 2.0) + (-1.0));
    vec4 _772 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_742 * _740) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_738 * _742) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _774 = _772.x;
    float _775 = _772.y;
    float _776 = _772.z;
    vec4 _777 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_744 * _740) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_738 * _744) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _788 = ((_777.x - _774) * _756) + _774;
    float _795 = exp2(log2(_788 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _796 = isnan(cbMtdParam._m0[29u].y) ? _795 : (isnan(_795) ? cbMtdParam._m0[29u].y : max(_795, cbMtdParam._m0[29u].y));
    float _797 = isnan(cbMtdParam._m0[29u].z) ? _796 : (isnan(_796) ? cbMtdParam._m0[29u].z : min(_796, cbMtdParam._m0[29u].z));
    float _821 = (cbMtdParam._m0[33u].x * _703) + TEXCOORD;
    float _822 = (cbMtdParam._m0[33u].y * _703) + TEXCOORD_1;
    float _825 = _730 * cbMtdParam._m0[27u].w;
    float _826 = _737 * cbMtdParam._m0[27u].z;
    float _828 = (-0.0) - (cbMtdParam._m0[27u].z * _734);
    float _829 = fract(_825);
    float _831 = fract(_825 + 0.5);
    float _842 = abs((_829 * 2.0) + (-1.0));
    vec4 _859 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_829 * _828) + _821) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_826 * _829) + _822) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _864 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_831 * _828) + _821) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_826 * _831) + _822) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _898 = ((_610.x - _629) * _303) + _629;
    float _899 = ((_610.y - _630) * _303) + _630;
    float _904 = ((_650.x - _898) * _468) + _898;
    float _905 = ((_650.y - _899) * _468) + _899;
    float _914 = ((((_679.x - _904) * _275) + _904) * 2.0) + (-1.0);
    float _915 = ((((_679.y - _905) * _275) + _905) * 2.0) + (-1.0);
    float _916 = dot(vec2(_914, _915), vec2(_914, _915));
    float _3920 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _921 = sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
    float _924 = (cbMtdParam._m0[26u].z * ((_289.x * 2.0) + (-1.0))) + _914;
    float _925 = (cbMtdParam._m0[26u].z * ((_289.y * 2.0) + (-1.0))) + _915;
    float _928 = fma(_921, _231 * NORMAL.x, fma(_925, _238 * TANGENT.x, (_224 * _216) * _924));
    float _931 = fma(_921, _231 * NORMAL.y, fma(_925, _238 * TANGENT.y, (_224 * _217) * _924));
    float _934 = fma(_921, _231 * NORMAL.z, fma(_925, _238 * TANGENT.z, (_224 * _218) * _924));
    float _938 = inversesqrt(dot(vec3(_928, _931, _934), vec3(_928, _931, _934)));
    float _939 = _938 * _928;
    float _940 = _938 * _931;
    float _941 = _938 * _934;
    float _3931 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _942 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3953 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3964 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3975 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _946 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _962 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_941, cbSceneParam._m0[5u].z, fma(_940, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _939));
    float _1050 = fma(_941, cbSceneParam._m0[6u].z, fma(_940, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _939));
    float _1053 = fma(_941, cbSceneParam._m0[7u].z, fma(_940, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _939));
    uint _1066 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1067 = _1066 + 9u;
    uint _1068 = _1067 + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _3986 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1080 = 1.0 - _946;
    float _1081 = _1077 * _1080;
    float _1082 = _1078 * _1080;
    float _1083 = _1079 * _1080;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _946;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _946;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _946;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1106 = _1103.x * TEXCOORD_3.w;
    float _1107 = dot(vec3(_939, _940, _941), vec3(_1020, _1021, _1022));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _939) - _1020;
    float _1115 = (_1110 * _940) - _1021;
    float _1116 = (_1110 * _941) - _1022;
    float _1120 = abs(dot(vec3(_1020, _1021, _1022), vec3(_939, _940, _941)));
    float _4019 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_942);
    float _1133 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1139 = (1.0 - _1133) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1140 = _1133 * _1122;
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1206 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1210 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1234 = _1168 + _939;
        float _1235 = _1172 + _940;
        float _1236 = _1176 + _941;
        float _1246 = fma(_1236, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1234)) - _1202;
        float _1247 = fma(_1236, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1234)) - _1206;
        float _1248 = fma(_1236, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1234)) - _1210;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1264 = ((_1252 * _1246) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1252 * _1247) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1248) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_939, _940, _941), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4067 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_939, _940, _941), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4100 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_939, _940, _941), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4133 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1517 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1521 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1544 = _1168 + _939;
        float _1545 = _1172 + _940;
        float _1546 = _1176 + _941;
        float _1556 = fma(_1546, cbModelParam._m0[30u].z, fma(_1545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1544)) - _1513;
        float _1557 = fma(_1546, cbModelParam._m0[31u].z, fma(_1545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1544)) - _1517;
        float _1558 = fma(_1546, cbModelParam._m0[32u].z, fma(_1545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1544)) - _1521;
        float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
        float _1575 = ((_1562 * _1556) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1562 * _1557) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1562 * _1558) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_939, _940, _941), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4196 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_939, _940, _941), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4229 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_939, _940, _941), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4262 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1476;
        _1783 = _1476;
        _1784 = _1476;
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1488)) + _1488;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1489)) + _1489;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1490)) + _1490;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1850 = _1114 * 0.5;
    float _1851 = _1115 * 0.5;
    float _1852 = _1116 * 0.5;
    float _1853 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1856 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1859 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1893;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1866 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1870 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1874 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1881 = dot(vec4(cbModelParam._m0[39u]), vec4(_1850, _1851, _1852, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1904;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1895 = dot(vec4(cbModelParam._m0[40u]), vec4(_1850, _1851, _1852, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1908 = (_1904 * cbModelParam._m0[1u].x) + (_1893 * (1.0 - cbModelParam._m0[1u].x));
    float _1918 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _942);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1918 : min(cbModelParam._m0[25u].z, _1918));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1966 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _1970 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _1974 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _1977 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _1980 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _1983 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2011;
        if (_1977 > 0.0)
        {
            _2011 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2011 = frontier_phi_14_12_ladder;
        }
        float _2234;
        if (_1980 > 0.0)
        {
            _2234 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2234 = frontier_phi_23_19_ladder;
        }
        float _2491;
        if (_1983 > 0.0)
        {
            _2491 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2491 = frontier_phi_35_30_ladder;
        }
        float _2493 = isnan(_2234) ? _2011 : (isnan(_2011) ? _2234 : min(_2011, _2234));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1977) + _1966;
        float _2499 = (_2494 * _1980) + _1970;
        float _2500 = (_2494 * _1983) + _1974;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2501;
        float _2505 = _2501 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 > _2505) || ((_2499 < _2503) || ((_2498 < _2503) || (_2498 > _2505))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2500, cbModelParam._m0[9u].z, fma(_2499, cbModelParam._m0[9u].y, _2498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2500, cbModelParam._m0[10u].z, fma(_2499, cbModelParam._m0[10u].y, _2498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2500, cbModelParam._m0[11u].z, fma(_2499, cbModelParam._m0[11u].y, _2498 * cbModelParam._m0[11u].x))), _1919);
            frontier_phi_13_35_ladder = _2628.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2628.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2628.x * cbModelParam._m0[1u].y;
        }
        _1999 = frontier_phi_13_35_ladder_2;
        _2001 = frontier_phi_13_35_ladder_1;
        _2003 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1919);
        _1999 = _1987.x * cbModelParam._m0[1u].y;
        _2001 = _1987.y * cbModelParam._m0[1u].y;
        _2003 = _1987.z * cbModelParam._m0[1u].y;
    }
    float _2007 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _942);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2007 : min(cbModelParam._m0[25u].w, _2007));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2061 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2065 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2069 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2072 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2075 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2078 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2239;
        if (_2072 > 0.0)
        {
            _2239 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2239 = frontier_phi_25_21_ladder;
        }
        float _2518;
        if (_2075 > 0.0)
        {
            _2518 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2518 = frontier_phi_37_32_ladder;
        }
        float _2731;
        if (_2078 > 0.0)
        {
            _2731 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2731 = frontier_phi_46_43_ladder;
        }
        float _2733 = isnan(_2518) ? _2239 : (isnan(_2239) ? _2518 : min(_2239, _2518));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _2072) + _2061;
        float _2739 = (_2734 * _2075) + _2065;
        float _2740 = (_2734 * _2078) + _2069;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _2008);
            frontier_phi_22_46_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2097 = frontier_phi_22_46_ladder_2;
        _2099 = frontier_phi_22_46_ladder_1;
        _2101 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2008);
        _2097 = _2081.x * cbModelParam._m0[1u].z;
        _2099 = _2081.y * cbModelParam._m0[1u].z;
        _2101 = _2081.z * cbModelParam._m0[1u].z;
    }
    float _2114 = (((_1139 * _1091) + _1140) * _1106) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1139 * _1093) + _1140) * _1106) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2118 = (((_1139 * _1094) + _1140) * _1106) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2114 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2114 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2114 * cbSceneParam._m0[91u].x));
    vec4 _2135 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1028, _1029));
    float _2137 = _2135.w;
    float _2149 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2137);
    float _2150 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2137);
    float _2151 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2137);
    uvec4 _2155 = floatBitsToUint(cbInstanceData._m0[_1066 + 5u]);
    uint _2157 = _2155.x * 14u;
    uint _2158 = _2157 + 13u;
    float _2165 = _1106 + (-1.0);
    float _2170 = (cbLight._m0[_2158].x * _2165) + 1.0;
    float _2171 = (cbLight._m0[_2158].y * _2165) + 1.0;
    float _2172 = (cbLight._m0[_2158].z * _2165) + 1.0;
    float _2173 = (cbLight._m0[_2158].w * _2165) + 1.0;
    uint _2174 = _2157 + 5u;
    float _2180 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2184 = _2157 + 4u;
    float _2193 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2197 = _2157 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_939, _940, _941));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_939, _940, _941));
    float _4398 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4409 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2174].x * _2180) * _2218) + (((cbLight._m0[_2184].x * _2149) * _2193) * _2216);
    float _2226 = ((_2180 * cbLight._m0[_2174].y) * _2218) + (((cbLight._m0[_2184].y * _2150) * _2193) * _2216);
    float _2227 = ((_2180 * cbLight._m0[_2174].z) * _2218) + (((cbLight._m0[_2184].z * _2151) * _2193) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2157 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2233)
    {
        _2244 = _2225;
        _2246 = _2226;
        _2248 = _2227;
    }
    else
    {
        uint _2252 = _2157 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2157 + 2u].xyz), vec3(_939, _940, _941)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4420 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2271 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2225;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2226;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2227;
    }
    bool _2251 = _2231.y == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2251)
    {
        _2289 = _2244;
        _2291 = _2246;
        _2293 = _2248;
    }
    else
    {
        uint _2462 = _2157 + 7u;
        float _2478 = (dot(vec3(cbLight._m0[_2157 + 3u].xyz), vec3(_939, _940, _941)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4436 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2481 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2289 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2244;
        _2291 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2246;
        _2293 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2248;
    }
    uint _2296 = _2157 + 8u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _942) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2157].x + _1020;
    float _2312 = cbLight._m0[_2157].y + _1021;
    float _2313 = cbLight._m0[_2157].z + _1022;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2157].xyz));
    float _4452 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2325 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2326 = dot(vec3(_939, _940, _941), vec3(_2318, _2319, _2320));
    float _4474 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2318, _2319, _2320));
    float _4485 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2310 * _2310;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2347 = 0.959999978542327880859375 - _1088;
    float _2349 = 0.959999978542327880859375 - _1089;
    float _2350 = 0.959999978542327880859375 - _1090;
    float _2357 = 1.0 - _2310;
    float _2368 = (0.5 / (((_2325 * ((_2324 * _2357) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2357) + _2310) * _2324))) * _2324;
    float _4496 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    uint _2384 = _2157 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _942) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2197].x + _1020;
    float _2398 = cbLight._m0[_2197].y + _1021;
    float _2399 = cbLight._m0[_2197].z + _1022;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2197].xyz));
    float _4507 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2411 = dot(vec3(_939, _940, _941), vec3(_2404, _2405, _2406));
    float _4518 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2404, _2405, _2406));
    float _4529 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2437 = 1.0 - _2396;
    float _2447 = (0.5 / (((_2325 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2437) + _2396) * _2410))) * _2410;
    float _4540 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2459 = (((((_2430 * _2347) + _1091) * cbLight._m0[_2384].x) * _2449) * _2180) + ((((cbLight._m0[_2296].x * _2149) * ((_2346 * _2347) + _1091)) * _2370) * _2193);
    float _2460 = (((((_2430 * _2349) + _1093) * cbLight._m0[_2384].y) * _2449) * _2180) + ((((cbLight._m0[_2296].y * _2150) * ((_2346 * _2349) + _1093)) * _2370) * _2193);
    float _2461 = (((((_2430 * _2350) + _1094) * cbLight._m0[_2384].z) * _2449) * _2180) + ((((cbLight._m0[_2296].z * _2151) * ((_2346 * _2350) + _1094)) * _2370) * _2193);
    float _2523;
    float _2525;
    float _2527;
    if (_2233)
    {
        _2523 = _2459;
        _2525 = _2460;
        _2527 = _2461;
    }
    else
    {
        uint _2529 = _2157 + 2u;
        uint _2533 = _2157 + 10u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _942) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _1020;
        float _2550 = cbLight._m0[_2529].y + _1021;
        float _2551 = cbLight._m0[_2529].z + _1022;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2529].xyz));
        float _4551 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2563 = dot(vec3(_939, _940, _941), vec3(_2556, _2557, _2558));
        float _4562 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4573 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2589 = 1.0 - _2548;
        float _2599 = (0.5 / (((_2325 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2589) + _2548) * _2562))) * _2562;
        float _4584 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2523 = (((((_2582 * _2347) + _1091) * cbLight._m0[_2533].x) * _2601) * _2602) + _2459;
        _2525 = (((((_2582 * _2349) + _1093) * cbLight._m0[_2533].y) * _2601) * _2602) + _2460;
        _2527 = (((((_2582 * _2350) + _1094) * cbLight._m0[_2533].z) * _2601) * _2602) + _2461;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2251)
    {
        _2637 = _2523;
        _2639 = _2525;
        _2641 = _2527;
    }
    else
    {
        uint _2648 = _2157 + 3u;
        uint _2652 = _2157 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _942) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _1020;
        float _2669 = cbLight._m0[_2648].y + _1021;
        float _2670 = cbLight._m0[_2648].z + _1022;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_939, _940, _941), vec3(cbLight._m0[_2648].xyz));
        float _4600 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2682 = dot(vec3(_939, _940, _941), vec3(_2675, _2676, _2677));
        float _4611 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4622 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
        float _2708 = 1.0 - _2667;
        float _2718 = (0.5 / (((_2325 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2708) + _2667) * _2681))) * _2681;
        float _4633 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2637 = (((((_2701 * _2347) + _1091) * cbLight._m0[_2652].x) * _2720) * _2721) + _2523;
        _2639 = (((((_2701 * _2349) + _1093) * cbLight._m0[_2652].y) * _2720) * _2721) + _2525;
        _2641 = (((((_2701 * _2350) + _1094) * cbLight._m0[_2652].z) * _2720) * _2721) + _2527;
    }
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_2155.y == 0u)
    {
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2796;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2796;
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2796;
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _2812)));
        float _2833 = (log2(_2799 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
        }
        else
        {
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            uint _3132 = 0u;
            uint _3141;
            bool _3142;
            for (;;)
            {
                _3141 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                _3142 = _3141 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3142)
                {
                    frontier_phi_61_pred = _3126;
                    frontier_phi_61_pred_1 = _3131;
                    frontier_phi_61_pred_2 = _3130;
                    frontier_phi_61_pred_3 = _3129;
                    frontier_phi_61_pred_4 = _3128;
                    frontier_phi_61_pred_5 = _3127;
                }
                else
                {
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    uint _3256;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3141;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3260 = uint(findLSB(_3256)) + (_3132 << 5u);
                        uint _3257 = (_3256 + 4294967295u) & _3256;
                        uint _3262 = _3260 * 48u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3282 = (_3260 * 48u) + 4u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3301 = (_3260 * 48u) + 8u;
                        vec3 _3312 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x));
                        float _3316 = _3276.x - _2797;
                        float _3317 = _3276.y - _2798;
                        float _3318 = _3276.z - _2799;
                        float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                        float _3322 = inversesqrt(_3319);
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3326 = dot(vec3(_1047, _1050, _1053), vec3(_3323, _3324, _3325));
                        float _3331 = 1.0 - (_3319 * _3276.w);
                        float _4659 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3333 = sqrt(_3319) * _3295.w;
                        float _3336 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                        float _3337 = _3336 * _3336;
                        float _3340 = ((1.0 - _3337) * _3326) + _3337;
                        float _3343 = _3333 * _3333;
                        float _3347 = ((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3332) / ((_3343 * 0.699999988079071044921875) + 1.0);
                        float _3351 = (-0.0) - _2797;
                        float _3352 = (-0.0) - _2798;
                        float _3353 = (-0.0) - _2799;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3368 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _1122;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3358 + _3323;
                        float _3380 = _3359 + _3324;
                        float _3381 = _3360 + _3325;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_1047, _1050, _1053), vec3(_3358, _3359, _3360));
                        float _4675 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3393 = dot(vec3(_1047, _1050, _1053), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4686 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3336 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3326) + _3402;
                        float _4697 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4708 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3400 * _3400) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125))) * _3332;
                        _3185 = (_3347 * _3295.x) + _3253;
                        _3186 = (_3347 * _3295.y) + _3254;
                        _3187 = (_3347 * _3295.z) + _3255;
                        _3182 = (_3428 * _3312.x) + _3250;
                        _3183 = (_3428 * _3312.y) + _3251;
                        _3184 = (_3428 * _3312.z) + _3252;
                        if (_3257 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3257;
                        }
                    }
                    frontier_phi_61_pred = _3182;
                    frontier_phi_61_pred_1 = _3187;
                    frontier_phi_61_pred_2 = _3186;
                    frontier_phi_61_pred_3 = _3185;
                    frontier_phi_61_pred_4 = _3184;
                    frontier_phi_61_pred_5 = _3183;
                }
                _2974 = frontier_phi_61_pred;
                _2984 = frontier_phi_61_pred_1;
                _2982 = frontier_phi_61_pred_2;
                _2980 = frontier_phi_61_pred_3;
                _2978 = frontier_phi_61_pred_4;
                _2976 = frontier_phi_61_pred_5;
                uint _3133 = _3132 + 1u;
                if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3126 = _2974;
                    _3127 = _2976;
                    _3128 = _2978;
                    _3129 = _2980;
                    _3130 = _2982;
                    _3131 = _2984;
                    _3132 = _3133;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
        }
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.z;
        uint _2990 = (_2988 >> 8u) & 15u;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        if (((4294967295u << _2990) & _2843) == 0u)
        {
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
        }
        else
        {
            float _3119 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
            float _3120 = _3119 * _2797;
            float _3121 = _3119 * _2798;
            float _3122 = _3119 * _2799;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2990 < ((_2988 >> 12u) & 15u))
            {
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3233 = _2973;
                float _3234 = _2975;
                float _3235 = _2977;
                float _3236 = _2979;
                float _3237 = _2981;
                float _3238 = _2983;
                uint _3239 = _2990;
                uint _3248;
                bool _3249;
                for (;;)
                {
                    _3248 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                    _3249 = _3248 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3249)
                    {
                        frontier_phi_67_pred = _3236;
                        frontier_phi_67_pred_1 = _3237;
                        frontier_phi_67_pred_2 = _3238;
                        frontier_phi_67_pred_3 = _3235;
                        frontier_phi_67_pred_4 = _3234;
                        frontier_phi_67_pred_5 = _3233;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3446 = _3233;
                        float _3447 = _3234;
                        float _3448 = _3235;
                        float _3449 = _3236;
                        float _3450 = _3237;
                        float _3451 = _3238;
                        uint _3452 = _3248;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3536;
                        float _3582;
                        bool _3583;
                        for (;;)
                        {
                            uint _3463 = ((_3239 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3463 * 40u) + 20u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3463 * 40u) + 24u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3557 = (_3463 * 40u) + 28u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3582 = fma(_2799, _3570.z, fma(_2798, _3570.y, _3570.x * _2797)) + _3570.w;
                            _3583 = !((fma(_2799, _3551.z, fma(_2798, _3551.y, _3551.x * _2797)) + _3551.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3583)
                            {
                                float _3610 = _3478.x - _2797;
                                float _3611 = _3478.y - _2798;
                                float _3612 = _3478.z - _2799;
                                float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                                float _3616 = inversesqrt(_3613);
                                float _3617 = _3616 * _3610;
                                float _3618 = _3616 * _3611;
                                float _3619 = _3616 * _3612;
                                float _3623 = 1.0 - (_3613 / (_3479 * _3479));
                                float _4719 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3628 = sqrt(_3613) * _3494.w;
                                float _3630 = 1.39999997615814208984375 / (_3628 + 1.39999997615814208984375);
                                float _3631 = _3630 * _3630;
                                float _3634 = ((1.0 - _3631) * dot(vec3(_3617, _3618, _3619), vec3(_1047, _1050, _1053))) + _3631;
                                float _3637 = _3628 * _3628;
                                float _3641 = (fma(_2799, _3521.z, fma(_2798, _3521.y, _3521.x * _2797)) + _3521.w) / _3582;
                                float _3642 = (fma(_2799, _3536.z, fma(_2798, _3536.y, _3536.x * _2797)) + _3536.w) / _3582;
                                float _3646 = 1.0 - dot(vec2(_3641, _3642), vec2(_3641, _3642));
                                float _4735 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3648 = _3647 * (((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3624) / ((_3637 * 0.699999988079071044921875) + 1.0));
                                float _3660 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                                float _3661 = 1.0 - _1122;
                                float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                                float _3669 = _3668 * _3668;
                                float _3670 = _3669 * _3669;
                                float _3671 = _3617 - _3120;
                                float _3672 = _3618 - _3121;
                                float _3673 = _3619 - _3122;
                                float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                                float _3681 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3120, (-0.0) - _3121, (-0.0) - _3122));
                                float _4746 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3685 = dot(vec3(_1047, _1050, _1053), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                                float _4757 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                                float _3693 = _3630 * _3669;
                                float _3694 = _3693 * _3693;
                                float _3700 = ((1.0 - _3694) * dot(vec3(_1047, _1050, _1053), vec3(_3617, _3618, _3619))) + _3694;
                                float _4768 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3702 = 1.0 - _3669;
                                float _3712 = (0.5 / (((_3701 * ((_3684 * _3702) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3669) * _3684))) * _3701;
                                float _4779 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3722 = (_3647 * _3624) * (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3692 * _3692) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3722 * _3506.x;
                                frontier_phi_73_pred_1 = _3722 * _3506.y;
                                frontier_phi_73_pred_2 = _3648 * _3494.z;
                                frontier_phi_73_pred_3 = _3648 * _3494.y;
                                frontier_phi_73_pred_4 = _3648 * _3494.x;
                                frontier_phi_73_pred_5 = _3722 * _3506.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3726 = frontier_phi_73_pred;
                            _3727 = frontier_phi_73_pred_1;
                            _3731 = frontier_phi_73_pred_2;
                            _3730 = frontier_phi_73_pred_3;
                            _3729 = frontier_phi_73_pred_4;
                            _3728 = frontier_phi_73_pred_5;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3436;
                        frontier_phi_67_pred_1 = _3437;
                        frontier_phi_67_pred_2 = _3438;
                        frontier_phi_67_pred_3 = _3435;
                        frontier_phi_67_pred_4 = _3434;
                        frontier_phi_67_pred_5 = _3433;
                    }
                    _3101 = frontier_phi_67_pred;
                    _3103 = frontier_phi_67_pred_1;
                    _3105 = frontier_phi_67_pred_2;
                    _3099 = frontier_phi_67_pred_3;
                    _3097 = frontier_phi_67_pred_4;
                    _3095 = frontier_phi_67_pred_5;
                    uint _3240 = _3239 + 1u;
                    if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3233 = _3095;
                        _3234 = _3097;
                        _3235 = _3099;
                        _3236 = _3101;
                        _3237 = _3103;
                        _3238 = _3105;
                        _3239 = _3240;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3103;
                frontier_phi_55_56_ladder_1 = _3105;
                frontier_phi_55_56_ladder_2 = _3101;
                frontier_phi_55_56_ladder_3 = _3099;
                frontier_phi_55_56_ladder_4 = _3097;
                frontier_phi_55_56_ladder_5 = _3095;
            }
            else
            {
                frontier_phi_55_56_ladder = _2981;
                frontier_phi_55_56_ladder_1 = _2983;
                frontier_phi_55_56_ladder_2 = _2979;
                frontier_phi_55_56_ladder_3 = _2977;
                frontier_phi_55_56_ladder_4 = _2975;
                frontier_phi_55_56_ladder_5 = _2973;
            }
            _3094 = frontier_phi_55_56_ladder_5;
            _3096 = frontier_phi_55_56_ladder_4;
            _3098 = frontier_phi_55_56_ladder_3;
            _3100 = frontier_phi_55_56_ladder_2;
            _3102 = frontier_phi_55_56_ladder;
            _3104 = frontier_phi_55_56_ladder_1;
        }
        float _3109 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _2856 = (_3109 * _3100) + _2289;
        _2858 = (_3109 * _3102) + _2291;
        _2860 = (_3109 * _3104) + _2293;
        _2862 = ((_3094 * _1091) * _3109) + _2637;
        _2864 = ((_3096 * _1093) * _3109) + _2639;
        _2866 = ((_3098 * _1094) * _3109) + _2641;
    }
    else
    {
        _2856 = _2289;
        _2858 = _2291;
        _2860 = _2293;
        _2862 = _2637;
        _2864 = _2639;
        _2866 = _2641;
    }
    uint _2872 = _1067 + uint(cbMatDynParam._m0[0u].w);
    float _2878 = ((((((_864.x - _859.x) * _842) + _859.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _788) * cbMtdParam._m0[20u].x)) * _797) * cbInstanceData._m0[_2872].x;
    float _2879 = ((((((_864.y - _859.y) * _842) + _859.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_777.y - _775) * _756) + _775)) * cbMtdParam._m0[20u].y)) * _797) * cbInstanceData._m0[_2872].y;
    float _2880 = ((((((_864.z - _859.z) * _842) + _859.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_777.z - _776) * _756) + _776)) * cbMtdParam._m0[20u].z)) * _797) * cbInstanceData._m0[_2872].z;
    float _4795 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4806 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4817 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2897 = (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2856 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1106))) + ((_2862 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1908)) * cbPerFrame._m0[3u].x)) + _2878;
    float _2899 = (_2879 + ((_2864 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1908)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2858 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1106)));
    float _2901 = (_2880 + ((_2866 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1908)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2860 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1106)));
    float _4843 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2914 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    uint _2915 = _1066 + 6u;
    float _2923 = _1028 / cbSceneParam._m0[86u].x;
    float _2924 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _2938 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, (log2((isnan(cbSceneParam._m0[77u].w) ? _962 : (isnan(_962) ? cbSceneParam._m0[77u].w : min(_962, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2940 = _2938.x;
    float _2941 = _2938.y;
    float _2942 = _2938.z;
    float _2943 = _2938.w;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_962 > cbSceneParam._m0[78u].w)
    {
        float _2998 = isnan(_962) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _962 : min(cbSceneParam._m0[80u].w, _962));
        float _2999 = _2998 / _962;
        float _3010 = _2999 * _1013;
        float _3011 = _1014 * _2999;
        float _3012 = (-0.0) - _3011;
        float _3013 = _2999 * _1015;
        float _3015 = (cbSceneParam._m0[77u].w * _3012) / _2998;
        float _3016 = _3015 + cbSceneParam._m0[79u].w;
        float _3017 = cbSceneParam._m0[79u].w - _3011;
        float _3023 = sqrt(((_3010 * _3010) + (_3011 * _3011)) + (_3013 * _3013));
        float _3026 = (1.0 - (cbSceneParam._m0[77u].w / _2998)) * _3023;
        float _3031 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3033 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_3012 - _3015) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3016 > 0.0) ? exp2(_3031 * _3016) : (2.0 - exp2(_3033 * _3016))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3026;
        }
        else
        {
            float _3155 = 1.0 / cbSceneParam._m0[80u].x;
            float _3156 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : max(_3016, _3017));
            float _3157 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : min(_3016, _3017));
            float _3166 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : min(_3156, 0.0));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            _3195 = ((abs(_3023 / _3012) * cbSceneParam._m0[80u].y) * ((((_3166 - _3167) * 2.0) - ((exp2(_3031 * (isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0)))) - exp2(_3031 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))))) * _3155)) - ((exp2(_3033 * _3166) - exp2(_3033 * _3167)) * _3155))) + (_3026 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2943);
        _3035 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2940;
        _3037 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2941;
        _3039 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2942;
        _3041 = _3206 * _2943;
    }
    else
    {
        _3035 = _2940;
        _3037 = _2941;
        _3039 = _2942;
        _3041 = _2943;
    }
    float _3053 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3054 = _3053 == 3.0;
    float _3055 = log2(_3041);
    float _3059 = exp2(_3055 * cbSceneParam._m0[78u].x);
    float _3060 = exp2(_3055 * cbSceneParam._m0[78u].y);
    float _3061 = exp2(_3055 * cbSceneParam._m0[78u].z);
    float _3062 = _3059 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)));
    float _3063 = _3060 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0)));
    float _3064 = _3061 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)));
    float _3073 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3073 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3035)));
    SV_Target.y = _3073 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3037)));
    SV_Target.z = _3073 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.w = cbInstanceData._m0[_2915].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2878) * _2914) * _3059) * _3073;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2879) * _2914) * _3060) * _3073;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2880) * _2914) * _3061) * _3073;
    SV_Target_1.w = cbInstanceData._m0[_2915].w;
}


