#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1529;
float _4224;
float _4225;
float _4226;
float _4227;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _261 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _271 = log2(0.0);
    float _273 = exp2(_271 * cbMtdParam._m0[24u].x);
    float _274 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _275 = isnan(1.0) ? _274 : (isnan(_274) ? 1.0 : min(_274, 1.0));
    vec4 _289 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _293 = _289.z;
    float _301 = exp2(log2(_293 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _315 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _318 = _315.y;
    float _321 = (_315.x + (-0.02500000037252902984619140625)) * 8.0;
    float _325 = roundEven(5.0 - _321);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(4.0) ? _326 : (isnan(_326) ? 4.0 : min(_326, 4.0));
    float _340 = floor(_327);
    vec4 _343 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _340));
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[17u].x;
    _196[0u] = cbMtdParam._m0[17u].y;
    _197[0u] = cbMtdParam._m0[17u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[14u].x;
    _196[2u] = cbMtdParam._m0[14u].y;
    _197[2u] = cbMtdParam._m0[14u].z;
    _195[3u] = cbMtdParam._m0[13u].x;
    _196[3u] = cbMtdParam._m0[13u].y;
    _197[3u] = cbMtdParam._m0[13u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[18u].x;
    _196[5u] = cbMtdParam._m0[18u].y;
    _197[5u] = cbMtdParam._m0[18u].z;
    float _407 = roundEven(_321);
    float _408 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    uint _410 = uint(int(isnan(5.0) ? _408 : (isnan(_408) ? 5.0 : min(_408, 5.0))));
    vec4 _440 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _451 = cbMtdParam._m0[9u].x * _440.x;
    float _452 = cbMtdParam._m0[9u].y * _440.y;
    float _453 = cbMtdParam._m0[9u].z * _440.z;
    float _460 = ((((((_195[_410] - cbMtdParam._m0[10u].x) * _318) + cbMtdParam._m0[10u].x) * _343.x) - _451) * _303) + _451;
    float _461 = ((((((_196[_410] - cbMtdParam._m0[10u].y) * _318) + cbMtdParam._m0[10u].y) * _343.y) - _452) * _303) + _452;
    float _462 = ((((((_197[_410] - cbMtdParam._m0[10u].z) * _318) + cbMtdParam._m0[10u].z) * _343.z) - _453) * _303) + _453;
    float _468 = exp2(log2(_289.w) * cbMtdParam._m0[24u].w);
    vec4 _481 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _501 = (((cbMtdParam._m0[16u].x * _481.x) - _460) * _468) + _460;
    float _502 = (((cbMtdParam._m0[16u].y * _481.y) - _461) * _468) + _461;
    float _503 = (((cbMtdParam._m0[16u].z * _481.z) - _462) * _468) + _462;
    vec4 _515 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _540 = (_261.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _515.x) - _501) * _275) + _501);
    float _542 = (_261.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _515.y) - _502) * _275) + _502);
    float _544 = (_261.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _515.z) - _503) * _275) + _503);
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[30u].z;
    _191[0u] = cbMtdParam._m0[30u].w;
    _190[1u] = cbMtdParam._m0[32u].z;
    _191[1u] = cbMtdParam._m0[32u].w;
    _190[2u] = cbMtdParam._m0[32u].x;
    _191[2u] = cbMtdParam._m0[32u].y;
    _190[3u] = cbMtdParam._m0[31u].z;
    _191[3u] = cbMtdParam._m0[31u].w;
    _190[4u] = cbMtdParam._m0[31u].x;
    _191[4u] = cbMtdParam._m0[31u].y;
    float _581 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    uint _583 = uint(int(isnan(4.0) ? _581 : (isnan(_581) ? 4.0 : min(_581, 4.0))));
    float _590 = ((_191[_583] - cbMtdParam._m0[23u].z) * _303) + cbMtdParam._m0[23u].z;
    float _593 = ((cbMtdParam._m0[23u].w - _590) * _468) + _590;
    float _596 = ((cbMtdParam._m0[26u].y - _593) * _275) + _593;
    vec4 _611 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _340));
    vec4 _628 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _636 = cbMtdParam._m0[23u].x + _628.z;
    float _639 = (((_611.z + _190[_583]) - _636) * _303) + _636;
    vec4 _651 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _662 = (((_651.z - _639) + cbMtdParam._m0[30u].x) * _468) + _639;
    float _668 = ((((_293 * 2.0) * _662) - _662) * cbMtdParam._m0[25u].w) + _662;
    vec4 _680 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _691 = (((cbMtdParam._m0[24u].z + _680.z) - _668) * _275) + _668;
    float _704 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _727 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_704 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _704) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _731 = cbPerFrame._m0[22u].x * 2.0;
    float _732 = _731 * cbMtdParam._m0[28u].z;
    float _735 = (_727.x * 0.5) + (-0.25);
    float _738 = (_727.y * 0.5) + (-0.25);
    float _739 = _738 * cbMtdParam._m0[28u].y;
    float _741 = (-0.0) - (cbMtdParam._m0[28u].y * _735);
    float _743 = fract(_732);
    float _745 = fract(_732 + 0.5);
    float _757 = abs((_743 * 2.0) + (-1.0));
    vec4 _773 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_743 * _741) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_739 * _743) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _775 = _773.x;
    float _776 = _773.y;
    float _777 = _773.z;
    vec4 _778 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_745 * _741) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_739 * _745) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _789 = ((_778.x - _775) * _757) + _775;
    float _796 = exp2(log2(_789 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _797 = isnan(cbMtdParam._m0[29u].y) ? _796 : (isnan(_796) ? cbMtdParam._m0[29u].y : max(_796, cbMtdParam._m0[29u].y));
    float _798 = isnan(cbMtdParam._m0[29u].z) ? _797 : (isnan(_797) ? cbMtdParam._m0[29u].z : min(_797, cbMtdParam._m0[29u].z));
    float _822 = (cbMtdParam._m0[33u].x * _704) + TEXCOORD;
    float _823 = (cbMtdParam._m0[33u].y * _704) + TEXCOORD_1;
    float _826 = _731 * cbMtdParam._m0[27u].w;
    float _827 = _738 * cbMtdParam._m0[27u].z;
    float _829 = (-0.0) - (cbMtdParam._m0[27u].z * _735);
    float _830 = fract(_826);
    float _832 = fract(_826 + 0.5);
    float _843 = abs((_830 * 2.0) + (-1.0));
    vec4 _860 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_830 * _829) + _822) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_827 * _830) + _823) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _865 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_832 * _829) + _822) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_827 * _832) + _823) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _899 = ((_611.x - _630) * _303) + _630;
    float _900 = ((_611.y - _631) * _303) + _631;
    float _905 = ((_651.x - _899) * _468) + _899;
    float _906 = ((_651.y - _900) * _468) + _900;
    float _915 = ((((_680.x - _905) * _275) + _905) * 2.0) + (-1.0);
    float _916 = ((((_680.y - _906) * _275) + _906) * 2.0) + (-1.0);
    float _917 = dot(vec2(_915, _916), vec2(_915, _916));
    float _4296 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _922 = sqrt(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))));
    float _925 = (cbMtdParam._m0[26u].z * ((_289.x * 2.0) + (-1.0))) + _915;
    float _926 = (cbMtdParam._m0[26u].z * ((_289.y * 2.0) + (-1.0))) + _916;
    float _928 = gl_FragCoord.x * 0.125;
    float _930 = gl_FragCoord.y * 0.125;
    float _941 = fma(_922, _237 * NORMAL.x, fma(_926, _244 * TANGENT.x, (_230 * _222) * _925));
    float _944 = fma(_922, _237 * NORMAL.y, fma(_926, _244 * TANGENT.y, (_230 * _223) * _925));
    float _947 = fma(_922, _237 * NORMAL.z, fma(_926, _244 * TANGENT.z, (_230 * _224) * _925));
    float _951 = inversesqrt(dot(vec3(_941, _944, _947), vec3(_941, _944, _947)));
    float _952 = _951 * _941;
    float _953 = _951 * _944;
    float _954 = _951 * _947;
    float _4307 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _955 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _4318 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4329 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4340 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4351 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _959 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_928, _930)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _979 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1030 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1020);
    float _1031 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1020);
    float _1032 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1020);
    float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
    float _1037 = _1030 * _1036;
    float _1038 = _1031 * _1036;
    float _1039 = _1032 * _1036;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_928, _930));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1213 = sqrt(((_1030 * _1030) + (_1031 * _1031)) + (_1032 * _1032));
        float _1219 = (cbMatDynParam._m0[5u].x * _1213) + cbMatDynParam._m0[5u].y;
        float _4362 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1224 = (cbMatDynParam._m0[5u].z * _1213) + cbMatDynParam._m0[5u].w;
        float _4373 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) - _1220)) + _1220) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_954, cbSceneParam._m0[5u].z, fma(_953, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _952));
    float _1076 = fma(_954, cbSceneParam._m0[6u].z, fma(_953, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _952));
    float _1079 = fma(_954, cbSceneParam._m0[7u].z, fma(_953, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _952));
    uint _1092 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1093 = _1092 + 9u;
    uint _1094 = _1093 + uint(cbMatDynParam._m0[0u].w);
    float _1100 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1094].x;
    float _1101 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * cbInstanceData._m0[_1094].y;
    float _1102 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * cbInstanceData._m0[_1094].z;
    float _4384 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _1106 = 1.0 - _959;
    float _1107 = _1103 * _1106;
    float _1108 = _1104 * _1106;
    float _1109 = _1105 * _1106;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _959;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _959;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _959;
    float _1117 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    vec4 _1129 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = _1129.x * TEXCOORD_3.w;
    float _1133 = dot(vec3(_952, _953, _954), vec3(_1037, _1038, _1039));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _952) - _1037;
    float _1141 = (_1136 * _953) - _1038;
    float _1142 = (_1136 * _954) - _1039;
    float _1146 = abs(dot(vec3(_1037, _1038, _1039), vec3(_952, _953, _954)));
    float _4417 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_955);
    float _1159 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1165 = (1.0 - _1159) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1166 = _1159 * _1148;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1528;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1202, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194));
        float _1259 = fma(_1202, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194));
        float _1263 = fma(_1202, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194));
        float _1287 = _1194 + _952;
        float _1288 = _1198 + _953;
        float _1289 = _1202 + _954;
        float _1299 = fma(_1289, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287)) - _1255;
        float _1300 = fma(_1289, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287)) - _1259;
        float _1301 = fma(_1289, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287)) - _1263;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1317 = ((_1305 * _1299) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1305 * _1300) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1301) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1356 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1322.x + (-0.5));
        float _1358 = _1356 * (_1322.y + (-0.5));
        float _1359 = _1356 * (_1322.z + (-0.5));
        float _1366 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1329.x + (-0.5));
        float _1368 = _1366 * (_1329.y + (-0.5));
        float _1369 = _1366 * (_1329.z + (-0.5));
        float _1376 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1336.x + (-0.5));
        float _1378 = _1376 * (_1336.y + (-0.5));
        float _1379 = _1376 * (_1336.z + (-0.5));
        float _1386 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1343.x + (-0.5));
        float _1388 = _1386 * (_1343.y + (-0.5));
        float _1389 = _1386 * (_1343.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1410 = (dot(vec3(_952, _953, _954), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1420 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4465 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1422 + 1.0))) + _1427) * _1390;
        float _1437 = _1358 * 0.5;
        float _1438 = _1368 * 0.5;
        float _1439 = _1378 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_952, _953, _954), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4498 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1464 + 1.0))) + _1469) * _1391;
        float _1479 = _1359 * 0.5;
        float _1480 = _1369 * 0.5;
        float _1481 = _1379 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_952, _953, _954), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4531 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1506 + 1.0))) + _1511) * _1392;
        _1528 = _1359;
        _1530 = _1358;
        _1531 = _1357;
        _1532 = _1369;
        _1533 = _1368;
        _1534 = _1367;
        _1535 = _1379;
        _1536 = _1378;
        _1537 = _1377;
        _1538 = _1392;
        _1539 = _1391;
        _1540 = _1390;
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1529;
        _1530 = _1529;
        _1531 = _1529;
        _1532 = _1529;
        _1533 = _1529;
        _1534 = _1529;
        _1535 = _1529;
        _1536 = _1529;
        _1537 = _1529;
        _1538 = _1529;
        _1539 = _1529;
        _1540 = _1529;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1566 = fma(_1202, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194));
        float _1570 = fma(_1202, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194));
        float _1574 = fma(_1202, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194));
        float _1597 = _1194 + _952;
        float _1598 = _1198 + _953;
        float _1599 = _1202 + _954;
        float _1609 = fma(_1599, cbModelParam._m0[30u].z, fma(_1598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1597)) - _1566;
        float _1610 = fma(_1599, cbModelParam._m0[31u].z, fma(_1598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1597)) - _1570;
        float _1611 = fma(_1599, cbModelParam._m0[32u].z, fma(_1598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1597)) - _1574;
        float _1615 = inversesqrt(dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611)));
        float _1628 = ((_1615 * _1609) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1566 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1615 * _1610) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1570 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1615 * _1611) / cbModelParam._m0[35u].z) + ((((((_1574 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        float _1665 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1632.x + (-0.5));
        float _1667 = _1665 * (_1632.y + (-0.5));
        float _1668 = _1665 * (_1632.z + (-0.5));
        float _1675 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1639.x + (-0.5));
        float _1677 = _1675 * (_1639.y + (-0.5));
        float _1678 = _1675 * (_1639.z + (-0.5));
        float _1685 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1646.x + (-0.5));
        float _1687 = _1685 * (_1646.y + (-0.5));
        float _1688 = _1685 * (_1646.z + (-0.5));
        float _1695 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1653.x + (-0.5));
        float _1697 = _1695 * (_1653.y + (-0.5));
        float _1698 = _1695 * (_1653.z + (-0.5));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = _1666 * 0.5;
        float _1703 = _1676 * 0.5;
        float _1704 = _1686 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_952, _953, _954), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4594 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1729 + 1.0))) + _1734) * _1699;
        float _1744 = _1667 * 0.5;
        float _1745 = _1677 * 0.5;
        float _1746 = _1687 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_952, _953, _954), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4627 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_1771 + 1.0))) + _1776) * _1700;
        float _1786 = _1668 * 0.5;
        float _1787 = _1678 * 0.5;
        float _1788 = _1688 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_952, _953, _954), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4638 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4649 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4660 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_1813 + 1.0))) + _1818) * _1701;
        _1835 = _1668;
        _1836 = _1667;
        _1837 = _1666;
        _1838 = _1678;
        _1839 = _1677;
        _1840 = _1676;
        _1841 = _1688;
        _1842 = _1687;
        _1843 = _1686;
        _1844 = _1701;
        _1845 = _1700;
        _1846 = _1699;
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
    }
    else
    {
        _1835 = _1529;
        _1836 = _1529;
        _1837 = _1529;
        _1838 = _1529;
        _1839 = _1529;
        _1840 = _1529;
        _1841 = _1529;
        _1842 = _1529;
        _1843 = _1529;
        _1844 = _1529;
        _1845 = _1529;
        _1846 = _1529;
        _1847 = 0.0;
        _1848 = 0.0;
        _1849 = 0.0;
    }
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1541)) + _1541;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1542)) + _1542;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1543)) + _1543;
    float _1882 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1859));
    float _1903 = _1140 * 0.5;
    float _1904 = _1141 * 0.5;
    float _1905 = _1142 * 0.5;
    float _1906 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1909 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1912 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1946;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1919 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1528, _1532, _1535, _1538));
        float _1923 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1927 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1934 = dot(vec4(cbModelParam._m0[39u]), vec4(_1903, _1904, _1905, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1957;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1948 = dot(vec4(cbModelParam._m0[40u]), vec4(_1903, _1904, _1905, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1948) ? 0.0 : (isnan(0.0) ? _1948 : max(0.0, _1948))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1961 = (_1957 * cbModelParam._m0[1u].x) + (_1946 * (1.0 - cbModelParam._m0[1u].x));
    float _1971 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _955);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1971 : min(cbModelParam._m0[25u].z, _1971));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2019 = fma(_1202, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194)) + cbModelParam._m0[13u].w;
        float _2023 = fma(_1202, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194)) + cbModelParam._m0[14u].w;
        float _2027 = fma(_1202, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194)) + cbModelParam._m0[15u].w;
        float _2030 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2033 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2036 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2064;
        if (_2030 > 0.0)
        {
            _2064 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2064 = frontier_phi_19_17_ladder;
        }
        float _2235;
        if (_2033 > 0.0)
        {
            _2235 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2235 = frontier_phi_28_24_ladder;
        }
        float _2529;
        if (_2036 > 0.0)
        {
            _2529 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2529 = frontier_phi_40_35_ladder;
        }
        float _2531 = isnan(_2235) ? _2064 : (isnan(_2064) ? _2235 : min(_2064, _2235));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _2030) + _2019;
        float _2537 = (_2532 * _2033) + _2023;
        float _2538 = (_2532 * _2036) + _2027;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2539;
        float _2543 = _2539 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 > _2543) || ((_2537 < _2541) || ((_2536 < _2541) || (_2536 > _2543))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2538, cbModelParam._m0[9u].z, fma(_2537, cbModelParam._m0[9u].y, _2536 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2538, cbModelParam._m0[10u].z, fma(_2537, cbModelParam._m0[10u].y, _2536 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2538, cbModelParam._m0[11u].z, fma(_2537, cbModelParam._m0[11u].y, _2536 * cbModelParam._m0[11u].x))), _1972);
            frontier_phi_18_40_ladder = _2683.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2683.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2683.x * cbModelParam._m0[1u].y;
        }
        _2052 = frontier_phi_18_40_ladder_2;
        _2054 = frontier_phi_18_40_ladder_1;
        _2056 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1972);
        _2052 = _2040.x * cbModelParam._m0[1u].y;
        _2054 = _2040.y * cbModelParam._m0[1u].y;
        _2056 = _2040.z * cbModelParam._m0[1u].y;
    }
    float _2060 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _955);
    float _2061 = isnan(_2060) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2060 : min(cbModelParam._m0[25u].w, _2060));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2114 = fma(_1202, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194)) + cbModelParam._m0[21u].w;
        float _2118 = fma(_1202, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194)) + cbModelParam._m0[22u].w;
        float _2122 = fma(_1202, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194)) + cbModelParam._m0[23u].w;
        float _2125 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2128 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2131 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2240;
        if (_2125 > 0.0)
        {
            _2240 = abs((1.0 - _2114) / _2125);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2114 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2240 = frontier_phi_30_26_ladder;
        }
        float _2556;
        if (_2128 > 0.0)
        {
            _2556 = abs((1.0 - _2118) / _2128);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2118 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2556 = frontier_phi_42_37_ladder;
        }
        float _2894;
        if (_2131 > 0.0)
        {
            _2894 = abs((1.0 - _2122) / _2131);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2122 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2894 = frontier_phi_52_49_ladder;
        }
        float _2896 = isnan(_2556) ? _2240 : (isnan(_2240) ? _2556 : min(_2240, _2556));
        float _2897 = isnan(_2894) ? _2896 : (isnan(_2896) ? _2894 : min(_2896, _2894));
        float _2901 = (_2897 * _2125) + _2114;
        float _2902 = (_2897 * _2128) + _2118;
        float _2903 = (_2897 * _2131) + _2122;
        float _2904 = _2897 * 9.9999997473787516355514526367188e-05;
        float _2905 = (-1.0) - _2904;
        float _2907 = _2904 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2903 > _2907) || ((_2903 < _2905) || ((_2902 > _2907) || ((_2902 < _2905) || ((_2901 < _2905) || (_2901 > _2907))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2903, cbModelParam._m0[17u].z, fma(_2902, cbModelParam._m0[17u].y, _2901 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2903, cbModelParam._m0[18u].z, fma(_2902, cbModelParam._m0[18u].y, _2901 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2903, cbModelParam._m0[19u].z, fma(_2902, cbModelParam._m0[19u].y, _2901 * cbModelParam._m0[19u].x))), _2061);
            frontier_phi_27_52_ladder = _3025.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3025.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3025.x * cbModelParam._m0[1u].z;
        }
        _2150 = frontier_phi_27_52_ladder_2;
        _2152 = frontier_phi_27_52_ladder_1;
        _2154 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2134 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2061);
        _2150 = _2134.x * cbModelParam._m0[1u].z;
        _2152 = _2134.y * cbModelParam._m0[1u].z;
        _2154 = _2134.z * cbModelParam._m0[1u].z;
    }
    float _2167 = (((_1165 * _1117) + _1166) * _1132) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2169 = (((_1165 * _1119) + _1166) * _1132) * ((cbModelParam._m0[1u].w * (_2152 - _2054)) + _2054);
    float _2171 = (((_1165 * _1120) + _1166) * _1132) * ((cbModelParam._m0[1u].w * (_2154 - _2056)) + _2056);
    float _2174 = fma(_2171, cbSceneParam._m0[89u].z, fma(_2169, cbSceneParam._m0[89u].y, _2167 * cbSceneParam._m0[89u].x));
    float _2177 = fma(_2171, cbSceneParam._m0[90u].z, fma(_2169, cbSceneParam._m0[90u].y, _2167 * cbSceneParam._m0[90u].x));
    float _2180 = fma(_2171, cbSceneParam._m0[91u].z, fma(_2169, cbSceneParam._m0[91u].y, _2167 * cbSceneParam._m0[91u].x));
    float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2218 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2222 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2227 = _2214 / _2226;
    float _2228 = _2218 / _2226;
    float _2229 = _2222 / _2226;
    float _2375;
    float _2376;
    float _2377;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2256 = ((uint(_2229 > cbSceneParam._m0[59u].y) + uint(_2229 > cbSceneParam._m0[59u].x)) + uint(_2229 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2257 = _2256 + 43u;
        uint _2265 = _2256 + 44u;
        uint _2273 = _2256 + 45u;
        uint _2281 = _2256 + 46u;
        float _2292 = fma(_2226, cbSceneParam._m0[_2257].w, fma(_2222, cbSceneParam._m0[_2257].z, fma(_2218, cbSceneParam._m0[_2257].y, _2214 * cbSceneParam._m0[_2257].x)));
        float _2296 = fma(_2226, cbSceneParam._m0[_2265].w, fma(_2222, cbSceneParam._m0[_2265].z, fma(_2218, cbSceneParam._m0[_2265].y, _2214 * cbSceneParam._m0[_2265].x)));
        float _2304 = fma(_2226, cbSceneParam._m0[_2281].w, fma(_2222, cbSceneParam._m0[_2281].z, fma(_2218, cbSceneParam._m0[_2281].y, _2214 * cbSceneParam._m0[_2281].x)));
        float _2308 = cbSceneParam._m0[33u].z * _2304;
        float _2310 = cbSceneParam._m0[33u].w * _2304;
        float _2313 = fma(_2226, cbSceneParam._m0[_2273].w, fma(_2222, cbSceneParam._m0[_2273].z, fma(_2218, cbSceneParam._m0[_2273].y, _2214 * cbSceneParam._m0[_2273].x))) / _2304;
        float _2361 = (cbSceneParam._m0[33u].x - sqrt(((_2228 * _2228) + (_2227 * _2227)) + (_2229 * _2229))) * cbSceneParam._m0[33u].y;
        float _4786 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2368 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2308 + _2292) / _2304, (_2310 + _2296) / _2304), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2310 + _2292) / _2304, (_2296 - _2308) / _2304), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 - _2308) / _2304, (_2296 - _2310) / _2304), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 - _2310) / _2304, (_2308 + _2296) / _2304), _2313), 0.0)).x), vec4(0.25)));
        _2375 = 1.0 - (_2368 * cbSceneParam._m0[34u].x);
        _2376 = 1.0 - (_2368 * cbSceneParam._m0[34u].y);
        _2377 = 1.0 - (_2368 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2375 = 1.0;
        _2376 = 1.0;
        _2377 = 1.0;
    }
    float _2441;
    float _2443;
    float _2445;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2429 = fma(_2226, cbSceneParam._m0[63u].w, fma(_2222, cbSceneParam._m0[63u].z, fma(_2218, cbSceneParam._m0[63u].y, _2214 * cbSceneParam._m0[63u].x)));
        float _2430 = fma(_2226, cbSceneParam._m0[60u].w, fma(_2222, cbSceneParam._m0[60u].z, fma(_2218, cbSceneParam._m0[60u].y, _2214 * cbSceneParam._m0[60u].x))) / _2429;
        float _2431 = fma(_2226, cbSceneParam._m0[61u].w, fma(_2222, cbSceneParam._m0[61u].z, fma(_2218, cbSceneParam._m0[61u].y, _2214 * cbSceneParam._m0[61u].x))) / _2429;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2430 >= cbSceneParam._m0[64u].x) && (_2431 >= cbSceneParam._m0[64u].y)) && (_2430 <= cbSceneParam._m0[64u].z)) && (_2431 <= cbSceneParam._m0[64u].w))
        {
            float _2569 = fma(_2226, cbSceneParam._m0[62u].w, fma(_2222, cbSceneParam._m0[62u].z, fma(_2218, cbSceneParam._m0[62u].y, _2214 * cbSceneParam._m0[62u].x))) / _2429;
            float _2573 = isnan(cbSceneParam._m0[41u].w) ? _2569 : (isnan(_2569) ? cbSceneParam._m0[41u].w : max(_2569, cbSceneParam._m0[41u].w));
            float _2616 = (cbSceneParam._m0[33u].x - sqrt(((_2228 * _2228) + (_2227 * _2227)) + (_2229 * _2229))) * cbSceneParam._m0[33u].y;
            float _4802 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
            float _2623 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2430, cbSceneParam._m0[33u].w + _2431), _2573), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2430, _2431 - cbSceneParam._m0[33u].z), _2573), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2430 - cbSceneParam._m0[33u].z, _2431 - cbSceneParam._m0[33u].w), _2573), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2430 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2431), _2573), 0.0)).x), vec4(0.25)));
            float _2627 = 1.0 - (_2623 * cbSceneParam._m0[34u].x);
            float _2628 = 1.0 - (_2623 * cbSceneParam._m0[34u].y);
            float _2629 = 1.0 - (_2623 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2629) ? _2377 : (isnan(_2377) ? _2629 : min(_2377, _2629));
            frontier_phi_39_38_ladder_1 = isnan(_2628) ? _2376 : (isnan(_2376) ? _2628 : min(_2376, _2628));
            frontier_phi_39_38_ladder_2 = isnan(_2627) ? _2375 : (isnan(_2375) ? _2627 : min(_2375, _2627));
        }
        else
        {
            frontier_phi_39_38_ladder = _2377;
            frontier_phi_39_38_ladder_1 = _2376;
            frontier_phi_39_38_ladder_2 = _2375;
        }
        _2441 = frontier_phi_39_38_ladder_2;
        _2443 = frontier_phi_39_38_ladder_1;
        _2445 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2441 = _2375;
        _2443 = _2376;
        _2445 = _2377;
    }
    uvec4 _2450 = floatBitsToUint(cbInstanceData._m0[_1092 + 5u]);
    uint _2452 = _2450.x * 14u;
    uint _2453 = _2452 + 13u;
    float _2460 = _1132 + (-1.0);
    float _2465 = (cbLight._m0[_2453].x * _2460) + 1.0;
    float _2466 = (cbLight._m0[_2453].y * _2460) + 1.0;
    float _2467 = (cbLight._m0[_2453].z * _2460) + 1.0;
    float _2468 = (cbLight._m0[_2453].w * _2460) + 1.0;
    uint _2469 = _2452 + 5u;
    float _2475 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
    uint _2479 = _2452 + 4u;
    float _2488 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
    uint _2492 = _2452 | 1u;
    float _2503 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_952, _953, _954));
    float _2506 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_952, _953, _954));
    float _4838 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _4849 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2511 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * 0.3183098733425140380859375;
    float _2513 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * 0.3183098733425140380859375;
    float _2520 = ((cbLight._m0[_2469].x * _2475) * _2513) + (((cbLight._m0[_2479].x * _2441) * _2488) * _2511);
    float _2521 = ((_2475 * cbLight._m0[_2469].y) * _2513) + (((cbLight._m0[_2479].y * _2443) * _2488) * _2511);
    float _2522 = ((_2475 * cbLight._m0[_2469].z) * _2513) + (((cbLight._m0[_2479].z * _2445) * _2488) * _2511);
    uvec4 _2526 = floatBitsToUint(cbLight._m0[_2452 + 12u]);
    bool _2528 = _2526.x == 0u;
    float _2630;
    float _2632;
    float _2634;
    if (_2528)
    {
        _2630 = _2520;
        _2632 = _2521;
        _2634 = _2522;
    }
    else
    {
        uint _2638 = _2452 + 6u;
        float _2654 = (dot(vec3(cbLight._m0[_2452 + 2u].xyz), vec3(_952, _953, _954)) * 0.5) + 0.5;
        float _2655 = _2654 * _2654;
        float _4860 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2656 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2657 = isnan(1.0) ? _2467 : (isnan(_2467) ? 1.0 : min(_2467, 1.0));
        _2630 = (((cbLight._m0[_2638].x * 0.3183098733425140380859375) * _2656) * _2657) + _2520;
        _2632 = (((cbLight._m0[_2638].y * 0.3183098733425140380859375) * _2656) * _2657) + _2521;
        _2634 = (((cbLight._m0[_2638].z * 0.3183098733425140380859375) * _2656) * _2657) + _2522;
    }
    bool _2637 = _2526.y == 0u;
    float _2692;
    float _2694;
    float _2696;
    if (_2637)
    {
        _2692 = _2630;
        _2694 = _2632;
        _2696 = _2634;
    }
    else
    {
        uint _2865 = _2452 + 7u;
        float _2881 = (dot(vec3(cbLight._m0[_2452 + 3u].xyz), vec3(_952, _953, _954)) * 0.5) + 0.5;
        float _2882 = _2881 * _2881;
        float _4876 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2883 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2884 = isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0));
        _2692 = (((cbLight._m0[_2865].x * 0.3183098733425140380859375) * _2883) * _2884) + _2630;
        _2694 = (((cbLight._m0[_2865].y * 0.3183098733425140380859375) * _2883) * _2884) + _2632;
        _2696 = (((cbLight._m0[_2865].z * 0.3183098733425140380859375) * _2883) * _2884) + _2634;
    }
    uint _2699 = _2452 + 8u;
    float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _955) * 0.949999988079071044921875);
    float _2713 = _2712 * _2712;
    float _2714 = cbLight._m0[_2452].x + _1037;
    float _2715 = cbLight._m0[_2452].y + _1038;
    float _2716 = cbLight._m0[_2452].z + _1039;
    float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
    float _2721 = _2720 * _2714;
    float _2722 = _2720 * _2715;
    float _2723 = _2720 * _2716;
    float _2724 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_2452].xyz));
    float _4892 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2727 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
    float _4903 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2728 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _2729 = dot(vec3(_952, _953, _954), vec3(_2721, _2722, _2723));
    float _4914 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2733 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2721, _2722, _2723));
    float _4925 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2737 = _2713 * _2713;
    float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
    float _2749 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
    float _2750 = 0.959999978542327880859375 - _1114;
    float _2752 = 0.959999978542327880859375 - _1115;
    float _2753 = 0.959999978542327880859375 - _1116;
    float _2760 = 1.0 - _2713;
    float _2771 = (0.5 / (((_2728 * ((_2727 * _2760) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _2760) + _2713) * _2727))) * _2727;
    float _4936 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2773 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
    uint _2787 = _2452 + 9u;
    float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _955) * 0.949999988079071044921875);
    float _2799 = _2798 * _2798;
    float _2800 = cbLight._m0[_2492].x + _1037;
    float _2801 = cbLight._m0[_2492].y + _1038;
    float _2802 = cbLight._m0[_2492].z + _1039;
    float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
    float _2807 = _2806 * _2800;
    float _2808 = _2806 * _2801;
    float _2809 = _2806 * _2802;
    float _2810 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_2492].xyz));
    float _4947 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2813 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
    float _2814 = dot(vec3(_952, _953, _954), vec3(_2807, _2808, _2809));
    float _4958 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2817 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
    float _2818 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2807, _2808, _2809));
    float _4969 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2822 = _2799 * _2799;
    float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
    float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) * 5.0);
    float _2840 = 1.0 - _2799;
    float _2850 = (0.5 / (((_2728 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _2840) + _2799) * _2813))) * _2813;
    float _4980 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
    float _2852 = (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
    float _2862 = (((((_2833 * _2750) + _1117) * cbLight._m0[_2787].x) * _2852) * _2475) + ((((cbLight._m0[_2699].x * _2441) * ((_2749 * _2750) + _1117)) * _2773) * _2488);
    float _2863 = (((((_2833 * _2752) + _1119) * cbLight._m0[_2787].y) * _2852) * _2475) + ((((cbLight._m0[_2699].y * _2443) * ((_2749 * _2752) + _1119)) * _2773) * _2488);
    float _2864 = (((((_2833 * _2753) + _1120) * cbLight._m0[_2787].z) * _2852) * _2475) + ((((cbLight._m0[_2699].z * _2445) * ((_2749 * _2753) + _1120)) * _2773) * _2488);
    float _2920;
    float _2922;
    float _2924;
    if (_2528)
    {
        _2920 = _2862;
        _2922 = _2863;
        _2924 = _2864;
    }
    else
    {
        uint _2926 = _2452 + 2u;
        uint _2930 = _2452 + 10u;
        float _2944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2926].w)) * _955) * 0.949999988079071044921875);
        float _2945 = _2944 * _2944;
        float _2946 = cbLight._m0[_2926].x + _1037;
        float _2947 = cbLight._m0[_2926].y + _1038;
        float _2948 = cbLight._m0[_2926].z + _1039;
        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
        float _2953 = _2952 * _2946;
        float _2954 = _2952 * _2947;
        float _2955 = _2952 * _2948;
        float _2956 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_2926].xyz));
        float _4991 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
        float _2960 = dot(vec3(_952, _953, _954), vec3(_2953, _2954, _2955));
        float _5002 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _2964 = dot(vec3(cbLight._m0[_2926].xyz), vec3(_2953, _2954, _2955));
        float _5013 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2968 = _2945 * _2945;
        float _2972 = ((_2963 * _2963) * (_2968 + (-1.0))) + 1.0;
        float _2979 = exp2(log2(1.0 - (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) * 5.0);
        float _2986 = 1.0 - _2945;
        float _2996 = (0.5 / (((_2728 * ((_2959 * _2986) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _2986) + _2945) * _2959))) * _2959;
        float _5024 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2968 / ((_2972 * _2972) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2467 : (isnan(_2467) ? 1.0 : min(_2467, 1.0));
        _2920 = (((((_2979 * _2750) + _1117) * cbLight._m0[_2930].x) * _2998) * _2999) + _2862;
        _2922 = (((((_2979 * _2752) + _1119) * cbLight._m0[_2930].y) * _2998) * _2999) + _2863;
        _2924 = (((((_2979 * _2753) + _1120) * cbLight._m0[_2930].z) * _2998) * _2999) + _2864;
    }
    float _3030;
    float _3032;
    float _3034;
    if (_2637)
    {
        _3030 = _2920;
        _3032 = _2922;
        _3034 = _2924;
    }
    else
    {
        uint _3041 = _2452 + 3u;
        uint _3045 = _2452 + 11u;
        float _3059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3041].w)) * _955) * 0.949999988079071044921875);
        float _3060 = _3059 * _3059;
        float _3061 = cbLight._m0[_3041].x + _1037;
        float _3062 = cbLight._m0[_3041].y + _1038;
        float _3063 = cbLight._m0[_3041].z + _1039;
        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
        float _3068 = _3067 * _3061;
        float _3069 = _3067 * _3062;
        float _3070 = _3067 * _3063;
        float _3071 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_3041].xyz));
        float _5040 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3074 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
        float _3075 = dot(vec3(_952, _953, _954), vec3(_3068, _3069, _3070));
        float _5051 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3078 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
        float _3079 = dot(vec3(cbLight._m0[_3041].xyz), vec3(_3068, _3069, _3070));
        float _5062 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3083 = _3060 * _3060;
        float _3087 = ((_3078 * _3078) * (_3083 + (-1.0))) + 1.0;
        float _3094 = exp2(log2(1.0 - (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0)))) * 5.0);
        float _3101 = 1.0 - _3060;
        float _3111 = (0.5 / (((_2728 * ((_3074 * _3101) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _3101) + _3060) * _3074))) * _3074;
        float _5073 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
        float _3113 = (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3083 / ((_3087 * _3087) * 3.141590118408203125));
        float _3114 = isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0));
        _3030 = (((((_3094 * _2750) + _1117) * cbLight._m0[_3045].x) * _3113) * _3114) + _2920;
        _3032 = (((((_3094 * _2752) + _1119) * cbLight._m0[_3045].y) * _3113) * _3114) + _2922;
        _3034 = (((((_3094 * _2753) + _1120) * cbLight._m0[_3045].z) * _3113) * _3114) + _2924;
    }
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_2450.y == 0u)
    {
        uvec4 _3135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3136 = _3135.x;
        uint _3147 = uint((float(_3135.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _3136))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _3136)));
        float _3157 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3158 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
        uint _3161 = uint(isnan(14.0) ? _3158 : (isnan(_3158) ? 14.0 : min(_3158, 14.0)));
        uvec4 _3166 = texelFetch(g_lightClusterGridBuffer, int(((_3161 << 2u) + (_3147 << 6u)) >> 2u));
        uint _3167 = _3166.x;
        uint _3168 = _3135.z;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        if (((((1u << ((_3168 >> 4u) & 15u)) + 4294967295u) & _3167) == 0u) || ((_3168 & 240u) == 0u))
        {
            _3276 = 0.0;
            _3278 = 0.0;
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
        }
        else
        {
            float _3277;
            float _3279;
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3437 = 0.0;
            float _3438 = 0.0;
            float _3439 = 0.0;
            float _3440 = 0.0;
            float _3441 = 0.0;
            float _3442 = 0.0;
            uint _3443 = 0u;
            uint _3452;
            bool _3453;
            for (;;)
            {
                _3452 = texelFetch(g_lightClassification, int((((_3161 << 5u) + (_3147 << 9u)) + (_3443 << 2u)) >> 2u)).x;
                _3453 = _3452 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3453)
                {
                    frontier_phi_73_pred = _3442;
                    frontier_phi_73_pred_1 = _3441;
                    frontier_phi_73_pred_2 = _3440;
                    frontier_phi_73_pred_3 = _3439;
                    frontier_phi_73_pred_4 = _3438;
                    frontier_phi_73_pred_5 = _3437;
                }
                else
                {
                    float _3582;
                    float _3583;
                    float _3584;
                    float _3585;
                    float _3586;
                    float _3587;
                    uint _3588;
                    _3582 = _3437;
                    _3583 = _3438;
                    _3584 = _3439;
                    _3585 = _3440;
                    _3586 = _3441;
                    _3587 = _3442;
                    _3588 = _3452;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    for (;;)
                    {
                        uint _3592 = uint(findLSB(_3588)) + (_3443 << 5u);
                        uint _3589 = (_3588 + 4294967295u) & _3588;
                        uint _3594 = _3592 * 48u;
                        vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3594)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 3u)).x));
                        uint _3614 = (_3592 * 48u) + 4u;
                        vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3614)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 3u)).x));
                        uint _3633 = (_3592 * 48u) + 8u;
                        vec3 _3644 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3633)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 2u)).x));
                        float _3648 = _3608.x - _2227;
                        float _3649 = _3608.y - _2228;
                        float _3650 = _3608.z - _2229;
                        float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                        float _3654 = inversesqrt(_3651);
                        float _3655 = _3654 * _3648;
                        float _3656 = _3654 * _3649;
                        float _3657 = _3654 * _3650;
                        float _3658 = dot(vec3(_1073, _1076, _1079), vec3(_3655, _3656, _3657));
                        float _3663 = 1.0 - (_3651 * _3608.w);
                        float _5099 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3664 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3665 = sqrt(_3651) * _3627.w;
                        float _3668 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                        float _3669 = _3668 * _3668;
                        float _3672 = ((1.0 - _3669) * _3658) + _3669;
                        float _3675 = _3665 * _3665;
                        float _3679 = ((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3664) / ((_3675 * 0.699999988079071044921875) + 1.0);
                        float _3683 = (-0.0) - _2227;
                        float _3684 = (-0.0) - _2228;
                        float _3685 = (-0.0) - _2229;
                        float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                        float _3690 = _3689 * _3683;
                        float _3691 = _3689 * _3684;
                        float _3692 = _3689 * _3685;
                        float _3699 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                        float _3700 = 1.0 - _1148;
                        float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                        float _3708 = _3707 * _3707;
                        float _3709 = _3708 * _3708;
                        float _3710 = _3690 + _3655;
                        float _3711 = _3691 + _3656;
                        float _3712 = _3692 + _3657;
                        float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                        float _3720 = dot(vec3(_1073, _1076, _1079), vec3(_3690, _3691, _3692));
                        float _5115 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                        float _3723 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                        float _3724 = dot(vec3(_1073, _1076, _1079), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                        float _5126 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                        float _3727 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                        float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                        float _3732 = _3668 * _3708;
                        float _3733 = _3732 * _3732;
                        float _3736 = ((1.0 - _3733) * _3658) + _3733;
                        float _5137 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                        float _3737 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                        float _3738 = 1.0 - _3708;
                        float _3748 = (0.5 / (((_3737 * ((_3723 * _3738) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3708) * _3723))) * _3737;
                        float _5148 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                        float _3759 = (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0)))) / ((_3731 * _3731) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125))) * _3664;
                        _3512 = (_3679 * _3627.x) + _3585;
                        _3513 = (_3679 * _3627.y) + _3586;
                        _3514 = (_3679 * _3627.z) + _3587;
                        _3509 = (_3759 * _3644.x) + _3582;
                        _3510 = (_3759 * _3644.y) + _3583;
                        _3511 = (_3759 * _3644.z) + _3584;
                        if (_3589 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3582 = _3509;
                            _3583 = _3510;
                            _3584 = _3511;
                            _3585 = _3512;
                            _3586 = _3513;
                            _3587 = _3514;
                            _3588 = _3589;
                        }
                    }
                    frontier_phi_73_pred = _3514;
                    frontier_phi_73_pred_1 = _3513;
                    frontier_phi_73_pred_2 = _3512;
                    frontier_phi_73_pred_3 = _3511;
                    frontier_phi_73_pred_4 = _3510;
                    frontier_phi_73_pred_5 = _3509;
                }
                _3287 = frontier_phi_73_pred;
                _3285 = frontier_phi_73_pred_1;
                _3283 = frontier_phi_73_pred_2;
                _3281 = frontier_phi_73_pred_3;
                _3279 = frontier_phi_73_pred_4;
                _3277 = frontier_phi_73_pred_5;
                uint _3444 = _3443 + 1u;
                if (_3444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3437 = _3277;
                    _3438 = _3279;
                    _3439 = _3281;
                    _3440 = _3283;
                    _3441 = _3285;
                    _3442 = _3287;
                    _3443 = _3444;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3276 = _3277;
            _3278 = _3279;
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
        }
        uvec4 _3290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3291 = _3290.z;
        uint _3293 = (_3291 >> 8u) & 15u;
        float _3405;
        float _3407;
        float _3409;
        float _3411;
        float _3413;
        float _3415;
        if (((4294967295u << _3293) & _3167) == 0u)
        {
            _3405 = _3276;
            _3407 = _3278;
            _3409 = _3280;
            _3411 = _3282;
            _3413 = _3284;
            _3415 = _3286;
        }
        else
        {
            float _3430 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _3431 = _3430 * _2227;
            float _3432 = _3430 * _2228;
            float _3433 = _3430 * _2229;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3293 < ((_3291 >> 12u) & 15u))
            {
                float _3406;
                float _3408;
                float _3410;
                float _3412;
                float _3414;
                float _3416;
                float _3565 = _3276;
                float _3566 = _3278;
                float _3567 = _3280;
                float _3568 = _3282;
                float _3569 = _3284;
                float _3570 = _3286;
                uint _3571 = _3293;
                uint _3580;
                bool _3581;
                for (;;)
                {
                    _3580 = texelFetch(g_lightClassification, int((((_3161 << 5u) + (_3147 << 9u)) + (_3571 << 2u)) >> 2u)).x;
                    _3581 = _3580 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3581)
                    {
                        frontier_phi_84_pred = _3570;
                        frontier_phi_84_pred_1 = _3569;
                        frontier_phi_84_pred_2 = _3568;
                        frontier_phi_84_pred_3 = _3567;
                        frontier_phi_84_pred_4 = _3566;
                        frontier_phi_84_pred_5 = _3565;
                    }
                    else
                    {
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _4066;
                        float _4067;
                        float _4068;
                        float _4069;
                        float _4070;
                        float _4071;
                        float _3786 = _3565;
                        float _3787 = _3566;
                        float _3788 = _3567;
                        float _3789 = _3568;
                        float _3790 = _3569;
                        float _3791 = _3570;
                        uint _3792 = _3580;
                        uint _3793;
                        vec4 _3818;
                        float _3819;
                        vec4 _3834;
                        vec3 _3846;
                        vec4 _3861;
                        vec4 _3876;
                        float _3922;
                        bool _3923;
                        for (;;)
                        {
                            uint _3803 = ((_3571 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3792));
                            _3793 = (_3792 + 4294967295u) & _3792;
                            uint _3805 = _3803 * 40u;
                            _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            _3819 = _3818.w;
                            uint _3821 = (_3803 * 40u) + 4u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3803 * 40u) + 8u;
                            _3846 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x));
                            uint _3848 = (_3803 * 40u) + 16u;
                            _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            uint _3863 = (_3803 * 40u) + 20u;
                            _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            uint _3878 = (_3803 * 40u) + 24u;
                            vec4 _3891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 3u)).x));
                            uint _3897 = (_3803 * 40u) + 28u;
                            vec4 _3910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 3u)).x));
                            _3922 = fma(_2229, _3910.z, fma(_2228, _3910.y, _3910.x * _2227)) + _3910.w;
                            _3923 = !((fma(_2229, _3891.z, fma(_2228, _3891.y, _3891.x * _2227)) + _3891.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3923)
                            {
                                float _3950 = _3818.x - _2227;
                                float _3951 = _3818.y - _2228;
                                float _3952 = _3818.z - _2229;
                                float _3953 = dot(vec3(_3950, _3951, _3952), vec3(_3950, _3951, _3952));
                                float _3956 = inversesqrt(_3953);
                                float _3957 = _3956 * _3950;
                                float _3958 = _3956 * _3951;
                                float _3959 = _3956 * _3952;
                                float _3963 = 1.0 - (_3953 / (_3819 * _3819));
                                float _5159 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3964 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3968 = sqrt(_3953) * _3834.w;
                                float _3970 = 1.39999997615814208984375 / (_3968 + 1.39999997615814208984375);
                                float _3971 = _3970 * _3970;
                                float _3974 = ((1.0 - _3971) * dot(vec3(_3957, _3958, _3959), vec3(_1073, _1076, _1079))) + _3971;
                                float _3977 = _3968 * _3968;
                                float _3981 = (fma(_2229, _3861.z, fma(_2228, _3861.y, _3861.x * _2227)) + _3861.w) / _3922;
                                float _3982 = (fma(_2229, _3876.z, fma(_2228, _3876.y, _3876.x * _2227)) + _3876.w) / _3922;
                                float _3986 = 1.0 - dot(vec2(_3981, _3982), vec2(_3981, _3982));
                                float _5175 = isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0));
                                float _3987 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
                                float _3988 = _3987 * (((isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0))) * _3964) / ((_3977 * 0.699999988079071044921875) + 1.0));
                                float _4000 = exp2(log2(1.0 / ((_3977 * 3.5) + 5.0)) * 0.25);
                                float _4001 = 1.0 - _1148;
                                float _4008 = sqrt(1.0 - ((1.0 - (_4001 * _4001)) * (1.0 - (_4000 * _4000))));
                                float _4009 = _4008 * _4008;
                                float _4010 = _4009 * _4009;
                                float _4011 = _3957 - _3431;
                                float _4012 = _3958 - _3432;
                                float _4013 = _3959 - _3433;
                                float _4017 = inversesqrt(dot(vec3(_4011, _4012, _4013), vec3(_4011, _4012, _4013)));
                                float _4021 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3431, (-0.0) - _3432, (-0.0) - _3433));
                                float _5186 = isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0));
                                float _4024 = isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0));
                                float _4025 = dot(vec3(_1073, _1076, _1079), vec3(_4017 * _4011, _4017 * _4012, _4017 * _4013));
                                float _5197 = isnan(0.0) ? _4025 : (isnan(_4025) ? 0.0 : max(_4025, 0.0));
                                float _4028 = isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0));
                                float _4032 = ((_4028 * _4028) * (_4010 + (-1.0))) + 1.0;
                                float _4033 = _3970 * _4009;
                                float _4034 = _4033 * _4033;
                                float _4040 = ((1.0 - _4034) * dot(vec3(_1073, _1076, _1079), vec3(_3957, _3958, _3959))) + _4034;
                                float _5208 = isnan(0.0) ? _4040 : (isnan(_4040) ? 0.0 : max(_4040, 0.0));
                                float _4041 = isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0));
                                float _4042 = 1.0 - _4009;
                                float _4052 = (0.5 / (((_4041 * ((_4024 * _4042) + _4009)) + 9.9999999392252902907785028219223e-09) + (((_4041 * _4042) + _4009) * _4024))) * _4041;
                                float _5219 = isnan(0.0) ? _4052 : (isnan(_4052) ? 0.0 : max(_4052, 0.0));
                                float _4062 = (_3987 * _3964) * (((_4010 * 3.1415927410125732421875) * (isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0)))) / ((_4032 * _4032) * ((_3977 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3988 * _3834.z;
                                frontier_phi_90_pred_1 = _3988 * _3834.y;
                                frontier_phi_90_pred_2 = _3988 * _3834.x;
                                frontier_phi_90_pred_3 = _4062 * _3846.z;
                                frontier_phi_90_pred_4 = _4062 * _3846.y;
                                frontier_phi_90_pred_5 = _4062 * _3846.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4071 = frontier_phi_90_pred;
                            _4070 = frontier_phi_90_pred_1;
                            _4069 = frontier_phi_90_pred_2;
                            _4068 = frontier_phi_90_pred_3;
                            _4067 = frontier_phi_90_pred_4;
                            _4066 = frontier_phi_90_pred_5;
                            _3776 = _4069 + _3789;
                            _3777 = _4070 + _3790;
                            _3778 = _4071 + _3791;
                            _3773 = _4066 + _3786;
                            _3774 = _4067 + _3787;
                            _3775 = _4068 + _3788;
                            if (_3793 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3786 = _3773;
                                _3787 = _3774;
                                _3788 = _3775;
                                _3789 = _3776;
                                _3790 = _3777;
                                _3791 = _3778;
                                _3792 = _3793;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3778;
                        frontier_phi_84_pred_1 = _3777;
                        frontier_phi_84_pred_2 = _3776;
                        frontier_phi_84_pred_3 = _3775;
                        frontier_phi_84_pred_4 = _3774;
                        frontier_phi_84_pred_5 = _3773;
                    }
                    _3416 = frontier_phi_84_pred;
                    _3414 = frontier_phi_84_pred_1;
                    _3412 = frontier_phi_84_pred_2;
                    _3410 = frontier_phi_84_pred_3;
                    _3408 = frontier_phi_84_pred_4;
                    _3406 = frontier_phi_84_pred_5;
                    uint _3572 = _3571 + 1u;
                    if (_3572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3565 = _3406;
                        _3566 = _3408;
                        _3567 = _3410;
                        _3568 = _3412;
                        _3569 = _3414;
                        _3570 = _3416;
                        _3571 = _3572;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3412;
                frontier_phi_65_66_ladder_1 = _3416;
                frontier_phi_65_66_ladder_2 = _3414;
                frontier_phi_65_66_ladder_3 = _3410;
                frontier_phi_65_66_ladder_4 = _3408;
                frontier_phi_65_66_ladder_5 = _3406;
            }
            else
            {
                frontier_phi_65_66_ladder = _3282;
                frontier_phi_65_66_ladder_1 = _3286;
                frontier_phi_65_66_ladder_2 = _3284;
                frontier_phi_65_66_ladder_3 = _3280;
                frontier_phi_65_66_ladder_4 = _3278;
                frontier_phi_65_66_ladder_5 = _3276;
            }
            _3405 = frontier_phi_65_66_ladder_5;
            _3407 = frontier_phi_65_66_ladder_4;
            _3409 = frontier_phi_65_66_ladder_3;
            _3411 = frontier_phi_65_66_ladder;
            _3413 = frontier_phi_65_66_ladder_2;
            _3415 = frontier_phi_65_66_ladder_1;
        }
        float _3420 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _3180 = (_3420 * _3411) + _2692;
        _3182 = (_3420 * _3413) + _2694;
        _3184 = (_3420 * _3415) + _2696;
        _3186 = ((_3405 * _1117) * _3420) + _3030;
        _3188 = ((_3407 * _1119) * _3420) + _3032;
        _3190 = ((_3409 * _1120) * _3420) + _3034;
    }
    else
    {
        _3180 = _2692;
        _3182 = _2694;
        _3184 = _2696;
        _3186 = _3030;
        _3188 = _3032;
        _3190 = _3034;
    }
    uint _3196 = _1093 + uint(cbMatDynParam._m0[0u].w);
    float _3202 = ((((((_865.x - _860.x) * _843) + _860.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _789) * cbMtdParam._m0[20u].x)) * _798) * cbInstanceData._m0[_3196].x;
    float _3203 = ((((((_865.y - _860.y) * _843) + _860.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_778.y - _776) * _757) + _776)) * cbMtdParam._m0[20u].y)) * _798) * cbInstanceData._m0[_3196].y;
    float _3204 = ((((((_865.z - _860.z) * _843) + _860.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_778.z - _777) * _757) + _777)) * cbMtdParam._m0[20u].z)) * _798) * cbInstanceData._m0[_3196].z;
    float _5235 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _5246 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _5257 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _3221 = (((isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0))) * (_3180 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1132))) + ((_3186 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1961)) * cbPerFrame._m0[3u].x)) + _3202;
    float _3223 = (_3203 + ((_3188 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1961)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0))) * (_3182 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1132)));
    float _3225 = (_3204 + ((_3190 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1961)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5257 : (isnan(_5257) ? 1.0 : min(_5257, 1.0))) * (_3184 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1132)));
    float _3226 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
    float _3227 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
    float _3228 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
    float _3234 = cbMtdParam._m0[2u].x * _3202;
    float _3235 = cbMtdParam._m0[2u].y * _3203;
    float _3236 = cbMtdParam._m0[2u].z * _3204;
    float _5283 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3238 = isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0));
    uint _3239 = _1092 + 6u;
    float _3247 = _1054 / cbSceneParam._m0[86u].x;
    float _3248 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _3262 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, (log2((isnan(cbSceneParam._m0[77u].w) ? _979 : (isnan(_979) ? cbSceneParam._m0[77u].w : min(_979, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3264 = _3262.x;
    float _3265 = _3262.y;
    float _3266 = _3262.z;
    float _3267 = _3262.w;
    float _3338;
    float _3340;
    float _3342;
    float _3344;
    if (_979 > cbSceneParam._m0[78u].w)
    {
        float _3301 = isnan(_979) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _979 : min(cbSceneParam._m0[80u].w, _979));
        float _3302 = _3301 / _979;
        float _3313 = _3302 * _1030;
        float _3314 = _1031 * _3302;
        float _3315 = (-0.0) - _3314;
        float _3316 = _3302 * _1032;
        float _3318 = (cbSceneParam._m0[77u].w * _3315) / _3301;
        float _3319 = _3318 + cbSceneParam._m0[79u].w;
        float _3320 = cbSceneParam._m0[79u].w - _3314;
        float _3326 = sqrt(((_3313 * _3313) + (_3314 * _3314)) + (_3316 * _3316));
        float _3329 = (1.0 - (cbSceneParam._m0[77u].w / _3301)) * _3326;
        float _3334 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3336 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3522;
        if (abs((_3315 - _3318) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3522 = ((((_3319 > 0.0) ? exp2(_3334 * _3319) : (2.0 - exp2(_3336 * _3319))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3329;
        }
        else
        {
            float _3466 = 1.0 / cbSceneParam._m0[80u].x;
            float _3467 = isnan(_3320) ? _3319 : (isnan(_3319) ? _3320 : max(_3319, _3320));
            float _3468 = isnan(_3320) ? _3319 : (isnan(_3319) ? _3320 : min(_3319, _3320));
            float _3477 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : min(_3467, 0.0));
            float _3478 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : min(_3468, 0.0));
            _3522 = ((abs(_3326 / _3315) * cbSceneParam._m0[80u].y) * ((((_3477 - _3478) * 2.0) - ((exp2(_3334 * (isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0)))) - exp2(_3334 * (isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))))) * _3466)) - ((exp2(_3336 * _3477) - exp2(_3336 * _3478)) * _3466))) + (_3329 * cbSceneParam._m0[80u].z);
        }
        vec4 _3524 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, 1.0), 0.0);
        float _3533 = exp2((_3522 * (-1.44269502162933349609375)) * (1.0 - _3524.w));
        float _3534 = log2(_3533);
        float _3550 = log2(_3267);
        _3338 = (exp2(_3550 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3534 * cbSceneParam._m0[78u].x)) * _3524.x) / cbSceneParam._m0[78u].x)) + _3264;
        _3340 = (exp2(_3550 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3534 * cbSceneParam._m0[78u].y)) * _3524.y) / cbSceneParam._m0[78u].y)) + _3265;
        _3342 = (exp2(_3550 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3534 * cbSceneParam._m0[78u].z)) * _3524.z) / cbSceneParam._m0[78u].z)) + _3266;
        _3344 = _3533 * _3267;
    }
    else
    {
        _3338 = _3264;
        _3340 = _3265;
        _3342 = _3266;
        _3344 = _3267;
    }
    bool _3560;
    vec4 _3354;
    vec4 _3376;
    float _3378;
    float _3382;
    float _3383;
    float _3384;
    float _3387;
    float _3390;
    float _3393;
    float _3394;
    bool _3404;
    for (;;)
    {
        _3354 = cbMatDynParam._m0[0u];
        float _3356 = roundEven(_3354.y);
        bool _3357 = _3356 == 3.0;
        float _3358 = log2(_3344);
        float _3362 = exp2(_3358 * cbSceneParam._m0[78u].x);
        float _3363 = exp2(_3358 * cbSceneParam._m0[78u].y);
        float _3364 = exp2(_3358 * cbSceneParam._m0[78u].z);
        float _3365 = _3362 * _3226;
        float _3366 = _3363 * _3227;
        float _3367 = _3364 * _3228;
        float _3374 = _1043 + (-0.5);
        _3376 = cbMtdParam._m0[1u];
        _3378 = _3376.y * _3374;
        float _3381 = (_3356 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3382 = _3381 * (_3357 ? _3365 : (_3365 + (cbSceneParam._m0[72u].w * _3338)));
        _3383 = _3381 * (_3357 ? _3366 : (_3366 + (cbSceneParam._m0[72u].w * _3340)));
        _3384 = _3381 * (_3357 ? _3367 : (_3367 + (cbSceneParam._m0[72u].w * _3342)));
        _3387 = ((_3234 * _3238) * _3362) * _3381;
        _3390 = ((_3235 * _3238) * _3363) * _3381;
        _3393 = ((_3236 * _3238) * _3364) * _3381;
        _3394 = _3374 * 0.999000012874603271484375;
        _3404 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3404)
        {
            if ((cbInstanceData._m0[_1092 + 7u].x + _3394) < 0.5)
            {
                _3560 = true;
                break;
            }
        }
        uint _3501 = _1093 + uint(_3354.w);
        if ((cbInstanceData._m0[_3501].w < 1.0) && ((cbInstanceData._m0[_3501].w + _3394) < 0.5))
        {
            _3560 = true;
            break;
        }
        if ((_3378 + 1.0) < _3376.x)
        {
            _3560 = true;
            break;
        }
        _3560 = false;
        break;
    }
    float _3764;
    if (_3560)
    {
        discard_state = true;
        _3764 = 0.0;
    }
    else
    {
        _3764 = cbInstanceData._m0[_3239].w;
    }
    SV_Target.x = _3382;
    SV_Target.y = _3383;
    SV_Target.z = _3384;
    SV_Target.w = _3764;
    SV_Target_1.x = _3387;
    SV_Target_1.y = _3390;
    SV_Target_1.z = _3393;
    SV_Target_1.w = cbInstanceData._m0[_3239].w;
    discard_exit();
}


