#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1397;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _259 = log2(0.0);
    float _261 = exp2(_259 * cbMtdParam._m0[24u].x);
    float _262 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _262 : (isnan(_262) ? 1.0 : min(_262, 1.0));
    vec4 _277 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _281 = _277.z;
    float _289 = exp2(log2(_281 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _290 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    float _312 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(4.0) ? _313 : (isnan(_313) ? 4.0 : min(_313, 4.0));
    float _327 = floor(_314);
    vec4 _330 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _327));
    vec4 _355 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _366 = cbMtdParam._m0[9u].x * _355.x;
    float _367 = cbMtdParam._m0[9u].y * _355.y;
    float _368 = cbMtdParam._m0[9u].z * _355.z;
    float _375 = (((cbMtdParam._m0[10u].x * _330.x) - _366) * _291) + _366;
    float _376 = (((cbMtdParam._m0[10u].y * _330.y) - _367) * _291) + _367;
    float _377 = (((cbMtdParam._m0[10u].z * _330.z) - _368) * _291) + _368;
    float _383 = exp2(log2(_277.w) * cbMtdParam._m0[24u].w);
    vec4 _396 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _416 = (((cbMtdParam._m0[16u].x * _396.x) - _375) * _383) + _375;
    float _417 = (((cbMtdParam._m0[16u].y * _396.y) - _376) * _383) + _376;
    float _418 = (((cbMtdParam._m0[16u].z * _396.z) - _377) * _383) + _377;
    vec4 _431 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _456 = (_249.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _431.x) - _416) * _263) + _416);
    float _458 = (_249.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _431.y) - _417) * _263) + _417);
    float _460 = (_249.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _431.z) - _418) * _263) + _418);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[30u].z;
    _185[0u] = cbMtdParam._m0[30u].w;
    _184[1u] = cbMtdParam._m0[32u].z;
    _185[1u] = cbMtdParam._m0[32u].w;
    _184[2u] = cbMtdParam._m0[32u].x;
    _185[2u] = cbMtdParam._m0[32u].y;
    _184[3u] = cbMtdParam._m0[31u].z;
    _185[3u] = cbMtdParam._m0[31u].w;
    _184[4u] = cbMtdParam._m0[31u].x;
    _185[4u] = cbMtdParam._m0[31u].y;
    float _499 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    uint _501 = uint(int(isnan(4.0) ? _499 : (isnan(_499) ? 4.0 : min(_499, 4.0))));
    float _508 = ((_185[_501] - cbMtdParam._m0[23u].z) * _291) + cbMtdParam._m0[23u].z;
    float _511 = ((cbMtdParam._m0[23u].w - _508) * _383) + _508;
    float _514 = ((cbMtdParam._m0[26u].y - _511) * _263) + _511;
    vec4 _529 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _327));
    vec4 _547 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _555 = cbMtdParam._m0[23u].x + _547.z;
    float _558 = (((_529.z + _184[_501]) - _555) * _291) + _555;
    vec4 _570 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _581 = (((_570.z - _558) + cbMtdParam._m0[30u].x) * _383) + _558;
    float _587 = ((((_281 * 2.0) * _581) - _581) * cbMtdParam._m0[25u].w) + _581;
    vec4 _599 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _610 = (((cbMtdParam._m0[24u].z + _599.z) - _587) * _263) + _587;
    float _623 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _646 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_623 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _623) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _650 = cbPerFrame._m0[22u].x * 2.0;
    float _651 = _650 * cbMtdParam._m0[28u].z;
    float _654 = (_646.x * 0.5) + (-0.25);
    float _657 = (_646.y * 0.5) + (-0.25);
    float _658 = _657 * cbMtdParam._m0[28u].y;
    float _660 = (-0.0) - (cbMtdParam._m0[28u].y * _654);
    float _662 = fract(_651);
    float _664 = fract(_651 + 0.5);
    float _676 = abs((_662 * 2.0) + (-1.0));
    vec4 _693 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_662 * _660) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_658 * _662) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _695 = _693.x;
    float _696 = _693.y;
    float _697 = _693.z;
    vec4 _698 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_664 * _660) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_658 * _664) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _709 = ((_698.x - _695) * _676) + _695;
    float _716 = exp2(log2(_709 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _717 = isnan(cbMtdParam._m0[29u].y) ? _716 : (isnan(_716) ? cbMtdParam._m0[29u].y : max(_716, cbMtdParam._m0[29u].y));
    float _718 = isnan(cbMtdParam._m0[29u].z) ? _717 : (isnan(_717) ? cbMtdParam._m0[29u].z : min(_717, cbMtdParam._m0[29u].z));
    float _742 = (cbMtdParam._m0[33u].x * _623) + TEXCOORD;
    float _743 = (cbMtdParam._m0[33u].y * _623) + TEXCOORD_1;
    float _746 = _650 * cbMtdParam._m0[27u].w;
    float _747 = _657 * cbMtdParam._m0[27u].z;
    float _749 = (-0.0) - (cbMtdParam._m0[27u].z * _654);
    float _750 = fract(_746);
    float _752 = fract(_746 + 0.5);
    float _763 = abs((_750 * 2.0) + (-1.0));
    vec4 _780 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_750 * _749) + _742) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_747 * _750) + _743) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _785 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_752 * _749) + _742) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_747 * _752) + _743) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _819 = ((_529.x - _549) * _291) + _549;
    float _820 = ((_529.y - _550) * _291) + _550;
    float _825 = ((_570.x - _819) * _383) + _819;
    float _826 = ((_570.y - _820) * _383) + _820;
    float _835 = ((((_599.x - _825) * _263) + _825) * 2.0) + (-1.0);
    float _836 = ((((_599.y - _826) * _263) + _826) * 2.0) + (-1.0);
    float _837 = dot(vec2(_835, _836), vec2(_835, _836));
    float _3832 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _842 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    float _845 = (cbMtdParam._m0[26u].z * ((_277.x * 2.0) + (-1.0))) + _835;
    float _846 = (cbMtdParam._m0[26u].z * ((_277.y * 2.0) + (-1.0))) + _836;
    float _849 = fma(_842, _225 * NORMAL.x, fma(_846, _232 * TANGENT.x, (_218 * _210) * _845));
    float _852 = fma(_842, _225 * NORMAL.y, fma(_846, _232 * TANGENT.y, (_218 * _211) * _845));
    float _855 = fma(_842, _225 * NORMAL.z, fma(_846, _232 * TANGENT.z, (_218 * _212) * _845));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    float _860 = _859 * _849;
    float _861 = _859 * _852;
    float _862 = _859 * _855;
    float _3843 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _863 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3865 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3876 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3887 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _867 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _883 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    float _949 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _950 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _968 = fma(_862, cbSceneParam._m0[5u].z, fma(_861, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _860));
    float _971 = fma(_862, cbSceneParam._m0[6u].z, fma(_861, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _860));
    float _974 = fma(_862, cbSceneParam._m0[7u].z, fma(_861, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _860));
    uint _987 = uint(roundEven(NORMAL.w)) * 13u;
    uint _988 = _987 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_989].z;
    float _3898 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _1001 = 1.0 - _867;
    float _1002 = _998 * _1001;
    float _1003 = _999 * _1001;
    float _1004 = _1000 * _1001;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _867;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _867;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _867;
    float _1012 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    vec4 _1024 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _949, cbSceneParam._m0[86u].y * _950));
    float _1027 = _1024.x * TEXCOORD_3.w;
    float _1028 = dot(vec3(_860, _861, _862), vec3(_941, _942, _943));
    float _1031 = _1028 * 2.0;
    float _1035 = (_1031 * _860) - _941;
    float _1036 = (_1031 * _861) - _942;
    float _1037 = (_1031 * _862) - _943;
    float _1041 = abs(dot(vec3(_941, _942, _943), vec3(_860, _861, _862)));
    float _3931 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1043 = sqrt(_863);
    float _1054 = exp2((_1043 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1043 * 3.0));
    float _1060 = (1.0 - _1054) * ((_1043 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1061 = _1054 * _1043;
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1123 = fma(_1097, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089));
        float _1127 = fma(_1097, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089));
        float _1131 = fma(_1097, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089));
        float _1155 = _1089 + _860;
        float _1156 = _1093 + _861;
        float _1157 = _1097 + _862;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1123;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1127;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1131;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1185 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1123 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1127 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1131 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_860, _861, _862), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3979 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_860, _861, _862), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4012 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_860, _861, _862), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4045 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1434 = fma(_1097, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089));
        float _1438 = fma(_1097, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089));
        float _1442 = fma(_1097, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089));
        float _1465 = _1089 + _860;
        float _1466 = _1093 + _861;
        float _1467 = _1097 + _862;
        float _1477 = fma(_1467, cbModelParam._m0[30u].z, fma(_1466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1465)) - _1434;
        float _1478 = fma(_1467, cbModelParam._m0[31u].z, fma(_1466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1465)) - _1438;
        float _1479 = fma(_1467, cbModelParam._m0[32u].z, fma(_1466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1465)) - _1442;
        float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
        float _1496 = ((_1483 * _1477) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1434 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1483 * _1478) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1438 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1483 * _1479) / cbModelParam._m0[35u].z) + ((((((_1442 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1533 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1500.x + (-0.5));
        float _1535 = _1533 * (_1500.y + (-0.5));
        float _1536 = _1533 * (_1500.z + (-0.5));
        float _1543 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1507.x + (-0.5));
        float _1545 = _1543 * (_1507.y + (-0.5));
        float _1546 = _1543 * (_1507.z + (-0.5));
        float _1553 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1514.x + (-0.5));
        float _1555 = _1553 * (_1514.y + (-0.5));
        float _1556 = _1553 * (_1514.z + (-0.5));
        float _1563 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1521.x + (-0.5));
        float _1565 = _1563 * (_1521.y + (-0.5));
        float _1566 = _1563 * (_1521.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_860, _861, _862), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4108 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1597 + 1.0))) + _1602) * _1567;
        float _1612 = _1535 * 0.5;
        float _1613 = _1545 * 0.5;
        float _1614 = _1555 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_860, _861, _862), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4141 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1639 + 1.0))) + _1644) * _1568;
        float _1654 = _1536 * 0.5;
        float _1655 = _1546 * 0.5;
        float _1656 = _1556 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_860, _861, _862), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4174 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1681 + 1.0))) + _1686) * _1569;
        _1703 = _1536;
        _1704 = _1535;
        _1705 = _1534;
        _1706 = _1546;
        _1707 = _1545;
        _1708 = _1544;
        _1709 = _1556;
        _1710 = _1555;
        _1711 = _1554;
        _1712 = _1569;
        _1713 = _1568;
        _1714 = _1567;
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1397;
        _1704 = _1397;
        _1705 = _1397;
        _1706 = _1397;
        _1707 = _1397;
        _1708 = _1397;
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = 0.0;
        _1716 = 0.0;
        _1717 = 0.0;
    }
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1409)) + _1409;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1410)) + _1410;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1411)) + _1411;
    float _1750 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1727));
    float _1771 = _1035 * 0.5;
    float _1772 = _1036 * 0.5;
    float _1773 = _1037 * 0.5;
    float _1774 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1777 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1780 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1814;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1787 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1791 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1795 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1802 = dot(vec4(cbModelParam._m0[39u]), vec4(_1771, _1772, _1773, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1825;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1816 = dot(vec4(cbModelParam._m0[40u]), vec4(_1771, _1772, _1773, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1829 = (_1825 * cbModelParam._m0[1u].x) + (_1814 * (1.0 - cbModelParam._m0[1u].x));
    float _1839 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1839 : min(cbModelParam._m0[25u].z, _1839));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1097, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1097, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1097, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_1037, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035));
        float _1901 = fma(_1037, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035));
        float _1904 = fma(_1037, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1932 = frontier_phi_14_12_ladder;
        }
        float _2156;
        if (_1901 > 0.0)
        {
            _2156 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2156 = frontier_phi_23_19_ladder;
        }
        float _2413;
        if (_1904 > 0.0)
        {
            _2413 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2413 = frontier_phi_35_30_ladder;
        }
        float _2415 = isnan(_2156) ? _1932 : (isnan(_1932) ? _2156 : min(_1932, _2156));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1898) + _1887;
        float _2421 = (_2416 * _1901) + _1891;
        float _2422 = (_2416 * _1904) + _1895;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2423;
        float _2427 = _2423 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 > _2427) || ((_2421 < _2425) || ((_2420 < _2425) || (_2420 > _2427))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2422, cbModelParam._m0[9u].z, fma(_2421, cbModelParam._m0[9u].y, _2420 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2422, cbModelParam._m0[10u].z, fma(_2421, cbModelParam._m0[10u].y, _2420 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2422, cbModelParam._m0[11u].z, fma(_2421, cbModelParam._m0[11u].y, _2420 * cbModelParam._m0[11u].x))), _1840);
            frontier_phi_13_35_ladder = _2550.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2550.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2550.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_13_35_ladder_2;
        _1922 = frontier_phi_13_35_ladder_1;
        _1924 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1035, _1036, _1037), _1840);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1982 = fma(_1097, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089)) + cbModelParam._m0[21u].w;
        float _1986 = fma(_1097, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089)) + cbModelParam._m0[22u].w;
        float _1990 = fma(_1097, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089)) + cbModelParam._m0[23u].w;
        float _1993 = fma(_1037, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035));
        float _1996 = fma(_1037, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035));
        float _1999 = fma(_1037, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035));
        float _2161;
        if (_1993 > 0.0)
        {
            _2161 = abs((1.0 - _1982) / _1993);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1982 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2161 = frontier_phi_25_21_ladder;
        }
        float _2440;
        if (_1996 > 0.0)
        {
            _2440 = abs((1.0 - _1986) / _1996);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1986 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2440 = frontier_phi_37_32_ladder;
        }
        float _2653;
        if (_1999 > 0.0)
        {
            _2653 = abs((1.0 - _1990) / _1999);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1990 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2653 = frontier_phi_46_43_ladder;
        }
        float _2655 = isnan(_2440) ? _2161 : (isnan(_2161) ? _2440 : min(_2161, _2440));
        float _2656 = isnan(_2653) ? _2655 : (isnan(_2655) ? _2653 : min(_2655, _2653));
        float _2660 = (_2656 * _1993) + _1982;
        float _2661 = (_2656 * _1996) + _1986;
        float _2662 = (_2656 * _1999) + _1990;
        float _2663 = _2656 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2663;
        float _2666 = _2663 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2662 > _2666) || ((_2662 < _2664) || ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 < _2664) || (_2660 > _2666))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2662, cbModelParam._m0[17u].z, fma(_2661, cbModelParam._m0[17u].y, _2660 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2662, cbModelParam._m0[18u].z, fma(_2661, cbModelParam._m0[18u].y, _2660 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2662, cbModelParam._m0[19u].z, fma(_2661, cbModelParam._m0[19u].y, _2660 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_22_46_ladder = _2890.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2890.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2890.x * cbModelParam._m0[1u].z;
        }
        _2018 = frontier_phi_22_46_ladder_2;
        _2020 = frontier_phi_22_46_ladder_1;
        _2022 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1035, _1036, _1037), _1929);
        _2018 = _2002.x * cbModelParam._m0[1u].z;
        _2020 = _2002.y * cbModelParam._m0[1u].z;
        _2022 = _2002.z * cbModelParam._m0[1u].z;
    }
    float _2035 = (((_1060 * _1012) + _1061) * _1027) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2037 = (((_1060 * _1014) + _1061) * _1027) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1060 * _1015) + _1061) * _1027) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2042 = fma(_2039, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2035 * cbSceneParam._m0[89u].x));
    float _2045 = fma(_2039, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2035 * cbSceneParam._m0[90u].x));
    float _2048 = fma(_2039, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, _2035 * cbSceneParam._m0[91u].x));
    vec4 _2056 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_949, _950));
    float _2058 = _2056.w;
    float _2070 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2058);
    float _2071 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2058);
    float _2072 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2058);
    uvec4 _2076 = floatBitsToUint(cbInstanceData._m0[_987 + 5u]);
    uint _2078 = _2076.x * 14u;
    uint _2079 = _2078 + 13u;
    float _2086 = _1027 + (-1.0);
    float _2091 = (cbLight._m0[_2079].x * _2086) + 1.0;
    float _2092 = (cbLight._m0[_2079].y * _2086) + 1.0;
    float _2093 = (cbLight._m0[_2079].z * _2086) + 1.0;
    float _2094 = (cbLight._m0[_2079].w * _2086) + 1.0;
    uint _2095 = _2078 + 5u;
    float _2101 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2105 = _2078 + 4u;
    float _2114 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2118 = _2078 | 1u;
    float _2129 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_860, _861, _862));
    float _2132 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_860, _861, _862));
    float _4310 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _4321 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2137 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.3183098733425140380859375;
    float _2139 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2146 = ((cbLight._m0[_2095].x * _2101) * _2139) + (((cbLight._m0[_2105].x * _2070) * _2114) * _2137);
    float _2147 = ((_2101 * cbLight._m0[_2095].y) * _2139) + (((cbLight._m0[_2105].y * _2071) * _2114) * _2137);
    float _2148 = ((_2101 * cbLight._m0[_2095].z) * _2139) + (((cbLight._m0[_2105].z * _2072) * _2114) * _2137);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2078 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2155)
    {
        _2166 = _2146;
        _2168 = _2147;
        _2170 = _2148;
    }
    else
    {
        uint _2174 = _2078 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_2078 + 2u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4332 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2193 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2146;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2147;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2148;
    }
    bool _2173 = _2153.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2173)
    {
        _2211 = _2166;
        _2213 = _2168;
        _2215 = _2170;
    }
    else
    {
        uint _2384 = _2078 + 7u;
        float _2400 = (dot(vec3(cbLight._m0[_2078 + 3u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4348 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2403 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2211 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2166;
        _2213 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2168;
        _2215 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2170;
    }
    uint _2218 = _2078 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _863) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2078].x + _941;
    float _2234 = cbLight._m0[_2078].y + _942;
    float _2235 = cbLight._m0[_2078].z + _943;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2078].xyz));
    float _4364 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _4375 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _2247 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2248 = dot(vec3(_860, _861, _862), vec3(_2240, _2241, _2242));
    float _4386 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2240, _2241, _2242));
    float _4397 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _1009;
    float _2271 = 0.959999978542327880859375 - _1010;
    float _2272 = 0.959999978542327880859375 - _1011;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4408 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2306 = _2078 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _863) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2118].x + _941;
    float _2320 = cbLight._m0[_2118].y + _942;
    float _2321 = cbLight._m0[_2118].z + _943;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2118].xyz));
    float _4419 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2333 = dot(vec3(_860, _861, _862), vec3(_2326, _2327, _2328));
    float _4430 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2326, _2327, _2328));
    float _4441 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
    float _2359 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2247 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2359) + _2318) * _2332))) * _2332;
    float _4452 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2381 = (((((_2352 * _2269) + _1012) * cbLight._m0[_2306].x) * _2371) * _2101) + ((((cbLight._m0[_2218].x * _2070) * ((_2268 * _2269) + _1012)) * _2292) * _2114);
    float _2382 = (((((_2352 * _2271) + _1014) * cbLight._m0[_2306].y) * _2371) * _2101) + ((((cbLight._m0[_2218].y * _2071) * ((_2268 * _2271) + _1014)) * _2292) * _2114);
    float _2383 = (((((_2352 * _2272) + _1015) * cbLight._m0[_2306].z) * _2371) * _2101) + ((((cbLight._m0[_2218].z * _2072) * ((_2268 * _2272) + _1015)) * _2292) * _2114);
    float _2445;
    float _2447;
    float _2449;
    if (_2155)
    {
        _2445 = _2381;
        _2447 = _2382;
        _2449 = _2383;
    }
    else
    {
        uint _2451 = _2078 + 2u;
        uint _2455 = _2078 + 10u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _863) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _941;
        float _2472 = cbLight._m0[_2451].y + _942;
        float _2473 = cbLight._m0[_2451].z + _943;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2451].xyz));
        float _4463 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2485 = dot(vec3(_860, _861, _862), vec3(_2478, _2479, _2480));
        float _4474 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4485 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2247 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2511) + _2470) * _2484))) * _2484;
        float _4496 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2445 = (((((_2504 * _2269) + _1012) * cbLight._m0[_2455].x) * _2523) * _2524) + _2381;
        _2447 = (((((_2504 * _2271) + _1014) * cbLight._m0[_2455].y) * _2523) * _2524) + _2382;
        _2449 = (((((_2504 * _2272) + _1015) * cbLight._m0[_2455].z) * _2523) * _2524) + _2383;
    }
    float _2559;
    float _2561;
    float _2563;
    if (_2173)
    {
        _2559 = _2445;
        _2561 = _2447;
        _2563 = _2449;
    }
    else
    {
        uint _2570 = _2078 + 3u;
        uint _2574 = _2078 + 11u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _863) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _941;
        float _2591 = cbLight._m0[_2570].y + _942;
        float _2592 = cbLight._m0[_2570].z + _943;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2570].xyz));
        float _4512 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2604 = dot(vec3(_860, _861, _862), vec3(_2597, _2598, _2599));
        float _4523 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4534 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0);
        float _2630 = 1.0 - _2589;
        float _2640 = (0.5 / (((_2247 * ((_2603 * _2630) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2630) + _2589) * _2603))) * _2603;
        float _4545 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2559 = (((((_2623 * _2269) + _1012) * cbLight._m0[_2574].x) * _2642) * _2643) + _2445;
        _2561 = (((((_2623 * _2271) + _1014) * cbLight._m0[_2574].y) * _2642) * _2643) + _2447;
        _2563 = (((((_2623 * _2272) + _1015) * cbLight._m0[_2574].z) * _2642) * _2643) + _2449;
    }
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_2076.y == 0u)
    {
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2718;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2718;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2718;
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.x;
        uint _2745 = uint((float(_2733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _950) / _2734))) + floor(float(uint(cbSceneParam._m0[85u].x * _949) / _2734)));
        float _2755 = (log2(_2721 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2756 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        uint _2759 = uint(isnan(14.0) ? _2756 : (isnan(_2756) ? 14.0 : min(_2756, 14.0)));
        uvec4 _2764 = texelFetch(g_lightClusterGridBuffer, int(((_2759 << 2u) + (_2745 << 6u)) >> 2u));
        uint _2765 = _2764.x;
        uint _2766 = _2733.z;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((((1u << ((_2766 >> 4u) & 15u)) + 4294967295u) & _2765) == 0u) || ((_2766 & 240u) == 0u))
        {
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
        }
        else
        {
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            uint _3054 = 0u;
            uint _3063;
            bool _3064;
            for (;;)
            {
                _3063 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                _3064 = _3063 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3064)
                {
                    frontier_phi_61_pred = _3048;
                    frontier_phi_61_pred_1 = _3053;
                    frontier_phi_61_pred_2 = _3052;
                    frontier_phi_61_pred_3 = _3051;
                    frontier_phi_61_pred_4 = _3050;
                    frontier_phi_61_pred_5 = _3049;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3063;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3054 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _2719;
                        float _3239 = _3198.y - _2720;
                        float _3240 = _3198.z - _2721;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_968, _971, _974), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4571 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _2719;
                        float _3274 = (-0.0) - _2720;
                        float _3275 = (-0.0) - _2721;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3290 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _1043;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_968, _971, _974), vec3(_3280, _3281, _3282));
                        float _4587 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3315 = dot(vec3(_968, _971, _974), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4598 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3258 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3248) + _3324;
                        float _4609 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4620 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3350 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) / ((_3322 * _3322) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3107 = (_3269 * _3217.x) + _3175;
                        _3108 = (_3269 * _3217.y) + _3176;
                        _3109 = (_3269 * _3217.z) + _3177;
                        _3104 = (_3350 * _3234.x) + _3172;
                        _3105 = (_3350 * _3234.y) + _3173;
                        _3106 = (_3350 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_61_pred = _3104;
                    frontier_phi_61_pred_1 = _3109;
                    frontier_phi_61_pred_2 = _3108;
                    frontier_phi_61_pred_3 = _3107;
                    frontier_phi_61_pred_4 = _3106;
                    frontier_phi_61_pred_5 = _3105;
                }
                _2896 = frontier_phi_61_pred;
                _2906 = frontier_phi_61_pred_1;
                _2904 = frontier_phi_61_pred_2;
                _2902 = frontier_phi_61_pred_3;
                _2900 = frontier_phi_61_pred_4;
                _2898 = frontier_phi_61_pred_5;
                uint _3055 = _3054 + 1u;
                if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3048 = _2896;
                    _3049 = _2898;
                    _3050 = _2900;
                    _3051 = _2902;
                    _3052 = _2904;
                    _3053 = _2906;
                    _3054 = _3055;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
        }
        uvec4 _2909 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2910 = _2909.z;
        uint _2912 = (_2910 >> 8u) & 15u;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((4294967295u << _2912) & _2765) == 0u)
        {
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
        }
        else
        {
            float _3041 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
            float _3042 = _3041 * _2719;
            float _3043 = _3041 * _2720;
            float _3044 = _3041 * _2721;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2912 < ((_2910 >> 12u) & 15u))
            {
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3155 = _2895;
                float _3156 = _2897;
                float _3157 = _2899;
                float _3158 = _2901;
                float _3159 = _2903;
                float _3160 = _2905;
                uint _3161 = _2912;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3171)
                    {
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        uint _3374 = _3170;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3458;
                        float _3504;
                        bool _3505;
                        for (;;)
                        {
                            uint _3385 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3385 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3385 * 40u) + 24u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3479 = (_3385 * 40u) + 28u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3504 = fma(_2721, _3492.z, fma(_2720, _3492.y, _3492.x * _2719)) + _3492.w;
                            _3505 = !((fma(_2721, _3473.z, fma(_2720, _3473.y, _3473.x * _2719)) + _3473.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3505)
                            {
                                float _3532 = _3400.x - _2719;
                                float _3533 = _3400.y - _2720;
                                float _3534 = _3400.z - _2721;
                                float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                                float _3538 = inversesqrt(_3535);
                                float _3539 = _3538 * _3532;
                                float _3540 = _3538 * _3533;
                                float _3541 = _3538 * _3534;
                                float _3545 = 1.0 - (_3535 / (_3401 * _3401));
                                float _4631 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3550 = sqrt(_3535) * _3416.w;
                                float _3552 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                                float _3553 = _3552 * _3552;
                                float _3556 = ((1.0 - _3553) * dot(vec3(_3539, _3540, _3541), vec3(_968, _971, _974))) + _3553;
                                float _3559 = _3550 * _3550;
                                float _3563 = (fma(_2721, _3443.z, fma(_2720, _3443.y, _3443.x * _2719)) + _3443.w) / _3504;
                                float _3564 = (fma(_2721, _3458.z, fma(_2720, _3458.y, _3458.x * _2719)) + _3458.w) / _3504;
                                float _3568 = 1.0 - dot(vec2(_3563, _3564), vec2(_3563, _3564));
                                float _4647 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3570 = _3569 * (((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3546) / ((_3559 * 0.699999988079071044921875) + 1.0));
                                float _3582 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                                float _3583 = 1.0 - _1043;
                                float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                                float _3591 = _3590 * _3590;
                                float _3592 = _3591 * _3591;
                                float _3593 = _3539 - _3042;
                                float _3594 = _3540 - _3043;
                                float _3595 = _3541 - _3044;
                                float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                                float _3603 = dot(vec3(_968, _971, _974), vec3((-0.0) - _3042, (-0.0) - _3043, (-0.0) - _3044));
                                float _4658 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3607 = dot(vec3(_968, _971, _974), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                                float _4669 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                                float _3615 = _3552 * _3591;
                                float _3616 = _3615 * _3615;
                                float _3622 = ((1.0 - _3616) * dot(vec3(_968, _971, _974), vec3(_3539, _3540, _3541))) + _3616;
                                float _4680 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3624 = 1.0 - _3591;
                                float _3634 = (0.5 / (((_3623 * ((_3606 * _3624) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3591) * _3606))) * _3623;
                                float _4691 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3644 = (_3569 * _3546) * (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3614 * _3614) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3644 * _3428.x;
                                frontier_phi_73_pred_1 = _3644 * _3428.y;
                                frontier_phi_73_pred_2 = _3570 * _3416.z;
                                frontier_phi_73_pred_3 = _3570 * _3416.y;
                                frontier_phi_73_pred_4 = _3570 * _3416.x;
                                frontier_phi_73_pred_5 = _3644 * _3428.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_73_pred;
                            _3649 = frontier_phi_73_pred_1;
                            _3653 = frontier_phi_73_pred_2;
                            _3652 = frontier_phi_73_pred_3;
                            _3651 = frontier_phi_73_pred_4;
                            _3650 = frontier_phi_73_pred_5;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3358;
                        frontier_phi_67_pred_1 = _3359;
                        frontier_phi_67_pred_2 = _3360;
                        frontier_phi_67_pred_3 = _3357;
                        frontier_phi_67_pred_4 = _3356;
                        frontier_phi_67_pred_5 = _3355;
                    }
                    _3023 = frontier_phi_67_pred;
                    _3025 = frontier_phi_67_pred_1;
                    _3027 = frontier_phi_67_pred_2;
                    _3021 = frontier_phi_67_pred_3;
                    _3019 = frontier_phi_67_pred_4;
                    _3017 = frontier_phi_67_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _3017;
                        _3156 = _3019;
                        _3157 = _3021;
                        _3158 = _3023;
                        _3159 = _3025;
                        _3160 = _3027;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3025;
                frontier_phi_55_56_ladder_1 = _3027;
                frontier_phi_55_56_ladder_2 = _3023;
                frontier_phi_55_56_ladder_3 = _3021;
                frontier_phi_55_56_ladder_4 = _3019;
                frontier_phi_55_56_ladder_5 = _3017;
            }
            else
            {
                frontier_phi_55_56_ladder = _2903;
                frontier_phi_55_56_ladder_1 = _2905;
                frontier_phi_55_56_ladder_2 = _2901;
                frontier_phi_55_56_ladder_3 = _2899;
                frontier_phi_55_56_ladder_4 = _2897;
                frontier_phi_55_56_ladder_5 = _2895;
            }
            _3016 = frontier_phi_55_56_ladder_5;
            _3018 = frontier_phi_55_56_ladder_4;
            _3020 = frontier_phi_55_56_ladder_3;
            _3022 = frontier_phi_55_56_ladder_2;
            _3024 = frontier_phi_55_56_ladder;
            _3026 = frontier_phi_55_56_ladder_1;
        }
        float _3031 = isnan(1.0) ? _1027 : (isnan(_1027) ? 1.0 : min(_1027, 1.0));
        _2778 = (_3031 * _3022) + _2211;
        _2780 = (_3031 * _3024) + _2213;
        _2782 = (_3031 * _3026) + _2215;
        _2784 = ((_3016 * _1012) * _3031) + _2559;
        _2786 = ((_3018 * _1014) * _3031) + _2561;
        _2788 = ((_3020 * _1015) * _3031) + _2563;
    }
    else
    {
        _2778 = _2211;
        _2780 = _2213;
        _2782 = _2215;
        _2784 = _2559;
        _2786 = _2561;
        _2788 = _2563;
    }
    uint _2794 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _2800 = ((((((_785.x - _780.x) * _763) + _780.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _709) * cbMtdParam._m0[20u].x)) * _718) * cbInstanceData._m0[_2794].x;
    float _2801 = ((((((_785.y - _780.y) * _763) + _780.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_698.y - _696) * _676) + _696)) * cbMtdParam._m0[20u].y)) * _718) * cbInstanceData._m0[_2794].y;
    float _2802 = ((((((_785.z - _780.z) * _763) + _780.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_698.z - _697) * _676) + _697)) * cbMtdParam._m0[20u].z)) * _718) * cbInstanceData._m0[_2794].z;
    float _4707 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4718 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4729 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2819 = (((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2778 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1027))) + ((_2784 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + _2800;
    float _2821 = (_2801 + ((_2786 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2780 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1027)));
    float _2823 = (_2802 + ((_2788 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2782 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1027)));
    float _4755 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2836 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    uint _2837 = _987 + 6u;
    float _2845 = _949 / cbSceneParam._m0[86u].x;
    float _2846 = _950 / cbSceneParam._m0[86u].y;
    vec4 _2860 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, (log2((isnan(cbSceneParam._m0[77u].w) ? _883 : (isnan(_883) ? cbSceneParam._m0[77u].w : min(_883, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2862 = _2860.x;
    float _2863 = _2860.y;
    float _2864 = _2860.z;
    float _2865 = _2860.w;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_883 > cbSceneParam._m0[78u].w)
    {
        float _2920 = isnan(_883) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _883 : min(cbSceneParam._m0[80u].w, _883));
        float _2921 = _2920 / _883;
        float _2932 = _2921 * _934;
        float _2933 = _935 * _2921;
        float _2934 = (-0.0) - _2933;
        float _2935 = _2921 * _936;
        float _2937 = (cbSceneParam._m0[77u].w * _2934) / _2920;
        float _2938 = _2937 + cbSceneParam._m0[79u].w;
        float _2939 = cbSceneParam._m0[79u].w - _2933;
        float _2945 = sqrt(((_2932 * _2932) + (_2933 * _2933)) + (_2935 * _2935));
        float _2948 = (1.0 - (cbSceneParam._m0[77u].w / _2920)) * _2945;
        float _2953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2934 - _2937) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2938 > 0.0) ? exp2(_2953 * _2938) : (2.0 - exp2(_2955 * _2938))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2948;
        }
        else
        {
            float _3077 = 1.0 / cbSceneParam._m0[80u].x;
            float _3078 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : max(_2938, _2939));
            float _3079 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : min(_2938, _2939));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            _3117 = ((abs(_2945 / _2934) * cbSceneParam._m0[80u].y) * ((((_3088 - _3089) * 2.0) - ((exp2(_2953 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0)))) - exp2(_2953 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))))) * _3077)) - ((exp2(_2955 * _3088) - exp2(_2955 * _3089)) * _3077))) + (_2948 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2865);
        _2957 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2862;
        _2959 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2863;
        _2961 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2864;
        _2963 = _3128 * _2865;
    }
    else
    {
        _2957 = _2862;
        _2959 = _2863;
        _2961 = _2864;
        _2963 = _2865;
    }
    float _2975 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2976 = _2975 == 3.0;
    float _2977 = log2(_2963);
    float _2981 = exp2(_2977 * cbSceneParam._m0[78u].x);
    float _2982 = exp2(_2977 * cbSceneParam._m0[78u].y);
    float _2983 = exp2(_2977 * cbSceneParam._m0[78u].z);
    float _2984 = _2981 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)));
    float _2985 = _2982 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)));
    float _2986 = _2983 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0)));
    float _2995 = (_2975 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2995 * (_2976 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2957)));
    SV_Target.y = _2995 * (_2976 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.z = _2995 * (_2976 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.w = cbInstanceData._m0[_2837].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2800) * _2836) * _2981) * _2995;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2801) * _2836) * _2982) * _2995;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2802) * _2836) * _2983) * _2995;
    SV_Target_1.w = cbInstanceData._m0[_2837].w;
}


