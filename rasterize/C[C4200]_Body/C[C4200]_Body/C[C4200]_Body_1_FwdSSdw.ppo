#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1402;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _267 = exp2(log2(_253.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _268 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _269 = isnan(1.0) ? _268 : (isnan(_268) ? 1.0 : min(_268, 1.0));
    vec4 _283 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _287 = _283.z;
    float _295 = exp2(log2(_287 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _318 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(4.0) ? _319 : (isnan(_319) ? 4.0 : min(_319, 4.0));
    float _333 = floor(_320);
    vec4 _336 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _333));
    vec4 _361 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _372 = cbMtdParam._m0[9u].x * _361.x;
    float _373 = cbMtdParam._m0[9u].y * _361.y;
    float _374 = cbMtdParam._m0[9u].z * _361.z;
    float _381 = (((cbMtdParam._m0[10u].x * _336.x) - _372) * _297) + _372;
    float _382 = (((cbMtdParam._m0[10u].y * _336.y) - _373) * _297) + _373;
    float _383 = (((cbMtdParam._m0[10u].z * _336.z) - _374) * _297) + _374;
    float _389 = exp2(log2(_283.w) * cbMtdParam._m0[24u].w);
    vec4 _402 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _422 = (((cbMtdParam._m0[16u].x * _402.x) - _381) * _389) + _381;
    float _423 = (((cbMtdParam._m0[16u].y * _402.y) - _382) * _389) + _382;
    float _424 = (((cbMtdParam._m0[16u].z * _402.z) - _383) * _389) + _383;
    vec4 _437 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _462 = (_253.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _437.x) - _422) * _269) + _422);
    float _464 = (_253.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _437.y) - _423) * _269) + _423);
    float _466 = (_253.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _437.z) - _424) * _269) + _424);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[30u].z;
    _185[0u] = cbMtdParam._m0[30u].w;
    _184[1u] = cbMtdParam._m0[32u].z;
    _185[1u] = cbMtdParam._m0[32u].w;
    _184[2u] = cbMtdParam._m0[32u].x;
    _185[2u] = cbMtdParam._m0[32u].y;
    _184[3u] = cbMtdParam._m0[31u].z;
    _185[3u] = cbMtdParam._m0[31u].w;
    _184[4u] = cbMtdParam._m0[31u].x;
    _185[4u] = cbMtdParam._m0[31u].y;
    float _504 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    uint _506 = uint(int(isnan(4.0) ? _504 : (isnan(_504) ? 4.0 : min(_504, 4.0))));
    float _513 = ((_185[_506] - cbMtdParam._m0[23u].z) * _297) + cbMtdParam._m0[23u].z;
    float _516 = ((cbMtdParam._m0[23u].w - _513) * _389) + _513;
    float _519 = ((cbMtdParam._m0[26u].y - _516) * _269) + _516;
    vec4 _534 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _333));
    vec4 _552 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _560 = cbMtdParam._m0[23u].x + _552.z;
    float _563 = (((_534.z + _184[_506]) - _560) * _297) + _560;
    vec4 _575 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _586 = (((_575.z - _563) + cbMtdParam._m0[30u].x) * _389) + _563;
    float _592 = ((((_287 * 2.0) * _586) - _586) * cbMtdParam._m0[25u].w) + _586;
    vec4 _604 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _615 = (((cbMtdParam._m0[24u].z + _604.z) - _592) * _269) + _592;
    float _628 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _651 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_628 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _628) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _655 = cbPerFrame._m0[22u].x * 2.0;
    float _656 = _655 * cbMtdParam._m0[28u].z;
    float _659 = (_651.x * 0.5) + (-0.25);
    float _662 = (_651.y * 0.5) + (-0.25);
    float _663 = _662 * cbMtdParam._m0[28u].y;
    float _665 = (-0.0) - (cbMtdParam._m0[28u].y * _659);
    float _667 = fract(_656);
    float _669 = fract(_656 + 0.5);
    float _681 = abs((_667 * 2.0) + (-1.0));
    vec4 _698 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_667 * _665) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_663 * _667) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _700 = _698.x;
    float _701 = _698.y;
    float _702 = _698.z;
    vec4 _703 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_669 * _665) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_663 * _669) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _714 = ((_703.x - _700) * _681) + _700;
    float _721 = exp2(log2(_714 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _722 = isnan(cbMtdParam._m0[29u].y) ? _721 : (isnan(_721) ? cbMtdParam._m0[29u].y : max(_721, cbMtdParam._m0[29u].y));
    float _723 = isnan(cbMtdParam._m0[29u].z) ? _722 : (isnan(_722) ? cbMtdParam._m0[29u].z : min(_722, cbMtdParam._m0[29u].z));
    float _747 = (cbMtdParam._m0[33u].x * _628) + TEXCOORD;
    float _748 = (cbMtdParam._m0[33u].y * _628) + TEXCOORD_1;
    float _751 = _655 * cbMtdParam._m0[27u].w;
    float _752 = _662 * cbMtdParam._m0[27u].z;
    float _754 = (-0.0) - (cbMtdParam._m0[27u].z * _659);
    float _755 = fract(_751);
    float _757 = fract(_751 + 0.5);
    float _768 = abs((_755 * 2.0) + (-1.0));
    vec4 _785 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_755 * _754) + _747) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_752 * _755) + _748) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _790 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_757 * _754) + _747) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_752 * _757) + _748) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _824 = ((_534.x - _554) * _297) + _554;
    float _825 = ((_534.y - _555) * _297) + _555;
    float _830 = ((_575.x - _824) * _389) + _824;
    float _831 = ((_575.y - _825) * _389) + _825;
    float _840 = ((((_604.x - _830) * _269) + _830) * 2.0) + (-1.0);
    float _841 = ((((_604.y - _831) * _269) + _831) * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3837 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _847 = sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))));
    float _850 = (cbMtdParam._m0[26u].z * ((_283.x * 2.0) + (-1.0))) + _840;
    float _851 = (cbMtdParam._m0[26u].z * ((_283.y * 2.0) + (-1.0))) + _841;
    float _854 = fma(_847, _225 * NORMAL.x, fma(_851, _232 * TANGENT.x, (_218 * _210) * _850));
    float _857 = fma(_847, _225 * NORMAL.y, fma(_851, _232 * TANGENT.y, (_218 * _211) * _850));
    float _860 = fma(_847, _225 * NORMAL.z, fma(_851, _232 * TANGENT.z, (_218 * _212) * _850));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _3848 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _868 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3870 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3881 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3892 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _872 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _939 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _929);
    float _940 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _929);
    float _941 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _929);
    float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
    float _946 = _939 * _945;
    float _947 = _940 * _945;
    float _948 = _941 * _945;
    float _954 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _955 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _973 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _976 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _979 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    uint _992 = uint(roundEven(NORMAL.w)) * 13u;
    uint _993 = _992 + 9u;
    uint _994 = _993 + uint(cbMatDynParam._m0[0u].w);
    float _1000 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_994].x;
    float _1001 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_994].y;
    float _1002 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_994].z;
    float _3903 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1006 = 1.0 - _872;
    float _1007 = _1003 * _1006;
    float _1008 = _1004 * _1006;
    float _1009 = _1005 * _1006;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _872;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _872;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _872;
    float _1017 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    vec4 _1029 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _954, cbSceneParam._m0[86u].y * _955));
    float _1032 = _1029.x * TEXCOORD_3.w;
    float _1033 = dot(vec3(_865, _866, _867), vec3(_946, _947, _948));
    float _1036 = _1033 * 2.0;
    float _1040 = (_1036 * _865) - _946;
    float _1041 = (_1036 * _866) - _947;
    float _1042 = (_1036 * _867) - _948;
    float _1046 = abs(dot(vec3(_946, _947, _948), vec3(_865, _866, _867)));
    float _3936 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1048 = sqrt(_868);
    float _1059 = exp2((_1048 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1048 * 3.0));
    float _1065 = (1.0 - _1059) * ((_1048 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1066 = _1059 * _1048;
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1401;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1128 = fma(_1102, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094));
        float _1132 = fma(_1102, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094));
        float _1136 = fma(_1102, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094));
        float _1160 = _1094 + _865;
        float _1161 = _1098 + _866;
        float _1162 = _1102 + _867;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1128;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1132;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1136;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1190 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1128 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1132 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1136 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1229 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1195.x + (-0.5));
        float _1231 = _1229 * (_1195.y + (-0.5));
        float _1232 = _1229 * (_1195.z + (-0.5));
        float _1239 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1202.x + (-0.5));
        float _1241 = _1239 * (_1202.y + (-0.5));
        float _1242 = _1239 * (_1202.z + (-0.5));
        float _1249 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1209.x + (-0.5));
        float _1251 = _1249 * (_1209.y + (-0.5));
        float _1252 = _1249 * (_1209.z + (-0.5));
        float _1259 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1216.x + (-0.5));
        float _1261 = _1259 * (_1216.y + (-0.5));
        float _1262 = _1259 * (_1216.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1283 = (dot(vec3(_865, _866, _867), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1293 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3984 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1295 + 1.0))) + _1300) * _1263;
        float _1310 = _1231 * 0.5;
        float _1311 = _1241 * 0.5;
        float _1312 = _1251 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_865, _866, _867), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4017 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1337 + 1.0))) + _1342) * _1264;
        float _1352 = _1232 * 0.5;
        float _1353 = _1242 * 0.5;
        float _1354 = _1252 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_865, _866, _867), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4050 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1379 + 1.0))) + _1384) * _1265;
        _1401 = _1232;
        _1403 = _1231;
        _1404 = _1230;
        _1405 = _1242;
        _1406 = _1241;
        _1407 = _1240;
        _1408 = _1252;
        _1409 = _1251;
        _1410 = _1250;
        _1411 = _1265;
        _1412 = _1264;
        _1413 = _1263;
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1402;
        _1403 = _1402;
        _1404 = _1402;
        _1405 = _1402;
        _1406 = _1402;
        _1407 = _1402;
        _1408 = _1402;
        _1409 = _1402;
        _1410 = _1402;
        _1411 = _1402;
        _1412 = _1402;
        _1413 = _1402;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1439 = fma(_1102, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094));
        float _1443 = fma(_1102, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094));
        float _1447 = fma(_1102, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094));
        float _1470 = _1094 + _865;
        float _1471 = _1098 + _866;
        float _1472 = _1102 + _867;
        float _1482 = fma(_1472, cbModelParam._m0[30u].z, fma(_1471, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1470)) - _1439;
        float _1483 = fma(_1472, cbModelParam._m0[31u].z, fma(_1471, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1470)) - _1443;
        float _1484 = fma(_1472, cbModelParam._m0[32u].z, fma(_1471, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1470)) - _1447;
        float _1488 = inversesqrt(dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484)));
        float _1501 = ((_1488 * _1482) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1439 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1488 * _1483) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1443 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1488 * _1484) / cbModelParam._m0[35u].z) + ((((((_1447 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        float _1538 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1505.x + (-0.5));
        float _1540 = _1538 * (_1505.y + (-0.5));
        float _1541 = _1538 * (_1505.z + (-0.5));
        float _1548 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1512.x + (-0.5));
        float _1550 = _1548 * (_1512.y + (-0.5));
        float _1551 = _1548 * (_1512.z + (-0.5));
        float _1558 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1519.x + (-0.5));
        float _1560 = _1558 * (_1519.y + (-0.5));
        float _1561 = _1558 * (_1519.z + (-0.5));
        float _1568 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1526.x + (-0.5));
        float _1570 = _1568 * (_1526.y + (-0.5));
        float _1571 = _1568 * (_1526.z + (-0.5));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = _1539 * 0.5;
        float _1576 = _1549 * 0.5;
        float _1577 = _1559 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_865, _866, _867), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4113 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1602 + 1.0))) + _1607) * _1572;
        float _1617 = _1540 * 0.5;
        float _1618 = _1550 * 0.5;
        float _1619 = _1560 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_865, _866, _867), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4146 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1644 + 1.0))) + _1649) * _1573;
        float _1659 = _1541 * 0.5;
        float _1660 = _1551 * 0.5;
        float _1661 = _1561 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_865, _866, _867), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4179 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1686 + 1.0))) + _1691) * _1574;
        _1708 = _1541;
        _1709 = _1540;
        _1710 = _1539;
        _1711 = _1551;
        _1712 = _1550;
        _1713 = _1549;
        _1714 = _1561;
        _1715 = _1560;
        _1716 = _1559;
        _1717 = _1574;
        _1718 = _1573;
        _1719 = _1572;
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
    }
    else
    {
        _1708 = _1402;
        _1709 = _1402;
        _1710 = _1402;
        _1711 = _1402;
        _1712 = _1402;
        _1713 = _1402;
        _1714 = _1402;
        _1715 = _1402;
        _1716 = _1402;
        _1717 = _1402;
        _1718 = _1402;
        _1719 = _1402;
        _1720 = 0.0;
        _1721 = 0.0;
        _1722 = 0.0;
    }
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1414)) + _1414;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1415)) + _1415;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1416)) + _1416;
    float _1755 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1732));
    float _1776 = _1040 * 0.5;
    float _1777 = _1041 * 0.5;
    float _1778 = _1042 * 0.5;
    float _1779 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1782 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1785 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1819;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1792 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1401, _1405, _1408, _1411));
        float _1796 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1800 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1807 = dot(vec4(cbModelParam._m0[39u]), vec4(_1776, _1777, _1778, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1830;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1821 = dot(vec4(cbModelParam._m0[40u]), vec4(_1776, _1777, _1778, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1834 = (_1830 * cbModelParam._m0[1u].x) + (_1819 * (1.0 - cbModelParam._m0[1u].x));
    float _1844 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _868);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1844 : min(cbModelParam._m0[25u].z, _1844));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1892 = fma(_1102, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094)) + cbModelParam._m0[13u].w;
        float _1896 = fma(_1102, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094)) + cbModelParam._m0[14u].w;
        float _1900 = fma(_1102, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094)) + cbModelParam._m0[15u].w;
        float _1903 = fma(_1042, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040));
        float _1906 = fma(_1042, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040));
        float _1909 = fma(_1042, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040));
        float _1937;
        if (_1903 > 0.0)
        {
            _1937 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1937 = frontier_phi_14_12_ladder;
        }
        float _2161;
        if (_1906 > 0.0)
        {
            _2161 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2161 = frontier_phi_23_19_ladder;
        }
        float _2418;
        if (_1909 > 0.0)
        {
            _2418 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2418 = frontier_phi_35_30_ladder;
        }
        float _2420 = isnan(_2161) ? _1937 : (isnan(_1937) ? _2161 : min(_1937, _2161));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1903) + _1892;
        float _2426 = (_2421 * _1906) + _1896;
        float _2427 = (_2421 * _1909) + _1900;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1845);
            frontier_phi_13_35_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1925 = frontier_phi_13_35_ladder_2;
        _1927 = frontier_phi_13_35_ladder_1;
        _1929 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1040, _1041, _1042), _1845);
        _1925 = _1913.x * cbModelParam._m0[1u].y;
        _1927 = _1913.y * cbModelParam._m0[1u].y;
        _1929 = _1913.z * cbModelParam._m0[1u].y;
    }
    float _1933 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _868);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1933 : min(cbModelParam._m0[25u].w, _1933));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1102, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1102, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1102, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1042, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040));
        float _2001 = fma(_1042, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040));
        float _2004 = fma(_1042, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040));
        float _2166;
        if (_1998 > 0.0)
        {
            _2166 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2166 = frontier_phi_25_21_ladder;
        }
        float _2445;
        if (_2001 > 0.0)
        {
            _2445 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2445 = frontier_phi_37_32_ladder;
        }
        float _2658;
        if (_2004 > 0.0)
        {
            _2658 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2658 = frontier_phi_46_43_ladder;
        }
        float _2660 = isnan(_2445) ? _2166 : (isnan(_2166) ? _2445 : min(_2166, _2445));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1998) + _1987;
        float _2666 = (_2661 * _2001) + _1991;
        float _2667 = (_2661 * _2004) + _1995;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1934);
            frontier_phi_22_46_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_22_46_ladder_2;
        _2025 = frontier_phi_22_46_ladder_1;
        _2027 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1040, _1041, _1042), _1934);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2040 = (((_1065 * _1017) + _1066) * _1032) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2042 = (((_1065 * _1019) + _1066) * _1032) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2044 = (((_1065 * _1020) + _1066) * _1032) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2042, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2042, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2042, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    vec4 _2061 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_954, _955));
    float _2063 = _2061.w;
    float _2075 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2063);
    float _2076 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2063);
    float _2077 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2063);
    uvec4 _2081 = floatBitsToUint(cbInstanceData._m0[_992 + 5u]);
    uint _2083 = _2081.x * 14u;
    uint _2084 = _2083 + 13u;
    float _2091 = _1032 + (-1.0);
    float _2096 = (cbLight._m0[_2084].x * _2091) + 1.0;
    float _2097 = (cbLight._m0[_2084].y * _2091) + 1.0;
    float _2098 = (cbLight._m0[_2084].z * _2091) + 1.0;
    float _2099 = (cbLight._m0[_2084].w * _2091) + 1.0;
    uint _2100 = _2083 + 5u;
    float _2106 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2110 = _2083 + 4u;
    float _2119 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2123 = _2083 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_865, _866, _867));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_865, _866, _867));
    float _4315 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4326 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2100].x * _2106) * _2144) + (((cbLight._m0[_2110].x * _2075) * _2119) * _2142);
    float _2152 = ((_2106 * cbLight._m0[_2100].y) * _2144) + (((cbLight._m0[_2110].y * _2076) * _2119) * _2142);
    float _2153 = ((_2106 * cbLight._m0[_2100].z) * _2144) + (((cbLight._m0[_2110].z * _2077) * _2119) * _2142);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2083 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2160)
    {
        _2171 = _2151;
        _2173 = _2152;
        _2175 = _2153;
    }
    else
    {
        uint _2179 = _2083 + 6u;
        float _2195 = (dot(vec3(cbLight._m0[_2083 + 2u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4337 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2198 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2171 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _2151;
        _2173 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _2152;
        _2175 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _2153;
    }
    bool _2178 = _2158.y == 0u;
    float _2216;
    float _2218;
    float _2220;
    if (_2178)
    {
        _2216 = _2171;
        _2218 = _2173;
        _2220 = _2175;
    }
    else
    {
        uint _2389 = _2083 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2083 + 3u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4353 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2408 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2216 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2171;
        _2218 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2173;
        _2220 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2175;
    }
    uint _2223 = _2083 + 8u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _868) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_2083].x + _946;
    float _2239 = cbLight._m0[_2083].y + _947;
    float _2240 = cbLight._m0[_2083].z + _948;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2083].xyz));
    float _4369 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _2252 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2253 = dot(vec3(_865, _866, _867), vec3(_2245, _2246, _2247));
    float _4391 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2245, _2246, _2247));
    float _4402 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2237 * _2237;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
    float _2274 = 0.959999978542327880859375 - _1014;
    float _2276 = 0.959999978542327880859375 - _1015;
    float _2277 = 0.959999978542327880859375 - _1016;
    float _2284 = 1.0 - _2237;
    float _2295 = (0.5 / (((_2252 * ((_2251 * _2284) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2284) + _2237) * _2251))) * _2251;
    float _4413 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    uint _2311 = _2083 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _868) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2123].x + _946;
    float _2325 = cbLight._m0[_2123].y + _947;
    float _2326 = cbLight._m0[_2123].z + _948;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2123].xyz));
    float _4424 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2338 = dot(vec3(_865, _866, _867), vec3(_2331, _2332, _2333));
    float _4435 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2331, _2332, _2333));
    float _4446 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2252 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2364) + _2323) * _2337))) * _2337;
    float _4457 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2274) + _1017) * cbLight._m0[_2311].x) * _2376) * _2106) + ((((cbLight._m0[_2223].x * _2075) * ((_2273 * _2274) + _1017)) * _2297) * _2119);
    float _2387 = (((((_2357 * _2276) + _1019) * cbLight._m0[_2311].y) * _2376) * _2106) + ((((cbLight._m0[_2223].y * _2076) * ((_2273 * _2276) + _1019)) * _2297) * _2119);
    float _2388 = (((((_2357 * _2277) + _1020) * cbLight._m0[_2311].z) * _2376) * _2106) + ((((cbLight._m0[_2223].z * _2077) * ((_2273 * _2277) + _1020)) * _2297) * _2119);
    float _2450;
    float _2452;
    float _2454;
    if (_2160)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2083 + 2u;
        uint _2460 = _2083 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _868) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _946;
        float _2477 = cbLight._m0[_2456].y + _947;
        float _2478 = cbLight._m0[_2456].z + _948;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2456].xyz));
        float _4468 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2490 = dot(vec3(_865, _866, _867), vec3(_2483, _2484, _2485));
        float _4479 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4490 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2252 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2516) + _2475) * _2489))) * _2489;
        float _4501 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2450 = (((((_2509 * _2274) + _1017) * cbLight._m0[_2460].x) * _2528) * _2529) + _2386;
        _2452 = (((((_2509 * _2276) + _1019) * cbLight._m0[_2460].y) * _2528) * _2529) + _2387;
        _2454 = (((((_2509 * _2277) + _1020) * cbLight._m0[_2460].z) * _2528) * _2529) + _2388;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2178)
    {
        _2564 = _2450;
        _2566 = _2452;
        _2568 = _2454;
    }
    else
    {
        uint _2575 = _2083 + 3u;
        uint _2579 = _2083 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _868) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _946;
        float _2596 = cbLight._m0[_2575].y + _947;
        float _2597 = cbLight._m0[_2575].z + _948;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2575].xyz));
        float _4517 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2609 = dot(vec3(_865, _866, _867), vec3(_2602, _2603, _2604));
        float _4528 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4539 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2252 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2635) + _2594) * _2608))) * _2608;
        float _4550 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2564 = (((((_2628 * _2274) + _1017) * cbLight._m0[_2579].x) * _2647) * _2648) + _2450;
        _2566 = (((((_2628 * _2276) + _1019) * cbLight._m0[_2579].y) * _2647) * _2648) + _2452;
        _2568 = (((((_2628 * _2277) + _1020) * cbLight._m0[_2579].z) * _2647) * _2648) + _2454;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2081.y == 0u)
    {
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2723;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2723;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2723;
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _955) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _954) / _2739)));
        float _2760 = (log2(_2726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            uint _3059 = 0u;
            uint _3068;
            bool _3069;
            for (;;)
            {
                _3068 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                _3069 = _3068 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3069)
                {
                    frontier_phi_61_pred = _3053;
                    frontier_phi_61_pred_1 = _3058;
                    frontier_phi_61_pred_2 = _3057;
                    frontier_phi_61_pred_3 = _3056;
                    frontier_phi_61_pred_4 = _3055;
                    frontier_phi_61_pred_5 = _3054;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3068;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3059 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _2724;
                        float _3244 = _3203.y - _2725;
                        float _3245 = _3203.z - _2726;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_973, _976, _979), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4576 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _2724;
                        float _3279 = (-0.0) - _2725;
                        float _3280 = (-0.0) - _2726;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3295 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _1048;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_973, _976, _979), vec3(_3285, _3286, _3287));
                        float _4592 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3320 = dot(vec3(_973, _976, _979), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4603 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3263 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3253) + _3329;
                        float _4614 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4625 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3327 * _3327) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3112 = (_3274 * _3222.x) + _3180;
                        _3113 = (_3274 * _3222.y) + _3181;
                        _3114 = (_3274 * _3222.z) + _3182;
                        _3109 = (_3355 * _3239.x) + _3177;
                        _3110 = (_3355 * _3239.y) + _3178;
                        _3111 = (_3355 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_61_pred = _3109;
                    frontier_phi_61_pred_1 = _3114;
                    frontier_phi_61_pred_2 = _3113;
                    frontier_phi_61_pred_3 = _3112;
                    frontier_phi_61_pred_4 = _3111;
                    frontier_phi_61_pred_5 = _3110;
                }
                _2901 = frontier_phi_61_pred;
                _2911 = frontier_phi_61_pred_1;
                _2909 = frontier_phi_61_pred_2;
                _2907 = frontier_phi_61_pred_3;
                _2905 = frontier_phi_61_pred_4;
                _2903 = frontier_phi_61_pred_5;
                uint _3060 = _3059 + 1u;
                if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3053 = _2901;
                    _3054 = _2903;
                    _3055 = _2905;
                    _3056 = _2907;
                    _3057 = _2909;
                    _3058 = _2911;
                    _3059 = _3060;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        if (((4294967295u << _2917) & _2770) == 0u)
        {
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
        }
        else
        {
            float _3046 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
            float _3047 = _3046 * _2724;
            float _3048 = _3046 * _2725;
            float _3049 = _3046 * _2726;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3160 = _2900;
                float _3161 = _2902;
                float _3162 = _2904;
                float _3163 = _2906;
                float _3164 = _2908;
                float _3165 = _2910;
                uint _3166 = _2917;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3176)
                    {
                        frontier_phi_67_pred = _3163;
                        frontier_phi_67_pred_1 = _3164;
                        frontier_phi_67_pred_2 = _3165;
                        frontier_phi_67_pred_3 = _3162;
                        frontier_phi_67_pred_4 = _3161;
                        frontier_phi_67_pred_5 = _3160;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        uint _3379 = _3175;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_2726, _3497.z, fma(_2725, _3497.y, _3497.x * _2724)) + _3497.w;
                            _3510 = !((fma(_2726, _3478.z, fma(_2725, _3478.y, _3478.x * _2724)) + _3478.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _2724;
                                float _3538 = _3405.y - _2725;
                                float _3539 = _3405.z - _2726;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4636 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_973, _976, _979))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_2726, _3448.z, fma(_2725, _3448.y, _3448.x * _2724)) + _3448.w) / _3509;
                                float _3569 = (fma(_2726, _3463.z, fma(_2725, _3463.y, _3463.x * _2724)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4652 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _1048;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3047;
                                float _3599 = _3545 - _3048;
                                float _3600 = _3546 - _3049;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_973, _976, _979), vec3((-0.0) - _3047, (-0.0) - _3048, (-0.0) - _3049));
                                float _4663 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3612 = dot(vec3(_973, _976, _979), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4674 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_973, _976, _979), vec3(_3544, _3545, _3546))) + _3621;
                                float _4685 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4696 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3649 * _3433.x;
                                frontier_phi_73_pred_1 = _3649 * _3433.y;
                                frontier_phi_73_pred_2 = _3575 * _3421.z;
                                frontier_phi_73_pred_3 = _3575 * _3421.y;
                                frontier_phi_73_pred_4 = _3575 * _3421.x;
                                frontier_phi_73_pred_5 = _3649 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3653 = frontier_phi_73_pred;
                            _3654 = frontier_phi_73_pred_1;
                            _3658 = frontier_phi_73_pred_2;
                            _3657 = frontier_phi_73_pred_3;
                            _3656 = frontier_phi_73_pred_4;
                            _3655 = frontier_phi_73_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3363;
                        frontier_phi_67_pred_1 = _3364;
                        frontier_phi_67_pred_2 = _3365;
                        frontier_phi_67_pred_3 = _3362;
                        frontier_phi_67_pred_4 = _3361;
                        frontier_phi_67_pred_5 = _3360;
                    }
                    _3028 = frontier_phi_67_pred;
                    _3030 = frontier_phi_67_pred_1;
                    _3032 = frontier_phi_67_pred_2;
                    _3026 = frontier_phi_67_pred_3;
                    _3024 = frontier_phi_67_pred_4;
                    _3022 = frontier_phi_67_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3022;
                        _3161 = _3024;
                        _3162 = _3026;
                        _3163 = _3028;
                        _3164 = _3030;
                        _3165 = _3032;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3030;
                frontier_phi_55_56_ladder_1 = _3032;
                frontier_phi_55_56_ladder_2 = _3028;
                frontier_phi_55_56_ladder_3 = _3026;
                frontier_phi_55_56_ladder_4 = _3024;
                frontier_phi_55_56_ladder_5 = _3022;
            }
            else
            {
                frontier_phi_55_56_ladder = _2908;
                frontier_phi_55_56_ladder_1 = _2910;
                frontier_phi_55_56_ladder_2 = _2906;
                frontier_phi_55_56_ladder_3 = _2904;
                frontier_phi_55_56_ladder_4 = _2902;
                frontier_phi_55_56_ladder_5 = _2900;
            }
            _3021 = frontier_phi_55_56_ladder_5;
            _3023 = frontier_phi_55_56_ladder_4;
            _3025 = frontier_phi_55_56_ladder_3;
            _3027 = frontier_phi_55_56_ladder_2;
            _3029 = frontier_phi_55_56_ladder;
            _3031 = frontier_phi_55_56_ladder_1;
        }
        float _3036 = isnan(1.0) ? _1032 : (isnan(_1032) ? 1.0 : min(_1032, 1.0));
        _2783 = (_3036 * _3027) + _2216;
        _2785 = (_3036 * _3029) + _2218;
        _2787 = (_3036 * _3031) + _2220;
        _2789 = ((_3021 * _1017) * _3036) + _2564;
        _2791 = ((_3023 * _1019) * _3036) + _2566;
        _2793 = ((_3025 * _1020) * _3036) + _2568;
    }
    else
    {
        _2783 = _2216;
        _2785 = _2218;
        _2787 = _2220;
        _2789 = _2564;
        _2791 = _2566;
        _2793 = _2568;
    }
    uint _2799 = _993 + uint(cbMatDynParam._m0[0u].w);
    float _2805 = ((((((_790.x - _785.x) * _768) + _785.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _714) * cbMtdParam._m0[20u].x)) * _723) * cbInstanceData._m0[_2799].x;
    float _2806 = ((((((_790.y - _785.y) * _768) + _785.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_703.y - _701) * _681) + _701)) * cbMtdParam._m0[20u].y)) * _723) * cbInstanceData._m0[_2799].y;
    float _2807 = ((((((_790.z - _785.z) * _768) + _785.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_703.z - _702) * _681) + _702)) * cbMtdParam._m0[20u].z)) * _723) * cbInstanceData._m0[_2799].z;
    float _4712 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4723 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4734 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2824 = (((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2783 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1032))) + ((_2789 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1834)) * cbPerFrame._m0[3u].x)) + _2805;
    float _2826 = (_2806 + ((_2791 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1834)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2785 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1032)));
    float _2828 = (_2807 + ((_2793 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1834)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2787 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1032)));
    float _4760 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2841 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    uint _2842 = _992 + 6u;
    float _2850 = _954 / cbSceneParam._m0[86u].x;
    float _2851 = _955 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2926 = _2925 / _888;
        float _2937 = _2926 * _939;
        float _2938 = _940 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2940 = _2926 * _941;
        float _2942 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2943 = _2942 + cbSceneParam._m0[79u].w;
        float _2944 = cbSceneParam._m0[79u].w - _2938;
        float _2950 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2940 * _2940));
        float _2953 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2950;
        float _2958 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2960 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3122;
        if (abs((_2939 - _2942) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3122 = ((((_2943 > 0.0) ? exp2(_2958 * _2943) : (2.0 - exp2(_2960 * _2943))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2953;
        }
        else
        {
            float _3082 = 1.0 / cbSceneParam._m0[80u].x;
            float _3083 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : max(_2943, _2944));
            float _3084 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : min(_2943, _2944));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            _3122 = ((abs(_2950 / _2939) * cbSceneParam._m0[80u].y) * ((((_3093 - _3094) * 2.0) - ((exp2(_2958 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0)))) - exp2(_2958 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))))) * _3082)) - ((exp2(_2960 * _3093) - exp2(_2960 * _3094)) * _3082))) + (_2953 * cbSceneParam._m0[80u].z);
        }
        vec4 _3124 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3133 = exp2((_3122 * (-1.44269502162933349609375)) * (1.0 - _3124.w));
        float _3134 = log2(_3133);
        float _3150 = log2(_2870);
        _2962 = (exp2(_3150 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].x)) * _3124.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2964 = (exp2(_3150 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].y)) * _3124.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2966 = (exp2(_3150 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].z)) * _3124.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2968 = _3133 * _2870;
    }
    else
    {
        _2962 = _2867;
        _2964 = _2868;
        _2966 = _2869;
        _2968 = _2870;
    }
    float _2980 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2981 = _2980 == 3.0;
    float _2982 = log2(_2968);
    float _2986 = exp2(_2982 * cbSceneParam._m0[78u].x);
    float _2987 = exp2(_2982 * cbSceneParam._m0[78u].y);
    float _2988 = exp2(_2982 * cbSceneParam._m0[78u].z);
    float _2989 = _2986 * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0)));
    float _2990 = _2987 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0)));
    float _2991 = _2988 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0)));
    float _3000 = (_2980 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3000 * (_2981 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.y = _3000 * (_2981 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.z = _3000 * (_2981 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2805) * _2841) * _2986) * _3000;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2806) * _2841) * _2987) * _3000;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2807) * _2841) * _2988) * _3000;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


