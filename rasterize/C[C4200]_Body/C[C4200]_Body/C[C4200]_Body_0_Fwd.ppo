#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _257 = log2(0.0);
    float _259 = exp2(_257 * cbMtdParam._m0[24u].x);
    float _260 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _261 = isnan(1.0) ? _260 : (isnan(_260) ? 1.0 : min(_260, 1.0));
    vec4 _275 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _279 = _275.z;
    float _287 = exp2(log2(_279 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _288 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    float _310 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(4.0) ? _311 : (isnan(_311) ? 4.0 : min(_311, 4.0));
    float _325 = floor(_312);
    vec4 _328 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _325));
    vec4 _353 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _364 = cbMtdParam._m0[9u].x * _353.x;
    float _365 = cbMtdParam._m0[9u].y * _353.y;
    float _366 = cbMtdParam._m0[9u].z * _353.z;
    float _373 = (((cbMtdParam._m0[10u].x * _328.x) - _364) * _289) + _364;
    float _374 = (((cbMtdParam._m0[10u].y * _328.y) - _365) * _289) + _365;
    float _375 = (((cbMtdParam._m0[10u].z * _328.z) - _366) * _289) + _366;
    float _381 = exp2(log2(_275.w) * cbMtdParam._m0[24u].w);
    vec4 _394 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _414 = (((cbMtdParam._m0[16u].x * _394.x) - _373) * _381) + _373;
    float _415 = (((cbMtdParam._m0[16u].y * _394.y) - _374) * _381) + _374;
    float _416 = (((cbMtdParam._m0[16u].z * _394.z) - _375) * _381) + _375;
    vec4 _429 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _454 = (_247.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _429.x) - _414) * _261) + _414);
    float _456 = (_247.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _429.y) - _415) * _261) + _415);
    float _458 = (_247.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _429.z) - _416) * _261) + _416);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[30u].z;
    _183[0u] = cbMtdParam._m0[30u].w;
    _182[1u] = cbMtdParam._m0[32u].z;
    _183[1u] = cbMtdParam._m0[32u].w;
    _182[2u] = cbMtdParam._m0[32u].x;
    _183[2u] = cbMtdParam._m0[32u].y;
    _182[3u] = cbMtdParam._m0[31u].z;
    _183[3u] = cbMtdParam._m0[31u].w;
    _182[4u] = cbMtdParam._m0[31u].x;
    _183[4u] = cbMtdParam._m0[31u].y;
    float _497 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    uint _499 = uint(int(isnan(4.0) ? _497 : (isnan(_497) ? 4.0 : min(_497, 4.0))));
    float _506 = ((_183[_499] - cbMtdParam._m0[23u].z) * _289) + cbMtdParam._m0[23u].z;
    float _509 = ((cbMtdParam._m0[23u].w - _506) * _381) + _506;
    float _512 = ((cbMtdParam._m0[26u].y - _509) * _261) + _509;
    vec4 _527 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _325));
    vec4 _545 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _553 = cbMtdParam._m0[23u].x + _545.z;
    float _556 = (((_527.z + _182[_499]) - _553) * _289) + _553;
    vec4 _568 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _579 = (((_568.z - _556) + cbMtdParam._m0[30u].x) * _381) + _556;
    float _585 = ((((_279 * 2.0) * _579) - _579) * cbMtdParam._m0[25u].w) + _579;
    vec4 _597 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _608 = (((cbMtdParam._m0[24u].z + _597.z) - _585) * _261) + _585;
    float _621 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _644 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_621 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _621) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _648 = cbPerFrame._m0[22u].x * 2.0;
    float _649 = _648 * cbMtdParam._m0[28u].z;
    float _652 = (_644.x * 0.5) + (-0.25);
    float _655 = (_644.y * 0.5) + (-0.25);
    float _656 = _655 * cbMtdParam._m0[28u].y;
    float _658 = (-0.0) - (cbMtdParam._m0[28u].y * _652);
    float _660 = fract(_649);
    float _662 = fract(_649 + 0.5);
    float _674 = abs((_660 * 2.0) + (-1.0));
    vec4 _691 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_660 * _658) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_656 * _660) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _693 = _691.x;
    float _694 = _691.y;
    float _695 = _691.z;
    vec4 _696 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_662 * _658) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_656 * _662) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _707 = ((_696.x - _693) * _674) + _693;
    float _714 = exp2(log2(_707 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _715 = isnan(cbMtdParam._m0[29u].y) ? _714 : (isnan(_714) ? cbMtdParam._m0[29u].y : max(_714, cbMtdParam._m0[29u].y));
    float _716 = isnan(cbMtdParam._m0[29u].z) ? _715 : (isnan(_715) ? cbMtdParam._m0[29u].z : min(_715, cbMtdParam._m0[29u].z));
    float _740 = (cbMtdParam._m0[33u].x * _621) + TEXCOORD;
    float _741 = (cbMtdParam._m0[33u].y * _621) + TEXCOORD_1;
    float _744 = _648 * cbMtdParam._m0[27u].w;
    float _745 = _655 * cbMtdParam._m0[27u].z;
    float _747 = (-0.0) - (cbMtdParam._m0[27u].z * _652);
    float _748 = fract(_744);
    float _750 = fract(_744 + 0.5);
    float _761 = abs((_748 * 2.0) + (-1.0));
    vec4 _778 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_748 * _747) + _740) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_745 * _748) + _741) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _783 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_750 * _747) + _740) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_745 * _750) + _741) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _817 = ((_527.x - _547) * _289) + _547;
    float _818 = ((_527.y - _548) * _289) + _548;
    float _823 = ((_568.x - _817) * _381) + _817;
    float _824 = ((_568.y - _818) * _381) + _818;
    float _833 = ((((_597.x - _823) * _261) + _823) * 2.0) + (-1.0);
    float _834 = ((((_597.y - _824) * _261) + _824) * 2.0) + (-1.0);
    float _835 = dot(vec2(_833, _834), vec2(_833, _834));
    float _3806 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _840 = sqrt(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))));
    float _843 = (cbMtdParam._m0[26u].z * ((_275.x * 2.0) + (-1.0))) + _833;
    float _844 = (cbMtdParam._m0[26u].z * ((_275.y * 2.0) + (-1.0))) + _834;
    float _847 = fma(_840, _223 * NORMAL.x, fma(_844, _230 * TANGENT.x, (_216 * _208) * _843));
    float _850 = fma(_840, _223 * NORMAL.y, fma(_844, _230 * TANGENT.y, (_216 * _209) * _843));
    float _853 = fma(_840, _223 * NORMAL.z, fma(_844, _230 * TANGENT.z, (_216 * _210) * _843));
    float _857 = inversesqrt(dot(vec3(_847, _850, _853), vec3(_847, _850, _853)));
    float _858 = _857 * _847;
    float _859 = _857 * _850;
    float _860 = _857 * _853;
    float _3817 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _861 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3839 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3850 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3861 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _865 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _966 = fma(_860, cbSceneParam._m0[5u].z, fma(_859, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _858));
    float _969 = fma(_860, cbSceneParam._m0[6u].z, fma(_859, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _858));
    float _972 = fma(_860, cbSceneParam._m0[7u].z, fma(_859, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _858));
    uint _985 = uint(roundEven(NORMAL.w)) * 13u;
    uint _986 = _985 + 9u;
    uint _987 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _993 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_987].x;
    float _994 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_987].y;
    float _995 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_987].z;
    float _3872 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _999 = 1.0 - _865;
    float _1000 = _996 * _999;
    float _1001 = _997 * _999;
    float _1002 = _998 * _999;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _865;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _865;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _865;
    float _1010 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    vec4 _1022 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1025 = _1022.x * TEXCOORD_3.w;
    float _1026 = dot(vec3(_858, _859, _860), vec3(_939, _940, _941));
    float _1029 = _1026 * 2.0;
    float _1033 = (_1029 * _858) - _939;
    float _1034 = (_1029 * _859) - _940;
    float _1035 = (_1029 * _860) - _941;
    float _1039 = abs(dot(vec3(_939, _940, _941), vec3(_858, _859, _860)));
    float _3905 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1041 = sqrt(_861);
    float _1052 = exp2((_1041 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1041 * 3.0));
    float _1058 = (1.0 - _1052) * ((_1041 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1059 = _1052 * _1041;
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1394;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1095, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087));
        float _1125 = fma(_1095, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087));
        float _1129 = fma(_1095, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087));
        float _1153 = _1087 + _858;
        float _1154 = _1091 + _859;
        float _1155 = _1095 + _860;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1121;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1125;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1129;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1183 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1222 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1188.x + (-0.5));
        float _1224 = _1222 * (_1188.y + (-0.5));
        float _1225 = _1222 * (_1188.z + (-0.5));
        float _1232 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1195.x + (-0.5));
        float _1234 = _1232 * (_1195.y + (-0.5));
        float _1235 = _1232 * (_1195.z + (-0.5));
        float _1242 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1202.x + (-0.5));
        float _1244 = _1242 * (_1202.y + (-0.5));
        float _1245 = _1242 * (_1202.z + (-0.5));
        float _1252 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1209.x + (-0.5));
        float _1254 = _1252 * (_1209.y + (-0.5));
        float _1255 = _1252 * (_1209.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1276 = (dot(vec3(_858, _859, _860), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1286 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3953 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1288 + 1.0))) + _1293) * _1256;
        float _1303 = _1224 * 0.5;
        float _1304 = _1234 * 0.5;
        float _1305 = _1244 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_858, _859, _860), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3986 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1330 + 1.0))) + _1335) * _1257;
        float _1345 = _1225 * 0.5;
        float _1346 = _1235 * 0.5;
        float _1347 = _1245 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_858, _859, _860), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4019 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1372 + 1.0))) + _1377) * _1258;
        _1394 = _1225;
        _1396 = _1224;
        _1397 = _1223;
        _1398 = _1235;
        _1399 = _1234;
        _1400 = _1233;
        _1401 = _1245;
        _1402 = _1244;
        _1403 = _1243;
        _1404 = _1258;
        _1405 = _1257;
        _1406 = _1256;
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1395;
        _1396 = _1395;
        _1397 = _1395;
        _1398 = _1395;
        _1399 = _1395;
        _1400 = _1395;
        _1401 = _1395;
        _1402 = _1395;
        _1403 = _1395;
        _1404 = _1395;
        _1405 = _1395;
        _1406 = _1395;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1432 = fma(_1095, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087));
        float _1436 = fma(_1095, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087));
        float _1440 = fma(_1095, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087));
        float _1463 = _1087 + _858;
        float _1464 = _1091 + _859;
        float _1465 = _1095 + _860;
        float _1475 = fma(_1465, cbModelParam._m0[30u].z, fma(_1464, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1463)) - _1432;
        float _1476 = fma(_1465, cbModelParam._m0[31u].z, fma(_1464, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1463)) - _1436;
        float _1477 = fma(_1465, cbModelParam._m0[32u].z, fma(_1464, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1463)) - _1440;
        float _1481 = inversesqrt(dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477)));
        float _1494 = ((_1481 * _1475) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1432 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1481 * _1476) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1436 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1481 * _1477) / cbModelParam._m0[35u].z) + ((((((_1440 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        float _1531 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1498.x + (-0.5));
        float _1533 = _1531 * (_1498.y + (-0.5));
        float _1534 = _1531 * (_1498.z + (-0.5));
        float _1541 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1505.x + (-0.5));
        float _1543 = _1541 * (_1505.y + (-0.5));
        float _1544 = _1541 * (_1505.z + (-0.5));
        float _1551 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1512.x + (-0.5));
        float _1553 = _1551 * (_1512.y + (-0.5));
        float _1554 = _1551 * (_1512.z + (-0.5));
        float _1561 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1519.x + (-0.5));
        float _1563 = _1561 * (_1519.y + (-0.5));
        float _1564 = _1561 * (_1519.z + (-0.5));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = _1532 * 0.5;
        float _1569 = _1542 * 0.5;
        float _1570 = _1552 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_858, _859, _860), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4082 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1595 + 1.0))) + _1600) * _1565;
        float _1610 = _1533 * 0.5;
        float _1611 = _1543 * 0.5;
        float _1612 = _1553 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_858, _859, _860), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4115 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1637 + 1.0))) + _1642) * _1566;
        float _1652 = _1534 * 0.5;
        float _1653 = _1544 * 0.5;
        float _1654 = _1554 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_858, _859, _860), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4148 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1679 + 1.0))) + _1684) * _1567;
        _1701 = _1534;
        _1702 = _1533;
        _1703 = _1532;
        _1704 = _1544;
        _1705 = _1543;
        _1706 = _1542;
        _1707 = _1554;
        _1708 = _1553;
        _1709 = _1552;
        _1710 = _1567;
        _1711 = _1566;
        _1712 = _1565;
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
    }
    else
    {
        _1701 = _1395;
        _1702 = _1395;
        _1703 = _1395;
        _1704 = _1395;
        _1705 = _1395;
        _1706 = _1395;
        _1707 = _1395;
        _1708 = _1395;
        _1709 = _1395;
        _1710 = _1395;
        _1711 = _1395;
        _1712 = _1395;
        _1713 = 0.0;
        _1714 = 0.0;
        _1715 = 0.0;
    }
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1407)) + _1407;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1408)) + _1408;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1409)) + _1409;
    float _1748 = fma(_1727, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1725 * cbSceneParam._m0[89u].x));
    float _1751 = fma(_1727, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1725 * cbSceneParam._m0[90u].x));
    float _1754 = fma(_1727, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1725));
    float _1769 = _1033 * 0.5;
    float _1770 = _1034 * 0.5;
    float _1771 = _1035 * 0.5;
    float _1772 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1775 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1778 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1812;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1785 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1394, _1398, _1401, _1404));
        float _1789 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1793 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1800 = dot(vec4(cbModelParam._m0[39u]), vec4(_1769, _1770, _1771, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1823;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1814 = dot(vec4(cbModelParam._m0[40u]), vec4(_1769, _1770, _1771, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1814) ? 0.0 : (isnan(0.0) ? _1814 : max(0.0, _1814))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1827 = (_1823 * cbModelParam._m0[1u].x) + (_1812 * (1.0 - cbModelParam._m0[1u].x));
    float _1837 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _861);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1837 : min(cbModelParam._m0[25u].z, _1837));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1885 = fma(_1095, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087)) + cbModelParam._m0[13u].w;
        float _1889 = fma(_1095, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087)) + cbModelParam._m0[14u].w;
        float _1893 = fma(_1095, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087)) + cbModelParam._m0[15u].w;
        float _1896 = fma(_1035, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033));
        float _1899 = fma(_1035, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033));
        float _1902 = fma(_1035, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033));
        float _1930;
        if (_1896 > 0.0)
        {
            _1930 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1930 = frontier_phi_14_12_ladder;
        }
        float _2133;
        if (_1899 > 0.0)
        {
            _2133 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2133 = frontier_phi_23_19_ladder;
        }
        float _2387;
        if (_1902 > 0.0)
        {
            _2387 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2387 = frontier_phi_35_30_ladder;
        }
        float _2389 = isnan(_2133) ? _1930 : (isnan(_1930) ? _2133 : min(_1930, _2133));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1896) + _1885;
        float _2395 = (_2390 * _1899) + _1889;
        float _2396 = (_2390 * _1902) + _1893;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1838);
            frontier_phi_13_35_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1918 = frontier_phi_13_35_ladder_2;
        _1920 = frontier_phi_13_35_ladder_1;
        _1922 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1033, _1034, _1035), _1838);
        _1918 = _1906.x * cbModelParam._m0[1u].y;
        _1920 = _1906.y * cbModelParam._m0[1u].y;
        _1922 = _1906.z * cbModelParam._m0[1u].y;
    }
    float _1926 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _861);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1926 : min(cbModelParam._m0[25u].w, _1926));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1980 = fma(_1095, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087)) + cbModelParam._m0[21u].w;
        float _1984 = fma(_1095, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087)) + cbModelParam._m0[22u].w;
        float _1988 = fma(_1095, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087)) + cbModelParam._m0[23u].w;
        float _1991 = fma(_1035, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033));
        float _1994 = fma(_1035, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033));
        float _1997 = fma(_1035, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033));
        float _2138;
        if (_1991 > 0.0)
        {
            _2138 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2138 = frontier_phi_25_21_ladder;
        }
        float _2414;
        if (_1994 > 0.0)
        {
            _2414 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2414 = frontier_phi_37_32_ladder;
        }
        float _2627;
        if (_1997 > 0.0)
        {
            _2627 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2627 = frontier_phi_46_43_ladder;
        }
        float _2629 = isnan(_2414) ? _2138 : (isnan(_2138) ? _2414 : min(_2138, _2414));
        float _2630 = isnan(_2627) ? _2629 : (isnan(_2629) ? _2627 : min(_2629, _2627));
        float _2634 = (_2630 * _1991) + _1980;
        float _2635 = (_2630 * _1994) + _1984;
        float _2636 = (_2630 * _1997) + _1988;
        float _2637 = _2630 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2637;
        float _2640 = _2637 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2636 > _2640) || ((_2636 < _2638) || ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 < _2638) || (_2634 > _2640))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2636, cbModelParam._m0[17u].z, fma(_2635, cbModelParam._m0[17u].y, _2634 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2636, cbModelParam._m0[18u].z, fma(_2635, cbModelParam._m0[18u].y, _2634 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2636, cbModelParam._m0[19u].z, fma(_2635, cbModelParam._m0[19u].y, _2634 * cbModelParam._m0[19u].x))), _1927);
            frontier_phi_22_46_ladder = _2864.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2864.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2864.x * cbModelParam._m0[1u].z;
        }
        _2016 = frontier_phi_22_46_ladder_2;
        _2018 = frontier_phi_22_46_ladder_1;
        _2020 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1033, _1034, _1035), _1927);
        _2016 = _2000.x * cbModelParam._m0[1u].z;
        _2018 = _2000.y * cbModelParam._m0[1u].z;
        _2020 = _2000.z * cbModelParam._m0[1u].z;
    }
    float _2033 = (((_1058 * _1010) + _1059) * _1025) * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2035 = (((_1058 * _1012) + _1059) * _1025) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2037 = (((_1058 * _1013) + _1059) * _1025) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2040 = fma(_2037, cbSceneParam._m0[89u].z, fma(_2035, cbSceneParam._m0[89u].y, _2033 * cbSceneParam._m0[89u].x));
    float _2043 = fma(_2037, cbSceneParam._m0[90u].z, fma(_2035, cbSceneParam._m0[90u].y, _2033 * cbSceneParam._m0[90u].x));
    float _2046 = fma(_2037, cbSceneParam._m0[91u].z, fma(_2035, cbSceneParam._m0[91u].y, _2033 * cbSceneParam._m0[91u].x));
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_985 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _1025 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2091 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2095 = _2058 | 1u;
    float _2106 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_858, _859, _860));
    float _2109 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_858, _859, _860));
    float _4284 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _4295 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * 0.3183098733425140380859375;
    float _2116 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * 0.3183098733425140380859375;
    float _2123 = ((cbLight._m0[_2075].x * _2081) * _2116) + ((cbLight._m0[_2085].x * _2091) * _2114);
    float _2124 = ((_2081 * cbLight._m0[_2075].y) * _2116) + ((_2091 * cbLight._m0[_2085].y) * _2114);
    float _2125 = ((_2081 * cbLight._m0[_2075].z) * _2116) + ((_2091 * cbLight._m0[_2085].z) * _2114);
    uvec4 _2130 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2132 = _2130.x == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2132)
    {
        _2143 = _2123;
        _2145 = _2124;
        _2147 = _2125;
    }
    else
    {
        uint _2151 = _2058 + 6u;
        float _2167 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_858, _859, _860)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4306 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2170 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2143 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _2123;
        _2145 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _2124;
        _2147 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _2125;
    }
    bool _2150 = _2130.y == 0u;
    float _2188;
    float _2190;
    float _2192;
    if (_2150)
    {
        _2188 = _2143;
        _2190 = _2145;
        _2192 = _2147;
    }
    else
    {
        uint _2358 = _2058 + 7u;
        float _2374 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_858, _859, _860)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4322 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2377 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2188 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2143;
        _2190 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2145;
        _2192 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2147;
    }
    uint _2195 = _2058 + 8u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _861) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2058].x + _939;
    float _2211 = cbLight._m0[_2058].y + _940;
    float _2212 = cbLight._m0[_2058].z + _941;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2058].xyz));
    float _4338 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _4349 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _2224 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2225 = dot(vec3(_858, _859, _860), vec3(_2217, _2218, _2219));
    float _4360 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2217, _2218, _2219));
    float _4371 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2209 * _2209;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
    float _2246 = 0.959999978542327880859375 - _1007;
    float _2248 = 0.959999978542327880859375 - _1008;
    float _2249 = 0.959999978542327880859375 - _1009;
    float _2256 = 1.0 - _2209;
    float _2267 = (0.5 / (((_2224 * ((_2223 * _2256) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2256) + _2209) * _2223))) * _2223;
    float _4382 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    uint _2280 = _2058 + 9u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _861) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2095].x + _939;
    float _2294 = cbLight._m0[_2095].y + _940;
    float _2295 = cbLight._m0[_2095].z + _941;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2095].xyz));
    float _4393 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2307 = dot(vec3(_858, _859, _860), vec3(_2300, _2301, _2302));
    float _4404 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2300, _2301, _2302));
    float _4415 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2292 * _2292;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
    float _2333 = 1.0 - _2292;
    float _2343 = (0.5 / (((_2224 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2333) + _2292) * _2306))) * _2306;
    float _4426 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    float _2355 = (((((_2326 * _2246) + _1010) * cbLight._m0[_2280].x) * _2345) * _2081) + (((((_2245 * _2246) + _1010) * cbLight._m0[_2195].x) * _2269) * _2091);
    float _2356 = (((((_2326 * _2248) + _1012) * cbLight._m0[_2280].y) * _2345) * _2081) + (((((_2245 * _2248) + _1012) * cbLight._m0[_2195].y) * _2269) * _2091);
    float _2357 = (((((_2326 * _2249) + _1013) * cbLight._m0[_2280].z) * _2345) * _2081) + (((((_2245 * _2249) + _1013) * cbLight._m0[_2195].z) * _2269) * _2091);
    float _2419;
    float _2421;
    float _2423;
    if (_2132)
    {
        _2419 = _2355;
        _2421 = _2356;
        _2423 = _2357;
    }
    else
    {
        uint _2425 = _2058 + 2u;
        uint _2429 = _2058 + 10u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _861) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _939;
        float _2446 = cbLight._m0[_2425].y + _940;
        float _2447 = cbLight._m0[_2425].z + _941;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2425].xyz));
        float _4437 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2459 = dot(vec3(_858, _859, _860), vec3(_2452, _2453, _2454));
        float _4448 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4459 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
        float _2485 = 1.0 - _2444;
        float _2495 = (0.5 / (((_2224 * ((_2458 * _2485) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2485) + _2444) * _2458))) * _2458;
        float _4470 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2497 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2498 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2419 = (((((_2478 * _2246) + _1010) * cbLight._m0[_2429].x) * _2497) * _2498) + _2355;
        _2421 = (((((_2478 * _2248) + _1012) * cbLight._m0[_2429].y) * _2497) * _2498) + _2356;
        _2423 = (((((_2478 * _2249) + _1013) * cbLight._m0[_2429].z) * _2497) * _2498) + _2357;
    }
    float _2533;
    float _2535;
    float _2537;
    if (_2150)
    {
        _2533 = _2419;
        _2535 = _2421;
        _2537 = _2423;
    }
    else
    {
        uint _2544 = _2058 + 3u;
        uint _2548 = _2058 + 11u;
        float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _861) * 0.949999988079071044921875);
        float _2563 = _2562 * _2562;
        float _2564 = cbLight._m0[_2544].x + _939;
        float _2565 = cbLight._m0[_2544].y + _940;
        float _2566 = cbLight._m0[_2544].z + _941;
        float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
        float _2571 = _2570 * _2564;
        float _2572 = _2570 * _2565;
        float _2573 = _2570 * _2566;
        float _2574 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2544].xyz));
        float _4486 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2578 = dot(vec3(_858, _859, _860), vec3(_2571, _2572, _2573));
        float _4497 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2582 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2571, _2572, _2573));
        float _4508 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2586 = _2563 * _2563;
        float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
        float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
        float _2604 = 1.0 - _2563;
        float _2614 = (0.5 / (((_2224 * ((_2577 * _2604) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2604) + _2563) * _2577))) * _2577;
        float _4519 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2616 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
        float _2617 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2533 = (((((_2597 * _2246) + _1010) * cbLight._m0[_2548].x) * _2616) * _2617) + _2419;
        _2535 = (((((_2597 * _2248) + _1012) * cbLight._m0[_2548].y) * _2616) * _2617) + _2421;
        _2537 = (((((_2597 * _2249) + _1013) * cbLight._m0[_2548].z) * _2616) * _2617) + _2423;
    }
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_2056.y == 0u)
    {
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2692;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2692;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2692;
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.x;
        uint _2719 = uint((float(_2707.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _2708))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _2708)));
        float _2729 = (log2(_2695 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2730 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        uint _2733 = uint(isnan(14.0) ? _2730 : (isnan(_2730) ? 14.0 : min(_2730, 14.0)));
        uvec4 _2738 = texelFetch(g_lightClusterGridBuffer, int(((_2733 << 2u) + (_2719 << 6u)) >> 2u));
        uint _2739 = _2738.x;
        uint _2740 = _2707.z;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((((1u << ((_2740 >> 4u) & 15u)) + 4294967295u) & _2739) == 0u) || ((_2740 & 240u) == 0u))
        {
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
        }
        else
        {
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            uint _3028 = 0u;
            uint _3037;
            bool _3038;
            for (;;)
            {
                _3037 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                _3038 = _3037 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3038)
                {
                    frontier_phi_61_pred = _3022;
                    frontier_phi_61_pred_1 = _3027;
                    frontier_phi_61_pred_2 = _3026;
                    frontier_phi_61_pred_3 = _3025;
                    frontier_phi_61_pred_4 = _3024;
                    frontier_phi_61_pred_5 = _3023;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3037;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3028 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _2693;
                        float _3213 = _3172.y - _2694;
                        float _3214 = _3172.z - _2695;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_966, _969, _972), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4545 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _2693;
                        float _3248 = (-0.0) - _2694;
                        float _3249 = (-0.0) - _2695;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3264 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _1041;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3254 + _3219;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_966, _969, _972), vec3(_3254, _3255, _3256));
                        float _4561 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3289 = dot(vec3(_966, _969, _972), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4572 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3232 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3222) + _3298;
                        float _4583 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4594 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3296 * _3296) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3081 = (_3243 * _3191.x) + _3149;
                        _3082 = (_3243 * _3191.y) + _3150;
                        _3083 = (_3243 * _3191.z) + _3151;
                        _3078 = (_3324 * _3208.x) + _3146;
                        _3079 = (_3324 * _3208.y) + _3147;
                        _3080 = (_3324 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_61_pred = _3078;
                    frontier_phi_61_pred_1 = _3083;
                    frontier_phi_61_pred_2 = _3082;
                    frontier_phi_61_pred_3 = _3081;
                    frontier_phi_61_pred_4 = _3080;
                    frontier_phi_61_pred_5 = _3079;
                }
                _2870 = frontier_phi_61_pred;
                _2880 = frontier_phi_61_pred_1;
                _2878 = frontier_phi_61_pred_2;
                _2876 = frontier_phi_61_pred_3;
                _2874 = frontier_phi_61_pred_4;
                _2872 = frontier_phi_61_pred_5;
                uint _3029 = _3028 + 1u;
                if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3022 = _2870;
                    _3023 = _2872;
                    _3024 = _2874;
                    _3025 = _2876;
                    _3026 = _2878;
                    _3027 = _2880;
                    _3028 = _3029;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
        }
        uvec4 _2883 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2884 = _2883.z;
        uint _2886 = (_2884 >> 8u) & 15u;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((4294967295u << _2886) & _2739) == 0u)
        {
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
        }
        else
        {
            float _3015 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
            float _3016 = _3015 * _2693;
            float _3017 = _3015 * _2694;
            float _3018 = _3015 * _2695;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2886 < ((_2884 >> 12u) & 15u))
            {
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3129 = _2869;
                float _3130 = _2871;
                float _3131 = _2873;
                float _3132 = _2875;
                float _3133 = _2877;
                float _3134 = _2879;
                uint _3135 = _2886;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3145)
                    {
                        frontier_phi_67_pred = _3132;
                        frontier_phi_67_pred_1 = _3133;
                        frontier_phi_67_pred_2 = _3134;
                        frontier_phi_67_pred_3 = _3131;
                        frontier_phi_67_pred_4 = _3130;
                        frontier_phi_67_pred_5 = _3129;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3342 = _3129;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        float _3345 = _3132;
                        float _3346 = _3133;
                        float _3347 = _3134;
                        uint _3348 = _3144;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3432;
                        float _3478;
                        bool _3479;
                        for (;;)
                        {
                            uint _3359 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3359 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3359 * 40u) + 24u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3453 = (_3359 * 40u) + 28u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3478 = fma(_2695, _3466.z, fma(_2694, _3466.y, _3466.x * _2693)) + _3466.w;
                            _3479 = !((fma(_2695, _3447.z, fma(_2694, _3447.y, _3447.x * _2693)) + _3447.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3479)
                            {
                                float _3506 = _3374.x - _2693;
                                float _3507 = _3374.y - _2694;
                                float _3508 = _3374.z - _2695;
                                float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                                float _3512 = inversesqrt(_3509);
                                float _3513 = _3512 * _3506;
                                float _3514 = _3512 * _3507;
                                float _3515 = _3512 * _3508;
                                float _3519 = 1.0 - (_3509 / (_3375 * _3375));
                                float _4605 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3524 = sqrt(_3509) * _3390.w;
                                float _3526 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                                float _3527 = _3526 * _3526;
                                float _3530 = ((1.0 - _3527) * dot(vec3(_3513, _3514, _3515), vec3(_966, _969, _972))) + _3527;
                                float _3533 = _3524 * _3524;
                                float _3537 = (fma(_2695, _3417.z, fma(_2694, _3417.y, _3417.x * _2693)) + _3417.w) / _3478;
                                float _3538 = (fma(_2695, _3432.z, fma(_2694, _3432.y, _3432.x * _2693)) + _3432.w) / _3478;
                                float _3542 = 1.0 - dot(vec2(_3537, _3538), vec2(_3537, _3538));
                                float _4621 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3544 = _3543 * (((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3520) / ((_3533 * 0.699999988079071044921875) + 1.0));
                                float _3556 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                                float _3557 = 1.0 - _1041;
                                float _3564 = sqrt(1.0 - ((1.0 - (_3557 * _3557)) * (1.0 - (_3556 * _3556))));
                                float _3565 = _3564 * _3564;
                                float _3566 = _3565 * _3565;
                                float _3567 = _3513 - _3016;
                                float _3568 = _3514 - _3017;
                                float _3569 = _3515 - _3018;
                                float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                                float _3577 = dot(vec3(_966, _969, _972), vec3((-0.0) - _3016, (-0.0) - _3017, (-0.0) - _3018));
                                float _4632 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3581 = dot(vec3(_966, _969, _972), vec3(_3573 * _3567, _3573 * _3568, _3573 * _3569));
                                float _4643 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3588 = ((_3584 * _3584) * (_3566 + (-1.0))) + 1.0;
                                float _3589 = _3526 * _3565;
                                float _3590 = _3589 * _3589;
                                float _3596 = ((1.0 - _3590) * dot(vec3(_966, _969, _972), vec3(_3513, _3514, _3515))) + _3590;
                                float _4654 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3598 = 1.0 - _3565;
                                float _3608 = (0.5 / (((_3597 * ((_3580 * _3598) + _3565)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3565) * _3580))) * _3597;
                                float _4665 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3618 = (_3543 * _3520) * (((_3566 * 3.1415927410125732421875) * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) / ((_3588 * _3588) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3618 * _3402.x;
                                frontier_phi_73_pred_1 = _3618 * _3402.y;
                                frontier_phi_73_pred_2 = _3544 * _3390.z;
                                frontier_phi_73_pred_3 = _3544 * _3390.y;
                                frontier_phi_73_pred_4 = _3544 * _3390.x;
                                frontier_phi_73_pred_5 = _3618 * _3402.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3622 = frontier_phi_73_pred;
                            _3623 = frontier_phi_73_pred_1;
                            _3627 = frontier_phi_73_pred_2;
                            _3626 = frontier_phi_73_pred_3;
                            _3625 = frontier_phi_73_pred_4;
                            _3624 = frontier_phi_73_pred_5;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3332;
                        frontier_phi_67_pred_1 = _3333;
                        frontier_phi_67_pred_2 = _3334;
                        frontier_phi_67_pred_3 = _3331;
                        frontier_phi_67_pred_4 = _3330;
                        frontier_phi_67_pred_5 = _3329;
                    }
                    _2997 = frontier_phi_67_pred;
                    _2999 = frontier_phi_67_pred_1;
                    _3001 = frontier_phi_67_pred_2;
                    _2995 = frontier_phi_67_pred_3;
                    _2993 = frontier_phi_67_pred_4;
                    _2991 = frontier_phi_67_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2991;
                        _3130 = _2993;
                        _3131 = _2995;
                        _3132 = _2997;
                        _3133 = _2999;
                        _3134 = _3001;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2999;
                frontier_phi_55_56_ladder_1 = _3001;
                frontier_phi_55_56_ladder_2 = _2997;
                frontier_phi_55_56_ladder_3 = _2995;
                frontier_phi_55_56_ladder_4 = _2993;
                frontier_phi_55_56_ladder_5 = _2991;
            }
            else
            {
                frontier_phi_55_56_ladder = _2877;
                frontier_phi_55_56_ladder_1 = _2879;
                frontier_phi_55_56_ladder_2 = _2875;
                frontier_phi_55_56_ladder_3 = _2873;
                frontier_phi_55_56_ladder_4 = _2871;
                frontier_phi_55_56_ladder_5 = _2869;
            }
            _2990 = frontier_phi_55_56_ladder_5;
            _2992 = frontier_phi_55_56_ladder_4;
            _2994 = frontier_phi_55_56_ladder_3;
            _2996 = frontier_phi_55_56_ladder_2;
            _2998 = frontier_phi_55_56_ladder;
            _3000 = frontier_phi_55_56_ladder_1;
        }
        float _3005 = isnan(1.0) ? _1025 : (isnan(_1025) ? 1.0 : min(_1025, 1.0));
        _2752 = (_3005 * _2996) + _2188;
        _2754 = (_3005 * _2998) + _2190;
        _2756 = (_3005 * _3000) + _2192;
        _2758 = ((_2990 * _1010) * _3005) + _2533;
        _2760 = ((_2992 * _1012) * _3005) + _2535;
        _2762 = ((_2994 * _1013) * _3005) + _2537;
    }
    else
    {
        _2752 = _2188;
        _2754 = _2190;
        _2756 = _2192;
        _2758 = _2533;
        _2760 = _2535;
        _2762 = _2537;
    }
    uint _2768 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _2774 = ((((((_783.x - _778.x) * _761) + _778.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _707) * cbMtdParam._m0[20u].x)) * _716) * cbInstanceData._m0[_2768].x;
    float _2775 = ((((((_783.y - _778.y) * _761) + _778.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_696.y - _694) * _674) + _694)) * cbMtdParam._m0[20u].y)) * _716) * cbInstanceData._m0[_2768].y;
    float _2776 = ((((((_783.z - _778.z) * _761) + _778.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_696.z - _695) * _674) + _695)) * cbMtdParam._m0[20u].z)) * _716) * cbInstanceData._m0[_2768].z;
    float _4681 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4692 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4703 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2793 = (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2752 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1025))) + ((_2758 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1827)) * cbPerFrame._m0[3u].x)) + _2774;
    float _2795 = (_2775 + ((_2760 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1827)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2754 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1025)));
    float _2797 = (_2776 + ((_2762 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1827)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2756 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1025)));
    float _4729 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2810 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    uint _2811 = _985 + 6u;
    float _2819 = _947 / cbSceneParam._m0[86u].x;
    float _2820 = _948 / cbSceneParam._m0[86u].y;
    vec4 _2834 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2819, _2820, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2836 = _2834.x;
    float _2837 = _2834.y;
    float _2838 = _2834.z;
    float _2839 = _2834.w;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _2894 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _2895 = _2894 / _881;
        float _2906 = _2895 * _932;
        float _2907 = _933 * _2895;
        float _2908 = (-0.0) - _2907;
        float _2909 = _2895 * _934;
        float _2911 = (cbSceneParam._m0[77u].w * _2908) / _2894;
        float _2912 = _2911 + cbSceneParam._m0[79u].w;
        float _2913 = cbSceneParam._m0[79u].w - _2907;
        float _2919 = sqrt(((_2906 * _2906) + (_2907 * _2907)) + (_2909 * _2909));
        float _2922 = (1.0 - (cbSceneParam._m0[77u].w / _2894)) * _2919;
        float _2927 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2929 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2908 - _2911) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2912 > 0.0) ? exp2(_2927 * _2912) : (2.0 - exp2(_2929 * _2912))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2922;
        }
        else
        {
            float _3051 = 1.0 / cbSceneParam._m0[80u].x;
            float _3052 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : max(_2912, _2913));
            float _3053 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : min(_2912, _2913));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            _3091 = ((abs(_2919 / _2908) * cbSceneParam._m0[80u].y) * ((((_3062 - _3063) * 2.0) - ((exp2(_2927 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0)))) - exp2(_2927 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))))) * _3051)) - ((exp2(_2929 * _3062) - exp2(_2929 * _3063)) * _3051))) + (_2922 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2819, _2820, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2839);
        _2931 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2836;
        _2933 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2837;
        _2935 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2838;
        _2937 = _3102 * _2839;
    }
    else
    {
        _2931 = _2836;
        _2933 = _2837;
        _2935 = _2838;
        _2937 = _2839;
    }
    float _2949 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2950 = _2949 == 3.0;
    float _2951 = log2(_2937);
    float _2955 = exp2(_2951 * cbSceneParam._m0[78u].x);
    float _2956 = exp2(_2951 * cbSceneParam._m0[78u].y);
    float _2957 = exp2(_2951 * cbSceneParam._m0[78u].z);
    float _2958 = _2955 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0)));
    float _2959 = _2956 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0)));
    float _2960 = _2957 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0)));
    float _2969 = (_2949 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2969 * (_2950 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2931)));
    SV_Target.y = _2969 * (_2950 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2933)));
    SV_Target.z = _2969 * (_2950 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2935)));
    SV_Target.w = cbInstanceData._m0[_2811].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2774) * _2810) * _2955) * _2969;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2775) * _2810) * _2956) * _2969;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2776) * _2810) * _2957) * _2969;
    SV_Target_1.w = cbInstanceData._m0[_2811].w;
}


