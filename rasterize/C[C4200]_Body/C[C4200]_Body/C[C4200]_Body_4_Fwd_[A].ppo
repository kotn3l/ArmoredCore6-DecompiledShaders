#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1530;
float _3943;
float _3944;
float _3945;
float _3946;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _261 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _275 = exp2(log2(_261.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _276 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _277 = isnan(1.0) ? _276 : (isnan(_276) ? 1.0 : min(_276, 1.0));
    vec4 _291 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _295 = _291.z;
    float _303 = exp2(log2(_295 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _317 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _320 = _317.y;
    float _323 = (_317.x + (-0.02500000037252902984619140625)) * 8.0;
    float _327 = roundEven(5.0 - _323);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(4.0) ? _328 : (isnan(_328) ? 4.0 : min(_328, 4.0));
    float _342 = floor(_329);
    vec4 _345 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _342));
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[17u].x;
    _192[0u] = cbMtdParam._m0[17u].y;
    _193[0u] = cbMtdParam._m0[17u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[14u].x;
    _192[2u] = cbMtdParam._m0[14u].y;
    _193[2u] = cbMtdParam._m0[14u].z;
    _191[3u] = cbMtdParam._m0[13u].x;
    _192[3u] = cbMtdParam._m0[13u].y;
    _193[3u] = cbMtdParam._m0[13u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[18u].x;
    _192[5u] = cbMtdParam._m0[18u].y;
    _193[5u] = cbMtdParam._m0[18u].z;
    float _409 = roundEven(_323);
    float _410 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    uint _412 = uint(int(isnan(5.0) ? _410 : (isnan(_410) ? 5.0 : min(_410, 5.0))));
    vec4 _442 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _453 = cbMtdParam._m0[9u].x * _442.x;
    float _454 = cbMtdParam._m0[9u].y * _442.y;
    float _455 = cbMtdParam._m0[9u].z * _442.z;
    float _462 = ((((((_191[_412] - cbMtdParam._m0[10u].x) * _320) + cbMtdParam._m0[10u].x) * _345.x) - _453) * _305) + _453;
    float _463 = ((((((_192[_412] - cbMtdParam._m0[10u].y) * _320) + cbMtdParam._m0[10u].y) * _345.y) - _454) * _305) + _454;
    float _464 = ((((((_193[_412] - cbMtdParam._m0[10u].z) * _320) + cbMtdParam._m0[10u].z) * _345.z) - _455) * _305) + _455;
    float _470 = exp2(log2(_291.w) * cbMtdParam._m0[24u].w);
    vec4 _483 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _503 = (((cbMtdParam._m0[16u].x * _483.x) - _462) * _470) + _462;
    float _504 = (((cbMtdParam._m0[16u].y * _483.y) - _463) * _470) + _463;
    float _505 = (((cbMtdParam._m0[16u].z * _483.z) - _464) * _470) + _464;
    vec4 _517 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _542 = (_261.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _517.x) - _503) * _277) + _503);
    float _544 = (_261.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _517.y) - _504) * _277) + _504);
    float _546 = (_261.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _517.z) - _505) * _277) + _505);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _582 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    uint _584 = uint(int(isnan(4.0) ? _582 : (isnan(_582) ? 4.0 : min(_582, 4.0))));
    float _591 = ((_187[_584] - cbMtdParam._m0[23u].z) * _305) + cbMtdParam._m0[23u].z;
    float _594 = ((cbMtdParam._m0[23u].w - _591) * _470) + _591;
    float _597 = ((cbMtdParam._m0[26u].y - _594) * _277) + _594;
    vec4 _612 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _342));
    vec4 _629 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _637 = cbMtdParam._m0[23u].x + _629.z;
    float _640 = (((_612.z + _186[_584]) - _637) * _305) + _637;
    vec4 _652 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _663 = (((_652.z - _640) + cbMtdParam._m0[30u].x) * _470) + _640;
    float _669 = ((((_295 * 2.0) * _663) - _663) * cbMtdParam._m0[25u].w) + _663;
    vec4 _681 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _692 = (((cbMtdParam._m0[24u].z + _681.z) - _669) * _277) + _669;
    float _705 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _728 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_705 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _705) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _732 = cbPerFrame._m0[22u].x * 2.0;
    float _733 = _732 * cbMtdParam._m0[28u].z;
    float _736 = (_728.x * 0.5) + (-0.25);
    float _739 = (_728.y * 0.5) + (-0.25);
    float _740 = _739 * cbMtdParam._m0[28u].y;
    float _742 = (-0.0) - (cbMtdParam._m0[28u].y * _736);
    float _744 = fract(_733);
    float _746 = fract(_733 + 0.5);
    float _758 = abs((_744 * 2.0) + (-1.0));
    vec4 _774 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_744 * _742) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_740 * _744) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _776 = _774.x;
    float _777 = _774.y;
    float _778 = _774.z;
    vec4 _779 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_746 * _742) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_740 * _746) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _790 = ((_779.x - _776) * _758) + _776;
    float _797 = exp2(log2(_790 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _798 = isnan(cbMtdParam._m0[29u].y) ? _797 : (isnan(_797) ? cbMtdParam._m0[29u].y : max(_797, cbMtdParam._m0[29u].y));
    float _799 = isnan(cbMtdParam._m0[29u].z) ? _798 : (isnan(_798) ? cbMtdParam._m0[29u].z : min(_798, cbMtdParam._m0[29u].z));
    float _823 = (cbMtdParam._m0[33u].x * _705) + TEXCOORD;
    float _824 = (cbMtdParam._m0[33u].y * _705) + TEXCOORD_1;
    float _827 = _732 * cbMtdParam._m0[27u].w;
    float _828 = _739 * cbMtdParam._m0[27u].z;
    float _830 = (-0.0) - (cbMtdParam._m0[27u].z * _736);
    float _831 = fract(_827);
    float _833 = fract(_827 + 0.5);
    float _844 = abs((_831 * 2.0) + (-1.0));
    vec4 _861 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_831 * _830) + _823) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_828 * _831) + _824) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _866 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_833 * _830) + _823) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_828 * _833) + _824) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _900 = ((_612.x - _631) * _305) + _631;
    float _901 = ((_612.y - _632) * _305) + _632;
    float _906 = ((_652.x - _900) * _470) + _900;
    float _907 = ((_652.y - _901) * _470) + _901;
    float _916 = ((((_681.x - _906) * _277) + _906) * 2.0) + (-1.0);
    float _917 = ((((_681.y - _907) * _277) + _907) * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4015 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _923 = sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
    float _926 = (cbMtdParam._m0[26u].z * ((_291.x * 2.0) + (-1.0))) + _916;
    float _927 = (cbMtdParam._m0[26u].z * ((_291.y * 2.0) + (-1.0))) + _917;
    float _929 = gl_FragCoord.x * 0.125;
    float _931 = gl_FragCoord.y * 0.125;
    float _942 = fma(_923, _233 * NORMAL.x, fma(_927, _240 * TANGENT.x, (_226 * _218) * _926));
    float _945 = fma(_923, _233 * NORMAL.y, fma(_927, _240 * TANGENT.y, (_226 * _219) * _926));
    float _948 = fma(_923, _233 * NORMAL.z, fma(_927, _240 * TANGENT.z, (_226 * _220) * _926));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4026 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _956 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4048 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4059 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4070 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _960 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_929, _931)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _980 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1031 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1021);
    float _1032 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1021);
    float _1033 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1021);
    float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
    float _1038 = _1031 * _1037;
    float _1039 = _1032 * _1037;
    float _1040 = _1033 * _1037;
    vec4 _1042 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_929, _931));
    float _1044 = _1042.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1214 = sqrt(((_1031 * _1031) + (_1032 * _1032)) + (_1033 * _1033));
        float _1220 = (cbMatDynParam._m0[5u].x * _1214) + cbMatDynParam._m0[5u].y;
        float _4081 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1225 = (cbMatDynParam._m0[5u].z * _1214) + cbMatDynParam._m0[5u].w;
        float _4092 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) - _1221)) + _1221) < ((_1044 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1055 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1056 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1074 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1077 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1080 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1093 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1094 = _1093 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4103 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1107 = 1.0 - _960;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _960;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _960;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _960;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1055, cbSceneParam._m0[86u].y * _1056));
    float _1133 = _1130.x * TEXCOORD_3.w;
    float _1134 = dot(vec3(_953, _954, _955), vec3(_1038, _1039, _1040));
    float _1137 = _1134 * 2.0;
    float _1141 = (_1137 * _953) - _1038;
    float _1142 = (_1137 * _954) - _1039;
    float _1143 = (_1137 * _955) - _1040;
    float _1147 = abs(dot(vec3(_1038, _1039, _1040), vec3(_953, _954, _955)));
    float _4136 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1149 = sqrt(_956);
    float _1160 = exp2((_1149 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1149 * 3.0));
    float _1166 = (1.0 - _1160) * ((_1149 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1167 = _1160 * _1149;
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1529;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1203, cbModelParam._m0[26u].z, fma(_1199, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195));
        float _1260 = fma(_1203, cbModelParam._m0[27u].z, fma(_1199, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195));
        float _1264 = fma(_1203, cbModelParam._m0[28u].z, fma(_1199, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195));
        float _1288 = _1195 + _953;
        float _1289 = _1199 + _954;
        float _1290 = _1203 + _955;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1256;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1260;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1264;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1318 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1357 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1323.x + (-0.5));
        float _1359 = _1357 * (_1323.y + (-0.5));
        float _1360 = _1357 * (_1323.z + (-0.5));
        float _1367 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1330.x + (-0.5));
        float _1369 = _1367 * (_1330.y + (-0.5));
        float _1370 = _1367 * (_1330.z + (-0.5));
        float _1377 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1337.x + (-0.5));
        float _1379 = _1377 * (_1337.y + (-0.5));
        float _1380 = _1377 * (_1337.z + (-0.5));
        float _1387 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1344.x + (-0.5));
        float _1389 = _1387 * (_1344.y + (-0.5));
        float _1390 = _1387 * (_1344.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1411 = (dot(vec3(_953, _954, _955), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1421 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4184 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1423 + 1.0))) + _1428) * _1391;
        float _1438 = _1359 * 0.5;
        float _1439 = _1369 * 0.5;
        float _1440 = _1379 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_953, _954, _955), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4217 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1465 + 1.0))) + _1470) * _1392;
        float _1480 = _1360 * 0.5;
        float _1481 = _1370 * 0.5;
        float _1482 = _1380 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_953, _954, _955), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4250 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1507 + 1.0))) + _1512) * _1393;
        _1529 = _1360;
        _1531 = _1359;
        _1532 = _1358;
        _1533 = _1370;
        _1534 = _1369;
        _1535 = _1368;
        _1536 = _1380;
        _1537 = _1379;
        _1538 = _1378;
        _1539 = _1393;
        _1540 = _1392;
        _1541 = _1391;
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1530;
        _1531 = _1530;
        _1532 = _1530;
        _1533 = _1530;
        _1534 = _1530;
        _1535 = _1530;
        _1536 = _1530;
        _1537 = _1530;
        _1538 = _1530;
        _1539 = _1530;
        _1540 = _1530;
        _1541 = _1530;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1567 = fma(_1203, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195));
        float _1571 = fma(_1203, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195));
        float _1575 = fma(_1203, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195));
        float _1598 = _1195 + _953;
        float _1599 = _1199 + _954;
        float _1600 = _1203 + _955;
        float _1610 = fma(_1600, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1598)) - _1567;
        float _1611 = fma(_1600, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1598)) - _1571;
        float _1612 = fma(_1600, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1598)) - _1575;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1567 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1571 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[35u].z) + ((((((_1575 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1666 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1633.x + (-0.5));
        float _1668 = _1666 * (_1633.y + (-0.5));
        float _1669 = _1666 * (_1633.z + (-0.5));
        float _1676 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1640.x + (-0.5));
        float _1678 = _1676 * (_1640.y + (-0.5));
        float _1679 = _1676 * (_1640.z + (-0.5));
        float _1686 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1647.x + (-0.5));
        float _1688 = _1686 * (_1647.y + (-0.5));
        float _1689 = _1686 * (_1647.z + (-0.5));
        float _1696 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1654.x + (-0.5));
        float _1698 = _1696 * (_1654.y + (-0.5));
        float _1699 = _1696 * (_1654.z + (-0.5));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = _1667 * 0.5;
        float _1704 = _1677 * 0.5;
        float _1705 = _1687 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_953, _954, _955), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4313 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1730 + 1.0))) + _1735) * _1700;
        float _1745 = _1668 * 0.5;
        float _1746 = _1678 * 0.5;
        float _1747 = _1688 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_953, _954, _955), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4346 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1772 + 1.0))) + _1777) * _1701;
        float _1787 = _1669 * 0.5;
        float _1788 = _1679 * 0.5;
        float _1789 = _1689 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_953, _954, _955), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4379 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1814 + 1.0))) + _1819) * _1702;
        _1836 = _1669;
        _1837 = _1668;
        _1838 = _1667;
        _1839 = _1679;
        _1840 = _1678;
        _1841 = _1677;
        _1842 = _1689;
        _1843 = _1688;
        _1844 = _1687;
        _1845 = _1702;
        _1846 = _1701;
        _1847 = _1700;
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
    }
    else
    {
        _1836 = _1530;
        _1837 = _1530;
        _1838 = _1530;
        _1839 = _1530;
        _1840 = _1530;
        _1841 = _1530;
        _1842 = _1530;
        _1843 = _1530;
        _1844 = _1530;
        _1845 = _1530;
        _1846 = _1530;
        _1847 = _1530;
        _1848 = 0.0;
        _1849 = 0.0;
        _1850 = 0.0;
    }
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1542)) + _1542;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1543)) + _1543;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1544)) + _1544;
    float _1883 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1860));
    float _1904 = _1141 * 0.5;
    float _1905 = _1142 * 0.5;
    float _1906 = _1143 * 0.5;
    float _1907 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1910 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1913 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1920 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1529, _1533, _1536, _1539));
        float _1924 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1928 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1935 = dot(vec4(cbModelParam._m0[39u]), vec4(_1904, _1905, _1906, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1949 = dot(vec4(cbModelParam._m0[40u]), vec4(_1904, _1905, _1906, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1949) ? 0.0 : (isnan(0.0) ? _1949 : max(0.0, _1949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1962 = (_1958 * cbModelParam._m0[1u].x) + (_1947 * (1.0 - cbModelParam._m0[1u].x));
    float _1972 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1972 : min(cbModelParam._m0[25u].z, _1972));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2020 = fma(_1203, cbModelParam._m0[13u].z, fma(_1199, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195)) + cbModelParam._m0[13u].w;
        float _2024 = fma(_1203, cbModelParam._m0[14u].z, fma(_1199, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195)) + cbModelParam._m0[14u].w;
        float _2028 = fma(_1203, cbModelParam._m0[15u].z, fma(_1199, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195)) + cbModelParam._m0[15u].w;
        float _2031 = fma(_1143, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141));
        float _2034 = fma(_1143, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141));
        float _2037 = fma(_1143, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141));
        float _2065;
        if (_2031 > 0.0)
        {
            _2065 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2065 = frontier_phi_19_17_ladder;
        }
        float _2267;
        if (_2034 > 0.0)
        {
            _2267 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2267 = frontier_phi_28_24_ladder;
        }
        float _2521;
        if (_2037 > 0.0)
        {
            _2521 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2521 = frontier_phi_40_35_ladder;
        }
        float _2523 = isnan(_2267) ? _2065 : (isnan(_2065) ? _2267 : min(_2065, _2267));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _2031) + _2020;
        float _2529 = (_2524 * _2034) + _2024;
        float _2530 = (_2524 * _2037) + _2028;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2531;
        float _2535 = _2531 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 > _2535) || ((_2529 < _2533) || ((_2528 < _2533) || (_2528 > _2535))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2530, cbModelParam._m0[9u].z, fma(_2529, cbModelParam._m0[9u].y, _2528 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2530, cbModelParam._m0[10u].z, fma(_2529, cbModelParam._m0[10u].y, _2528 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2530, cbModelParam._m0[11u].z, fma(_2529, cbModelParam._m0[11u].y, _2528 * cbModelParam._m0[11u].x))), _1973);
            frontier_phi_18_40_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _2053 = frontier_phi_18_40_ladder_2;
        _2055 = frontier_phi_18_40_ladder_1;
        _2057 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1141, _1142, _1143), _1973);
        _2053 = _2041.x * cbModelParam._m0[1u].y;
        _2055 = _2041.y * cbModelParam._m0[1u].y;
        _2057 = _2041.z * cbModelParam._m0[1u].y;
    }
    float _2061 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2062 = isnan(_2061) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2061 : min(cbModelParam._m0[25u].w, _2061));
    float _2151;
    float _2153;
    float _2155;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2115 = fma(_1203, cbModelParam._m0[21u].z, fma(_1199, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195)) + cbModelParam._m0[21u].w;
        float _2119 = fma(_1203, cbModelParam._m0[22u].z, fma(_1199, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195)) + cbModelParam._m0[22u].w;
        float _2123 = fma(_1203, cbModelParam._m0[23u].z, fma(_1199, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195)) + cbModelParam._m0[23u].w;
        float _2126 = fma(_1143, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141));
        float _2129 = fma(_1143, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141));
        float _2132 = fma(_1143, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141));
        float _2272;
        if (_2126 > 0.0)
        {
            _2272 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2272 = frontier_phi_30_26_ladder;
        }
        float _2548;
        if (_2129 > 0.0)
        {
            _2548 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2548 = frontier_phi_42_37_ladder;
        }
        float _2761;
        if (_2132 > 0.0)
        {
            _2761 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2761 = frontier_phi_51_48_ladder;
        }
        float _2763 = isnan(_2548) ? _2272 : (isnan(_2272) ? _2548 : min(_2272, _2548));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _2126) + _2115;
        float _2769 = (_2764 * _2129) + _2119;
        float _2770 = (_2764 * _2132) + _2123;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _2062);
            frontier_phi_27_51_ladder = _2998.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2998.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2998.x * cbModelParam._m0[1u].z;
        }
        _2151 = frontier_phi_27_51_ladder_2;
        _2153 = frontier_phi_27_51_ladder_1;
        _2155 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1141, _1142, _1143), _2062);
        _2151 = _2135.x * cbModelParam._m0[1u].z;
        _2153 = _2135.y * cbModelParam._m0[1u].z;
        _2155 = _2135.z * cbModelParam._m0[1u].z;
    }
    float _2168 = (((_1166 * _1118) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2170 = (((_1166 * _1120) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2172 = (((_1166 * _1121) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2175 = fma(_2172, cbSceneParam._m0[89u].z, fma(_2170, cbSceneParam._m0[89u].y, _2168 * cbSceneParam._m0[89u].x));
    float _2178 = fma(_2172, cbSceneParam._m0[90u].z, fma(_2170, cbSceneParam._m0[90u].y, _2168 * cbSceneParam._m0[90u].x));
    float _2181 = fma(_2172, cbSceneParam._m0[91u].z, fma(_2170, cbSceneParam._m0[91u].y, _2168 * cbSceneParam._m0[91u].x));
    uvec4 _2191 = floatBitsToUint(cbInstanceData._m0[_1093 + 5u]);
    uint _2193 = _2191.x * 14u;
    uint _2194 = _2193 + 13u;
    float _2201 = _1133 + (-1.0);
    float _2206 = (cbLight._m0[_2194].x * _2201) + 1.0;
    float _2207 = (cbLight._m0[_2194].y * _2201) + 1.0;
    float _2208 = (cbLight._m0[_2194].z * _2201) + 1.0;
    float _2209 = (cbLight._m0[_2194].w * _2201) + 1.0;
    uint _2210 = _2193 + 5u;
    float _2216 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2220 = _2193 + 4u;
    float _2226 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2230 = _2193 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_953, _954, _955));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_953, _954, _955));
    float _4515 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4526 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2210].x * _2216) * _2251) + ((cbLight._m0[_2220].x * _2226) * _2249);
    float _2259 = ((_2216 * cbLight._m0[_2210].y) * _2251) + ((_2226 * cbLight._m0[_2220].y) * _2249);
    float _2260 = ((_2216 * cbLight._m0[_2210].z) * _2251) + ((_2226 * cbLight._m0[_2220].z) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2193 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2193 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2193 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4537 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2304 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2492 = _2193 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2193 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4553 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2511 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2322 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2277;
        _2324 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2279;
        _2326 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2281;
    }
    uint _2329 = _2193 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _956) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2193].x + _1038;
    float _2345 = cbLight._m0[_2193].y + _1039;
    float _2346 = cbLight._m0[_2193].z + _1040;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2193].xyz));
    float _4569 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _4580 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _2358 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2359 = dot(vec3(_953, _954, _955), vec3(_2351, _2352, _2353));
    float _4591 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2351, _2352, _2353));
    float _4602 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2380 = 0.959999978542327880859375 - _1115;
    float _2382 = 0.959999978542327880859375 - _1116;
    float _2383 = 0.959999978542327880859375 - _1117;
    float _2390 = 1.0 - _2343;
    float _2401 = (0.5 / (((_2358 * ((_2357 * _2390) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2390) + _2343) * _2357))) * _2357;
    float _4613 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2414 = _2193 + 9u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _956) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2230].x + _1038;
    float _2428 = cbLight._m0[_2230].y + _1039;
    float _2429 = cbLight._m0[_2230].z + _1040;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2230].xyz));
    float _4624 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2441 = dot(vec3(_953, _954, _955), vec3(_2434, _2435, _2436));
    float _4635 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2445 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2434, _2435, _2436));
    float _4646 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2449 = _2426 * _2426;
    float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
    float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2467 = 1.0 - _2426;
    float _2477 = (0.5 / (((_2358 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2467) + _2426) * _2440))) * _2440;
    float _4657 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
    float _2489 = (((((_2460 * _2380) + _1118) * cbLight._m0[_2414].x) * _2479) * _2216) + (((((_2379 * _2380) + _1118) * cbLight._m0[_2329].x) * _2403) * _2226);
    float _2490 = (((((_2460 * _2382) + _1120) * cbLight._m0[_2414].y) * _2479) * _2216) + (((((_2379 * _2382) + _1120) * cbLight._m0[_2329].y) * _2403) * _2226);
    float _2491 = (((((_2460 * _2383) + _1121) * cbLight._m0[_2414].z) * _2479) * _2216) + (((((_2379 * _2383) + _1121) * cbLight._m0[_2329].z) * _2403) * _2226);
    float _2553;
    float _2555;
    float _2557;
    if (_2266)
    {
        _2553 = _2489;
        _2555 = _2490;
        _2557 = _2491;
    }
    else
    {
        uint _2559 = _2193 + 2u;
        uint _2563 = _2193 + 10u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _956) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _1038;
        float _2580 = cbLight._m0[_2559].y + _1039;
        float _2581 = cbLight._m0[_2559].z + _1040;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2559].xyz));
        float _4668 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2593 = dot(vec3(_953, _954, _955), vec3(_2586, _2587, _2588));
        float _4679 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4690 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2358 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2619) + _2578) * _2592))) * _2592;
        float _4701 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2553 = (((((_2612 * _2380) + _1118) * cbLight._m0[_2563].x) * _2631) * _2632) + _2489;
        _2555 = (((((_2612 * _2382) + _1120) * cbLight._m0[_2563].y) * _2631) * _2632) + _2490;
        _2557 = (((((_2612 * _2383) + _1121) * cbLight._m0[_2563].z) * _2631) * _2632) + _2491;
    }
    float _2667;
    float _2669;
    float _2671;
    if (_2284)
    {
        _2667 = _2553;
        _2669 = _2555;
        _2671 = _2557;
    }
    else
    {
        uint _2678 = _2193 + 3u;
        uint _2682 = _2193 + 11u;
        float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2678].w)) * _956) * 0.949999988079071044921875);
        float _2697 = _2696 * _2696;
        float _2698 = cbLight._m0[_2678].x + _1038;
        float _2699 = cbLight._m0[_2678].y + _1039;
        float _2700 = cbLight._m0[_2678].z + _1040;
        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
        float _2705 = _2704 * _2698;
        float _2706 = _2704 * _2699;
        float _2707 = _2704 * _2700;
        float _2708 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2678].xyz));
        float _4717 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2712 = dot(vec3(_953, _954, _955), vec3(_2705, _2706, _2707));
        float _4728 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2716 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_2705, _2706, _2707));
        float _4739 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2720 = _2697 * _2697;
        float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
        float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
        float _2738 = 1.0 - _2697;
        float _2748 = (0.5 / (((_2358 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2738) + _2697) * _2711))) * _2711;
        float _4750 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2750 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
        float _2751 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2667 = (((((_2731 * _2380) + _1118) * cbLight._m0[_2682].x) * _2750) * _2751) + _2553;
        _2669 = (((((_2731 * _2382) + _1120) * cbLight._m0[_2682].y) * _2750) * _2751) + _2555;
        _2671 = (((((_2731 * _2383) + _1121) * cbLight._m0[_2682].z) * _2750) * _2751) + _2557;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2191.y == 0u)
    {
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2826;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2826;
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2826;
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1056) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _1055) / _2842)));
        float _2863 = (log2(_2829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            uint _3170 = 0u;
            uint _3179;
            bool _3180;
            for (;;)
            {
                _3179 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                _3180 = _3179 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3180)
                {
                    frontier_phi_68_pred = _3164;
                    frontier_phi_68_pred_1 = _3169;
                    frontier_phi_68_pred_2 = _3168;
                    frontier_phi_68_pred_3 = _3167;
                    frontier_phi_68_pred_4 = _3166;
                    frontier_phi_68_pred_5 = _3165;
                }
                else
                {
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    uint _3315;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3179;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    for (;;)
                    {
                        uint _3319 = uint(findLSB(_3315)) + (_3170 << 5u);
                        uint _3316 = (_3315 + 4294967295u) & _3315;
                        uint _3321 = _3319 * 48u;
                        vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3341 = (_3319 * 48u) + 4u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3360 = (_3319 * 48u) + 8u;
                        vec3 _3371 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x));
                        float _3375 = _3335.x - _2827;
                        float _3376 = _3335.y - _2828;
                        float _3377 = _3335.z - _2829;
                        float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                        float _3381 = inversesqrt(_3378);
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3385 = dot(vec3(_1074, _1077, _1080), vec3(_3382, _3383, _3384));
                        float _3390 = 1.0 - (_3378 * _3335.w);
                        float _4776 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3392 = sqrt(_3378) * _3354.w;
                        float _3395 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3385) + _3396;
                        float _3402 = _3392 * _3392;
                        float _3406 = ((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3391) / ((_3402 * 0.699999988079071044921875) + 1.0);
                        float _3410 = (-0.0) - _2827;
                        float _3411 = (-0.0) - _2828;
                        float _3412 = (-0.0) - _2829;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3427 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                        float _3428 = 1.0 - _1149;
                        float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                        float _3436 = _3435 * _3435;
                        float _3437 = _3436 * _3436;
                        float _3438 = _3417 + _3382;
                        float _3439 = _3418 + _3383;
                        float _3440 = _3419 + _3384;
                        float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                        float _3448 = dot(vec3(_1074, _1077, _1080), vec3(_3417, _3418, _3419));
                        float _4792 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3452 = dot(vec3(_1074, _1077, _1080), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                        float _4803 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                        float _3460 = _3395 * _3436;
                        float _3461 = _3460 * _3460;
                        float _3464 = ((1.0 - _3461) * _3385) + _3461;
                        float _4814 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3466 = 1.0 - _3436;
                        float _3476 = (0.5 / (((_3465 * ((_3451 * _3466) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3436) * _3451))) * _3465;
                        float _4825 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3487 = (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3459 * _3459) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125))) * _3391;
                        _3239 = (_3406 * _3354.x) + _3312;
                        _3240 = (_3406 * _3354.y) + _3313;
                        _3241 = (_3406 * _3354.z) + _3314;
                        _3236 = (_3487 * _3371.x) + _3309;
                        _3237 = (_3487 * _3371.y) + _3310;
                        _3238 = (_3487 * _3371.z) + _3311;
                        if (_3316 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3316;
                        }
                    }
                    frontier_phi_68_pred = _3236;
                    frontier_phi_68_pred_1 = _3241;
                    frontier_phi_68_pred_2 = _3240;
                    frontier_phi_68_pred_3 = _3239;
                    frontier_phi_68_pred_4 = _3238;
                    frontier_phi_68_pred_5 = _3237;
                }
                _3004 = frontier_phi_68_pred;
                _3014 = frontier_phi_68_pred_1;
                _3012 = frontier_phi_68_pred_2;
                _3010 = frontier_phi_68_pred_3;
                _3008 = frontier_phi_68_pred_4;
                _3006 = frontier_phi_68_pred_5;
                uint _3171 = _3170 + 1u;
                if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3164 = _3004;
                    _3165 = _3006;
                    _3166 = _3008;
                    _3167 = _3010;
                    _3168 = _3012;
                    _3169 = _3014;
                    _3170 = _3171;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((4294967295u << _3020) & _2873) == 0u)
        {
            _3132 = _3003;
            _3134 = _3005;
            _3136 = _3007;
            _3138 = _3009;
            _3140 = _3011;
            _3142 = _3013;
        }
        else
        {
            float _3157 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
            float _3158 = _3157 * _2827;
            float _3159 = _3157 * _2828;
            float _3160 = _3157 * _2829;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3292 = _3003;
                float _3293 = _3005;
                float _3294 = _3007;
                float _3295 = _3009;
                float _3296 = _3011;
                float _3297 = _3013;
                uint _3298 = _3020;
                uint _3307;
                bool _3308;
                for (;;)
                {
                    _3307 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                    _3308 = _3307 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3308)
                    {
                        frontier_phi_79_pred = _3297;
                        frontier_phi_79_pred_1 = _3296;
                        frontier_phi_79_pred_2 = _3295;
                        frontier_phi_79_pred_3 = _3294;
                        frontier_phi_79_pred_4 = _3293;
                        frontier_phi_79_pred_5 = _3292;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3514 = _3292;
                        float _3515 = _3293;
                        float _3516 = _3294;
                        float _3517 = _3295;
                        float _3518 = _3296;
                        float _3519 = _3297;
                        uint _3520 = _3307;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3604;
                        float _3650;
                        bool _3651;
                        for (;;)
                        {
                            uint _3531 = ((_3298 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3531 * 40u) + 20u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3531 * 40u) + 24u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3625 = (_3531 * 40u) + 28u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3650 = fma(_2829, _3638.z, fma(_2828, _3638.y, _3638.x * _2827)) + _3638.w;
                            _3651 = !((fma(_2829, _3619.z, fma(_2828, _3619.y, _3619.x * _2827)) + _3619.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3651)
                            {
                                float _3678 = _3546.x - _2827;
                                float _3679 = _3546.y - _2828;
                                float _3680 = _3546.z - _2829;
                                float _3681 = dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680));
                                float _3684 = inversesqrt(_3681);
                                float _3685 = _3684 * _3678;
                                float _3686 = _3684 * _3679;
                                float _3687 = _3684 * _3680;
                                float _3691 = 1.0 - (_3681 / (_3547 * _3547));
                                float _4836 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3696 = sqrt(_3681) * _3562.w;
                                float _3698 = 1.39999997615814208984375 / (_3696 + 1.39999997615814208984375);
                                float _3699 = _3698 * _3698;
                                float _3702 = ((1.0 - _3699) * dot(vec3(_3685, _3686, _3687), vec3(_1074, _1077, _1080))) + _3699;
                                float _3705 = _3696 * _3696;
                                float _3709 = (fma(_2829, _3589.z, fma(_2828, _3589.y, _3589.x * _2827)) + _3589.w) / _3650;
                                float _3710 = (fma(_2829, _3604.z, fma(_2828, _3604.y, _3604.x * _2827)) + _3604.w) / _3650;
                                float _3714 = 1.0 - dot(vec2(_3709, _3710), vec2(_3709, _3710));
                                float _4852 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3716 = _3715 * (((isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0))) * _3692) / ((_3705 * 0.699999988079071044921875) + 1.0));
                                float _3728 = exp2(log2(1.0 / ((_3705 * 3.5) + 5.0)) * 0.25);
                                float _3729 = 1.0 - _1149;
                                float _3736 = sqrt(1.0 - ((1.0 - (_3729 * _3729)) * (1.0 - (_3728 * _3728))));
                                float _3737 = _3736 * _3736;
                                float _3738 = _3737 * _3737;
                                float _3739 = _3685 - _3158;
                                float _3740 = _3686 - _3159;
                                float _3741 = _3687 - _3160;
                                float _3745 = inversesqrt(dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741)));
                                float _3749 = dot(vec3(_1074, _1077, _1080), vec3((-0.0) - _3158, (-0.0) - _3159, (-0.0) - _3160));
                                float _4863 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3753 = dot(vec3(_1074, _1077, _1080), vec3(_3745 * _3739, _3745 * _3740, _3745 * _3741));
                                float _4874 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3760 = ((_3756 * _3756) * (_3738 + (-1.0))) + 1.0;
                                float _3761 = _3698 * _3737;
                                float _3762 = _3761 * _3761;
                                float _3768 = ((1.0 - _3762) * dot(vec3(_1074, _1077, _1080), vec3(_3685, _3686, _3687))) + _3762;
                                float _4885 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3770 = 1.0 - _3737;
                                float _3780 = (0.5 / (((_3769 * ((_3752 * _3770) + _3737)) + 9.9999999392252902907785028219223e-09) + (((_3769 * _3770) + _3737) * _3752))) * _3769;
                                float _4896 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3790 = (_3715 * _3692) * (((_3738 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3760 * _3760) * ((_3705 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3716 * _3562.y;
                                frontier_phi_85_pred_1 = _3716 * _3562.x;
                                frontier_phi_85_pred_2 = _3790 * _3574.z;
                                frontier_phi_85_pred_3 = _3790 * _3574.y;
                                frontier_phi_85_pred_4 = _3790 * _3574.x;
                                frontier_phi_85_pred_5 = _3716 * _3562.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_85_pred;
                            _3797 = frontier_phi_85_pred_1;
                            _3796 = frontier_phi_85_pred_2;
                            _3795 = frontier_phi_85_pred_3;
                            _3794 = frontier_phi_85_pred_4;
                            _3799 = frontier_phi_85_pred_5;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3506;
                        frontier_phi_79_pred_1 = _3505;
                        frontier_phi_79_pred_2 = _3504;
                        frontier_phi_79_pred_3 = _3503;
                        frontier_phi_79_pred_4 = _3502;
                        frontier_phi_79_pred_5 = _3501;
                    }
                    _3143 = frontier_phi_79_pred;
                    _3141 = frontier_phi_79_pred_1;
                    _3139 = frontier_phi_79_pred_2;
                    _3137 = frontier_phi_79_pred_3;
                    _3135 = frontier_phi_79_pred_4;
                    _3133 = frontier_phi_79_pred_5;
                    uint _3299 = _3298 + 1u;
                    if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3292 = _3133;
                        _3293 = _3135;
                        _3294 = _3137;
                        _3295 = _3139;
                        _3296 = _3141;
                        _3297 = _3143;
                        _3298 = _3299;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3137;
                frontier_phi_60_61_ladder_1 = _3143;
                frontier_phi_60_61_ladder_2 = _3141;
                frontier_phi_60_61_ladder_3 = _3139;
                frontier_phi_60_61_ladder_4 = _3135;
                frontier_phi_60_61_ladder_5 = _3133;
            }
            else
            {
                frontier_phi_60_61_ladder = _3007;
                frontier_phi_60_61_ladder_1 = _3013;
                frontier_phi_60_61_ladder_2 = _3011;
                frontier_phi_60_61_ladder_3 = _3009;
                frontier_phi_60_61_ladder_4 = _3005;
                frontier_phi_60_61_ladder_5 = _3003;
            }
            _3132 = frontier_phi_60_61_ladder_5;
            _3134 = frontier_phi_60_61_ladder_4;
            _3136 = frontier_phi_60_61_ladder;
            _3138 = frontier_phi_60_61_ladder_3;
            _3140 = frontier_phi_60_61_ladder_2;
            _3142 = frontier_phi_60_61_ladder_1;
        }
        float _3147 = isnan(1.0) ? _1133 : (isnan(_1133) ? 1.0 : min(_1133, 1.0));
        _2886 = (_3147 * _3138) + _2322;
        _2888 = (_3147 * _3140) + _2324;
        _2890 = (_3147 * _3142) + _2326;
        _2892 = ((_3132 * _1118) * _3147) + _2667;
        _2894 = ((_3134 * _1120) * _3147) + _2669;
        _2896 = ((_3136 * _1121) * _3147) + _2671;
    }
    else
    {
        _2886 = _2322;
        _2888 = _2324;
        _2890 = _2326;
        _2892 = _2667;
        _2894 = _2669;
        _2896 = _2671;
    }
    uint _2902 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _2908 = ((((((_866.x - _861.x) * _844) + _861.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _790) * cbMtdParam._m0[20u].x)) * _799) * cbInstanceData._m0[_2902].x;
    float _2909 = ((((((_866.y - _861.y) * _844) + _861.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_779.y - _777) * _758) + _777)) * cbMtdParam._m0[20u].y)) * _799) * cbInstanceData._m0[_2902].y;
    float _2910 = ((((((_866.z - _861.z) * _844) + _861.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_779.z - _778) * _758) + _778)) * cbMtdParam._m0[20u].z)) * _799) * cbInstanceData._m0[_2902].z;
    float _4912 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4923 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4934 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2927 = (((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2886 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1133))) + ((_2892 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1962)) * cbPerFrame._m0[3u].x)) + _2908;
    float _2929 = (_2909 + ((_2894 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1962)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2888 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1133)));
    float _2931 = (_2910 + ((_2896 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1962)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2890 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1133)));
    float _2932 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
    float _2933 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
    float _2934 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
    float _2940 = cbMtdParam._m0[2u].x * _2908;
    float _2941 = cbMtdParam._m0[2u].y * _2909;
    float _2942 = cbMtdParam._m0[2u].z * _2910;
    float _4960 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2944 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
    uint _2945 = _1093 + 6u;
    float _2953 = _1055 / cbSceneParam._m0[86u].x;
    float _2954 = _1056 / cbSceneParam._m0[86u].y;
    vec4 _2968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, (log2((isnan(cbSceneParam._m0[77u].w) ? _980 : (isnan(_980) ? cbSceneParam._m0[77u].w : min(_980, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2970 = _2968.x;
    float _2971 = _2968.y;
    float _2972 = _2968.z;
    float _2973 = _2968.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_980 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_980) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _980 : min(cbSceneParam._m0[80u].w, _980));
        float _3029 = _3028 / _980;
        float _3040 = _3029 * _1031;
        float _3041 = _1032 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3043 = _3029 * _1033;
        float _3045 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3041;
        float _3053 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3249;
        if (abs((_3042 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3249 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3193 = 1.0 / cbSceneParam._m0[80u].x;
            float _3194 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3195 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            _3249 = ((abs(_3053 / _3042) * cbSceneParam._m0[80u].y) * ((((_3204 - _3205) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))))) * _3193)) - ((exp2(_3063 * _3204) - exp2(_3063 * _3205)) * _3193))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3251 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, 1.0), 0.0);
        float _3260 = exp2((_3249 * (-1.44269502162933349609375)) * (1.0 - _3251.w));
        float _3261 = log2(_3260);
        float _3277 = log2(_2973);
        _3065 = (exp2(_3277 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].x)) * _3251.x) / cbSceneParam._m0[78u].x)) + _2970;
        _3067 = (exp2(_3277 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].y)) * _3251.y) / cbSceneParam._m0[78u].y)) + _2971;
        _3069 = (exp2(_3277 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].z)) * _3251.z) / cbSceneParam._m0[78u].z)) + _2972;
        _3071 = _3260 * _2973;
    }
    else
    {
        _3065 = _2970;
        _3067 = _2971;
        _3069 = _2972;
        _3071 = _2973;
    }
    bool _3287;
    vec4 _3081;
    vec4 _3103;
    float _3105;
    float _3109;
    float _3110;
    float _3111;
    float _3114;
    float _3117;
    float _3120;
    float _3121;
    bool _3131;
    for (;;)
    {
        _3081 = cbMatDynParam._m0[0u];
        float _3083 = roundEven(_3081.y);
        bool _3084 = _3083 == 3.0;
        float _3085 = log2(_3071);
        float _3089 = exp2(_3085 * cbSceneParam._m0[78u].x);
        float _3090 = exp2(_3085 * cbSceneParam._m0[78u].y);
        float _3091 = exp2(_3085 * cbSceneParam._m0[78u].z);
        float _3092 = _3089 * _2932;
        float _3093 = _3090 * _2933;
        float _3094 = _3091 * _2934;
        float _3101 = _1044 + (-0.5);
        _3103 = cbMtdParam._m0[1u];
        _3105 = _3103.y * _3101;
        float _3108 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3109 = _3108 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
        _3110 = _3108 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
        _3111 = _3108 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
        _3114 = ((_2940 * _2944) * _3089) * _3108;
        _3117 = ((_2941 * _2944) * _3090) * _3108;
        _3120 = ((_2942 * _2944) * _3091) * _3108;
        _3121 = _3101 * 0.999000012874603271484375;
        _3131 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3131)
        {
            if ((cbInstanceData._m0[_1093 + 7u].x + _3121) < 0.5)
            {
                _3287 = true;
                break;
            }
        }
        uint _3228 = _1094 + uint(_3081.w);
        if ((cbInstanceData._m0[_3228].w < 1.0) && ((cbInstanceData._m0[_3228].w + _3121) < 0.5))
        {
            _3287 = true;
            break;
        }
        if ((_3105 + 1.0) < _3103.x)
        {
            _3287 = true;
            break;
        }
        _3287 = false;
        break;
    }
    float _3492;
    if (_3287)
    {
        discard_state = true;
        _3492 = 0.0;
    }
    else
    {
        _3492 = cbInstanceData._m0[_2945].w;
    }
    SV_Target.x = _3109;
    SV_Target.y = _3110;
    SV_Target.z = _3111;
    SV_Target.w = _3492;
    SV_Target_1.x = _3114;
    SV_Target_1.y = _3117;
    SV_Target_1.z = _3120;
    SV_Target_1.w = cbInstanceData._m0[_2945].w;
    discard_exit();
}


