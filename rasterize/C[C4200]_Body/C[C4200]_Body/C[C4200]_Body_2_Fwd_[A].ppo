#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1563;
float _3977;
float _3978;
float _3979;
float _3980;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _284 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _297 = exp2(log2(_284.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _313 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _317 = _313.z;
    float _325 = exp2(log2(_317 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    float _348 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _350 = isnan(4.0) ? _349 : (isnan(_349) ? 4.0 : min(_349, 4.0));
    float _363 = floor(_350);
    vec4 _366 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _363));
    vec4 _391 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _402 = cbMtdParam._m0[9u].x * _391.x;
    float _403 = cbMtdParam._m0[9u].y * _391.y;
    float _404 = cbMtdParam._m0[9u].z * _391.z;
    float _411 = (((cbMtdParam._m0[10u].x * _366.x) - _402) * _327) + _402;
    float _412 = (((cbMtdParam._m0[10u].y * _366.y) - _403) * _327) + _403;
    float _413 = (((cbMtdParam._m0[10u].z * _366.z) - _404) * _327) + _404;
    float _419 = exp2(log2(_313.w) * cbMtdParam._m0[24u].w);
    vec4 _432 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _452 = (((cbMtdParam._m0[16u].x * _432.x) - _411) * _419) + _411;
    float _453 = (((cbMtdParam._m0[16u].y * _432.y) - _412) * _419) + _412;
    float _454 = (((cbMtdParam._m0[16u].z * _432.z) - _413) * _419) + _413;
    vec4 _467 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _492 = (_284.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _467.x) - _452) * _299) + _452);
    float _494 = (_284.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _467.y) - _453) * _299) + _453);
    float _496 = (_284.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _467.z) - _454) * _299) + _454);
    vec4 _509 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _528 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_264.x + 0.00999999977648258209228515625));
    float _530 = _528 * (cbMtdParam._m0[25u].z + 1.0);
    float _4019 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _538 = (_531 * ((cbMtdParam._m0[11u].x * _509.x) - _492)) + _492;
    float _539 = (((cbMtdParam._m0[11u].y * _509.y) - _494) * _531) + _494;
    float _540 = (((cbMtdParam._m0[11u].z * _509.z) - _496) * _531) + _496;
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[30u].z;
    _197[0u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[32u].z;
    _197[1u] = cbMtdParam._m0[32u].w;
    _196[2u] = cbMtdParam._m0[32u].x;
    _197[2u] = cbMtdParam._m0[32u].y;
    _196[3u] = cbMtdParam._m0[31u].z;
    _197[3u] = cbMtdParam._m0[31u].w;
    _196[4u] = cbMtdParam._m0[31u].x;
    _197[4u] = cbMtdParam._m0[31u].y;
    float _577 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    uint _579 = uint(int(isnan(4.0) ? _577 : (isnan(_577) ? 4.0 : min(_577, 4.0))));
    float _586 = ((_197[_579] - cbMtdParam._m0[23u].z) * _327) + cbMtdParam._m0[23u].z;
    float _589 = ((cbMtdParam._m0[23u].w - _586) * _419) + _586;
    float _592 = ((cbMtdParam._m0[26u].y - _589) * _299) + _589;
    float _597 = (cbMtdParam._m0[25u].y + 1.0) * _528;
    float _4040 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _600 = _592 - (_592 * _598);
    vec4 _613 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _363));
    vec4 _631 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _639 = cbMtdParam._m0[23u].x + _631.z;
    float _642 = (((_613.z + _196[_579]) - _639) * _327) + _639;
    vec4 _654 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _665 = (((_654.z - _642) + cbMtdParam._m0[30u].x) * _419) + _642;
    float _671 = ((((_317 * 2.0) * _665) - _665) * cbMtdParam._m0[25u].w) + _665;
    vec4 _683 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _694 = (((cbMtdParam._m0[24u].z + _683.z) - _671) * _299) + _671;
    vec4 _706 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _718 = ((_706.z - _694) * _598) + _694;
    float _731 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _754 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_731 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _731) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _758 = cbPerFrame._m0[22u].x * 2.0;
    float _759 = _758 * cbMtdParam._m0[28u].z;
    float _762 = (_754.x * 0.5) + (-0.25);
    float _765 = (_754.y * 0.5) + (-0.25);
    float _766 = _765 * cbMtdParam._m0[28u].y;
    float _768 = (-0.0) - (cbMtdParam._m0[28u].y * _762);
    float _770 = fract(_759);
    float _772 = fract(_759 + 0.5);
    float _783 = abs((_770 * 2.0) + (-1.0));
    vec4 _800 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_770 * _768) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_766 * _770) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _802 = _800.x;
    float _803 = _800.y;
    float _804 = _800.z;
    vec4 _805 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_772 * _768) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_766 * _772) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _816 = ((_805.x - _802) * _783) + _802;
    float _823 = exp2(log2(_816 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _824 = isnan(cbMtdParam._m0[29u].y) ? _823 : (isnan(_823) ? cbMtdParam._m0[29u].y : max(_823, cbMtdParam._m0[29u].y));
    float _825 = isnan(cbMtdParam._m0[29u].z) ? _824 : (isnan(_824) ? cbMtdParam._m0[29u].z : min(_824, cbMtdParam._m0[29u].z));
    float _849 = (cbMtdParam._m0[33u].x * _731) + TEXCOORD;
    float _850 = (cbMtdParam._m0[33u].y * _731) + TEXCOORD_1;
    float _853 = _758 * cbMtdParam._m0[27u].w;
    float _854 = _765 * cbMtdParam._m0[27u].z;
    float _856 = (-0.0) - (cbMtdParam._m0[27u].z * _762);
    float _857 = fract(_853);
    float _859 = fract(_853 + 0.5);
    float _870 = abs((_857 * 2.0) + (-1.0));
    vec4 _887 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_857 * _856) + _849) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_854 * _857) + _850) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _892 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_859 * _856) + _849) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_854 * _859) + _850) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _929 = ((_613.x - _633) * _327) + _633;
    float _930 = ((_613.y - _634) * _327) + _634;
    float _935 = ((_654.x - _929) * _419) + _929;
    float _936 = ((_654.y - _930) * _419) + _930;
    float _945 = ((((_683.x - _935) * _299) + _935) * 2.0) + (-1.0);
    float _946 = ((((_683.y - _936) * _299) + _936) * 2.0) + (-1.0);
    float _947 = dot(vec2(_945, _946), vec2(_945, _946));
    float _4061 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _952 = sqrt(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))));
    float _961 = ((cbMtdParam._m0[26u].z * ((_313.x * 2.0) + (-1.0))) + _945) + (((((_706.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _598);
    float _962 = ((cbMtdParam._m0[26u].z * ((_313.y * 2.0) + (-1.0))) + _946) + (((((_706.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _598);
    float _964 = gl_FragCoord.x * 0.125;
    float _966 = gl_FragCoord.y * 0.125;
    float _976 = fma(_952, _237 * NORMAL.x, fma(_962, _244 * TANGENT.x, (_230 * _222) * _961));
    float _979 = fma(_952, _237 * NORMAL.y, fma(_962, _244 * TANGENT.y, (_230 * _223) * _961));
    float _982 = fma(_952, _237 * NORMAL.z, fma(_962, _244 * TANGENT.z, (_230 * _224) * _961));
    float _986 = inversesqrt(dot(vec3(_976, _979, _982), vec3(_976, _979, _982)));
    float _987 = _986 * _976;
    float _988 = _986 * _979;
    float _989 = _986 * _982;
    float _4072 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _990 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4094 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4105 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4116 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _994 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_964, _966)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1014 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1064 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1054);
    float _1065 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1054);
    float _1066 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1054);
    float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
    float _1071 = _1064 * _1070;
    float _1072 = _1065 * _1070;
    float _1073 = _1066 * _1070;
    vec4 _1075 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_964, _966));
    float _1077 = _1075.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1247 = sqrt(((_1064 * _1064) + (_1065 * _1065)) + (_1066 * _1066));
        float _1253 = (cbMatDynParam._m0[5u].x * _1247) + cbMatDynParam._m0[5u].y;
        float _4127 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1258 = (cbMatDynParam._m0[5u].z * _1247) + cbMatDynParam._m0[5u].w;
        float _4138 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) - _1254)) + _1254) < ((_1077 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1088 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1089 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1107 = fma(_989, cbSceneParam._m0[5u].z, fma(_988, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _987));
    float _1110 = fma(_989, cbSceneParam._m0[6u].z, fma(_988, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _987));
    float _1113 = fma(_989, cbSceneParam._m0[7u].z, fma(_988, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _987));
    uint _1126 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1127 = _1126 + 9u;
    uint _1128 = _1127 + uint(cbMatDynParam._m0[0u].w);
    float _1134 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_1128].x;
    float _1135 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1128].y;
    float _1136 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_1128].z;
    float _4149 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1137 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _4160 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1138 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1139 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _1140 = 1.0 - _994;
    float _1141 = _1137 * _1140;
    float _1142 = _1138 * _1140;
    float _1143 = _1139 * _1140;
    float _1148 = (_1137 + (-0.039999999105930328369140625)) * _994;
    float _1149 = (_1138 + (-0.039999999105930328369140625)) * _994;
    float _1150 = (_1139 + (-0.039999999105930328369140625)) * _994;
    float _1151 = _1148 + 0.039999999105930328369140625;
    float _1153 = _1149 + 0.039999999105930328369140625;
    float _1154 = _1150 + 0.039999999105930328369140625;
    vec4 _1163 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1088, cbSceneParam._m0[86u].y * _1089));
    float _1166 = _1163.x * TEXCOORD_3.w;
    float _1167 = dot(vec3(_987, _988, _989), vec3(_1071, _1072, _1073));
    float _1170 = _1167 * 2.0;
    float _1174 = (_1170 * _987) - _1071;
    float _1175 = (_1170 * _988) - _1072;
    float _1176 = (_1170 * _989) - _1073;
    float _1180 = abs(dot(vec3(_1071, _1072, _1073), vec3(_987, _988, _989)));
    float _4182 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1182 = sqrt(_990);
    float _1193 = exp2((_1182 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1182 * 3.0));
    float _1199 = (1.0 - _1193) * ((_1182 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1200 = _1193 * _1182;
    float _1228 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1232 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1236 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1562;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1289 = fma(_1236, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1228));
        float _1293 = fma(_1236, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1228));
        float _1297 = fma(_1236, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1228));
        float _1321 = _1228 + _987;
        float _1322 = _1232 + _988;
        float _1323 = _1236 + _989;
        float _1333 = fma(_1323, cbModelParam._m0[26u].z, fma(_1322, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1321)) - _1289;
        float _1334 = fma(_1323, cbModelParam._m0[27u].z, fma(_1322, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1321)) - _1293;
        float _1335 = fma(_1323, cbModelParam._m0[28u].z, fma(_1322, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1321)) - _1297;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1351 = ((_1339 * _1333) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1289 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1339 * _1334) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1293 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1339 * _1335) / cbModelParam._m0[34u].z) + ((((((_1297 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1390 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1356.x + (-0.5));
        float _1392 = _1390 * (_1356.y + (-0.5));
        float _1393 = _1390 * (_1356.z + (-0.5));
        float _1400 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1363.x + (-0.5));
        float _1402 = _1400 * (_1363.y + (-0.5));
        float _1403 = _1400 * (_1363.z + (-0.5));
        float _1410 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1370.x + (-0.5));
        float _1412 = _1410 * (_1370.y + (-0.5));
        float _1413 = _1410 * (_1370.z + (-0.5));
        float _1420 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1377.x + (-0.5));
        float _1422 = _1420 * (_1377.y + (-0.5));
        float _1423 = _1420 * (_1377.z + (-0.5));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = _1391 * 0.5;
        float _1428 = _1401 * 0.5;
        float _1429 = _1411 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1444 = (dot(vec3(_987, _988, _989), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1454 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4230 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1456 + 1.0))) + _1461) * _1424;
        float _1471 = _1392 * 0.5;
        float _1472 = _1402 * 0.5;
        float _1473 = _1412 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_987, _988, _989), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4263 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1498 + 1.0))) + _1503) * _1425;
        float _1513 = _1393 * 0.5;
        float _1514 = _1403 * 0.5;
        float _1515 = _1413 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_987, _988, _989), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4296 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1540 + 1.0))) + _1545) * _1426;
        _1562 = _1393;
        _1564 = _1392;
        _1565 = _1391;
        _1566 = _1403;
        _1567 = _1402;
        _1568 = _1401;
        _1569 = _1413;
        _1570 = _1412;
        _1571 = _1411;
        _1572 = _1426;
        _1573 = _1425;
        _1574 = _1424;
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1563;
        _1564 = _1563;
        _1565 = _1563;
        _1566 = _1563;
        _1567 = _1563;
        _1568 = _1563;
        _1569 = _1563;
        _1570 = _1563;
        _1571 = _1563;
        _1572 = _1563;
        _1573 = _1563;
        _1574 = _1563;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1600 = fma(_1236, cbModelParam._m0[30u].z, fma(_1232, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228));
        float _1604 = fma(_1236, cbModelParam._m0[31u].z, fma(_1232, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228));
        float _1608 = fma(_1236, cbModelParam._m0[32u].z, fma(_1232, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228));
        float _1631 = _1228 + _987;
        float _1632 = _1232 + _988;
        float _1633 = _1236 + _989;
        float _1643 = fma(_1633, cbModelParam._m0[30u].z, fma(_1632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1631)) - _1600;
        float _1644 = fma(_1633, cbModelParam._m0[31u].z, fma(_1632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1631)) - _1604;
        float _1645 = fma(_1633, cbModelParam._m0[32u].z, fma(_1632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1631)) - _1608;
        float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
        float _1662 = ((_1649 * _1643) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1600 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1649 * _1644) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1604 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1664 = ((_1649 * _1645) / cbModelParam._m0[35u].z) + ((((((_1608 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        float _1699 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1666.x + (-0.5));
        float _1701 = _1699 * (_1666.y + (-0.5));
        float _1702 = _1699 * (_1666.z + (-0.5));
        float _1709 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1673.x + (-0.5));
        float _1711 = _1709 * (_1673.y + (-0.5));
        float _1712 = _1709 * (_1673.z + (-0.5));
        float _1719 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1680.x + (-0.5));
        float _1721 = _1719 * (_1680.y + (-0.5));
        float _1722 = _1719 * (_1680.z + (-0.5));
        float _1729 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1687.x + (-0.5));
        float _1731 = _1729 * (_1687.y + (-0.5));
        float _1732 = _1729 * (_1687.z + (-0.5));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = _1700 * 0.5;
        float _1737 = _1710 * 0.5;
        float _1738 = _1720 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_987, _988, _989), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4359 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1763 + 1.0))) + _1768) * _1733;
        float _1778 = _1701 * 0.5;
        float _1779 = _1711 * 0.5;
        float _1780 = _1721 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_987, _988, _989), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4392 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1805 + 1.0))) + _1810) * _1734;
        float _1820 = _1702 * 0.5;
        float _1821 = _1712 * 0.5;
        float _1822 = _1722 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_987, _988, _989), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4425 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1847 + 1.0))) + _1852) * _1735;
        _1869 = _1702;
        _1870 = _1701;
        _1871 = _1700;
        _1872 = _1712;
        _1873 = _1711;
        _1874 = _1710;
        _1875 = _1722;
        _1876 = _1721;
        _1877 = _1720;
        _1878 = _1735;
        _1879 = _1734;
        _1880 = _1733;
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
    }
    else
    {
        _1869 = _1563;
        _1870 = _1563;
        _1871 = _1563;
        _1872 = _1563;
        _1873 = _1563;
        _1874 = _1563;
        _1875 = _1563;
        _1876 = _1563;
        _1877 = _1563;
        _1878 = _1563;
        _1879 = _1563;
        _1880 = _1563;
        _1881 = 0.0;
        _1882 = 0.0;
        _1883 = 0.0;
    }
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1575)) + _1575;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1576)) + _1576;
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1577)) + _1577;
    float _1916 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1893));
    float _1937 = _1174 * 0.5;
    float _1938 = _1175 * 0.5;
    float _1939 = _1176 * 0.5;
    float _1940 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1943 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1946 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1980;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1953 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1562, _1566, _1569, _1572));
        float _1957 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1564, _1567, _1570, _1573));
        float _1961 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1565, _1568, _1571, _1574));
        float _1968 = dot(vec4(cbModelParam._m0[39u]), vec4(_1937, _1938, _1939, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1991;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1982 = dot(vec4(cbModelParam._m0[40u]), vec4(_1937, _1938, _1939, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _1995 = (_1991 * cbModelParam._m0[1u].x) + (_1980 * (1.0 - cbModelParam._m0[1u].x));
    float _2005 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _990);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2005 : min(cbModelParam._m0[25u].z, _2005));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2053 = fma(_1236, cbModelParam._m0[13u].z, fma(_1232, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1228)) + cbModelParam._m0[13u].w;
        float _2057 = fma(_1236, cbModelParam._m0[14u].z, fma(_1232, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1228)) + cbModelParam._m0[14u].w;
        float _2061 = fma(_1236, cbModelParam._m0[15u].z, fma(_1232, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1228)) + cbModelParam._m0[15u].w;
        float _2064 = fma(_1176, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1174));
        float _2067 = fma(_1176, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1174));
        float _2070 = fma(_1176, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1174));
        float _2098;
        if (_2064 > 0.0)
        {
            _2098 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2098 = frontier_phi_19_17_ladder;
        }
        float _2301;
        if (_2067 > 0.0)
        {
            _2301 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2301 = frontier_phi_28_24_ladder;
        }
        float _2555;
        if (_2070 > 0.0)
        {
            _2555 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2555 = frontier_phi_40_35_ladder;
        }
        float _2557 = isnan(_2301) ? _2098 : (isnan(_2098) ? _2301 : min(_2098, _2301));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _2064) + _2053;
        float _2563 = (_2558 * _2067) + _2057;
        float _2564 = (_2558 * _2070) + _2061;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2565;
        float _2569 = _2565 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 > _2569) || ((_2563 < _2567) || ((_2562 < _2567) || (_2562 > _2569))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2564, cbModelParam._m0[9u].z, fma(_2563, cbModelParam._m0[9u].y, _2562 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2564, cbModelParam._m0[10u].z, fma(_2563, cbModelParam._m0[10u].y, _2562 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2564, cbModelParam._m0[11u].z, fma(_2563, cbModelParam._m0[11u].y, _2562 * cbModelParam._m0[11u].x))), _2006);
            frontier_phi_18_40_ladder = _2692.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2692.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2692.x * cbModelParam._m0[1u].y;
        }
        _2086 = frontier_phi_18_40_ladder_2;
        _2088 = frontier_phi_18_40_ladder_1;
        _2090 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1174, _1175, _1176), _2006);
        _2086 = _2074.x * cbModelParam._m0[1u].y;
        _2088 = _2074.y * cbModelParam._m0[1u].y;
        _2090 = _2074.z * cbModelParam._m0[1u].y;
    }
    float _2094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _990);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2094 : min(cbModelParam._m0[25u].w, _2094));
    float _2184;
    float _2186;
    float _2188;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2148 = fma(_1236, cbModelParam._m0[21u].z, fma(_1232, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1228)) + cbModelParam._m0[21u].w;
        float _2152 = fma(_1236, cbModelParam._m0[22u].z, fma(_1232, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1228)) + cbModelParam._m0[22u].w;
        float _2156 = fma(_1236, cbModelParam._m0[23u].z, fma(_1232, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1228)) + cbModelParam._m0[23u].w;
        float _2159 = fma(_1176, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1174));
        float _2162 = fma(_1176, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1174));
        float _2165 = fma(_1176, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1174));
        float _2306;
        if (_2159 > 0.0)
        {
            _2306 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2306 = frontier_phi_30_26_ladder;
        }
        float _2582;
        if (_2162 > 0.0)
        {
            _2582 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2582 = frontier_phi_42_37_ladder;
        }
        float _2795;
        if (_2165 > 0.0)
        {
            _2795 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2795 = frontier_phi_51_48_ladder;
        }
        float _2797 = isnan(_2582) ? _2306 : (isnan(_2306) ? _2582 : min(_2306, _2582));
        float _2798 = isnan(_2795) ? _2797 : (isnan(_2797) ? _2795 : min(_2797, _2795));
        float _2802 = (_2798 * _2159) + _2148;
        float _2803 = (_2798 * _2162) + _2152;
        float _2804 = (_2798 * _2165) + _2156;
        float _2805 = _2798 * 9.9999997473787516355514526367188e-05;
        float _2806 = (-1.0) - _2805;
        float _2808 = _2805 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2804 > _2808) || ((_2804 < _2806) || ((_2803 > _2808) || ((_2803 < _2806) || ((_2802 < _2806) || (_2802 > _2808))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2804, cbModelParam._m0[17u].z, fma(_2803, cbModelParam._m0[17u].y, _2802 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2804, cbModelParam._m0[18u].z, fma(_2803, cbModelParam._m0[18u].y, _2802 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2804, cbModelParam._m0[19u].z, fma(_2803, cbModelParam._m0[19u].y, _2802 * cbModelParam._m0[19u].x))), _2095);
            frontier_phi_27_51_ladder = _3032.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3032.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3032.x * cbModelParam._m0[1u].z;
        }
        _2184 = frontier_phi_27_51_ladder_2;
        _2186 = frontier_phi_27_51_ladder_1;
        _2188 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1174, _1175, _1176), _2095);
        _2184 = _2168.x * cbModelParam._m0[1u].z;
        _2186 = _2168.y * cbModelParam._m0[1u].z;
        _2188 = _2168.z * cbModelParam._m0[1u].z;
    }
    float _2201 = (((_1199 * _1151) + _1200) * _1166) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2203 = (((_1199 * _1153) + _1200) * _1166) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2205 = (((_1199 * _1154) + _1200) * _1166) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2208 = fma(_2205, cbSceneParam._m0[89u].z, fma(_2203, cbSceneParam._m0[89u].y, _2201 * cbSceneParam._m0[89u].x));
    float _2211 = fma(_2205, cbSceneParam._m0[90u].z, fma(_2203, cbSceneParam._m0[90u].y, _2201 * cbSceneParam._m0[90u].x));
    float _2214 = fma(_2205, cbSceneParam._m0[91u].z, fma(_2203, cbSceneParam._m0[91u].y, _2201 * cbSceneParam._m0[91u].x));
    uvec4 _2224 = floatBitsToUint(cbInstanceData._m0[_1126 + 5u]);
    uint _2226 = _2224.x * 14u;
    uint _2227 = _2226 + 13u;
    float _2234 = _1166 + (-1.0);
    float _2239 = (cbLight._m0[_2227].x * _2234) + 1.0;
    float _2240 = (cbLight._m0[_2227].y * _2234) + 1.0;
    float _2241 = (cbLight._m0[_2227].z * _2234) + 1.0;
    float _2242 = (cbLight._m0[_2227].w * _2234) + 1.0;
    uint _2243 = _2226 + 5u;
    float _2249 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2253 = _2226 + 4u;
    float _2259 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2263 = _2226 | 1u;
    float _2274 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_987, _988, _989));
    float _2277 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_987, _988, _989));
    float _4561 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _4572 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2282 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * 0.3183098733425140380859375;
    float _2284 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2291 = ((cbLight._m0[_2243].x * _2249) * _2284) + ((cbLight._m0[_2253].x * _2259) * _2282);
    float _2292 = ((_2249 * cbLight._m0[_2243].y) * _2284) + ((_2259 * cbLight._m0[_2253].y) * _2282);
    float _2293 = ((_2249 * cbLight._m0[_2243].z) * _2284) + ((_2259 * cbLight._m0[_2253].z) * _2282);
    uvec4 _2298 = floatBitsToUint(cbLight._m0[_2226 + 12u]);
    bool _2300 = _2298.x == 0u;
    float _2311;
    float _2313;
    float _2315;
    if (_2300)
    {
        _2311 = _2291;
        _2313 = _2292;
        _2315 = _2293;
    }
    else
    {
        uint _2319 = _2226 + 6u;
        float _2335 = (dot(vec3(cbLight._m0[_2226 + 2u].xyz), vec3(_987, _988, _989)) * 0.5) + 0.5;
        float _2336 = _2335 * _2335;
        float _4583 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2337 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2338 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2311 = (((cbLight._m0[_2319].x * 0.3183098733425140380859375) * _2337) * _2338) + _2291;
        _2313 = (((cbLight._m0[_2319].y * 0.3183098733425140380859375) * _2337) * _2338) + _2292;
        _2315 = (((cbLight._m0[_2319].z * 0.3183098733425140380859375) * _2337) * _2338) + _2293;
    }
    bool _2318 = _2298.y == 0u;
    float _2356;
    float _2358;
    float _2360;
    if (_2318)
    {
        _2356 = _2311;
        _2358 = _2313;
        _2360 = _2315;
    }
    else
    {
        uint _2526 = _2226 + 7u;
        float _2542 = (dot(vec3(cbLight._m0[_2226 + 3u].xyz), vec3(_987, _988, _989)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4599 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2545 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2356 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2311;
        _2358 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2313;
        _2360 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2315;
    }
    uint _2363 = _2226 + 8u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _990) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2226].x + _1071;
    float _2379 = cbLight._m0[_2226].y + _1072;
    float _2380 = cbLight._m0[_2226].z + _1073;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_987, _988, _989), vec3(cbLight._m0[_2226].xyz));
    float _4615 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _4626 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _2392 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2393 = dot(vec3(_987, _988, _989), vec3(_2385, _2386, _2387));
    float _4637 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2385, _2386, _2387));
    float _4648 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2377 * _2377;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
    float _2414 = 0.959999978542327880859375 - _1148;
    float _2416 = 0.959999978542327880859375 - _1149;
    float _2417 = 0.959999978542327880859375 - _1150;
    float _2424 = 1.0 - _2377;
    float _2435 = (0.5 / (((_2392 * ((_2391 * _2424) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2424) + _2377) * _2391))) * _2391;
    float _4659 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2437 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    uint _2448 = _2226 + 9u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _990) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2263].x + _1071;
    float _2462 = cbLight._m0[_2263].y + _1072;
    float _2463 = cbLight._m0[_2263].z + _1073;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_987, _988, _989), vec3(cbLight._m0[_2263].xyz));
    float _4670 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2475 = dot(vec3(_987, _988, _989), vec3(_2468, _2469, _2470));
    float _4681 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2468, _2469, _2470));
    float _4692 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2460 * _2460;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
    float _2501 = 1.0 - _2460;
    float _2511 = (0.5 / (((_2392 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2501) + _2460) * _2474))) * _2474;
    float _4703 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    float _2523 = (((((_2494 * _2414) + _1151) * cbLight._m0[_2448].x) * _2513) * _2249) + (((((_2413 * _2414) + _1151) * cbLight._m0[_2363].x) * _2437) * _2259);
    float _2524 = (((((_2494 * _2416) + _1153) * cbLight._m0[_2448].y) * _2513) * _2249) + (((((_2413 * _2416) + _1153) * cbLight._m0[_2363].y) * _2437) * _2259);
    float _2525 = (((((_2494 * _2417) + _1154) * cbLight._m0[_2448].z) * _2513) * _2249) + (((((_2413 * _2417) + _1154) * cbLight._m0[_2363].z) * _2437) * _2259);
    float _2587;
    float _2589;
    float _2591;
    if (_2300)
    {
        _2587 = _2523;
        _2589 = _2524;
        _2591 = _2525;
    }
    else
    {
        uint _2593 = _2226 + 2u;
        uint _2597 = _2226 + 10u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _990) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _1071;
        float _2614 = cbLight._m0[_2593].y + _1072;
        float _2615 = cbLight._m0[_2593].z + _1073;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_987, _988, _989), vec3(cbLight._m0[_2593].xyz));
        float _4714 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2627 = dot(vec3(_987, _988, _989), vec3(_2620, _2621, _2622));
        float _4725 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4736 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2392 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2653) + _2612) * _2626))) * _2626;
        float _4747 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2587 = (((((_2646 * _2414) + _1151) * cbLight._m0[_2597].x) * _2665) * _2666) + _2523;
        _2589 = (((((_2646 * _2416) + _1153) * cbLight._m0[_2597].y) * _2665) * _2666) + _2524;
        _2591 = (((((_2646 * _2417) + _1154) * cbLight._m0[_2597].z) * _2665) * _2666) + _2525;
    }
    float _2701;
    float _2703;
    float _2705;
    if (_2318)
    {
        _2701 = _2587;
        _2703 = _2589;
        _2705 = _2591;
    }
    else
    {
        uint _2712 = _2226 + 3u;
        uint _2716 = _2226 + 11u;
        float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2712].w)) * _990) * 0.949999988079071044921875);
        float _2731 = _2730 * _2730;
        float _2732 = cbLight._m0[_2712].x + _1071;
        float _2733 = cbLight._m0[_2712].y + _1072;
        float _2734 = cbLight._m0[_2712].z + _1073;
        float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
        float _2739 = _2738 * _2732;
        float _2740 = _2738 * _2733;
        float _2741 = _2738 * _2734;
        float _2742 = dot(vec3(_987, _988, _989), vec3(cbLight._m0[_2712].xyz));
        float _4763 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2746 = dot(vec3(_987, _988, _989), vec3(_2739, _2740, _2741));
        float _4774 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2750 = dot(vec3(cbLight._m0[_2712].xyz), vec3(_2739, _2740, _2741));
        float _4785 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2754 = _2731 * _2731;
        float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
        float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
        float _2772 = 1.0 - _2731;
        float _2782 = (0.5 / (((_2392 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2772) + _2731) * _2745))) * _2745;
        float _4796 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2701 = (((((_2765 * _2414) + _1151) * cbLight._m0[_2716].x) * _2784) * _2785) + _2587;
        _2703 = (((((_2765 * _2416) + _1153) * cbLight._m0[_2716].y) * _2784) * _2785) + _2589;
        _2705 = (((((_2765 * _2417) + _1154) * cbLight._m0[_2716].z) * _2784) * _2785) + _2591;
    }
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    if (_2224.y == 0u)
    {
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2861 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2860;
        float _2862 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2860;
        float _2863 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2860;
        uvec4 _2875 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2876 = _2875.x;
        uint _2887 = uint((float(_2875.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1089) / _2876))) + floor(float(uint(cbSceneParam._m0[85u].x * _1088) / _2876)));
        float _2897 = (log2(_2863 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2898 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        uint _2901 = uint(isnan(14.0) ? _2898 : (isnan(_2898) ? 14.0 : min(_2898, 14.0)));
        uvec4 _2906 = texelFetch(g_lightClusterGridBuffer, int(((_2901 << 2u) + (_2887 << 6u)) >> 2u));
        uint _2907 = _2906.x;
        uint _2908 = _2875.z;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((((1u << ((_2908 >> 4u) & 15u)) + 4294967295u) & _2907) == 0u) || ((_2908 & 240u) == 0u))
        {
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
        }
        else
        {
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3214)
                {
                    frontier_phi_68_pred = _3198;
                    frontier_phi_68_pred_1 = _3203;
                    frontier_phi_68_pred_2 = _3202;
                    frontier_phi_68_pred_3 = _3201;
                    frontier_phi_68_pred_4 = _3200;
                    frontier_phi_68_pred_5 = _3199;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3213;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3204 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2861;
                        float _3410 = _3369.y - _2862;
                        float _3411 = _3369.z - _2863;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_1107, _1110, _1113), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4822 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2861;
                        float _3445 = (-0.0) - _2862;
                        float _3446 = (-0.0) - _2863;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3461 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3462 = 1.0 - _1182;
                        float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                        float _3470 = _3469 * _3469;
                        float _3471 = _3470 * _3470;
                        float _3472 = _3451 + _3416;
                        float _3473 = _3452 + _3417;
                        float _3474 = _3453 + _3418;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3482 = dot(vec3(_1107, _1110, _1113), vec3(_3451, _3452, _3453));
                        float _4838 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3486 = dot(vec3(_1107, _1110, _1113), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                        float _4849 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                        float _3494 = _3429 * _3470;
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3419) + _3495;
                        float _4860 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3499 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3500 = 1.0 - _3470;
                        float _3510 = (0.5 / (((_3499 * ((_3485 * _3500) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3470) * _3485))) * _3499;
                        float _4871 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3521 = (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3493 * _3493) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3273 = (_3440 * _3388.x) + _3346;
                        _3274 = (_3440 * _3388.y) + _3347;
                        _3275 = (_3440 * _3388.z) + _3348;
                        _3270 = (_3521 * _3405.x) + _3343;
                        _3271 = (_3521 * _3405.y) + _3344;
                        _3272 = (_3521 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_68_pred = _3270;
                    frontier_phi_68_pred_1 = _3275;
                    frontier_phi_68_pred_2 = _3274;
                    frontier_phi_68_pred_3 = _3273;
                    frontier_phi_68_pred_4 = _3272;
                    frontier_phi_68_pred_5 = _3271;
                }
                _3038 = frontier_phi_68_pred;
                _3048 = frontier_phi_68_pred_1;
                _3046 = frontier_phi_68_pred_2;
                _3044 = frontier_phi_68_pred_3;
                _3042 = frontier_phi_68_pred_4;
                _3040 = frontier_phi_68_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3038;
                    _3199 = _3040;
                    _3200 = _3042;
                    _3201 = _3044;
                    _3202 = _3046;
                    _3203 = _3048;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
        }
        uvec4 _3051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3052 = _3051.z;
        uint _3054 = (_3052 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3054) & _2907) == 0u)
        {
            _3166 = _3037;
            _3168 = _3039;
            _3170 = _3041;
            _3172 = _3043;
            _3174 = _3045;
            _3176 = _3047;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
            float _3192 = _3191 * _2861;
            float _3193 = _3191 * _2862;
            float _3194 = _3191 * _2863;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3054 < ((_3052 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3326 = _3037;
                float _3327 = _3039;
                float _3328 = _3041;
                float _3329 = _3043;
                float _3330 = _3045;
                float _3331 = _3047;
                uint _3332 = _3054;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3342)
                    {
                        frontier_phi_79_pred = _3331;
                        frontier_phi_79_pred_1 = _3330;
                        frontier_phi_79_pred_2 = _3329;
                        frontier_phi_79_pred_3 = _3328;
                        frontier_phi_79_pred_4 = _3327;
                        frontier_phi_79_pred_5 = _3326;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3548 = _3326;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        float _3551 = _3329;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        uint _3554 = _3341;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3565 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3565 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3565 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2863, _3672.z, fma(_2862, _3672.y, _3672.x * _2861)) + _3672.w;
                            _3685 = !((fma(_2863, _3653.z, fma(_2862, _3653.y, _3653.x * _2861)) + _3653.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3580.x - _2861;
                                float _3713 = _3580.y - _2862;
                                float _3714 = _3580.z - _2863;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3581 * _3581));
                                float _4882 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3730 = sqrt(_3715) * _3596.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_1107, _1110, _1113))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2863, _3623.z, fma(_2862, _3623.y, _3623.x * _2861)) + _3623.w) / _3684;
                                float _3744 = (fma(_2863, _3638.z, fma(_2862, _3638.y, _3638.x * _2861)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4898 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1182;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3192;
                                float _3774 = _3720 - _3193;
                                float _3775 = _3721 - _3194;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_1107, _1110, _1113), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4909 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3787 = dot(vec3(_1107, _1110, _1113), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4920 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_1107, _1110, _1113), vec3(_3719, _3720, _3721))) + _3796;
                                float _4931 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4942 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3750 * _3596.y;
                                frontier_phi_85_pred_1 = _3750 * _3596.x;
                                frontier_phi_85_pred_2 = _3824 * _3608.z;
                                frontier_phi_85_pred_3 = _3824 * _3608.y;
                                frontier_phi_85_pred_4 = _3824 * _3608.x;
                                frontier_phi_85_pred_5 = _3750 * _3596.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_85_pred;
                            _3831 = frontier_phi_85_pred_1;
                            _3830 = frontier_phi_85_pred_2;
                            _3829 = frontier_phi_85_pred_3;
                            _3828 = frontier_phi_85_pred_4;
                            _3833 = frontier_phi_85_pred_5;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3540;
                        frontier_phi_79_pred_1 = _3539;
                        frontier_phi_79_pred_2 = _3538;
                        frontier_phi_79_pred_3 = _3537;
                        frontier_phi_79_pred_4 = _3536;
                        frontier_phi_79_pred_5 = _3535;
                    }
                    _3177 = frontier_phi_79_pred;
                    _3175 = frontier_phi_79_pred_1;
                    _3173 = frontier_phi_79_pred_2;
                    _3171 = frontier_phi_79_pred_3;
                    _3169 = frontier_phi_79_pred_4;
                    _3167 = frontier_phi_79_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3167;
                        _3327 = _3169;
                        _3328 = _3171;
                        _3329 = _3173;
                        _3330 = _3175;
                        _3331 = _3177;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3171;
                frontier_phi_60_61_ladder_1 = _3177;
                frontier_phi_60_61_ladder_2 = _3175;
                frontier_phi_60_61_ladder_3 = _3173;
                frontier_phi_60_61_ladder_4 = _3169;
                frontier_phi_60_61_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_60_61_ladder = _3041;
                frontier_phi_60_61_ladder_1 = _3047;
                frontier_phi_60_61_ladder_2 = _3045;
                frontier_phi_60_61_ladder_3 = _3043;
                frontier_phi_60_61_ladder_4 = _3039;
                frontier_phi_60_61_ladder_5 = _3037;
            }
            _3166 = frontier_phi_60_61_ladder_5;
            _3168 = frontier_phi_60_61_ladder_4;
            _3170 = frontier_phi_60_61_ladder;
            _3172 = frontier_phi_60_61_ladder_3;
            _3174 = frontier_phi_60_61_ladder_2;
            _3176 = frontier_phi_60_61_ladder_1;
        }
        float _3181 = isnan(1.0) ? _1166 : (isnan(_1166) ? 1.0 : min(_1166, 1.0));
        _2920 = (_3181 * _3172) + _2356;
        _2922 = (_3181 * _3174) + _2358;
        _2924 = (_3181 * _3176) + _2360;
        _2926 = ((_3166 * _1151) * _3181) + _2701;
        _2928 = ((_3168 * _1153) * _3181) + _2703;
        _2930 = ((_3170 * _1154) * _3181) + _2705;
    }
    else
    {
        _2920 = _2356;
        _2922 = _2358;
        _2924 = _2360;
        _2926 = _2701;
        _2928 = _2703;
        _2930 = _2705;
    }
    uint _2936 = _1127 + uint(cbMatDynParam._m0[0u].w);
    float _2942 = ((((((_892.x - _887.x) * _870) + _887.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _816) * cbMtdParam._m0[20u].x)) * _825) * cbInstanceData._m0[_2936].x;
    float _2943 = ((((((_892.y - _887.y) * _870) + _887.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_805.y - _803) * _783) + _803)) * cbMtdParam._m0[20u].y)) * _825) * cbInstanceData._m0[_2936].y;
    float _2944 = ((((((_892.z - _887.z) * _870) + _887.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_805.z - _804) * _783) + _804)) * cbMtdParam._m0[20u].z)) * _825) * cbInstanceData._m0[_2936].z;
    float _4958 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _4969 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _4980 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _2961 = (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2920 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1166))) + ((_2926 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1995)) * cbPerFrame._m0[3u].x)) + _2942;
    float _2963 = (_2943 + ((_2928 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1995)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2922 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1166)));
    float _2965 = (_2944 + ((_2930 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1995)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2924 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1166)));
    float _2966 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
    float _2967 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
    float _2968 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
    float _2974 = cbMtdParam._m0[2u].x * _2942;
    float _2975 = cbMtdParam._m0[2u].y * _2943;
    float _2976 = cbMtdParam._m0[2u].z * _2944;
    float _5006 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2978 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
    uint _2979 = _1126 + 6u;
    float _2987 = _1088 / cbSceneParam._m0[86u].x;
    float _2988 = _1089 / cbSceneParam._m0[86u].y;
    vec4 _3002 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2987, _2988, (log2((isnan(cbSceneParam._m0[77u].w) ? _1014 : (isnan(_1014) ? cbSceneParam._m0[77u].w : min(_1014, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3004 = _3002.x;
    float _3005 = _3002.y;
    float _3006 = _3002.z;
    float _3007 = _3002.w;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    if (_1014 > cbSceneParam._m0[78u].w)
    {
        float _3062 = isnan(_1014) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1014 : min(cbSceneParam._m0[80u].w, _1014));
        float _3063 = _3062 / _1014;
        float _3074 = _3063 * _1064;
        float _3075 = _1065 * _3063;
        float _3076 = (-0.0) - _3075;
        float _3077 = _3063 * _1066;
        float _3079 = (cbSceneParam._m0[77u].w * _3076) / _3062;
        float _3080 = _3079 + cbSceneParam._m0[79u].w;
        float _3081 = cbSceneParam._m0[79u].w - _3075;
        float _3087 = sqrt(((_3074 * _3074) + (_3075 * _3075)) + (_3077 * _3077));
        float _3090 = (1.0 - (cbSceneParam._m0[77u].w / _3062)) * _3087;
        float _3095 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3097 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3076 - _3079) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3080 > 0.0) ? exp2(_3095 * _3080) : (2.0 - exp2(_3097 * _3080))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3090;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3081) ? _3080 : (isnan(_3080) ? _3081 : max(_3080, _3081));
            float _3229 = isnan(_3081) ? _3080 : (isnan(_3080) ? _3081 : min(_3080, _3081));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3283 = ((abs(_3087 / _3076) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3095 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3095 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3097 * _3238) - exp2(_3097 * _3239)) * _3227))) + (_3090 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2987, _2988, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3007);
        _3099 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3004;
        _3101 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3005;
        _3103 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3006;
        _3105 = _3294 * _3007;
    }
    else
    {
        _3099 = _3004;
        _3101 = _3005;
        _3103 = _3006;
        _3105 = _3007;
    }
    bool _3321;
    vec4 _3115;
    vec4 _3137;
    float _3139;
    float _3143;
    float _3144;
    float _3145;
    float _3148;
    float _3151;
    float _3154;
    float _3155;
    bool _3165;
    for (;;)
    {
        _3115 = cbMatDynParam._m0[0u];
        float _3117 = roundEven(_3115.y);
        bool _3118 = _3117 == 3.0;
        float _3119 = log2(_3105);
        float _3123 = exp2(_3119 * cbSceneParam._m0[78u].x);
        float _3124 = exp2(_3119 * cbSceneParam._m0[78u].y);
        float _3125 = exp2(_3119 * cbSceneParam._m0[78u].z);
        float _3126 = _3123 * _2966;
        float _3127 = _3124 * _2967;
        float _3128 = _3125 * _2968;
        float _3135 = _1077 + (-0.5);
        _3137 = cbMtdParam._m0[1u];
        _3139 = _3137.y * _3135;
        float _3142 = (_3117 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3143 = _3142 * (_3118 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3099)));
        _3144 = _3142 * (_3118 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3101)));
        _3145 = _3142 * (_3118 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3103)));
        _3148 = ((_2974 * _2978) * _3123) * _3142;
        _3151 = ((_2975 * _2978) * _3124) * _3142;
        _3154 = ((_2976 * _2978) * _3125) * _3142;
        _3155 = _3135 * 0.999000012874603271484375;
        _3165 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3165)
        {
            if ((cbInstanceData._m0[_1126 + 7u].x + _3155) < 0.5)
            {
                _3321 = true;
                break;
            }
        }
        uint _3262 = _1127 + uint(_3115.w);
        if ((cbInstanceData._m0[_3262].w < 1.0) && ((cbInstanceData._m0[_3262].w + _3155) < 0.5))
        {
            _3321 = true;
            break;
        }
        if ((_3139 + 1.0) < _3137.x)
        {
            _3321 = true;
            break;
        }
        _3321 = false;
        break;
    }
    float _3526;
    if (_3321)
    {
        discard_state = true;
        _3526 = 0.0;
    }
    else
    {
        _3526 = cbInstanceData._m0[_2979].w;
    }
    SV_Target.x = _3143;
    SV_Target.y = _3144;
    SV_Target.z = _3145;
    SV_Target.w = _3526;
    SV_Target_1.x = _3148;
    SV_Target_1.y = _3151;
    SV_Target_1.z = _3154;
    SV_Target_1.w = cbInstanceData._m0[_2979].w;
    discard_exit();
}


