#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1582;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _286 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _299 = exp2(log2(_286.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _315 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _319 = _315.z;
    float _327 = exp2(log2(_319 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    vec4 _341 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _344 = _341.y;
    float _347 = (_341.x + (-0.02500000037252902984619140625)) * 8.0;
    float _351 = roundEven(5.0 - _347);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _353 = isnan(4.0) ? _352 : (isnan(_352) ? 4.0 : min(_352, 4.0));
    float _366 = floor(_353);
    vec4 _369 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _366));
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[17u].x;
    _198[0u] = cbMtdParam._m0[17u].y;
    _199[0u] = cbMtdParam._m0[17u].z;
    _197[1u] = cbMtdParam._m0[15u].x;
    _198[1u] = cbMtdParam._m0[15u].y;
    _199[1u] = cbMtdParam._m0[15u].z;
    _197[2u] = cbMtdParam._m0[14u].x;
    _198[2u] = cbMtdParam._m0[14u].y;
    _199[2u] = cbMtdParam._m0[14u].z;
    _197[3u] = cbMtdParam._m0[13u].x;
    _198[3u] = cbMtdParam._m0[13u].y;
    _199[3u] = cbMtdParam._m0[13u].z;
    _197[4u] = cbMtdParam._m0[12u].x;
    _198[4u] = cbMtdParam._m0[12u].y;
    _199[4u] = cbMtdParam._m0[12u].z;
    _197[5u] = cbMtdParam._m0[18u].x;
    _198[5u] = cbMtdParam._m0[18u].y;
    _199[5u] = cbMtdParam._m0[18u].z;
    float _433 = roundEven(_347);
    float _434 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    uint _436 = uint(int(isnan(5.0) ? _434 : (isnan(_434) ? 5.0 : min(_434, 5.0))));
    vec4 _466 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _477 = cbMtdParam._m0[9u].x * _466.x;
    float _478 = cbMtdParam._m0[9u].y * _466.y;
    float _479 = cbMtdParam._m0[9u].z * _466.z;
    float _486 = ((((((_197[_436] - cbMtdParam._m0[10u].x) * _344) + cbMtdParam._m0[10u].x) * _369.x) - _477) * _329) + _477;
    float _487 = ((((((_198[_436] - cbMtdParam._m0[10u].y) * _344) + cbMtdParam._m0[10u].y) * _369.y) - _478) * _329) + _478;
    float _488 = ((((((_199[_436] - cbMtdParam._m0[10u].z) * _344) + cbMtdParam._m0[10u].z) * _369.z) - _479) * _329) + _479;
    float _494 = exp2(log2(_315.w) * cbMtdParam._m0[24u].w);
    vec4 _507 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _527 = (((cbMtdParam._m0[16u].x * _507.x) - _486) * _494) + _486;
    float _528 = (((cbMtdParam._m0[16u].y * _507.y) - _487) * _494) + _487;
    float _529 = (((cbMtdParam._m0[16u].z * _507.z) - _488) * _494) + _488;
    vec4 _541 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _566 = (_286.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _541.x) - _527) * _301) + _527);
    float _568 = (_286.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _541.y) - _528) * _301) + _528);
    float _570 = (_286.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _541.z) - _529) * _301) + _529);
    vec4 _582 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _601 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_266.x + 0.00999999977648258209228515625));
    float _603 = _601 * (cbMtdParam._m0[25u].z + 1.0);
    float _3982 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _611 = (_604 * ((cbMtdParam._m0[11u].x * _582.x) - _566)) + _566;
    float _612 = (((cbMtdParam._m0[11u].y * _582.y) - _568) * _604) + _568;
    float _613 = (((cbMtdParam._m0[11u].z * _582.z) - _570) * _604) + _570;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[30u].z;
    _193[0u] = cbMtdParam._m0[30u].w;
    _192[1u] = cbMtdParam._m0[32u].z;
    _193[1u] = cbMtdParam._m0[32u].w;
    _192[2u] = cbMtdParam._m0[32u].x;
    _193[2u] = cbMtdParam._m0[32u].y;
    _192[3u] = cbMtdParam._m0[31u].z;
    _193[3u] = cbMtdParam._m0[31u].w;
    _192[4u] = cbMtdParam._m0[31u].x;
    _193[4u] = cbMtdParam._m0[31u].y;
    float _649 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    uint _651 = uint(int(isnan(4.0) ? _649 : (isnan(_649) ? 4.0 : min(_649, 4.0))));
    float _658 = ((_193[_651] - cbMtdParam._m0[23u].z) * _329) + cbMtdParam._m0[23u].z;
    float _661 = ((cbMtdParam._m0[23u].w - _658) * _494) + _658;
    float _664 = ((cbMtdParam._m0[26u].y - _661) * _301) + _661;
    float _669 = (cbMtdParam._m0[25u].y + 1.0) * _601;
    float _4003 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _672 = _664 - (_664 * _670);
    vec4 _685 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _366));
    vec4 _702 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _704 = _702.x;
    float _705 = _702.y;
    float _710 = cbMtdParam._m0[23u].x + _702.z;
    float _713 = (((_685.z + _192[_651]) - _710) * _329) + _710;
    vec4 _725 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _736 = (((_725.z - _713) + cbMtdParam._m0[30u].x) * _494) + _713;
    float _742 = ((((_319 * 2.0) * _736) - _736) * cbMtdParam._m0[25u].w) + _736;
    vec4 _754 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _765 = (((cbMtdParam._m0[24u].z + _754.z) - _742) * _301) + _742;
    vec4 _777 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _789 = ((_777.z - _765) * _670) + _765;
    float _802 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _825 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_802 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _802) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _829 = cbPerFrame._m0[22u].x * 2.0;
    float _830 = _829 * cbMtdParam._m0[28u].z;
    float _833 = (_825.x * 0.5) + (-0.25);
    float _836 = (_825.y * 0.5) + (-0.25);
    float _837 = _836 * cbMtdParam._m0[28u].y;
    float _839 = (-0.0) - (cbMtdParam._m0[28u].y * _833);
    float _841 = fract(_830);
    float _843 = fract(_830 + 0.5);
    float _854 = abs((_841 * 2.0) + (-1.0));
    vec4 _870 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_841 * _839) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_837 * _841) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _872 = _870.x;
    float _873 = _870.y;
    float _874 = _870.z;
    vec4 _875 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_843 * _839) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_837 * _843) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _886 = ((_875.x - _872) * _854) + _872;
    float _893 = exp2(log2(_886 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _894 = isnan(cbMtdParam._m0[29u].y) ? _893 : (isnan(_893) ? cbMtdParam._m0[29u].y : max(_893, cbMtdParam._m0[29u].y));
    float _895 = isnan(cbMtdParam._m0[29u].z) ? _894 : (isnan(_894) ? cbMtdParam._m0[29u].z : min(_894, cbMtdParam._m0[29u].z));
    float _919 = (cbMtdParam._m0[33u].x * _802) + TEXCOORD;
    float _920 = (cbMtdParam._m0[33u].y * _802) + TEXCOORD_1;
    float _923 = _829 * cbMtdParam._m0[27u].w;
    float _924 = _836 * cbMtdParam._m0[27u].z;
    float _926 = (-0.0) - (cbMtdParam._m0[27u].z * _833);
    float _927 = fract(_923);
    float _929 = fract(_923 + 0.5);
    float _940 = abs((_927 * 2.0) + (-1.0));
    vec4 _957 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_927 * _926) + _919) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_924 * _927) + _920) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _962 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_929 * _926) + _919) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_924 * _929) + _920) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _999 = ((_685.x - _704) * _329) + _704;
    float _1000 = ((_685.y - _705) * _329) + _705;
    float _1005 = ((_725.x - _999) * _494) + _999;
    float _1006 = ((_725.y - _1000) * _494) + _1000;
    float _1015 = ((((_754.x - _1005) * _301) + _1005) * 2.0) + (-1.0);
    float _1016 = ((((_754.y - _1006) * _301) + _1006) * 2.0) + (-1.0);
    float _1017 = dot(vec2(_1015, _1016), vec2(_1015, _1016));
    float _4024 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1022 = sqrt(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))));
    float _1031 = ((cbMtdParam._m0[26u].z * ((_315.x * 2.0) + (-1.0))) + _1015) + (((((_777.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _670);
    float _1032 = ((cbMtdParam._m0[26u].z * ((_315.y * 2.0) + (-1.0))) + _1016) + (((((_777.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _670);
    float _1035 = fma(_1022, _239 * NORMAL.x, fma(_1032, _246 * TANGENT.x, (_232 * _224) * _1031));
    float _1038 = fma(_1022, _239 * NORMAL.y, fma(_1032, _246 * TANGENT.y, (_232 * _225) * _1031));
    float _1041 = fma(_1022, _239 * NORMAL.z, fma(_1032, _246 * TANGENT.z, (_232 * _226) * _1031));
    float _1045 = inversesqrt(dot(vec3(_1035, _1038, _1041), vec3(_1035, _1038, _1041)));
    float _1046 = _1045 * _1035;
    float _1047 = _1045 * _1038;
    float _1048 = _1045 * _1041;
    float _4035 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _1049 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4057 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4068 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4079 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _1053 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1069 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1119 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1109);
    float _1120 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1109);
    float _1121 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1109);
    float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
    float _1126 = _1119 * _1125;
    float _1127 = _1120 * _1125;
    float _1128 = _1121 * _1125;
    float _1134 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1135 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1153 = fma(_1048, cbSceneParam._m0[5u].z, fma(_1047, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1046));
    float _1156 = fma(_1048, cbSceneParam._m0[6u].z, fma(_1047, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1046));
    float _1159 = fma(_1048, cbSceneParam._m0[7u].z, fma(_1047, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1046));
    uint _1172 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1173 = _1172 + 9u;
    uint _1174 = _1173 + uint(cbMatDynParam._m0[0u].w);
    float _1180 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1174].x;
    float _1181 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_1174].y;
    float _1182 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_1174].z;
    float _4090 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _1186 = 1.0 - _1053;
    float _1187 = _1183 * _1186;
    float _1188 = _1184 * _1186;
    float _1189 = _1185 * _1186;
    float _1194 = (_1183 + (-0.039999999105930328369140625)) * _1053;
    float _1195 = (_1184 + (-0.039999999105930328369140625)) * _1053;
    float _1196 = (_1185 + (-0.039999999105930328369140625)) * _1053;
    float _1197 = _1194 + 0.039999999105930328369140625;
    float _1199 = _1195 + 0.039999999105930328369140625;
    float _1200 = _1196 + 0.039999999105930328369140625;
    vec4 _1209 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1134, cbSceneParam._m0[86u].y * _1135));
    float _1212 = _1209.x * TEXCOORD_3.w;
    float _1213 = dot(vec3(_1046, _1047, _1048), vec3(_1126, _1127, _1128));
    float _1216 = _1213 * 2.0;
    float _1220 = (_1216 * _1046) - _1126;
    float _1221 = (_1216 * _1047) - _1127;
    float _1222 = (_1216 * _1048) - _1128;
    float _1226 = abs(dot(vec3(_1126, _1127, _1128), vec3(_1046, _1047, _1048)));
    float _4123 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1228 = sqrt(_1049);
    float _1239 = exp2((_1228 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1228 * 3.0));
    float _1245 = (1.0 - _1239) * ((_1228 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1246 = _1239 * _1228;
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1282 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1581;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1308 = fma(_1282, cbModelParam._m0[26u].z, fma(_1278, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274));
        float _1312 = fma(_1282, cbModelParam._m0[27u].z, fma(_1278, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274));
        float _1316 = fma(_1282, cbModelParam._m0[28u].z, fma(_1278, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274));
        float _1340 = _1274 + _1046;
        float _1341 = _1278 + _1047;
        float _1342 = _1282 + _1048;
        float _1352 = fma(_1342, cbModelParam._m0[26u].z, fma(_1341, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1340)) - _1308;
        float _1353 = fma(_1342, cbModelParam._m0[27u].z, fma(_1341, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1340)) - _1312;
        float _1354 = fma(_1342, cbModelParam._m0[28u].z, fma(_1341, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1340)) - _1316;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1370 = ((_1358 * _1352) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1308 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1358 * _1353) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1312 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1354) / cbModelParam._m0[34u].z) + ((((((_1316 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1409 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1375.x + (-0.5));
        float _1411 = _1409 * (_1375.y + (-0.5));
        float _1412 = _1409 * (_1375.z + (-0.5));
        float _1419 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1382.x + (-0.5));
        float _1421 = _1419 * (_1382.y + (-0.5));
        float _1422 = _1419 * (_1382.z + (-0.5));
        float _1429 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1389.x + (-0.5));
        float _1431 = _1429 * (_1389.y + (-0.5));
        float _1432 = _1429 * (_1389.z + (-0.5));
        float _1439 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1396.x + (-0.5));
        float _1441 = _1439 * (_1396.y + (-0.5));
        float _1442 = _1439 * (_1396.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1463 = (dot(vec3(_1046, _1047, _1048), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1473 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4171 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1475 + 1.0))) + _1480) * _1443;
        float _1490 = _1411 * 0.5;
        float _1491 = _1421 * 0.5;
        float _1492 = _1431 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_1046, _1047, _1048), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4204 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1517 + 1.0))) + _1522) * _1444;
        float _1532 = _1412 * 0.5;
        float _1533 = _1422 * 0.5;
        float _1534 = _1432 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1046, _1047, _1048), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4237 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1559 + 1.0))) + _1564) * _1445;
        _1581 = _1412;
        _1583 = _1411;
        _1584 = _1410;
        _1585 = _1422;
        _1586 = _1421;
        _1587 = _1420;
        _1588 = _1432;
        _1589 = _1431;
        _1590 = _1430;
        _1591 = _1445;
        _1592 = _1444;
        _1593 = _1443;
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1582;
        _1583 = _1582;
        _1584 = _1582;
        _1585 = _1582;
        _1586 = _1582;
        _1587 = _1582;
        _1588 = _1582;
        _1589 = _1582;
        _1590 = _1582;
        _1591 = _1582;
        _1592 = _1582;
        _1593 = _1582;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1619 = fma(_1282, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274));
        float _1623 = fma(_1282, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274));
        float _1627 = fma(_1282, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274));
        float _1650 = _1274 + _1046;
        float _1651 = _1278 + _1047;
        float _1652 = _1282 + _1048;
        float _1662 = fma(_1652, cbModelParam._m0[30u].z, fma(_1651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1650)) - _1619;
        float _1663 = fma(_1652, cbModelParam._m0[31u].z, fma(_1651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1650)) - _1623;
        float _1664 = fma(_1652, cbModelParam._m0[32u].z, fma(_1651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1650)) - _1627;
        float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
        float _1681 = ((_1668 * _1662) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1619 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1682 = ((_1668 * _1663) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1623 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1668 * _1664) / cbModelParam._m0[35u].z) + ((((((_1627 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        float _1718 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1685.x + (-0.5));
        float _1720 = _1718 * (_1685.y + (-0.5));
        float _1721 = _1718 * (_1685.z + (-0.5));
        float _1728 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1692.x + (-0.5));
        float _1730 = _1728 * (_1692.y + (-0.5));
        float _1731 = _1728 * (_1692.z + (-0.5));
        float _1738 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1699.x + (-0.5));
        float _1740 = _1738 * (_1699.y + (-0.5));
        float _1741 = _1738 * (_1699.z + (-0.5));
        float _1748 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1706.x + (-0.5));
        float _1750 = _1748 * (_1706.y + (-0.5));
        float _1751 = _1748 * (_1706.z + (-0.5));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = _1719 * 0.5;
        float _1756 = _1729 * 0.5;
        float _1757 = _1739 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_1046, _1047, _1048), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4300 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1782 + 1.0))) + _1787) * _1752;
        float _1797 = _1720 * 0.5;
        float _1798 = _1730 * 0.5;
        float _1799 = _1740 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_1046, _1047, _1048), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4333 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1824 + 1.0))) + _1829) * _1753;
        float _1839 = _1721 * 0.5;
        float _1840 = _1731 * 0.5;
        float _1841 = _1741 * 0.5;
        float _1842 = dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841));
        float _1847 = (_1842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1842);
        float _1855 = (dot(vec3(_1046, _1047, _1048), vec3(_1847 * _1839, _1847 * _1840, _1847 * _1841)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1866 = _1865 * 2.0;
        float _1870 = (1.0 - _1865) / (_1865 + 1.0);
        float _4366 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1880 = ((((1.0 - _1871) * (_1866 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1866 + 1.0))) + _1871) * _1754;
        _1888 = _1721;
        _1889 = _1720;
        _1890 = _1719;
        _1891 = _1731;
        _1892 = _1730;
        _1893 = _1729;
        _1894 = _1741;
        _1895 = _1740;
        _1896 = _1739;
        _1897 = _1754;
        _1898 = _1753;
        _1899 = _1752;
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)));
    }
    else
    {
        _1888 = _1582;
        _1889 = _1582;
        _1890 = _1582;
        _1891 = _1582;
        _1892 = _1582;
        _1893 = _1582;
        _1894 = _1582;
        _1895 = _1582;
        _1896 = _1582;
        _1897 = _1582;
        _1898 = _1582;
        _1899 = _1582;
        _1900 = 0.0;
        _1901 = 0.0;
        _1902 = 0.0;
    }
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1594)) + _1594;
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1595)) + _1595;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1596)) + _1596;
    float _1935 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1912));
    float _1956 = _1220 * 0.5;
    float _1957 = _1221 * 0.5;
    float _1958 = _1222 * 0.5;
    float _1959 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1962 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _1965 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1999;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1972 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1581, _1585, _1588, _1591));
        float _1976 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1583, _1586, _1589, _1592));
        float _1980 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1584, _1587, _1590, _1593));
        float _1987 = dot(vec4(cbModelParam._m0[39u]), vec4(_1956, _1957, _1958, 1.0));
        _1999 = dot(vec3(isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1987) ? 0.0 : (isnan(0.0) ? _1987 : max(0.0, _1987))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1999 = 1.0;
    }
    float _2010;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2001 = dot(vec4(cbModelParam._m0[40u]), vec4(_1956, _1957, _1958, 1.0));
        _2010 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2001) ? 0.0 : (isnan(0.0) ? _2001 : max(0.0, _2001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2010 = 1.0;
    }
    float _2014 = (_2010 * cbModelParam._m0[1u].x) + (_1999 * (1.0 - cbModelParam._m0[1u].x));
    float _2024 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1049);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2024 : min(cbModelParam._m0[25u].z, _2024));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2072 = fma(_1282, cbModelParam._m0[13u].z, fma(_1278, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1274)) + cbModelParam._m0[13u].w;
        float _2076 = fma(_1282, cbModelParam._m0[14u].z, fma(_1278, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1274)) + cbModelParam._m0[14u].w;
        float _2080 = fma(_1282, cbModelParam._m0[15u].z, fma(_1278, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1274)) + cbModelParam._m0[15u].w;
        float _2083 = fma(_1222, cbModelParam._m0[13u].z, fma(_1221, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1220));
        float _2086 = fma(_1222, cbModelParam._m0[14u].z, fma(_1221, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1220));
        float _2089 = fma(_1222, cbModelParam._m0[15u].z, fma(_1221, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1220));
        float _2117;
        if (_2083 > 0.0)
        {
            _2117 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2117 = frontier_phi_14_12_ladder;
        }
        float _2319;
        if (_2086 > 0.0)
        {
            _2319 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2319 = frontier_phi_23_19_ladder;
        }
        float _2573;
        if (_2089 > 0.0)
        {
            _2573 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2573 = frontier_phi_35_30_ladder;
        }
        float _2575 = isnan(_2319) ? _2117 : (isnan(_2117) ? _2319 : min(_2117, _2319));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _2083) + _2072;
        float _2581 = (_2576 * _2086) + _2076;
        float _2582 = (_2576 * _2089) + _2080;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2583;
        float _2587 = _2583 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 > _2587) || ((_2581 < _2585) || ((_2580 < _2585) || (_2580 > _2587))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2582, cbModelParam._m0[9u].z, fma(_2581, cbModelParam._m0[9u].y, _2580 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2582, cbModelParam._m0[10u].z, fma(_2581, cbModelParam._m0[10u].y, _2580 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2582, cbModelParam._m0[11u].z, fma(_2581, cbModelParam._m0[11u].y, _2580 * cbModelParam._m0[11u].x))), _2025);
            frontier_phi_13_35_ladder = _2710.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2710.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2710.x * cbModelParam._m0[1u].y;
        }
        _2105 = frontier_phi_13_35_ladder_2;
        _2107 = frontier_phi_13_35_ladder_1;
        _2109 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1220, _1221, _1222), _2025);
        _2105 = _2093.x * cbModelParam._m0[1u].y;
        _2107 = _2093.y * cbModelParam._m0[1u].y;
        _2109 = _2093.z * cbModelParam._m0[1u].y;
    }
    float _2113 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1049);
    float _2114 = isnan(_2113) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2113 : min(cbModelParam._m0[25u].w, _2113));
    float _2203;
    float _2205;
    float _2207;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2167 = fma(_1282, cbModelParam._m0[21u].z, fma(_1278, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1274)) + cbModelParam._m0[21u].w;
        float _2171 = fma(_1282, cbModelParam._m0[22u].z, fma(_1278, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1274)) + cbModelParam._m0[22u].w;
        float _2175 = fma(_1282, cbModelParam._m0[23u].z, fma(_1278, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1274)) + cbModelParam._m0[23u].w;
        float _2178 = fma(_1222, cbModelParam._m0[21u].z, fma(_1221, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1220));
        float _2181 = fma(_1222, cbModelParam._m0[22u].z, fma(_1221, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1220));
        float _2184 = fma(_1222, cbModelParam._m0[23u].z, fma(_1221, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1220));
        float _2324;
        if (_2178 > 0.0)
        {
            _2324 = abs((1.0 - _2167) / _2178);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2167 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2324 = frontier_phi_25_21_ladder;
        }
        float _2600;
        if (_2181 > 0.0)
        {
            _2600 = abs((1.0 - _2171) / _2181);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2171 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2600 = frontier_phi_37_32_ladder;
        }
        float _2813;
        if (_2184 > 0.0)
        {
            _2813 = abs((1.0 - _2175) / _2184);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2175 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2813 = frontier_phi_46_43_ladder;
        }
        float _2815 = isnan(_2600) ? _2324 : (isnan(_2324) ? _2600 : min(_2324, _2600));
        float _2816 = isnan(_2813) ? _2815 : (isnan(_2815) ? _2813 : min(_2815, _2813));
        float _2820 = (_2816 * _2178) + _2167;
        float _2821 = (_2816 * _2181) + _2171;
        float _2822 = (_2816 * _2184) + _2175;
        float _2823 = _2816 * 9.9999997473787516355514526367188e-05;
        float _2824 = (-1.0) - _2823;
        float _2826 = _2823 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2822 > _2826) || ((_2822 < _2824) || ((_2821 > _2826) || ((_2821 < _2824) || ((_2820 < _2824) || (_2820 > _2826))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2822, cbModelParam._m0[17u].z, fma(_2821, cbModelParam._m0[17u].y, _2820 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2822, cbModelParam._m0[18u].z, fma(_2821, cbModelParam._m0[18u].y, _2820 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2822, cbModelParam._m0[19u].z, fma(_2821, cbModelParam._m0[19u].y, _2820 * cbModelParam._m0[19u].x))), _2114);
            frontier_phi_22_46_ladder = _3050.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3050.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3050.x * cbModelParam._m0[1u].z;
        }
        _2203 = frontier_phi_22_46_ladder_2;
        _2205 = frontier_phi_22_46_ladder_1;
        _2207 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2187 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1220, _1221, _1222), _2114);
        _2203 = _2187.x * cbModelParam._m0[1u].z;
        _2205 = _2187.y * cbModelParam._m0[1u].z;
        _2207 = _2187.z * cbModelParam._m0[1u].z;
    }
    float _2220 = (((_1245 * _1197) + _1246) * _1212) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2222 = (((_1245 * _1199) + _1246) * _1212) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1245 * _1200) + _1246) * _1212) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2227 = fma(_2224, cbSceneParam._m0[89u].z, fma(_2222, cbSceneParam._m0[89u].y, _2220 * cbSceneParam._m0[89u].x));
    float _2230 = fma(_2224, cbSceneParam._m0[90u].z, fma(_2222, cbSceneParam._m0[90u].y, _2220 * cbSceneParam._m0[90u].x));
    float _2233 = fma(_2224, cbSceneParam._m0[91u].z, fma(_2222, cbSceneParam._m0[91u].y, _2220 * cbSceneParam._m0[91u].x));
    uvec4 _2243 = floatBitsToUint(cbInstanceData._m0[_1172 + 5u]);
    uint _2245 = _2243.x * 14u;
    uint _2246 = _2245 + 13u;
    float _2253 = _1212 + (-1.0);
    float _2258 = (cbLight._m0[_2246].x * _2253) + 1.0;
    float _2259 = (cbLight._m0[_2246].y * _2253) + 1.0;
    float _2260 = (cbLight._m0[_2246].z * _2253) + 1.0;
    float _2261 = (cbLight._m0[_2246].w * _2253) + 1.0;
    uint _2262 = _2245 + 5u;
    float _2268 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2272 = _2245 + 4u;
    float _2278 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2282 = _2245 | 1u;
    float _2293 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_1046, _1047, _1048));
    float _2296 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_1046, _1047, _1048));
    float _4502 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _4513 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2301 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2303 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2310 = ((cbLight._m0[_2262].x * _2268) * _2303) + ((cbLight._m0[_2272].x * _2278) * _2301);
    float _2311 = ((_2268 * cbLight._m0[_2262].y) * _2303) + ((_2278 * cbLight._m0[_2272].y) * _2301);
    float _2312 = ((_2268 * cbLight._m0[_2262].z) * _2303) + ((_2278 * cbLight._m0[_2272].z) * _2301);
    uvec4 _2316 = floatBitsToUint(cbLight._m0[_2245 + 12u]);
    bool _2318 = _2316.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2318)
    {
        _2329 = _2310;
        _2331 = _2311;
        _2333 = _2312;
    }
    else
    {
        uint _2337 = _2245 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2245 + 2u].xyz), vec3(_1046, _1047, _1048)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4524 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2356 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2310;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2311;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2312;
    }
    bool _2336 = _2316.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2336)
    {
        _2374 = _2329;
        _2376 = _2331;
        _2378 = _2333;
    }
    else
    {
        uint _2544 = _2245 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2245 + 3u].xyz), vec3(_1046, _1047, _1048)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4540 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2563 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2374 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2329;
        _2376 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2331;
        _2378 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2333;
    }
    uint _2381 = _2245 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _1049) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2245].x + _1126;
    float _2397 = cbLight._m0[_2245].y + _1127;
    float _2398 = cbLight._m0[_2245].z + _1128;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2245].xyz));
    float _4556 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _2410 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2411 = dot(vec3(_1046, _1047, _1048), vec3(_2403, _2404, _2405));
    float _4578 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2403, _2404, _2405));
    float _4589 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2432 = 0.959999978542327880859375 - _1194;
    float _2434 = 0.959999978542327880859375 - _1195;
    float _2435 = 0.959999978542327880859375 - _1196;
    float _2442 = 1.0 - _2395;
    float _2453 = (0.5 / (((_2410 * ((_2409 * _2442) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2442) + _2395) * _2409))) * _2409;
    float _4600 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2466 = _2245 + 9u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _1049) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2282].x + _1126;
    float _2480 = cbLight._m0[_2282].y + _1127;
    float _2481 = cbLight._m0[_2282].z + _1128;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2282].xyz));
    float _4611 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2493 = dot(vec3(_1046, _1047, _1048), vec3(_2486, _2487, _2488));
    float _4622 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2486, _2487, _2488));
    float _4633 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2478 * _2478;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2519 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2410 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2519) + _2478) * _2492))) * _2492;
    float _4644 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    float _2541 = (((((_2512 * _2432) + _1197) * cbLight._m0[_2466].x) * _2531) * _2268) + (((((_2431 * _2432) + _1197) * cbLight._m0[_2381].x) * _2455) * _2278);
    float _2542 = (((((_2512 * _2434) + _1199) * cbLight._m0[_2466].y) * _2531) * _2268) + (((((_2431 * _2434) + _1199) * cbLight._m0[_2381].y) * _2455) * _2278);
    float _2543 = (((((_2512 * _2435) + _1200) * cbLight._m0[_2466].z) * _2531) * _2268) + (((((_2431 * _2435) + _1200) * cbLight._m0[_2381].z) * _2455) * _2278);
    float _2605;
    float _2607;
    float _2609;
    if (_2318)
    {
        _2605 = _2541;
        _2607 = _2542;
        _2609 = _2543;
    }
    else
    {
        uint _2611 = _2245 + 2u;
        uint _2615 = _2245 + 10u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _1049) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _1126;
        float _2632 = cbLight._m0[_2611].y + _1127;
        float _2633 = cbLight._m0[_2611].z + _1128;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2611].xyz));
        float _4655 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2645 = dot(vec3(_1046, _1047, _1048), vec3(_2638, _2639, _2640));
        float _4666 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4677 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2410 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2671) + _2630) * _2644))) * _2644;
        float _4688 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2605 = (((((_2664 * _2432) + _1197) * cbLight._m0[_2615].x) * _2683) * _2684) + _2541;
        _2607 = (((((_2664 * _2434) + _1199) * cbLight._m0[_2615].y) * _2683) * _2684) + _2542;
        _2609 = (((((_2664 * _2435) + _1200) * cbLight._m0[_2615].z) * _2683) * _2684) + _2543;
    }
    float _2719;
    float _2721;
    float _2723;
    if (_2336)
    {
        _2719 = _2605;
        _2721 = _2607;
        _2723 = _2609;
    }
    else
    {
        uint _2730 = _2245 + 3u;
        uint _2734 = _2245 + 11u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _1049) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _1126;
        float _2751 = cbLight._m0[_2730].y + _1127;
        float _2752 = cbLight._m0[_2730].z + _1128;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2730].xyz));
        float _4704 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2764 = dot(vec3(_1046, _1047, _1048), vec3(_2757, _2758, _2759));
        float _4715 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4726 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
        float _2790 = 1.0 - _2749;
        float _2800 = (0.5 / (((_2410 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2790) + _2749) * _2763))) * _2763;
        float _4737 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2719 = (((((_2783 * _2432) + _1197) * cbLight._m0[_2734].x) * _2802) * _2803) + _2605;
        _2721 = (((((_2783 * _2434) + _1199) * cbLight._m0[_2734].y) * _2802) * _2803) + _2607;
        _2723 = (((((_2783 * _2435) + _1200) * cbLight._m0[_2734].z) * _2802) * _2803) + _2609;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2243.y == 0u)
    {
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2878;
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2878;
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2878;
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1135) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _1134) / _2894)));
        float _2915 = (log2(_2881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            uint _3214 = 0u;
            uint _3223;
            bool _3224;
            for (;;)
            {
                _3223 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                _3224 = _3223 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3224)
                {
                    frontier_phi_61_pred = _3208;
                    frontier_phi_61_pred_1 = _3213;
                    frontier_phi_61_pred_2 = _3212;
                    frontier_phi_61_pred_3 = _3211;
                    frontier_phi_61_pred_4 = _3210;
                    frontier_phi_61_pred_5 = _3209;
                }
                else
                {
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    uint _3338;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3223;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    for (;;)
                    {
                        uint _3342 = uint(findLSB(_3338)) + (_3214 << 5u);
                        uint _3339 = (_3338 + 4294967295u) & _3338;
                        uint _3344 = _3342 * 48u;
                        vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3364 = (_3342 * 48u) + 4u;
                        vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3383 = (_3342 * 48u) + 8u;
                        vec3 _3394 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x));
                        float _3398 = _3358.x - _2879;
                        float _3399 = _3358.y - _2880;
                        float _3400 = _3358.z - _2881;
                        float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                        float _3404 = inversesqrt(_3401);
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3408 = dot(vec3(_1153, _1156, _1159), vec3(_3405, _3406, _3407));
                        float _3413 = 1.0 - (_3401 * _3358.w);
                        float _4763 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3415 = sqrt(_3401) * _3377.w;
                        float _3418 = 1.39999997615814208984375 / (_3415 + 1.39999997615814208984375);
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3408) + _3419;
                        float _3425 = _3415 * _3415;
                        float _3429 = ((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3414) / ((_3425 * 0.699999988079071044921875) + 1.0);
                        float _3433 = (-0.0) - _2879;
                        float _3434 = (-0.0) - _2880;
                        float _3435 = (-0.0) - _2881;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3450 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                        float _3451 = 1.0 - _1228;
                        float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                        float _3459 = _3458 * _3458;
                        float _3460 = _3459 * _3459;
                        float _3461 = _3440 + _3405;
                        float _3462 = _3441 + _3406;
                        float _3463 = _3442 + _3407;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3471 = dot(vec3(_1153, _1156, _1159), vec3(_3440, _3441, _3442));
                        float _4779 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3475 = dot(vec3(_1153, _1156, _1159), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                        float _4790 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                        float _3483 = _3418 * _3459;
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3408) + _3484;
                        float _4801 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3489 = 1.0 - _3459;
                        float _3499 = (0.5 / (((_3488 * ((_3474 * _3489) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3488 * _3489) + _3459) * _3474))) * _3488;
                        float _4812 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3510 = (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3482 * _3482) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125))) * _3414;
                        _3267 = (_3429 * _3377.x) + _3335;
                        _3268 = (_3429 * _3377.y) + _3336;
                        _3269 = (_3429 * _3377.z) + _3337;
                        _3264 = (_3510 * _3394.x) + _3332;
                        _3265 = (_3510 * _3394.y) + _3333;
                        _3266 = (_3510 * _3394.z) + _3334;
                        if (_3339 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3339;
                        }
                    }
                    frontier_phi_61_pred = _3264;
                    frontier_phi_61_pred_1 = _3269;
                    frontier_phi_61_pred_2 = _3268;
                    frontier_phi_61_pred_3 = _3267;
                    frontier_phi_61_pred_4 = _3266;
                    frontier_phi_61_pred_5 = _3265;
                }
                _3056 = frontier_phi_61_pred;
                _3066 = frontier_phi_61_pred_1;
                _3064 = frontier_phi_61_pred_2;
                _3062 = frontier_phi_61_pred_3;
                _3060 = frontier_phi_61_pred_4;
                _3058 = frontier_phi_61_pred_5;
                uint _3215 = _3214 + 1u;
                if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3208 = _3056;
                    _3209 = _3058;
                    _3210 = _3060;
                    _3211 = _3062;
                    _3212 = _3064;
                    _3213 = _3066;
                    _3214 = _3215;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        if (((4294967295u << _3072) & _2925) == 0u)
        {
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
        }
        else
        {
            float _3201 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
            float _3202 = _3201 * _2879;
            float _3203 = _3201 * _2880;
            float _3204 = _3201 * _2881;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3315 = _3055;
                float _3316 = _3057;
                float _3317 = _3059;
                float _3318 = _3061;
                float _3319 = _3063;
                float _3320 = _3065;
                uint _3321 = _3072;
                uint _3330;
                bool _3331;
                for (;;)
                {
                    _3330 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3321 << 2u)) >> 2u)).x;
                    _3331 = _3330 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3331)
                    {
                        frontier_phi_67_pred = _3318;
                        frontier_phi_67_pred_1 = _3319;
                        frontier_phi_67_pred_2 = _3320;
                        frontier_phi_67_pred_3 = _3317;
                        frontier_phi_67_pred_4 = _3316;
                        frontier_phi_67_pred_5 = _3315;
                    }
                    else
                    {
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3528 = _3315;
                        float _3529 = _3316;
                        float _3530 = _3317;
                        float _3531 = _3318;
                        float _3532 = _3319;
                        float _3533 = _3320;
                        uint _3534 = _3330;
                        uint _3535;
                        vec4 _3560;
                        float _3561;
                        vec4 _3576;
                        vec3 _3588;
                        vec4 _3603;
                        vec4 _3618;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3545 = ((_3321 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3534));
                            _3535 = (_3534 + 4294967295u) & _3534;
                            uint _3547 = _3545 * 40u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3561 = _3560.w;
                            uint _3563 = (_3545 * 40u) + 4u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3545 * 40u) + 8u;
                            _3588 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x));
                            uint _3590 = (_3545 * 40u) + 16u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3545 * 40u) + 20u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3545 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3545 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_2881, _3652.z, fma(_2880, _3652.y, _3652.x * _2879)) + _3652.w;
                            _3665 = !((fma(_2881, _3633.z, fma(_2880, _3633.y, _3633.x * _2879)) + _3633.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3560.x - _2879;
                                float _3693 = _3560.y - _2880;
                                float _3694 = _3560.z - _2881;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3561 * _3561));
                                float _4823 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3710 = sqrt(_3695) * _3576.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_1153, _1156, _1159))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_2881, _3603.z, fma(_2880, _3603.y, _3603.x * _2879)) + _3603.w) / _3664;
                                float _3724 = (fma(_2881, _3618.z, fma(_2880, _3618.y, _3618.x * _2879)) + _3618.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4839 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _1228;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3202;
                                float _3754 = _3700 - _3203;
                                float _3755 = _3701 - _3204;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_1153, _1156, _1159), vec3((-0.0) - _3202, (-0.0) - _3203, (-0.0) - _3204));
                                float _4850 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3767 = dot(vec3(_1153, _1156, _1159), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4861 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_1153, _1156, _1159), vec3(_3699, _3700, _3701))) + _3776;
                                float _4872 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4883 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3804 * _3588.x;
                                frontier_phi_73_pred_1 = _3804 * _3588.y;
                                frontier_phi_73_pred_2 = _3730 * _3576.z;
                                frontier_phi_73_pred_3 = _3730 * _3576.y;
                                frontier_phi_73_pred_4 = _3730 * _3576.x;
                                frontier_phi_73_pred_5 = _3804 * _3588.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3808 = frontier_phi_73_pred;
                            _3809 = frontier_phi_73_pred_1;
                            _3813 = frontier_phi_73_pred_2;
                            _3812 = frontier_phi_73_pred_3;
                            _3811 = frontier_phi_73_pred_4;
                            _3810 = frontier_phi_73_pred_5;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            if (_3535 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3535;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3518;
                        frontier_phi_67_pred_1 = _3519;
                        frontier_phi_67_pred_2 = _3520;
                        frontier_phi_67_pred_3 = _3517;
                        frontier_phi_67_pred_4 = _3516;
                        frontier_phi_67_pred_5 = _3515;
                    }
                    _3183 = frontier_phi_67_pred;
                    _3185 = frontier_phi_67_pred_1;
                    _3187 = frontier_phi_67_pred_2;
                    _3181 = frontier_phi_67_pred_3;
                    _3179 = frontier_phi_67_pred_4;
                    _3177 = frontier_phi_67_pred_5;
                    uint _3322 = _3321 + 1u;
                    if (_3322 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3315 = _3177;
                        _3316 = _3179;
                        _3317 = _3181;
                        _3318 = _3183;
                        _3319 = _3185;
                        _3320 = _3187;
                        _3321 = _3322;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3185;
                frontier_phi_55_56_ladder_1 = _3187;
                frontier_phi_55_56_ladder_2 = _3183;
                frontier_phi_55_56_ladder_3 = _3181;
                frontier_phi_55_56_ladder_4 = _3179;
                frontier_phi_55_56_ladder_5 = _3177;
            }
            else
            {
                frontier_phi_55_56_ladder = _3063;
                frontier_phi_55_56_ladder_1 = _3065;
                frontier_phi_55_56_ladder_2 = _3061;
                frontier_phi_55_56_ladder_3 = _3059;
                frontier_phi_55_56_ladder_4 = _3057;
                frontier_phi_55_56_ladder_5 = _3055;
            }
            _3176 = frontier_phi_55_56_ladder_5;
            _3178 = frontier_phi_55_56_ladder_4;
            _3180 = frontier_phi_55_56_ladder_3;
            _3182 = frontier_phi_55_56_ladder_2;
            _3184 = frontier_phi_55_56_ladder;
            _3186 = frontier_phi_55_56_ladder_1;
        }
        float _3191 = isnan(1.0) ? _1212 : (isnan(_1212) ? 1.0 : min(_1212, 1.0));
        _2938 = (_3191 * _3182) + _2374;
        _2940 = (_3191 * _3184) + _2376;
        _2942 = (_3191 * _3186) + _2378;
        _2944 = ((_3176 * _1197) * _3191) + _2719;
        _2946 = ((_3178 * _1199) * _3191) + _2721;
        _2948 = ((_3180 * _1200) * _3191) + _2723;
    }
    else
    {
        _2938 = _2374;
        _2940 = _2376;
        _2942 = _2378;
        _2944 = _2719;
        _2946 = _2721;
        _2948 = _2723;
    }
    uint _2954 = _1173 + uint(cbMatDynParam._m0[0u].w);
    float _2960 = ((((((_962.x - _957.x) * _940) + _957.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _886) * cbMtdParam._m0[20u].x)) * _895) * cbInstanceData._m0[_2954].x;
    float _2961 = ((((((_962.y - _957.y) * _940) + _957.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_875.y - _873) * _854) + _873)) * cbMtdParam._m0[20u].y)) * _895) * cbInstanceData._m0[_2954].y;
    float _2962 = ((((((_962.z - _957.z) * _940) + _957.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_875.z - _874) * _854) + _874)) * cbMtdParam._m0[20u].z)) * _895) * cbInstanceData._m0[_2954].z;
    float _4899 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _4910 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _4921 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _2979 = (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2938 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1212))) + ((_2944 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2014)) * cbPerFrame._m0[3u].x)) + _2960;
    float _2981 = (_2961 + ((_2946 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2014)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2940 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1212)));
    float _2983 = (_2962 + ((_2948 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2014)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2942 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1212)));
    float _4947 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2996 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
    uint _2997 = _1172 + 6u;
    float _3005 = _1134 / cbSceneParam._m0[86u].x;
    float _3006 = _1135 / cbSceneParam._m0[86u].y;
    vec4 _3020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, (log2((isnan(cbSceneParam._m0[77u].w) ? _1069 : (isnan(_1069) ? cbSceneParam._m0[77u].w : min(_1069, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3022 = _3020.x;
    float _3023 = _3020.y;
    float _3024 = _3020.z;
    float _3025 = _3020.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_1069 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_1069) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1069 : min(cbSceneParam._m0[80u].w, _1069));
        float _3081 = _3080 / _1069;
        float _3092 = _3081 * _1119;
        float _3093 = _1120 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _1121;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3277;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3277 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3237 = 1.0 / cbSceneParam._m0[80u].x;
            float _3238 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3239 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            _3277 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3248 - _3249) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))))) * _3237)) - ((exp2(_3115 * _3248) - exp2(_3115 * _3249)) * _3237))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3279 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, 1.0), 0.0);
        float _3288 = exp2((_3277 * (-1.44269502162933349609375)) * (1.0 - _3279.w));
        float _3289 = log2(_3288);
        float _3305 = log2(_3025);
        _3117 = (exp2(_3305 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].x)) * _3279.x) / cbSceneParam._m0[78u].x)) + _3022;
        _3119 = (exp2(_3305 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].y)) * _3279.y) / cbSceneParam._m0[78u].y)) + _3023;
        _3121 = (exp2(_3305 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].z)) * _3279.z) / cbSceneParam._m0[78u].z)) + _3024;
        _3123 = _3288 * _3025;
    }
    else
    {
        _3117 = _3022;
        _3119 = _3023;
        _3121 = _3024;
        _3123 = _3025;
    }
    float _3135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3136 = _3135 == 3.0;
    float _3137 = log2(_3123);
    float _3141 = exp2(_3137 * cbSceneParam._m0[78u].x);
    float _3142 = exp2(_3137 * cbSceneParam._m0[78u].y);
    float _3143 = exp2(_3137 * cbSceneParam._m0[78u].z);
    float _3144 = _3141 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)));
    float _3145 = _3142 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)));
    float _3146 = _3143 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)));
    float _3155 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3155 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.y = _3155 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.z = _3155 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.w = cbInstanceData._m0[_2997].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2960) * _2996) * _3141) * _3155;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2961) * _2996) * _3142) * _3155;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2962) * _2996) * _3143) * _3155;
    SV_Target_1.w = cbInstanceData._m0[_2997].w;
}


