#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1510;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _282 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _295 = exp2(log2(_282.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _311 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _315 = _311.z;
    float _323 = exp2(log2(_315 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    float _346 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _348 = isnan(4.0) ? _347 : (isnan(_347) ? 4.0 : min(_347, 4.0));
    float _361 = floor(_348);
    vec4 _364 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _361));
    vec4 _389 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _400 = cbMtdParam._m0[9u].x * _389.x;
    float _401 = cbMtdParam._m0[9u].y * _389.y;
    float _402 = cbMtdParam._m0[9u].z * _389.z;
    float _409 = (((cbMtdParam._m0[10u].x * _364.x) - _400) * _325) + _400;
    float _410 = (((cbMtdParam._m0[10u].y * _364.y) - _401) * _325) + _401;
    float _411 = (((cbMtdParam._m0[10u].z * _364.z) - _402) * _325) + _402;
    float _417 = exp2(log2(_311.w) * cbMtdParam._m0[24u].w);
    vec4 _430 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _450 = (((cbMtdParam._m0[16u].x * _430.x) - _409) * _417) + _409;
    float _451 = (((cbMtdParam._m0[16u].y * _430.y) - _410) * _417) + _410;
    float _452 = (((cbMtdParam._m0[16u].z * _430.z) - _411) * _417) + _411;
    vec4 _465 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _490 = (_282.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _465.x) - _450) * _297) + _450);
    float _492 = (_282.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _465.y) - _451) * _297) + _451);
    float _494 = (_282.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _465.z) - _452) * _297) + _452);
    vec4 _507 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _526 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_262.x + 0.00999999977648258209228515625));
    float _528 = _526 * (cbMtdParam._m0[25u].z + 1.0);
    float _3925 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _536 = (_529 * ((cbMtdParam._m0[11u].x * _507.x) - _490)) + _490;
    float _537 = (((cbMtdParam._m0[11u].y * _507.y) - _492) * _529) + _492;
    float _538 = (((cbMtdParam._m0[11u].z * _507.z) - _494) * _529) + _494;
    float _194[5];
    float _195[5];
    _194[0u] = cbMtdParam._m0[30u].z;
    _195[0u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[32u].z;
    _195[1u] = cbMtdParam._m0[32u].w;
    _194[2u] = cbMtdParam._m0[32u].x;
    _195[2u] = cbMtdParam._m0[32u].y;
    _194[3u] = cbMtdParam._m0[31u].z;
    _195[3u] = cbMtdParam._m0[31u].w;
    _194[4u] = cbMtdParam._m0[31u].x;
    _195[4u] = cbMtdParam._m0[31u].y;
    float _575 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    uint _577 = uint(int(isnan(4.0) ? _575 : (isnan(_575) ? 4.0 : min(_575, 4.0))));
    float _584 = ((_195[_577] - cbMtdParam._m0[23u].z) * _325) + cbMtdParam._m0[23u].z;
    float _587 = ((cbMtdParam._m0[23u].w - _584) * _417) + _584;
    float _590 = ((cbMtdParam._m0[26u].y - _587) * _297) + _587;
    float _595 = (cbMtdParam._m0[25u].y + 1.0) * _526;
    float _3946 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _598 = _590 - (_590 * _596);
    vec4 _611 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _361));
    vec4 _629 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _637 = cbMtdParam._m0[23u].x + _629.z;
    float _640 = (((_611.z + _194[_577]) - _637) * _325) + _637;
    vec4 _652 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _663 = (((_652.z - _640) + cbMtdParam._m0[30u].x) * _417) + _640;
    float _669 = ((((_315 * 2.0) * _663) - _663) * cbMtdParam._m0[25u].w) + _663;
    vec4 _681 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _692 = (((cbMtdParam._m0[24u].z + _681.z) - _669) * _297) + _669;
    vec4 _704 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _716 = ((_704.z - _692) * _596) + _692;
    float _729 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _752 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_729 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _729) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _756 = cbPerFrame._m0[22u].x * 2.0;
    float _757 = _756 * cbMtdParam._m0[28u].z;
    float _760 = (_752.x * 0.5) + (-0.25);
    float _763 = (_752.y * 0.5) + (-0.25);
    float _764 = _763 * cbMtdParam._m0[28u].y;
    float _766 = (-0.0) - (cbMtdParam._m0[28u].y * _760);
    float _768 = fract(_757);
    float _770 = fract(_757 + 0.5);
    float _781 = abs((_768 * 2.0) + (-1.0));
    vec4 _798 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_768 * _766) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_764 * _768) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _800 = _798.x;
    float _801 = _798.y;
    float _802 = _798.z;
    vec4 _803 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_770 * _766) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_764 * _770) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _814 = ((_803.x - _800) * _781) + _800;
    float _821 = exp2(log2(_814 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _822 = isnan(cbMtdParam._m0[29u].y) ? _821 : (isnan(_821) ? cbMtdParam._m0[29u].y : max(_821, cbMtdParam._m0[29u].y));
    float _823 = isnan(cbMtdParam._m0[29u].z) ? _822 : (isnan(_822) ? cbMtdParam._m0[29u].z : min(_822, cbMtdParam._m0[29u].z));
    float _847 = (cbMtdParam._m0[33u].x * _729) + TEXCOORD;
    float _848 = (cbMtdParam._m0[33u].y * _729) + TEXCOORD_1;
    float _851 = _756 * cbMtdParam._m0[27u].w;
    float _852 = _763 * cbMtdParam._m0[27u].z;
    float _854 = (-0.0) - (cbMtdParam._m0[27u].z * _760);
    float _855 = fract(_851);
    float _857 = fract(_851 + 0.5);
    float _868 = abs((_855 * 2.0) + (-1.0));
    vec4 _885 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_855 * _854) + _847) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_852 * _855) + _848) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _890 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_857 * _854) + _847) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_852 * _857) + _848) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _927 = ((_611.x - _631) * _325) + _631;
    float _928 = ((_611.y - _632) * _325) + _632;
    float _933 = ((_652.x - _927) * _417) + _927;
    float _934 = ((_652.y - _928) * _417) + _928;
    float _943 = ((((_681.x - _933) * _297) + _933) * 2.0) + (-1.0);
    float _944 = ((((_681.y - _934) * _297) + _934) * 2.0) + (-1.0);
    float _945 = dot(vec2(_943, _944), vec2(_943, _944));
    float _3967 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _950 = sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))));
    float _959 = ((cbMtdParam._m0[26u].z * ((_311.x * 2.0) + (-1.0))) + _943) + (((((_704.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _596);
    float _960 = ((cbMtdParam._m0[26u].z * ((_311.y * 2.0) + (-1.0))) + _944) + (((((_704.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _596);
    float _963 = fma(_950, _235 * NORMAL.x, fma(_960, _242 * TANGENT.x, (_228 * _220) * _959));
    float _966 = fma(_950, _235 * NORMAL.y, fma(_960, _242 * TANGENT.y, (_228 * _221) * _959));
    float _969 = fma(_950, _235 * NORMAL.z, fma(_960, _242 * TANGENT.z, (_228 * _222) * _959));
    float _973 = inversesqrt(dot(vec3(_963, _966, _969), vec3(_963, _966, _969)));
    float _974 = _973 * _963;
    float _975 = _973 * _966;
    float _976 = _973 * _969;
    float _3978 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _977 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4000 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4011 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4022 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _981 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _997 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1047 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1037);
    float _1048 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1037);
    float _1049 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1037);
    float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
    float _1054 = _1047 * _1053;
    float _1055 = _1048 * _1053;
    float _1056 = _1049 * _1053;
    float _1062 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1063 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1081 = fma(_976, cbSceneParam._m0[5u].z, fma(_975, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _974));
    float _1084 = fma(_976, cbSceneParam._m0[6u].z, fma(_975, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _974));
    float _1087 = fma(_976, cbSceneParam._m0[7u].z, fma(_975, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _974));
    uint _1100 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1101 = _1100 + 9u;
    uint _1102 = _1101 + uint(cbMatDynParam._m0[0u].w);
    float _1108 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_1102].x;
    float _1109 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1102].y;
    float _1110 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1102].z;
    float _4033 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1114 = 1.0 - _981;
    float _1115 = _1111 * _1114;
    float _1116 = _1112 * _1114;
    float _1117 = _1113 * _1114;
    float _1122 = (_1111 + (-0.039999999105930328369140625)) * _981;
    float _1123 = (_1112 + (-0.039999999105930328369140625)) * _981;
    float _1124 = (_1113 + (-0.039999999105930328369140625)) * _981;
    float _1125 = _1122 + 0.039999999105930328369140625;
    float _1127 = _1123 + 0.039999999105930328369140625;
    float _1128 = _1124 + 0.039999999105930328369140625;
    vec4 _1137 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1062, cbSceneParam._m0[86u].y * _1063));
    float _1140 = _1137.x * TEXCOORD_3.w;
    float _1141 = dot(vec3(_974, _975, _976), vec3(_1054, _1055, _1056));
    float _1144 = _1141 * 2.0;
    float _1148 = (_1144 * _974) - _1054;
    float _1149 = (_1144 * _975) - _1055;
    float _1150 = (_1144 * _976) - _1056;
    float _1154 = abs(dot(vec3(_1054, _1055, _1056), vec3(_974, _975, _976)));
    float _4066 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1156 = sqrt(_977);
    float _1167 = exp2((_1156 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1156 * 3.0));
    float _1173 = (1.0 - _1167) * ((_1156 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1174 = _1167 * _1156;
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1210 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1509;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1236 = fma(_1210, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1202));
        float _1240 = fma(_1210, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1202));
        float _1244 = fma(_1210, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1202));
        float _1268 = _1202 + _974;
        float _1269 = _1206 + _975;
        float _1270 = _1210 + _976;
        float _1280 = fma(_1270, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1268)) - _1236;
        float _1281 = fma(_1270, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1268)) - _1240;
        float _1282 = fma(_1270, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1268)) - _1244;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1298 = ((_1286 * _1280) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1236 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1286 * _1281) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1240 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1282) / cbModelParam._m0[34u].z) + ((((((_1244 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1337 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1303.x + (-0.5));
        float _1339 = _1337 * (_1303.y + (-0.5));
        float _1340 = _1337 * (_1303.z + (-0.5));
        float _1347 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1310.x + (-0.5));
        float _1349 = _1347 * (_1310.y + (-0.5));
        float _1350 = _1347 * (_1310.z + (-0.5));
        float _1357 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1317.x + (-0.5));
        float _1359 = _1357 * (_1317.y + (-0.5));
        float _1360 = _1357 * (_1317.z + (-0.5));
        float _1367 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1324.x + (-0.5));
        float _1369 = _1367 * (_1324.y + (-0.5));
        float _1370 = _1367 * (_1324.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1391 = (dot(vec3(_974, _975, _976), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1401 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4114 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1403 + 1.0))) + _1408) * _1371;
        float _1418 = _1339 * 0.5;
        float _1419 = _1349 * 0.5;
        float _1420 = _1359 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_974, _975, _976), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4147 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1445 + 1.0))) + _1450) * _1372;
        float _1460 = _1340 * 0.5;
        float _1461 = _1350 * 0.5;
        float _1462 = _1360 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_974, _975, _976), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4180 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1487 + 1.0))) + _1492) * _1373;
        _1509 = _1340;
        _1511 = _1339;
        _1512 = _1338;
        _1513 = _1350;
        _1514 = _1349;
        _1515 = _1348;
        _1516 = _1360;
        _1517 = _1359;
        _1518 = _1358;
        _1519 = _1373;
        _1520 = _1372;
        _1521 = _1371;
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1510;
        _1511 = _1510;
        _1512 = _1510;
        _1513 = _1510;
        _1514 = _1510;
        _1515 = _1510;
        _1516 = _1510;
        _1517 = _1510;
        _1518 = _1510;
        _1519 = _1510;
        _1520 = _1510;
        _1521 = _1510;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1547 = fma(_1210, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202));
        float _1551 = fma(_1210, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202));
        float _1555 = fma(_1210, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202));
        float _1578 = _1202 + _974;
        float _1579 = _1206 + _975;
        float _1580 = _1210 + _976;
        float _1590 = fma(_1580, cbModelParam._m0[30u].z, fma(_1579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1578)) - _1547;
        float _1591 = fma(_1580, cbModelParam._m0[31u].z, fma(_1579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1578)) - _1551;
        float _1592 = fma(_1580, cbModelParam._m0[32u].z, fma(_1579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1578)) - _1555;
        float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
        float _1609 = ((_1596 * _1590) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1547 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1596 * _1591) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1551 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1596 * _1592) / cbModelParam._m0[35u].z) + ((((((_1555 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        float _1646 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1613.x + (-0.5));
        float _1648 = _1646 * (_1613.y + (-0.5));
        float _1649 = _1646 * (_1613.z + (-0.5));
        float _1656 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1620.x + (-0.5));
        float _1658 = _1656 * (_1620.y + (-0.5));
        float _1659 = _1656 * (_1620.z + (-0.5));
        float _1666 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1627.x + (-0.5));
        float _1668 = _1666 * (_1627.y + (-0.5));
        float _1669 = _1666 * (_1627.z + (-0.5));
        float _1676 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1634.x + (-0.5));
        float _1678 = _1676 * (_1634.y + (-0.5));
        float _1679 = _1676 * (_1634.z + (-0.5));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = _1647 * 0.5;
        float _1684 = _1657 * 0.5;
        float _1685 = _1667 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_974, _975, _976), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4243 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1710 + 1.0))) + _1715) * _1680;
        float _1725 = _1648 * 0.5;
        float _1726 = _1658 * 0.5;
        float _1727 = _1668 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_974, _975, _976), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4276 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1752 + 1.0))) + _1757) * _1681;
        float _1767 = _1649 * 0.5;
        float _1768 = _1659 * 0.5;
        float _1769 = _1669 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_974, _975, _976), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4309 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1794 + 1.0))) + _1799) * _1682;
        _1816 = _1649;
        _1817 = _1648;
        _1818 = _1647;
        _1819 = _1659;
        _1820 = _1658;
        _1821 = _1657;
        _1822 = _1669;
        _1823 = _1668;
        _1824 = _1667;
        _1825 = _1682;
        _1826 = _1681;
        _1827 = _1680;
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
    }
    else
    {
        _1816 = _1510;
        _1817 = _1510;
        _1818 = _1510;
        _1819 = _1510;
        _1820 = _1510;
        _1821 = _1510;
        _1822 = _1510;
        _1823 = _1510;
        _1824 = _1510;
        _1825 = _1510;
        _1826 = _1510;
        _1827 = _1510;
        _1828 = 0.0;
        _1829 = 0.0;
        _1830 = 0.0;
    }
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1522)) + _1522;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1523)) + _1523;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1524)) + _1524;
    float _1863 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1840));
    float _1884 = _1148 * 0.5;
    float _1885 = _1149 * 0.5;
    float _1886 = _1150 * 0.5;
    float _1887 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1890 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1893 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1927;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1900 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1509, _1513, _1516, _1519));
        float _1904 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1908 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1915 = dot(vec4(cbModelParam._m0[39u]), vec4(_1884, _1885, _1886, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1938;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1929 = dot(vec4(cbModelParam._m0[40u]), vec4(_1884, _1885, _1886, 1.0));
        _1938 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1938 = 1.0;
    }
    float _1942 = (_1938 * cbModelParam._m0[1u].x) + (_1927 * (1.0 - cbModelParam._m0[1u].x));
    float _1952 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _977);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1952 : min(cbModelParam._m0[25u].z, _1952));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2000 = fma(_1210, cbModelParam._m0[13u].z, fma(_1206, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1202)) + cbModelParam._m0[13u].w;
        float _2004 = fma(_1210, cbModelParam._m0[14u].z, fma(_1206, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1202)) + cbModelParam._m0[14u].w;
        float _2008 = fma(_1210, cbModelParam._m0[15u].z, fma(_1206, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1202)) + cbModelParam._m0[15u].w;
        float _2011 = fma(_1150, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148));
        float _2014 = fma(_1150, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148));
        float _2017 = fma(_1150, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148));
        float _2045;
        if (_2011 > 0.0)
        {
            _2045 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2045 = frontier_phi_14_12_ladder;
        }
        float _2269;
        if (_2014 > 0.0)
        {
            _2269 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2269 = frontier_phi_23_19_ladder;
        }
        float _2526;
        if (_2017 > 0.0)
        {
            _2526 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2526 = frontier_phi_35_30_ladder;
        }
        float _2528 = isnan(_2269) ? _2045 : (isnan(_2045) ? _2269 : min(_2045, _2269));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _2011) + _2000;
        float _2534 = (_2529 * _2014) + _2004;
        float _2535 = (_2529 * _2017) + _2008;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2536;
        float _2540 = _2536 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 > _2540) || ((_2534 < _2538) || ((_2533 < _2538) || (_2533 > _2540))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2535, cbModelParam._m0[9u].z, fma(_2534, cbModelParam._m0[9u].y, _2533 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2535, cbModelParam._m0[10u].z, fma(_2534, cbModelParam._m0[10u].y, _2533 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2535, cbModelParam._m0[11u].z, fma(_2534, cbModelParam._m0[11u].y, _2533 * cbModelParam._m0[11u].x))), _1953);
            frontier_phi_13_35_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2033 = frontier_phi_13_35_ladder_2;
        _2035 = frontier_phi_13_35_ladder_1;
        _2037 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1148, _1149, _1150), _1953);
        _2033 = _2021.x * cbModelParam._m0[1u].y;
        _2035 = _2021.y * cbModelParam._m0[1u].y;
        _2037 = _2021.z * cbModelParam._m0[1u].y;
    }
    float _2041 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _977);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2041 : min(cbModelParam._m0[25u].w, _2041));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1210, cbModelParam._m0[21u].z, fma(_1206, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1202)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1210, cbModelParam._m0[22u].z, fma(_1206, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1202)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1210, cbModelParam._m0[23u].z, fma(_1206, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1202)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1150, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148));
        float _2109 = fma(_1150, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148));
        float _2112 = fma(_1150, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148));
        float _2274;
        if (_2106 > 0.0)
        {
            _2274 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2274 = frontier_phi_25_21_ladder;
        }
        float _2553;
        if (_2109 > 0.0)
        {
            _2553 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2553 = frontier_phi_37_32_ladder;
        }
        float _2766;
        if (_2112 > 0.0)
        {
            _2766 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2766 = frontier_phi_46_43_ladder;
        }
        float _2768 = isnan(_2553) ? _2274 : (isnan(_2274) ? _2553 : min(_2274, _2553));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2106) + _2095;
        float _2774 = (_2769 * _2109) + _2099;
        float _2775 = (_2769 * _2112) + _2103;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2042);
            frontier_phi_22_46_ladder = _3003.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3003.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3003.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_22_46_ladder_2;
        _2133 = frontier_phi_22_46_ladder_1;
        _2135 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1148, _1149, _1150), _2042);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2148 = (((_1173 * _1125) + _1174) * _1140) * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2150 = (((_1173 * _1127) + _1174) * _1140) * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2152 = (((_1173 * _1128) + _1174) * _1140) * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2150, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2150, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2150, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    vec4 _2169 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1062, _1063));
    float _2171 = _2169.w;
    float _2183 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2171);
    float _2184 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2171);
    float _2185 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2171);
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_1100 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _1140 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2227 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2231 = _2191 | 1u;
    float _2242 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_974, _975, _976));
    float _2245 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_974, _975, _976));
    float _4445 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _4456 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2250 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * 0.3183098733425140380859375;
    float _2252 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2259 = ((cbLight._m0[_2208].x * _2214) * _2252) + (((cbLight._m0[_2218].x * _2183) * _2227) * _2250);
    float _2260 = ((_2214 * cbLight._m0[_2208].y) * _2252) + (((cbLight._m0[_2218].y * _2184) * _2227) * _2250);
    float _2261 = ((_2214 * cbLight._m0[_2208].z) * _2252) + (((cbLight._m0[_2218].z * _2185) * _2227) * _2250);
    uvec4 _2266 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2268 = _2266.x == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2268)
    {
        _2279 = _2259;
        _2281 = _2260;
        _2283 = _2261;
    }
    else
    {
        uint _2287 = _2191 + 6u;
        float _2303 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4467 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2306 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2279 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2259;
        _2281 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2260;
        _2283 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2261;
    }
    bool _2286 = _2266.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2286)
    {
        _2324 = _2279;
        _2326 = _2281;
        _2328 = _2283;
    }
    else
    {
        uint _2497 = _2191 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4483 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2516 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2324 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2279;
        _2326 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2281;
        _2328 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2283;
    }
    uint _2331 = _2191 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _977) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2191].x + _1054;
    float _2347 = cbLight._m0[_2191].y + _1055;
    float _2348 = cbLight._m0[_2191].z + _1056;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2191].xyz));
    float _4499 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _4510 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _2360 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2361 = dot(vec3(_974, _975, _976), vec3(_2353, _2354, _2355));
    float _4521 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2353, _2354, _2355));
    float _4532 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2382 = 0.959999978542327880859375 - _1122;
    float _2384 = 0.959999978542327880859375 - _1123;
    float _2385 = 0.959999978542327880859375 - _1124;
    float _2392 = 1.0 - _2345;
    float _2403 = (0.5 / (((_2360 * ((_2359 * _2392) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2392) + _2345) * _2359))) * _2359;
    float _4543 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2419 = _2191 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _977) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2231].x + _1054;
    float _2433 = cbLight._m0[_2231].y + _1055;
    float _2434 = cbLight._m0[_2231].z + _1056;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2231].xyz));
    float _4554 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2446 = dot(vec3(_974, _975, _976), vec3(_2439, _2440, _2441));
    float _4565 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2439, _2440, _2441));
    float _4576 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2360 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2472) + _2431) * _2445))) * _2445;
    float _4587 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2382) + _1125) * cbLight._m0[_2419].x) * _2484) * _2214) + ((((cbLight._m0[_2331].x * _2183) * ((_2381 * _2382) + _1125)) * _2405) * _2227);
    float _2495 = (((((_2465 * _2384) + _1127) * cbLight._m0[_2419].y) * _2484) * _2214) + ((((cbLight._m0[_2331].y * _2184) * ((_2381 * _2384) + _1127)) * _2405) * _2227);
    float _2496 = (((((_2465 * _2385) + _1128) * cbLight._m0[_2419].z) * _2484) * _2214) + ((((cbLight._m0[_2331].z * _2185) * ((_2381 * _2385) + _1128)) * _2405) * _2227);
    float _2558;
    float _2560;
    float _2562;
    if (_2268)
    {
        _2558 = _2494;
        _2560 = _2495;
        _2562 = _2496;
    }
    else
    {
        uint _2564 = _2191 + 2u;
        uint _2568 = _2191 + 10u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _977) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _1054;
        float _2585 = cbLight._m0[_2564].y + _1055;
        float _2586 = cbLight._m0[_2564].z + _1056;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2564].xyz));
        float _4598 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2598 = dot(vec3(_974, _975, _976), vec3(_2591, _2592, _2593));
        float _4609 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4620 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2360 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2624) + _2583) * _2597))) * _2597;
        float _4631 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2558 = (((((_2617 * _2382) + _1125) * cbLight._m0[_2568].x) * _2636) * _2637) + _2494;
        _2560 = (((((_2617 * _2384) + _1127) * cbLight._m0[_2568].y) * _2636) * _2637) + _2495;
        _2562 = (((((_2617 * _2385) + _1128) * cbLight._m0[_2568].z) * _2636) * _2637) + _2496;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2286)
    {
        _2672 = _2558;
        _2674 = _2560;
        _2676 = _2562;
    }
    else
    {
        uint _2683 = _2191 + 3u;
        uint _2687 = _2191 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _977) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1054;
        float _2704 = cbLight._m0[_2683].y + _1055;
        float _2705 = cbLight._m0[_2683].z + _1056;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2683].xyz));
        float _4647 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2717 = dot(vec3(_974, _975, _976), vec3(_2710, _2711, _2712));
        float _4658 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4669 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2360 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2743) + _2702) * _2716))) * _2716;
        float _4680 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2672 = (((((_2736 * _2382) + _1125) * cbLight._m0[_2687].x) * _2755) * _2756) + _2558;
        _2674 = (((((_2736 * _2384) + _1127) * cbLight._m0[_2687].y) * _2755) * _2756) + _2560;
        _2676 = (((((_2736 * _2385) + _1128) * cbLight._m0[_2687].z) * _2755) * _2756) + _2562;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2189.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1063) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1062) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            uint _3167 = 0u;
            uint _3176;
            bool _3177;
            for (;;)
            {
                _3176 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                _3177 = _3176 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3177)
                {
                    frontier_phi_61_pred = _3161;
                    frontier_phi_61_pred_1 = _3166;
                    frontier_phi_61_pred_2 = _3165;
                    frontier_phi_61_pred_3 = _3164;
                    frontier_phi_61_pred_4 = _3163;
                    frontier_phi_61_pred_5 = _3162;
                }
                else
                {
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    uint _3291;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3176;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    for (;;)
                    {
                        uint _3295 = uint(findLSB(_3291)) + (_3167 << 5u);
                        uint _3292 = (_3291 + 4294967295u) & _3291;
                        uint _3297 = _3295 * 48u;
                        vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3317 = (_3295 * 48u) + 4u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3336 = (_3295 * 48u) + 8u;
                        vec3 _3347 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x));
                        float _3351 = _3311.x - _2832;
                        float _3352 = _3311.y - _2833;
                        float _3353 = _3311.z - _2834;
                        float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                        float _3357 = inversesqrt(_3354);
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3361 = dot(vec3(_1081, _1084, _1087), vec3(_3358, _3359, _3360));
                        float _3366 = 1.0 - (_3354 * _3311.w);
                        float _4706 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3368 = sqrt(_3354) * _3330.w;
                        float _3371 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3361) + _3372;
                        float _3378 = _3368 * _3368;
                        float _3382 = ((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3367) / ((_3378 * 0.699999988079071044921875) + 1.0);
                        float _3386 = (-0.0) - _2832;
                        float _3387 = (-0.0) - _2833;
                        float _3388 = (-0.0) - _2834;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3403 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                        float _3404 = 1.0 - _1156;
                        float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                        float _3412 = _3411 * _3411;
                        float _3413 = _3412 * _3412;
                        float _3414 = _3393 + _3358;
                        float _3415 = _3394 + _3359;
                        float _3416 = _3395 + _3360;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3424 = dot(vec3(_1081, _1084, _1087), vec3(_3393, _3394, _3395));
                        float _4722 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3428 = dot(vec3(_1081, _1084, _1087), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                        float _4733 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                        float _3436 = _3371 * _3412;
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3361) + _3437;
                        float _4744 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3442 = 1.0 - _3412;
                        float _3452 = (0.5 / (((_3441 * ((_3427 * _3442) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3412) * _3427))) * _3441;
                        float _4755 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3463 = (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3435 * _3435) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125))) * _3367;
                        _3220 = (_3382 * _3330.x) + _3288;
                        _3221 = (_3382 * _3330.y) + _3289;
                        _3222 = (_3382 * _3330.z) + _3290;
                        _3217 = (_3463 * _3347.x) + _3285;
                        _3218 = (_3463 * _3347.y) + _3286;
                        _3219 = (_3463 * _3347.z) + _3287;
                        if (_3292 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3292;
                        }
                    }
                    frontier_phi_61_pred = _3217;
                    frontier_phi_61_pred_1 = _3222;
                    frontier_phi_61_pred_2 = _3221;
                    frontier_phi_61_pred_3 = _3220;
                    frontier_phi_61_pred_4 = _3219;
                    frontier_phi_61_pred_5 = _3218;
                }
                _3009 = frontier_phi_61_pred;
                _3019 = frontier_phi_61_pred_1;
                _3017 = frontier_phi_61_pred_2;
                _3015 = frontier_phi_61_pred_3;
                _3013 = frontier_phi_61_pred_4;
                _3011 = frontier_phi_61_pred_5;
                uint _3168 = _3167 + 1u;
                if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3161 = _3009;
                    _3162 = _3011;
                    _3163 = _3013;
                    _3164 = _3015;
                    _3165 = _3017;
                    _3166 = _3019;
                    _3167 = _3168;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        if (((4294967295u << _3025) & _2878) == 0u)
        {
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
        }
        else
        {
            float _3154 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3155 = _3154 * _2832;
            float _3156 = _3154 * _2833;
            float _3157 = _3154 * _2834;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3268 = _3008;
                float _3269 = _3010;
                float _3270 = _3012;
                float _3271 = _3014;
                float _3272 = _3016;
                float _3273 = _3018;
                uint _3274 = _3025;
                uint _3283;
                bool _3284;
                for (;;)
                {
                    _3283 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                    _3284 = _3283 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3284)
                    {
                        frontier_phi_67_pred = _3271;
                        frontier_phi_67_pred_1 = _3272;
                        frontier_phi_67_pred_2 = _3273;
                        frontier_phi_67_pred_3 = _3270;
                        frontier_phi_67_pred_4 = _3269;
                        frontier_phi_67_pred_5 = _3268;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3481 = _3268;
                        float _3482 = _3269;
                        float _3483 = _3270;
                        float _3484 = _3271;
                        float _3485 = _3272;
                        float _3486 = _3273;
                        uint _3487 = _3283;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3498 = ((_3274 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3498 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3498 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3498 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_2834, _3605.z, fma(_2833, _3605.y, _3605.x * _2832)) + _3605.w;
                            _3618 = !((fma(_2834, _3586.z, fma(_2833, _3586.y, _3586.x * _2832)) + _3586.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3513.x - _2832;
                                float _3646 = _3513.y - _2833;
                                float _3647 = _3513.z - _2834;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3514 * _3514));
                                float _4766 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3663 = sqrt(_3648) * _3529.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_1081, _1084, _1087))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_2834, _3556.z, fma(_2833, _3556.y, _3556.x * _2832)) + _3556.w) / _3617;
                                float _3677 = (fma(_2834, _3571.z, fma(_2833, _3571.y, _3571.x * _2832)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4782 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _1156;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3155;
                                float _3707 = _3653 - _3156;
                                float _3708 = _3654 - _3157;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_1081, _1084, _1087), vec3((-0.0) - _3155, (-0.0) - _3156, (-0.0) - _3157));
                                float _4793 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3720 = dot(vec3(_1081, _1084, _1087), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4804 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_1081, _1084, _1087), vec3(_3652, _3653, _3654))) + _3729;
                                float _4815 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4826 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3757 * _3541.x;
                                frontier_phi_73_pred_1 = _3757 * _3541.y;
                                frontier_phi_73_pred_2 = _3683 * _3529.z;
                                frontier_phi_73_pred_3 = _3683 * _3529.y;
                                frontier_phi_73_pred_4 = _3683 * _3529.x;
                                frontier_phi_73_pred_5 = _3757 * _3541.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_73_pred;
                            _3762 = frontier_phi_73_pred_1;
                            _3766 = frontier_phi_73_pred_2;
                            _3765 = frontier_phi_73_pred_3;
                            _3764 = frontier_phi_73_pred_4;
                            _3763 = frontier_phi_73_pred_5;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3471;
                        frontier_phi_67_pred_1 = _3472;
                        frontier_phi_67_pred_2 = _3473;
                        frontier_phi_67_pred_3 = _3470;
                        frontier_phi_67_pred_4 = _3469;
                        frontier_phi_67_pred_5 = _3468;
                    }
                    _3136 = frontier_phi_67_pred;
                    _3138 = frontier_phi_67_pred_1;
                    _3140 = frontier_phi_67_pred_2;
                    _3134 = frontier_phi_67_pred_3;
                    _3132 = frontier_phi_67_pred_4;
                    _3130 = frontier_phi_67_pred_5;
                    uint _3275 = _3274 + 1u;
                    if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3268 = _3130;
                        _3269 = _3132;
                        _3270 = _3134;
                        _3271 = _3136;
                        _3272 = _3138;
                        _3273 = _3140;
                        _3274 = _3275;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3138;
                frontier_phi_55_56_ladder_1 = _3140;
                frontier_phi_55_56_ladder_2 = _3136;
                frontier_phi_55_56_ladder_3 = _3134;
                frontier_phi_55_56_ladder_4 = _3132;
                frontier_phi_55_56_ladder_5 = _3130;
            }
            else
            {
                frontier_phi_55_56_ladder = _3016;
                frontier_phi_55_56_ladder_1 = _3018;
                frontier_phi_55_56_ladder_2 = _3014;
                frontier_phi_55_56_ladder_3 = _3012;
                frontier_phi_55_56_ladder_4 = _3010;
                frontier_phi_55_56_ladder_5 = _3008;
            }
            _3129 = frontier_phi_55_56_ladder_5;
            _3131 = frontier_phi_55_56_ladder_4;
            _3133 = frontier_phi_55_56_ladder_3;
            _3135 = frontier_phi_55_56_ladder_2;
            _3137 = frontier_phi_55_56_ladder;
            _3139 = frontier_phi_55_56_ladder_1;
        }
        float _3144 = isnan(1.0) ? _1140 : (isnan(_1140) ? 1.0 : min(_1140, 1.0));
        _2891 = (_3144 * _3135) + _2324;
        _2893 = (_3144 * _3137) + _2326;
        _2895 = (_3144 * _3139) + _2328;
        _2897 = ((_3129 * _1125) * _3144) + _2672;
        _2899 = ((_3131 * _1127) * _3144) + _2674;
        _2901 = ((_3133 * _1128) * _3144) + _2676;
    }
    else
    {
        _2891 = _2324;
        _2893 = _2326;
        _2895 = _2328;
        _2897 = _2672;
        _2899 = _2674;
        _2901 = _2676;
    }
    uint _2907 = _1101 + uint(cbMatDynParam._m0[0u].w);
    float _2913 = ((((((_890.x - _885.x) * _868) + _885.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _814) * cbMtdParam._m0[20u].x)) * _823) * cbInstanceData._m0[_2907].x;
    float _2914 = ((((((_890.y - _885.y) * _868) + _885.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_803.y - _801) * _781) + _801)) * cbMtdParam._m0[20u].y)) * _823) * cbInstanceData._m0[_2907].y;
    float _2915 = ((((((_890.z - _885.z) * _868) + _885.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_803.z - _802) * _781) + _802)) * cbMtdParam._m0[20u].z)) * _823) * cbInstanceData._m0[_2907].z;
    float _4842 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _4853 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4864 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2932 = (((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2891 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1140))) + ((_2897 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1942)) * cbPerFrame._m0[3u].x)) + _2913;
    float _2934 = (_2914 + ((_2899 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1942)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2893 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1140)));
    float _2936 = (_2915 + ((_2901 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1942)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2895 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1140)));
    float _4890 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2949 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    uint _2950 = _1100 + 6u;
    float _2958 = _1062 / cbSceneParam._m0[86u].x;
    float _2959 = _1063 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _997 : (isnan(_997) ? cbSceneParam._m0[77u].w : min(_997, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_997 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_997) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _997 : min(cbSceneParam._m0[80u].w, _997));
        float _3034 = _3033 / _997;
        float _3045 = _3034 * _1047;
        float _3046 = _1048 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3048 = _3034 * _1049;
        float _3050 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3046;
        float _3058 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3068 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3230;
        if (abs((_3047 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3230 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3068 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3190 = 1.0 / cbSceneParam._m0[80u].x;
            float _3191 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3192 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            _3230 = ((abs(_3058 / _3047) * cbSceneParam._m0[80u].y) * ((((_3201 - _3202) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))))) * _3190)) - ((exp2(_3068 * _3201) - exp2(_3068 * _3202)) * _3190))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3232 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3241 = exp2((_3230 * (-1.44269502162933349609375)) * (1.0 - _3232.w));
        float _3242 = log2(_3241);
        float _3258 = log2(_2978);
        _3070 = (exp2(_3258 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].x)) * _3232.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3072 = (exp2(_3258 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].y)) * _3232.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3074 = (exp2(_3258 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].z)) * _3232.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3076 = _3241 * _2978;
    }
    else
    {
        _3070 = _2975;
        _3072 = _2976;
        _3074 = _2977;
        _3076 = _2978;
    }
    float _3088 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3089 = _3088 == 3.0;
    float _3090 = log2(_3076);
    float _3094 = exp2(_3090 * cbSceneParam._m0[78u].x);
    float _3095 = exp2(_3090 * cbSceneParam._m0[78u].y);
    float _3096 = exp2(_3090 * cbSceneParam._m0[78u].z);
    float _3097 = _3094 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)));
    float _3098 = _3095 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0)));
    float _3099 = _3096 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0)));
    float _3108 = (_3088 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3108 * (_3089 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.y = _3108 * (_3089 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.z = _3108 * (_3089 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.w = cbInstanceData._m0[_2950].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2913) * _2949) * _3094) * _3108;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2914) * _2949) * _3095) * _3108;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2915) * _2949) * _3096) * _3108;
    SV_Target_1.w = cbInstanceData._m0[_2950].w;
}


