#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1399;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _261 = log2(0.0);
    float _263 = exp2(_261 * cbMtdParam._m0[24u].x);
    float _264 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _265 = isnan(1.0) ? _264 : (isnan(_264) ? 1.0 : min(_264, 1.0));
    vec4 _279 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _283 = _279.z;
    float _291 = exp2(log2(_283 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _292 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    float _314 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(4.0) ? _315 : (isnan(_315) ? 4.0 : min(_315, 4.0));
    float _329 = floor(_316);
    vec4 _332 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _329));
    vec4 _357 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _368 = cbMtdParam._m0[9u].x * _357.x;
    float _369 = cbMtdParam._m0[9u].y * _357.y;
    float _370 = cbMtdParam._m0[9u].z * _357.z;
    float _377 = (((cbMtdParam._m0[10u].x * _332.x) - _368) * _293) + _368;
    float _378 = (((cbMtdParam._m0[10u].y * _332.y) - _369) * _293) + _369;
    float _379 = (((cbMtdParam._m0[10u].z * _332.z) - _370) * _293) + _370;
    float _385 = exp2(log2(_279.w) * cbMtdParam._m0[24u].w);
    vec4 _398 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _418 = (((cbMtdParam._m0[16u].x * _398.x) - _377) * _385) + _377;
    float _419 = (((cbMtdParam._m0[16u].y * _398.y) - _378) * _385) + _378;
    float _420 = (((cbMtdParam._m0[16u].z * _398.z) - _379) * _385) + _379;
    vec4 _433 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _458 = (_251.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _433.x) - _418) * _265) + _418);
    float _460 = (_251.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _433.y) - _419) * _265) + _419);
    float _462 = (_251.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _433.z) - _420) * _265) + _420);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _501 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    uint _503 = uint(int(isnan(4.0) ? _501 : (isnan(_501) ? 4.0 : min(_501, 4.0))));
    float _510 = ((_187[_503] - cbMtdParam._m0[23u].z) * _293) + cbMtdParam._m0[23u].z;
    float _513 = ((cbMtdParam._m0[23u].w - _510) * _385) + _510;
    float _516 = ((cbMtdParam._m0[26u].y - _513) * _265) + _513;
    vec4 _531 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _329));
    vec4 _549 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _557 = cbMtdParam._m0[23u].x + _549.z;
    float _560 = (((_531.z + _186[_503]) - _557) * _293) + _557;
    vec4 _572 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _583 = (((_572.z - _560) + cbMtdParam._m0[30u].x) * _385) + _560;
    float _589 = ((((_283 * 2.0) * _583) - _583) * cbMtdParam._m0[25u].w) + _583;
    vec4 _601 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _612 = (((cbMtdParam._m0[24u].z + _601.z) - _589) * _265) + _589;
    float _625 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _648 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_625 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _625) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _652 = cbPerFrame._m0[22u].x * 2.0;
    float _653 = _652 * cbMtdParam._m0[28u].z;
    float _656 = (_648.x * 0.5) + (-0.25);
    float _659 = (_648.y * 0.5) + (-0.25);
    float _660 = _659 * cbMtdParam._m0[28u].y;
    float _662 = (-0.0) - (cbMtdParam._m0[28u].y * _656);
    float _664 = fract(_653);
    float _666 = fract(_653 + 0.5);
    float _678 = abs((_664 * 2.0) + (-1.0));
    vec4 _695 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_664 * _662) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_660 * _664) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _697 = _695.x;
    float _698 = _695.y;
    float _699 = _695.z;
    vec4 _700 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_666 * _662) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_660 * _666) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _711 = ((_700.x - _697) * _678) + _697;
    float _718 = exp2(log2(_711 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _719 = isnan(cbMtdParam._m0[29u].y) ? _718 : (isnan(_718) ? cbMtdParam._m0[29u].y : max(_718, cbMtdParam._m0[29u].y));
    float _720 = isnan(cbMtdParam._m0[29u].z) ? _719 : (isnan(_719) ? cbMtdParam._m0[29u].z : min(_719, cbMtdParam._m0[29u].z));
    float _744 = (cbMtdParam._m0[33u].x * _625) + TEXCOORD;
    float _745 = (cbMtdParam._m0[33u].y * _625) + TEXCOORD_1;
    float _748 = _652 * cbMtdParam._m0[27u].w;
    float _749 = _659 * cbMtdParam._m0[27u].z;
    float _751 = (-0.0) - (cbMtdParam._m0[27u].z * _656);
    float _752 = fract(_748);
    float _754 = fract(_748 + 0.5);
    float _765 = abs((_752 * 2.0) + (-1.0));
    vec4 _782 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_752 * _751) + _744) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_749 * _752) + _745) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _787 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_754 * _751) + _744) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_749 * _754) + _745) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _821 = ((_531.x - _551) * _293) + _551;
    float _822 = ((_531.y - _552) * _293) + _552;
    float _827 = ((_572.x - _821) * _385) + _821;
    float _828 = ((_572.y - _822) * _385) + _822;
    float _837 = ((((_601.x - _827) * _265) + _827) * 2.0) + (-1.0);
    float _838 = ((((_601.y - _828) * _265) + _828) * 2.0) + (-1.0);
    float _839 = dot(vec2(_837, _838), vec2(_837, _838));
    float _4092 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _844 = sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))));
    float _847 = (cbMtdParam._m0[26u].z * ((_279.x * 2.0) + (-1.0))) + _837;
    float _848 = (cbMtdParam._m0[26u].z * ((_279.y * 2.0) + (-1.0))) + _838;
    float _851 = fma(_844, _227 * NORMAL.x, fma(_848, _234 * TANGENT.x, (_220 * _212) * _847));
    float _854 = fma(_844, _227 * NORMAL.y, fma(_848, _234 * TANGENT.y, (_220 * _213) * _847));
    float _857 = fma(_844, _227 * NORMAL.z, fma(_848, _234 * TANGENT.z, (_220 * _214) * _847));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _4103 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _865 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4125 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4136 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4147 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _869 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _973 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _976 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _989 = uint(roundEven(NORMAL.w)) * 13u;
    uint _990 = _989 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_991].z;
    float _4158 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _1003 = 1.0 - _869;
    float _1004 = _1000 * _1003;
    float _1005 = _1001 * _1003;
    float _1006 = _1002 * _1003;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _869;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _869;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _869;
    float _1014 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    vec4 _1026 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1029 = _1026.x * TEXCOORD_3.w;
    float _1030 = dot(vec3(_862, _863, _864), vec3(_943, _944, _945));
    float _1033 = _1030 * 2.0;
    float _1037 = (_1033 * _862) - _943;
    float _1038 = (_1033 * _863) - _944;
    float _1039 = (_1033 * _864) - _945;
    float _1043 = abs(dot(vec3(_943, _944, _945), vec3(_862, _863, _864)));
    float _4191 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1045 = sqrt(_865);
    float _1056 = exp2((_1045 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1045 * 3.0));
    float _1062 = (1.0 - _1056) * ((_1045 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1063 = _1056 * _1045;
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1398;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1099, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091));
        float _1129 = fma(_1099, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091));
        float _1133 = fma(_1099, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091));
        float _1157 = _1091 + _862;
        float _1158 = _1095 + _863;
        float _1159 = _1099 + _864;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1125;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1129;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1133;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1187 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1226 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1192.x + (-0.5));
        float _1228 = _1226 * (_1192.y + (-0.5));
        float _1229 = _1226 * (_1192.z + (-0.5));
        float _1236 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1199.x + (-0.5));
        float _1238 = _1236 * (_1199.y + (-0.5));
        float _1239 = _1236 * (_1199.z + (-0.5));
        float _1246 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1206.x + (-0.5));
        float _1248 = _1246 * (_1206.y + (-0.5));
        float _1249 = _1246 * (_1206.z + (-0.5));
        float _1256 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1213.x + (-0.5));
        float _1258 = _1256 * (_1213.y + (-0.5));
        float _1259 = _1256 * (_1213.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1280 = (dot(vec3(_862, _863, _864), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1290 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4239 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1292 + 1.0))) + _1297) * _1260;
        float _1307 = _1228 * 0.5;
        float _1308 = _1238 * 0.5;
        float _1309 = _1248 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_862, _863, _864), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4272 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1334 + 1.0))) + _1339) * _1261;
        float _1349 = _1229 * 0.5;
        float _1350 = _1239 * 0.5;
        float _1351 = _1249 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_862, _863, _864), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4305 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1376 + 1.0))) + _1381) * _1262;
        _1398 = _1229;
        _1400 = _1228;
        _1401 = _1227;
        _1402 = _1239;
        _1403 = _1238;
        _1404 = _1237;
        _1405 = _1249;
        _1406 = _1248;
        _1407 = _1247;
        _1408 = _1262;
        _1409 = _1261;
        _1410 = _1260;
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1399;
        _1400 = _1399;
        _1401 = _1399;
        _1402 = _1399;
        _1403 = _1399;
        _1404 = _1399;
        _1405 = _1399;
        _1406 = _1399;
        _1407 = _1399;
        _1408 = _1399;
        _1409 = _1399;
        _1410 = _1399;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1436 = fma(_1099, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091));
        float _1440 = fma(_1099, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091));
        float _1444 = fma(_1099, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091));
        float _1467 = _1091 + _862;
        float _1468 = _1095 + _863;
        float _1469 = _1099 + _864;
        float _1479 = fma(_1469, cbModelParam._m0[30u].z, fma(_1468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1467)) - _1436;
        float _1480 = fma(_1469, cbModelParam._m0[31u].z, fma(_1468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1467)) - _1440;
        float _1481 = fma(_1469, cbModelParam._m0[32u].z, fma(_1468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1467)) - _1444;
        float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
        float _1498 = ((_1485 * _1479) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1436 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1485 * _1480) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1440 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1485 * _1481) / cbModelParam._m0[35u].z) + ((((((_1444 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1535 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1502.x + (-0.5));
        float _1537 = _1535 * (_1502.y + (-0.5));
        float _1538 = _1535 * (_1502.z + (-0.5));
        float _1545 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1509.x + (-0.5));
        float _1547 = _1545 * (_1509.y + (-0.5));
        float _1548 = _1545 * (_1509.z + (-0.5));
        float _1555 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1516.x + (-0.5));
        float _1557 = _1555 * (_1516.y + (-0.5));
        float _1558 = _1555 * (_1516.z + (-0.5));
        float _1565 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1523.x + (-0.5));
        float _1567 = _1565 * (_1523.y + (-0.5));
        float _1568 = _1565 * (_1523.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_862, _863, _864), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4368 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1599 + 1.0))) + _1604) * _1569;
        float _1614 = _1537 * 0.5;
        float _1615 = _1547 * 0.5;
        float _1616 = _1557 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_862, _863, _864), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4401 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1641 + 1.0))) + _1646) * _1570;
        float _1656 = _1538 * 0.5;
        float _1657 = _1548 * 0.5;
        float _1658 = _1558 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_862, _863, _864), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4434 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1683 + 1.0))) + _1688) * _1571;
        _1705 = _1538;
        _1706 = _1537;
        _1707 = _1536;
        _1708 = _1548;
        _1709 = _1547;
        _1710 = _1546;
        _1711 = _1558;
        _1712 = _1557;
        _1713 = _1556;
        _1714 = _1571;
        _1715 = _1570;
        _1716 = _1569;
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1399;
        _1706 = _1399;
        _1707 = _1399;
        _1708 = _1399;
        _1709 = _1399;
        _1710 = _1399;
        _1711 = _1399;
        _1712 = _1399;
        _1713 = _1399;
        _1714 = _1399;
        _1715 = _1399;
        _1716 = _1399;
        _1717 = 0.0;
        _1718 = 0.0;
        _1719 = 0.0;
    }
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1411)) + _1411;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1412)) + _1412;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1413)) + _1413;
    float _1752 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1729));
    float _1773 = _1037 * 0.5;
    float _1774 = _1038 * 0.5;
    float _1775 = _1039 * 0.5;
    float _1776 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1779 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1782 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1816;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1789 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1398, _1402, _1405, _1408));
        float _1793 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1797 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1804 = dot(vec4(cbModelParam._m0[39u]), vec4(_1773, _1774, _1775, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1827;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1818 = dot(vec4(cbModelParam._m0[40u]), vec4(_1773, _1774, _1775, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1831 = (_1827 * cbModelParam._m0[1u].x) + (_1816 * (1.0 - cbModelParam._m0[1u].x));
    float _1841 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1841 : min(cbModelParam._m0[25u].z, _1841));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1099, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1099, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1099, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1039, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037));
        float _1903 = fma(_1039, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037));
        float _1906 = fma(_1039, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1934 = frontier_phi_14_12_ladder;
        }
        float _2106;
        if (_1903 > 0.0)
        {
            _2106 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2106 = frontier_phi_23_19_ladder;
        }
        float _2400;
        if (_1906 > 0.0)
        {
            _2400 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2400 = frontier_phi_35_30_ladder;
        }
        float _2402 = isnan(_2106) ? _1934 : (isnan(_1934) ? _2106 : min(_1934, _2106));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1900) + _1889;
        float _2408 = (_2403 * _1903) + _1893;
        float _2409 = (_2403 * _1906) + _1897;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1842);
            frontier_phi_13_35_ladder = _2554.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2554.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2554.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_13_35_ladder_2;
        _1924 = frontier_phi_13_35_ladder_1;
        _1926 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1037, _1038, _1039), _1842);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1984 = fma(_1099, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091)) + cbModelParam._m0[21u].w;
        float _1988 = fma(_1099, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091)) + cbModelParam._m0[22u].w;
        float _1992 = fma(_1099, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091)) + cbModelParam._m0[23u].w;
        float _1995 = fma(_1039, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037));
        float _1998 = fma(_1039, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037));
        float _2001 = fma(_1039, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037));
        float _2111;
        if (_1995 > 0.0)
        {
            _2111 = abs((1.0 - _1984) / _1995);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1984 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2111 = frontier_phi_25_21_ladder;
        }
        float _2427;
        if (_1998 > 0.0)
        {
            _2427 = abs((1.0 - _1988) / _1998);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1988 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2427 = frontier_phi_37_32_ladder;
        }
        float _2765;
        if (_2001 > 0.0)
        {
            _2765 = abs((1.0 - _1992) / _2001);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1992 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2765 = frontier_phi_47_44_ladder;
        }
        float _2767 = isnan(_2427) ? _2111 : (isnan(_2111) ? _2427 : min(_2111, _2427));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _1995) + _1984;
        float _2773 = (_2768 * _1998) + _1988;
        float _2774 = (_2768 * _2001) + _1992;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_22_47_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2020 = frontier_phi_22_47_ladder_2;
        _2022 = frontier_phi_22_47_ladder_1;
        _2024 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1037, _1038, _1039), _1931);
        _2020 = _2004.x * cbModelParam._m0[1u].z;
        _2022 = _2004.y * cbModelParam._m0[1u].z;
        _2024 = _2004.z * cbModelParam._m0[1u].z;
    }
    float _2037 = (((_1062 * _1014) + _1063) * _1029) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1062 * _1016) + _1063) * _1029) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2041 = (((_1062 * _1017) + _1063) * _1029) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2044 = fma(_2041, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2037 * cbSceneParam._m0[89u].x));
    float _2047 = fma(_2041, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2037 * cbSceneParam._m0[90u].x));
    float _2050 = fma(_2041, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, _2037 * cbSceneParam._m0[91u].x));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2098 = _2085 / _2097;
    float _2099 = _2089 / _2097;
    float _2100 = _2093 / _2097;
    float _2246;
    float _2247;
    float _2248;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2127 = ((uint(_2100 > cbSceneParam._m0[59u].y) + uint(_2100 > cbSceneParam._m0[59u].x)) + uint(_2100 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2128 = _2127 + 43u;
        uint _2136 = _2127 + 44u;
        uint _2144 = _2127 + 45u;
        uint _2152 = _2127 + 46u;
        float _2163 = fma(_2097, cbSceneParam._m0[_2128].w, fma(_2093, cbSceneParam._m0[_2128].z, fma(_2089, cbSceneParam._m0[_2128].y, _2085 * cbSceneParam._m0[_2128].x)));
        float _2167 = fma(_2097, cbSceneParam._m0[_2136].w, fma(_2093, cbSceneParam._m0[_2136].z, fma(_2089, cbSceneParam._m0[_2136].y, _2085 * cbSceneParam._m0[_2136].x)));
        float _2175 = fma(_2097, cbSceneParam._m0[_2152].w, fma(_2093, cbSceneParam._m0[_2152].z, fma(_2089, cbSceneParam._m0[_2152].y, _2085 * cbSceneParam._m0[_2152].x)));
        float _2179 = cbSceneParam._m0[33u].z * _2175;
        float _2181 = cbSceneParam._m0[33u].w * _2175;
        float _2184 = fma(_2097, cbSceneParam._m0[_2144].w, fma(_2093, cbSceneParam._m0[_2144].z, fma(_2089, cbSceneParam._m0[_2144].y, _2085 * cbSceneParam._m0[_2144].x))) / _2175;
        float _2232 = (cbSceneParam._m0[33u].x - sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100))) * cbSceneParam._m0[33u].y;
        float _4560 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2239 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 + _2163) / _2175, (_2181 + _2167) / _2175), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 + _2163) / _2175, (_2167 - _2179) / _2175), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 - _2179) / _2175, (_2167 - _2181) / _2175), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 - _2181) / _2175, (_2179 + _2167) / _2175), _2184), 0.0)).x), vec4(0.25)));
        _2246 = 1.0 - (_2239 * cbSceneParam._m0[34u].x);
        _2247 = 1.0 - (_2239 * cbSceneParam._m0[34u].y);
        _2248 = 1.0 - (_2239 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2246 = 1.0;
        _2247 = 1.0;
        _2248 = 1.0;
    }
    float _2312;
    float _2314;
    float _2316;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2300 = fma(_2097, cbSceneParam._m0[63u].w, fma(_2093, cbSceneParam._m0[63u].z, fma(_2089, cbSceneParam._m0[63u].y, _2085 * cbSceneParam._m0[63u].x)));
        float _2301 = fma(_2097, cbSceneParam._m0[60u].w, fma(_2093, cbSceneParam._m0[60u].z, fma(_2089, cbSceneParam._m0[60u].y, _2085 * cbSceneParam._m0[60u].x))) / _2300;
        float _2302 = fma(_2097, cbSceneParam._m0[61u].w, fma(_2093, cbSceneParam._m0[61u].z, fma(_2089, cbSceneParam._m0[61u].y, _2085 * cbSceneParam._m0[61u].x))) / _2300;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2301 >= cbSceneParam._m0[64u].x) && (_2302 >= cbSceneParam._m0[64u].y)) && (_2301 <= cbSceneParam._m0[64u].z)) && (_2302 <= cbSceneParam._m0[64u].w))
        {
            float _2440 = fma(_2097, cbSceneParam._m0[62u].w, fma(_2093, cbSceneParam._m0[62u].z, fma(_2089, cbSceneParam._m0[62u].y, _2085 * cbSceneParam._m0[62u].x))) / _2300;
            float _2444 = isnan(cbSceneParam._m0[41u].w) ? _2440 : (isnan(_2440) ? cbSceneParam._m0[41u].w : max(_2440, cbSceneParam._m0[41u].w));
            float _2487 = (cbSceneParam._m0[33u].x - sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100))) * cbSceneParam._m0[33u].y;
            float _4576 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
            float _2494 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2301, cbSceneParam._m0[33u].w + _2302), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2301, _2302 - cbSceneParam._m0[33u].z), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].z, _2302 - cbSceneParam._m0[33u].w), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2302), _2444), 0.0)).x), vec4(0.25)));
            float _2498 = 1.0 - (_2494 * cbSceneParam._m0[34u].x);
            float _2499 = 1.0 - (_2494 * cbSceneParam._m0[34u].y);
            float _2500 = 1.0 - (_2494 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2500) ? _2248 : (isnan(_2248) ? _2500 : min(_2248, _2500));
            frontier_phi_34_33_ladder_1 = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
            frontier_phi_34_33_ladder_2 = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
        }
        else
        {
            frontier_phi_34_33_ladder = _2248;
            frontier_phi_34_33_ladder_1 = _2247;
            frontier_phi_34_33_ladder_2 = _2246;
        }
        _2312 = frontier_phi_34_33_ladder_2;
        _2314 = frontier_phi_34_33_ladder_1;
        _2316 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2312 = _2246;
        _2314 = _2247;
        _2316 = _2248;
    }
    uvec4 _2321 = floatBitsToUint(cbInstanceData._m0[_989 + 5u]);
    uint _2323 = _2321.x * 14u;
    uint _2324 = _2323 + 13u;
    float _2331 = _1029 + (-1.0);
    float _2336 = (cbLight._m0[_2324].x * _2331) + 1.0;
    float _2337 = (cbLight._m0[_2324].y * _2331) + 1.0;
    float _2338 = (cbLight._m0[_2324].z * _2331) + 1.0;
    float _2339 = (cbLight._m0[_2324].w * _2331) + 1.0;
    uint _2340 = _2323 + 5u;
    float _2346 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    uint _2350 = _2323 + 4u;
    float _2359 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2363 = _2323 | 1u;
    float _2374 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_862, _863, _864));
    float _2377 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_862, _863, _864));
    float _4612 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _4623 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2382 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2384 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * 0.3183098733425140380859375;
    float _2391 = ((cbLight._m0[_2340].x * _2346) * _2384) + (((cbLight._m0[_2350].x * _2312) * _2359) * _2382);
    float _2392 = ((_2346 * cbLight._m0[_2340].y) * _2384) + (((cbLight._m0[_2350].y * _2314) * _2359) * _2382);
    float _2393 = ((_2346 * cbLight._m0[_2340].z) * _2384) + (((cbLight._m0[_2350].z * _2316) * _2359) * _2382);
    uvec4 _2397 = floatBitsToUint(cbLight._m0[_2323 + 12u]);
    bool _2399 = _2397.x == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2399)
    {
        _2501 = _2391;
        _2503 = _2392;
        _2505 = _2393;
    }
    else
    {
        uint _2509 = _2323 + 6u;
        float _2525 = (dot(vec3(cbLight._m0[_2323 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4634 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2528 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2501 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2391;
        _2503 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2392;
        _2505 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2393;
    }
    bool _2508 = _2397.y == 0u;
    float _2563;
    float _2565;
    float _2567;
    if (_2508)
    {
        _2563 = _2501;
        _2565 = _2503;
        _2567 = _2505;
    }
    else
    {
        uint _2736 = _2323 + 7u;
        float _2752 = (dot(vec3(cbLight._m0[_2323 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2753 = _2752 * _2752;
        float _4650 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2754 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2755 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2563 = (((cbLight._m0[_2736].x * 0.3183098733425140380859375) * _2754) * _2755) + _2501;
        _2565 = (((cbLight._m0[_2736].y * 0.3183098733425140380859375) * _2754) * _2755) + _2503;
        _2567 = (((cbLight._m0[_2736].z * 0.3183098733425140380859375) * _2754) * _2755) + _2505;
    }
    uint _2570 = _2323 + 8u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _865) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2323].x + _943;
    float _2586 = cbLight._m0[_2323].y + _944;
    float _2587 = cbLight._m0[_2323].z + _945;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2323].xyz));
    float _4666 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _4677 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2599 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2600 = dot(vec3(_862, _863, _864), vec3(_2592, _2593, _2594));
    float _4688 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2604 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2592, _2593, _2594));
    float _4699 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = _2584 * _2584;
    float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
    float _2621 = 0.959999978542327880859375 - _1011;
    float _2623 = 0.959999978542327880859375 - _1012;
    float _2624 = 0.959999978542327880859375 - _1013;
    float _2631 = 1.0 - _2584;
    float _2642 = (0.5 / (((_2599 * ((_2598 * _2631) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2631) + _2584) * _2598))) * _2598;
    float _4710 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
    uint _2658 = _2323 + 9u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _865) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2363].x + _943;
    float _2672 = cbLight._m0[_2363].y + _944;
    float _2673 = cbLight._m0[_2363].z + _945;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2363].xyz));
    float _4721 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2685 = dot(vec3(_862, _863, _864), vec3(_2678, _2679, _2680));
    float _4732 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2678, _2679, _2680));
    float _4743 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2670 * _2670;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2711 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2599 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2711) + _2670) * _2684))) * _2684;
    float _4754 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    float _2733 = (((((_2704 * _2621) + _1014) * cbLight._m0[_2658].x) * _2723) * _2346) + ((((cbLight._m0[_2570].x * _2312) * ((_2620 * _2621) + _1014)) * _2644) * _2359);
    float _2734 = (((((_2704 * _2623) + _1016) * cbLight._m0[_2658].y) * _2723) * _2346) + ((((cbLight._m0[_2570].y * _2314) * ((_2620 * _2623) + _1016)) * _2644) * _2359);
    float _2735 = (((((_2704 * _2624) + _1017) * cbLight._m0[_2658].z) * _2723) * _2346) + ((((cbLight._m0[_2570].z * _2316) * ((_2620 * _2624) + _1017)) * _2644) * _2359);
    float _2791;
    float _2793;
    float _2795;
    if (_2399)
    {
        _2791 = _2733;
        _2793 = _2734;
        _2795 = _2735;
    }
    else
    {
        uint _2797 = _2323 + 2u;
        uint _2801 = _2323 + 10u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _865) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _943;
        float _2818 = cbLight._m0[_2797].y + _944;
        float _2819 = cbLight._m0[_2797].z + _945;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2797].xyz));
        float _4765 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2831 = dot(vec3(_862, _863, _864), vec3(_2824, _2825, _2826));
        float _4776 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4787 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2850 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
        float _2857 = 1.0 - _2816;
        float _2867 = (0.5 / (((_2599 * ((_2830 * _2857) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2857) + _2816) * _2830))) * _2830;
        float _4798 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2869 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2870 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2791 = (((((_2850 * _2621) + _1014) * cbLight._m0[_2801].x) * _2869) * _2870) + _2733;
        _2793 = (((((_2850 * _2623) + _1016) * cbLight._m0[_2801].y) * _2869) * _2870) + _2734;
        _2795 = (((((_2850 * _2624) + _1017) * cbLight._m0[_2801].z) * _2869) * _2870) + _2735;
    }
    float _2901;
    float _2903;
    float _2905;
    if (_2508)
    {
        _2901 = _2791;
        _2903 = _2793;
        _2905 = _2795;
    }
    else
    {
        uint _2912 = _2323 + 3u;
        uint _2916 = _2323 + 11u;
        float _2930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2912].w)) * _865) * 0.949999988079071044921875);
        float _2931 = _2930 * _2930;
        float _2932 = cbLight._m0[_2912].x + _943;
        float _2933 = cbLight._m0[_2912].y + _944;
        float _2934 = cbLight._m0[_2912].z + _945;
        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
        float _2939 = _2938 * _2932;
        float _2940 = _2938 * _2933;
        float _2941 = _2938 * _2934;
        float _2942 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2912].xyz));
        float _4814 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2946 = dot(vec3(_862, _863, _864), vec3(_2939, _2940, _2941));
        float _4825 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2950 = dot(vec3(cbLight._m0[_2912].xyz), vec3(_2939, _2940, _2941));
        float _4836 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2954 = _2931 * _2931;
        float _2958 = ((_2949 * _2949) * (_2954 + (-1.0))) + 1.0;
        float _2965 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
        float _2972 = 1.0 - _2931;
        float _2982 = (0.5 / (((_2599 * ((_2945 * _2972) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2972) + _2931) * _2945))) * _2945;
        float _4847 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2954 / ((_2958 * _2958) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2901 = (((((_2965 * _2621) + _1014) * cbLight._m0[_2916].x) * _2984) * _2985) + _2791;
        _2903 = (((((_2965 * _2623) + _1016) * cbLight._m0[_2916].y) * _2984) * _2985) + _2793;
        _2905 = (((((_2965 * _2624) + _1017) * cbLight._m0[_2916].z) * _2984) * _2985) + _2795;
    }
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    if (_2321.y == 0u)
    {
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.x;
        uint _3018 = uint((float(_3006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _3007))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _3007)));
        float _3028 = (log2(_2100 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3029 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        uint _3032 = uint(isnan(14.0) ? _3029 : (isnan(_3029) ? 14.0 : min(_3029, 14.0)));
        uvec4 _3037 = texelFetch(g_lightClusterGridBuffer, int(((_3032 << 2u) + (_3018 << 6u)) >> 2u));
        uint _3038 = _3037.x;
        uint _3039 = _3006.z;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((((1u << ((_3039 >> 4u) & 15u)) + 4294967295u) & _3038) == 0u) || ((_3039 & 240u) == 0u))
        {
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
        }
        else
        {
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3156;
            float _3158;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            float _3305 = 0.0;
            uint _3306 = 0u;
            uint _3315;
            bool _3316;
            for (;;)
            {
                _3315 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                _3316 = _3315 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3316)
                {
                    frontier_phi_66_pred = _3305;
                    frontier_phi_66_pred_1 = _3304;
                    frontier_phi_66_pred_2 = _3303;
                    frontier_phi_66_pred_3 = _3302;
                    frontier_phi_66_pred_4 = _3301;
                    frontier_phi_66_pred_5 = _3300;
                }
                else
                {
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    uint _3430;
                    _3424 = _3300;
                    _3425 = _3301;
                    _3426 = _3302;
                    _3427 = _3303;
                    _3428 = _3304;
                    _3429 = _3305;
                    _3430 = _3315;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    for (;;)
                    {
                        uint _3434 = uint(findLSB(_3430)) + (_3306 << 5u);
                        uint _3431 = (_3430 + 4294967295u) & _3430;
                        uint _3436 = _3434 * 48u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3456 = (_3434 * 48u) + 4u;
                        vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3475 = (_3434 * 48u) + 8u;
                        vec3 _3486 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3475)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 2u)).x));
                        float _3490 = _3450.x - _2098;
                        float _3491 = _3450.y - _2099;
                        float _3492 = _3450.z - _2100;
                        float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                        float _3496 = inversesqrt(_3493);
                        float _3497 = _3496 * _3490;
                        float _3498 = _3496 * _3491;
                        float _3499 = _3496 * _3492;
                        float _3500 = dot(vec3(_970, _973, _976), vec3(_3497, _3498, _3499));
                        float _3505 = 1.0 - (_3493 * _3450.w);
                        float _4873 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3506 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3507 = sqrt(_3493) * _3469.w;
                        float _3510 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3500) + _3511;
                        float _3517 = _3507 * _3507;
                        float _3521 = ((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3506) / ((_3517 * 0.699999988079071044921875) + 1.0);
                        float _3525 = (-0.0) - _2098;
                        float _3526 = (-0.0) - _2099;
                        float _3527 = (-0.0) - _2100;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3532 = _3531 * _3525;
                        float _3533 = _3531 * _3526;
                        float _3534 = _3531 * _3527;
                        float _3541 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                        float _3542 = 1.0 - _1045;
                        float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                        float _3550 = _3549 * _3549;
                        float _3551 = _3550 * _3550;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3554 = _3534 + _3499;
                        float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                        float _3562 = dot(vec3(_970, _973, _976), vec3(_3532, _3533, _3534));
                        float _4889 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3565 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3566 = dot(vec3(_970, _973, _976), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                        float _4900 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                        float _3574 = _3510 * _3550;
                        float _3575 = _3574 * _3574;
                        float _3578 = ((1.0 - _3575) * _3500) + _3575;
                        float _4911 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3579 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3580 = 1.0 - _3550;
                        float _3590 = (0.5 / (((_3579 * ((_3565 * _3580) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3550) * _3565))) * _3579;
                        float _4922 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3601 = (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3573 * _3573) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125))) * _3506;
                        _3359 = (_3521 * _3469.x) + _3427;
                        _3360 = (_3521 * _3469.y) + _3428;
                        _3361 = (_3521 * _3469.z) + _3429;
                        _3356 = (_3601 * _3486.x) + _3424;
                        _3357 = (_3601 * _3486.y) + _3425;
                        _3358 = (_3601 * _3486.z) + _3426;
                        if (_3431 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3424 = _3356;
                            _3425 = _3357;
                            _3426 = _3358;
                            _3427 = _3359;
                            _3428 = _3360;
                            _3429 = _3361;
                            _3430 = _3431;
                        }
                    }
                    frontier_phi_66_pred = _3361;
                    frontier_phi_66_pred_1 = _3360;
                    frontier_phi_66_pred_2 = _3359;
                    frontier_phi_66_pred_3 = _3358;
                    frontier_phi_66_pred_4 = _3357;
                    frontier_phi_66_pred_5 = _3356;
                }
                _3158 = frontier_phi_66_pred;
                _3156 = frontier_phi_66_pred_1;
                _3154 = frontier_phi_66_pred_2;
                _3152 = frontier_phi_66_pred_3;
                _3150 = frontier_phi_66_pred_4;
                _3148 = frontier_phi_66_pred_5;
                uint _3307 = _3306 + 1u;
                if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3300 = _3148;
                    _3301 = _3150;
                    _3302 = _3152;
                    _3303 = _3154;
                    _3304 = _3156;
                    _3305 = _3158;
                    _3306 = _3307;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
        }
        uvec4 _3161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3162 = _3161.z;
        uint _3164 = (_3162 >> 8u) & 15u;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        if (((4294967295u << _3164) & _3038) == 0u)
        {
            _3268 = _3147;
            _3270 = _3149;
            _3272 = _3151;
            _3274 = _3153;
            _3276 = _3155;
            _3278 = _3157;
        }
        else
        {
            float _3293 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
            float _3294 = _3293 * _2098;
            float _3295 = _3293 * _2099;
            float _3296 = _3293 * _2100;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3164 < ((_3162 >> 12u) & 15u))
            {
                float _3269;
                float _3271;
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3407 = _3147;
                float _3408 = _3149;
                float _3409 = _3151;
                float _3410 = _3153;
                float _3411 = _3155;
                float _3412 = _3157;
                uint _3413 = _3164;
                uint _3422;
                bool _3423;
                for (;;)
                {
                    _3422 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3413 << 2u)) >> 2u)).x;
                    _3423 = _3422 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3423)
                    {
                        frontier_phi_72_pred = _3412;
                        frontier_phi_72_pred_1 = _3411;
                        frontier_phi_72_pred_2 = _3410;
                        frontier_phi_72_pred_3 = _3409;
                        frontier_phi_72_pred_4 = _3408;
                        frontier_phi_72_pred_5 = _3407;
                    }
                    else
                    {
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3619 = _3407;
                        float _3620 = _3408;
                        float _3621 = _3409;
                        float _3622 = _3410;
                        float _3623 = _3411;
                        float _3624 = _3412;
                        uint _3625 = _3422;
                        uint _3626;
                        vec4 _3651;
                        float _3652;
                        vec4 _3667;
                        vec3 _3679;
                        vec4 _3694;
                        vec4 _3709;
                        float _3755;
                        bool _3756;
                        for (;;)
                        {
                            uint _3636 = ((_3413 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3625));
                            _3626 = (_3625 + 4294967295u) & _3625;
                            uint _3638 = _3636 * 40u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            _3652 = _3651.w;
                            uint _3654 = (_3636 * 40u) + 4u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3636 * 40u) + 8u;
                            _3679 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x));
                            uint _3681 = (_3636 * 40u) + 16u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3636 * 40u) + 20u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3636 * 40u) + 24u;
                            vec4 _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3730 = (_3636 * 40u) + 28u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            _3755 = fma(_2100, _3743.z, fma(_2099, _3743.y, _3743.x * _2098)) + _3743.w;
                            _3756 = !((fma(_2100, _3724.z, fma(_2099, _3724.y, _3724.x * _2098)) + _3724.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3756)
                            {
                                float _3783 = _3651.x - _2098;
                                float _3784 = _3651.y - _2099;
                                float _3785 = _3651.z - _2100;
                                float _3786 = dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785));
                                float _3789 = inversesqrt(_3786);
                                float _3790 = _3789 * _3783;
                                float _3791 = _3789 * _3784;
                                float _3792 = _3789 * _3785;
                                float _3796 = 1.0 - (_3786 / (_3652 * _3652));
                                float _4933 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3801 = sqrt(_3786) * _3667.w;
                                float _3803 = 1.39999997615814208984375 / (_3801 + 1.39999997615814208984375);
                                float _3804 = _3803 * _3803;
                                float _3807 = ((1.0 - _3804) * dot(vec3(_3790, _3791, _3792), vec3(_970, _973, _976))) + _3804;
                                float _3810 = _3801 * _3801;
                                float _3814 = (fma(_2100, _3694.z, fma(_2099, _3694.y, _3694.x * _2098)) + _3694.w) / _3755;
                                float _3815 = (fma(_2100, _3709.z, fma(_2099, _3709.y, _3709.x * _2098)) + _3709.w) / _3755;
                                float _3819 = 1.0 - dot(vec2(_3814, _3815), vec2(_3814, _3815));
                                float _4949 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3821 = _3820 * (((isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0))) * _3797) / ((_3810 * 0.699999988079071044921875) + 1.0));
                                float _3833 = exp2(log2(1.0 / ((_3810 * 3.5) + 5.0)) * 0.25);
                                float _3834 = 1.0 - _1045;
                                float _3841 = sqrt(1.0 - ((1.0 - (_3834 * _3834)) * (1.0 - (_3833 * _3833))));
                                float _3842 = _3841 * _3841;
                                float _3843 = _3842 * _3842;
                                float _3844 = _3790 - _3294;
                                float _3845 = _3791 - _3295;
                                float _3846 = _3792 - _3296;
                                float _3850 = inversesqrt(dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846)));
                                float _3854 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3294, (-0.0) - _3295, (-0.0) - _3296));
                                float _4960 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3858 = dot(vec3(_970, _973, _976), vec3(_3850 * _3844, _3850 * _3845, _3850 * _3846));
                                float _4971 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3865 = ((_3861 * _3861) * (_3843 + (-1.0))) + 1.0;
                                float _3866 = _3803 * _3842;
                                float _3867 = _3866 * _3866;
                                float _3873 = ((1.0 - _3867) * dot(vec3(_970, _973, _976), vec3(_3790, _3791, _3792))) + _3867;
                                float _4982 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3875 = 1.0 - _3842;
                                float _3885 = (0.5 / (((_3874 * ((_3857 * _3875) + _3842)) + 9.9999999392252902907785028219223e-09) + (((_3874 * _3875) + _3842) * _3857))) * _3874;
                                float _4993 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3895 = (_3820 * _3797) * (((_3843 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3865 * _3865) * ((_3810 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3821 * _3667.y;
                                frontier_phi_78_pred_1 = _3821 * _3667.x;
                                frontier_phi_78_pred_2 = _3895 * _3679.z;
                                frontier_phi_78_pred_3 = _3895 * _3679.y;
                                frontier_phi_78_pred_4 = _3895 * _3679.x;
                                frontier_phi_78_pred_5 = _3821 * _3667.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3903 = frontier_phi_78_pred;
                            _3902 = frontier_phi_78_pred_1;
                            _3901 = frontier_phi_78_pred_2;
                            _3900 = frontier_phi_78_pred_3;
                            _3899 = frontier_phi_78_pred_4;
                            _3904 = frontier_phi_78_pred_5;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            if (_3626 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3626;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3611;
                        frontier_phi_72_pred_1 = _3610;
                        frontier_phi_72_pred_2 = _3609;
                        frontier_phi_72_pred_3 = _3608;
                        frontier_phi_72_pred_4 = _3607;
                        frontier_phi_72_pred_5 = _3606;
                    }
                    _3279 = frontier_phi_72_pred;
                    _3277 = frontier_phi_72_pred_1;
                    _3275 = frontier_phi_72_pred_2;
                    _3273 = frontier_phi_72_pred_3;
                    _3271 = frontier_phi_72_pred_4;
                    _3269 = frontier_phi_72_pred_5;
                    uint _3414 = _3413 + 1u;
                    if (_3414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3407 = _3269;
                        _3408 = _3271;
                        _3409 = _3273;
                        _3410 = _3275;
                        _3411 = _3277;
                        _3412 = _3279;
                        _3413 = _3414;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3279;
                frontier_phi_60_61_ladder_1 = _3277;
                frontier_phi_60_61_ladder_2 = _3273;
                frontier_phi_60_61_ladder_3 = _3271;
                frontier_phi_60_61_ladder_4 = _3269;
                frontier_phi_60_61_ladder_5 = _3275;
            }
            else
            {
                frontier_phi_60_61_ladder = _3157;
                frontier_phi_60_61_ladder_1 = _3155;
                frontier_phi_60_61_ladder_2 = _3151;
                frontier_phi_60_61_ladder_3 = _3149;
                frontier_phi_60_61_ladder_4 = _3147;
                frontier_phi_60_61_ladder_5 = _3153;
            }
            _3268 = frontier_phi_60_61_ladder_4;
            _3270 = frontier_phi_60_61_ladder_3;
            _3272 = frontier_phi_60_61_ladder_2;
            _3274 = frontier_phi_60_61_ladder_5;
            _3276 = frontier_phi_60_61_ladder_1;
            _3278 = frontier_phi_60_61_ladder;
        }
        float _3283 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
        _3051 = (_3283 * _3274) + _2563;
        _3053 = (_3283 * _3276) + _2565;
        _3055 = (_3283 * _3278) + _2567;
        _3057 = ((_3268 * _1014) * _3283) + _2901;
        _3059 = ((_3270 * _1016) * _3283) + _2903;
        _3061 = ((_3272 * _1017) * _3283) + _2905;
    }
    else
    {
        _3051 = _2563;
        _3053 = _2565;
        _3055 = _2567;
        _3057 = _2901;
        _3059 = _2903;
        _3061 = _2905;
    }
    uint _3067 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _3073 = ((((((_787.x - _782.x) * _765) + _782.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _711) * cbMtdParam._m0[20u].x)) * _720) * cbInstanceData._m0[_3067].x;
    float _3074 = ((((((_787.y - _782.y) * _765) + _782.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_700.y - _698) * _678) + _698)) * cbMtdParam._m0[20u].y)) * _720) * cbInstanceData._m0[_3067].y;
    float _3075 = ((((((_787.z - _782.z) * _765) + _782.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_700.z - _699) * _678) + _699)) * cbMtdParam._m0[20u].z)) * _720) * cbInstanceData._m0[_3067].z;
    float _5009 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _5020 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _5031 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _3092 = (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3051 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1029))) + ((_3057 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1831)) * cbPerFrame._m0[3u].x)) + _3073;
    float _3094 = (_3074 + ((_3059 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1831)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3053 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1029)));
    float _3096 = (_3075 + ((_3061 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1831)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3055 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1029)));
    float _5057 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3109 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
    uint _3110 = _989 + 6u;
    float _3118 = _951 / cbSceneParam._m0[86u].x;
    float _3119 = _952 / cbSceneParam._m0[86u].y;
    vec4 _3133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3135 = _3133.x;
    float _3136 = _3133.y;
    float _3137 = _3133.z;
    float _3138 = _3133.w;
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _3172 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _3173 = _3172 / _885;
        float _3184 = _3173 * _936;
        float _3185 = _937 * _3173;
        float _3186 = (-0.0) - _3185;
        float _3187 = _3173 * _938;
        float _3189 = (cbSceneParam._m0[77u].w * _3186) / _3172;
        float _3190 = _3189 + cbSceneParam._m0[79u].w;
        float _3191 = cbSceneParam._m0[79u].w - _3185;
        float _3197 = sqrt(((_3184 * _3184) + (_3185 * _3185)) + (_3187 * _3187));
        float _3200 = (1.0 - (cbSceneParam._m0[77u].w / _3172)) * _3197;
        float _3205 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3207 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3369;
        if (abs((_3186 - _3189) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3369 = ((((_3190 > 0.0) ? exp2(_3205 * _3190) : (2.0 - exp2(_3207 * _3190))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3200;
        }
        else
        {
            float _3329 = 1.0 / cbSceneParam._m0[80u].x;
            float _3330 = isnan(_3191) ? _3190 : (isnan(_3190) ? _3191 : max(_3190, _3191));
            float _3331 = isnan(_3191) ? _3190 : (isnan(_3190) ? _3191 : min(_3190, _3191));
            float _3340 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : min(_3330, 0.0));
            float _3341 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : min(_3331, 0.0));
            _3369 = ((abs(_3197 / _3186) * cbSceneParam._m0[80u].y) * ((((_3340 - _3341) * 2.0) - ((exp2(_3205 * (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0)))) - exp2(_3205 * (isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))))) * _3329)) - ((exp2(_3207 * _3340) - exp2(_3207 * _3341)) * _3329))) + (_3200 * cbSceneParam._m0[80u].z);
        }
        vec4 _3371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, 1.0), 0.0);
        float _3380 = exp2((_3369 * (-1.44269502162933349609375)) * (1.0 - _3371.w));
        float _3381 = log2(_3380);
        float _3397 = log2(_3138);
        _3209 = (exp2(_3397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].x)) * _3371.x) / cbSceneParam._m0[78u].x)) + _3135;
        _3211 = (exp2(_3397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].y)) * _3371.y) / cbSceneParam._m0[78u].y)) + _3136;
        _3213 = (exp2(_3397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].z)) * _3371.z) / cbSceneParam._m0[78u].z)) + _3137;
        _3215 = _3380 * _3138;
    }
    else
    {
        _3209 = _3135;
        _3211 = _3136;
        _3213 = _3137;
        _3215 = _3138;
    }
    float _3227 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3228 = _3227 == 3.0;
    float _3229 = log2(_3215);
    float _3233 = exp2(_3229 * cbSceneParam._m0[78u].x);
    float _3234 = exp2(_3229 * cbSceneParam._m0[78u].y);
    float _3235 = exp2(_3229 * cbSceneParam._m0[78u].z);
    float _3236 = _3233 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)));
    float _3237 = _3234 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)));
    float _3238 = _3235 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)));
    float _3247 = (_3227 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3247 * (_3228 ? _3236 : (_3236 + (cbSceneParam._m0[72u].w * _3209)));
    SV_Target.y = _3247 * (_3228 ? _3237 : (_3237 + (cbSceneParam._m0[72u].w * _3211)));
    SV_Target.z = _3247 * (_3228 ? _3238 : (_3238 + (cbSceneParam._m0[72u].w * _3213)));
    SV_Target.w = cbInstanceData._m0[_3110].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3073) * _3109) * _3233) * _3247;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3074) * _3109) * _3234) * _3247;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3075) * _3109) * _3235) * _3247;
    SV_Target_1.w = cbInstanceData._m0[_3110].w;
}


