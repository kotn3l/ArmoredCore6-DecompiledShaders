#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1584;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _288 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _301 = exp2(log2(_288.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _317 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _321 = _317.z;
    float _329 = exp2(log2(_321 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    vec4 _343 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _346 = _343.y;
    float _349 = (_343.x + (-0.02500000037252902984619140625)) * 8.0;
    float _353 = roundEven(5.0 - _349);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _355 = isnan(4.0) ? _354 : (isnan(_354) ? 4.0 : min(_354, 4.0));
    float _368 = floor(_355);
    vec4 _371 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _368));
    float _199[6];
    float _200[6];
    float _201[6];
    _199[0u] = cbMtdParam._m0[17u].x;
    _200[0u] = cbMtdParam._m0[17u].y;
    _201[0u] = cbMtdParam._m0[17u].z;
    _199[1u] = cbMtdParam._m0[15u].x;
    _200[1u] = cbMtdParam._m0[15u].y;
    _201[1u] = cbMtdParam._m0[15u].z;
    _199[2u] = cbMtdParam._m0[14u].x;
    _200[2u] = cbMtdParam._m0[14u].y;
    _201[2u] = cbMtdParam._m0[14u].z;
    _199[3u] = cbMtdParam._m0[13u].x;
    _200[3u] = cbMtdParam._m0[13u].y;
    _201[3u] = cbMtdParam._m0[13u].z;
    _199[4u] = cbMtdParam._m0[12u].x;
    _200[4u] = cbMtdParam._m0[12u].y;
    _201[4u] = cbMtdParam._m0[12u].z;
    _199[5u] = cbMtdParam._m0[18u].x;
    _200[5u] = cbMtdParam._m0[18u].y;
    _201[5u] = cbMtdParam._m0[18u].z;
    float _435 = roundEven(_349);
    float _436 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    uint _438 = uint(int(isnan(5.0) ? _436 : (isnan(_436) ? 5.0 : min(_436, 5.0))));
    vec4 _468 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _479 = cbMtdParam._m0[9u].x * _468.x;
    float _480 = cbMtdParam._m0[9u].y * _468.y;
    float _481 = cbMtdParam._m0[9u].z * _468.z;
    float _488 = ((((((_199[_438] - cbMtdParam._m0[10u].x) * _346) + cbMtdParam._m0[10u].x) * _371.x) - _479) * _331) + _479;
    float _489 = ((((((_200[_438] - cbMtdParam._m0[10u].y) * _346) + cbMtdParam._m0[10u].y) * _371.y) - _480) * _331) + _480;
    float _490 = ((((((_201[_438] - cbMtdParam._m0[10u].z) * _346) + cbMtdParam._m0[10u].z) * _371.z) - _481) * _331) + _481;
    float _496 = exp2(log2(_317.w) * cbMtdParam._m0[24u].w);
    vec4 _509 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _529 = (((cbMtdParam._m0[16u].x * _509.x) - _488) * _496) + _488;
    float _530 = (((cbMtdParam._m0[16u].y * _509.y) - _489) * _496) + _489;
    float _531 = (((cbMtdParam._m0[16u].z * _509.z) - _490) * _496) + _490;
    vec4 _543 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _568 = (_288.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _543.x) - _529) * _303) + _529);
    float _570 = (_288.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _543.y) - _530) * _303) + _530);
    float _572 = (_288.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _543.z) - _531) * _303) + _531);
    vec4 _584 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _603 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_268.x + 0.00999999977648258209228515625));
    float _605 = _603 * (cbMtdParam._m0[25u].z + 1.0);
    float _4008 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _613 = (_606 * ((cbMtdParam._m0[11u].x * _584.x) - _568)) + _568;
    float _614 = (((cbMtdParam._m0[11u].y * _584.y) - _570) * _606) + _570;
    float _615 = (((cbMtdParam._m0[11u].z * _584.z) - _572) * _606) + _572;
    float _194[5];
    float _195[5];
    _194[0u] = cbMtdParam._m0[30u].z;
    _195[0u] = cbMtdParam._m0[30u].w;
    _194[1u] = cbMtdParam._m0[32u].z;
    _195[1u] = cbMtdParam._m0[32u].w;
    _194[2u] = cbMtdParam._m0[32u].x;
    _195[2u] = cbMtdParam._m0[32u].y;
    _194[3u] = cbMtdParam._m0[31u].z;
    _195[3u] = cbMtdParam._m0[31u].w;
    _194[4u] = cbMtdParam._m0[31u].x;
    _195[4u] = cbMtdParam._m0[31u].y;
    float _651 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    uint _653 = uint(int(isnan(4.0) ? _651 : (isnan(_651) ? 4.0 : min(_651, 4.0))));
    float _660 = ((_195[_653] - cbMtdParam._m0[23u].z) * _331) + cbMtdParam._m0[23u].z;
    float _663 = ((cbMtdParam._m0[23u].w - _660) * _496) + _660;
    float _666 = ((cbMtdParam._m0[26u].y - _663) * _303) + _663;
    float _671 = (cbMtdParam._m0[25u].y + 1.0) * _603;
    float _4029 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _674 = _666 - (_666 * _672);
    vec4 _687 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _368));
    vec4 _704 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _706 = _704.x;
    float _707 = _704.y;
    float _712 = cbMtdParam._m0[23u].x + _704.z;
    float _715 = (((_687.z + _194[_653]) - _712) * _331) + _712;
    vec4 _727 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _738 = (((_727.z - _715) + cbMtdParam._m0[30u].x) * _496) + _715;
    float _744 = ((((_321 * 2.0) * _738) - _738) * cbMtdParam._m0[25u].w) + _738;
    vec4 _756 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _767 = (((cbMtdParam._m0[24u].z + _756.z) - _744) * _303) + _744;
    vec4 _779 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _791 = ((_779.z - _767) * _672) + _767;
    float _804 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _827 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_804 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _804) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _831 = cbPerFrame._m0[22u].x * 2.0;
    float _832 = _831 * cbMtdParam._m0[28u].z;
    float _835 = (_827.x * 0.5) + (-0.25);
    float _838 = (_827.y * 0.5) + (-0.25);
    float _839 = _838 * cbMtdParam._m0[28u].y;
    float _841 = (-0.0) - (cbMtdParam._m0[28u].y * _835);
    float _843 = fract(_832);
    float _845 = fract(_832 + 0.5);
    float _856 = abs((_843 * 2.0) + (-1.0));
    vec4 _872 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_843 * _841) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_839 * _843) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _874 = _872.x;
    float _875 = _872.y;
    float _876 = _872.z;
    vec4 _877 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_845 * _841) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_839 * _845) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _888 = ((_877.x - _874) * _856) + _874;
    float _895 = exp2(log2(_888 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _896 = isnan(cbMtdParam._m0[29u].y) ? _895 : (isnan(_895) ? cbMtdParam._m0[29u].y : max(_895, cbMtdParam._m0[29u].y));
    float _897 = isnan(cbMtdParam._m0[29u].z) ? _896 : (isnan(_896) ? cbMtdParam._m0[29u].z : min(_896, cbMtdParam._m0[29u].z));
    float _921 = (cbMtdParam._m0[33u].x * _804) + TEXCOORD;
    float _922 = (cbMtdParam._m0[33u].y * _804) + TEXCOORD_1;
    float _925 = _831 * cbMtdParam._m0[27u].w;
    float _926 = _838 * cbMtdParam._m0[27u].z;
    float _928 = (-0.0) - (cbMtdParam._m0[27u].z * _835);
    float _929 = fract(_925);
    float _931 = fract(_925 + 0.5);
    float _942 = abs((_929 * 2.0) + (-1.0));
    vec4 _959 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_929 * _928) + _921) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_926 * _929) + _922) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _964 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_931 * _928) + _921) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_926 * _931) + _922) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1001 = ((_687.x - _706) * _331) + _706;
    float _1002 = ((_687.y - _707) * _331) + _707;
    float _1007 = ((_727.x - _1001) * _496) + _1001;
    float _1008 = ((_727.y - _1002) * _496) + _1002;
    float _1017 = ((((_756.x - _1007) * _303) + _1007) * 2.0) + (-1.0);
    float _1018 = ((((_756.y - _1008) * _303) + _1008) * 2.0) + (-1.0);
    float _1019 = dot(vec2(_1017, _1018), vec2(_1017, _1018));
    float _4050 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1024 = sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))));
    float _1033 = ((cbMtdParam._m0[26u].z * ((_317.x * 2.0) + (-1.0))) + _1017) + (((((_779.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _672);
    float _1034 = ((cbMtdParam._m0[26u].z * ((_317.y * 2.0) + (-1.0))) + _1018) + (((((_779.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _672);
    float _1037 = fma(_1024, _241 * NORMAL.x, fma(_1034, _248 * TANGENT.x, (_234 * _226) * _1033));
    float _1040 = fma(_1024, _241 * NORMAL.y, fma(_1034, _248 * TANGENT.y, (_234 * _227) * _1033));
    float _1043 = fma(_1024, _241 * NORMAL.z, fma(_1034, _248 * TANGENT.z, (_234 * _228) * _1033));
    float _1047 = inversesqrt(dot(vec3(_1037, _1040, _1043), vec3(_1037, _1040, _1043)));
    float _1048 = _1047 * _1037;
    float _1049 = _1047 * _1040;
    float _1050 = _1047 * _1043;
    float _4061 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _1051 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4083 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4094 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4105 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _1055 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1071 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1121 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1111);
    float _1122 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1111);
    float _1123 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1111);
    float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
    float _1128 = _1121 * _1127;
    float _1129 = _1122 * _1127;
    float _1130 = _1123 * _1127;
    float _1136 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1137 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1155 = fma(_1050, cbSceneParam._m0[5u].z, fma(_1049, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1048));
    float _1158 = fma(_1050, cbSceneParam._m0[6u].z, fma(_1049, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1048));
    float _1161 = fma(_1050, cbSceneParam._m0[7u].z, fma(_1049, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1048));
    uint _1174 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1175 = _1174 + 9u;
    uint _1176 = _1175 + uint(cbMatDynParam._m0[0u].w);
    float _1182 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_1176].x;
    float _1183 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_1176].y;
    float _1184 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1176].z;
    float _4116 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1188 = 1.0 - _1055;
    float _1189 = _1185 * _1188;
    float _1190 = _1186 * _1188;
    float _1191 = _1187 * _1188;
    float _1196 = (_1185 + (-0.039999999105930328369140625)) * _1055;
    float _1197 = (_1186 + (-0.039999999105930328369140625)) * _1055;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1055;
    float _1199 = _1196 + 0.039999999105930328369140625;
    float _1201 = _1197 + 0.039999999105930328369140625;
    float _1202 = _1198 + 0.039999999105930328369140625;
    vec4 _1211 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1136, cbSceneParam._m0[86u].y * _1137));
    float _1214 = _1211.x * TEXCOORD_3.w;
    float _1215 = dot(vec3(_1048, _1049, _1050), vec3(_1128, _1129, _1130));
    float _1218 = _1215 * 2.0;
    float _1222 = (_1218 * _1048) - _1128;
    float _1223 = (_1218 * _1049) - _1129;
    float _1224 = (_1218 * _1050) - _1130;
    float _1228 = abs(dot(vec3(_1128, _1129, _1130), vec3(_1048, _1049, _1050)));
    float _4149 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1230 = sqrt(_1051);
    float _1241 = exp2((_1230 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1230 * 3.0));
    float _1247 = (1.0 - _1241) * ((_1230 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1248 = _1241 * _1230;
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1284 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1583;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1310 = fma(_1284, cbModelParam._m0[26u].z, fma(_1280, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1276));
        float _1314 = fma(_1284, cbModelParam._m0[27u].z, fma(_1280, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1276));
        float _1318 = fma(_1284, cbModelParam._m0[28u].z, fma(_1280, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1276));
        float _1342 = _1276 + _1048;
        float _1343 = _1280 + _1049;
        float _1344 = _1284 + _1050;
        float _1354 = fma(_1344, cbModelParam._m0[26u].z, fma(_1343, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1342)) - _1310;
        float _1355 = fma(_1344, cbModelParam._m0[27u].z, fma(_1343, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1342)) - _1314;
        float _1356 = fma(_1344, cbModelParam._m0[28u].z, fma(_1343, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1342)) - _1318;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1372 = ((_1360 * _1354) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1310 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1360 * _1355) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1314 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1356) / cbModelParam._m0[34u].z) + ((((((_1318 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1411 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1377.x + (-0.5));
        float _1413 = _1411 * (_1377.y + (-0.5));
        float _1414 = _1411 * (_1377.z + (-0.5));
        float _1421 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1384.x + (-0.5));
        float _1423 = _1421 * (_1384.y + (-0.5));
        float _1424 = _1421 * (_1384.z + (-0.5));
        float _1431 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1391.x + (-0.5));
        float _1433 = _1431 * (_1391.y + (-0.5));
        float _1434 = _1431 * (_1391.z + (-0.5));
        float _1441 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1398.x + (-0.5));
        float _1443 = _1441 * (_1398.y + (-0.5));
        float _1444 = _1441 * (_1398.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1465 = (dot(vec3(_1048, _1049, _1050), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1475 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4197 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1477 + 1.0))) + _1482) * _1445;
        float _1492 = _1413 * 0.5;
        float _1493 = _1423 * 0.5;
        float _1494 = _1433 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_1048, _1049, _1050), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4230 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1519 + 1.0))) + _1524) * _1446;
        float _1534 = _1414 * 0.5;
        float _1535 = _1424 * 0.5;
        float _1536 = _1434 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1048, _1049, _1050), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4263 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1561 + 1.0))) + _1566) * _1447;
        _1583 = _1414;
        _1585 = _1413;
        _1586 = _1412;
        _1587 = _1424;
        _1588 = _1423;
        _1589 = _1422;
        _1590 = _1434;
        _1591 = _1433;
        _1592 = _1432;
        _1593 = _1447;
        _1594 = _1446;
        _1595 = _1445;
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1597 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1584;
        _1585 = _1584;
        _1586 = _1584;
        _1587 = _1584;
        _1588 = _1584;
        _1589 = _1584;
        _1590 = _1584;
        _1591 = _1584;
        _1592 = _1584;
        _1593 = _1584;
        _1594 = _1584;
        _1595 = _1584;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1621 = fma(_1284, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276));
        float _1625 = fma(_1284, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276));
        float _1629 = fma(_1284, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276));
        float _1652 = _1276 + _1048;
        float _1653 = _1280 + _1049;
        float _1654 = _1284 + _1050;
        float _1664 = fma(_1654, cbModelParam._m0[30u].z, fma(_1653, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1652)) - _1621;
        float _1665 = fma(_1654, cbModelParam._m0[31u].z, fma(_1653, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1652)) - _1625;
        float _1666 = fma(_1654, cbModelParam._m0[32u].z, fma(_1653, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1652)) - _1629;
        float _1670 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
        float _1683 = ((_1670 * _1664) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1621 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1684 = ((_1670 * _1665) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1625 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1685 = ((_1670 * _1666) / cbModelParam._m0[35u].z) + ((((((_1629 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        float _1720 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1687.x + (-0.5));
        float _1722 = _1720 * (_1687.y + (-0.5));
        float _1723 = _1720 * (_1687.z + (-0.5));
        float _1730 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1694.x + (-0.5));
        float _1732 = _1730 * (_1694.y + (-0.5));
        float _1733 = _1730 * (_1694.z + (-0.5));
        float _1740 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1701.x + (-0.5));
        float _1742 = _1740 * (_1701.y + (-0.5));
        float _1743 = _1740 * (_1701.z + (-0.5));
        float _1750 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1708.x + (-0.5));
        float _1752 = _1750 * (_1708.y + (-0.5));
        float _1753 = _1750 * (_1708.z + (-0.5));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = _1721 * 0.5;
        float _1758 = _1731 * 0.5;
        float _1759 = _1741 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_1048, _1049, _1050), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4326 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1784 + 1.0))) + _1789) * _1754;
        float _1799 = _1722 * 0.5;
        float _1800 = _1732 * 0.5;
        float _1801 = _1742 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_1048, _1049, _1050), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4359 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1826 + 1.0))) + _1831) * _1755;
        float _1841 = _1723 * 0.5;
        float _1842 = _1733 * 0.5;
        float _1843 = _1743 * 0.5;
        float _1844 = dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843));
        float _1849 = (_1844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1844);
        float _1857 = (dot(vec3(_1048, _1049, _1050), vec3(_1849 * _1841, _1849 * _1842, _1849 * _1843)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1866 = sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1868 = _1867 * 2.0;
        float _1872 = (1.0 - _1867) / (_1867 + 1.0);
        float _4392 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1882 = ((((1.0 - _1873) * (_1868 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1868 + 1.0))) + _1873) * _1756;
        _1890 = _1723;
        _1891 = _1722;
        _1892 = _1721;
        _1893 = _1733;
        _1894 = _1732;
        _1895 = _1731;
        _1896 = _1743;
        _1897 = _1742;
        _1898 = _1741;
        _1899 = _1756;
        _1900 = _1755;
        _1901 = _1754;
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)));
    }
    else
    {
        _1890 = _1584;
        _1891 = _1584;
        _1892 = _1584;
        _1893 = _1584;
        _1894 = _1584;
        _1895 = _1584;
        _1896 = _1584;
        _1897 = _1584;
        _1898 = _1584;
        _1899 = _1584;
        _1900 = _1584;
        _1901 = _1584;
        _1902 = 0.0;
        _1903 = 0.0;
        _1904 = 0.0;
    }
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1596)) + _1596;
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1597)) + _1597;
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1598)) + _1598;
    float _1937 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1914));
    float _1958 = _1222 * 0.5;
    float _1959 = _1223 * 0.5;
    float _1960 = _1224 * 0.5;
    float _1961 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _1964 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _1967 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _2001;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1974 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1583, _1587, _1590, _1593));
        float _1978 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1585, _1588, _1591, _1594));
        float _1982 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1586, _1589, _1592, _1595));
        float _1989 = dot(vec4(cbModelParam._m0[39u]), vec4(_1958, _1959, _1960, 1.0));
        _2001 = dot(vec3(isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1989) ? 0.0 : (isnan(0.0) ? _1989 : max(0.0, _1989))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2001 = 1.0;
    }
    float _2012;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2003 = dot(vec4(cbModelParam._m0[40u]), vec4(_1958, _1959, _1960, 1.0));
        _2012 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2003) ? 0.0 : (isnan(0.0) ? _2003 : max(0.0, _2003))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2012 = 1.0;
    }
    float _2016 = (_2012 * cbModelParam._m0[1u].x) + (_2001 * (1.0 - cbModelParam._m0[1u].x));
    float _2026 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1051);
    float _2027 = isnan(_2026) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2026 : min(cbModelParam._m0[25u].z, _2026));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2074 = fma(_1284, cbModelParam._m0[13u].z, fma(_1280, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1276)) + cbModelParam._m0[13u].w;
        float _2078 = fma(_1284, cbModelParam._m0[14u].z, fma(_1280, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1276)) + cbModelParam._m0[14u].w;
        float _2082 = fma(_1284, cbModelParam._m0[15u].z, fma(_1280, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1276)) + cbModelParam._m0[15u].w;
        float _2085 = fma(_1224, cbModelParam._m0[13u].z, fma(_1223, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1222));
        float _2088 = fma(_1224, cbModelParam._m0[14u].z, fma(_1223, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1222));
        float _2091 = fma(_1224, cbModelParam._m0[15u].z, fma(_1223, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1222));
        float _2119;
        if (_2085 > 0.0)
        {
            _2119 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2119 = frontier_phi_14_12_ladder;
        }
        float _2342;
        if (_2088 > 0.0)
        {
            _2342 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2342 = frontier_phi_23_19_ladder;
        }
        float _2599;
        if (_2091 > 0.0)
        {
            _2599 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2599 = frontier_phi_35_30_ladder;
        }
        float _2601 = isnan(_2342) ? _2119 : (isnan(_2119) ? _2342 : min(_2119, _2342));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2085) + _2074;
        float _2607 = (_2602 * _2088) + _2078;
        float _2608 = (_2602 * _2091) + _2082;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2027);
            frontier_phi_13_35_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2107 = frontier_phi_13_35_ladder_2;
        _2109 = frontier_phi_13_35_ladder_1;
        _2111 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1222, _1223, _1224), _2027);
        _2107 = _2095.x * cbModelParam._m0[1u].y;
        _2109 = _2095.y * cbModelParam._m0[1u].y;
        _2111 = _2095.z * cbModelParam._m0[1u].y;
    }
    float _2115 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1051);
    float _2116 = isnan(_2115) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2115 : min(cbModelParam._m0[25u].w, _2115));
    float _2205;
    float _2207;
    float _2209;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2169 = fma(_1284, cbModelParam._m0[21u].z, fma(_1280, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1276)) + cbModelParam._m0[21u].w;
        float _2173 = fma(_1284, cbModelParam._m0[22u].z, fma(_1280, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1276)) + cbModelParam._m0[22u].w;
        float _2177 = fma(_1284, cbModelParam._m0[23u].z, fma(_1280, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1276)) + cbModelParam._m0[23u].w;
        float _2180 = fma(_1224, cbModelParam._m0[21u].z, fma(_1223, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1222));
        float _2183 = fma(_1224, cbModelParam._m0[22u].z, fma(_1223, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1222));
        float _2186 = fma(_1224, cbModelParam._m0[23u].z, fma(_1223, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1222));
        float _2347;
        if (_2180 > 0.0)
        {
            _2347 = abs((1.0 - _2169) / _2180);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2169 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2347 = frontier_phi_25_21_ladder;
        }
        float _2626;
        if (_2183 > 0.0)
        {
            _2626 = abs((1.0 - _2173) / _2183);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2173 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2626 = frontier_phi_37_32_ladder;
        }
        float _2839;
        if (_2186 > 0.0)
        {
            _2839 = abs((1.0 - _2177) / _2186);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2177 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2839 = frontier_phi_46_43_ladder;
        }
        float _2841 = isnan(_2626) ? _2347 : (isnan(_2347) ? _2626 : min(_2347, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2180) + _2169;
        float _2847 = (_2842 * _2183) + _2173;
        float _2848 = (_2842 * _2186) + _2177;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2116);
            frontier_phi_22_46_ladder = _3076.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3076.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3076.x * cbModelParam._m0[1u].z;
        }
        _2205 = frontier_phi_22_46_ladder_2;
        _2207 = frontier_phi_22_46_ladder_1;
        _2209 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1222, _1223, _1224), _2116);
        _2205 = _2189.x * cbModelParam._m0[1u].z;
        _2207 = _2189.y * cbModelParam._m0[1u].z;
        _2209 = _2189.z * cbModelParam._m0[1u].z;
    }
    float _2222 = (((_1247 * _1199) + _1248) * _1214) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1247 * _1201) + _1248) * _1214) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2226 = (((_1247 * _1202) + _1248) * _1214) * ((cbModelParam._m0[1u].w * (_2209 - _2111)) + _2111);
    float _2229 = fma(_2226, cbSceneParam._m0[89u].z, fma(_2224, cbSceneParam._m0[89u].y, _2222 * cbSceneParam._m0[89u].x));
    float _2232 = fma(_2226, cbSceneParam._m0[90u].z, fma(_2224, cbSceneParam._m0[90u].y, _2222 * cbSceneParam._m0[90u].x));
    float _2235 = fma(_2226, cbSceneParam._m0[91u].z, fma(_2224, cbSceneParam._m0[91u].y, _2222 * cbSceneParam._m0[91u].x));
    vec4 _2243 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1136, _1137));
    float _2245 = _2243.w;
    float _2257 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2245);
    float _2258 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2245);
    float _2259 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2245);
    uvec4 _2263 = floatBitsToUint(cbInstanceData._m0[_1174 + 5u]);
    uint _2265 = _2263.x * 14u;
    uint _2266 = _2265 + 13u;
    float _2273 = _1214 + (-1.0);
    float _2278 = (cbLight._m0[_2266].x * _2273) + 1.0;
    float _2279 = (cbLight._m0[_2266].y * _2273) + 1.0;
    float _2280 = (cbLight._m0[_2266].z * _2273) + 1.0;
    float _2281 = (cbLight._m0[_2266].w * _2273) + 1.0;
    uint _2282 = _2265 + 5u;
    float _2288 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2292 = _2265 + 4u;
    float _2301 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2305 = _2265 | 1u;
    float _2316 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_1048, _1049, _1050));
    float _2319 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_1048, _1049, _1050));
    float _4528 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _4539 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2324 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2326 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2333 = ((cbLight._m0[_2282].x * _2288) * _2326) + (((cbLight._m0[_2292].x * _2257) * _2301) * _2324);
    float _2334 = ((_2288 * cbLight._m0[_2282].y) * _2326) + (((cbLight._m0[_2292].y * _2258) * _2301) * _2324);
    float _2335 = ((_2288 * cbLight._m0[_2282].z) * _2326) + (((cbLight._m0[_2292].z * _2259) * _2301) * _2324);
    uvec4 _2339 = floatBitsToUint(cbLight._m0[_2265 + 12u]);
    bool _2341 = _2339.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2341)
    {
        _2352 = _2333;
        _2354 = _2334;
        _2356 = _2335;
    }
    else
    {
        uint _2360 = _2265 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2265 + 2u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4550 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2379 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2333;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2334;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2335;
    }
    bool _2359 = _2339.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2359)
    {
        _2397 = _2352;
        _2399 = _2354;
        _2401 = _2356;
    }
    else
    {
        uint _2570 = _2265 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2265 + 3u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4566 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2589 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2397 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2352;
        _2399 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2354;
        _2401 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2356;
    }
    uint _2404 = _2265 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _1051) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2265].x + _1128;
    float _2420 = cbLight._m0[_2265].y + _1129;
    float _2421 = cbLight._m0[_2265].z + _1130;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2265].xyz));
    float _4582 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _4593 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _2433 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2434 = dot(vec3(_1048, _1049, _1050), vec3(_2426, _2427, _2428));
    float _4604 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2426, _2427, _2428));
    float _4615 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2455 = 0.959999978542327880859375 - _1196;
    float _2457 = 0.959999978542327880859375 - _1197;
    float _2458 = 0.959999978542327880859375 - _1198;
    float _2465 = 1.0 - _2418;
    float _2476 = (0.5 / (((_2433 * ((_2432 * _2465) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2465) + _2418) * _2432))) * _2432;
    float _4626 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2492 = _2265 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _1051) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2305].x + _1128;
    float _2506 = cbLight._m0[_2305].y + _1129;
    float _2507 = cbLight._m0[_2305].z + _1130;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2305].xyz));
    float _4637 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2519 = dot(vec3(_1048, _1049, _1050), vec3(_2512, _2513, _2514));
    float _4648 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2512, _2513, _2514));
    float _4659 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2433 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2545) + _2504) * _2518))) * _2518;
    float _4670 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2455) + _1199) * cbLight._m0[_2492].x) * _2557) * _2288) + ((((cbLight._m0[_2404].x * _2257) * ((_2454 * _2455) + _1199)) * _2478) * _2301);
    float _2568 = (((((_2538 * _2457) + _1201) * cbLight._m0[_2492].y) * _2557) * _2288) + ((((cbLight._m0[_2404].y * _2258) * ((_2454 * _2457) + _1201)) * _2478) * _2301);
    float _2569 = (((((_2538 * _2458) + _1202) * cbLight._m0[_2492].z) * _2557) * _2288) + ((((cbLight._m0[_2404].z * _2259) * ((_2454 * _2458) + _1202)) * _2478) * _2301);
    float _2631;
    float _2633;
    float _2635;
    if (_2341)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2265 + 2u;
        uint _2641 = _2265 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1051) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1128;
        float _2658 = cbLight._m0[_2637].y + _1129;
        float _2659 = cbLight._m0[_2637].z + _1130;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2637].xyz));
        float _4681 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2671 = dot(vec3(_1048, _1049, _1050), vec3(_2664, _2665, _2666));
        float _4692 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4703 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2433 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2697) + _2656) * _2670))) * _2670;
        float _4714 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2631 = (((((_2690 * _2455) + _1199) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2457) + _1201) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2458) + _1202) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2359)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2265 + 3u;
        uint _2760 = _2265 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1051) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1128;
        float _2777 = cbLight._m0[_2756].y + _1129;
        float _2778 = cbLight._m0[_2756].z + _1130;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2756].xyz));
        float _4730 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2790 = dot(vec3(_1048, _1049, _1050), vec3(_2783, _2784, _2785));
        float _4741 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4752 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2433 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2816) + _2775) * _2789))) * _2789;
        float _4763 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2745 = (((((_2809 * _2455) + _1199) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2457) + _1201) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2458) + _1202) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2263.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1137) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1136) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
        }
        else
        {
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            uint _3240 = 0u;
            uint _3249;
            bool _3250;
            for (;;)
            {
                _3249 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                _3250 = _3249 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3250)
                {
                    frontier_phi_61_pred = _3234;
                    frontier_phi_61_pred_1 = _3239;
                    frontier_phi_61_pred_2 = _3238;
                    frontier_phi_61_pred_3 = _3237;
                    frontier_phi_61_pred_4 = _3236;
                    frontier_phi_61_pred_5 = _3235;
                }
                else
                {
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    uint _3364;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3249;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    for (;;)
                    {
                        uint _3368 = uint(findLSB(_3364)) + (_3240 << 5u);
                        uint _3365 = (_3364 + 4294967295u) & _3364;
                        uint _3370 = _3368 * 48u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3390 = (_3368 * 48u) + 4u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3409 = (_3368 * 48u) + 8u;
                        vec3 _3420 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x));
                        float _3424 = _3384.x - _2905;
                        float _3425 = _3384.y - _2906;
                        float _3426 = _3384.z - _2907;
                        float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                        float _3430 = inversesqrt(_3427);
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3434 = dot(vec3(_1155, _1158, _1161), vec3(_3431, _3432, _3433));
                        float _3439 = 1.0 - (_3427 * _3384.w);
                        float _4789 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3441 = sqrt(_3427) * _3403.w;
                        float _3444 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3434) + _3445;
                        float _3451 = _3441 * _3441;
                        float _3455 = ((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3440) / ((_3451 * 0.699999988079071044921875) + 1.0);
                        float _3459 = (-0.0) - _2905;
                        float _3460 = (-0.0) - _2906;
                        float _3461 = (-0.0) - _2907;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3476 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                        float _3477 = 1.0 - _1230;
                        float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                        float _3485 = _3484 * _3484;
                        float _3486 = _3485 * _3485;
                        float _3487 = _3466 + _3431;
                        float _3488 = _3467 + _3432;
                        float _3489 = _3468 + _3433;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3497 = dot(vec3(_1155, _1158, _1161), vec3(_3466, _3467, _3468));
                        float _4805 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3501 = dot(vec3(_1155, _1158, _1161), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                        float _4816 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                        float _3509 = _3444 * _3485;
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3434) + _3510;
                        float _4827 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3514 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3515 = 1.0 - _3485;
                        float _3525 = (0.5 / (((_3514 * ((_3500 * _3515) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3485) * _3500))) * _3514;
                        float _4838 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3536 = (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3508 * _3508) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125))) * _3440;
                        _3293 = (_3455 * _3403.x) + _3361;
                        _3294 = (_3455 * _3403.y) + _3362;
                        _3295 = (_3455 * _3403.z) + _3363;
                        _3290 = (_3536 * _3420.x) + _3358;
                        _3291 = (_3536 * _3420.y) + _3359;
                        _3292 = (_3536 * _3420.z) + _3360;
                        if (_3365 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3365;
                        }
                    }
                    frontier_phi_61_pred = _3290;
                    frontier_phi_61_pred_1 = _3295;
                    frontier_phi_61_pred_2 = _3294;
                    frontier_phi_61_pred_3 = _3293;
                    frontier_phi_61_pred_4 = _3292;
                    frontier_phi_61_pred_5 = _3291;
                }
                _3082 = frontier_phi_61_pred;
                _3092 = frontier_phi_61_pred_1;
                _3090 = frontier_phi_61_pred_2;
                _3088 = frontier_phi_61_pred_3;
                _3086 = frontier_phi_61_pred_4;
                _3084 = frontier_phi_61_pred_5;
                uint _3241 = _3240 + 1u;
                if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3234 = _3082;
                    _3235 = _3084;
                    _3236 = _3086;
                    _3237 = _3088;
                    _3238 = _3090;
                    _3239 = _3092;
                    _3240 = _3241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
        }
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.z;
        uint _3098 = (_3096 >> 8u) & 15u;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        if (((4294967295u << _3098) & _2951) == 0u)
        {
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
        }
        else
        {
            float _3227 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3228 = _3227 * _2905;
            float _3229 = _3227 * _2906;
            float _3230 = _3227 * _2907;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3098 < ((_3096 >> 12u) & 15u))
            {
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3341 = _3081;
                float _3342 = _3083;
                float _3343 = _3085;
                float _3344 = _3087;
                float _3345 = _3089;
                float _3346 = _3091;
                uint _3347 = _3098;
                uint _3356;
                bool _3357;
                for (;;)
                {
                    _3356 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                    _3357 = _3356 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3357)
                    {
                        frontier_phi_67_pred = _3344;
                        frontier_phi_67_pred_1 = _3345;
                        frontier_phi_67_pred_2 = _3346;
                        frontier_phi_67_pred_3 = _3343;
                        frontier_phi_67_pred_4 = _3342;
                        frontier_phi_67_pred_5 = _3341;
                    }
                    else
                    {
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3554 = _3341;
                        float _3555 = _3342;
                        float _3556 = _3343;
                        float _3557 = _3344;
                        float _3558 = _3345;
                        float _3559 = _3346;
                        uint _3560 = _3356;
                        uint _3561;
                        vec4 _3586;
                        float _3587;
                        vec4 _3602;
                        vec3 _3614;
                        vec4 _3629;
                        vec4 _3644;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3571 = ((_3347 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3560));
                            _3561 = (_3560 + 4294967295u) & _3560;
                            uint _3573 = _3571 * 40u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3587 = _3586.w;
                            uint _3589 = (_3571 * 40u) + 4u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3571 * 40u) + 8u;
                            _3614 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x));
                            uint _3616 = (_3571 * 40u) + 16u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3571 * 40u) + 20u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3571 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3571 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_2907, _3678.z, fma(_2906, _3678.y, _3678.x * _2905)) + _3678.w;
                            _3691 = !((fma(_2907, _3659.z, fma(_2906, _3659.y, _3659.x * _2905)) + _3659.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3586.x - _2905;
                                float _3719 = _3586.y - _2906;
                                float _3720 = _3586.z - _2907;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3587 * _3587));
                                float _4849 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3736 = sqrt(_3721) * _3602.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_1155, _1158, _1161))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_2907, _3629.z, fma(_2906, _3629.y, _3629.x * _2905)) + _3629.w) / _3690;
                                float _3750 = (fma(_2907, _3644.z, fma(_2906, _3644.y, _3644.x * _2905)) + _3644.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4865 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _1230;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3228;
                                float _3780 = _3726 - _3229;
                                float _3781 = _3727 - _3230;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_1155, _1158, _1161), vec3((-0.0) - _3228, (-0.0) - _3229, (-0.0) - _3230));
                                float _4876 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3793 = dot(vec3(_1155, _1158, _1161), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4887 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_1155, _1158, _1161), vec3(_3725, _3726, _3727))) + _3802;
                                float _4898 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4909 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3830 * _3614.x;
                                frontier_phi_73_pred_1 = _3830 * _3614.y;
                                frontier_phi_73_pred_2 = _3756 * _3602.z;
                                frontier_phi_73_pred_3 = _3756 * _3602.y;
                                frontier_phi_73_pred_4 = _3756 * _3602.x;
                                frontier_phi_73_pred_5 = _3830 * _3614.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3834 = frontier_phi_73_pred;
                            _3835 = frontier_phi_73_pred_1;
                            _3839 = frontier_phi_73_pred_2;
                            _3838 = frontier_phi_73_pred_3;
                            _3837 = frontier_phi_73_pred_4;
                            _3836 = frontier_phi_73_pred_5;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            if (_3561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3561;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3544;
                        frontier_phi_67_pred_1 = _3545;
                        frontier_phi_67_pred_2 = _3546;
                        frontier_phi_67_pred_3 = _3543;
                        frontier_phi_67_pred_4 = _3542;
                        frontier_phi_67_pred_5 = _3541;
                    }
                    _3209 = frontier_phi_67_pred;
                    _3211 = frontier_phi_67_pred_1;
                    _3213 = frontier_phi_67_pred_2;
                    _3207 = frontier_phi_67_pred_3;
                    _3205 = frontier_phi_67_pred_4;
                    _3203 = frontier_phi_67_pred_5;
                    uint _3348 = _3347 + 1u;
                    if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3341 = _3203;
                        _3342 = _3205;
                        _3343 = _3207;
                        _3344 = _3209;
                        _3345 = _3211;
                        _3346 = _3213;
                        _3347 = _3348;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3211;
                frontier_phi_55_56_ladder_1 = _3213;
                frontier_phi_55_56_ladder_2 = _3209;
                frontier_phi_55_56_ladder_3 = _3207;
                frontier_phi_55_56_ladder_4 = _3205;
                frontier_phi_55_56_ladder_5 = _3203;
            }
            else
            {
                frontier_phi_55_56_ladder = _3089;
                frontier_phi_55_56_ladder_1 = _3091;
                frontier_phi_55_56_ladder_2 = _3087;
                frontier_phi_55_56_ladder_3 = _3085;
                frontier_phi_55_56_ladder_4 = _3083;
                frontier_phi_55_56_ladder_5 = _3081;
            }
            _3202 = frontier_phi_55_56_ladder_5;
            _3204 = frontier_phi_55_56_ladder_4;
            _3206 = frontier_phi_55_56_ladder_3;
            _3208 = frontier_phi_55_56_ladder_2;
            _3210 = frontier_phi_55_56_ladder;
            _3212 = frontier_phi_55_56_ladder_1;
        }
        float _3217 = isnan(1.0) ? _1214 : (isnan(_1214) ? 1.0 : min(_1214, 1.0));
        _2964 = (_3217 * _3208) + _2397;
        _2966 = (_3217 * _3210) + _2399;
        _2968 = (_3217 * _3212) + _2401;
        _2970 = ((_3202 * _1199) * _3217) + _2745;
        _2972 = ((_3204 * _1201) * _3217) + _2747;
        _2974 = ((_3206 * _1202) * _3217) + _2749;
    }
    else
    {
        _2964 = _2397;
        _2966 = _2399;
        _2968 = _2401;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    uint _2980 = _1175 + uint(cbMatDynParam._m0[0u].w);
    float _2986 = ((((((_964.x - _959.x) * _942) + _959.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _888) * cbMtdParam._m0[20u].x)) * _897) * cbInstanceData._m0[_2980].x;
    float _2987 = ((((((_964.y - _959.y) * _942) + _959.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_877.y - _875) * _856) + _875)) * cbMtdParam._m0[20u].y)) * _897) * cbInstanceData._m0[_2980].y;
    float _2988 = ((((((_964.z - _959.z) * _942) + _959.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_877.z - _876) * _856) + _876)) * cbMtdParam._m0[20u].z)) * _897) * cbInstanceData._m0[_2980].z;
    float _4925 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _4936 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _4947 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _3005 = (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2964 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1214))) + ((_2970 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2016)) * cbPerFrame._m0[3u].x)) + _2986;
    float _3007 = (_2987 + ((_2972 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2016)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2966 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1214)));
    float _3009 = (_2988 + ((_2974 + ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * _2016)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2968 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1214)));
    float _4973 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3022 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
    uint _3023 = _1174 + 6u;
    float _3031 = _1136 / cbSceneParam._m0[86u].x;
    float _3032 = _1137 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _1071 : (isnan(_1071) ? cbSceneParam._m0[77u].w : min(_1071, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_1071 > cbSceneParam._m0[78u].w)
    {
        float _3106 = isnan(_1071) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1071 : min(cbSceneParam._m0[80u].w, _1071));
        float _3107 = _3106 / _1071;
        float _3118 = _3107 * _1121;
        float _3119 = _1122 * _3107;
        float _3120 = (-0.0) - _3119;
        float _3121 = _3107 * _1123;
        float _3123 = (cbSceneParam._m0[77u].w * _3120) / _3106;
        float _3124 = _3123 + cbSceneParam._m0[79u].w;
        float _3125 = cbSceneParam._m0[79u].w - _3119;
        float _3131 = sqrt(((_3118 * _3118) + (_3119 * _3119)) + (_3121 * _3121));
        float _3134 = (1.0 - (cbSceneParam._m0[77u].w / _3106)) * _3131;
        float _3139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3303;
        if (abs((_3120 - _3123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3303 = ((((_3124 > 0.0) ? exp2(_3139 * _3124) : (2.0 - exp2(_3141 * _3124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3134;
        }
        else
        {
            float _3263 = 1.0 / cbSceneParam._m0[80u].x;
            float _3264 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : max(_3124, _3125));
            float _3265 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : min(_3124, _3125));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            _3303 = ((abs(_3131 / _3120) * cbSceneParam._m0[80u].y) * ((((_3274 - _3275) * 2.0) - ((exp2(_3139 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0)))) - exp2(_3139 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))))) * _3263)) - ((exp2(_3141 * _3274) - exp2(_3141 * _3275)) * _3263))) + (_3134 * cbSceneParam._m0[80u].z);
        }
        vec4 _3305 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3314 = exp2((_3303 * (-1.44269502162933349609375)) * (1.0 - _3305.w));
        float _3315 = log2(_3314);
        float _3331 = log2(_3051);
        _3143 = (exp2(_3331 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].x)) * _3305.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3145 = (exp2(_3331 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].y)) * _3305.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3147 = (exp2(_3331 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].z)) * _3305.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3149 = _3314 * _3051;
    }
    else
    {
        _3143 = _3048;
        _3145 = _3049;
        _3147 = _3050;
        _3149 = _3051;
    }
    float _3161 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3162 = _3161 == 3.0;
    float _3163 = log2(_3149);
    float _3167 = exp2(_3163 * cbSceneParam._m0[78u].x);
    float _3168 = exp2(_3163 * cbSceneParam._m0[78u].y);
    float _3169 = exp2(_3163 * cbSceneParam._m0[78u].z);
    float _3170 = _3167 * (isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0)));
    float _3171 = _3168 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)));
    float _3172 = _3169 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)));
    float _3181 = (_3161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3181 * (_3162 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.y = _3181 * (_3162 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3145)));
    SV_Target.z = _3181 * (_3162 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3147)));
    SV_Target.w = cbInstanceData._m0[_3023].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2986) * _3022) * _3167) * _3181;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2987) * _3022) * _3168) * _3181;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2988) * _3022) * _3169) * _3181;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
}


