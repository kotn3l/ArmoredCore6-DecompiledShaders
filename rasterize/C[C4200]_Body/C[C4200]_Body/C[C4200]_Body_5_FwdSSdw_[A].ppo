#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1639;
float _4076;
float _4077;
float _4078;
float _4079;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _292 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _305 = exp2(log2(_292.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _321 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _325 = _321.z;
    float _333 = exp2(log2(_325 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    vec4 _347 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _350 = _347.y;
    float _353 = (_347.x + (-0.02500000037252902984619140625)) * 8.0;
    float _357 = roundEven(5.0 - _353);
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(4.0) ? _358 : (isnan(_358) ? 4.0 : min(_358, 4.0));
    float _372 = floor(_359);
    vec4 _375 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _372));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[17u].x;
    _204[0u] = cbMtdParam._m0[17u].y;
    _205[0u] = cbMtdParam._m0[17u].z;
    _203[1u] = cbMtdParam._m0[15u].x;
    _204[1u] = cbMtdParam._m0[15u].y;
    _205[1u] = cbMtdParam._m0[15u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[13u].x;
    _204[3u] = cbMtdParam._m0[13u].y;
    _205[3u] = cbMtdParam._m0[13u].z;
    _203[4u] = cbMtdParam._m0[12u].x;
    _204[4u] = cbMtdParam._m0[12u].y;
    _205[4u] = cbMtdParam._m0[12u].z;
    _203[5u] = cbMtdParam._m0[18u].x;
    _204[5u] = cbMtdParam._m0[18u].y;
    _205[5u] = cbMtdParam._m0[18u].z;
    float _439 = roundEven(_353);
    float _440 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    uint _442 = uint(int(isnan(5.0) ? _440 : (isnan(_440) ? 5.0 : min(_440, 5.0))));
    vec4 _472 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _483 = cbMtdParam._m0[9u].x * _472.x;
    float _484 = cbMtdParam._m0[9u].y * _472.y;
    float _485 = cbMtdParam._m0[9u].z * _472.z;
    float _492 = ((((((_203[_442] - cbMtdParam._m0[10u].x) * _350) + cbMtdParam._m0[10u].x) * _375.x) - _483) * _335) + _483;
    float _493 = ((((((_204[_442] - cbMtdParam._m0[10u].y) * _350) + cbMtdParam._m0[10u].y) * _375.y) - _484) * _335) + _484;
    float _494 = ((((((_205[_442] - cbMtdParam._m0[10u].z) * _350) + cbMtdParam._m0[10u].z) * _375.z) - _485) * _335) + _485;
    float _500 = exp2(log2(_321.w) * cbMtdParam._m0[24u].w);
    vec4 _513 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _533 = (((cbMtdParam._m0[16u].x * _513.x) - _492) * _500) + _492;
    float _534 = (((cbMtdParam._m0[16u].y * _513.y) - _493) * _500) + _493;
    float _535 = (((cbMtdParam._m0[16u].z * _513.z) - _494) * _500) + _494;
    vec4 _547 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _572 = (_292.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _547.x) - _533) * _307) + _533);
    float _574 = (_292.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _547.y) - _534) * _307) + _534);
    float _576 = (_292.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _547.z) - _535) * _307) + _535);
    vec4 _588 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _607 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_272.x + 0.00999999977648258209228515625));
    float _609 = _607 * (cbMtdParam._m0[25u].z + 1.0);
    float _4128 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _617 = (_610 * ((cbMtdParam._m0[11u].x * _588.x) - _572)) + _572;
    float _618 = (((cbMtdParam._m0[11u].y * _588.y) - _574) * _610) + _574;
    float _619 = (((cbMtdParam._m0[11u].z * _588.z) - _576) * _610) + _576;
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[30u].z;
    _199[0u] = cbMtdParam._m0[30u].w;
    _198[1u] = cbMtdParam._m0[32u].z;
    _199[1u] = cbMtdParam._m0[32u].w;
    _198[2u] = cbMtdParam._m0[32u].x;
    _199[2u] = cbMtdParam._m0[32u].y;
    _198[3u] = cbMtdParam._m0[31u].z;
    _199[3u] = cbMtdParam._m0[31u].w;
    _198[4u] = cbMtdParam._m0[31u].x;
    _199[4u] = cbMtdParam._m0[31u].y;
    float _655 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    uint _657 = uint(int(isnan(4.0) ? _655 : (isnan(_655) ? 4.0 : min(_655, 4.0))));
    float _664 = ((_199[_657] - cbMtdParam._m0[23u].z) * _335) + cbMtdParam._m0[23u].z;
    float _667 = ((cbMtdParam._m0[23u].w - _664) * _500) + _664;
    float _670 = ((cbMtdParam._m0[26u].y - _667) * _307) + _667;
    float _675 = (cbMtdParam._m0[25u].y + 1.0) * _607;
    float _4149 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _678 = _670 - (_670 * _676);
    vec4 _691 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _372));
    vec4 _708 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _716 = cbMtdParam._m0[23u].x + _708.z;
    float _719 = (((_691.z + _198[_657]) - _716) * _335) + _716;
    vec4 _731 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _742 = (((_731.z - _719) + cbMtdParam._m0[30u].x) * _500) + _719;
    float _748 = ((((_325 * 2.0) * _742) - _742) * cbMtdParam._m0[25u].w) + _742;
    vec4 _760 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _771 = (((cbMtdParam._m0[24u].z + _760.z) - _748) * _307) + _748;
    vec4 _783 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _795 = ((_783.z - _771) * _676) + _771;
    float _808 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _831 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_808 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _808) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _835 = cbPerFrame._m0[22u].x * 2.0;
    float _836 = _835 * cbMtdParam._m0[28u].z;
    float _839 = (_831.x * 0.5) + (-0.25);
    float _842 = (_831.y * 0.5) + (-0.25);
    float _843 = _842 * cbMtdParam._m0[28u].y;
    float _845 = (-0.0) - (cbMtdParam._m0[28u].y * _839);
    float _847 = fract(_836);
    float _849 = fract(_836 + 0.5);
    float _860 = abs((_847 * 2.0) + (-1.0));
    vec4 _876 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_847 * _845) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_843 * _847) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _878 = _876.x;
    float _879 = _876.y;
    float _880 = _876.z;
    vec4 _881 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_849 * _845) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_843 * _849) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _892 = ((_881.x - _878) * _860) + _878;
    float _899 = exp2(log2(_892 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _900 = isnan(cbMtdParam._m0[29u].y) ? _899 : (isnan(_899) ? cbMtdParam._m0[29u].y : max(_899, cbMtdParam._m0[29u].y));
    float _901 = isnan(cbMtdParam._m0[29u].z) ? _900 : (isnan(_900) ? cbMtdParam._m0[29u].z : min(_900, cbMtdParam._m0[29u].z));
    float _925 = (cbMtdParam._m0[33u].x * _808) + TEXCOORD;
    float _926 = (cbMtdParam._m0[33u].y * _808) + TEXCOORD_1;
    float _929 = _835 * cbMtdParam._m0[27u].w;
    float _930 = _842 * cbMtdParam._m0[27u].z;
    float _932 = (-0.0) - (cbMtdParam._m0[27u].z * _839);
    float _933 = fract(_929);
    float _935 = fract(_929 + 0.5);
    float _946 = abs((_933 * 2.0) + (-1.0));
    vec4 _963 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_933 * _932) + _925) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_930 * _933) + _926) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _968 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_935 * _932) + _925) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_930 * _935) + _926) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1005 = ((_691.x - _710) * _335) + _710;
    float _1006 = ((_691.y - _711) * _335) + _711;
    float _1011 = ((_731.x - _1005) * _500) + _1005;
    float _1012 = ((_731.y - _1006) * _500) + _1006;
    float _1021 = ((((_760.x - _1011) * _307) + _1011) * 2.0) + (-1.0);
    float _1022 = ((((_760.y - _1012) * _307) + _1012) * 2.0) + (-1.0);
    float _1023 = dot(vec2(_1021, _1022), vec2(_1021, _1022));
    float _4170 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1028 = sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))));
    float _1037 = ((cbMtdParam._m0[26u].z * ((_321.x * 2.0) + (-1.0))) + _1021) + (((((_783.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _676);
    float _1038 = ((cbMtdParam._m0[26u].z * ((_321.y * 2.0) + (-1.0))) + _1022) + (((((_783.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _676);
    float _1040 = gl_FragCoord.x * 0.125;
    float _1042 = gl_FragCoord.y * 0.125;
    float _1052 = fma(_1028, _245 * NORMAL.x, fma(_1038, _252 * TANGENT.x, (_238 * _230) * _1037));
    float _1055 = fma(_1028, _245 * NORMAL.y, fma(_1038, _252 * TANGENT.y, (_238 * _231) * _1037));
    float _1058 = fma(_1028, _245 * NORMAL.z, fma(_1038, _252 * TANGENT.z, (_238 * _232) * _1037));
    float _1062 = inversesqrt(dot(vec3(_1052, _1055, _1058), vec3(_1052, _1055, _1058)));
    float _1063 = _1062 * _1052;
    float _1064 = _1062 * _1055;
    float _1065 = _1062 * _1058;
    float _4181 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _1066 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4203 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4214 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4225 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1070 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1040, _1042)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1090 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1140 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1130);
    float _1141 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1130);
    float _1142 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1130);
    float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
    float _1147 = _1140 * _1146;
    float _1148 = _1141 * _1146;
    float _1149 = _1142 * _1146;
    vec4 _1151 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1040, _1042));
    float _1153 = _1151.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1323 = sqrt(((_1140 * _1140) + (_1141 * _1141)) + (_1142 * _1142));
        float _1329 = (cbMatDynParam._m0[5u].x * _1323) + cbMatDynParam._m0[5u].y;
        float _4236 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1334 = (cbMatDynParam._m0[5u].z * _1323) + cbMatDynParam._m0[5u].w;
        float _4247 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) - _1330)) + _1330) < ((_1153 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1164 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1165 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1183 = fma(_1065, cbSceneParam._m0[5u].z, fma(_1064, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1063));
    float _1186 = fma(_1065, cbSceneParam._m0[6u].z, fma(_1064, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1063));
    float _1189 = fma(_1065, cbSceneParam._m0[7u].z, fma(_1064, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1063));
    uint _1202 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1203 = _1202 + 9u;
    uint _1204 = _1203 + uint(cbMatDynParam._m0[0u].w);
    float _1210 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_1204].x;
    float _1211 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1204].y;
    float _1212 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1204].z;
    float _4258 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _1216 = 1.0 - _1070;
    float _1217 = _1213 * _1216;
    float _1218 = _1214 * _1216;
    float _1219 = _1215 * _1216;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1070;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1070;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1070;
    float _1227 = _1224 + 0.039999999105930328369140625;
    float _1229 = _1225 + 0.039999999105930328369140625;
    float _1230 = _1226 + 0.039999999105930328369140625;
    vec4 _1239 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1164, cbSceneParam._m0[86u].y * _1165));
    float _1242 = _1239.x * TEXCOORD_3.w;
    float _1243 = dot(vec3(_1063, _1064, _1065), vec3(_1147, _1148, _1149));
    float _1246 = _1243 * 2.0;
    float _1250 = (_1246 * _1063) - _1147;
    float _1251 = (_1246 * _1064) - _1148;
    float _1252 = (_1246 * _1065) - _1149;
    float _1256 = abs(dot(vec3(_1147, _1148, _1149), vec3(_1063, _1064, _1065)));
    float _4291 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
    float _1258 = sqrt(_1066);
    float _1269 = exp2((_1258 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1258 * 3.0));
    float _1275 = (1.0 - _1269) * ((_1258 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1276 = _1269 * _1258;
    float _1304 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1308 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1312 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1638;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1365 = fma(_1312, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1304));
        float _1369 = fma(_1312, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1304));
        float _1373 = fma(_1312, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1304));
        float _1397 = _1304 + _1063;
        float _1398 = _1308 + _1064;
        float _1399 = _1312 + _1065;
        float _1409 = fma(_1399, cbModelParam._m0[26u].z, fma(_1398, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1397)) - _1365;
        float _1410 = fma(_1399, cbModelParam._m0[27u].z, fma(_1398, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1397)) - _1369;
        float _1411 = fma(_1399, cbModelParam._m0[28u].z, fma(_1398, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1397)) - _1373;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1427 = ((_1415 * _1409) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1365 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1415 * _1410) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1369 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1411) / cbModelParam._m0[34u].z) + ((((((_1373 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1466 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1432.x + (-0.5));
        float _1468 = _1466 * (_1432.y + (-0.5));
        float _1469 = _1466 * (_1432.z + (-0.5));
        float _1476 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1439.x + (-0.5));
        float _1478 = _1476 * (_1439.y + (-0.5));
        float _1479 = _1476 * (_1439.z + (-0.5));
        float _1486 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1446.x + (-0.5));
        float _1488 = _1486 * (_1446.y + (-0.5));
        float _1489 = _1486 * (_1446.z + (-0.5));
        float _1496 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1453.x + (-0.5));
        float _1498 = _1496 * (_1453.y + (-0.5));
        float _1499 = _1496 * (_1453.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1520 = (dot(vec3(_1063, _1064, _1065), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1530 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4339 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1532 + 1.0))) + _1537) * _1500;
        float _1547 = _1468 * 0.5;
        float _1548 = _1478 * 0.5;
        float _1549 = _1488 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_1063, _1064, _1065), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4372 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1574 + 1.0))) + _1579) * _1501;
        float _1589 = _1469 * 0.5;
        float _1590 = _1479 * 0.5;
        float _1591 = _1489 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_1063, _1064, _1065), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4405 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1616 + 1.0))) + _1621) * _1502;
        _1638 = _1469;
        _1640 = _1468;
        _1641 = _1467;
        _1642 = _1479;
        _1643 = _1478;
        _1644 = _1477;
        _1645 = _1489;
        _1646 = _1488;
        _1647 = _1487;
        _1648 = _1502;
        _1649 = _1501;
        _1650 = _1500;
        _1651 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1652 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1653 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
    }
    else
    {
        _1638 = _1639;
        _1640 = _1639;
        _1641 = _1639;
        _1642 = _1639;
        _1643 = _1639;
        _1644 = _1639;
        _1645 = _1639;
        _1646 = _1639;
        _1647 = _1639;
        _1648 = _1639;
        _1649 = _1639;
        _1650 = _1639;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1676 = fma(_1312, cbModelParam._m0[30u].z, fma(_1308, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304));
        float _1680 = fma(_1312, cbModelParam._m0[31u].z, fma(_1308, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304));
        float _1684 = fma(_1312, cbModelParam._m0[32u].z, fma(_1308, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304));
        float _1707 = _1304 + _1063;
        float _1708 = _1308 + _1064;
        float _1709 = _1312 + _1065;
        float _1719 = fma(_1709, cbModelParam._m0[30u].z, fma(_1708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1707)) - _1676;
        float _1720 = fma(_1709, cbModelParam._m0[31u].z, fma(_1708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1707)) - _1680;
        float _1721 = fma(_1709, cbModelParam._m0[32u].z, fma(_1708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1707)) - _1684;
        float _1725 = inversesqrt(dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721)));
        float _1738 = ((_1725 * _1719) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1676 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1739 = ((_1725 * _1720) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1680 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1740 = ((_1725 * _1721) / cbModelParam._m0[35u].z) + ((((((_1684 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1738, _1739, _1740), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1738, _1739, _1740), 0.0);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1738, _1739, _1740), 0.0);
        vec4 _1763 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1738, _1739, _1740), 0.0);
        float _1775 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1776 = _1775 * (_1742.x + (-0.5));
        float _1777 = _1775 * (_1742.y + (-0.5));
        float _1778 = _1775 * (_1742.z + (-0.5));
        float _1785 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1786 = _1785 * (_1749.x + (-0.5));
        float _1787 = _1785 * (_1749.y + (-0.5));
        float _1788 = _1785 * (_1749.z + (-0.5));
        float _1795 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1796 = _1795 * (_1756.x + (-0.5));
        float _1797 = _1795 * (_1756.y + (-0.5));
        float _1798 = _1795 * (_1756.z + (-0.5));
        float _1805 = exp2((_1763.w + (-0.5)) * 20.0) * 2.0;
        float _1806 = _1805 * (_1763.x + (-0.5));
        float _1807 = _1805 * (_1763.y + (-0.5));
        float _1808 = _1805 * (_1763.z + (-0.5));
        float _1809 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1810 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1811 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1812 = _1776 * 0.5;
        float _1813 = _1786 * 0.5;
        float _1814 = _1796 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_1063, _1064, _1065), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1809 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4468 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1839 + 1.0))) + _1844) * _1809;
        float _1854 = _1777 * 0.5;
        float _1855 = _1787 * 0.5;
        float _1856 = _1797 * 0.5;
        float _1857 = dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856));
        float _1862 = (_1857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1857);
        float _1870 = (dot(vec3(_1063, _1064, _1065), vec3(_1862 * _1854, _1862 * _1855, _1862 * _1856)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1879 = sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856)) / (_1810 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1881 = _1880 * 2.0;
        float _1885 = (1.0 - _1880) / (_1880 + 1.0);
        float _4501 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1895 = ((((1.0 - _1886) * (_1881 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1881 + 1.0))) + _1886) * _1810;
        float _1896 = _1778 * 0.5;
        float _1897 = _1788 * 0.5;
        float _1898 = _1798 * 0.5;
        float _1899 = dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898));
        float _1904 = (_1899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1899);
        float _1912 = (dot(vec3(_1063, _1064, _1065), vec3(_1904 * _1896, _1904 * _1897, _1904 * _1898)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1921 = sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898)) / (_1811 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1923 = _1922 * 2.0;
        float _1927 = (1.0 - _1922) / (_1922 + 1.0);
        float _4534 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1937 = ((((1.0 - _1928) * (_1923 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1923 + 1.0))) + _1928) * _1811;
        _1945 = _1778;
        _1946 = _1777;
        _1947 = _1776;
        _1948 = _1788;
        _1949 = _1787;
        _1950 = _1786;
        _1951 = _1798;
        _1952 = _1797;
        _1953 = _1796;
        _1954 = _1811;
        _1955 = _1810;
        _1956 = _1809;
        _1957 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
        _1958 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)));
        _1959 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)));
    }
    else
    {
        _1945 = _1639;
        _1946 = _1639;
        _1947 = _1639;
        _1948 = _1639;
        _1949 = _1639;
        _1950 = _1639;
        _1951 = _1639;
        _1952 = _1639;
        _1953 = _1639;
        _1954 = _1639;
        _1955 = _1639;
        _1956 = _1639;
        _1957 = 0.0;
        _1958 = 0.0;
        _1959 = 0.0;
    }
    float _1969 = (cbModelParam._m0[1u].x * (_1957 - _1651)) + _1651;
    float _1970 = (cbModelParam._m0[1u].x * (_1958 - _1652)) + _1652;
    float _1971 = (cbModelParam._m0[1u].x * (_1959 - _1653)) + _1653;
    float _1992 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1969 * cbSceneParam._m0[89u].x));
    float _1995 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1969 * cbSceneParam._m0[90u].x));
    float _1998 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1969));
    float _2013 = _1250 * 0.5;
    float _2014 = _1251 * 0.5;
    float _2015 = _1252 * 0.5;
    float _2016 = dot(vec4(_2013, _2014, _2015, 1.0), vec4(_1947, _1950, _1953, _1956));
    float _2019 = dot(vec4(_2013, _2014, _2015, 1.0), vec4(_1946, _1949, _1952, _1955));
    float _2022 = dot(vec4(_2013, _2014, _2015, 1.0), vec4(_1945, _1948, _1951, _1954));
    float _2056;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2029 = dot(vec4(_2013, _2014, _2015, 1.0), vec4(_1638, _1642, _1645, _1648));
        float _2033 = dot(vec4(_2013, _2014, _2015, 1.0), vec4(_1640, _1643, _1646, _1649));
        float _2037 = dot(vec4(_2013, _2014, _2015, 1.0), vec4(_1641, _1644, _1647, _1650));
        float _2044 = dot(vec4(cbModelParam._m0[39u]), vec4(_2013, _2014, _2015, 1.0));
        _2056 = dot(vec3(isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)), isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2044) ? 0.0 : (isnan(0.0) ? _2044 : max(0.0, _2044))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2056 = 1.0;
    }
    float _2067;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2058 = dot(vec4(cbModelParam._m0[40u]), vec4(_2013, _2014, _2015, 1.0));
        _2067 = dot(vec3(isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)), isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2058) ? 0.0 : (isnan(0.0) ? _2058 : max(0.0, _2058))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2067 = 1.0;
    }
    float _2071 = (_2067 * cbModelParam._m0[1u].x) + (_2056 * (1.0 - cbModelParam._m0[1u].x));
    float _2081 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1066);
    float _2082 = isnan(_2081) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2081 : min(cbModelParam._m0[25u].z, _2081));
    float _2162;
    float _2164;
    float _2166;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2129 = fma(_1312, cbModelParam._m0[13u].z, fma(_1308, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1304)) + cbModelParam._m0[13u].w;
        float _2133 = fma(_1312, cbModelParam._m0[14u].z, fma(_1308, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1304)) + cbModelParam._m0[14u].w;
        float _2137 = fma(_1312, cbModelParam._m0[15u].z, fma(_1308, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1304)) + cbModelParam._m0[15u].w;
        float _2140 = fma(_1252, cbModelParam._m0[13u].z, fma(_1251, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1250));
        float _2143 = fma(_1252, cbModelParam._m0[14u].z, fma(_1251, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1250));
        float _2146 = fma(_1252, cbModelParam._m0[15u].z, fma(_1251, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1250));
        float _2174;
        if (_2140 > 0.0)
        {
            _2174 = abs((1.0 - _2129) / _2140);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2129 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2174 = frontier_phi_19_17_ladder;
        }
        float _2397;
        if (_2143 > 0.0)
        {
            _2397 = abs((1.0 - _2133) / _2143);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2133 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2397 = frontier_phi_28_24_ladder;
        }
        float _2654;
        if (_2146 > 0.0)
        {
            _2654 = abs((1.0 - _2137) / _2146);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2137 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2654 = frontier_phi_40_35_ladder;
        }
        float _2656 = isnan(_2397) ? _2174 : (isnan(_2174) ? _2397 : min(_2174, _2397));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _2140) + _2129;
        float _2662 = (_2657 * _2143) + _2133;
        float _2663 = (_2657 * _2146) + _2137;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2664;
        float _2668 = _2664 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 > _2668) || ((_2662 < _2666) || ((_2661 < _2666) || (_2661 > _2668))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2663, cbModelParam._m0[9u].z, fma(_2662, cbModelParam._m0[9u].y, _2661 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2663, cbModelParam._m0[10u].z, fma(_2662, cbModelParam._m0[10u].y, _2661 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2663, cbModelParam._m0[11u].z, fma(_2662, cbModelParam._m0[11u].y, _2661 * cbModelParam._m0[11u].x))), _2082);
            frontier_phi_18_40_ladder = _2791.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2791.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2791.x * cbModelParam._m0[1u].y;
        }
        _2162 = frontier_phi_18_40_ladder_2;
        _2164 = frontier_phi_18_40_ladder_1;
        _2166 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2150 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1250, _1251, _1252), _2082);
        _2162 = _2150.x * cbModelParam._m0[1u].y;
        _2164 = _2150.y * cbModelParam._m0[1u].y;
        _2166 = _2150.z * cbModelParam._m0[1u].y;
    }
    float _2170 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1066);
    float _2171 = isnan(_2170) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2170 : min(cbModelParam._m0[25u].w, _2170));
    float _2260;
    float _2262;
    float _2264;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2224 = fma(_1312, cbModelParam._m0[21u].z, fma(_1308, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1304)) + cbModelParam._m0[21u].w;
        float _2228 = fma(_1312, cbModelParam._m0[22u].z, fma(_1308, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1304)) + cbModelParam._m0[22u].w;
        float _2232 = fma(_1312, cbModelParam._m0[23u].z, fma(_1308, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1304)) + cbModelParam._m0[23u].w;
        float _2235 = fma(_1252, cbModelParam._m0[21u].z, fma(_1251, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1250));
        float _2238 = fma(_1252, cbModelParam._m0[22u].z, fma(_1251, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1250));
        float _2241 = fma(_1252, cbModelParam._m0[23u].z, fma(_1251, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1250));
        float _2402;
        if (_2235 > 0.0)
        {
            _2402 = abs((1.0 - _2224) / _2235);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2224 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2402 = frontier_phi_30_26_ladder;
        }
        float _2681;
        if (_2238 > 0.0)
        {
            _2681 = abs((1.0 - _2228) / _2238);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2238 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2228 + 1.0) / _2238);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2681 = frontier_phi_42_37_ladder;
        }
        float _2894;
        if (_2241 > 0.0)
        {
            _2894 = abs((1.0 - _2232) / _2241);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2241 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2232 + 1.0) / _2241);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2894 = frontier_phi_51_48_ladder;
        }
        float _2896 = isnan(_2681) ? _2402 : (isnan(_2402) ? _2681 : min(_2402, _2681));
        float _2897 = isnan(_2894) ? _2896 : (isnan(_2896) ? _2894 : min(_2896, _2894));
        float _2901 = (_2897 * _2235) + _2224;
        float _2902 = (_2897 * _2238) + _2228;
        float _2903 = (_2897 * _2241) + _2232;
        float _2904 = _2897 * 9.9999997473787516355514526367188e-05;
        float _2905 = (-1.0) - _2904;
        float _2907 = _2904 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2903 > _2907) || ((_2903 < _2905) || ((_2902 > _2907) || ((_2902 < _2905) || ((_2901 < _2905) || (_2901 > _2907))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3131 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2903, cbModelParam._m0[17u].z, fma(_2902, cbModelParam._m0[17u].y, _2901 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2903, cbModelParam._m0[18u].z, fma(_2902, cbModelParam._m0[18u].y, _2901 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2903, cbModelParam._m0[19u].z, fma(_2902, cbModelParam._m0[19u].y, _2901 * cbModelParam._m0[19u].x))), _2171);
            frontier_phi_27_51_ladder = _3131.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3131.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3131.x * cbModelParam._m0[1u].z;
        }
        _2260 = frontier_phi_27_51_ladder_2;
        _2262 = frontier_phi_27_51_ladder_1;
        _2264 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2244 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1250, _1251, _1252), _2171);
        _2260 = _2244.x * cbModelParam._m0[1u].z;
        _2262 = _2244.y * cbModelParam._m0[1u].z;
        _2264 = _2244.z * cbModelParam._m0[1u].z;
    }
    float _2277 = (((_1275 * _1227) + _1276) * _1242) * ((cbModelParam._m0[1u].w * (_2260 - _2162)) + _2162);
    float _2279 = (((_1275 * _1229) + _1276) * _1242) * ((cbModelParam._m0[1u].w * (_2262 - _2164)) + _2164);
    float _2281 = (((_1275 * _1230) + _1276) * _1242) * ((cbModelParam._m0[1u].w * (_2264 - _2166)) + _2166);
    float _2284 = fma(_2281, cbSceneParam._m0[89u].z, fma(_2279, cbSceneParam._m0[89u].y, _2277 * cbSceneParam._m0[89u].x));
    float _2287 = fma(_2281, cbSceneParam._m0[90u].z, fma(_2279, cbSceneParam._m0[90u].y, _2277 * cbSceneParam._m0[90u].x));
    float _2290 = fma(_2281, cbSceneParam._m0[91u].z, fma(_2279, cbSceneParam._m0[91u].y, _2277 * cbSceneParam._m0[91u].x));
    vec4 _2298 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1164, _1165));
    float _2300 = _2298.w;
    float _2312 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2300);
    float _2313 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2300);
    float _2314 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2300);
    uvec4 _2318 = floatBitsToUint(cbInstanceData._m0[_1202 + 5u]);
    uint _2320 = _2318.x * 14u;
    uint _2321 = _2320 + 13u;
    float _2328 = _1242 + (-1.0);
    float _2333 = (cbLight._m0[_2321].x * _2328) + 1.0;
    float _2334 = (cbLight._m0[_2321].y * _2328) + 1.0;
    float _2335 = (cbLight._m0[_2321].z * _2328) + 1.0;
    float _2336 = (cbLight._m0[_2321].w * _2328) + 1.0;
    uint _2337 = _2320 + 5u;
    float _2343 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2347 = _2320 + 4u;
    float _2356 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2360 = _2320 | 1u;
    float _2371 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_1063, _1064, _1065));
    float _2374 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_1063, _1064, _1065));
    float _4670 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _4681 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2379 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2381 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2388 = ((cbLight._m0[_2337].x * _2343) * _2381) + (((cbLight._m0[_2347].x * _2312) * _2356) * _2379);
    float _2389 = ((_2343 * cbLight._m0[_2337].y) * _2381) + (((cbLight._m0[_2347].y * _2313) * _2356) * _2379);
    float _2390 = ((_2343 * cbLight._m0[_2337].z) * _2381) + (((cbLight._m0[_2347].z * _2314) * _2356) * _2379);
    uvec4 _2394 = floatBitsToUint(cbLight._m0[_2320 + 12u]);
    bool _2396 = _2394.x == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2396)
    {
        _2407 = _2388;
        _2409 = _2389;
        _2411 = _2390;
    }
    else
    {
        uint _2415 = _2320 + 6u;
        float _2431 = (dot(vec3(cbLight._m0[_2320 + 2u].xyz), vec3(_1063, _1064, _1065)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4692 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2434 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2407 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2388;
        _2409 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2389;
        _2411 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2390;
    }
    bool _2414 = _2394.y == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2414)
    {
        _2452 = _2407;
        _2454 = _2409;
        _2456 = _2411;
    }
    else
    {
        uint _2625 = _2320 + 7u;
        float _2641 = (dot(vec3(cbLight._m0[_2320 + 3u].xyz), vec3(_1063, _1064, _1065)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _4708 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2644 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2452 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2407;
        _2454 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2409;
        _2456 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2411;
    }
    uint _2459 = _2320 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _1066) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2320].x + _1147;
    float _2475 = cbLight._m0[_2320].y + _1148;
    float _2476 = cbLight._m0[_2320].z + _1149;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2320].xyz));
    float _4724 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _4735 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _2488 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2489 = dot(vec3(_1063, _1064, _1065), vec3(_2481, _2482, _2483));
    float _4746 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2481, _2482, _2483));
    float _4757 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2473 * _2473;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2510 = 0.959999978542327880859375 - _1224;
    float _2512 = 0.959999978542327880859375 - _1225;
    float _2513 = 0.959999978542327880859375 - _1226;
    float _2520 = 1.0 - _2473;
    float _2531 = (0.5 / (((_2488 * ((_2487 * _2520) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2520) + _2473) * _2487))) * _2487;
    float _4768 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    uint _2547 = _2320 + 9u;
    float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _1066) * 0.949999988079071044921875);
    float _2559 = _2558 * _2558;
    float _2560 = cbLight._m0[_2360].x + _1147;
    float _2561 = cbLight._m0[_2360].y + _1148;
    float _2562 = cbLight._m0[_2360].z + _1149;
    float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
    float _2567 = _2566 * _2560;
    float _2568 = _2566 * _2561;
    float _2569 = _2566 * _2562;
    float _2570 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2360].xyz));
    float _4779 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2574 = dot(vec3(_1063, _1064, _1065), vec3(_2567, _2568, _2569));
    float _4790 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2567, _2568, _2569));
    float _4801 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2559 * _2559;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
    float _2600 = 1.0 - _2559;
    float _2610 = (0.5 / (((_2488 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2600) + _2559) * _2573))) * _2573;
    float _4812 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2612 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    float _2622 = (((((_2593 * _2510) + _1227) * cbLight._m0[_2547].x) * _2612) * _2343) + ((((cbLight._m0[_2459].x * _2312) * ((_2509 * _2510) + _1227)) * _2533) * _2356);
    float _2623 = (((((_2593 * _2512) + _1229) * cbLight._m0[_2547].y) * _2612) * _2343) + ((((cbLight._m0[_2459].y * _2313) * ((_2509 * _2512) + _1229)) * _2533) * _2356);
    float _2624 = (((((_2593 * _2513) + _1230) * cbLight._m0[_2547].z) * _2612) * _2343) + ((((cbLight._m0[_2459].z * _2314) * ((_2509 * _2513) + _1230)) * _2533) * _2356);
    float _2686;
    float _2688;
    float _2690;
    if (_2396)
    {
        _2686 = _2622;
        _2688 = _2623;
        _2690 = _2624;
    }
    else
    {
        uint _2692 = _2320 + 2u;
        uint _2696 = _2320 + 10u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _1066) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _1147;
        float _2713 = cbLight._m0[_2692].y + _1148;
        float _2714 = cbLight._m0[_2692].z + _1149;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2692].xyz));
        float _4823 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2726 = dot(vec3(_1063, _1064, _1065), vec3(_2719, _2720, _2721));
        float _4834 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4845 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2752 = 1.0 - _2711;
        float _2762 = (0.5 / (((_2488 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2752) + _2711) * _2725))) * _2725;
        float _4856 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2686 = (((((_2745 * _2510) + _1227) * cbLight._m0[_2696].x) * _2764) * _2765) + _2622;
        _2688 = (((((_2745 * _2512) + _1229) * cbLight._m0[_2696].y) * _2764) * _2765) + _2623;
        _2690 = (((((_2745 * _2513) + _1230) * cbLight._m0[_2696].z) * _2764) * _2765) + _2624;
    }
    float _2800;
    float _2802;
    float _2804;
    if (_2414)
    {
        _2800 = _2686;
        _2802 = _2688;
        _2804 = _2690;
    }
    else
    {
        uint _2811 = _2320 + 3u;
        uint _2815 = _2320 + 11u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _1066) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _1147;
        float _2832 = cbLight._m0[_2811].y + _1148;
        float _2833 = cbLight._m0[_2811].z + _1149;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2811].xyz));
        float _4872 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2845 = dot(vec3(_1063, _1064, _1065), vec3(_2838, _2839, _2840));
        float _4883 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4894 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2488 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2871) + _2830) * _2844))) * _2844;
        float _4905 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2800 = (((((_2864 * _2510) + _1227) * cbLight._m0[_2815].x) * _2883) * _2884) + _2686;
        _2802 = (((((_2864 * _2512) + _1229) * cbLight._m0[_2815].y) * _2883) * _2884) + _2688;
        _2804 = (((((_2864 * _2513) + _1230) * cbLight._m0[_2815].z) * _2883) * _2884) + _2690;
    }
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_2318.y == 0u)
    {
        float _2959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2959;
        float _2961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2959;
        float _2962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2959;
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.x;
        uint _2986 = uint((float(_2974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1165) / _2975))) + floor(float(uint(cbSceneParam._m0[85u].x * _1164) / _2975)));
        float _2996 = (log2(_2962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2997 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        uint _3000 = uint(isnan(14.0) ? _2997 : (isnan(_2997) ? 14.0 : min(_2997, 14.0)));
        uvec4 _3005 = texelFetch(g_lightClusterGridBuffer, int(((_3000 << 2u) + (_2986 << 6u)) >> 2u));
        uint _3006 = _3005.x;
        uint _3007 = _2974.z;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((((1u << ((_3007 >> 4u) & 15u)) + 4294967295u) & _3006) == 0u) || ((_3007 & 240u) == 0u))
        {
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
        }
        else
        {
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            uint _3303 = 0u;
            uint _3312;
            bool _3313;
            for (;;)
            {
                _3312 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                _3313 = _3312 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3313)
                {
                    frontier_phi_68_pred = _3297;
                    frontier_phi_68_pred_1 = _3302;
                    frontier_phi_68_pred_2 = _3301;
                    frontier_phi_68_pred_3 = _3300;
                    frontier_phi_68_pred_4 = _3299;
                    frontier_phi_68_pred_5 = _3298;
                }
                else
                {
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    uint _3448;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3302;
                    _3448 = _3312;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    for (;;)
                    {
                        uint _3452 = uint(findLSB(_3448)) + (_3303 << 5u);
                        uint _3449 = (_3448 + 4294967295u) & _3448;
                        uint _3454 = _3452 * 48u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3474 = (_3452 * 48u) + 4u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3493 = (_3452 * 48u) + 8u;
                        vec3 _3504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x));
                        float _3508 = _3468.x - _2960;
                        float _3509 = _3468.y - _2961;
                        float _3510 = _3468.z - _2962;
                        float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                        float _3514 = inversesqrt(_3511);
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3518 = dot(vec3(_1183, _1186, _1189), vec3(_3515, _3516, _3517));
                        float _3523 = 1.0 - (_3511 * _3468.w);
                        float _4931 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3524 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3525 = sqrt(_3511) * _3487.w;
                        float _3528 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3518) + _3529;
                        float _3535 = _3525 * _3525;
                        float _3539 = ((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3524) / ((_3535 * 0.699999988079071044921875) + 1.0);
                        float _3543 = (-0.0) - _2960;
                        float _3544 = (-0.0) - _2961;
                        float _3545 = (-0.0) - _2962;
                        float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3560 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                        float _3561 = 1.0 - _1258;
                        float _3568 = sqrt(1.0 - ((1.0 - (_3561 * _3561)) * (1.0 - (_3560 * _3560))));
                        float _3569 = _3568 * _3568;
                        float _3570 = _3569 * _3569;
                        float _3571 = _3550 + _3515;
                        float _3572 = _3551 + _3516;
                        float _3573 = _3552 + _3517;
                        float _3577 = inversesqrt(dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573)));
                        float _3581 = dot(vec3(_1183, _1186, _1189), vec3(_3550, _3551, _3552));
                        float _4947 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3584 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3585 = dot(vec3(_1183, _1186, _1189), vec3(_3577 * _3571, _3577 * _3572, _3577 * _3573));
                        float _4958 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3588 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3592 = ((_3588 * _3588) * (_3570 + (-1.0))) + 1.0;
                        float _3593 = _3528 * _3569;
                        float _3594 = _3593 * _3593;
                        float _3597 = ((1.0 - _3594) * _3518) + _3594;
                        float _4969 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3598 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3599 = 1.0 - _3569;
                        float _3609 = (0.5 / (((_3598 * ((_3584 * _3599) + _3569)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3569) * _3584))) * _3598;
                        float _4980 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3620 = (((_3570 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3592 * _3592) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125))) * _3524;
                        _3372 = (_3539 * _3487.x) + _3445;
                        _3373 = (_3539 * _3487.y) + _3446;
                        _3374 = (_3539 * _3487.z) + _3447;
                        _3369 = (_3620 * _3504.x) + _3442;
                        _3370 = (_3620 * _3504.y) + _3443;
                        _3371 = (_3620 * _3504.z) + _3444;
                        if (_3449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3374;
                            _3448 = _3449;
                        }
                    }
                    frontier_phi_68_pred = _3369;
                    frontier_phi_68_pred_1 = _3374;
                    frontier_phi_68_pred_2 = _3373;
                    frontier_phi_68_pred_3 = _3372;
                    frontier_phi_68_pred_4 = _3371;
                    frontier_phi_68_pred_5 = _3370;
                }
                _3137 = frontier_phi_68_pred;
                _3147 = frontier_phi_68_pred_1;
                _3145 = frontier_phi_68_pred_2;
                _3143 = frontier_phi_68_pred_3;
                _3141 = frontier_phi_68_pred_4;
                _3139 = frontier_phi_68_pred_5;
                uint _3304 = _3303 + 1u;
                if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3297 = _3137;
                    _3298 = _3139;
                    _3299 = _3141;
                    _3300 = _3143;
                    _3301 = _3145;
                    _3302 = _3147;
                    _3303 = _3304;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
        }
        uvec4 _3150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3151 = _3150.z;
        uint _3153 = (_3151 >> 8u) & 15u;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        if (((4294967295u << _3153) & _3006) == 0u)
        {
            _3265 = _3136;
            _3267 = _3138;
            _3269 = _3140;
            _3271 = _3142;
            _3273 = _3144;
            _3275 = _3146;
        }
        else
        {
            float _3290 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
            float _3291 = _3290 * _2960;
            float _3292 = _3290 * _2961;
            float _3293 = _3290 * _2962;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3153 < ((_3151 >> 12u) & 15u))
            {
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3425 = _3136;
                float _3426 = _3138;
                float _3427 = _3140;
                float _3428 = _3142;
                float _3429 = _3144;
                float _3430 = _3146;
                uint _3431 = _3153;
                uint _3440;
                bool _3441;
                for (;;)
                {
                    _3440 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3431 << 2u)) >> 2u)).x;
                    _3441 = _3440 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3441)
                    {
                        frontier_phi_79_pred = _3430;
                        frontier_phi_79_pred_1 = _3429;
                        frontier_phi_79_pred_2 = _3428;
                        frontier_phi_79_pred_3 = _3427;
                        frontier_phi_79_pred_4 = _3426;
                        frontier_phi_79_pred_5 = _3425;
                    }
                    else
                    {
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3647 = _3425;
                        float _3648 = _3426;
                        float _3649 = _3427;
                        float _3650 = _3428;
                        float _3651 = _3429;
                        float _3652 = _3430;
                        uint _3653 = _3440;
                        uint _3654;
                        vec4 _3679;
                        float _3680;
                        vec4 _3695;
                        vec3 _3707;
                        vec4 _3722;
                        vec4 _3737;
                        float _3783;
                        bool _3784;
                        for (;;)
                        {
                            uint _3664 = ((_3431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3653));
                            _3654 = (_3653 + 4294967295u) & _3653;
                            uint _3666 = _3664 * 40u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3680 = _3679.w;
                            uint _3682 = (_3664 * 40u) + 4u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3697 = (_3664 * 40u) + 8u;
                            _3707 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x));
                            uint _3709 = (_3664 * 40u) + 16u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3664 * 40u) + 20u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3739 = (_3664 * 40u) + 24u;
                            vec4 _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3758 = (_3664 * 40u) + 28u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            _3783 = fma(_2962, _3771.z, fma(_2961, _3771.y, _3771.x * _2960)) + _3771.w;
                            _3784 = !((fma(_2962, _3752.z, fma(_2961, _3752.y, _3752.x * _2960)) + _3752.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3784)
                            {
                                float _3811 = _3679.x - _2960;
                                float _3812 = _3679.y - _2961;
                                float _3813 = _3679.z - _2962;
                                float _3814 = dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813));
                                float _3817 = inversesqrt(_3814);
                                float _3818 = _3817 * _3811;
                                float _3819 = _3817 * _3812;
                                float _3820 = _3817 * _3813;
                                float _3824 = 1.0 - (_3814 / (_3680 * _3680));
                                float _4991 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3829 = sqrt(_3814) * _3695.w;
                                float _3831 = 1.39999997615814208984375 / (_3829 + 1.39999997615814208984375);
                                float _3832 = _3831 * _3831;
                                float _3835 = ((1.0 - _3832) * dot(vec3(_3818, _3819, _3820), vec3(_1183, _1186, _1189))) + _3832;
                                float _3838 = _3829 * _3829;
                                float _3842 = (fma(_2962, _3722.z, fma(_2961, _3722.y, _3722.x * _2960)) + _3722.w) / _3783;
                                float _3843 = (fma(_2962, _3737.z, fma(_2961, _3737.y, _3737.x * _2960)) + _3737.w) / _3783;
                                float _3847 = 1.0 - dot(vec2(_3842, _3843), vec2(_3842, _3843));
                                float _5007 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3849 = _3848 * (((isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0))) * _3825) / ((_3838 * 0.699999988079071044921875) + 1.0));
                                float _3861 = exp2(log2(1.0 / ((_3838 * 3.5) + 5.0)) * 0.25);
                                float _3862 = 1.0 - _1258;
                                float _3869 = sqrt(1.0 - ((1.0 - (_3862 * _3862)) * (1.0 - (_3861 * _3861))));
                                float _3870 = _3869 * _3869;
                                float _3871 = _3870 * _3870;
                                float _3872 = _3818 - _3291;
                                float _3873 = _3819 - _3292;
                                float _3874 = _3820 - _3293;
                                float _3878 = inversesqrt(dot(vec3(_3872, _3873, _3874), vec3(_3872, _3873, _3874)));
                                float _3882 = dot(vec3(_1183, _1186, _1189), vec3((-0.0) - _3291, (-0.0) - _3292, (-0.0) - _3293));
                                float _5018 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3885 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3886 = dot(vec3(_1183, _1186, _1189), vec3(_3878 * _3872, _3878 * _3873, _3878 * _3874));
                                float _5029 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3893 = ((_3889 * _3889) * (_3871 + (-1.0))) + 1.0;
                                float _3894 = _3831 * _3870;
                                float _3895 = _3894 * _3894;
                                float _3901 = ((1.0 - _3895) * dot(vec3(_1183, _1186, _1189), vec3(_3818, _3819, _3820))) + _3895;
                                float _5040 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3902 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3903 = 1.0 - _3870;
                                float _3913 = (0.5 / (((_3902 * ((_3885 * _3903) + _3870)) + 9.9999999392252902907785028219223e-09) + (((_3902 * _3903) + _3870) * _3885))) * _3902;
                                float _5051 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3923 = (_3848 * _3825) * (((_3871 * 3.1415927410125732421875) * (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) / ((_3893 * _3893) * ((_3838 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3849 * _3695.y;
                                frontier_phi_85_pred_1 = _3849 * _3695.x;
                                frontier_phi_85_pred_2 = _3923 * _3707.z;
                                frontier_phi_85_pred_3 = _3923 * _3707.y;
                                frontier_phi_85_pred_4 = _3923 * _3707.x;
                                frontier_phi_85_pred_5 = _3849 * _3695.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3931 = frontier_phi_85_pred;
                            _3930 = frontier_phi_85_pred_1;
                            _3929 = frontier_phi_85_pred_2;
                            _3928 = frontier_phi_85_pred_3;
                            _3927 = frontier_phi_85_pred_4;
                            _3932 = frontier_phi_85_pred_5;
                            _3637 = _3930 + _3650;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            if (_3654 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3654;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3639;
                        frontier_phi_79_pred_1 = _3638;
                        frontier_phi_79_pred_2 = _3637;
                        frontier_phi_79_pred_3 = _3636;
                        frontier_phi_79_pred_4 = _3635;
                        frontier_phi_79_pred_5 = _3634;
                    }
                    _3276 = frontier_phi_79_pred;
                    _3274 = frontier_phi_79_pred_1;
                    _3272 = frontier_phi_79_pred_2;
                    _3270 = frontier_phi_79_pred_3;
                    _3268 = frontier_phi_79_pred_4;
                    _3266 = frontier_phi_79_pred_5;
                    uint _3432 = _3431 + 1u;
                    if (_3432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3425 = _3266;
                        _3426 = _3268;
                        _3427 = _3270;
                        _3428 = _3272;
                        _3429 = _3274;
                        _3430 = _3276;
                        _3431 = _3432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3270;
                frontier_phi_60_61_ladder_1 = _3276;
                frontier_phi_60_61_ladder_2 = _3274;
                frontier_phi_60_61_ladder_3 = _3272;
                frontier_phi_60_61_ladder_4 = _3268;
                frontier_phi_60_61_ladder_5 = _3266;
            }
            else
            {
                frontier_phi_60_61_ladder = _3140;
                frontier_phi_60_61_ladder_1 = _3146;
                frontier_phi_60_61_ladder_2 = _3144;
                frontier_phi_60_61_ladder_3 = _3142;
                frontier_phi_60_61_ladder_4 = _3138;
                frontier_phi_60_61_ladder_5 = _3136;
            }
            _3265 = frontier_phi_60_61_ladder_5;
            _3267 = frontier_phi_60_61_ladder_4;
            _3269 = frontier_phi_60_61_ladder;
            _3271 = frontier_phi_60_61_ladder_3;
            _3273 = frontier_phi_60_61_ladder_2;
            _3275 = frontier_phi_60_61_ladder_1;
        }
        float _3280 = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
        _3019 = (_3280 * _3271) + _2452;
        _3021 = (_3280 * _3273) + _2454;
        _3023 = (_3280 * _3275) + _2456;
        _3025 = ((_3265 * _1227) * _3280) + _2800;
        _3027 = ((_3267 * _1229) * _3280) + _2802;
        _3029 = ((_3269 * _1230) * _3280) + _2804;
    }
    else
    {
        _3019 = _2452;
        _3021 = _2454;
        _3023 = _2456;
        _3025 = _2800;
        _3027 = _2802;
        _3029 = _2804;
    }
    uint _3035 = _1203 + uint(cbMatDynParam._m0[0u].w);
    float _3041 = ((((((_968.x - _963.x) * _946) + _963.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _892) * cbMtdParam._m0[20u].x)) * _901) * cbInstanceData._m0[_3035].x;
    float _3042 = ((((((_968.y - _963.y) * _946) + _963.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_881.y - _879) * _860) + _879)) * cbMtdParam._m0[20u].y)) * _901) * cbInstanceData._m0[_3035].y;
    float _3043 = ((((((_968.z - _963.z) * _946) + _963.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_881.z - _880) * _860) + _880)) * cbMtdParam._m0[20u].z)) * _901) * cbInstanceData._m0[_3035].z;
    float _5067 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _5078 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _5089 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _3060 = (((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3019 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1242))) + ((_3025 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2071)) * cbPerFrame._m0[3u].x)) + _3041;
    float _3062 = (_3042 + ((_3027 + ((isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))) * _2071)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3021 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1242)));
    float _3064 = (_3043 + ((_3029 + ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _2071)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3023 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1242)));
    float _3065 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
    float _3066 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
    float _3067 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
    float _3073 = cbMtdParam._m0[2u].x * _3041;
    float _3074 = cbMtdParam._m0[2u].y * _3042;
    float _3075 = cbMtdParam._m0[2u].z * _3043;
    float _5115 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3077 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
    uint _3078 = _1202 + 6u;
    float _3086 = _1164 / cbSceneParam._m0[86u].x;
    float _3087 = _1165 / cbSceneParam._m0[86u].y;
    vec4 _3101 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3086, _3087, (log2((isnan(cbSceneParam._m0[77u].w) ? _1090 : (isnan(_1090) ? cbSceneParam._m0[77u].w : min(_1090, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3103 = _3101.x;
    float _3104 = _3101.y;
    float _3105 = _3101.z;
    float _3106 = _3101.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_1090 > cbSceneParam._m0[78u].w)
    {
        float _3161 = isnan(_1090) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1090 : min(cbSceneParam._m0[80u].w, _1090));
        float _3162 = _3161 / _1090;
        float _3173 = _3162 * _1140;
        float _3174 = _1141 * _3162;
        float _3175 = (-0.0) - _3174;
        float _3176 = _3162 * _1142;
        float _3178 = (cbSceneParam._m0[77u].w * _3175) / _3161;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3174;
        float _3186 = sqrt(((_3173 * _3173) + (_3174 * _3174)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3161)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3382;
        if (abs((_3175 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3382 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3326 = 1.0 / cbSceneParam._m0[80u].x;
            float _3327 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3328 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3337 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : min(_3327, 0.0));
            float _3338 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : min(_3328, 0.0));
            _3382 = ((abs(_3186 / _3175) * cbSceneParam._m0[80u].y) * ((((_3337 - _3338) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))))) * _3326)) - ((exp2(_3196 * _3337) - exp2(_3196 * _3338)) * _3326))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3086, _3087, 1.0), 0.0);
        float _3393 = exp2((_3382 * (-1.44269502162933349609375)) * (1.0 - _3384.w));
        float _3394 = log2(_3393);
        float _3410 = log2(_3106);
        _3198 = (exp2(_3410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].x)) * _3384.x) / cbSceneParam._m0[78u].x)) + _3103;
        _3200 = (exp2(_3410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].y)) * _3384.y) / cbSceneParam._m0[78u].y)) + _3104;
        _3202 = (exp2(_3410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].z)) * _3384.z) / cbSceneParam._m0[78u].z)) + _3105;
        _3204 = _3393 * _3106;
    }
    else
    {
        _3198 = _3103;
        _3200 = _3104;
        _3202 = _3105;
        _3204 = _3106;
    }
    bool _3420;
    vec4 _3214;
    vec4 _3236;
    float _3238;
    float _3242;
    float _3243;
    float _3244;
    float _3247;
    float _3250;
    float _3253;
    float _3254;
    bool _3264;
    for (;;)
    {
        _3214 = cbMatDynParam._m0[0u];
        float _3216 = roundEven(_3214.y);
        bool _3217 = _3216 == 3.0;
        float _3218 = log2(_3204);
        float _3222 = exp2(_3218 * cbSceneParam._m0[78u].x);
        float _3223 = exp2(_3218 * cbSceneParam._m0[78u].y);
        float _3224 = exp2(_3218 * cbSceneParam._m0[78u].z);
        float _3225 = _3222 * _3065;
        float _3226 = _3223 * _3066;
        float _3227 = _3224 * _3067;
        float _3234 = _1153 + (-0.5);
        _3236 = cbMtdParam._m0[1u];
        _3238 = _3236.y * _3234;
        float _3241 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3242 = _3241 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
        _3243 = _3241 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
        _3244 = _3241 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
        _3247 = ((_3073 * _3077) * _3222) * _3241;
        _3250 = ((_3074 * _3077) * _3223) * _3241;
        _3253 = ((_3075 * _3077) * _3224) * _3241;
        _3254 = _3234 * 0.999000012874603271484375;
        _3264 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3264)
        {
            if ((cbInstanceData._m0[_1202 + 7u].x + _3254) < 0.5)
            {
                _3420 = true;
                break;
            }
        }
        uint _3361 = _1203 + uint(_3214.w);
        if ((cbInstanceData._m0[_3361].w < 1.0) && ((cbInstanceData._m0[_3361].w + _3254) < 0.5))
        {
            _3420 = true;
            break;
        }
        if ((_3238 + 1.0) < _3236.x)
        {
            _3420 = true;
            break;
        }
        _3420 = false;
        break;
    }
    float _3625;
    if (_3420)
    {
        discard_state = true;
        _3625 = 0.0;
    }
    else
    {
        _3625 = cbInstanceData._m0[_3078].w;
    }
    SV_Target.x = _3242;
    SV_Target.y = _3243;
    SV_Target.z = _3244;
    SV_Target.w = _3625;
    SV_Target_1.x = _3247;
    SV_Target_1.y = _3250;
    SV_Target_1.z = _3253;
    SV_Target_1.w = cbInstanceData._m0[_3078].w;
    discard_exit();
}


