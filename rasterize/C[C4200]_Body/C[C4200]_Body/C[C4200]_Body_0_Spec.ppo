#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 10) uniform texture2D C_C4200_Body_snp_0_Texture2D_22;
layout(set = 0, binding = 11) uniform texture2D C_C4200_Body_snp_0_Texture2D_23;
layout(set = 0, binding = 12) uniform texture2D C_C4200_Body_snp_0_Texture2D_24;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;

float _668;
uint _2118;
uint _2119;
uint _2120;
uint _2382;
uint _2383;
uint _2384;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _169 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _170 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _171 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _177 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _184 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _209 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _221 = cbMtdParam._m0[22u].x * _209.x;
    float _222 = cbMtdParam._m0[22u].y * _209.y;
    float _223 = cbMtdParam._m0[22u].z * _209.z;
    vec4 _236 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _238 = _236.x;
    float _242 = _221 - (_238 * _221);
    float _243 = _222 - (_238 * _222);
    float _244 = _223 - (_238 * _223);
    vec4 _261 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _2628 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _2628 : (isnan(_2628) ? 1.0 : min(_2628, 1.0))));
    float _279 = _261.z * cbMtdParam._m0[29u].w;
    float _285 = fma(_278, _184 * NORMAL.x, fma(_271, _191 * TANGENT.x, (_177 * _169) * _269));
    float _288 = fma(_278, _184 * NORMAL.y, fma(_271, _191 * TANGENT.y, (_177 * _170) * _269));
    float _291 = fma(_278, _184 * NORMAL.z, fma(_271, _191 * TANGENT.z, (_177 * _171) * _269));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _2639 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _299 = isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0));
    float _2650 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _300 = isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0));
    float _2661 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _301 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
    float _2672 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _302 = isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _410 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _413 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    vec4 _422 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _425 = _422.x * TEXCOORD_3.w;
    float _426 = dot(vec3(_296, _297, _298), vec3(_377, _378, _379));
    float _429 = _426 * 2.0;
    float _433 = (_429 * _296) - _377;
    float _434 = (_429 * _297) - _378;
    float _435 = (_429 * _298) - _379;
    float _439 = abs(dot(vec3(_377, _378, _379), vec3(_296, _297, _298)));
    float _2683 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _2683 : (isnan(_2683) ? 1.0 : min(_2683, 1.0));
    float _446 = sqrt(_302);
    float _458 = exp2((_446 * 5.0) * log2(1.0 - (_440 * 0.999000012874603271484375))) / (4.0 - (_446 * 3.0));
    float _464 = (1.0 - _458) * ((_446 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _465 = _458 * _446;
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _667;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    float _676;
    float _677;
    float _678;
    float _679;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _528 = fma(_501, cbModelParam._m0[26u].z, fma(_497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _493));
        float _532 = fma(_501, cbModelParam._m0[27u].z, fma(_497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _493));
        float _536 = fma(_501, cbModelParam._m0[28u].z, fma(_497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _493));
        float _561 = _493 + _296;
        float _562 = _497 + _297;
        float _563 = _501 + _298;
        float _573 = fma(_563, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561)) - _528;
        float _574 = fma(_563, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561)) - _532;
        float _575 = fma(_563, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561)) - _536;
        float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
        float _591 = ((_579 * _573) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_528 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _592 = ((_579 * _574) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_532 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_579 * _575) / cbModelParam._m0[34u].z) + ((((((_536 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        float _630 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _640 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _650 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _660 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_617.x + (-0.5));
        float _662 = _660 * (_617.y + (-0.5));
        float _663 = _660 * (_617.z + (-0.5));
        _667 = _630 * (_596.z + (-0.5));
        _669 = _630 * (_596.y + (-0.5));
        _670 = _630 * (_596.x + (-0.5));
        _671 = _640 * (_603.z + (-0.5));
        _672 = _640 * (_603.y + (-0.5));
        _673 = _640 * (_603.x + (-0.5));
        _674 = _650 * (_610.z + (-0.5));
        _675 = _650 * (_610.y + (-0.5));
        _676 = _650 * (_610.x + (-0.5));
        _677 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        _678 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        _679 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    }
    else
    {
        _667 = _668;
        _669 = _668;
        _670 = _668;
        _671 = _668;
        _672 = _668;
        _673 = _668;
        _674 = _668;
        _675 = _668;
        _676 = _668;
        _677 = _668;
        _678 = _668;
        _679 = _668;
    }
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _705 = fma(_501, cbModelParam._m0[30u].z, fma(_497, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _493));
        float _709 = fma(_501, cbModelParam._m0[31u].z, fma(_497, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _493));
        float _713 = fma(_501, cbModelParam._m0[32u].z, fma(_497, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _493));
        float _736 = _493 + _296;
        float _737 = _497 + _297;
        float _738 = _501 + _298;
        float _748 = fma(_738, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736)) - _705;
        float _749 = fma(_738, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736)) - _709;
        float _750 = fma(_738, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736)) - _713;
        float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
        float _767 = ((_754 * _748) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_705 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_754 * _749) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_709 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_754 * _750) / cbModelParam._m0[35u].z) + ((((((_713 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _804 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _814 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _824 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _834 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_792.x + (-0.5));
        float _836 = _834 * (_792.y + (-0.5));
        float _837 = _834 * (_792.z + (-0.5));
        _841 = _804 * (_771.z + (-0.5));
        _842 = _804 * (_771.y + (-0.5));
        _843 = _804 * (_771.x + (-0.5));
        _844 = _814 * (_778.z + (-0.5));
        _845 = _814 * (_778.y + (-0.5));
        _846 = _814 * (_778.x + (-0.5));
        _847 = _824 * (_785.z + (-0.5));
        _848 = _824 * (_785.y + (-0.5));
        _849 = _824 * (_785.x + (-0.5));
        _850 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        _851 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        _852 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    }
    else
    {
        _841 = _668;
        _842 = _668;
        _843 = _668;
        _844 = _668;
        _845 = _668;
        _846 = _668;
        _847 = _668;
        _848 = _668;
        _849 = _668;
        _850 = _668;
        _851 = _668;
        _852 = _668;
    }
    float _867 = _433 * 0.5;
    float _868 = _434 * 0.5;
    float _869 = _435 * 0.5;
    float _870 = dot(vec4(_867, _868, _869, 1.0), vec4(_843, _846, _849, _852));
    float _873 = dot(vec4(_867, _868, _869, 1.0), vec4(_842, _845, _848, _851));
    float _876 = dot(vec4(_867, _868, _869, 1.0), vec4(_841, _844, _847, _850));
    float _911;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _883 = dot(vec4(_867, _868, _869, 1.0), vec4(_667, _671, _674, _677));
        float _887 = dot(vec4(_867, _868, _869, 1.0), vec4(_669, _672, _675, _678));
        float _891 = dot(vec4(_867, _868, _869, 1.0), vec4(_670, _673, _676, _679));
        float _898 = dot(vec4(cbModelParam._m0[39u]), vec4(_867, _868, _869, 1.0));
        _911 = dot(vec3(isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)), isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)), isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_898) ? 0.0 : (isnan(0.0) ? _898 : max(0.0, _898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _911 = 1.0;
    }
    float _922;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _913 = dot(vec4(cbModelParam._m0[40u]), vec4(_867, _868, _869, 1.0));
        _922 = dot(vec3(isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)), isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)), isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_913) ? 0.0 : (isnan(0.0) ? _913 : max(0.0, _913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _922 = 1.0;
    }
    float _926 = (_922 * cbModelParam._m0[1u].x) + (_911 * (1.0 - cbModelParam._m0[1u].x));
    float _933 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _302);
    float _934 = isnan(_933) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _933 : min(cbModelParam._m0[25u].z, _933));
    float _1017;
    float _1019;
    float _1021;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _984 = fma(_501, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493)) + cbModelParam._m0[13u].w;
        float _988 = fma(_501, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493)) + cbModelParam._m0[14u].w;
        float _992 = fma(_501, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493)) + cbModelParam._m0[15u].w;
        float _995 = fma(_435, cbModelParam._m0[13u].z, fma(_434, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433));
        float _998 = fma(_435, cbModelParam._m0[14u].z, fma(_434, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433));
        float _1001 = fma(_435, cbModelParam._m0[15u].z, fma(_434, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433));
        float _1029;
        if (_995 > 0.0)
        {
            _1029 = abs((1.0 - _984) / _995);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_995 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_984 + 1.0) / _995);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1029 = frontier_phi_14_12_ladder;
        }
        float _1375;
        if (_998 > 0.0)
        {
            _1375 = abs((1.0 - _988) / _998);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_998 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_988 + 1.0) / _998);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1375 = frontier_phi_23_19_ladder;
        }
        float _1581;
        if (_1001 > 0.0)
        {
            _1581 = abs((1.0 - _992) / _1001);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1001 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_992 + 1.0) / _1001);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1581 = frontier_phi_35_30_ladder;
        }
        float _1583 = isnan(_1375) ? _1029 : (isnan(_1029) ? _1375 : min(_1029, _1375));
        float _1584 = isnan(_1581) ? _1583 : (isnan(_1583) ? _1581 : min(_1583, _1581));
        float _1588 = (_1584 * _995) + _984;
        float _1589 = (_1584 * _998) + _988;
        float _1590 = (_1584 * _1001) + _992;
        float _1591 = _1584 * 9.9999997473787516355514526367188e-05;
        float _1593 = (-1.0) - _1591;
        float _1595 = _1591 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1590 > _1595) || ((_1590 < _1593) || ((_1589 > _1595) || ((_1589 < _1593) || ((_1588 < _1593) || (_1588 > _1595))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1590, cbModelParam._m0[9u].z, fma(_1589, cbModelParam._m0[9u].y, _1588 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1590, cbModelParam._m0[10u].z, fma(_1589, cbModelParam._m0[10u].y, _1588 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1590, cbModelParam._m0[11u].z, fma(_1589, cbModelParam._m0[11u].y, _1588 * cbModelParam._m0[11u].x))), _934);
            frontier_phi_13_35_ladder = _1783.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1783.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1783.x * cbModelParam._m0[1u].y;
        }
        _1017 = frontier_phi_13_35_ladder_2;
        _1019 = frontier_phi_13_35_ladder_1;
        _1021 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1005 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_433, _434, _435), _934);
        _1017 = _1005.x * cbModelParam._m0[1u].y;
        _1019 = _1005.y * cbModelParam._m0[1u].y;
        _1021 = _1005.z * cbModelParam._m0[1u].y;
    }
    float _1025 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _302);
    float _1026 = isnan(_1025) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1025 : min(cbModelParam._m0[25u].w, _1025));
    float _1118;
    float _1120;
    float _1122;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1082 = fma(_501, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493)) + cbModelParam._m0[21u].w;
        float _1086 = fma(_501, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493)) + cbModelParam._m0[22u].w;
        float _1090 = fma(_501, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493)) + cbModelParam._m0[23u].w;
        float _1093 = fma(_435, cbModelParam._m0[21u].z, fma(_434, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433));
        float _1096 = fma(_435, cbModelParam._m0[22u].z, fma(_434, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433));
        float _1099 = fma(_435, cbModelParam._m0[23u].z, fma(_434, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433));
        float _1380;
        if (_1093 > 0.0)
        {
            _1380 = abs((1.0 - _1082) / _1093);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1093 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1082 + 1.0) / _1093);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1380 = frontier_phi_25_21_ladder;
        }
        float _1608;
        if (_1096 > 0.0)
        {
            _1608 = abs((1.0 - _1086) / _1096);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1096 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1086 + 1.0) / _1096);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1608 = frontier_phi_37_32_ladder;
        }
        float _1903;
        if (_1099 > 0.0)
        {
            _1903 = abs((1.0 - _1090) / _1099);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1099 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1090 + 1.0) / _1099);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1903 = frontier_phi_48_43_ladder;
        }
        float _1905 = isnan(_1608) ? _1380 : (isnan(_1380) ? _1608 : min(_1380, _1608));
        float _1906 = isnan(_1903) ? _1905 : (isnan(_1905) ? _1903 : min(_1905, _1903));
        float _1910 = (_1906 * _1093) + _1082;
        float _1911 = (_1906 * _1096) + _1086;
        float _1912 = (_1906 * _1099) + _1090;
        float _1913 = _1906 * 9.9999997473787516355514526367188e-05;
        float _1914 = (-1.0) - _1913;
        float _1916 = _1913 + 1.0;
        float frontier_phi_22_48_ladder;
        float frontier_phi_22_48_ladder_1;
        float frontier_phi_22_48_ladder_2;
        if ((_1912 > _1916) || ((_1912 < _1914) || ((_1911 > _1916) || ((_1911 < _1914) || ((_1910 < _1914) || (_1910 > _1916))))))
        {
            frontier_phi_22_48_ladder = 0.0;
            frontier_phi_22_48_ladder_1 = 0.0;
            frontier_phi_22_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1912, cbModelParam._m0[17u].z, fma(_1911, cbModelParam._m0[17u].y, _1910 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1912, cbModelParam._m0[18u].z, fma(_1911, cbModelParam._m0[18u].y, _1910 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1912, cbModelParam._m0[19u].z, fma(_1911, cbModelParam._m0[19u].y, _1910 * cbModelParam._m0[19u].x))), _1026);
            frontier_phi_22_48_ladder = _2021.z * cbModelParam._m0[1u].z;
            frontier_phi_22_48_ladder_1 = _2021.y * cbModelParam._m0[1u].z;
            frontier_phi_22_48_ladder_2 = _2021.x * cbModelParam._m0[1u].z;
        }
        _1118 = frontier_phi_22_48_ladder_2;
        _1120 = frontier_phi_22_48_ladder_1;
        _1122 = frontier_phi_22_48_ladder;
    }
    else
    {
        vec4 _1102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_433, _434, _435), _1026);
        _1118 = _1102.x * cbModelParam._m0[1u].z;
        _1120 = _1102.y * cbModelParam._m0[1u].z;
        _1122 = _1102.z * cbModelParam._m0[1u].z;
    }
    float _1135 = (((_464 * _299) + _465) * _425) * ((cbModelParam._m0[1u].w * (_1118 - _1017)) + _1017);
    float _1137 = (((_464 * _300) + _465) * _425) * ((cbModelParam._m0[1u].w * (_1120 - _1019)) + _1019);
    float _1139 = (((_464 * _301) + _465) * _425) * ((cbModelParam._m0[1u].w * (_1122 - _1021)) + _1021);
    float _1160 = fma(_1139, cbSceneParam._m0[89u].z, fma(_1137, cbSceneParam._m0[89u].y, _1135 * cbSceneParam._m0[89u].x));
    float _1163 = fma(_1139, cbSceneParam._m0[90u].z, fma(_1137, cbSceneParam._m0[90u].y, _1135 * cbSceneParam._m0[90u].x));
    float _1166 = fma(_1139, cbSceneParam._m0[91u].z, fma(_1137, cbSceneParam._m0[91u].y, _1135 * cbSceneParam._m0[91u].x));
    uint _1173 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1177 = floatBitsToUint(cbInstanceData._m0[_1173 + 5u]);
    uint _1179 = _1177.x * 14u;
    uint _1180 = _1179 + 13u;
    float _1186 = _425 + (-1.0);
    float _1190 = (cbLight._m0[_1180].x * _1186) + 1.0;
    float _1191 = (cbLight._m0[_1180].y * _1186) + 1.0;
    float _1192 = (cbLight._m0[_1180].w * _1186) + 1.0;
    uint _1196 = _1179 + 8u;
    float _1212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1179].w)) * _302) * 0.949999988079071044921875);
    float _1213 = _1212 * _1212;
    float _1214 = cbLight._m0[_1179].x + _377;
    float _1215 = cbLight._m0[_1179].y + _378;
    float _1216 = cbLight._m0[_1179].z + _379;
    float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
    float _1221 = _1220 * _1214;
    float _1222 = _1220 * _1215;
    float _1223 = _1220 * _1216;
    float _1224 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1179].xyz));
    float _2809 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1227 = isnan(1.0) ? _2809 : (isnan(_2809) ? 1.0 : min(_2809, 1.0));
    float _2820 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _1228 = isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0));
    float _1229 = dot(vec3(_296, _297, _298), vec3(_1221, _1222, _1223));
    float _2831 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1232 = isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0));
    float _1233 = dot(vec3(cbLight._m0[_1179].xyz), vec3(_1221, _1222, _1223));
    float _2842 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1237 = _1213 * _1213;
    float _1241 = ((_1232 * _1232) * (_1237 + (-1.0))) + 1.0;
    float _1249 = exp2(log2(1.0 - (isnan(1.0) ? _2842 : (isnan(_2842) ? 1.0 : min(_2842, 1.0)))) * 5.0);
    float _1250 = 1.0 - _299;
    float _1251 = 1.0 - _300;
    float _1252 = 1.0 - _301;
    float _1259 = 1.0 - _1213;
    float _1270 = (0.5 / (((_1228 * ((_1227 * _1259) + _1213)) + 9.9999999392252902907785028219223e-09) + (((_1228 * _1259) + _1213) * _1227))) * _1227;
    float _2853 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
    float _1272 = (isnan(1.0) ? _2853 : (isnan(_2853) ? 1.0 : min(_2853, 1.0))) * (_1237 / ((_1241 * _1241) * 3.141590118408203125));
    float _1273 = isnan(1.0) ? _1190 : (isnan(_1190) ? 1.0 : min(_1190, 1.0));
    uint _1283 = _1179 | 1u;
    uint _1287 = _1179 + 9u;
    float _1301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1283].w)) * _302) * 0.949999988079071044921875);
    float _1302 = _1301 * _1301;
    float _1303 = cbLight._m0[_1283].x + _377;
    float _1304 = cbLight._m0[_1283].y + _378;
    float _1305 = cbLight._m0[_1283].z + _379;
    float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
    float _1310 = _1309 * _1303;
    float _1311 = _1309 * _1304;
    float _1312 = _1309 * _1305;
    float _1313 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1283].xyz));
    float _2869 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _2869 : (isnan(_2869) ? 1.0 : min(_2869, 1.0));
    float _1317 = dot(vec3(_296, _297, _298), vec3(_1310, _1311, _1312));
    float _2880 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1320 = isnan(1.0) ? _2880 : (isnan(_2880) ? 1.0 : min(_2880, 1.0));
    float _1321 = dot(vec3(cbLight._m0[_1283].xyz), vec3(_1310, _1311, _1312));
    float _2891 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1325 = _1302 * _1302;
    float _1329 = ((_1320 * _1320) * (_1325 + (-1.0))) + 1.0;
    float _1336 = exp2(log2(1.0 - (isnan(1.0) ? _2891 : (isnan(_2891) ? 1.0 : min(_2891, 1.0)))) * 5.0);
    float _1343 = 1.0 - _1302;
    float _1353 = (0.5 / (((_1228 * ((_1316 * _1343) + _1302)) + 9.9999999392252902907785028219223e-09) + (((_1228 * _1343) + _1302) * _1316))) * _1316;
    float _2902 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _1355 = (isnan(1.0) ? _2902 : (isnan(_2902) ? 1.0 : min(_2902, 1.0))) * (_1325 / ((_1329 * _1329) * 3.141590118408203125));
    float _1356 = isnan(1.0) ? _1191 : (isnan(_1191) ? 1.0 : min(_1191, 1.0));
    float _1366 = (((((_1336 * _1250) + _299) * cbLight._m0[_1287].x) * _1355) * _1356) + (((((_1249 * _1250) + _299) * cbLight._m0[_1196].x) * _1272) * _1273);
    float _1367 = (((((_1336 * _1251) + _300) * cbLight._m0[_1287].y) * _1355) * _1356) + (((((_1249 * _1251) + _300) * cbLight._m0[_1196].y) * _1272) * _1273);
    float _1368 = (((((_1336 * _1252) + _301) * cbLight._m0[_1287].z) * _1355) * _1356) + (((((_1249 * _1252) + _301) * cbLight._m0[_1196].z) * _1272) * _1273);
    uvec4 _1372 = floatBitsToUint(cbLight._m0[_1179 + 12u]);
    float _1385;
    float _1387;
    float _1389;
    if (_1372.x == 0u)
    {
        _1385 = _1366;
        _1387 = _1367;
        _1389 = _1368;
    }
    else
    {
        float _1395 = (cbLight._m0[_1180].z * _1186) + 1.0;
        uint _1396 = _1179 + 2u;
        uint _1400 = _1179 + 10u;
        float _1414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1396].w)) * _302) * 0.949999988079071044921875);
        float _1415 = _1414 * _1414;
        float _1416 = cbLight._m0[_1396].x + _377;
        float _1417 = cbLight._m0[_1396].y + _378;
        float _1418 = cbLight._m0[_1396].z + _379;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1423 = _1422 * _1416;
        float _1424 = _1422 * _1417;
        float _1425 = _1422 * _1418;
        float _1426 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1396].xyz));
        float _2918 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1429 = isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0));
        float _1430 = dot(vec3(_296, _297, _298), vec3(_1423, _1424, _1425));
        float _2929 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1433 = isnan(1.0) ? _2929 : (isnan(_2929) ? 1.0 : min(_2929, 1.0));
        float _1434 = dot(vec3(cbLight._m0[_1396].xyz), vec3(_1423, _1424, _1425));
        float _2940 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1415 * _1415;
        float _1442 = ((_1433 * _1433) * (_1438 + (-1.0))) + 1.0;
        float _1449 = exp2(log2(1.0 - (isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0)))) * 5.0);
        float _1456 = 1.0 - _1415;
        float _1466 = (0.5 / (((_1228 * ((_1429 * _1456) + _1415)) + 9.9999999392252902907785028219223e-09) + (((_1228 * _1456) + _1415) * _1429))) * _1429;
        float _2951 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1468 = (isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0))) * (_1438 / ((_1442 * _1442) * 3.141590118408203125));
        float _1469 = isnan(1.0) ? _1395 : (isnan(_1395) ? 1.0 : min(_1395, 1.0));
        _1385 = (((((_1449 * _1250) + _299) * cbLight._m0[_1400].x) * _1468) * _1469) + _1366;
        _1387 = (((((_1449 * _1251) + _300) * cbLight._m0[_1400].y) * _1468) * _1469) + _1367;
        _1389 = (((((_1449 * _1252) + _301) * cbLight._m0[_1400].z) * _1468) * _1469) + _1368;
    }
    float _1487;
    float _1489;
    float _1491;
    if (_1372.y == 0u)
    {
        _1487 = _1385;
        _1489 = _1387;
        _1491 = _1389;
    }
    else
    {
        uint _1498 = _1179 + 3u;
        uint _1502 = _1179 + 11u;
        float _1516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1498].w)) * _302) * 0.949999988079071044921875);
        float _1517 = _1516 * _1516;
        float _1518 = cbLight._m0[_1498].x + _377;
        float _1519 = cbLight._m0[_1498].y + _378;
        float _1520 = cbLight._m0[_1498].z + _379;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1525 = _1524 * _1518;
        float _1526 = _1524 * _1519;
        float _1527 = _1524 * _1520;
        float _1528 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1498].xyz));
        float _2967 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1531 = isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0));
        float _1532 = dot(vec3(_296, _297, _298), vec3(_1525, _1526, _1527));
        float _2978 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1535 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
        float _1536 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_1525, _1526, _1527));
        float _2989 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1517 * _1517;
        float _1544 = ((_1535 * _1535) * (_1540 + (-1.0))) + 1.0;
        float _1551 = exp2(log2(1.0 - (isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0)))) * 5.0);
        float _1558 = 1.0 - _1517;
        float _1568 = (0.5 / (((_1228 * ((_1531 * _1558) + _1517)) + 9.9999999392252902907785028219223e-09) + (((_1228 * _1558) + _1517) * _1531))) * _1531;
        float _3000 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1570 = (isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0))) * (_1540 / ((_1544 * _1544) * 3.141590118408203125));
        float _1571 = isnan(1.0) ? _1192 : (isnan(_1192) ? 1.0 : min(_1192, 1.0));
        _1487 = (((((_1551 * _1250) + _299) * cbLight._m0[_1502].x) * _1570) * _1571) + _1385;
        _1489 = (((((_1551 * _1251) + _300) * cbLight._m0[_1502].y) * _1570) * _1571) + _1387;
        _1491 = (((((_1551 * _1252) + _301) * cbLight._m0[_1502].z) * _1570) * _1571) + _1389;
    }
    float _1713;
    float _1715;
    float _1717;
    if (_1177.y == 0u)
    {
        float _1652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1652;
        float _1654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1652;
        float _1655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1652;
        uvec4 _1667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1668 = _1667.x;
        uint _1679 = uint((float(_1667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _1668))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _1668)));
        float _1689 = (log2(_1655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1690 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        uint _1693 = uint(isnan(14.0) ? _1690 : (isnan(_1690) ? 14.0 : min(_1690, 14.0)));
        uvec4 _1698 = texelFetch(g_lightClusterGridBuffer, int(((_1693 << 2u) + (_1679 << 6u)) >> 2u));
        uint _1699 = _1698.x;
        uint _1700 = _1667.z;
        float _1792;
        float _1794;
        float _1796;
        if (((((1u << ((_1700 >> 4u) & 15u)) + 4294967295u) & _1699) == 0u) || ((_1700 & 240u) == 0u))
        {
            _1792 = 0.0;
            _1794 = 0.0;
            _1796 = 0.0;
        }
        else
        {
            float _1793;
            float _1795;
            float _1797;
            float _1952 = 0.0;
            float _1953 = 0.0;
            float _1954 = 0.0;
            uint _1955 = 0u;
            uint _1964;
            bool _1965;
            for (;;)
            {
                _1964 = texelFetch(g_lightClassification, int((((_1693 << 5u) + (_1679 << 9u)) + (_1955 << 2u)) >> 2u)).x;
                _1965 = _1964 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                if (_1965)
                {
                    frontier_phi_57_pred = _1954;
                    frontier_phi_57_pred_1 = _1953;
                    frontier_phi_57_pred_2 = _1952;
                }
                else
                {
                    float _2088;
                    float _2089;
                    float _2090;
                    uint _2091;
                    _2088 = _1952;
                    _2089 = _1953;
                    _2090 = _1954;
                    _2091 = _1964;
                    float _2026;
                    float _2027;
                    float _2028;
                    for (;;)
                    {
                        uint _2095 = uint(findLSB(_2091)) + (_1955 << 5u);
                        uint _2092 = (_2091 + 4294967295u) & _2091;
                        uint _2097 = _2095 * 48u;
                        vec4 _2111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2097)).x, texelFetch(g_PointLightRenderingBuffer, int(_2097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2097 + 3u)).x));
                        uint _2128 = (_2095 * 48u) + 8u;
                        vec3 _2139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2128)).x, texelFetch(g_PointLightRenderingBuffer, int(_2128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2128 + 2u)).x));
                        float _2143 = _2111.x - _1653;
                        float _2144 = _2111.y - _1654;
                        float _2145 = _2111.z - _1655;
                        float _2146 = dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145));
                        float _2149 = inversesqrt(_2146);
                        float _2150 = _2149 * _2143;
                        float _2151 = _2149 * _2144;
                        float _2152 = _2149 * _2145;
                        float _2158 = 1.0 - (_2146 * _2111.w);
                        float _3026 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
                        float _2160 = sqrt(_2146) * uintBitsToFloat(uvec4(_2118, _2119, _2120, texelFetch(g_PointLightRenderingBuffer, int(((_2095 * 48u) + 4u) + 3u)).x)).w;
                        float _2164 = _2160 * _2160;
                        float _2165 = (-0.0) - _1653;
                        float _2166 = (-0.0) - _1654;
                        float _2167 = (-0.0) - _1655;
                        float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
                        float _2172 = _2171 * _2165;
                        float _2173 = _2171 * _2166;
                        float _2174 = _2171 * _2167;
                        float _2182 = exp2(log2(1.0 / ((_2164 * 3.5) + 5.0)) * 0.25);
                        float _2183 = 1.0 - _446;
                        float _2190 = sqrt(1.0 - ((1.0 - (_2183 * _2183)) * (1.0 - (_2182 * _2182))));
                        float _2191 = _2190 * _2190;
                        float _2192 = _2191 * _2191;
                        float _2193 = _2172 + _2150;
                        float _2194 = _2173 + _2151;
                        float _2195 = _2174 + _2152;
                        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
                        float _2203 = dot(vec3(_407, _410, _413), vec3(_2172, _2173, _2174));
                        float _3037 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
                        float _2206 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
                        float _2207 = dot(vec3(_407, _410, _413), vec3(_2199 * _2193, _2199 * _2194, _2199 * _2195));
                        float _3048 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
                        float _2210 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
                        float _2214 = ((_2210 * _2210) * (_2192 + (-1.0))) + 1.0;
                        float _2215 = (1.39999997615814208984375 / (_2160 + 1.39999997615814208984375)) * _2191;
                        float _2216 = _2215 * _2215;
                        float _2219 = ((1.0 - _2216) * dot(vec3(_407, _410, _413), vec3(_2150, _2151, _2152))) + _2216;
                        float _3059 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
                        float _2220 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
                        float _2221 = 1.0 - _2191;
                        float _2231 = (0.5 / (((_2220 * ((_2206 * _2221) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2221) + _2191) * _2206))) * _2220;
                        float _3070 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
                        float _2242 = (((_2192 * 3.1415927410125732421875) * (isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0)))) / ((_2214 * _2214) * ((_2164 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0)));
                        _2026 = (_2242 * _2139.x) + _2088;
                        _2027 = (_2242 * _2139.y) + _2089;
                        _2028 = (_2242 * _2139.z) + _2090;
                        if (_2092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2088 = _2026;
                            _2089 = _2027;
                            _2090 = _2028;
                            _2091 = _2092;
                        }
                    }
                    frontier_phi_57_pred = _2028;
                    frontier_phi_57_pred_1 = _2027;
                    frontier_phi_57_pred_2 = _2026;
                }
                _1797 = frontier_phi_57_pred;
                _1795 = frontier_phi_57_pred_1;
                _1793 = frontier_phi_57_pred_2;
                uint _1956 = _1955 + 1u;
                if (_1956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1952 = _1793;
                    _1953 = _1795;
                    _1954 = _1797;
                    _1955 = _1956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1792 = _1793;
            _1794 = _1795;
            _1796 = _1797;
        }
        uvec4 _1800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1801 = _1800.z;
        uint _1803 = (_1801 >> 8u) & 15u;
        float _1929;
        float _1931;
        float _1933;
        if (((4294967295u << _1803) & _1699) == 0u)
        {
            _1929 = _1792;
            _1931 = _1794;
            _1933 = _1796;
        }
        else
        {
            float _1945 = inversesqrt(dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655)));
            float _1946 = _1945 * _1653;
            float _1947 = _1945 * _1654;
            float _1948 = _1945 * _1655;
            float frontier_phi_50_51_ladder;
            float frontier_phi_50_51_ladder_1;
            float frontier_phi_50_51_ladder_2;
            if (_1803 < ((_1801 >> 12u) & 15u))
            {
                float _1930;
                float _1932;
                float _1934;
                float _2074 = _1792;
                float _2075 = _1794;
                float _2076 = _1796;
                uint _2077 = _1803;
                uint _2086;
                bool _2087;
                for (;;)
                {
                    _2086 = texelFetch(g_lightClassification, int((((_1693 << 5u) + (_1679 << 9u)) + (_2077 << 2u)) >> 2u)).x;
                    _2087 = _2086 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    if (_2087)
                    {
                        frontier_phi_63_pred = _2076;
                        frontier_phi_63_pred_1 = _2075;
                        frontier_phi_63_pred_2 = _2074;
                    }
                    else
                    {
                        float _2247;
                        float _2248;
                        float _2249;
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2257 = _2074;
                        float _2258 = _2075;
                        float _2259 = _2076;
                        uint _2260 = _2086;
                        uint _2261;
                        uint _2271;
                        vec4 _2286;
                        float _2287;
                        vec3 _2299;
                        vec4 _2315;
                        vec4 _2331;
                        float _2378;
                        bool _2379;
                        for (;;)
                        {
                            _2271 = ((_2077 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2260));
                            _2261 = (_2260 + 4294967295u) & _2260;
                            uint _2273 = _2271 * 40u;
                            _2286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2273 + 3u)).x));
                            _2287 = _2286.w;
                            uint _2289 = (_2271 * 40u) + 8u;
                            _2299 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2289 + 2u)).x));
                            uint _2302 = (_2271 * 40u) + 16u;
                            _2315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2302 + 3u)).x));
                            uint _2318 = (_2271 * 40u) + 20u;
                            _2331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 3u)).x));
                            uint _2334 = (_2271 * 40u) + 24u;
                            vec4 _2347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 3u)).x));
                            uint _2353 = (_2271 * 40u) + 28u;
                            vec4 _2366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2353 + 3u)).x));
                            _2378 = fma(_1655, _2366.z, fma(_1654, _2366.y, _2366.x * _1653)) + _2366.w;
                            _2379 = !((fma(_1655, _2347.z, fma(_1654, _2347.y, _2347.x * _1653)) + _2347.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            if (_2379)
                            {
                                float _2413 = _2286.x - _1653;
                                float _2414 = _2286.y - _1654;
                                float _2415 = _2286.z - _1655;
                                float _2416 = dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415));
                                float _2419 = inversesqrt(_2416);
                                float _2420 = _2419 * _2413;
                                float _2421 = _2419 * _2414;
                                float _2422 = _2419 * _2415;
                                float _2426 = 1.0 - (_2416 / (_2287 * _2287));
                                float _3081 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
                                float _2428 = sqrt(_2416) * uintBitsToFloat(uvec4(_2382, _2383, _2384, texelFetch(g_SpotLightRenderingBuffer, int(((_2271 * 40u) + 4u) + 3u)).x)).w;
                                float _2431 = _2428 * _2428;
                                float _2432 = (fma(_1655, _2315.z, fma(_1654, _2315.y, _2315.x * _1653)) + _2315.w) / _2378;
                                float _2433 = (fma(_1655, _2331.z, fma(_1654, _2331.y, _2331.x * _1653)) + _2331.w) / _2378;
                                float _2437 = 1.0 - dot(vec2(_2432, _2433), vec2(_2432, _2433));
                                float _3092 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                                float _2447 = exp2(log2(1.0 / ((_2431 * 3.5) + 5.0)) * 0.25);
                                float _2448 = 1.0 - _446;
                                float _2455 = sqrt(1.0 - ((1.0 - (_2448 * _2448)) * (1.0 - (_2447 * _2447))));
                                float _2456 = _2455 * _2455;
                                float _2457 = _2456 * _2456;
                                float _2458 = _2420 - _1946;
                                float _2459 = _2421 - _1947;
                                float _2460 = _2422 - _1948;
                                float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
                                float _2468 = dot(vec3(_407, _410, _413), vec3((-0.0) - _1946, (-0.0) - _1947, (-0.0) - _1948));
                                float _3103 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
                                float _2471 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
                                float _2472 = dot(vec3(_407, _410, _413), vec3(_2464 * _2458, _2464 * _2459, _2464 * _2460));
                                float _3114 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
                                float _2475 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
                                float _2479 = ((_2475 * _2475) * (_2457 + (-1.0))) + 1.0;
                                float _2480 = (1.39999997615814208984375 / (_2428 + 1.39999997615814208984375)) * _2456;
                                float _2481 = _2480 * _2480;
                                float _2487 = ((1.0 - _2481) * dot(vec3(_407, _410, _413), vec3(_2420, _2421, _2422))) + _2481;
                                float _3125 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
                                float _2488 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
                                float _2489 = 1.0 - _2456;
                                float _2499 = (0.5 / (((_2488 * ((_2471 * _2489) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2489) + _2456) * _2471))) * _2488;
                                float _3136 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                                float _2509 = ((isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * (isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0)))) * (((_2457 * 3.1415927410125732421875) * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) / ((_2479 * _2479) * ((_2431 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _2509 * _2299.x;
                                frontier_phi_69_pred_1 = _2509 * _2299.z;
                                frontier_phi_69_pred_2 = _2509 * _2299.y;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                            }
                            _2513 = frontier_phi_69_pred;
                            _2515 = frontier_phi_69_pred_1;
                            _2514 = frontier_phi_69_pred_2;
                            _2247 = _2513 + _2257;
                            _2248 = _2514 + _2258;
                            _2249 = _2515 + _2259;
                            if (_2261 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2257 = _2247;
                                _2258 = _2248;
                                _2259 = _2249;
                                _2260 = _2261;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _2249;
                        frontier_phi_63_pred_1 = _2248;
                        frontier_phi_63_pred_2 = _2247;
                    }
                    _1934 = frontier_phi_63_pred;
                    _1932 = frontier_phi_63_pred_1;
                    _1930 = frontier_phi_63_pred_2;
                    uint _2078 = _2077 + 1u;
                    if (_2078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2074 = _1930;
                        _2075 = _1932;
                        _2076 = _1934;
                        _2077 = _2078;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_50_51_ladder = _1932;
                frontier_phi_50_51_ladder_1 = _1930;
                frontier_phi_50_51_ladder_2 = _1934;
            }
            else
            {
                frontier_phi_50_51_ladder = _1794;
                frontier_phi_50_51_ladder_1 = _1792;
                frontier_phi_50_51_ladder_2 = _1796;
            }
            _1929 = frontier_phi_50_51_ladder_1;
            _1931 = frontier_phi_50_51_ladder;
            _1933 = frontier_phi_50_51_ladder_2;
        }
        float _1938 = isnan(1.0) ? _425 : (isnan(_425) ? 1.0 : min(_425, 1.0));
        _1713 = ((_1929 * _299) * _1938) + _1487;
        _1715 = ((_1931 * _300) * _1938) + _1489;
        _1717 = ((_1933 * _301) * _1938) + _1491;
    }
    else
    {
        _1713 = _1487;
        _1715 = _1489;
        _1717 = _1491;
    }
    float _1719 = dot(vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375), vec3(_299, _300, _301));
    uint _1728 = _1173 + 6u;
    float _1733 = (cbInstanceData._m0[_1728].w * cbMtdParam._m0[28u].x) * (((1.0 - _1719) * exp2(log2(1.0 - _440) * 5.0)) + _1719);
    float _1738 = _385 / cbSceneParam._m0[86u].x;
    float _1739 = _386 / cbSceneParam._m0[86u].y;
    vec4 _1753 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1738, _1739, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1755 = _1753.x;
    float _1756 = _1753.y;
    float _1757 = _1753.z;
    float _1758 = _1753.w;
    float _1849;
    float _1851;
    float _1853;
    float _1855;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _1811 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _1812 = _1811 / _318;
        float _1823 = _1812 * _370;
        float _1824 = _371 * _1812;
        float _1825 = (-0.0) - _1824;
        float _1827 = _1812 * _372;
        float _1829 = (cbSceneParam._m0[77u].w * _1825) / _1811;
        float _1830 = _1829 + cbSceneParam._m0[79u].w;
        float _1831 = cbSceneParam._m0[79u].w - _1824;
        float _1837 = sqrt(((_1823 * _1823) + (_1824 * _1824)) + (_1827 * _1827));
        float _1840 = (1.0 - (cbSceneParam._m0[77u].w / _1811)) * _1837;
        float _1845 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1847 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2036;
        if (abs((_1825 - _1829) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2036 = ((((_1830 > 0.0) ? exp2(_1845 * _1830) : (2.0 - exp2(_1847 * _1830))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1840;
        }
        else
        {
            float _1978 = 1.0 / cbSceneParam._m0[80u].x;
            float _1979 = isnan(_1831) ? _1830 : (isnan(_1830) ? _1831 : max(_1830, _1831));
            float _1980 = isnan(_1831) ? _1830 : (isnan(_1830) ? _1831 : min(_1830, _1831));
            float _1989 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : min(_1979, 0.0));
            float _1990 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : min(_1980, 0.0));
            _2036 = ((abs(_1837 / _1825) * cbSceneParam._m0[80u].y) * ((((_1989 - _1990) * 2.0) - ((exp2(_1845 * (isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)))) - exp2(_1845 * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))))) * _1978)) - ((exp2(_1847 * _1989) - exp2(_1847 * _1990)) * _1978))) + (_1840 * cbSceneParam._m0[80u].z);
        }
        vec4 _2038 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1738, _1739, 1.0), 0.0);
        float _2047 = exp2((_2036 * (-1.44269502162933349609375)) * (1.0 - _2038.w));
        float _2048 = log2(_2047);
        float _2064 = log2(_1758);
        _1849 = (exp2(_2064 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2048 * cbSceneParam._m0[78u].x)) * _2038.x) / cbSceneParam._m0[78u].x)) + _1755;
        _1851 = (exp2(_2064 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2048 * cbSceneParam._m0[78u].y)) * _2038.y) / cbSceneParam._m0[78u].y)) + _1756;
        _1853 = (exp2(_2064 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2048 * cbSceneParam._m0[78u].z)) * _2038.z) / cbSceneParam._m0[78u].z)) + _1757;
        _1855 = _2047 * _1758;
    }
    else
    {
        _1849 = _1755;
        _1851 = _1756;
        _1853 = _1757;
        _1855 = _1758;
    }
    bool _1871 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _1872 = log2(_1855);
    float _1879 = cbPerFrame._m0[3u].x * cbMtdParam._m0[28u].x;
    float _1882 = ((_1879 * (_1713 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _926))) * cbInstanceData._m0[_1728].w) * exp2(_1872 * cbSceneParam._m0[78u].x);
    float _1885 = ((_1879 * (_1715 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _926))) * cbInstanceData._m0[_1728].w) * exp2(_1872 * cbSceneParam._m0[78u].y);
    float _1888 = ((_1879 * (_1717 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _926))) * cbInstanceData._m0[_1728].w) * exp2(_1872 * cbSceneParam._m0[78u].z);
    SV_Target.x = cbSceneParam._m0[72u].z * (_1871 ? _1882 : (_1882 + ((_1849 * _1733) * cbSceneParam._m0[72u].w)));
    SV_Target.y = (_1871 ? _1885 : (_1885 + ((_1851 * _1733) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
    SV_Target.z = (_1871 ? _1888 : (_1888 + ((_1853 * _1733) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
    SV_Target.w = _1733;
}


