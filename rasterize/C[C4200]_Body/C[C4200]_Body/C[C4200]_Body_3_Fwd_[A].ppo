#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1525;
float _3938;
float _3939;
float _3940;
float _3941;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _267 = log2(0.0);
    float _269 = exp2(_267 * cbMtdParam._m0[24u].x);
    float _270 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _271 = isnan(1.0) ? _270 : (isnan(_270) ? 1.0 : min(_270, 1.0));
    vec4 _285 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _289 = _285.z;
    float _297 = exp2(log2(_289 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _311 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _314 = _311.y;
    float _317 = (_311.x + (-0.02500000037252902984619140625)) * 8.0;
    float _321 = roundEven(5.0 - _317);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(4.0) ? _322 : (isnan(_322) ? 4.0 : min(_322, 4.0));
    float _336 = floor(_323);
    vec4 _339 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _336));
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[17u].x;
    _192[0u] = cbMtdParam._m0[17u].y;
    _193[0u] = cbMtdParam._m0[17u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[14u].x;
    _192[2u] = cbMtdParam._m0[14u].y;
    _193[2u] = cbMtdParam._m0[14u].z;
    _191[3u] = cbMtdParam._m0[13u].x;
    _192[3u] = cbMtdParam._m0[13u].y;
    _193[3u] = cbMtdParam._m0[13u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[18u].x;
    _192[5u] = cbMtdParam._m0[18u].y;
    _193[5u] = cbMtdParam._m0[18u].z;
    float _403 = roundEven(_317);
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    uint _406 = uint(int(isnan(5.0) ? _404 : (isnan(_404) ? 5.0 : min(_404, 5.0))));
    vec4 _436 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _447 = cbMtdParam._m0[9u].x * _436.x;
    float _448 = cbMtdParam._m0[9u].y * _436.y;
    float _449 = cbMtdParam._m0[9u].z * _436.z;
    float _456 = ((((((_191[_406] - cbMtdParam._m0[10u].x) * _314) + cbMtdParam._m0[10u].x) * _339.x) - _447) * _299) + _447;
    float _457 = ((((((_192[_406] - cbMtdParam._m0[10u].y) * _314) + cbMtdParam._m0[10u].y) * _339.y) - _448) * _299) + _448;
    float _458 = ((((((_193[_406] - cbMtdParam._m0[10u].z) * _314) + cbMtdParam._m0[10u].z) * _339.z) - _449) * _299) + _449;
    float _464 = exp2(log2(_285.w) * cbMtdParam._m0[24u].w);
    vec4 _477 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _497 = (((cbMtdParam._m0[16u].x * _477.x) - _456) * _464) + _456;
    float _498 = (((cbMtdParam._m0[16u].y * _477.y) - _457) * _464) + _457;
    float _499 = (((cbMtdParam._m0[16u].z * _477.z) - _458) * _464) + _458;
    vec4 _511 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _536 = (_257.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _511.x) - _497) * _271) + _497);
    float _538 = (_257.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _511.y) - _498) * _271) + _498);
    float _540 = (_257.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _511.z) - _499) * _271) + _499);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _577 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    uint _579 = uint(int(isnan(4.0) ? _577 : (isnan(_577) ? 4.0 : min(_577, 4.0))));
    float _586 = ((_187[_579] - cbMtdParam._m0[23u].z) * _299) + cbMtdParam._m0[23u].z;
    float _589 = ((cbMtdParam._m0[23u].w - _586) * _464) + _586;
    float _592 = ((cbMtdParam._m0[26u].y - _589) * _271) + _589;
    vec4 _607 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _336));
    vec4 _624 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _632 = cbMtdParam._m0[23u].x + _624.z;
    float _635 = (((_607.z + _186[_579]) - _632) * _299) + _632;
    vec4 _647 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _658 = (((_647.z - _635) + cbMtdParam._m0[30u].x) * _464) + _635;
    float _664 = ((((_289 * 2.0) * _658) - _658) * cbMtdParam._m0[25u].w) + _658;
    vec4 _676 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _687 = (((cbMtdParam._m0[24u].z + _676.z) - _664) * _271) + _664;
    float _700 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _723 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_700 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _700) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _727 = cbPerFrame._m0[22u].x * 2.0;
    float _728 = _727 * cbMtdParam._m0[28u].z;
    float _731 = (_723.x * 0.5) + (-0.25);
    float _734 = (_723.y * 0.5) + (-0.25);
    float _735 = _734 * cbMtdParam._m0[28u].y;
    float _737 = (-0.0) - (cbMtdParam._m0[28u].y * _731);
    float _739 = fract(_728);
    float _741 = fract(_728 + 0.5);
    float _753 = abs((_739 * 2.0) + (-1.0));
    vec4 _769 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_739 * _737) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_735 * _739) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _771 = _769.x;
    float _772 = _769.y;
    float _773 = _769.z;
    vec4 _774 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_741 * _737) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_735 * _741) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _785 = ((_774.x - _771) * _753) + _771;
    float _792 = exp2(log2(_785 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _793 = isnan(cbMtdParam._m0[29u].y) ? _792 : (isnan(_792) ? cbMtdParam._m0[29u].y : max(_792, cbMtdParam._m0[29u].y));
    float _794 = isnan(cbMtdParam._m0[29u].z) ? _793 : (isnan(_793) ? cbMtdParam._m0[29u].z : min(_793, cbMtdParam._m0[29u].z));
    float _818 = (cbMtdParam._m0[33u].x * _700) + TEXCOORD;
    float _819 = (cbMtdParam._m0[33u].y * _700) + TEXCOORD_1;
    float _822 = _727 * cbMtdParam._m0[27u].w;
    float _823 = _734 * cbMtdParam._m0[27u].z;
    float _825 = (-0.0) - (cbMtdParam._m0[27u].z * _731);
    float _826 = fract(_822);
    float _828 = fract(_822 + 0.5);
    float _839 = abs((_826 * 2.0) + (-1.0));
    vec4 _856 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_826 * _825) + _818) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_823 * _826) + _819) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _861 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_828 * _825) + _818) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_823 * _828) + _819) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _895 = ((_607.x - _626) * _299) + _626;
    float _896 = ((_607.y - _627) * _299) + _627;
    float _901 = ((_647.x - _895) * _464) + _895;
    float _902 = ((_647.y - _896) * _464) + _896;
    float _911 = ((((_676.x - _901) * _271) + _901) * 2.0) + (-1.0);
    float _912 = ((((_676.y - _902) * _271) + _902) * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4010 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _918 = sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))));
    float _921 = (cbMtdParam._m0[26u].z * ((_285.x * 2.0) + (-1.0))) + _911;
    float _922 = (cbMtdParam._m0[26u].z * ((_285.y * 2.0) + (-1.0))) + _912;
    float _924 = gl_FragCoord.x * 0.125;
    float _926 = gl_FragCoord.y * 0.125;
    float _937 = fma(_918, _233 * NORMAL.x, fma(_922, _240 * TANGENT.x, (_226 * _218) * _921));
    float _940 = fma(_918, _233 * NORMAL.y, fma(_922, _240 * TANGENT.y, (_226 * _219) * _921));
    float _943 = fma(_918, _233 * NORMAL.z, fma(_922, _240 * TANGENT.z, (_226 * _220) * _921));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _4021 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _951 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4043 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4054 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4065 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _955 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_924, _926)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1026 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1016);
    float _1027 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1016);
    float _1028 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1016);
    float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
    float _1033 = _1026 * _1032;
    float _1034 = _1027 * _1032;
    float _1035 = _1028 * _1032;
    vec4 _1037 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_924, _926));
    float _1039 = _1037.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1209 = sqrt(((_1026 * _1026) + (_1027 * _1027)) + (_1028 * _1028));
        float _1215 = (cbMatDynParam._m0[5u].x * _1209) + cbMatDynParam._m0[5u].y;
        float _4076 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1220 = (cbMatDynParam._m0[5u].z * _1209) + cbMatDynParam._m0[5u].w;
        float _4087 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) - _1216)) + _1216) < ((_1039 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1050 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1051 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1069 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1072 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1075 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1088 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1089 = _1088 + 9u;
    uint _1090 = _1089 + uint(cbMatDynParam._m0[0u].w);
    float _1096 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_1090].x;
    float _1097 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1090].y;
    float _1098 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1090].z;
    float _4098 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1102 = 1.0 - _955;
    float _1103 = _1099 * _1102;
    float _1104 = _1100 * _1102;
    float _1105 = _1101 * _1102;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _955;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _955;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _955;
    float _1113 = _1110 + 0.039999999105930328369140625;
    float _1115 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    vec4 _1125 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1050, cbSceneParam._m0[86u].y * _1051));
    float _1128 = _1125.x * TEXCOORD_3.w;
    float _1129 = dot(vec3(_948, _949, _950), vec3(_1033, _1034, _1035));
    float _1132 = _1129 * 2.0;
    float _1136 = (_1132 * _948) - _1033;
    float _1137 = (_1132 * _949) - _1034;
    float _1138 = (_1132 * _950) - _1035;
    float _1142 = abs(dot(vec3(_1033, _1034, _1035), vec3(_948, _949, _950)));
    float _4131 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1144 = sqrt(_951);
    float _1155 = exp2((_1144 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1144 * 3.0));
    float _1161 = (1.0 - _1155) * ((_1144 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1162 = _1155 * _1144;
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1524;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1251 = fma(_1198, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190));
        float _1255 = fma(_1198, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190));
        float _1259 = fma(_1198, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190));
        float _1283 = _1190 + _948;
        float _1284 = _1194 + _949;
        float _1285 = _1198 + _950;
        float _1295 = fma(_1285, cbModelParam._m0[26u].z, fma(_1284, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283)) - _1251;
        float _1296 = fma(_1285, cbModelParam._m0[27u].z, fma(_1284, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283)) - _1255;
        float _1297 = fma(_1285, cbModelParam._m0[28u].z, fma(_1284, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283)) - _1259;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1313 = ((_1301 * _1295) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1251 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1301 * _1296) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1255 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1297) / cbModelParam._m0[34u].z) + ((((((_1259 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        float _1352 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1318.x + (-0.5));
        float _1354 = _1352 * (_1318.y + (-0.5));
        float _1355 = _1352 * (_1318.z + (-0.5));
        float _1362 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1325.x + (-0.5));
        float _1364 = _1362 * (_1325.y + (-0.5));
        float _1365 = _1362 * (_1325.z + (-0.5));
        float _1372 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1332.x + (-0.5));
        float _1374 = _1372 * (_1332.y + (-0.5));
        float _1375 = _1372 * (_1332.z + (-0.5));
        float _1382 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1339.x + (-0.5));
        float _1384 = _1382 * (_1339.y + (-0.5));
        float _1385 = _1382 * (_1339.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1406 = (dot(vec3(_948, _949, _950), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1416 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4179 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1418 + 1.0))) + _1423) * _1386;
        float _1433 = _1354 * 0.5;
        float _1434 = _1364 * 0.5;
        float _1435 = _1374 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_948, _949, _950), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4212 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1460 + 1.0))) + _1465) * _1387;
        float _1475 = _1355 * 0.5;
        float _1476 = _1365 * 0.5;
        float _1477 = _1375 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_948, _949, _950), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4245 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1502 + 1.0))) + _1507) * _1388;
        _1524 = _1355;
        _1526 = _1354;
        _1527 = _1353;
        _1528 = _1365;
        _1529 = _1364;
        _1530 = _1363;
        _1531 = _1375;
        _1532 = _1374;
        _1533 = _1373;
        _1534 = _1388;
        _1535 = _1387;
        _1536 = _1386;
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1525;
        _1526 = _1525;
        _1527 = _1525;
        _1528 = _1525;
        _1529 = _1525;
        _1530 = _1525;
        _1531 = _1525;
        _1532 = _1525;
        _1533 = _1525;
        _1534 = _1525;
        _1535 = _1525;
        _1536 = _1525;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1562 = fma(_1198, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190));
        float _1566 = fma(_1198, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190));
        float _1570 = fma(_1198, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190));
        float _1593 = _1190 + _948;
        float _1594 = _1194 + _949;
        float _1595 = _1198 + _950;
        float _1605 = fma(_1595, cbModelParam._m0[30u].z, fma(_1594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1593)) - _1562;
        float _1606 = fma(_1595, cbModelParam._m0[31u].z, fma(_1594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1593)) - _1566;
        float _1607 = fma(_1595, cbModelParam._m0[32u].z, fma(_1594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1593)) - _1570;
        float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
        float _1624 = ((_1611 * _1605) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1562 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1611 * _1606) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1566 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1626 = ((_1611 * _1607) / cbModelParam._m0[35u].z) + ((((((_1570 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        float _1661 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1628.x + (-0.5));
        float _1663 = _1661 * (_1628.y + (-0.5));
        float _1664 = _1661 * (_1628.z + (-0.5));
        float _1671 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1635.x + (-0.5));
        float _1673 = _1671 * (_1635.y + (-0.5));
        float _1674 = _1671 * (_1635.z + (-0.5));
        float _1681 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1642.x + (-0.5));
        float _1683 = _1681 * (_1642.y + (-0.5));
        float _1684 = _1681 * (_1642.z + (-0.5));
        float _1691 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1649.x + (-0.5));
        float _1693 = _1691 * (_1649.y + (-0.5));
        float _1694 = _1691 * (_1649.z + (-0.5));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = _1662 * 0.5;
        float _1699 = _1672 * 0.5;
        float _1700 = _1682 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_948, _949, _950), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4308 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1725 + 1.0))) + _1730) * _1695;
        float _1740 = _1663 * 0.5;
        float _1741 = _1673 * 0.5;
        float _1742 = _1683 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_948, _949, _950), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4341 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1767 + 1.0))) + _1772) * _1696;
        float _1782 = _1664 * 0.5;
        float _1783 = _1674 * 0.5;
        float _1784 = _1684 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_948, _949, _950), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4374 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1809 + 1.0))) + _1814) * _1697;
        _1831 = _1664;
        _1832 = _1663;
        _1833 = _1662;
        _1834 = _1674;
        _1835 = _1673;
        _1836 = _1672;
        _1837 = _1684;
        _1838 = _1683;
        _1839 = _1682;
        _1840 = _1697;
        _1841 = _1696;
        _1842 = _1695;
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
    }
    else
    {
        _1831 = _1525;
        _1832 = _1525;
        _1833 = _1525;
        _1834 = _1525;
        _1835 = _1525;
        _1836 = _1525;
        _1837 = _1525;
        _1838 = _1525;
        _1839 = _1525;
        _1840 = _1525;
        _1841 = _1525;
        _1842 = _1525;
        _1843 = 0.0;
        _1844 = 0.0;
        _1845 = 0.0;
    }
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1537)) + _1537;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1538)) + _1538;
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1539)) + _1539;
    float _1878 = fma(_1857, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1855 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1857, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1855 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1857, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1855));
    float _1899 = _1136 * 0.5;
    float _1900 = _1137 * 0.5;
    float _1901 = _1138 * 0.5;
    float _1902 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1905 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1908 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1942;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1915 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1524, _1528, _1531, _1534));
        float _1919 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1923 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1930 = dot(vec4(cbModelParam._m0[39u]), vec4(_1899, _1900, _1901, 1.0));
        _1942 = dot(vec3(isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1942 = 1.0;
    }
    float _1953;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1944 = dot(vec4(cbModelParam._m0[40u]), vec4(_1899, _1900, _1901, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1944) ? 0.0 : (isnan(0.0) ? _1944 : max(0.0, _1944))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1957 = (_1953 * cbModelParam._m0[1u].x) + (_1942 * (1.0 - cbModelParam._m0[1u].x));
    float _1967 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1967 : min(cbModelParam._m0[25u].z, _1967));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2015 = fma(_1198, cbModelParam._m0[13u].z, fma(_1194, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190)) + cbModelParam._m0[13u].w;
        float _2019 = fma(_1198, cbModelParam._m0[14u].z, fma(_1194, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190)) + cbModelParam._m0[14u].w;
        float _2023 = fma(_1198, cbModelParam._m0[15u].z, fma(_1194, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190)) + cbModelParam._m0[15u].w;
        float _2026 = fma(_1138, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136));
        float _2029 = fma(_1138, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136));
        float _2032 = fma(_1138, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136));
        float _2060;
        if (_2026 > 0.0)
        {
            _2060 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2060 = frontier_phi_19_17_ladder;
        }
        float _2262;
        if (_2029 > 0.0)
        {
            _2262 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2262 = frontier_phi_28_24_ladder;
        }
        float _2516;
        if (_2032 > 0.0)
        {
            _2516 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2516 = frontier_phi_40_35_ladder;
        }
        float _2518 = isnan(_2262) ? _2060 : (isnan(_2060) ? _2262 : min(_2060, _2262));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _2026) + _2015;
        float _2524 = (_2519 * _2029) + _2019;
        float _2525 = (_2519 * _2032) + _2023;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1968);
            frontier_phi_18_40_ladder = _2653.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2653.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2653.x * cbModelParam._m0[1u].y;
        }
        _2048 = frontier_phi_18_40_ladder_2;
        _2050 = frontier_phi_18_40_ladder_1;
        _2052 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1136, _1137, _1138), _1968);
        _2048 = _2036.x * cbModelParam._m0[1u].y;
        _2050 = _2036.y * cbModelParam._m0[1u].y;
        _2052 = _2036.z * cbModelParam._m0[1u].y;
    }
    float _2056 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2057 = isnan(_2056) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2056 : min(cbModelParam._m0[25u].w, _2056));
    float _2146;
    float _2148;
    float _2150;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2110 = fma(_1198, cbModelParam._m0[21u].z, fma(_1194, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190)) + cbModelParam._m0[21u].w;
        float _2114 = fma(_1198, cbModelParam._m0[22u].z, fma(_1194, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190)) + cbModelParam._m0[22u].w;
        float _2118 = fma(_1198, cbModelParam._m0[23u].z, fma(_1194, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190)) + cbModelParam._m0[23u].w;
        float _2121 = fma(_1138, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136));
        float _2124 = fma(_1138, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136));
        float _2127 = fma(_1138, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136));
        float _2267;
        if (_2121 > 0.0)
        {
            _2267 = abs((1.0 - _2110) / _2121);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2110 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2267 = frontier_phi_30_26_ladder;
        }
        float _2543;
        if (_2124 > 0.0)
        {
            _2543 = abs((1.0 - _2114) / _2124);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2114 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2543 = frontier_phi_42_37_ladder;
        }
        float _2756;
        if (_2127 > 0.0)
        {
            _2756 = abs((1.0 - _2118) / _2127);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2118 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2756 = frontier_phi_51_48_ladder;
        }
        float _2758 = isnan(_2543) ? _2267 : (isnan(_2267) ? _2543 : min(_2267, _2543));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _2121) + _2110;
        float _2764 = (_2759 * _2124) + _2114;
        float _2765 = (_2759 * _2127) + _2118;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _2057);
            frontier_phi_27_51_ladder = _2993.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2993.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2993.x * cbModelParam._m0[1u].z;
        }
        _2146 = frontier_phi_27_51_ladder_2;
        _2148 = frontier_phi_27_51_ladder_1;
        _2150 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1136, _1137, _1138), _2057);
        _2146 = _2130.x * cbModelParam._m0[1u].z;
        _2148 = _2130.y * cbModelParam._m0[1u].z;
        _2150 = _2130.z * cbModelParam._m0[1u].z;
    }
    float _2163 = (((_1161 * _1113) + _1162) * _1128) * ((cbModelParam._m0[1u].w * (_2146 - _2048)) + _2048);
    float _2165 = (((_1161 * _1115) + _1162) * _1128) * ((cbModelParam._m0[1u].w * (_2148 - _2050)) + _2050);
    float _2167 = (((_1161 * _1116) + _1162) * _1128) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2170 = fma(_2167, cbSceneParam._m0[89u].z, fma(_2165, cbSceneParam._m0[89u].y, _2163 * cbSceneParam._m0[89u].x));
    float _2173 = fma(_2167, cbSceneParam._m0[90u].z, fma(_2165, cbSceneParam._m0[90u].y, _2163 * cbSceneParam._m0[90u].x));
    float _2176 = fma(_2167, cbSceneParam._m0[91u].z, fma(_2165, cbSceneParam._m0[91u].y, _2163 * cbSceneParam._m0[91u].x));
    uvec4 _2186 = floatBitsToUint(cbInstanceData._m0[_1088 + 5u]);
    uint _2188 = _2186.x * 14u;
    uint _2189 = _2188 + 13u;
    float _2196 = _1128 + (-1.0);
    float _2201 = (cbLight._m0[_2189].x * _2196) + 1.0;
    float _2202 = (cbLight._m0[_2189].y * _2196) + 1.0;
    float _2203 = (cbLight._m0[_2189].z * _2196) + 1.0;
    float _2204 = (cbLight._m0[_2189].w * _2196) + 1.0;
    uint _2205 = _2188 + 5u;
    float _2211 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2215 = _2188 + 4u;
    float _2221 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2225 = _2188 | 1u;
    float _2236 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_948, _949, _950));
    float _2239 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_948, _949, _950));
    float _4510 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _4521 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2244 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2246 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2253 = ((cbLight._m0[_2205].x * _2211) * _2246) + ((cbLight._m0[_2215].x * _2221) * _2244);
    float _2254 = ((_2211 * cbLight._m0[_2205].y) * _2246) + ((_2221 * cbLight._m0[_2215].y) * _2244);
    float _2255 = ((_2211 * cbLight._m0[_2205].z) * _2246) + ((_2221 * cbLight._m0[_2215].z) * _2244);
    uvec4 _2259 = floatBitsToUint(cbLight._m0[_2188 + 12u]);
    bool _2261 = _2259.x == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2261)
    {
        _2272 = _2253;
        _2274 = _2254;
        _2276 = _2255;
    }
    else
    {
        uint _2280 = _2188 + 6u;
        float _2296 = (dot(vec3(cbLight._m0[_2188 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2297 = _2296 * _2296;
        float _4532 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2298 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2299 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2272 = (((cbLight._m0[_2280].x * 0.3183098733425140380859375) * _2298) * _2299) + _2253;
        _2274 = (((cbLight._m0[_2280].y * 0.3183098733425140380859375) * _2298) * _2299) + _2254;
        _2276 = (((cbLight._m0[_2280].z * 0.3183098733425140380859375) * _2298) * _2299) + _2255;
    }
    bool _2279 = _2259.y == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2279)
    {
        _2317 = _2272;
        _2319 = _2274;
        _2321 = _2276;
    }
    else
    {
        uint _2487 = _2188 + 7u;
        float _2503 = (dot(vec3(cbLight._m0[_2188 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4548 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2506 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2317 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2272;
        _2319 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2274;
        _2321 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2276;
    }
    uint _2324 = _2188 + 8u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _951) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2188].x + _1033;
    float _2340 = cbLight._m0[_2188].y + _1034;
    float _2341 = cbLight._m0[_2188].z + _1035;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2188].xyz));
    float _4564 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _4575 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _2353 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2354 = dot(vec3(_948, _949, _950), vec3(_2346, _2347, _2348));
    float _4586 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2358 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2346, _2347, _2348));
    float _4597 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2362 = _2338 * _2338;
    float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
    float _2375 = 0.959999978542327880859375 - _1110;
    float _2377 = 0.959999978542327880859375 - _1111;
    float _2378 = 0.959999978542327880859375 - _1112;
    float _2385 = 1.0 - _2338;
    float _2396 = (0.5 / (((_2353 * ((_2352 * _2385) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2385) + _2338) * _2352))) * _2352;
    float _4608 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
    uint _2409 = _2188 + 9u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _951) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2225].x + _1033;
    float _2423 = cbLight._m0[_2225].y + _1034;
    float _2424 = cbLight._m0[_2225].z + _1035;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2225].xyz));
    float _4619 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2436 = dot(vec3(_948, _949, _950), vec3(_2429, _2430, _2431));
    float _4630 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2429, _2430, _2431));
    float _4641 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2421 * _2421;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
    float _2462 = 1.0 - _2421;
    float _2472 = (0.5 / (((_2353 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2462) + _2421) * _2435))) * _2435;
    float _4652 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    float _2484 = (((((_2455 * _2375) + _1113) * cbLight._m0[_2409].x) * _2474) * _2211) + (((((_2374 * _2375) + _1113) * cbLight._m0[_2324].x) * _2398) * _2221);
    float _2485 = (((((_2455 * _2377) + _1115) * cbLight._m0[_2409].y) * _2474) * _2211) + (((((_2374 * _2377) + _1115) * cbLight._m0[_2324].y) * _2398) * _2221);
    float _2486 = (((((_2455 * _2378) + _1116) * cbLight._m0[_2409].z) * _2474) * _2211) + (((((_2374 * _2378) + _1116) * cbLight._m0[_2324].z) * _2398) * _2221);
    float _2548;
    float _2550;
    float _2552;
    if (_2261)
    {
        _2548 = _2484;
        _2550 = _2485;
        _2552 = _2486;
    }
    else
    {
        uint _2554 = _2188 + 2u;
        uint _2558 = _2188 + 10u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _951) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _1033;
        float _2575 = cbLight._m0[_2554].y + _1034;
        float _2576 = cbLight._m0[_2554].z + _1035;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2554].xyz));
        float _4663 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2588 = dot(vec3(_948, _949, _950), vec3(_2581, _2582, _2583));
        float _4674 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4685 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
        float _2614 = 1.0 - _2573;
        float _2624 = (0.5 / (((_2353 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2614) + _2573) * _2587))) * _2587;
        float _4696 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2548 = (((((_2607 * _2375) + _1113) * cbLight._m0[_2558].x) * _2626) * _2627) + _2484;
        _2550 = (((((_2607 * _2377) + _1115) * cbLight._m0[_2558].y) * _2626) * _2627) + _2485;
        _2552 = (((((_2607 * _2378) + _1116) * cbLight._m0[_2558].z) * _2626) * _2627) + _2486;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2279)
    {
        _2662 = _2548;
        _2664 = _2550;
        _2666 = _2552;
    }
    else
    {
        uint _2673 = _2188 + 3u;
        uint _2677 = _2188 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _951) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _1033;
        float _2694 = cbLight._m0[_2673].y + _1034;
        float _2695 = cbLight._m0[_2673].z + _1035;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2673].xyz));
        float _4712 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2707 = dot(vec3(_948, _949, _950), vec3(_2700, _2701, _2702));
        float _4723 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4734 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2353 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2733) + _2692) * _2706))) * _2706;
        float _4745 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2662 = (((((_2726 * _2375) + _1113) * cbLight._m0[_2677].x) * _2745) * _2746) + _2548;
        _2664 = (((((_2726 * _2377) + _1115) * cbLight._m0[_2677].y) * _2745) * _2746) + _2550;
        _2666 = (((((_2726 * _2378) + _1116) * cbLight._m0[_2677].z) * _2745) * _2746) + _2552;
    }
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_2186.y == 0u)
    {
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2821;
        float _2823 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2821;
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2821;
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.x;
        uint _2848 = uint((float(_2836.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1051) / _2837))) + floor(float(uint(cbSceneParam._m0[85u].x * _1050) / _2837)));
        float _2858 = (log2(_2824 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2859 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        uint _2862 = uint(isnan(14.0) ? _2859 : (isnan(_2859) ? 14.0 : min(_2859, 14.0)));
        uvec4 _2867 = texelFetch(g_lightClusterGridBuffer, int(((_2862 << 2u) + (_2848 << 6u)) >> 2u));
        uint _2868 = _2867.x;
        uint _2869 = _2836.z;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((((1u << ((_2869 >> 4u) & 15u)) + 4294967295u) & _2868) == 0u) || ((_2869 & 240u) == 0u))
        {
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
        }
        else
        {
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            uint _3165 = 0u;
            uint _3174;
            bool _3175;
            for (;;)
            {
                _3174 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                _3175 = _3174 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3175)
                {
                    frontier_phi_68_pred = _3159;
                    frontier_phi_68_pred_1 = _3164;
                    frontier_phi_68_pred_2 = _3163;
                    frontier_phi_68_pred_3 = _3162;
                    frontier_phi_68_pred_4 = _3161;
                    frontier_phi_68_pred_5 = _3160;
                }
                else
                {
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    uint _3310;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3174;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    for (;;)
                    {
                        uint _3314 = uint(findLSB(_3310)) + (_3165 << 5u);
                        uint _3311 = (_3310 + 4294967295u) & _3310;
                        uint _3316 = _3314 * 48u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3336 = (_3314 * 48u) + 4u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3355 = (_3314 * 48u) + 8u;
                        vec3 _3366 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x));
                        float _3370 = _3330.x - _2822;
                        float _3371 = _3330.y - _2823;
                        float _3372 = _3330.z - _2824;
                        float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                        float _3376 = inversesqrt(_3373);
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3380 = dot(vec3(_1069, _1072, _1075), vec3(_3377, _3378, _3379));
                        float _3385 = 1.0 - (_3373 * _3330.w);
                        float _4771 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3387 = sqrt(_3373) * _3349.w;
                        float _3390 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3380) + _3391;
                        float _3397 = _3387 * _3387;
                        float _3401 = ((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3386) / ((_3397 * 0.699999988079071044921875) + 1.0);
                        float _3405 = (-0.0) - _2822;
                        float _3406 = (-0.0) - _2823;
                        float _3407 = (-0.0) - _2824;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3422 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                        float _3423 = 1.0 - _1144;
                        float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                        float _3431 = _3430 * _3430;
                        float _3432 = _3431 * _3431;
                        float _3433 = _3412 + _3377;
                        float _3434 = _3413 + _3378;
                        float _3435 = _3414 + _3379;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3443 = dot(vec3(_1069, _1072, _1075), vec3(_3412, _3413, _3414));
                        float _4787 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3447 = dot(vec3(_1069, _1072, _1075), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                        float _4798 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                        float _3455 = _3390 * _3431;
                        float _3456 = _3455 * _3455;
                        float _3459 = ((1.0 - _3456) * _3380) + _3456;
                        float _4809 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3460 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3461 = 1.0 - _3431;
                        float _3471 = (0.5 / (((_3460 * ((_3446 * _3461) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3431) * _3446))) * _3460;
                        float _4820 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3482 = (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3454 * _3454) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125))) * _3386;
                        _3234 = (_3401 * _3349.x) + _3307;
                        _3235 = (_3401 * _3349.y) + _3308;
                        _3236 = (_3401 * _3349.z) + _3309;
                        _3231 = (_3482 * _3366.x) + _3304;
                        _3232 = (_3482 * _3366.y) + _3305;
                        _3233 = (_3482 * _3366.z) + _3306;
                        if (_3311 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3311;
                        }
                    }
                    frontier_phi_68_pred = _3231;
                    frontier_phi_68_pred_1 = _3236;
                    frontier_phi_68_pred_2 = _3235;
                    frontier_phi_68_pred_3 = _3234;
                    frontier_phi_68_pred_4 = _3233;
                    frontier_phi_68_pred_5 = _3232;
                }
                _2999 = frontier_phi_68_pred;
                _3009 = frontier_phi_68_pred_1;
                _3007 = frontier_phi_68_pred_2;
                _3005 = frontier_phi_68_pred_3;
                _3003 = frontier_phi_68_pred_4;
                _3001 = frontier_phi_68_pred_5;
                uint _3166 = _3165 + 1u;
                if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3159 = _2999;
                    _3160 = _3001;
                    _3161 = _3003;
                    _3162 = _3005;
                    _3163 = _3007;
                    _3164 = _3009;
                    _3165 = _3166;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
        }
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.z;
        uint _3015 = (_3013 >> 8u) & 15u;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((4294967295u << _3015) & _2868) == 0u)
        {
            _3127 = _2998;
            _3129 = _3000;
            _3131 = _3002;
            _3133 = _3004;
            _3135 = _3006;
            _3137 = _3008;
        }
        else
        {
            float _3152 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
            float _3153 = _3152 * _2822;
            float _3154 = _3152 * _2823;
            float _3155 = _3152 * _2824;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3015 < ((_3013 >> 12u) & 15u))
            {
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3287 = _2998;
                float _3288 = _3000;
                float _3289 = _3002;
                float _3290 = _3004;
                float _3291 = _3006;
                float _3292 = _3008;
                uint _3293 = _3015;
                uint _3302;
                bool _3303;
                for (;;)
                {
                    _3302 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                    _3303 = _3302 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3303)
                    {
                        frontier_phi_79_pred = _3292;
                        frontier_phi_79_pred_1 = _3291;
                        frontier_phi_79_pred_2 = _3290;
                        frontier_phi_79_pred_3 = _3289;
                        frontier_phi_79_pred_4 = _3288;
                        frontier_phi_79_pred_5 = _3287;
                    }
                    else
                    {
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        float _3514 = _3292;
                        uint _3515 = _3302;
                        uint _3516;
                        vec4 _3541;
                        float _3542;
                        vec4 _3557;
                        vec3 _3569;
                        vec4 _3584;
                        vec4 _3599;
                        float _3645;
                        bool _3646;
                        for (;;)
                        {
                            uint _3526 = ((_3293 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3515));
                            _3516 = (_3515 + 4294967295u) & _3515;
                            uint _3528 = _3526 * 40u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3542 = _3541.w;
                            uint _3544 = (_3526 * 40u) + 4u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3526 * 40u) + 8u;
                            _3569 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x));
                            uint _3571 = (_3526 * 40u) + 16u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3586 = (_3526 * 40u) + 20u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3526 * 40u) + 24u;
                            vec4 _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3620 = (_3526 * 40u) + 28u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3645 = fma(_2824, _3633.z, fma(_2823, _3633.y, _3633.x * _2822)) + _3633.w;
                            _3646 = !((fma(_2824, _3614.z, fma(_2823, _3614.y, _3614.x * _2822)) + _3614.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3646)
                            {
                                float _3673 = _3541.x - _2822;
                                float _3674 = _3541.y - _2823;
                                float _3675 = _3541.z - _2824;
                                float _3676 = dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675));
                                float _3679 = inversesqrt(_3676);
                                float _3680 = _3679 * _3673;
                                float _3681 = _3679 * _3674;
                                float _3682 = _3679 * _3675;
                                float _3686 = 1.0 - (_3676 / (_3542 * _3542));
                                float _4831 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3691 = sqrt(_3676) * _3557.w;
                                float _3693 = 1.39999997615814208984375 / (_3691 + 1.39999997615814208984375);
                                float _3694 = _3693 * _3693;
                                float _3697 = ((1.0 - _3694) * dot(vec3(_3680, _3681, _3682), vec3(_1069, _1072, _1075))) + _3694;
                                float _3700 = _3691 * _3691;
                                float _3704 = (fma(_2824, _3584.z, fma(_2823, _3584.y, _3584.x * _2822)) + _3584.w) / _3645;
                                float _3705 = (fma(_2824, _3599.z, fma(_2823, _3599.y, _3599.x * _2822)) + _3599.w) / _3645;
                                float _3709 = 1.0 - dot(vec2(_3704, _3705), vec2(_3704, _3705));
                                float _4847 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3711 = _3710 * (((isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0))) * _3687) / ((_3700 * 0.699999988079071044921875) + 1.0));
                                float _3723 = exp2(log2(1.0 / ((_3700 * 3.5) + 5.0)) * 0.25);
                                float _3724 = 1.0 - _1144;
                                float _3731 = sqrt(1.0 - ((1.0 - (_3724 * _3724)) * (1.0 - (_3723 * _3723))));
                                float _3732 = _3731 * _3731;
                                float _3733 = _3732 * _3732;
                                float _3734 = _3680 - _3153;
                                float _3735 = _3681 - _3154;
                                float _3736 = _3682 - _3155;
                                float _3740 = inversesqrt(dot(vec3(_3734, _3735, _3736), vec3(_3734, _3735, _3736)));
                                float _3744 = dot(vec3(_1069, _1072, _1075), vec3((-0.0) - _3153, (-0.0) - _3154, (-0.0) - _3155));
                                float _4858 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3748 = dot(vec3(_1069, _1072, _1075), vec3(_3740 * _3734, _3740 * _3735, _3740 * _3736));
                                float _4869 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3755 = ((_3751 * _3751) * (_3733 + (-1.0))) + 1.0;
                                float _3756 = _3693 * _3732;
                                float _3757 = _3756 * _3756;
                                float _3763 = ((1.0 - _3757) * dot(vec3(_1069, _1072, _1075), vec3(_3680, _3681, _3682))) + _3757;
                                float _4880 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3765 = 1.0 - _3732;
                                float _3775 = (0.5 / (((_3764 * ((_3747 * _3765) + _3732)) + 9.9999999392252902907785028219223e-09) + (((_3764 * _3765) + _3732) * _3747))) * _3764;
                                float _4891 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3785 = (_3710 * _3687) * (((_3733 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3755 * _3755) * ((_3700 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3711 * _3557.y;
                                frontier_phi_85_pred_1 = _3711 * _3557.x;
                                frontier_phi_85_pred_2 = _3785 * _3569.z;
                                frontier_phi_85_pred_3 = _3785 * _3569.y;
                                frontier_phi_85_pred_4 = _3785 * _3569.x;
                                frontier_phi_85_pred_5 = _3711 * _3557.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3793 = frontier_phi_85_pred;
                            _3792 = frontier_phi_85_pred_1;
                            _3791 = frontier_phi_85_pred_2;
                            _3790 = frontier_phi_85_pred_3;
                            _3789 = frontier_phi_85_pred_4;
                            _3794 = frontier_phi_85_pred_5;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            if (_3516 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3516;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3501;
                        frontier_phi_79_pred_1 = _3500;
                        frontier_phi_79_pred_2 = _3499;
                        frontier_phi_79_pred_3 = _3498;
                        frontier_phi_79_pred_4 = _3497;
                        frontier_phi_79_pred_5 = _3496;
                    }
                    _3138 = frontier_phi_79_pred;
                    _3136 = frontier_phi_79_pred_1;
                    _3134 = frontier_phi_79_pred_2;
                    _3132 = frontier_phi_79_pred_3;
                    _3130 = frontier_phi_79_pred_4;
                    _3128 = frontier_phi_79_pred_5;
                    uint _3294 = _3293 + 1u;
                    if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3287 = _3128;
                        _3288 = _3130;
                        _3289 = _3132;
                        _3290 = _3134;
                        _3291 = _3136;
                        _3292 = _3138;
                        _3293 = _3294;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3132;
                frontier_phi_60_61_ladder_1 = _3138;
                frontier_phi_60_61_ladder_2 = _3136;
                frontier_phi_60_61_ladder_3 = _3134;
                frontier_phi_60_61_ladder_4 = _3130;
                frontier_phi_60_61_ladder_5 = _3128;
            }
            else
            {
                frontier_phi_60_61_ladder = _3002;
                frontier_phi_60_61_ladder_1 = _3008;
                frontier_phi_60_61_ladder_2 = _3006;
                frontier_phi_60_61_ladder_3 = _3004;
                frontier_phi_60_61_ladder_4 = _3000;
                frontier_phi_60_61_ladder_5 = _2998;
            }
            _3127 = frontier_phi_60_61_ladder_5;
            _3129 = frontier_phi_60_61_ladder_4;
            _3131 = frontier_phi_60_61_ladder;
            _3133 = frontier_phi_60_61_ladder_3;
            _3135 = frontier_phi_60_61_ladder_2;
            _3137 = frontier_phi_60_61_ladder_1;
        }
        float _3142 = isnan(1.0) ? _1128 : (isnan(_1128) ? 1.0 : min(_1128, 1.0));
        _2881 = (_3142 * _3133) + _2317;
        _2883 = (_3142 * _3135) + _2319;
        _2885 = (_3142 * _3137) + _2321;
        _2887 = ((_3127 * _1113) * _3142) + _2662;
        _2889 = ((_3129 * _1115) * _3142) + _2664;
        _2891 = ((_3131 * _1116) * _3142) + _2666;
    }
    else
    {
        _2881 = _2317;
        _2883 = _2319;
        _2885 = _2321;
        _2887 = _2662;
        _2889 = _2664;
        _2891 = _2666;
    }
    uint _2897 = _1089 + uint(cbMatDynParam._m0[0u].w);
    float _2903 = ((((((_861.x - _856.x) * _839) + _856.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _785) * cbMtdParam._m0[20u].x)) * _794) * cbInstanceData._m0[_2897].x;
    float _2904 = ((((((_861.y - _856.y) * _839) + _856.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_774.y - _772) * _753) + _772)) * cbMtdParam._m0[20u].y)) * _794) * cbInstanceData._m0[_2897].y;
    float _2905 = ((((((_861.z - _856.z) * _839) + _856.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_774.z - _773) * _753) + _773)) * cbMtdParam._m0[20u].z)) * _794) * cbInstanceData._m0[_2897].z;
    float _4907 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _4918 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _4929 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _2922 = (((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2881 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1128))) + ((_2887 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1957)) * cbPerFrame._m0[3u].x)) + _2903;
    float _2924 = (_2904 + ((_2889 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1957)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2883 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1128)));
    float _2926 = (_2905 + ((_2891 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1957)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2885 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1128)));
    float _2927 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    float _2928 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
    float _2929 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
    float _2935 = cbMtdParam._m0[2u].x * _2903;
    float _2936 = cbMtdParam._m0[2u].y * _2904;
    float _2937 = cbMtdParam._m0[2u].z * _2905;
    float _4955 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2939 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
    uint _2940 = _1088 + 6u;
    float _2948 = _1050 / cbSceneParam._m0[86u].x;
    float _2949 = _1051 / cbSceneParam._m0[86u].y;
    vec4 _2963 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2965 = _2963.x;
    float _2966 = _2963.y;
    float _2967 = _2963.z;
    float _2968 = _2963.w;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3023 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3024 = _3023 / _975;
        float _3035 = _3024 * _1026;
        float _3036 = _1027 * _3024;
        float _3037 = (-0.0) - _3036;
        float _3038 = _3024 * _1028;
        float _3040 = (cbSceneParam._m0[77u].w * _3037) / _3023;
        float _3041 = _3040 + cbSceneParam._m0[79u].w;
        float _3042 = cbSceneParam._m0[79u].w - _3036;
        float _3048 = sqrt(((_3035 * _3035) + (_3036 * _3036)) + (_3038 * _3038));
        float _3051 = (1.0 - (cbSceneParam._m0[77u].w / _3023)) * _3048;
        float _3056 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3058 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3244;
        if (abs((_3037 - _3040) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3244 = ((((_3041 > 0.0) ? exp2(_3056 * _3041) : (2.0 - exp2(_3058 * _3041))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3051;
        }
        else
        {
            float _3188 = 1.0 / cbSceneParam._m0[80u].x;
            float _3189 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : max(_3041, _3042));
            float _3190 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : min(_3041, _3042));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            _3244 = ((abs(_3048 / _3037) * cbSceneParam._m0[80u].y) * ((((_3199 - _3200) * 2.0) - ((exp2(_3056 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0)))) - exp2(_3056 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))))) * _3188)) - ((exp2(_3058 * _3199) - exp2(_3058 * _3200)) * _3188))) + (_3051 * cbSceneParam._m0[80u].z);
        }
        vec4 _3246 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, 1.0), 0.0);
        float _3255 = exp2((_3244 * (-1.44269502162933349609375)) * (1.0 - _3246.w));
        float _3256 = log2(_3255);
        float _3272 = log2(_2968);
        _3060 = (exp2(_3272 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].x)) * _3246.x) / cbSceneParam._m0[78u].x)) + _2965;
        _3062 = (exp2(_3272 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].y)) * _3246.y) / cbSceneParam._m0[78u].y)) + _2966;
        _3064 = (exp2(_3272 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].z)) * _3246.z) / cbSceneParam._m0[78u].z)) + _2967;
        _3066 = _3255 * _2968;
    }
    else
    {
        _3060 = _2965;
        _3062 = _2966;
        _3064 = _2967;
        _3066 = _2968;
    }
    bool _3282;
    vec4 _3076;
    vec4 _3098;
    float _3100;
    float _3104;
    float _3105;
    float _3106;
    float _3109;
    float _3112;
    float _3115;
    float _3116;
    bool _3126;
    for (;;)
    {
        _3076 = cbMatDynParam._m0[0u];
        float _3078 = roundEven(_3076.y);
        bool _3079 = _3078 == 3.0;
        float _3080 = log2(_3066);
        float _3084 = exp2(_3080 * cbSceneParam._m0[78u].x);
        float _3085 = exp2(_3080 * cbSceneParam._m0[78u].y);
        float _3086 = exp2(_3080 * cbSceneParam._m0[78u].z);
        float _3087 = _3084 * _2927;
        float _3088 = _3085 * _2928;
        float _3089 = _3086 * _2929;
        float _3096 = _1039 + (-0.5);
        _3098 = cbMtdParam._m0[1u];
        _3100 = _3098.y * _3096;
        float _3103 = (_3078 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3104 = _3103 * (_3079 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3060)));
        _3105 = _3103 * (_3079 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3062)));
        _3106 = _3103 * (_3079 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3064)));
        _3109 = ((_2935 * _2939) * _3084) * _3103;
        _3112 = ((_2936 * _2939) * _3085) * _3103;
        _3115 = ((_2937 * _2939) * _3086) * _3103;
        _3116 = _3096 * 0.999000012874603271484375;
        _3126 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3126)
        {
            if ((cbInstanceData._m0[_1088 + 7u].x + _3116) < 0.5)
            {
                _3282 = true;
                break;
            }
        }
        uint _3223 = _1089 + uint(_3076.w);
        if ((cbInstanceData._m0[_3223].w < 1.0) && ((cbInstanceData._m0[_3223].w + _3116) < 0.5))
        {
            _3282 = true;
            break;
        }
        if ((_3100 + 1.0) < _3098.x)
        {
            _3282 = true;
            break;
        }
        _3282 = false;
        break;
    }
    float _3487;
    if (_3282)
    {
        discard_state = true;
        _3487 = 0.0;
    }
    else
    {
        _3487 = cbInstanceData._m0[_2940].w;
    }
    SV_Target.x = _3104;
    SV_Target.y = _3105;
    SV_Target.z = _3106;
    SV_Target.w = _3487;
    SV_Target_1.x = _3109;
    SV_Target_1.y = _3112;
    SV_Target_1.z = _3115;
    SV_Target_1.w = cbInstanceData._m0[_2940].w;
    discard_exit();
}


