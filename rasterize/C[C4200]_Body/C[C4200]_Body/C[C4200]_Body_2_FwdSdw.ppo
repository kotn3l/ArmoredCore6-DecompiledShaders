#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1512;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _284 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _297 = exp2(log2(_284.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _313 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _317 = _313.z;
    float _325 = exp2(log2(_317 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    float _348 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _350 = isnan(4.0) ? _349 : (isnan(_349) ? 4.0 : min(_349, 4.0));
    float _363 = floor(_350);
    vec4 _366 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _363));
    vec4 _391 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _402 = cbMtdParam._m0[9u].x * _391.x;
    float _403 = cbMtdParam._m0[9u].y * _391.y;
    float _404 = cbMtdParam._m0[9u].z * _391.z;
    float _411 = (((cbMtdParam._m0[10u].x * _366.x) - _402) * _327) + _402;
    float _412 = (((cbMtdParam._m0[10u].y * _366.y) - _403) * _327) + _403;
    float _413 = (((cbMtdParam._m0[10u].z * _366.z) - _404) * _327) + _404;
    float _419 = exp2(log2(_313.w) * cbMtdParam._m0[24u].w);
    vec4 _432 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _452 = (((cbMtdParam._m0[16u].x * _432.x) - _411) * _419) + _411;
    float _453 = (((cbMtdParam._m0[16u].y * _432.y) - _412) * _419) + _412;
    float _454 = (((cbMtdParam._m0[16u].z * _432.z) - _413) * _419) + _413;
    vec4 _467 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _492 = (_284.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _467.x) - _452) * _299) + _452);
    float _494 = (_284.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _467.y) - _453) * _299) + _453);
    float _496 = (_284.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _467.z) - _454) * _299) + _454);
    vec4 _509 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _528 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_264.x + 0.00999999977648258209228515625));
    float _530 = _528 * (cbMtdParam._m0[25u].z + 1.0);
    float _4185 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _538 = (_531 * ((cbMtdParam._m0[11u].x * _509.x) - _492)) + _492;
    float _539 = (((cbMtdParam._m0[11u].y * _509.y) - _494) * _531) + _494;
    float _540 = (((cbMtdParam._m0[11u].z * _509.z) - _496) * _531) + _496;
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[30u].z;
    _197[0u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[32u].z;
    _197[1u] = cbMtdParam._m0[32u].w;
    _196[2u] = cbMtdParam._m0[32u].x;
    _197[2u] = cbMtdParam._m0[32u].y;
    _196[3u] = cbMtdParam._m0[31u].z;
    _197[3u] = cbMtdParam._m0[31u].w;
    _196[4u] = cbMtdParam._m0[31u].x;
    _197[4u] = cbMtdParam._m0[31u].y;
    float _577 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    uint _579 = uint(int(isnan(4.0) ? _577 : (isnan(_577) ? 4.0 : min(_577, 4.0))));
    float _586 = ((_197[_579] - cbMtdParam._m0[23u].z) * _327) + cbMtdParam._m0[23u].z;
    float _589 = ((cbMtdParam._m0[23u].w - _586) * _419) + _586;
    float _592 = ((cbMtdParam._m0[26u].y - _589) * _299) + _589;
    float _597 = (cbMtdParam._m0[25u].y + 1.0) * _528;
    float _4206 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _600 = _592 - (_592 * _598);
    vec4 _613 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _363));
    vec4 _631 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _639 = cbMtdParam._m0[23u].x + _631.z;
    float _642 = (((_613.z + _196[_579]) - _639) * _327) + _639;
    vec4 _654 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _665 = (((_654.z - _642) + cbMtdParam._m0[30u].x) * _419) + _642;
    float _671 = ((((_317 * 2.0) * _665) - _665) * cbMtdParam._m0[25u].w) + _665;
    vec4 _683 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _694 = (((cbMtdParam._m0[24u].z + _683.z) - _671) * _299) + _671;
    vec4 _706 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _718 = ((_706.z - _694) * _598) + _694;
    float _731 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _754 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_731 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _731) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _758 = cbPerFrame._m0[22u].x * 2.0;
    float _759 = _758 * cbMtdParam._m0[28u].z;
    float _762 = (_754.x * 0.5) + (-0.25);
    float _765 = (_754.y * 0.5) + (-0.25);
    float _766 = _765 * cbMtdParam._m0[28u].y;
    float _768 = (-0.0) - (cbMtdParam._m0[28u].y * _762);
    float _770 = fract(_759);
    float _772 = fract(_759 + 0.5);
    float _783 = abs((_770 * 2.0) + (-1.0));
    vec4 _800 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_770 * _768) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_766 * _770) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _802 = _800.x;
    float _803 = _800.y;
    float _804 = _800.z;
    vec4 _805 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_772 * _768) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_766 * _772) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _816 = ((_805.x - _802) * _783) + _802;
    float _823 = exp2(log2(_816 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _824 = isnan(cbMtdParam._m0[29u].y) ? _823 : (isnan(_823) ? cbMtdParam._m0[29u].y : max(_823, cbMtdParam._m0[29u].y));
    float _825 = isnan(cbMtdParam._m0[29u].z) ? _824 : (isnan(_824) ? cbMtdParam._m0[29u].z : min(_824, cbMtdParam._m0[29u].z));
    float _849 = (cbMtdParam._m0[33u].x * _731) + TEXCOORD;
    float _850 = (cbMtdParam._m0[33u].y * _731) + TEXCOORD_1;
    float _853 = _758 * cbMtdParam._m0[27u].w;
    float _854 = _765 * cbMtdParam._m0[27u].z;
    float _856 = (-0.0) - (cbMtdParam._m0[27u].z * _762);
    float _857 = fract(_853);
    float _859 = fract(_853 + 0.5);
    float _870 = abs((_857 * 2.0) + (-1.0));
    vec4 _887 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_857 * _856) + _849) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_854 * _857) + _850) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _892 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_859 * _856) + _849) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_854 * _859) + _850) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _929 = ((_613.x - _633) * _327) + _633;
    float _930 = ((_613.y - _634) * _327) + _634;
    float _935 = ((_654.x - _929) * _419) + _929;
    float _936 = ((_654.y - _930) * _419) + _930;
    float _945 = ((((_683.x - _935) * _299) + _935) * 2.0) + (-1.0);
    float _946 = ((((_683.y - _936) * _299) + _936) * 2.0) + (-1.0);
    float _947 = dot(vec2(_945, _946), vec2(_945, _946));
    float _4227 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _952 = sqrt(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))));
    float _961 = ((cbMtdParam._m0[26u].z * ((_313.x * 2.0) + (-1.0))) + _945) + (((((_706.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _598);
    float _962 = ((cbMtdParam._m0[26u].z * ((_313.y * 2.0) + (-1.0))) + _946) + (((((_706.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _598);
    float _965 = fma(_952, _237 * NORMAL.x, fma(_962, _244 * TANGENT.x, (_230 * _222) * _961));
    float _968 = fma(_952, _237 * NORMAL.y, fma(_962, _244 * TANGENT.y, (_230 * _223) * _961));
    float _971 = fma(_952, _237 * NORMAL.z, fma(_962, _244 * TANGENT.z, (_230 * _224) * _961));
    float _975 = inversesqrt(dot(vec3(_965, _968, _971), vec3(_965, _968, _971)));
    float _976 = _975 * _965;
    float _977 = _975 * _968;
    float _978 = _975 * _971;
    float _4238 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _979 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4260 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4271 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4282 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _983 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _999 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1049 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1039);
    float _1050 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1039);
    float _1051 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1039);
    float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
    float _1056 = _1049 * _1055;
    float _1057 = _1050 * _1055;
    float _1058 = _1051 * _1055;
    float _1064 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1065 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1083 = fma(_978, cbSceneParam._m0[5u].z, fma(_977, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _976));
    float _1086 = fma(_978, cbSceneParam._m0[6u].z, fma(_977, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _976));
    float _1089 = fma(_978, cbSceneParam._m0[7u].z, fma(_977, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _976));
    uint _1102 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1103 = _1102 + 9u;
    uint _1104 = _1103 + uint(cbMatDynParam._m0[0u].w);
    float _1110 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1104].x;
    float _1111 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1104].y;
    float _1112 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * cbInstanceData._m0[_1104].z;
    float _4293 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _1116 = 1.0 - _983;
    float _1117 = _1113 * _1116;
    float _1118 = _1114 * _1116;
    float _1119 = _1115 * _1116;
    float _1124 = (_1113 + (-0.039999999105930328369140625)) * _983;
    float _1125 = (_1114 + (-0.039999999105930328369140625)) * _983;
    float _1126 = (_1115 + (-0.039999999105930328369140625)) * _983;
    float _1127 = _1124 + 0.039999999105930328369140625;
    float _1129 = _1125 + 0.039999999105930328369140625;
    float _1130 = _1126 + 0.039999999105930328369140625;
    vec4 _1139 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1064, cbSceneParam._m0[86u].y * _1065));
    float _1142 = _1139.x * TEXCOORD_3.w;
    float _1143 = dot(vec3(_976, _977, _978), vec3(_1056, _1057, _1058));
    float _1146 = _1143 * 2.0;
    float _1150 = (_1146 * _976) - _1056;
    float _1151 = (_1146 * _977) - _1057;
    float _1152 = (_1146 * _978) - _1058;
    float _1156 = abs(dot(vec3(_1056, _1057, _1058), vec3(_976, _977, _978)));
    float _4326 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1158 = sqrt(_979);
    float _1169 = exp2((_1158 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1158 * 3.0));
    float _1175 = (1.0 - _1169) * ((_1158 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1176 = _1169 * _1158;
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1212 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1511;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1238 = fma(_1212, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1204));
        float _1242 = fma(_1212, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1204));
        float _1246 = fma(_1212, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1204));
        float _1270 = _1204 + _976;
        float _1271 = _1208 + _977;
        float _1272 = _1212 + _978;
        float _1282 = fma(_1272, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1270)) - _1238;
        float _1283 = fma(_1272, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1270)) - _1242;
        float _1284 = fma(_1272, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1270)) - _1246;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1300 = ((_1288 * _1282) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1238 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1288 * _1283) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1242 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1284) / cbModelParam._m0[34u].z) + ((((((_1246 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1339 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1305.x + (-0.5));
        float _1341 = _1339 * (_1305.y + (-0.5));
        float _1342 = _1339 * (_1305.z + (-0.5));
        float _1349 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1312.x + (-0.5));
        float _1351 = _1349 * (_1312.y + (-0.5));
        float _1352 = _1349 * (_1312.z + (-0.5));
        float _1359 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1319.x + (-0.5));
        float _1361 = _1359 * (_1319.y + (-0.5));
        float _1362 = _1359 * (_1319.z + (-0.5));
        float _1369 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1326.x + (-0.5));
        float _1371 = _1369 * (_1326.y + (-0.5));
        float _1372 = _1369 * (_1326.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1393 = (dot(vec3(_976, _977, _978), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1403 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4374 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1405 + 1.0))) + _1410) * _1373;
        float _1420 = _1341 * 0.5;
        float _1421 = _1351 * 0.5;
        float _1422 = _1361 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_976, _977, _978), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4407 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1447 + 1.0))) + _1452) * _1374;
        float _1462 = _1342 * 0.5;
        float _1463 = _1352 * 0.5;
        float _1464 = _1362 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_976, _977, _978), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4440 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1489 + 1.0))) + _1494) * _1375;
        _1511 = _1342;
        _1513 = _1341;
        _1514 = _1340;
        _1515 = _1352;
        _1516 = _1351;
        _1517 = _1350;
        _1518 = _1362;
        _1519 = _1361;
        _1520 = _1360;
        _1521 = _1375;
        _1522 = _1374;
        _1523 = _1373;
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1512;
        _1513 = _1512;
        _1514 = _1512;
        _1515 = _1512;
        _1516 = _1512;
        _1517 = _1512;
        _1518 = _1512;
        _1519 = _1512;
        _1520 = _1512;
        _1521 = _1512;
        _1522 = _1512;
        _1523 = _1512;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1212, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204));
        float _1553 = fma(_1212, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204));
        float _1557 = fma(_1212, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204));
        float _1580 = _1204 + _976;
        float _1581 = _1208 + _977;
        float _1582 = _1212 + _978;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_976, _977, _978), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4503 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_976, _977, _978), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4536 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_976, _977, _978), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4569 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1512;
        _1819 = _1512;
        _1820 = _1512;
        _1821 = _1512;
        _1822 = _1512;
        _1823 = _1512;
        _1824 = _1512;
        _1825 = _1512;
        _1826 = _1512;
        _1827 = _1512;
        _1828 = _1512;
        _1829 = _1512;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1524)) + _1524;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1525)) + _1525;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1526)) + _1526;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1150 * 0.5;
    float _1887 = _1151 * 0.5;
    float _1888 = _1152 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1511, _1515, _1518, _1521));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _979);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1212, cbModelParam._m0[13u].z, fma(_1208, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1204)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1212, cbModelParam._m0[14u].z, fma(_1208, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1204)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1212, cbModelParam._m0[15u].z, fma(_1208, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1204)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1152, cbModelParam._m0[13u].z, fma(_1151, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1150));
        float _2016 = fma(_1152, cbModelParam._m0[14u].z, fma(_1151, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1150));
        float _2019 = fma(_1152, cbModelParam._m0[15u].z, fma(_1151, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1150));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2047 = frontier_phi_14_12_ladder;
        }
        float _2219;
        if (_2016 > 0.0)
        {
            _2219 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2219 = frontier_phi_23_19_ladder;
        }
        float _2513;
        if (_2019 > 0.0)
        {
            _2513 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2513 = frontier_phi_35_30_ladder;
        }
        float _2515 = isnan(_2219) ? _2047 : (isnan(_2047) ? _2219 : min(_2047, _2219));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _2013) + _2002;
        float _2521 = (_2516 * _2016) + _2006;
        float _2522 = (_2516 * _2019) + _2010;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_13_35_ladder = _2667.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2667.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2667.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_13_35_ladder_2;
        _2037 = frontier_phi_13_35_ladder_1;
        _2039 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1150, _1151, _1152), _1955);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _979);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2097 = fma(_1212, cbModelParam._m0[21u].z, fma(_1208, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1204)) + cbModelParam._m0[21u].w;
        float _2101 = fma(_1212, cbModelParam._m0[22u].z, fma(_1208, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1204)) + cbModelParam._m0[22u].w;
        float _2105 = fma(_1212, cbModelParam._m0[23u].z, fma(_1208, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1204)) + cbModelParam._m0[23u].w;
        float _2108 = fma(_1152, cbModelParam._m0[21u].z, fma(_1151, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1150));
        float _2111 = fma(_1152, cbModelParam._m0[22u].z, fma(_1151, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1150));
        float _2114 = fma(_1152, cbModelParam._m0[23u].z, fma(_1151, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1150));
        float _2224;
        if (_2108 > 0.0)
        {
            _2224 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2224 = frontier_phi_25_21_ladder;
        }
        float _2540;
        if (_2111 > 0.0)
        {
            _2540 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2540 = frontier_phi_37_32_ladder;
        }
        float _2878;
        if (_2114 > 0.0)
        {
            _2878 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2878 = frontier_phi_47_44_ladder;
        }
        float _2880 = isnan(_2540) ? _2224 : (isnan(_2224) ? _2540 : min(_2224, _2540));
        float _2881 = isnan(_2878) ? _2880 : (isnan(_2880) ? _2878 : min(_2880, _2878));
        float _2885 = (_2881 * _2108) + _2097;
        float _2886 = (_2881 * _2111) + _2101;
        float _2887 = (_2881 * _2114) + _2105;
        float _2888 = _2881 * 9.9999997473787516355514526367188e-05;
        float _2889 = (-1.0) - _2888;
        float _2891 = _2888 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2887 > _2891) || ((_2887 < _2889) || ((_2886 > _2891) || ((_2886 < _2889) || ((_2885 < _2889) || (_2885 > _2891))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2887, cbModelParam._m0[17u].z, fma(_2886, cbModelParam._m0[17u].y, _2885 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2887, cbModelParam._m0[18u].z, fma(_2886, cbModelParam._m0[18u].y, _2885 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2887, cbModelParam._m0[19u].z, fma(_2886, cbModelParam._m0[19u].y, _2885 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_22_47_ladder = _3009.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3009.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3009.x * cbModelParam._m0[1u].z;
        }
        _2133 = frontier_phi_22_47_ladder_2;
        _2135 = frontier_phi_22_47_ladder_1;
        _2137 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1150, _1151, _1152), _2044);
        _2133 = _2117.x * cbModelParam._m0[1u].z;
        _2135 = _2117.y * cbModelParam._m0[1u].z;
        _2137 = _2117.z * cbModelParam._m0[1u].z;
    }
    float _2150 = (((_1175 * _1127) + _1176) * _1142) * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2152 = (((_1175 * _1129) + _1176) * _1142) * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2154 = (((_1175 * _1130) + _1176) * _1142) * ((cbModelParam._m0[1u].w * (_2137 - _2039)) + _2039);
    float _2157 = fma(_2154, cbSceneParam._m0[89u].z, fma(_2152, cbSceneParam._m0[89u].y, _2150 * cbSceneParam._m0[89u].x));
    float _2160 = fma(_2154, cbSceneParam._m0[90u].z, fma(_2152, cbSceneParam._m0[90u].y, _2150 * cbSceneParam._m0[90u].x));
    float _2163 = fma(_2154, cbSceneParam._m0[91u].z, fma(_2152, cbSceneParam._m0[91u].y, _2150 * cbSceneParam._m0[91u].x));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2211 = _2198 / _2210;
    float _2212 = _2202 / _2210;
    float _2213 = _2206 / _2210;
    float _2359;
    float _2360;
    float _2361;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2240 = ((uint(_2213 > cbSceneParam._m0[59u].y) + uint(_2213 > cbSceneParam._m0[59u].x)) + uint(_2213 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2241 = _2240 + 43u;
        uint _2249 = _2240 + 44u;
        uint _2257 = _2240 + 45u;
        uint _2265 = _2240 + 46u;
        float _2276 = fma(_2210, cbSceneParam._m0[_2241].w, fma(_2206, cbSceneParam._m0[_2241].z, fma(_2202, cbSceneParam._m0[_2241].y, _2198 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2210, cbSceneParam._m0[_2249].w, fma(_2206, cbSceneParam._m0[_2249].z, fma(_2202, cbSceneParam._m0[_2249].y, _2198 * cbSceneParam._m0[_2249].x)));
        float _2288 = fma(_2210, cbSceneParam._m0[_2265].w, fma(_2206, cbSceneParam._m0[_2265].z, fma(_2202, cbSceneParam._m0[_2265].y, _2198 * cbSceneParam._m0[_2265].x)));
        float _2292 = cbSceneParam._m0[33u].z * _2288;
        float _2294 = cbSceneParam._m0[33u].w * _2288;
        float _2297 = fma(_2210, cbSceneParam._m0[_2257].w, fma(_2206, cbSceneParam._m0[_2257].z, fma(_2202, cbSceneParam._m0[_2257].y, _2198 * cbSceneParam._m0[_2257].x))) / _2288;
        float _2345 = (cbSceneParam._m0[33u].x - sqrt(((_2212 * _2212) + (_2211 * _2211)) + (_2213 * _2213))) * cbSceneParam._m0[33u].y;
        float _4695 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2352 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 + _2276) / _2288, (_2294 + _2280) / _2288), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2294 + _2276) / _2288, (_2280 - _2292) / _2288), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 - _2292) / _2288, (_2280 - _2294) / _2288), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 - _2294) / _2288, (_2292 + _2280) / _2288), _2297), 0.0)).x), vec4(0.25)));
        _2359 = 1.0 - (_2352 * cbSceneParam._m0[34u].x);
        _2360 = 1.0 - (_2352 * cbSceneParam._m0[34u].y);
        _2361 = 1.0 - (_2352 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2359 = 1.0;
        _2360 = 1.0;
        _2361 = 1.0;
    }
    float _2425;
    float _2427;
    float _2429;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2413 = fma(_2210, cbSceneParam._m0[63u].w, fma(_2206, cbSceneParam._m0[63u].z, fma(_2202, cbSceneParam._m0[63u].y, _2198 * cbSceneParam._m0[63u].x)));
        float _2414 = fma(_2210, cbSceneParam._m0[60u].w, fma(_2206, cbSceneParam._m0[60u].z, fma(_2202, cbSceneParam._m0[60u].y, _2198 * cbSceneParam._m0[60u].x))) / _2413;
        float _2415 = fma(_2210, cbSceneParam._m0[61u].w, fma(_2206, cbSceneParam._m0[61u].z, fma(_2202, cbSceneParam._m0[61u].y, _2198 * cbSceneParam._m0[61u].x))) / _2413;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2414 >= cbSceneParam._m0[64u].x) && (_2415 >= cbSceneParam._m0[64u].y)) && (_2414 <= cbSceneParam._m0[64u].z)) && (_2415 <= cbSceneParam._m0[64u].w))
        {
            float _2553 = fma(_2210, cbSceneParam._m0[62u].w, fma(_2206, cbSceneParam._m0[62u].z, fma(_2202, cbSceneParam._m0[62u].y, _2198 * cbSceneParam._m0[62u].x))) / _2413;
            float _2557 = isnan(cbSceneParam._m0[41u].w) ? _2553 : (isnan(_2553) ? cbSceneParam._m0[41u].w : max(_2553, cbSceneParam._m0[41u].w));
            float _2600 = (cbSceneParam._m0[33u].x - sqrt(((_2212 * _2212) + (_2211 * _2211)) + (_2213 * _2213))) * cbSceneParam._m0[33u].y;
            float _4711 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
            float _2607 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2414, cbSceneParam._m0[33u].w + _2415), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2414, _2415 - cbSceneParam._m0[33u].z), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2414 - cbSceneParam._m0[33u].z, _2415 - cbSceneParam._m0[33u].w), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2414 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2415), _2557), 0.0)).x), vec4(0.25)));
            float _2611 = 1.0 - (_2607 * cbSceneParam._m0[34u].x);
            float _2612 = 1.0 - (_2607 * cbSceneParam._m0[34u].y);
            float _2613 = 1.0 - (_2607 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
            frontier_phi_34_33_ladder_1 = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_34_33_ladder_2 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
        }
        else
        {
            frontier_phi_34_33_ladder = _2361;
            frontier_phi_34_33_ladder_1 = _2360;
            frontier_phi_34_33_ladder_2 = _2359;
        }
        _2425 = frontier_phi_34_33_ladder_2;
        _2427 = frontier_phi_34_33_ladder_1;
        _2429 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2425 = _2359;
        _2427 = _2360;
        _2429 = _2361;
    }
    uvec4 _2434 = floatBitsToUint(cbInstanceData._m0[_1102 + 5u]);
    uint _2436 = _2434.x * 14u;
    uint _2437 = _2436 + 13u;
    float _2444 = _1142 + (-1.0);
    float _2449 = (cbLight._m0[_2437].x * _2444) + 1.0;
    float _2450 = (cbLight._m0[_2437].y * _2444) + 1.0;
    float _2451 = (cbLight._m0[_2437].z * _2444) + 1.0;
    float _2452 = (cbLight._m0[_2437].w * _2444) + 1.0;
    uint _2453 = _2436 + 5u;
    float _2459 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    uint _2463 = _2436 + 4u;
    float _2472 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2476 = _2436 | 1u;
    float _2487 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_976, _977, _978));
    float _2490 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_976, _977, _978));
    float _4747 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _4758 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2495 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * 0.3183098733425140380859375;
    float _2497 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * 0.3183098733425140380859375;
    float _2504 = ((cbLight._m0[_2453].x * _2459) * _2497) + (((cbLight._m0[_2463].x * _2425) * _2472) * _2495);
    float _2505 = ((_2459 * cbLight._m0[_2453].y) * _2497) + (((cbLight._m0[_2463].y * _2427) * _2472) * _2495);
    float _2506 = ((_2459 * cbLight._m0[_2453].z) * _2497) + (((cbLight._m0[_2463].z * _2429) * _2472) * _2495);
    uvec4 _2510 = floatBitsToUint(cbLight._m0[_2436 + 12u]);
    bool _2512 = _2510.x == 0u;
    float _2614;
    float _2616;
    float _2618;
    if (_2512)
    {
        _2614 = _2504;
        _2616 = _2505;
        _2618 = _2506;
    }
    else
    {
        uint _2622 = _2436 + 6u;
        float _2638 = (dot(vec3(cbLight._m0[_2436 + 2u].xyz), vec3(_976, _977, _978)) * 0.5) + 0.5;
        float _2639 = _2638 * _2638;
        float _4769 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2640 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2641 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2614 = (((cbLight._m0[_2622].x * 0.3183098733425140380859375) * _2640) * _2641) + _2504;
        _2616 = (((cbLight._m0[_2622].y * 0.3183098733425140380859375) * _2640) * _2641) + _2505;
        _2618 = (((cbLight._m0[_2622].z * 0.3183098733425140380859375) * _2640) * _2641) + _2506;
    }
    bool _2621 = _2510.y == 0u;
    float _2676;
    float _2678;
    float _2680;
    if (_2621)
    {
        _2676 = _2614;
        _2678 = _2616;
        _2680 = _2618;
    }
    else
    {
        uint _2849 = _2436 + 7u;
        float _2865 = (dot(vec3(cbLight._m0[_2436 + 3u].xyz), vec3(_976, _977, _978)) * 0.5) + 0.5;
        float _2866 = _2865 * _2865;
        float _4785 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2867 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2868 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2676 = (((cbLight._m0[_2849].x * 0.3183098733425140380859375) * _2867) * _2868) + _2614;
        _2678 = (((cbLight._m0[_2849].y * 0.3183098733425140380859375) * _2867) * _2868) + _2616;
        _2680 = (((cbLight._m0[_2849].z * 0.3183098733425140380859375) * _2867) * _2868) + _2618;
    }
    uint _2683 = _2436 + 8u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _979) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2436].x + _1056;
    float _2699 = cbLight._m0[_2436].y + _1057;
    float _2700 = cbLight._m0[_2436].z + _1058;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2436].xyz));
    float _4801 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _4812 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _2712 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2713 = dot(vec3(_976, _977, _978), vec3(_2705, _2706, _2707));
    float _4823 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2717 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2705, _2706, _2707));
    float _4834 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2721 = _2697 * _2697;
    float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
    float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
    float _2734 = 0.959999978542327880859375 - _1124;
    float _2736 = 0.959999978542327880859375 - _1125;
    float _2737 = 0.959999978542327880859375 - _1126;
    float _2744 = 1.0 - _2697;
    float _2755 = (0.5 / (((_2712 * ((_2711 * _2744) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2744) + _2697) * _2711))) * _2711;
    float _4845 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2757 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
    uint _2771 = _2436 + 9u;
    float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _979) * 0.949999988079071044921875);
    float _2783 = _2782 * _2782;
    float _2784 = cbLight._m0[_2476].x + _1056;
    float _2785 = cbLight._m0[_2476].y + _1057;
    float _2786 = cbLight._m0[_2476].z + _1058;
    float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
    float _2791 = _2790 * _2784;
    float _2792 = _2790 * _2785;
    float _2793 = _2790 * _2786;
    float _2794 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2476].xyz));
    float _4856 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2798 = dot(vec3(_976, _977, _978), vec3(_2791, _2792, _2793));
    float _4867 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2801 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2802 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2791, _2792, _2793));
    float _4878 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2806 = _2783 * _2783;
    float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
    float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
    float _2824 = 1.0 - _2783;
    float _2834 = (0.5 / (((_2712 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2824) + _2783) * _2797))) * _2797;
    float _4889 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2836 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
    float _2846 = (((((_2817 * _2734) + _1127) * cbLight._m0[_2771].x) * _2836) * _2459) + ((((cbLight._m0[_2683].x * _2425) * ((_2733 * _2734) + _1127)) * _2757) * _2472);
    float _2847 = (((((_2817 * _2736) + _1129) * cbLight._m0[_2771].y) * _2836) * _2459) + ((((cbLight._m0[_2683].y * _2427) * ((_2733 * _2736) + _1129)) * _2757) * _2472);
    float _2848 = (((((_2817 * _2737) + _1130) * cbLight._m0[_2771].z) * _2836) * _2459) + ((((cbLight._m0[_2683].z * _2429) * ((_2733 * _2737) + _1130)) * _2757) * _2472);
    float _2904;
    float _2906;
    float _2908;
    if (_2512)
    {
        _2904 = _2846;
        _2906 = _2847;
        _2908 = _2848;
    }
    else
    {
        uint _2910 = _2436 + 2u;
        uint _2914 = _2436 + 10u;
        float _2928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2910].w)) * _979) * 0.949999988079071044921875);
        float _2929 = _2928 * _2928;
        float _2930 = cbLight._m0[_2910].x + _1056;
        float _2931 = cbLight._m0[_2910].y + _1057;
        float _2932 = cbLight._m0[_2910].z + _1058;
        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
        float _2937 = _2936 * _2930;
        float _2938 = _2936 * _2931;
        float _2939 = _2936 * _2932;
        float _2940 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2910].xyz));
        float _4900 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2944 = dot(vec3(_976, _977, _978), vec3(_2937, _2938, _2939));
        float _4911 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2948 = dot(vec3(cbLight._m0[_2910].xyz), vec3(_2937, _2938, _2939));
        float _4922 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2952 = _2929 * _2929;
        float _2956 = ((_2947 * _2947) * (_2952 + (-1.0))) + 1.0;
        float _2963 = exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0);
        float _2970 = 1.0 - _2929;
        float _2980 = (0.5 / (((_2712 * ((_2943 * _2970) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2970) + _2929) * _2943))) * _2943;
        float _4933 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2982 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2952 / ((_2956 * _2956) * 3.141590118408203125));
        float _2983 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2904 = (((((_2963 * _2734) + _1127) * cbLight._m0[_2914].x) * _2982) * _2983) + _2846;
        _2906 = (((((_2963 * _2736) + _1129) * cbLight._m0[_2914].y) * _2982) * _2983) + _2847;
        _2908 = (((((_2963 * _2737) + _1130) * cbLight._m0[_2914].z) * _2982) * _2983) + _2848;
    }
    float _3014;
    float _3016;
    float _3018;
    if (_2621)
    {
        _3014 = _2904;
        _3016 = _2906;
        _3018 = _2908;
    }
    else
    {
        uint _3025 = _2436 + 3u;
        uint _3029 = _2436 + 11u;
        float _3043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3025].w)) * _979) * 0.949999988079071044921875);
        float _3044 = _3043 * _3043;
        float _3045 = cbLight._m0[_3025].x + _1056;
        float _3046 = cbLight._m0[_3025].y + _1057;
        float _3047 = cbLight._m0[_3025].z + _1058;
        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
        float _3052 = _3051 * _3045;
        float _3053 = _3051 * _3046;
        float _3054 = _3051 * _3047;
        float _3055 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_3025].xyz));
        float _4949 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3058 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _3059 = dot(vec3(_976, _977, _978), vec3(_3052, _3053, _3054));
        float _4960 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3062 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _3063 = dot(vec3(cbLight._m0[_3025].xyz), vec3(_3052, _3053, _3054));
        float _4971 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        float _3067 = _3044 * _3044;
        float _3071 = ((_3062 * _3062) * (_3067 + (-1.0))) + 1.0;
        float _3078 = exp2(log2(1.0 - (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) * 5.0);
        float _3085 = 1.0 - _3044;
        float _3095 = (0.5 / (((_2712 * ((_3058 * _3085) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _3085) + _3044) * _3058))) * _3058;
        float _4982 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        float _3097 = (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_3067 / ((_3071 * _3071) * 3.141590118408203125));
        float _3098 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _3014 = (((((_3078 * _2734) + _1127) * cbLight._m0[_3029].x) * _3097) * _3098) + _2904;
        _3016 = (((((_3078 * _2736) + _1129) * cbLight._m0[_3029].y) * _3097) * _3098) + _2906;
        _3018 = (((((_3078 * _2737) + _1130) * cbLight._m0[_3029].z) * _3097) * _3098) + _2908;
    }
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    if (_2434.y == 0u)
    {
        uvec4 _3119 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3120 = _3119.x;
        uint _3131 = uint((float(_3119.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1065) / _3120))) + floor(float(uint(cbSceneParam._m0[85u].x * _1064) / _3120)));
        float _3141 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3142 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
        uint _3145 = uint(isnan(14.0) ? _3142 : (isnan(_3142) ? 14.0 : min(_3142, 14.0)));
        uvec4 _3150 = texelFetch(g_lightClusterGridBuffer, int(((_3145 << 2u) + (_3131 << 6u)) >> 2u));
        uint _3151 = _3150.x;
        uint _3152 = _3119.z;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        if (((((1u << ((_3152 >> 4u) & 15u)) + 4294967295u) & _3151) == 0u) || ((_3152 & 240u) == 0u))
        {
            _3260 = 0.0;
            _3262 = 0.0;
            _3264 = 0.0;
            _3266 = 0.0;
            _3268 = 0.0;
            _3270 = 0.0;
        }
        else
        {
            float _3261;
            float _3263;
            float _3265;
            float _3267;
            float _3269;
            float _3271;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            float _3417 = 0.0;
            float _3418 = 0.0;
            uint _3419 = 0u;
            uint _3428;
            bool _3429;
            for (;;)
            {
                _3428 = texelFetch(g_lightClassification, int((((_3145 << 5u) + (_3131 << 9u)) + (_3419 << 2u)) >> 2u)).x;
                _3429 = _3428 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3429)
                {
                    frontier_phi_66_pred = _3418;
                    frontier_phi_66_pred_1 = _3417;
                    frontier_phi_66_pred_2 = _3416;
                    frontier_phi_66_pred_3 = _3415;
                    frontier_phi_66_pred_4 = _3414;
                    frontier_phi_66_pred_5 = _3413;
                }
                else
                {
                    float _3537;
                    float _3538;
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    uint _3543;
                    _3537 = _3413;
                    _3538 = _3414;
                    _3539 = _3415;
                    _3540 = _3416;
                    _3541 = _3417;
                    _3542 = _3418;
                    _3543 = _3428;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    float _3474;
                    for (;;)
                    {
                        uint _3547 = uint(findLSB(_3543)) + (_3419 << 5u);
                        uint _3544 = (_3543 + 4294967295u) & _3543;
                        uint _3549 = _3547 * 48u;
                        vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3549)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 3u)).x));
                        uint _3569 = (_3547 * 48u) + 4u;
                        vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3569)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 3u)).x));
                        uint _3588 = (_3547 * 48u) + 8u;
                        vec3 _3599 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3588)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 2u)).x));
                        float _3603 = _3563.x - _2211;
                        float _3604 = _3563.y - _2212;
                        float _3605 = _3563.z - _2213;
                        float _3606 = dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605));
                        float _3609 = inversesqrt(_3606);
                        float _3610 = _3609 * _3603;
                        float _3611 = _3609 * _3604;
                        float _3612 = _3609 * _3605;
                        float _3613 = dot(vec3(_1083, _1086, _1089), vec3(_3610, _3611, _3612));
                        float _3618 = 1.0 - (_3606 * _3563.w);
                        float _5008 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3619 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3620 = sqrt(_3606) * _3582.w;
                        float _3623 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                        float _3624 = _3623 * _3623;
                        float _3627 = ((1.0 - _3624) * _3613) + _3624;
                        float _3630 = _3620 * _3620;
                        float _3634 = ((isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0))) * _3619) / ((_3630 * 0.699999988079071044921875) + 1.0);
                        float _3638 = (-0.0) - _2211;
                        float _3639 = (-0.0) - _2212;
                        float _3640 = (-0.0) - _2213;
                        float _3644 = inversesqrt(dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640)));
                        float _3645 = _3644 * _3638;
                        float _3646 = _3644 * _3639;
                        float _3647 = _3644 * _3640;
                        float _3654 = exp2(log2(1.0 / ((_3630 * 3.5) + 5.0)) * 0.25);
                        float _3655 = 1.0 - _1158;
                        float _3662 = sqrt(1.0 - ((1.0 - (_3655 * _3655)) * (1.0 - (_3654 * _3654))));
                        float _3663 = _3662 * _3662;
                        float _3664 = _3663 * _3663;
                        float _3665 = _3645 + _3610;
                        float _3666 = _3646 + _3611;
                        float _3667 = _3647 + _3612;
                        float _3671 = inversesqrt(dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667)));
                        float _3675 = dot(vec3(_1083, _1086, _1089), vec3(_3645, _3646, _3647));
                        float _5024 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3678 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3679 = dot(vec3(_1083, _1086, _1089), vec3(_3671 * _3665, _3671 * _3666, _3671 * _3667));
                        float _5035 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3682 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                        float _3686 = ((_3682 * _3682) * (_3664 + (-1.0))) + 1.0;
                        float _3687 = _3623 * _3663;
                        float _3688 = _3687 * _3687;
                        float _3691 = ((1.0 - _3688) * _3613) + _3688;
                        float _5046 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3692 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3693 = 1.0 - _3663;
                        float _3703 = (0.5 / (((_3692 * ((_3678 * _3693) + _3663)) + 9.9999999392252902907785028219223e-09) + (((_3692 * _3693) + _3663) * _3678))) * _3692;
                        float _5057 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                        float _3714 = (((_3664 * 3.1415927410125732421875) * (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) / ((_3686 * _3686) * ((_3630 * 2.1991131305694580078125) + 3.141590118408203125))) * _3619;
                        _3472 = (_3634 * _3582.x) + _3540;
                        _3473 = (_3634 * _3582.y) + _3541;
                        _3474 = (_3634 * _3582.z) + _3542;
                        _3469 = (_3714 * _3599.x) + _3537;
                        _3470 = (_3714 * _3599.y) + _3538;
                        _3471 = (_3714 * _3599.z) + _3539;
                        if (_3544 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3537 = _3469;
                            _3538 = _3470;
                            _3539 = _3471;
                            _3540 = _3472;
                            _3541 = _3473;
                            _3542 = _3474;
                            _3543 = _3544;
                        }
                    }
                    frontier_phi_66_pred = _3474;
                    frontier_phi_66_pred_1 = _3473;
                    frontier_phi_66_pred_2 = _3472;
                    frontier_phi_66_pred_3 = _3471;
                    frontier_phi_66_pred_4 = _3470;
                    frontier_phi_66_pred_5 = _3469;
                }
                _3271 = frontier_phi_66_pred;
                _3269 = frontier_phi_66_pred_1;
                _3267 = frontier_phi_66_pred_2;
                _3265 = frontier_phi_66_pred_3;
                _3263 = frontier_phi_66_pred_4;
                _3261 = frontier_phi_66_pred_5;
                uint _3420 = _3419 + 1u;
                if (_3420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3413 = _3261;
                    _3414 = _3263;
                    _3415 = _3265;
                    _3416 = _3267;
                    _3417 = _3269;
                    _3418 = _3271;
                    _3419 = _3420;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3260 = _3261;
            _3262 = _3263;
            _3264 = _3265;
            _3266 = _3267;
            _3268 = _3269;
            _3270 = _3271;
        }
        uvec4 _3274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3275 = _3274.z;
        uint _3277 = (_3275 >> 8u) & 15u;
        float _3381;
        float _3383;
        float _3385;
        float _3387;
        float _3389;
        float _3391;
        if (((4294967295u << _3277) & _3151) == 0u)
        {
            _3381 = _3260;
            _3383 = _3262;
            _3385 = _3264;
            _3387 = _3266;
            _3389 = _3268;
            _3391 = _3270;
        }
        else
        {
            float _3406 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _3407 = _3406 * _2211;
            float _3408 = _3406 * _2212;
            float _3409 = _3406 * _2213;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3277 < ((_3275 >> 12u) & 15u))
            {
                float _3382;
                float _3384;
                float _3386;
                float _3388;
                float _3390;
                float _3392;
                float _3520 = _3260;
                float _3521 = _3262;
                float _3522 = _3264;
                float _3523 = _3266;
                float _3524 = _3268;
                float _3525 = _3270;
                uint _3526 = _3277;
                uint _3535;
                bool _3536;
                for (;;)
                {
                    _3535 = texelFetch(g_lightClassification, int((((_3145 << 5u) + (_3131 << 9u)) + (_3526 << 2u)) >> 2u)).x;
                    _3536 = _3535 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3536)
                    {
                        frontier_phi_72_pred = _3525;
                        frontier_phi_72_pred_1 = _3524;
                        frontier_phi_72_pred_2 = _3523;
                        frontier_phi_72_pred_3 = _3522;
                        frontier_phi_72_pred_4 = _3521;
                        frontier_phi_72_pred_5 = _3520;
                    }
                    else
                    {
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _3732 = _3520;
                        float _3733 = _3521;
                        float _3734 = _3522;
                        float _3735 = _3523;
                        float _3736 = _3524;
                        float _3737 = _3525;
                        uint _3738 = _3535;
                        uint _3739;
                        vec4 _3764;
                        float _3765;
                        vec4 _3780;
                        vec3 _3792;
                        vec4 _3807;
                        vec4 _3822;
                        float _3868;
                        bool _3869;
                        for (;;)
                        {
                            uint _3749 = ((_3526 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3738));
                            _3739 = (_3738 + 4294967295u) & _3738;
                            uint _3751 = _3749 * 40u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            _3765 = _3764.w;
                            uint _3767 = (_3749 * 40u) + 4u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            uint _3782 = (_3749 * 40u) + 8u;
                            _3792 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x));
                            uint _3794 = (_3749 * 40u) + 16u;
                            _3807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 3u)).x));
                            uint _3809 = (_3749 * 40u) + 20u;
                            _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            uint _3824 = (_3749 * 40u) + 24u;
                            vec4 _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            uint _3843 = (_3749 * 40u) + 28u;
                            vec4 _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            _3868 = fma(_2213, _3856.z, fma(_2212, _3856.y, _3856.x * _2211)) + _3856.w;
                            _3869 = !((fma(_2213, _3837.z, fma(_2212, _3837.y, _3837.x * _2211)) + _3837.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3869)
                            {
                                float _3896 = _3764.x - _2211;
                                float _3897 = _3764.y - _2212;
                                float _3898 = _3764.z - _2213;
                                float _3899 = dot(vec3(_3896, _3897, _3898), vec3(_3896, _3897, _3898));
                                float _3902 = inversesqrt(_3899);
                                float _3903 = _3902 * _3896;
                                float _3904 = _3902 * _3897;
                                float _3905 = _3902 * _3898;
                                float _3909 = 1.0 - (_3899 / (_3765 * _3765));
                                float _5068 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3910 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3914 = sqrt(_3899) * _3780.w;
                                float _3916 = 1.39999997615814208984375 / (_3914 + 1.39999997615814208984375);
                                float _3917 = _3916 * _3916;
                                float _3920 = ((1.0 - _3917) * dot(vec3(_3903, _3904, _3905), vec3(_1083, _1086, _1089))) + _3917;
                                float _3923 = _3914 * _3914;
                                float _3927 = (fma(_2213, _3807.z, fma(_2212, _3807.y, _3807.x * _2211)) + _3807.w) / _3868;
                                float _3928 = (fma(_2213, _3822.z, fma(_2212, _3822.y, _3822.x * _2211)) + _3822.w) / _3868;
                                float _3932 = 1.0 - dot(vec2(_3927, _3928), vec2(_3927, _3928));
                                float _5084 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3933 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3934 = _3933 * (((isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0))) * _3910) / ((_3923 * 0.699999988079071044921875) + 1.0));
                                float _3946 = exp2(log2(1.0 / ((_3923 * 3.5) + 5.0)) * 0.25);
                                float _3947 = 1.0 - _1158;
                                float _3954 = sqrt(1.0 - ((1.0 - (_3947 * _3947)) * (1.0 - (_3946 * _3946))));
                                float _3955 = _3954 * _3954;
                                float _3956 = _3955 * _3955;
                                float _3957 = _3903 - _3407;
                                float _3958 = _3904 - _3408;
                                float _3959 = _3905 - _3409;
                                float _3963 = inversesqrt(dot(vec3(_3957, _3958, _3959), vec3(_3957, _3958, _3959)));
                                float _3967 = dot(vec3(_1083, _1086, _1089), vec3((-0.0) - _3407, (-0.0) - _3408, (-0.0) - _3409));
                                float _5095 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                                float _3970 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3971 = dot(vec3(_1083, _1086, _1089), vec3(_3963 * _3957, _3963 * _3958, _3963 * _3959));
                                float _5106 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3974 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3978 = ((_3974 * _3974) * (_3956 + (-1.0))) + 1.0;
                                float _3979 = _3916 * _3955;
                                float _3980 = _3979 * _3979;
                                float _3986 = ((1.0 - _3980) * dot(vec3(_1083, _1086, _1089), vec3(_3903, _3904, _3905))) + _3980;
                                float _5117 = isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0));
                                float _3987 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3988 = 1.0 - _3955;
                                float _3998 = (0.5 / (((_3987 * ((_3970 * _3988) + _3955)) + 9.9999999392252902907785028219223e-09) + (((_3987 * _3988) + _3955) * _3970))) * _3987;
                                float _5128 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _4008 = (_3933 * _3910) * (((_3956 * 3.1415927410125732421875) * (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0)))) / ((_3978 * _3978) * ((_3923 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3934 * _3780.y;
                                frontier_phi_78_pred_1 = _3934 * _3780.x;
                                frontier_phi_78_pred_2 = _4008 * _3792.z;
                                frontier_phi_78_pred_3 = _4008 * _3792.y;
                                frontier_phi_78_pred_4 = _4008 * _3792.x;
                                frontier_phi_78_pred_5 = _3934 * _3780.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4016 = frontier_phi_78_pred;
                            _4015 = frontier_phi_78_pred_1;
                            _4014 = frontier_phi_78_pred_2;
                            _4013 = frontier_phi_78_pred_3;
                            _4012 = frontier_phi_78_pred_4;
                            _4017 = frontier_phi_78_pred_5;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            if (_3739 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3739;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3724;
                        frontier_phi_72_pred_1 = _3723;
                        frontier_phi_72_pred_2 = _3722;
                        frontier_phi_72_pred_3 = _3721;
                        frontier_phi_72_pred_4 = _3720;
                        frontier_phi_72_pred_5 = _3719;
                    }
                    _3392 = frontier_phi_72_pred;
                    _3390 = frontier_phi_72_pred_1;
                    _3388 = frontier_phi_72_pred_2;
                    _3386 = frontier_phi_72_pred_3;
                    _3384 = frontier_phi_72_pred_4;
                    _3382 = frontier_phi_72_pred_5;
                    uint _3527 = _3526 + 1u;
                    if (_3527 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3520 = _3382;
                        _3521 = _3384;
                        _3522 = _3386;
                        _3523 = _3388;
                        _3524 = _3390;
                        _3525 = _3392;
                        _3526 = _3527;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3392;
                frontier_phi_60_61_ladder_1 = _3390;
                frontier_phi_60_61_ladder_2 = _3386;
                frontier_phi_60_61_ladder_3 = _3384;
                frontier_phi_60_61_ladder_4 = _3382;
                frontier_phi_60_61_ladder_5 = _3388;
            }
            else
            {
                frontier_phi_60_61_ladder = _3270;
                frontier_phi_60_61_ladder_1 = _3268;
                frontier_phi_60_61_ladder_2 = _3264;
                frontier_phi_60_61_ladder_3 = _3262;
                frontier_phi_60_61_ladder_4 = _3260;
                frontier_phi_60_61_ladder_5 = _3266;
            }
            _3381 = frontier_phi_60_61_ladder_4;
            _3383 = frontier_phi_60_61_ladder_3;
            _3385 = frontier_phi_60_61_ladder_2;
            _3387 = frontier_phi_60_61_ladder_5;
            _3389 = frontier_phi_60_61_ladder_1;
            _3391 = frontier_phi_60_61_ladder;
        }
        float _3396 = isnan(1.0) ? _1142 : (isnan(_1142) ? 1.0 : min(_1142, 1.0));
        _3164 = (_3396 * _3387) + _2676;
        _3166 = (_3396 * _3389) + _2678;
        _3168 = (_3396 * _3391) + _2680;
        _3170 = ((_3381 * _1127) * _3396) + _3014;
        _3172 = ((_3383 * _1129) * _3396) + _3016;
        _3174 = ((_3385 * _1130) * _3396) + _3018;
    }
    else
    {
        _3164 = _2676;
        _3166 = _2678;
        _3168 = _2680;
        _3170 = _3014;
        _3172 = _3016;
        _3174 = _3018;
    }
    uint _3180 = _1103 + uint(cbMatDynParam._m0[0u].w);
    float _3186 = ((((((_892.x - _887.x) * _870) + _887.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _816) * cbMtdParam._m0[20u].x)) * _825) * cbInstanceData._m0[_3180].x;
    float _3187 = ((((((_892.y - _887.y) * _870) + _887.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_805.y - _803) * _783) + _803)) * cbMtdParam._m0[20u].y)) * _825) * cbInstanceData._m0[_3180].y;
    float _3188 = ((((((_892.z - _887.z) * _870) + _887.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_805.z - _804) * _783) + _804)) * cbMtdParam._m0[20u].z)) * _825) * cbInstanceData._m0[_3180].z;
    float _5144 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _5155 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _5166 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _3205 = (((isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0))) * (_3164 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1142))) + ((_3170 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1944)) * cbPerFrame._m0[3u].x)) + _3186;
    float _3207 = (_3187 + ((_3172 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1944)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0))) * (_3166 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1142)));
    float _3209 = (_3188 + ((_3174 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1944)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * (_3168 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1142)));
    float _5192 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3222 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
    uint _3223 = _1102 + 6u;
    float _3231 = _1064 / cbSceneParam._m0[86u].x;
    float _3232 = _1065 / cbSceneParam._m0[86u].y;
    vec4 _3246 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3231, _3232, (log2((isnan(cbSceneParam._m0[77u].w) ? _999 : (isnan(_999) ? cbSceneParam._m0[77u].w : min(_999, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3248 = _3246.x;
    float _3249 = _3246.y;
    float _3250 = _3246.z;
    float _3251 = _3246.w;
    float _3322;
    float _3324;
    float _3326;
    float _3328;
    if (_999 > cbSceneParam._m0[78u].w)
    {
        float _3285 = isnan(_999) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _999 : min(cbSceneParam._m0[80u].w, _999));
        float _3286 = _3285 / _999;
        float _3297 = _3286 * _1049;
        float _3298 = _1050 * _3286;
        float _3299 = (-0.0) - _3298;
        float _3300 = _3286 * _1051;
        float _3302 = (cbSceneParam._m0[77u].w * _3299) / _3285;
        float _3303 = _3302 + cbSceneParam._m0[79u].w;
        float _3304 = cbSceneParam._m0[79u].w - _3298;
        float _3310 = sqrt(((_3297 * _3297) + (_3298 * _3298)) + (_3300 * _3300));
        float _3313 = (1.0 - (cbSceneParam._m0[77u].w / _3285)) * _3310;
        float _3318 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3320 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3482;
        if (abs((_3299 - _3302) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3482 = ((((_3303 > 0.0) ? exp2(_3318 * _3303) : (2.0 - exp2(_3320 * _3303))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3313;
        }
        else
        {
            float _3442 = 1.0 / cbSceneParam._m0[80u].x;
            float _3443 = isnan(_3304) ? _3303 : (isnan(_3303) ? _3304 : max(_3303, _3304));
            float _3444 = isnan(_3304) ? _3303 : (isnan(_3303) ? _3304 : min(_3303, _3304));
            float _3453 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : min(_3443, 0.0));
            float _3454 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : min(_3444, 0.0));
            _3482 = ((abs(_3310 / _3299) * cbSceneParam._m0[80u].y) * ((((_3453 - _3454) * 2.0) - ((exp2(_3318 * (isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0)))) - exp2(_3318 * (isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))))) * _3442)) - ((exp2(_3320 * _3453) - exp2(_3320 * _3454)) * _3442))) + (_3313 * cbSceneParam._m0[80u].z);
        }
        vec4 _3484 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3231, _3232, 1.0), 0.0);
        float _3493 = exp2((_3482 * (-1.44269502162933349609375)) * (1.0 - _3484.w));
        float _3494 = log2(_3493);
        float _3510 = log2(_3251);
        _3322 = (exp2(_3510 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3494 * cbSceneParam._m0[78u].x)) * _3484.x) / cbSceneParam._m0[78u].x)) + _3248;
        _3324 = (exp2(_3510 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3494 * cbSceneParam._m0[78u].y)) * _3484.y) / cbSceneParam._m0[78u].y)) + _3249;
        _3326 = (exp2(_3510 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3494 * cbSceneParam._m0[78u].z)) * _3484.z) / cbSceneParam._m0[78u].z)) + _3250;
        _3328 = _3493 * _3251;
    }
    else
    {
        _3322 = _3248;
        _3324 = _3249;
        _3326 = _3250;
        _3328 = _3251;
    }
    float _3340 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3341 = _3340 == 3.0;
    float _3342 = log2(_3328);
    float _3346 = exp2(_3342 * cbSceneParam._m0[78u].x);
    float _3347 = exp2(_3342 * cbSceneParam._m0[78u].y);
    float _3348 = exp2(_3342 * cbSceneParam._m0[78u].z);
    float _3349 = _3346 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0)));
    float _3350 = _3347 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0)));
    float _3351 = _3348 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0)));
    float _3360 = (_3340 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3360 * (_3341 ? _3349 : (_3349 + (cbSceneParam._m0[72u].w * _3322)));
    SV_Target.y = _3360 * (_3341 ? _3350 : (_3350 + (cbSceneParam._m0[72u].w * _3324)));
    SV_Target.z = _3360 * (_3341 ? _3351 : (_3351 + (cbSceneParam._m0[72u].w * _3326)));
    SV_Target.w = cbInstanceData._m0[_3223].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3186) * _3222) * _3346) * _3360;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3187) * _3222) * _3347) * _3360;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3188) * _3222) * _3348) * _3360;
    SV_Target_1.w = cbInstanceData._m0[_3223].w;
}


