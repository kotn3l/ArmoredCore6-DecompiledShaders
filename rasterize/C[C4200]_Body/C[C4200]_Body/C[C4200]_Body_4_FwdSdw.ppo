#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1478;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _261 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _275 = exp2(log2(_261.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _276 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _277 = isnan(1.0) ? _276 : (isnan(_276) ? 1.0 : min(_276, 1.0));
    vec4 _291 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _295 = _291.z;
    float _303 = exp2(log2(_295 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _317 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _320 = _317.y;
    float _323 = (_317.x + (-0.02500000037252902984619140625)) * 8.0;
    float _327 = roundEven(5.0 - _323);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(4.0) ? _328 : (isnan(_328) ? 4.0 : min(_328, 4.0));
    float _342 = floor(_329);
    vec4 _345 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _342));
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[17u].x;
    _192[0u] = cbMtdParam._m0[17u].y;
    _193[0u] = cbMtdParam._m0[17u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[14u].x;
    _192[2u] = cbMtdParam._m0[14u].y;
    _193[2u] = cbMtdParam._m0[14u].z;
    _191[3u] = cbMtdParam._m0[13u].x;
    _192[3u] = cbMtdParam._m0[13u].y;
    _193[3u] = cbMtdParam._m0[13u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[18u].x;
    _192[5u] = cbMtdParam._m0[18u].y;
    _193[5u] = cbMtdParam._m0[18u].z;
    float _409 = roundEven(_323);
    float _410 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    uint _412 = uint(int(isnan(5.0) ? _410 : (isnan(_410) ? 5.0 : min(_410, 5.0))));
    vec4 _442 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _453 = cbMtdParam._m0[9u].x * _442.x;
    float _454 = cbMtdParam._m0[9u].y * _442.y;
    float _455 = cbMtdParam._m0[9u].z * _442.z;
    float _462 = ((((((_191[_412] - cbMtdParam._m0[10u].x) * _320) + cbMtdParam._m0[10u].x) * _345.x) - _453) * _305) + _453;
    float _463 = ((((((_192[_412] - cbMtdParam._m0[10u].y) * _320) + cbMtdParam._m0[10u].y) * _345.y) - _454) * _305) + _454;
    float _464 = ((((((_193[_412] - cbMtdParam._m0[10u].z) * _320) + cbMtdParam._m0[10u].z) * _345.z) - _455) * _305) + _455;
    float _470 = exp2(log2(_291.w) * cbMtdParam._m0[24u].w);
    vec4 _483 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _503 = (((cbMtdParam._m0[16u].x * _483.x) - _462) * _470) + _462;
    float _504 = (((cbMtdParam._m0[16u].y * _483.y) - _463) * _470) + _463;
    float _505 = (((cbMtdParam._m0[16u].z * _483.z) - _464) * _470) + _464;
    vec4 _517 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _542 = (_261.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _517.x) - _503) * _277) + _503);
    float _544 = (_261.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _517.y) - _504) * _277) + _504);
    float _546 = (_261.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _517.z) - _505) * _277) + _505);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _582 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    uint _584 = uint(int(isnan(4.0) ? _582 : (isnan(_582) ? 4.0 : min(_582, 4.0))));
    float _591 = ((_187[_584] - cbMtdParam._m0[23u].z) * _305) + cbMtdParam._m0[23u].z;
    float _594 = ((cbMtdParam._m0[23u].w - _591) * _470) + _591;
    float _597 = ((cbMtdParam._m0[26u].y - _594) * _277) + _594;
    vec4 _612 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _342));
    vec4 _629 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _637 = cbMtdParam._m0[23u].x + _629.z;
    float _640 = (((_612.z + _186[_584]) - _637) * _305) + _637;
    vec4 _652 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _663 = (((_652.z - _640) + cbMtdParam._m0[30u].x) * _470) + _640;
    float _669 = ((((_295 * 2.0) * _663) - _663) * cbMtdParam._m0[25u].w) + _663;
    vec4 _681 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _692 = (((cbMtdParam._m0[24u].z + _681.z) - _669) * _277) + _669;
    float _705 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _728 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_705 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _705) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _732 = cbPerFrame._m0[22u].x * 2.0;
    float _733 = _732 * cbMtdParam._m0[28u].z;
    float _736 = (_728.x * 0.5) + (-0.25);
    float _739 = (_728.y * 0.5) + (-0.25);
    float _740 = _739 * cbMtdParam._m0[28u].y;
    float _742 = (-0.0) - (cbMtdParam._m0[28u].y * _736);
    float _744 = fract(_733);
    float _746 = fract(_733 + 0.5);
    float _758 = abs((_744 * 2.0) + (-1.0));
    vec4 _774 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_744 * _742) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_740 * _744) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _776 = _774.x;
    float _777 = _774.y;
    float _778 = _774.z;
    vec4 _779 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_746 * _742) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_740 * _746) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _790 = ((_779.x - _776) * _758) + _776;
    float _797 = exp2(log2(_790 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _798 = isnan(cbMtdParam._m0[29u].y) ? _797 : (isnan(_797) ? cbMtdParam._m0[29u].y : max(_797, cbMtdParam._m0[29u].y));
    float _799 = isnan(cbMtdParam._m0[29u].z) ? _798 : (isnan(_798) ? cbMtdParam._m0[29u].z : min(_798, cbMtdParam._m0[29u].z));
    float _823 = (cbMtdParam._m0[33u].x * _705) + TEXCOORD;
    float _824 = (cbMtdParam._m0[33u].y * _705) + TEXCOORD_1;
    float _827 = _732 * cbMtdParam._m0[27u].w;
    float _828 = _739 * cbMtdParam._m0[27u].z;
    float _830 = (-0.0) - (cbMtdParam._m0[27u].z * _736);
    float _831 = fract(_827);
    float _833 = fract(_827 + 0.5);
    float _844 = abs((_831 * 2.0) + (-1.0));
    vec4 _861 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_831 * _830) + _823) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_828 * _831) + _824) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _866 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_833 * _830) + _823) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_828 * _833) + _824) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _900 = ((_612.x - _631) * _305) + _631;
    float _901 = ((_612.y - _632) * _305) + _632;
    float _906 = ((_652.x - _900) * _470) + _900;
    float _907 = ((_652.y - _901) * _470) + _901;
    float _916 = ((((_681.x - _906) * _277) + _906) * 2.0) + (-1.0);
    float _917 = ((((_681.y - _907) * _277) + _907) * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4180 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _923 = sqrt(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))));
    float _926 = (cbMtdParam._m0[26u].z * ((_291.x * 2.0) + (-1.0))) + _916;
    float _927 = (cbMtdParam._m0[26u].z * ((_291.y * 2.0) + (-1.0))) + _917;
    float _930 = fma(_923, _233 * NORMAL.x, fma(_927, _240 * TANGENT.x, (_226 * _218) * _926));
    float _933 = fma(_923, _233 * NORMAL.y, fma(_927, _240 * TANGENT.y, (_226 * _219) * _926));
    float _936 = fma(_923, _233 * NORMAL.z, fma(_927, _240 * TANGENT.z, (_226 * _220) * _926));
    float _940 = inversesqrt(dot(vec3(_930, _933, _936), vec3(_930, _933, _936)));
    float _941 = _940 * _930;
    float _942 = _940 * _933;
    float _943 = _940 * _936;
    float _4191 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _944 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4213 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4224 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4235 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _948 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _964 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1049 = fma(_943, cbSceneParam._m0[5u].z, fma(_942, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _941));
    float _1052 = fma(_943, cbSceneParam._m0[6u].z, fma(_942, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _941));
    float _1055 = fma(_943, cbSceneParam._m0[7u].z, fma(_942, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _941));
    uint _1068 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1069 = _1068 + 9u;
    uint _1070 = _1069 + uint(cbMatDynParam._m0[0u].w);
    float _1076 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_1070].x;
    float _1077 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_1070].y;
    float _1078 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_1070].z;
    float _4246 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _1082 = 1.0 - _948;
    float _1083 = _1079 * _1082;
    float _1084 = _1080 * _1082;
    float _1085 = _1081 * _1082;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _948;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _948;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _948;
    float _1093 = _1090 + 0.039999999105930328369140625;
    float _1095 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1108 = _1105.x * TEXCOORD_3.w;
    float _1109 = dot(vec3(_941, _942, _943), vec3(_1022, _1023, _1024));
    float _1112 = _1109 * 2.0;
    float _1116 = (_1112 * _941) - _1022;
    float _1117 = (_1112 * _942) - _1023;
    float _1118 = (_1112 * _943) - _1024;
    float _1122 = abs(dot(vec3(_1022, _1023, _1024), vec3(_941, _942, _943)));
    float _4279 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1124 = sqrt(_944);
    float _1135 = exp2((_1124 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1124 * 3.0));
    float _1141 = (1.0 - _1135) * ((_1124 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1142 = _1135 * _1124;
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1204 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1208 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1212 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1236 = _1170 + _941;
        float _1237 = _1174 + _942;
        float _1238 = _1178 + _943;
        float _1248 = fma(_1238, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236)) - _1204;
        float _1249 = fma(_1238, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236)) - _1208;
        float _1250 = fma(_1238, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236)) - _1212;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1266 = ((_1254 * _1248) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1204 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1254 * _1249) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1208 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1250) / cbModelParam._m0[34u].z) + ((((((_1212 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_941, _942, _943), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4327 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_941, _942, _943), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4360 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_941, _942, _943), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4393 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1515 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1519 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1523 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1546 = _1170 + _941;
        float _1547 = _1174 + _942;
        float _1548 = _1178 + _943;
        float _1558 = fma(_1548, cbModelParam._m0[30u].z, fma(_1547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1546)) - _1515;
        float _1559 = fma(_1548, cbModelParam._m0[31u].z, fma(_1547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1546)) - _1519;
        float _1560 = fma(_1548, cbModelParam._m0[32u].z, fma(_1547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1546)) - _1523;
        float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
        float _1577 = ((_1564 * _1558) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1515 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1564 * _1559) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1519 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1564 * _1560) / cbModelParam._m0[35u].z) + ((((((_1523 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        float _1614 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1581.x + (-0.5));
        float _1616 = _1614 * (_1581.y + (-0.5));
        float _1617 = _1614 * (_1581.z + (-0.5));
        float _1624 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1588.x + (-0.5));
        float _1626 = _1624 * (_1588.y + (-0.5));
        float _1627 = _1624 * (_1588.z + (-0.5));
        float _1634 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1595.x + (-0.5));
        float _1636 = _1634 * (_1595.y + (-0.5));
        float _1637 = _1634 * (_1595.z + (-0.5));
        float _1644 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1602.x + (-0.5));
        float _1646 = _1644 * (_1602.y + (-0.5));
        float _1647 = _1644 * (_1602.z + (-0.5));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = _1615 * 0.5;
        float _1652 = _1625 * 0.5;
        float _1653 = _1635 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_941, _942, _943), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4456 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1678 + 1.0))) + _1683) * _1648;
        float _1693 = _1616 * 0.5;
        float _1694 = _1626 * 0.5;
        float _1695 = _1636 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_941, _942, _943), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4489 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1720 + 1.0))) + _1725) * _1649;
        float _1735 = _1617 * 0.5;
        float _1736 = _1627 * 0.5;
        float _1737 = _1637 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_941, _942, _943), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4522 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1762 + 1.0))) + _1767) * _1650;
        _1784 = _1617;
        _1785 = _1616;
        _1786 = _1615;
        _1787 = _1627;
        _1788 = _1626;
        _1789 = _1625;
        _1790 = _1637;
        _1791 = _1636;
        _1792 = _1635;
        _1793 = _1650;
        _1794 = _1649;
        _1795 = _1648;
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
    }
    else
    {
        _1784 = _1478;
        _1785 = _1478;
        _1786 = _1478;
        _1787 = _1478;
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = 0.0;
        _1797 = 0.0;
        _1798 = 0.0;
    }
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1490)) + _1490;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1491)) + _1491;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1492)) + _1492;
    float _1831 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1808));
    float _1852 = _1116 * 0.5;
    float _1853 = _1117 * 0.5;
    float _1854 = _1118 * 0.5;
    float _1855 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1858 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1861 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1895;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1868 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1872 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1876 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1883 = dot(vec4(cbModelParam._m0[39u]), vec4(_1852, _1853, _1854, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1906;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1897 = dot(vec4(cbModelParam._m0[40u]), vec4(_1852, _1853, _1854, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1897) ? 0.0 : (isnan(0.0) ? _1897 : max(0.0, _1897))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1910 = (_1906 * cbModelParam._m0[1u].x) + (_1895 * (1.0 - cbModelParam._m0[1u].x));
    float _1920 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _944);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1920 : min(cbModelParam._m0[25u].z, _1920));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1968 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _1972 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _1976 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _1979 = fma(_1118, cbModelParam._m0[13u].z, fma(_1117, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116));
        float _1982 = fma(_1118, cbModelParam._m0[14u].z, fma(_1117, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116));
        float _1985 = fma(_1118, cbModelParam._m0[15u].z, fma(_1117, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116));
        float _2013;
        if (_1979 > 0.0)
        {
            _2013 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2013 = frontier_phi_14_12_ladder;
        }
        float _2184;
        if (_1982 > 0.0)
        {
            _2184 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2184 = frontier_phi_23_19_ladder;
        }
        float _2478;
        if (_1985 > 0.0)
        {
            _2478 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2478 = frontier_phi_35_30_ladder;
        }
        float _2480 = isnan(_2184) ? _2013 : (isnan(_2013) ? _2184 : min(_2013, _2184));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1979) + _1968;
        float _2486 = (_2481 * _1982) + _1972;
        float _2487 = (_2481 * _1985) + _1976;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2490 = (-1.0) - _2488;
        float _2492 = _2488 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2487 > _2492) || ((_2487 < _2490) || ((_2486 > _2492) || ((_2486 < _2490) || ((_2485 < _2490) || (_2485 > _2492))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2487, cbModelParam._m0[9u].z, fma(_2486, cbModelParam._m0[9u].y, _2485 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2487, cbModelParam._m0[10u].z, fma(_2486, cbModelParam._m0[10u].y, _2485 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2487, cbModelParam._m0[11u].z, fma(_2486, cbModelParam._m0[11u].y, _2485 * cbModelParam._m0[11u].x))), _1921);
            frontier_phi_13_35_ladder = _2632.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2632.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2632.x * cbModelParam._m0[1u].y;
        }
        _2001 = frontier_phi_13_35_ladder_2;
        _2003 = frontier_phi_13_35_ladder_1;
        _2005 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1116, _1117, _1118), _1921);
        _2001 = _1989.x * cbModelParam._m0[1u].y;
        _2003 = _1989.y * cbModelParam._m0[1u].y;
        _2005 = _1989.z * cbModelParam._m0[1u].y;
    }
    float _2009 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _944);
    float _2010 = isnan(_2009) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2009 : min(cbModelParam._m0[25u].w, _2009));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2063 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2067 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2071 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2074 = fma(_1118, cbModelParam._m0[21u].z, fma(_1117, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116));
        float _2077 = fma(_1118, cbModelParam._m0[22u].z, fma(_1117, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116));
        float _2080 = fma(_1118, cbModelParam._m0[23u].z, fma(_1117, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116));
        float _2189;
        if (_2074 > 0.0)
        {
            _2189 = abs((1.0 - _2063) / _2074);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2063 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2189 = frontier_phi_25_21_ladder;
        }
        float _2505;
        if (_2077 > 0.0)
        {
            _2505 = abs((1.0 - _2067) / _2077);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2067 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2505 = frontier_phi_37_32_ladder;
        }
        float _2843;
        if (_2080 > 0.0)
        {
            _2843 = abs((1.0 - _2071) / _2080);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2071 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2843 = frontier_phi_47_44_ladder;
        }
        float _2845 = isnan(_2505) ? _2189 : (isnan(_2189) ? _2505 : min(_2189, _2505));
        float _2846 = isnan(_2843) ? _2845 : (isnan(_2845) ? _2843 : min(_2845, _2843));
        float _2850 = (_2846 * _2074) + _2063;
        float _2851 = (_2846 * _2077) + _2067;
        float _2852 = (_2846 * _2080) + _2071;
        float _2853 = _2846 * 9.9999997473787516355514526367188e-05;
        float _2854 = (-1.0) - _2853;
        float _2856 = _2853 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2852 > _2856) || ((_2852 < _2854) || ((_2851 > _2856) || ((_2851 < _2854) || ((_2850 < _2854) || (_2850 > _2856))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2852, cbModelParam._m0[17u].z, fma(_2851, cbModelParam._m0[17u].y, _2850 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2852, cbModelParam._m0[18u].z, fma(_2851, cbModelParam._m0[18u].y, _2850 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2852, cbModelParam._m0[19u].z, fma(_2851, cbModelParam._m0[19u].y, _2850 * cbModelParam._m0[19u].x))), _2010);
            frontier_phi_22_47_ladder = _2974.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2974.x * cbModelParam._m0[1u].z;
        }
        _2099 = frontier_phi_22_47_ladder_2;
        _2101 = frontier_phi_22_47_ladder_1;
        _2103 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1116, _1117, _1118), _2010);
        _2099 = _2083.x * cbModelParam._m0[1u].z;
        _2101 = _2083.y * cbModelParam._m0[1u].z;
        _2103 = _2083.z * cbModelParam._m0[1u].z;
    }
    float _2116 = (((_1141 * _1093) + _1142) * _1108) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2118 = (((_1141 * _1095) + _1142) * _1108) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2120 = (((_1141 * _1096) + _1142) * _1108) * ((cbModelParam._m0[1u].w * (_2103 - _2005)) + _2005);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2118, cbSceneParam._m0[89u].y, _2116 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2118, cbSceneParam._m0[90u].y, _2116 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2118, cbSceneParam._m0[91u].y, _2116 * cbSceneParam._m0[91u].x));
    float _2163 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2176 = _2163 / _2175;
    float _2177 = _2167 / _2175;
    float _2178 = _2171 / _2175;
    float _2324;
    float _2325;
    float _2326;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2205 = ((uint(_2178 > cbSceneParam._m0[59u].y) + uint(_2178 > cbSceneParam._m0[59u].x)) + uint(_2178 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2206 = _2205 + 43u;
        uint _2214 = _2205 + 44u;
        uint _2222 = _2205 + 45u;
        uint _2230 = _2205 + 46u;
        float _2241 = fma(_2175, cbSceneParam._m0[_2206].w, fma(_2171, cbSceneParam._m0[_2206].z, fma(_2167, cbSceneParam._m0[_2206].y, _2163 * cbSceneParam._m0[_2206].x)));
        float _2245 = fma(_2175, cbSceneParam._m0[_2214].w, fma(_2171, cbSceneParam._m0[_2214].z, fma(_2167, cbSceneParam._m0[_2214].y, _2163 * cbSceneParam._m0[_2214].x)));
        float _2253 = fma(_2175, cbSceneParam._m0[_2230].w, fma(_2171, cbSceneParam._m0[_2230].z, fma(_2167, cbSceneParam._m0[_2230].y, _2163 * cbSceneParam._m0[_2230].x)));
        float _2257 = cbSceneParam._m0[33u].z * _2253;
        float _2259 = cbSceneParam._m0[33u].w * _2253;
        float _2262 = fma(_2175, cbSceneParam._m0[_2222].w, fma(_2171, cbSceneParam._m0[_2222].z, fma(_2167, cbSceneParam._m0[_2222].y, _2163 * cbSceneParam._m0[_2222].x))) / _2253;
        float _2310 = (cbSceneParam._m0[33u].x - sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178))) * cbSceneParam._m0[33u].y;
        float _4648 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2317 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2257 + _2241) / _2253, (_2259 + _2245) / _2253), _2262), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2259 + _2241) / _2253, (_2245 - _2257) / _2253), _2262), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 - _2257) / _2253, (_2245 - _2259) / _2253), _2262), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 - _2259) / _2253, (_2257 + _2245) / _2253), _2262), 0.0)).x), vec4(0.25)));
        _2324 = 1.0 - (_2317 * cbSceneParam._m0[34u].x);
        _2325 = 1.0 - (_2317 * cbSceneParam._m0[34u].y);
        _2326 = 1.0 - (_2317 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2324 = 1.0;
        _2325 = 1.0;
        _2326 = 1.0;
    }
    float _2390;
    float _2392;
    float _2394;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2378 = fma(_2175, cbSceneParam._m0[63u].w, fma(_2171, cbSceneParam._m0[63u].z, fma(_2167, cbSceneParam._m0[63u].y, _2163 * cbSceneParam._m0[63u].x)));
        float _2379 = fma(_2175, cbSceneParam._m0[60u].w, fma(_2171, cbSceneParam._m0[60u].z, fma(_2167, cbSceneParam._m0[60u].y, _2163 * cbSceneParam._m0[60u].x))) / _2378;
        float _2380 = fma(_2175, cbSceneParam._m0[61u].w, fma(_2171, cbSceneParam._m0[61u].z, fma(_2167, cbSceneParam._m0[61u].y, _2163 * cbSceneParam._m0[61u].x))) / _2378;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2379 >= cbSceneParam._m0[64u].x) && (_2380 >= cbSceneParam._m0[64u].y)) && (_2379 <= cbSceneParam._m0[64u].z)) && (_2380 <= cbSceneParam._m0[64u].w))
        {
            float _2518 = fma(_2175, cbSceneParam._m0[62u].w, fma(_2171, cbSceneParam._m0[62u].z, fma(_2167, cbSceneParam._m0[62u].y, _2163 * cbSceneParam._m0[62u].x))) / _2378;
            float _2522 = isnan(cbSceneParam._m0[41u].w) ? _2518 : (isnan(_2518) ? cbSceneParam._m0[41u].w : max(_2518, cbSceneParam._m0[41u].w));
            float _2565 = (cbSceneParam._m0[33u].x - sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178))) * cbSceneParam._m0[33u].y;
            float _4664 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
            float _2572 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2379, cbSceneParam._m0[33u].w + _2380), _2522), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2379, _2380 - cbSceneParam._m0[33u].z), _2522), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2379 - cbSceneParam._m0[33u].z, _2380 - cbSceneParam._m0[33u].w), _2522), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2379 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2380), _2522), 0.0)).x), vec4(0.25)));
            float _2576 = 1.0 - (_2572 * cbSceneParam._m0[34u].x);
            float _2577 = 1.0 - (_2572 * cbSceneParam._m0[34u].y);
            float _2578 = 1.0 - (_2572 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2578) ? _2326 : (isnan(_2326) ? _2578 : min(_2326, _2578));
            frontier_phi_34_33_ladder_1 = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
            frontier_phi_34_33_ladder_2 = isnan(_2576) ? _2324 : (isnan(_2324) ? _2576 : min(_2324, _2576));
        }
        else
        {
            frontier_phi_34_33_ladder = _2326;
            frontier_phi_34_33_ladder_1 = _2325;
            frontier_phi_34_33_ladder_2 = _2324;
        }
        _2390 = frontier_phi_34_33_ladder_2;
        _2392 = frontier_phi_34_33_ladder_1;
        _2394 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2390 = _2324;
        _2392 = _2325;
        _2394 = _2326;
    }
    uvec4 _2399 = floatBitsToUint(cbInstanceData._m0[_1068 + 5u]);
    uint _2401 = _2399.x * 14u;
    uint _2402 = _2401 + 13u;
    float _2409 = _1108 + (-1.0);
    float _2414 = (cbLight._m0[_2402].x * _2409) + 1.0;
    float _2415 = (cbLight._m0[_2402].y * _2409) + 1.0;
    float _2416 = (cbLight._m0[_2402].z * _2409) + 1.0;
    float _2417 = (cbLight._m0[_2402].w * _2409) + 1.0;
    uint _2418 = _2401 + 5u;
    float _2424 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
    uint _2428 = _2401 + 4u;
    float _2437 = isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0));
    uint _2441 = _2401 | 1u;
    float _2452 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_941, _942, _943));
    float _2455 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_941, _942, _943));
    float _4700 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _4711 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2460 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * 0.3183098733425140380859375;
    float _2462 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * 0.3183098733425140380859375;
    float _2469 = ((cbLight._m0[_2418].x * _2424) * _2462) + (((cbLight._m0[_2428].x * _2390) * _2437) * _2460);
    float _2470 = ((_2424 * cbLight._m0[_2418].y) * _2462) + (((cbLight._m0[_2428].y * _2392) * _2437) * _2460);
    float _2471 = ((_2424 * cbLight._m0[_2418].z) * _2462) + (((cbLight._m0[_2428].z * _2394) * _2437) * _2460);
    uvec4 _2475 = floatBitsToUint(cbLight._m0[_2401 + 12u]);
    bool _2477 = _2475.x == 0u;
    float _2579;
    float _2581;
    float _2583;
    if (_2477)
    {
        _2579 = _2469;
        _2581 = _2470;
        _2583 = _2471;
    }
    else
    {
        uint _2587 = _2401 + 6u;
        float _2603 = (dot(vec3(cbLight._m0[_2401 + 2u].xyz), vec3(_941, _942, _943)) * 0.5) + 0.5;
        float _2604 = _2603 * _2603;
        float _4722 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2605 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2606 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2579 = (((cbLight._m0[_2587].x * 0.3183098733425140380859375) * _2605) * _2606) + _2469;
        _2581 = (((cbLight._m0[_2587].y * 0.3183098733425140380859375) * _2605) * _2606) + _2470;
        _2583 = (((cbLight._m0[_2587].z * 0.3183098733425140380859375) * _2605) * _2606) + _2471;
    }
    bool _2586 = _2475.y == 0u;
    float _2641;
    float _2643;
    float _2645;
    if (_2586)
    {
        _2641 = _2579;
        _2643 = _2581;
        _2645 = _2583;
    }
    else
    {
        uint _2814 = _2401 + 7u;
        float _2830 = (dot(vec3(cbLight._m0[_2401 + 3u].xyz), vec3(_941, _942, _943)) * 0.5) + 0.5;
        float _2831 = _2830 * _2830;
        float _4738 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2832 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2833 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2641 = (((cbLight._m0[_2814].x * 0.3183098733425140380859375) * _2832) * _2833) + _2579;
        _2643 = (((cbLight._m0[_2814].y * 0.3183098733425140380859375) * _2832) * _2833) + _2581;
        _2645 = (((cbLight._m0[_2814].z * 0.3183098733425140380859375) * _2832) * _2833) + _2583;
    }
    uint _2648 = _2401 + 8u;
    float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _944) * 0.949999988079071044921875);
    float _2662 = _2661 * _2661;
    float _2663 = cbLight._m0[_2401].x + _1022;
    float _2664 = cbLight._m0[_2401].y + _1023;
    float _2665 = cbLight._m0[_2401].z + _1024;
    float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
    float _2670 = _2669 * _2663;
    float _2671 = _2669 * _2664;
    float _2672 = _2669 * _2665;
    float _2673 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2401].xyz));
    float _4754 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _4765 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _2677 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2678 = dot(vec3(_941, _942, _943), vec3(_2670, _2671, _2672));
    float _4776 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2682 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2670, _2671, _2672));
    float _4787 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2686 = _2662 * _2662;
    float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
    float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2699 = 0.959999978542327880859375 - _1090;
    float _2701 = 0.959999978542327880859375 - _1091;
    float _2702 = 0.959999978542327880859375 - _1092;
    float _2709 = 1.0 - _2662;
    float _2720 = (0.5 / (((_2677 * ((_2676 * _2709) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _2709) + _2662) * _2676))) * _2676;
    float _4798 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2722 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
    uint _2736 = _2401 + 9u;
    float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _944) * 0.949999988079071044921875);
    float _2748 = _2747 * _2747;
    float _2749 = cbLight._m0[_2441].x + _1022;
    float _2750 = cbLight._m0[_2441].y + _1023;
    float _2751 = cbLight._m0[_2441].z + _1024;
    float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
    float _2756 = _2755 * _2749;
    float _2757 = _2755 * _2750;
    float _2758 = _2755 * _2751;
    float _2759 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2441].xyz));
    float _4809 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2762 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    float _2763 = dot(vec3(_941, _942, _943), vec3(_2756, _2757, _2758));
    float _4820 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2766 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2767 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2756, _2757, _2758));
    float _4831 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2771 = _2748 * _2748;
    float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
    float _2782 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
    float _2789 = 1.0 - _2748;
    float _2799 = (0.5 / (((_2677 * ((_2762 * _2789) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _2789) + _2748) * _2762))) * _2762;
    float _4842 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2801 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
    float _2811 = (((((_2782 * _2699) + _1093) * cbLight._m0[_2736].x) * _2801) * _2424) + ((((cbLight._m0[_2648].x * _2390) * ((_2698 * _2699) + _1093)) * _2722) * _2437);
    float _2812 = (((((_2782 * _2701) + _1095) * cbLight._m0[_2736].y) * _2801) * _2424) + ((((cbLight._m0[_2648].y * _2392) * ((_2698 * _2701) + _1095)) * _2722) * _2437);
    float _2813 = (((((_2782 * _2702) + _1096) * cbLight._m0[_2736].z) * _2801) * _2424) + ((((cbLight._m0[_2648].z * _2394) * ((_2698 * _2702) + _1096)) * _2722) * _2437);
    float _2869;
    float _2871;
    float _2873;
    if (_2477)
    {
        _2869 = _2811;
        _2871 = _2812;
        _2873 = _2813;
    }
    else
    {
        uint _2875 = _2401 + 2u;
        uint _2879 = _2401 + 10u;
        float _2893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2875].w)) * _944) * 0.949999988079071044921875);
        float _2894 = _2893 * _2893;
        float _2895 = cbLight._m0[_2875].x + _1022;
        float _2896 = cbLight._m0[_2875].y + _1023;
        float _2897 = cbLight._m0[_2875].z + _1024;
        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
        float _2902 = _2901 * _2895;
        float _2903 = _2901 * _2896;
        float _2904 = _2901 * _2897;
        float _2905 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2875].xyz));
        float _4853 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2909 = dot(vec3(_941, _942, _943), vec3(_2902, _2903, _2904));
        float _4864 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2913 = dot(vec3(cbLight._m0[_2875].xyz), vec3(_2902, _2903, _2904));
        float _4875 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2917 = _2894 * _2894;
        float _2921 = ((_2912 * _2912) * (_2917 + (-1.0))) + 1.0;
        float _2928 = exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0);
        float _2935 = 1.0 - _2894;
        float _2945 = (0.5 / (((_2677 * ((_2908 * _2935) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _2935) + _2894) * _2908))) * _2908;
        float _4886 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2947 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2917 / ((_2921 * _2921) * 3.141590118408203125));
        float _2948 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2869 = (((((_2928 * _2699) + _1093) * cbLight._m0[_2879].x) * _2947) * _2948) + _2811;
        _2871 = (((((_2928 * _2701) + _1095) * cbLight._m0[_2879].y) * _2947) * _2948) + _2812;
        _2873 = (((((_2928 * _2702) + _1096) * cbLight._m0[_2879].z) * _2947) * _2948) + _2813;
    }
    float _2979;
    float _2981;
    float _2983;
    if (_2586)
    {
        _2979 = _2869;
        _2981 = _2871;
        _2983 = _2873;
    }
    else
    {
        uint _2990 = _2401 + 3u;
        uint _2994 = _2401 + 11u;
        float _3008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2990].w)) * _944) * 0.949999988079071044921875);
        float _3009 = _3008 * _3008;
        float _3010 = cbLight._m0[_2990].x + _1022;
        float _3011 = cbLight._m0[_2990].y + _1023;
        float _3012 = cbLight._m0[_2990].z + _1024;
        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
        float _3017 = _3016 * _3010;
        float _3018 = _3016 * _3011;
        float _3019 = _3016 * _3012;
        float _3020 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2990].xyz));
        float _4902 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        float _3023 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
        float _3024 = dot(vec3(_941, _942, _943), vec3(_3017, _3018, _3019));
        float _4913 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3027 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _3028 = dot(vec3(cbLight._m0[_2990].xyz), vec3(_3017, _3018, _3019));
        float _4924 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3032 = _3009 * _3009;
        float _3036 = ((_3027 * _3027) * (_3032 + (-1.0))) + 1.0;
        float _3043 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
        float _3050 = 1.0 - _3009;
        float _3060 = (0.5 / (((_2677 * ((_3023 * _3050) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _3050) + _3009) * _3023))) * _3023;
        float _4935 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3062 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_3032 / ((_3036 * _3036) * 3.141590118408203125));
        float _3063 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2979 = (((((_3043 * _2699) + _1093) * cbLight._m0[_2994].x) * _3062) * _3063) + _2869;
        _2981 = (((((_3043 * _2701) + _1095) * cbLight._m0[_2994].y) * _3062) * _3063) + _2871;
        _2983 = (((((_3043 * _2702) + _1096) * cbLight._m0[_2994].z) * _3062) * _3063) + _2873;
    }
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_2399.y == 0u)
    {
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.x;
        uint _3096 = uint((float(_3084.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _3085))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _3085)));
        float _3106 = (log2(_2178 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3107 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
        uint _3110 = uint(isnan(14.0) ? _3107 : (isnan(_3107) ? 14.0 : min(_3107, 14.0)));
        uvec4 _3115 = texelFetch(g_lightClusterGridBuffer, int(((_3110 << 2u) + (_3096 << 6u)) >> 2u));
        uint _3116 = _3115.x;
        uint _3117 = _3084.z;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        if (((((1u << ((_3117 >> 4u) & 15u)) + 4294967295u) & _3116) == 0u) || ((_3117 & 240u) == 0u))
        {
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
            _3231 = 0.0;
            _3233 = 0.0;
            _3235 = 0.0;
        }
        else
        {
            float _3226;
            float _3228;
            float _3230;
            float _3232;
            float _3234;
            float _3236;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            uint _3384 = 0u;
            uint _3393;
            bool _3394;
            for (;;)
            {
                _3393 = texelFetch(g_lightClassification, int((((_3110 << 5u) + (_3096 << 9u)) + (_3384 << 2u)) >> 2u)).x;
                _3394 = _3393 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3394)
                {
                    frontier_phi_66_pred = _3383;
                    frontier_phi_66_pred_1 = _3382;
                    frontier_phi_66_pred_2 = _3381;
                    frontier_phi_66_pred_3 = _3380;
                    frontier_phi_66_pred_4 = _3379;
                    frontier_phi_66_pred_5 = _3378;
                }
                else
                {
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    uint _3508;
                    _3502 = _3378;
                    _3503 = _3379;
                    _3504 = _3380;
                    _3505 = _3381;
                    _3506 = _3382;
                    _3507 = _3383;
                    _3508 = _3393;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    for (;;)
                    {
                        uint _3512 = uint(findLSB(_3508)) + (_3384 << 5u);
                        uint _3509 = (_3508 + 4294967295u) & _3508;
                        uint _3514 = _3512 * 48u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 3u)).x));
                        uint _3534 = (_3512 * 48u) + 4u;
                        vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 3u)).x));
                        uint _3553 = (_3512 * 48u) + 8u;
                        vec3 _3564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x));
                        float _3568 = _3528.x - _2176;
                        float _3569 = _3528.y - _2177;
                        float _3570 = _3528.z - _2178;
                        float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                        float _3574 = inversesqrt(_3571);
                        float _3575 = _3574 * _3568;
                        float _3576 = _3574 * _3569;
                        float _3577 = _3574 * _3570;
                        float _3578 = dot(vec3(_1049, _1052, _1055), vec3(_3575, _3576, _3577));
                        float _3583 = 1.0 - (_3571 * _3528.w);
                        float _4961 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3585 = sqrt(_3571) * _3547.w;
                        float _3588 = 1.39999997615814208984375 / (_3585 + 1.39999997615814208984375);
                        float _3589 = _3588 * _3588;
                        float _3592 = ((1.0 - _3589) * _3578) + _3589;
                        float _3595 = _3585 * _3585;
                        float _3599 = ((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3584) / ((_3595 * 0.699999988079071044921875) + 1.0);
                        float _3603 = (-0.0) - _2176;
                        float _3604 = (-0.0) - _2177;
                        float _3605 = (-0.0) - _2178;
                        float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                        float _3610 = _3609 * _3603;
                        float _3611 = _3609 * _3604;
                        float _3612 = _3609 * _3605;
                        float _3619 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                        float _3620 = 1.0 - _1124;
                        float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                        float _3628 = _3627 * _3627;
                        float _3629 = _3628 * _3628;
                        float _3630 = _3610 + _3575;
                        float _3631 = _3611 + _3576;
                        float _3632 = _3612 + _3577;
                        float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                        float _3640 = dot(vec3(_1049, _1052, _1055), vec3(_3610, _3611, _3612));
                        float _4977 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3643 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3644 = dot(vec3(_1049, _1052, _1055), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                        float _4988 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3647 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                        float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                        float _3652 = _3588 * _3628;
                        float _3653 = _3652 * _3652;
                        float _3656 = ((1.0 - _3653) * _3578) + _3653;
                        float _4999 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3657 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3658 = 1.0 - _3628;
                        float _3668 = (0.5 / (((_3657 * ((_3643 * _3658) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3628) * _3643))) * _3657;
                        float _5010 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3679 = (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3651 * _3651) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125))) * _3584;
                        _3437 = (_3599 * _3547.x) + _3505;
                        _3438 = (_3599 * _3547.y) + _3506;
                        _3439 = (_3599 * _3547.z) + _3507;
                        _3434 = (_3679 * _3564.x) + _3502;
                        _3435 = (_3679 * _3564.y) + _3503;
                        _3436 = (_3679 * _3564.z) + _3504;
                        if (_3509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3502 = _3434;
                            _3503 = _3435;
                            _3504 = _3436;
                            _3505 = _3437;
                            _3506 = _3438;
                            _3507 = _3439;
                            _3508 = _3509;
                        }
                    }
                    frontier_phi_66_pred = _3439;
                    frontier_phi_66_pred_1 = _3438;
                    frontier_phi_66_pred_2 = _3437;
                    frontier_phi_66_pred_3 = _3436;
                    frontier_phi_66_pred_4 = _3435;
                    frontier_phi_66_pred_5 = _3434;
                }
                _3236 = frontier_phi_66_pred;
                _3234 = frontier_phi_66_pred_1;
                _3232 = frontier_phi_66_pred_2;
                _3230 = frontier_phi_66_pred_3;
                _3228 = frontier_phi_66_pred_4;
                _3226 = frontier_phi_66_pred_5;
                uint _3385 = _3384 + 1u;
                if (_3385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3378 = _3226;
                    _3379 = _3228;
                    _3380 = _3230;
                    _3381 = _3232;
                    _3382 = _3234;
                    _3383 = _3236;
                    _3384 = _3385;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
            _3231 = _3232;
            _3233 = _3234;
            _3235 = _3236;
        }
        uvec4 _3239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3240 = _3239.z;
        uint _3242 = (_3240 >> 8u) & 15u;
        float _3346;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        if (((4294967295u << _3242) & _3116) == 0u)
        {
            _3346 = _3225;
            _3348 = _3227;
            _3350 = _3229;
            _3352 = _3231;
            _3354 = _3233;
            _3356 = _3235;
        }
        else
        {
            float _3371 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
            float _3372 = _3371 * _2176;
            float _3373 = _3371 * _2177;
            float _3374 = _3371 * _2178;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3242 < ((_3240 >> 12u) & 15u))
            {
                float _3347;
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3485 = _3225;
                float _3486 = _3227;
                float _3487 = _3229;
                float _3488 = _3231;
                float _3489 = _3233;
                float _3490 = _3235;
                uint _3491 = _3242;
                uint _3500;
                bool _3501;
                for (;;)
                {
                    _3500 = texelFetch(g_lightClassification, int((((_3110 << 5u) + (_3096 << 9u)) + (_3491 << 2u)) >> 2u)).x;
                    _3501 = _3500 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3501)
                    {
                        frontier_phi_72_pred = _3490;
                        frontier_phi_72_pred_1 = _3489;
                        frontier_phi_72_pred_2 = _3488;
                        frontier_phi_72_pred_3 = _3487;
                        frontier_phi_72_pred_4 = _3486;
                        frontier_phi_72_pred_5 = _3485;
                    }
                    else
                    {
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3697 = _3485;
                        float _3698 = _3486;
                        float _3699 = _3487;
                        float _3700 = _3488;
                        float _3701 = _3489;
                        float _3702 = _3490;
                        uint _3703 = _3500;
                        uint _3704;
                        vec4 _3729;
                        float _3730;
                        vec4 _3745;
                        vec3 _3757;
                        vec4 _3772;
                        vec4 _3787;
                        float _3833;
                        bool _3834;
                        for (;;)
                        {
                            uint _3714 = ((_3491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3703));
                            _3704 = (_3703 + 4294967295u) & _3703;
                            uint _3716 = _3714 * 40u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3730 = _3729.w;
                            uint _3732 = (_3714 * 40u) + 4u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3747 = (_3714 * 40u) + 8u;
                            _3757 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x));
                            uint _3759 = (_3714 * 40u) + 16u;
                            _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3774 = (_3714 * 40u) + 20u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3714 * 40u) + 24u;
                            vec4 _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3808 = (_3714 * 40u) + 28u;
                            vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            _3833 = fma(_2178, _3821.z, fma(_2177, _3821.y, _3821.x * _2176)) + _3821.w;
                            _3834 = !((fma(_2178, _3802.z, fma(_2177, _3802.y, _3802.x * _2176)) + _3802.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3834)
                            {
                                float _3861 = _3729.x - _2176;
                                float _3862 = _3729.y - _2177;
                                float _3863 = _3729.z - _2178;
                                float _3864 = dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863));
                                float _3867 = inversesqrt(_3864);
                                float _3868 = _3867 * _3861;
                                float _3869 = _3867 * _3862;
                                float _3870 = _3867 * _3863;
                                float _3874 = 1.0 - (_3864 / (_3730 * _3730));
                                float _5021 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3879 = sqrt(_3864) * _3745.w;
                                float _3881 = 1.39999997615814208984375 / (_3879 + 1.39999997615814208984375);
                                float _3882 = _3881 * _3881;
                                float _3885 = ((1.0 - _3882) * dot(vec3(_3868, _3869, _3870), vec3(_1049, _1052, _1055))) + _3882;
                                float _3888 = _3879 * _3879;
                                float _3892 = (fma(_2178, _3772.z, fma(_2177, _3772.y, _3772.x * _2176)) + _3772.w) / _3833;
                                float _3893 = (fma(_2178, _3787.z, fma(_2177, _3787.y, _3787.x * _2176)) + _3787.w) / _3833;
                                float _3897 = 1.0 - dot(vec2(_3892, _3893), vec2(_3892, _3893));
                                float _5037 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3898 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3899 = _3898 * (((isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0))) * _3875) / ((_3888 * 0.699999988079071044921875) + 1.0));
                                float _3911 = exp2(log2(1.0 / ((_3888 * 3.5) + 5.0)) * 0.25);
                                float _3912 = 1.0 - _1124;
                                float _3919 = sqrt(1.0 - ((1.0 - (_3912 * _3912)) * (1.0 - (_3911 * _3911))));
                                float _3920 = _3919 * _3919;
                                float _3921 = _3920 * _3920;
                                float _3922 = _3868 - _3372;
                                float _3923 = _3869 - _3373;
                                float _3924 = _3870 - _3374;
                                float _3928 = inversesqrt(dot(vec3(_3922, _3923, _3924), vec3(_3922, _3923, _3924)));
                                float _3932 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3372, (-0.0) - _3373, (-0.0) - _3374));
                                float _5048 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3935 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3936 = dot(vec3(_1049, _1052, _1055), vec3(_3928 * _3922, _3928 * _3923, _3928 * _3924));
                                float _5059 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3939 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3943 = ((_3939 * _3939) * (_3921 + (-1.0))) + 1.0;
                                float _3944 = _3881 * _3920;
                                float _3945 = _3944 * _3944;
                                float _3951 = ((1.0 - _3945) * dot(vec3(_1049, _1052, _1055), vec3(_3868, _3869, _3870))) + _3945;
                                float _5070 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3952 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3953 = 1.0 - _3920;
                                float _3963 = (0.5 / (((_3952 * ((_3935 * _3953) + _3920)) + 9.9999999392252902907785028219223e-09) + (((_3952 * _3953) + _3920) * _3935))) * _3952;
                                float _5081 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3973 = (_3898 * _3875) * (((_3921 * 3.1415927410125732421875) * (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) / ((_3943 * _3943) * ((_3888 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3899 * _3745.y;
                                frontier_phi_78_pred_1 = _3899 * _3745.x;
                                frontier_phi_78_pred_2 = _3973 * _3757.z;
                                frontier_phi_78_pred_3 = _3973 * _3757.y;
                                frontier_phi_78_pred_4 = _3973 * _3757.x;
                                frontier_phi_78_pred_5 = _3899 * _3745.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3981 = frontier_phi_78_pred;
                            _3980 = frontier_phi_78_pred_1;
                            _3979 = frontier_phi_78_pred_2;
                            _3978 = frontier_phi_78_pred_3;
                            _3977 = frontier_phi_78_pred_4;
                            _3982 = frontier_phi_78_pred_5;
                            _3687 = _3980 + _3700;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3684 = _3977 + _3697;
                            _3685 = _3978 + _3698;
                            _3686 = _3979 + _3699;
                            if (_3704 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3697 = _3684;
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3704;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3689;
                        frontier_phi_72_pred_1 = _3688;
                        frontier_phi_72_pred_2 = _3687;
                        frontier_phi_72_pred_3 = _3686;
                        frontier_phi_72_pred_4 = _3685;
                        frontier_phi_72_pred_5 = _3684;
                    }
                    _3357 = frontier_phi_72_pred;
                    _3355 = frontier_phi_72_pred_1;
                    _3353 = frontier_phi_72_pred_2;
                    _3351 = frontier_phi_72_pred_3;
                    _3349 = frontier_phi_72_pred_4;
                    _3347 = frontier_phi_72_pred_5;
                    uint _3492 = _3491 + 1u;
                    if (_3492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3485 = _3347;
                        _3486 = _3349;
                        _3487 = _3351;
                        _3488 = _3353;
                        _3489 = _3355;
                        _3490 = _3357;
                        _3491 = _3492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3357;
                frontier_phi_60_61_ladder_1 = _3355;
                frontier_phi_60_61_ladder_2 = _3351;
                frontier_phi_60_61_ladder_3 = _3349;
                frontier_phi_60_61_ladder_4 = _3347;
                frontier_phi_60_61_ladder_5 = _3353;
            }
            else
            {
                frontier_phi_60_61_ladder = _3235;
                frontier_phi_60_61_ladder_1 = _3233;
                frontier_phi_60_61_ladder_2 = _3229;
                frontier_phi_60_61_ladder_3 = _3227;
                frontier_phi_60_61_ladder_4 = _3225;
                frontier_phi_60_61_ladder_5 = _3231;
            }
            _3346 = frontier_phi_60_61_ladder_4;
            _3348 = frontier_phi_60_61_ladder_3;
            _3350 = frontier_phi_60_61_ladder_2;
            _3352 = frontier_phi_60_61_ladder_5;
            _3354 = frontier_phi_60_61_ladder_1;
            _3356 = frontier_phi_60_61_ladder;
        }
        float _3361 = isnan(1.0) ? _1108 : (isnan(_1108) ? 1.0 : min(_1108, 1.0));
        _3129 = (_3361 * _3352) + _2641;
        _3131 = (_3361 * _3354) + _2643;
        _3133 = (_3361 * _3356) + _2645;
        _3135 = ((_3346 * _1093) * _3361) + _2979;
        _3137 = ((_3348 * _1095) * _3361) + _2981;
        _3139 = ((_3350 * _1096) * _3361) + _2983;
    }
    else
    {
        _3129 = _2641;
        _3131 = _2643;
        _3133 = _2645;
        _3135 = _2979;
        _3137 = _2981;
        _3139 = _2983;
    }
    uint _3145 = _1069 + uint(cbMatDynParam._m0[0u].w);
    float _3151 = ((((((_866.x - _861.x) * _844) + _861.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _790) * cbMtdParam._m0[20u].x)) * _799) * cbInstanceData._m0[_3145].x;
    float _3152 = ((((((_866.y - _861.y) * _844) + _861.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_779.y - _777) * _758) + _777)) * cbMtdParam._m0[20u].y)) * _799) * cbInstanceData._m0[_3145].y;
    float _3153 = ((((((_866.z - _861.z) * _844) + _861.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_779.z - _778) * _758) + _778)) * cbMtdParam._m0[20u].z)) * _799) * cbInstanceData._m0[_3145].z;
    float _5097 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _5108 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _5119 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _3170 = (((isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3129 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1108))) + ((_3135 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1910)) * cbPerFrame._m0[3u].x)) + _3151;
    float _3172 = (_3152 + ((_3137 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1910)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3131 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1108)));
    float _3174 = (_3153 + ((_3139 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1910)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3133 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1108)));
    float _5145 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3187 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
    uint _3188 = _1068 + 6u;
    float _3196 = _1030 / cbSceneParam._m0[86u].x;
    float _3197 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _3211 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3196, _3197, (log2((isnan(cbSceneParam._m0[77u].w) ? _964 : (isnan(_964) ? cbSceneParam._m0[77u].w : min(_964, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3213 = _3211.x;
    float _3214 = _3211.y;
    float _3215 = _3211.z;
    float _3216 = _3211.w;
    float _3287;
    float _3289;
    float _3291;
    float _3293;
    if (_964 > cbSceneParam._m0[78u].w)
    {
        float _3250 = isnan(_964) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _964 : min(cbSceneParam._m0[80u].w, _964));
        float _3251 = _3250 / _964;
        float _3262 = _3251 * _1015;
        float _3263 = _1016 * _3251;
        float _3264 = (-0.0) - _3263;
        float _3265 = _3251 * _1017;
        float _3267 = (cbSceneParam._m0[77u].w * _3264) / _3250;
        float _3268 = _3267 + cbSceneParam._m0[79u].w;
        float _3269 = cbSceneParam._m0[79u].w - _3263;
        float _3275 = sqrt(((_3262 * _3262) + (_3263 * _3263)) + (_3265 * _3265));
        float _3278 = (1.0 - (cbSceneParam._m0[77u].w / _3250)) * _3275;
        float _3283 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3285 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3447;
        if (abs((_3264 - _3267) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3447 = ((((_3268 > 0.0) ? exp2(_3283 * _3268) : (2.0 - exp2(_3285 * _3268))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3278;
        }
        else
        {
            float _3407 = 1.0 / cbSceneParam._m0[80u].x;
            float _3408 = isnan(_3269) ? _3268 : (isnan(_3268) ? _3269 : max(_3268, _3269));
            float _3409 = isnan(_3269) ? _3268 : (isnan(_3268) ? _3269 : min(_3268, _3269));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            float _3419 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : min(_3409, 0.0));
            _3447 = ((abs(_3275 / _3264) * cbSceneParam._m0[80u].y) * ((((_3418 - _3419) * 2.0) - ((exp2(_3283 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0)))) - exp2(_3283 * (isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))))) * _3407)) - ((exp2(_3285 * _3418) - exp2(_3285 * _3419)) * _3407))) + (_3278 * cbSceneParam._m0[80u].z);
        }
        vec4 _3449 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3196, _3197, 1.0), 0.0);
        float _3458 = exp2((_3447 * (-1.44269502162933349609375)) * (1.0 - _3449.w));
        float _3459 = log2(_3458);
        float _3475 = log2(_3216);
        _3287 = (exp2(_3475 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3459 * cbSceneParam._m0[78u].x)) * _3449.x) / cbSceneParam._m0[78u].x)) + _3213;
        _3289 = (exp2(_3475 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3459 * cbSceneParam._m0[78u].y)) * _3449.y) / cbSceneParam._m0[78u].y)) + _3214;
        _3291 = (exp2(_3475 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3459 * cbSceneParam._m0[78u].z)) * _3449.z) / cbSceneParam._m0[78u].z)) + _3215;
        _3293 = _3458 * _3216;
    }
    else
    {
        _3287 = _3213;
        _3289 = _3214;
        _3291 = _3215;
        _3293 = _3216;
    }
    float _3305 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3306 = _3305 == 3.0;
    float _3307 = log2(_3293);
    float _3311 = exp2(_3307 * cbSceneParam._m0[78u].x);
    float _3312 = exp2(_3307 * cbSceneParam._m0[78u].y);
    float _3313 = exp2(_3307 * cbSceneParam._m0[78u].z);
    float _3314 = _3311 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0)));
    float _3315 = _3312 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0)));
    float _3316 = _3313 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0)));
    float _3325 = (_3305 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3325 * (_3306 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3287)));
    SV_Target.y = _3325 * (_3306 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3289)));
    SV_Target.z = _3325 * (_3306 ? _3316 : (_3316 + (cbSceneParam._m0[72u].w * _3291)));
    SV_Target.w = cbInstanceData._m0[_3188].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3151) * _3187) * _3311) * _3325;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3152) * _3187) * _3312) * _3325;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3153) * _3187) * _3313) * _3325;
    SV_Target_1.w = cbInstanceData._m0[_3188].w;
}


