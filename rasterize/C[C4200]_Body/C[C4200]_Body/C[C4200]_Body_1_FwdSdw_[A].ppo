#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1460;
float _4156;
float _4157;
float _4158;
float _4159;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _259 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _273 = exp2(log2(_259.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _274 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _275 = isnan(1.0) ? _274 : (isnan(_274) ? 1.0 : min(_274, 1.0));
    vec4 _289 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _293 = _289.z;
    float _301 = exp2(log2(_293 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    float _324 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(4.0) ? _325 : (isnan(_325) ? 4.0 : min(_325, 4.0));
    float _339 = floor(_326);
    vec4 _342 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _339));
    vec4 _367 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _378 = cbMtdParam._m0[9u].x * _367.x;
    float _379 = cbMtdParam._m0[9u].y * _367.y;
    float _380 = cbMtdParam._m0[9u].z * _367.z;
    float _387 = (((cbMtdParam._m0[10u].x * _342.x) - _378) * _303) + _378;
    float _388 = (((cbMtdParam._m0[10u].y * _342.y) - _379) * _303) + _379;
    float _389 = (((cbMtdParam._m0[10u].z * _342.z) - _380) * _303) + _380;
    float _395 = exp2(log2(_289.w) * cbMtdParam._m0[24u].w);
    vec4 _408 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _428 = (((cbMtdParam._m0[16u].x * _408.x) - _387) * _395) + _387;
    float _429 = (((cbMtdParam._m0[16u].y * _408.y) - _388) * _395) + _388;
    float _430 = (((cbMtdParam._m0[16u].z * _408.z) - _389) * _395) + _389;
    vec4 _443 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _468 = (_259.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _443.x) - _428) * _275) + _428);
    float _470 = (_259.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _443.y) - _429) * _275) + _429);
    float _472 = (_259.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _443.z) - _430) * _275) + _430);
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[30u].z;
    _191[0u] = cbMtdParam._m0[30u].w;
    _190[1u] = cbMtdParam._m0[32u].z;
    _191[1u] = cbMtdParam._m0[32u].w;
    _190[2u] = cbMtdParam._m0[32u].x;
    _191[2u] = cbMtdParam._m0[32u].y;
    _190[3u] = cbMtdParam._m0[31u].z;
    _191[3u] = cbMtdParam._m0[31u].w;
    _190[4u] = cbMtdParam._m0[31u].x;
    _191[4u] = cbMtdParam._m0[31u].y;
    float _510 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    uint _512 = uint(int(isnan(4.0) ? _510 : (isnan(_510) ? 4.0 : min(_510, 4.0))));
    float _519 = ((_191[_512] - cbMtdParam._m0[23u].z) * _303) + cbMtdParam._m0[23u].z;
    float _522 = ((cbMtdParam._m0[23u].w - _519) * _395) + _519;
    float _525 = ((cbMtdParam._m0[26u].y - _522) * _275) + _522;
    vec4 _540 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _339));
    vec4 _558 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _566 = cbMtdParam._m0[23u].x + _558.z;
    float _569 = (((_540.z + _190[_512]) - _566) * _303) + _566;
    vec4 _581 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _592 = (((_581.z - _569) + cbMtdParam._m0[30u].x) * _395) + _569;
    float _598 = ((((_293 * 2.0) * _592) - _592) * cbMtdParam._m0[25u].w) + _592;
    vec4 _610 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _621 = (((cbMtdParam._m0[24u].z + _610.z) - _598) * _275) + _598;
    float _634 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _657 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_634 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _634) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _661 = cbPerFrame._m0[22u].x * 2.0;
    float _662 = _661 * cbMtdParam._m0[28u].z;
    float _665 = (_657.x * 0.5) + (-0.25);
    float _668 = (_657.y * 0.5) + (-0.25);
    float _669 = _668 * cbMtdParam._m0[28u].y;
    float _671 = (-0.0) - (cbMtdParam._m0[28u].y * _665);
    float _673 = fract(_662);
    float _675 = fract(_662 + 0.5);
    float _687 = abs((_673 * 2.0) + (-1.0));
    vec4 _704 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_673 * _671) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_669 * _673) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _706 = _704.x;
    float _707 = _704.y;
    float _708 = _704.z;
    vec4 _709 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_675 * _671) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_669 * _675) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _720 = ((_709.x - _706) * _687) + _706;
    float _727 = exp2(log2(_720 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _728 = isnan(cbMtdParam._m0[29u].y) ? _727 : (isnan(_727) ? cbMtdParam._m0[29u].y : max(_727, cbMtdParam._m0[29u].y));
    float _729 = isnan(cbMtdParam._m0[29u].z) ? _728 : (isnan(_728) ? cbMtdParam._m0[29u].z : min(_728, cbMtdParam._m0[29u].z));
    float _753 = (cbMtdParam._m0[33u].x * _634) + TEXCOORD;
    float _754 = (cbMtdParam._m0[33u].y * _634) + TEXCOORD_1;
    float _757 = _661 * cbMtdParam._m0[27u].w;
    float _758 = _668 * cbMtdParam._m0[27u].z;
    float _760 = (-0.0) - (cbMtdParam._m0[27u].z * _665);
    float _761 = fract(_757);
    float _763 = fract(_757 + 0.5);
    float _774 = abs((_761 * 2.0) + (-1.0));
    vec4 _791 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_761 * _760) + _753) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_758 * _761) + _754) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _796 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_763 * _760) + _753) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_758 * _763) + _754) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _830 = ((_540.x - _560) * _303) + _560;
    float _831 = ((_540.y - _561) * _303) + _561;
    float _836 = ((_581.x - _830) * _395) + _830;
    float _837 = ((_581.y - _831) * _395) + _831;
    float _846 = ((((_610.x - _836) * _275) + _836) * 2.0) + (-1.0);
    float _847 = ((((_610.y - _837) * _275) + _837) * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _4218 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _853 = sqrt(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))));
    float _856 = (cbMtdParam._m0[26u].z * ((_289.x * 2.0) + (-1.0))) + _846;
    float _857 = (cbMtdParam._m0[26u].z * ((_289.y * 2.0) + (-1.0))) + _847;
    float _859 = gl_FragCoord.x * 0.125;
    float _861 = gl_FragCoord.y * 0.125;
    float _872 = fma(_853, _231 * NORMAL.x, fma(_857, _238 * TANGENT.x, (_224 * _216) * _856));
    float _875 = fma(_853, _231 * NORMAL.y, fma(_857, _238 * TANGENT.y, (_224 * _217) * _856));
    float _878 = fma(_853, _231 * NORMAL.z, fma(_857, _238 * TANGENT.z, (_224 * _218) * _856));
    float _882 = inversesqrt(dot(vec3(_872, _875, _878), vec3(_872, _875, _878)));
    float _883 = _882 * _872;
    float _884 = _882 * _875;
    float _885 = _882 * _878;
    float _4229 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _886 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4251 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4262 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4273 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _890 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_859, _861)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _910 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _961 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _951);
    float _962 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _951);
    float _963 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _951);
    float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
    float _968 = _961 * _967;
    float _969 = _962 * _967;
    float _970 = _963 * _967;
    vec4 _972 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_859, _861));
    float _974 = _972.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1144 = sqrt(((_961 * _961) + (_962 * _962)) + (_963 * _963));
        float _1150 = (cbMatDynParam._m0[5u].x * _1144) + cbMatDynParam._m0[5u].y;
        float _4284 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1155 = (cbMatDynParam._m0[5u].z * _1144) + cbMatDynParam._m0[5u].w;
        float _4295 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) - _1151)) + _1151) < ((_974 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_885, cbSceneParam._m0[5u].z, fma(_884, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _883));
    float _1007 = fma(_885, cbSceneParam._m0[6u].z, fma(_884, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _883));
    float _1010 = fma(_885, cbSceneParam._m0[7u].z, fma(_884, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _883));
    uint _1023 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1024 = _1023 + 9u;
    uint _1025 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _1031 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * cbInstanceData._m0[_1025].x;
    float _1032 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * cbInstanceData._m0[_1025].y;
    float _1033 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbInstanceData._m0[_1025].z;
    float _4306 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _4328 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _1037 = 1.0 - _890;
    float _1038 = _1034 * _1037;
    float _1039 = _1035 * _1037;
    float _1040 = _1036 * _1037;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _890;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _890;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _890;
    float _1048 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    vec4 _1060 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = _1060.x * TEXCOORD_3.w;
    float _1064 = dot(vec3(_883, _884, _885), vec3(_968, _969, _970));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _883) - _968;
    float _1072 = (_1067 * _884) - _969;
    float _1073 = (_1067 * _885) - _970;
    float _1077 = abs(dot(vec3(_968, _969, _970), vec3(_883, _884, _885)));
    float _4339 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_886);
    float _1090 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1096 = (1.0 - _1090) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1097 = _1090 * _1079;
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1459;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1133, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125));
        float _1190 = fma(_1133, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125));
        float _1194 = fma(_1133, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125));
        float _1218 = _1125 + _883;
        float _1219 = _1129 + _884;
        float _1220 = _1133 + _885;
        float _1230 = fma(_1220, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218)) - _1186;
        float _1231 = fma(_1220, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218)) - _1190;
        float _1232 = fma(_1220, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218)) - _1194;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1248 = ((_1236 * _1230) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1236 * _1231) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1232) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1287 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1253.x + (-0.5));
        float _1289 = _1287 * (_1253.y + (-0.5));
        float _1290 = _1287 * (_1253.z + (-0.5));
        float _1297 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1260.x + (-0.5));
        float _1299 = _1297 * (_1260.y + (-0.5));
        float _1300 = _1297 * (_1260.z + (-0.5));
        float _1307 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1267.x + (-0.5));
        float _1309 = _1307 * (_1267.y + (-0.5));
        float _1310 = _1307 * (_1267.z + (-0.5));
        float _1317 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1274.x + (-0.5));
        float _1319 = _1317 * (_1274.y + (-0.5));
        float _1320 = _1317 * (_1274.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1341 = (dot(vec3(_883, _884, _885), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1351 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4387 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1353 + 1.0))) + _1358) * _1321;
        float _1368 = _1289 * 0.5;
        float _1369 = _1299 * 0.5;
        float _1370 = _1309 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_883, _884, _885), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4420 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1395 + 1.0))) + _1400) * _1322;
        float _1410 = _1290 * 0.5;
        float _1411 = _1300 * 0.5;
        float _1412 = _1310 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_883, _884, _885), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4453 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1437 + 1.0))) + _1442) * _1323;
        _1459 = _1290;
        _1461 = _1289;
        _1462 = _1288;
        _1463 = _1300;
        _1464 = _1299;
        _1465 = _1298;
        _1466 = _1310;
        _1467 = _1309;
        _1468 = _1308;
        _1469 = _1323;
        _1470 = _1322;
        _1471 = _1321;
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1460;
        _1461 = _1460;
        _1462 = _1460;
        _1463 = _1460;
        _1464 = _1460;
        _1465 = _1460;
        _1466 = _1460;
        _1467 = _1460;
        _1468 = _1460;
        _1469 = _1460;
        _1470 = _1460;
        _1471 = _1460;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1133, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125));
        float _1501 = fma(_1133, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125));
        float _1505 = fma(_1133, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125));
        float _1528 = _1125 + _883;
        float _1529 = _1129 + _884;
        float _1530 = _1133 + _885;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_883, _884, _885), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4516 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_883, _884, _885), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4549 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_883, _884, _885), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4582 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1460;
        _1767 = _1460;
        _1768 = _1460;
        _1769 = _1460;
        _1770 = _1460;
        _1771 = _1460;
        _1772 = _1460;
        _1773 = _1460;
        _1774 = _1460;
        _1775 = _1460;
        _1776 = _1460;
        _1777 = _1460;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1472)) + _1472;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1473)) + _1473;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1474)) + _1474;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1071 * 0.5;
    float _1835 = _1072 * 0.5;
    float _1836 = _1073 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1459, _1463, _1466, _1469));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _886);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1133, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1133, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1133, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1964 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1967 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1995 = frontier_phi_19_17_ladder;
        }
        float _2167;
        if (_1964 > 0.0)
        {
            _2167 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2167 = frontier_phi_28_24_ladder;
        }
        float _2461;
        if (_1967 > 0.0)
        {
            _2461 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2461 = frontier_phi_40_35_ladder;
        }
        float _2463 = isnan(_2167) ? _1995 : (isnan(_1995) ? _2167 : min(_1995, _2167));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1961) + _1950;
        float _2469 = (_2464 * _1964) + _1954;
        float _2470 = (_2464 * _1967) + _1958;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_18_40_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_18_40_ladder_2;
        _1985 = frontier_phi_18_40_ladder_1;
        _1987 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1903);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _886);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1133, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1133, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1133, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2059 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2062 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2172;
        if (_2056 > 0.0)
        {
            _2172 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2172 = frontier_phi_30_26_ladder;
        }
        float _2488;
        if (_2059 > 0.0)
        {
            _2488 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2488 = frontier_phi_42_37_ladder;
        }
        float _2826;
        if (_2062 > 0.0)
        {
            _2826 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2826 = frontier_phi_52_49_ladder;
        }
        float _2828 = isnan(_2488) ? _2172 : (isnan(_2172) ? _2488 : min(_2172, _2488));
        float _2829 = isnan(_2826) ? _2828 : (isnan(_2828) ? _2826 : min(_2828, _2826));
        float _2833 = (_2829 * _2056) + _2045;
        float _2834 = (_2829 * _2059) + _2049;
        float _2835 = (_2829 * _2062) + _2053;
        float _2836 = _2829 * 9.9999997473787516355514526367188e-05;
        float _2837 = (-1.0) - _2836;
        float _2839 = _2836 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2835 > _2839) || ((_2835 < _2837) || ((_2834 > _2839) || ((_2834 < _2837) || ((_2833 < _2837) || (_2833 > _2839))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2835, cbModelParam._m0[17u].z, fma(_2834, cbModelParam._m0[17u].y, _2833 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2835, cbModelParam._m0[18u].z, fma(_2834, cbModelParam._m0[18u].y, _2833 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2835, cbModelParam._m0[19u].z, fma(_2834, cbModelParam._m0[19u].y, _2833 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_27_52_ladder = _2957.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2957.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2957.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_27_52_ladder_2;
        _2083 = frontier_phi_27_52_ladder_1;
        _2085 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1992);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1096 * _1048) + _1097) * _1063) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1096 * _1050) + _1097) * _1063) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1096 * _1051) + _1097) * _1063) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2150 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2154 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2158 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2159 = _2146 / _2158;
    float _2160 = _2150 / _2158;
    float _2161 = _2154 / _2158;
    float _2307;
    float _2308;
    float _2309;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2188 = ((uint(_2161 > cbSceneParam._m0[59u].y) + uint(_2161 > cbSceneParam._m0[59u].x)) + uint(_2161 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2189 = _2188 + 43u;
        uint _2197 = _2188 + 44u;
        uint _2205 = _2188 + 45u;
        uint _2213 = _2188 + 46u;
        float _2224 = fma(_2158, cbSceneParam._m0[_2189].w, fma(_2154, cbSceneParam._m0[_2189].z, fma(_2150, cbSceneParam._m0[_2189].y, _2146 * cbSceneParam._m0[_2189].x)));
        float _2228 = fma(_2158, cbSceneParam._m0[_2197].w, fma(_2154, cbSceneParam._m0[_2197].z, fma(_2150, cbSceneParam._m0[_2197].y, _2146 * cbSceneParam._m0[_2197].x)));
        float _2236 = fma(_2158, cbSceneParam._m0[_2213].w, fma(_2154, cbSceneParam._m0[_2213].z, fma(_2150, cbSceneParam._m0[_2213].y, _2146 * cbSceneParam._m0[_2213].x)));
        float _2240 = cbSceneParam._m0[33u].z * _2236;
        float _2242 = cbSceneParam._m0[33u].w * _2236;
        float _2245 = fma(_2158, cbSceneParam._m0[_2205].w, fma(_2154, cbSceneParam._m0[_2205].z, fma(_2150, cbSceneParam._m0[_2205].y, _2146 * cbSceneParam._m0[_2205].x))) / _2236;
        float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_2160 * _2160) + (_2159 * _2159)) + (_2161 * _2161))) * cbSceneParam._m0[33u].y;
        float _4708 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2300 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 + _2224) / _2236, (_2242 + _2228) / _2236), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 + _2224) / _2236, (_2228 - _2240) / _2236), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2224 - _2240) / _2236, (_2228 - _2242) / _2236), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2224 - _2242) / _2236, (_2240 + _2228) / _2236), _2245), 0.0)).x), vec4(0.25)));
        _2307 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
        _2308 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
        _2309 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2307 = 1.0;
        _2308 = 1.0;
        _2309 = 1.0;
    }
    float _2373;
    float _2375;
    float _2377;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2361 = fma(_2158, cbSceneParam._m0[63u].w, fma(_2154, cbSceneParam._m0[63u].z, fma(_2150, cbSceneParam._m0[63u].y, _2146 * cbSceneParam._m0[63u].x)));
        float _2362 = fma(_2158, cbSceneParam._m0[60u].w, fma(_2154, cbSceneParam._m0[60u].z, fma(_2150, cbSceneParam._m0[60u].y, _2146 * cbSceneParam._m0[60u].x))) / _2361;
        float _2363 = fma(_2158, cbSceneParam._m0[61u].w, fma(_2154, cbSceneParam._m0[61u].z, fma(_2150, cbSceneParam._m0[61u].y, _2146 * cbSceneParam._m0[61u].x))) / _2361;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2362 >= cbSceneParam._m0[64u].x) && (_2363 >= cbSceneParam._m0[64u].y)) && (_2362 <= cbSceneParam._m0[64u].z)) && (_2363 <= cbSceneParam._m0[64u].w))
        {
            float _2501 = fma(_2158, cbSceneParam._m0[62u].w, fma(_2154, cbSceneParam._m0[62u].z, fma(_2150, cbSceneParam._m0[62u].y, _2146 * cbSceneParam._m0[62u].x))) / _2361;
            float _2505 = isnan(cbSceneParam._m0[41u].w) ? _2501 : (isnan(_2501) ? cbSceneParam._m0[41u].w : max(_2501, cbSceneParam._m0[41u].w));
            float _2548 = (cbSceneParam._m0[33u].x - sqrt(((_2160 * _2160) + (_2159 * _2159)) + (_2161 * _2161))) * cbSceneParam._m0[33u].y;
            float _4724 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
            float _2555 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2362, cbSceneParam._m0[33u].w + _2363), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2362, _2363 - cbSceneParam._m0[33u].z), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].z, _2363 - cbSceneParam._m0[33u].w), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2363), _2505), 0.0)).x), vec4(0.25)));
            float _2559 = 1.0 - (_2555 * cbSceneParam._m0[34u].x);
            float _2560 = 1.0 - (_2555 * cbSceneParam._m0[34u].y);
            float _2561 = 1.0 - (_2555 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2561) ? _2309 : (isnan(_2309) ? _2561 : min(_2309, _2561));
            frontier_phi_39_38_ladder_1 = isnan(_2560) ? _2308 : (isnan(_2308) ? _2560 : min(_2308, _2560));
            frontier_phi_39_38_ladder_2 = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
        }
        else
        {
            frontier_phi_39_38_ladder = _2309;
            frontier_phi_39_38_ladder_1 = _2308;
            frontier_phi_39_38_ladder_2 = _2307;
        }
        _2373 = frontier_phi_39_38_ladder_2;
        _2375 = frontier_phi_39_38_ladder_1;
        _2377 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2373 = _2307;
        _2375 = _2308;
        _2377 = _2309;
    }
    uvec4 _2382 = floatBitsToUint(cbInstanceData._m0[_1023 + 5u]);
    uint _2384 = _2382.x * 14u;
    uint _2385 = _2384 + 13u;
    float _2392 = _1063 + (-1.0);
    float _2397 = (cbLight._m0[_2385].x * _2392) + 1.0;
    float _2398 = (cbLight._m0[_2385].y * _2392) + 1.0;
    float _2399 = (cbLight._m0[_2385].z * _2392) + 1.0;
    float _2400 = (cbLight._m0[_2385].w * _2392) + 1.0;
    uint _2401 = _2384 + 5u;
    float _2407 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
    uint _2411 = _2384 + 4u;
    float _2420 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2424 = _2384 | 1u;
    float _2435 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_883, _884, _885));
    float _2438 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_883, _884, _885));
    float _4760 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _4771 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2443 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * 0.3183098733425140380859375;
    float _2445 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * 0.3183098733425140380859375;
    float _2452 = ((cbLight._m0[_2401].x * _2407) * _2445) + (((cbLight._m0[_2411].x * _2373) * _2420) * _2443);
    float _2453 = ((_2407 * cbLight._m0[_2401].y) * _2445) + (((cbLight._m0[_2411].y * _2375) * _2420) * _2443);
    float _2454 = ((_2407 * cbLight._m0[_2401].z) * _2445) + (((cbLight._m0[_2411].z * _2377) * _2420) * _2443);
    uvec4 _2458 = floatBitsToUint(cbLight._m0[_2384 + 12u]);
    bool _2460 = _2458.x == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2460)
    {
        _2562 = _2452;
        _2564 = _2453;
        _2566 = _2454;
    }
    else
    {
        uint _2570 = _2384 + 6u;
        float _2586 = (dot(vec3(cbLight._m0[_2384 + 2u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4782 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2589 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2562 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2452;
        _2564 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2453;
        _2566 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2454;
    }
    bool _2569 = _2458.y == 0u;
    float _2624;
    float _2626;
    float _2628;
    if (_2569)
    {
        _2624 = _2562;
        _2626 = _2564;
        _2628 = _2566;
    }
    else
    {
        uint _2797 = _2384 + 7u;
        float _2813 = (dot(vec3(cbLight._m0[_2384 + 3u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2814 = _2813 * _2813;
        float _4798 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2815 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2816 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2624 = (((cbLight._m0[_2797].x * 0.3183098733425140380859375) * _2815) * _2816) + _2562;
        _2626 = (((cbLight._m0[_2797].y * 0.3183098733425140380859375) * _2815) * _2816) + _2564;
        _2628 = (((cbLight._m0[_2797].z * 0.3183098733425140380859375) * _2815) * _2816) + _2566;
    }
    uint _2631 = _2384 + 8u;
    float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _886) * 0.949999988079071044921875);
    float _2645 = _2644 * _2644;
    float _2646 = cbLight._m0[_2384].x + _968;
    float _2647 = cbLight._m0[_2384].y + _969;
    float _2648 = cbLight._m0[_2384].z + _970;
    float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
    float _2653 = _2652 * _2646;
    float _2654 = _2652 * _2647;
    float _2655 = _2652 * _2648;
    float _2656 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2384].xyz));
    float _4814 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _4825 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2660 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2661 = dot(vec3(_883, _884, _885), vec3(_2653, _2654, _2655));
    float _4836 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2653, _2654, _2655));
    float _4847 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2645 * _2645;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
    float _2682 = 0.959999978542327880859375 - _1045;
    float _2684 = 0.959999978542327880859375 - _1046;
    float _2685 = 0.959999978542327880859375 - _1047;
    float _2692 = 1.0 - _2645;
    float _2703 = (0.5 / (((_2660 * ((_2659 * _2692) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2692) + _2645) * _2659))) * _2659;
    float _4858 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2705 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    uint _2719 = _2384 + 9u;
    float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _886) * 0.949999988079071044921875);
    float _2731 = _2730 * _2730;
    float _2732 = cbLight._m0[_2424].x + _968;
    float _2733 = cbLight._m0[_2424].y + _969;
    float _2734 = cbLight._m0[_2424].z + _970;
    float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
    float _2739 = _2738 * _2732;
    float _2740 = _2738 * _2733;
    float _2741 = _2738 * _2734;
    float _2742 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2424].xyz));
    float _4869 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2746 = dot(vec3(_883, _884, _885), vec3(_2739, _2740, _2741));
    float _4880 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2749 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2750 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2739, _2740, _2741));
    float _4891 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2754 = _2731 * _2731;
    float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
    float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0);
    float _2772 = 1.0 - _2731;
    float _2782 = (0.5 / (((_2660 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2772) + _2731) * _2745))) * _2745;
    float _4902 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2784 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
    float _2794 = (((((_2765 * _2682) + _1048) * cbLight._m0[_2719].x) * _2784) * _2407) + ((((cbLight._m0[_2631].x * _2373) * ((_2681 * _2682) + _1048)) * _2705) * _2420);
    float _2795 = (((((_2765 * _2684) + _1050) * cbLight._m0[_2719].y) * _2784) * _2407) + ((((cbLight._m0[_2631].y * _2375) * ((_2681 * _2684) + _1050)) * _2705) * _2420);
    float _2796 = (((((_2765 * _2685) + _1051) * cbLight._m0[_2719].z) * _2784) * _2407) + ((((cbLight._m0[_2631].z * _2377) * ((_2681 * _2685) + _1051)) * _2705) * _2420);
    float _2852;
    float _2854;
    float _2856;
    if (_2460)
    {
        _2852 = _2794;
        _2854 = _2795;
        _2856 = _2796;
    }
    else
    {
        uint _2858 = _2384 + 2u;
        uint _2862 = _2384 + 10u;
        float _2876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2858].w)) * _886) * 0.949999988079071044921875);
        float _2877 = _2876 * _2876;
        float _2878 = cbLight._m0[_2858].x + _968;
        float _2879 = cbLight._m0[_2858].y + _969;
        float _2880 = cbLight._m0[_2858].z + _970;
        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
        float _2885 = _2884 * _2878;
        float _2886 = _2884 * _2879;
        float _2887 = _2884 * _2880;
        float _2888 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2858].xyz));
        float _4913 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2892 = dot(vec3(_883, _884, _885), vec3(_2885, _2886, _2887));
        float _4924 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2896 = dot(vec3(cbLight._m0[_2858].xyz), vec3(_2885, _2886, _2887));
        float _4935 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2900 = _2877 * _2877;
        float _2904 = ((_2895 * _2895) * (_2900 + (-1.0))) + 1.0;
        float _2911 = exp2(log2(1.0 - (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) * 5.0);
        float _2918 = 1.0 - _2877;
        float _2928 = (0.5 / (((_2660 * ((_2891 * _2918) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2918) + _2877) * _2891))) * _2891;
        float _4946 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2900 / ((_2904 * _2904) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2852 = (((((_2911 * _2682) + _1048) * cbLight._m0[_2862].x) * _2930) * _2931) + _2794;
        _2854 = (((((_2911 * _2684) + _1050) * cbLight._m0[_2862].y) * _2930) * _2931) + _2795;
        _2856 = (((((_2911 * _2685) + _1051) * cbLight._m0[_2862].z) * _2930) * _2931) + _2796;
    }
    float _2962;
    float _2964;
    float _2966;
    if (_2569)
    {
        _2962 = _2852;
        _2964 = _2854;
        _2966 = _2856;
    }
    else
    {
        uint _2973 = _2384 + 3u;
        uint _2977 = _2384 + 11u;
        float _2991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2973].w)) * _886) * 0.949999988079071044921875);
        float _2992 = _2991 * _2991;
        float _2993 = cbLight._m0[_2973].x + _968;
        float _2994 = cbLight._m0[_2973].y + _969;
        float _2995 = cbLight._m0[_2973].z + _970;
        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
        float _3000 = _2999 * _2993;
        float _3001 = _2999 * _2994;
        float _3002 = _2999 * _2995;
        float _3003 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2973].xyz));
        float _4962 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _3007 = dot(vec3(_883, _884, _885), vec3(_3000, _3001, _3002));
        float _4973 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
        float _3011 = dot(vec3(cbLight._m0[_2973].xyz), vec3(_3000, _3001, _3002));
        float _4984 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3015 = _2992 * _2992;
        float _3019 = ((_3010 * _3010) * (_3015 + (-1.0))) + 1.0;
        float _3026 = exp2(log2(1.0 - (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) * 5.0);
        float _3033 = 1.0 - _2992;
        float _3043 = (0.5 / (((_2660 * ((_3006 * _3033) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _3033) + _2992) * _3006))) * _3006;
        float _4995 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3045 = (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_3015 / ((_3019 * _3019) * 3.141590118408203125));
        float _3046 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2962 = (((((_3026 * _2682) + _1048) * cbLight._m0[_2977].x) * _3045) * _3046) + _2852;
        _2964 = (((((_3026 * _2684) + _1050) * cbLight._m0[_2977].y) * _3045) * _3046) + _2854;
        _2966 = (((((_3026 * _2685) + _1051) * cbLight._m0[_2977].z) * _3045) * _3046) + _2856;
    }
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_2382.y == 0u)
    {
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.x;
        uint _3079 = uint((float(_3067.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _3068))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _3068)));
        float _3089 = (log2(_2161 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3090 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        uint _3093 = uint(isnan(14.0) ? _3090 : (isnan(_3090) ? 14.0 : min(_3090, 14.0)));
        uvec4 _3098 = texelFetch(g_lightClusterGridBuffer, int(((_3093 << 2u) + (_3079 << 6u)) >> 2u));
        uint _3099 = _3098.x;
        uint _3100 = _3067.z;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((((1u << ((_3100 >> 4u) & 15u)) + 4294967295u) & _3099) == 0u) || ((_3100 & 240u) == 0u))
        {
            _3208 = 0.0;
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
        }
        else
        {
            float _3209;
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3369 = 0.0;
            float _3370 = 0.0;
            float _3371 = 0.0;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            uint _3375 = 0u;
            uint _3384;
            bool _3385;
            for (;;)
            {
                _3384 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                _3385 = _3384 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3385)
                {
                    frontier_phi_73_pred = _3374;
                    frontier_phi_73_pred_1 = _3373;
                    frontier_phi_73_pred_2 = _3372;
                    frontier_phi_73_pred_3 = _3371;
                    frontier_phi_73_pred_4 = _3370;
                    frontier_phi_73_pred_5 = _3369;
                }
                else
                {
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    uint _3520;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3384;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    for (;;)
                    {
                        uint _3524 = uint(findLSB(_3520)) + (_3375 << 5u);
                        uint _3521 = (_3520 + 4294967295u) & _3520;
                        uint _3526 = _3524 * 48u;
                        vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3526)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 3u)).x));
                        uint _3546 = (_3524 * 48u) + 4u;
                        vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3546)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 3u)).x));
                        uint _3565 = (_3524 * 48u) + 8u;
                        vec3 _3576 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x));
                        float _3580 = _3540.x - _2159;
                        float _3581 = _3540.y - _2160;
                        float _3582 = _3540.z - _2161;
                        float _3583 = dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582));
                        float _3586 = inversesqrt(_3583);
                        float _3587 = _3586 * _3580;
                        float _3588 = _3586 * _3581;
                        float _3589 = _3586 * _3582;
                        float _3590 = dot(vec3(_1004, _1007, _1010), vec3(_3587, _3588, _3589));
                        float _3595 = 1.0 - (_3583 * _3540.w);
                        float _5021 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3597 = sqrt(_3583) * _3559.w;
                        float _3600 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                        float _3601 = _3600 * _3600;
                        float _3604 = ((1.0 - _3601) * _3590) + _3601;
                        float _3607 = _3597 * _3597;
                        float _3611 = ((isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0))) * _3596) / ((_3607 * 0.699999988079071044921875) + 1.0);
                        float _3615 = (-0.0) - _2159;
                        float _3616 = (-0.0) - _2160;
                        float _3617 = (-0.0) - _2161;
                        float _3621 = inversesqrt(dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617)));
                        float _3622 = _3621 * _3615;
                        float _3623 = _3621 * _3616;
                        float _3624 = _3621 * _3617;
                        float _3631 = exp2(log2(1.0 / ((_3607 * 3.5) + 5.0)) * 0.25);
                        float _3632 = 1.0 - _1079;
                        float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                        float _3640 = _3639 * _3639;
                        float _3641 = _3640 * _3640;
                        float _3642 = _3622 + _3587;
                        float _3643 = _3623 + _3588;
                        float _3644 = _3624 + _3589;
                        float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                        float _3652 = dot(vec3(_1004, _1007, _1010), vec3(_3622, _3623, _3624));
                        float _5037 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3655 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3656 = dot(vec3(_1004, _1007, _1010), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                        float _5048 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3659 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                        float _3664 = _3600 * _3640;
                        float _3665 = _3664 * _3664;
                        float _3668 = ((1.0 - _3665) * _3590) + _3665;
                        float _5059 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3669 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3670 = 1.0 - _3640;
                        float _3680 = (0.5 / (((_3669 * ((_3655 * _3670) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3640) * _3655))) * _3669;
                        float _5070 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3691 = (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0)))) / ((_3663 * _3663) * ((_3607 * 2.1991131305694580078125) + 3.141590118408203125))) * _3596;
                        _3444 = (_3611 * _3559.x) + _3517;
                        _3445 = (_3611 * _3559.y) + _3518;
                        _3446 = (_3611 * _3559.z) + _3519;
                        _3441 = (_3691 * _3576.x) + _3514;
                        _3442 = (_3691 * _3576.y) + _3515;
                        _3443 = (_3691 * _3576.z) + _3516;
                        if (_3521 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3521;
                        }
                    }
                    frontier_phi_73_pred = _3446;
                    frontier_phi_73_pred_1 = _3445;
                    frontier_phi_73_pred_2 = _3444;
                    frontier_phi_73_pred_3 = _3443;
                    frontier_phi_73_pred_4 = _3442;
                    frontier_phi_73_pred_5 = _3441;
                }
                _3219 = frontier_phi_73_pred;
                _3217 = frontier_phi_73_pred_1;
                _3215 = frontier_phi_73_pred_2;
                _3213 = frontier_phi_73_pred_3;
                _3211 = frontier_phi_73_pred_4;
                _3209 = frontier_phi_73_pred_5;
                uint _3376 = _3375 + 1u;
                if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3369 = _3209;
                    _3370 = _3211;
                    _3371 = _3213;
                    _3372 = _3215;
                    _3373 = _3217;
                    _3374 = _3219;
                    _3375 = _3376;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3208 = _3209;
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
        }
        uvec4 _3222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3223 = _3222.z;
        uint _3225 = (_3223 >> 8u) & 15u;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        if (((4294967295u << _3225) & _3099) == 0u)
        {
            _3337 = _3208;
            _3339 = _3210;
            _3341 = _3212;
            _3343 = _3214;
            _3345 = _3216;
            _3347 = _3218;
        }
        else
        {
            float _3362 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
            float _3363 = _3362 * _2159;
            float _3364 = _3362 * _2160;
            float _3365 = _3362 * _2161;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3225 < ((_3223 >> 12u) & 15u))
            {
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3497 = _3208;
                float _3498 = _3210;
                float _3499 = _3212;
                float _3500 = _3214;
                float _3501 = _3216;
                float _3502 = _3218;
                uint _3503 = _3225;
                uint _3512;
                bool _3513;
                for (;;)
                {
                    _3512 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3503 << 2u)) >> 2u)).x;
                    _3513 = _3512 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3513)
                    {
                        frontier_phi_84_pred = _3502;
                        frontier_phi_84_pred_1 = _3501;
                        frontier_phi_84_pred_2 = _3500;
                        frontier_phi_84_pred_3 = _3499;
                        frontier_phi_84_pred_4 = _3498;
                        frontier_phi_84_pred_5 = _3497;
                    }
                    else
                    {
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _3718 = _3497;
                        float _3719 = _3498;
                        float _3720 = _3499;
                        float _3721 = _3500;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        uint _3724 = _3512;
                        uint _3725;
                        vec4 _3750;
                        float _3751;
                        vec4 _3766;
                        vec3 _3778;
                        vec4 _3793;
                        vec4 _3808;
                        float _3854;
                        bool _3855;
                        for (;;)
                        {
                            uint _3735 = ((_3503 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3724));
                            _3725 = (_3724 + 4294967295u) & _3724;
                            uint _3737 = _3735 * 40u;
                            _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            _3751 = _3750.w;
                            uint _3753 = (_3735 * 40u) + 4u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3768 = (_3735 * 40u) + 8u;
                            _3778 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x));
                            uint _3780 = (_3735 * 40u) + 16u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3735 * 40u) + 20u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3735 * 40u) + 24u;
                            vec4 _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3829 = (_3735 * 40u) + 28u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            _3854 = fma(_2161, _3842.z, fma(_2160, _3842.y, _3842.x * _2159)) + _3842.w;
                            _3855 = !((fma(_2161, _3823.z, fma(_2160, _3823.y, _3823.x * _2159)) + _3823.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3855)
                            {
                                float _3882 = _3750.x - _2159;
                                float _3883 = _3750.y - _2160;
                                float _3884 = _3750.z - _2161;
                                float _3885 = dot(vec3(_3882, _3883, _3884), vec3(_3882, _3883, _3884));
                                float _3888 = inversesqrt(_3885);
                                float _3889 = _3888 * _3882;
                                float _3890 = _3888 * _3883;
                                float _3891 = _3888 * _3884;
                                float _3895 = 1.0 - (_3885 / (_3751 * _3751));
                                float _5081 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3900 = sqrt(_3885) * _3766.w;
                                float _3902 = 1.39999997615814208984375 / (_3900 + 1.39999997615814208984375);
                                float _3903 = _3902 * _3902;
                                float _3906 = ((1.0 - _3903) * dot(vec3(_3889, _3890, _3891), vec3(_1004, _1007, _1010))) + _3903;
                                float _3909 = _3900 * _3900;
                                float _3913 = (fma(_2161, _3793.z, fma(_2160, _3793.y, _3793.x * _2159)) + _3793.w) / _3854;
                                float _3914 = (fma(_2161, _3808.z, fma(_2160, _3808.y, _3808.x * _2159)) + _3808.w) / _3854;
                                float _3918 = 1.0 - dot(vec2(_3913, _3914), vec2(_3913, _3914));
                                float _5097 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3920 = _3919 * (((isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0))) * _3896) / ((_3909 * 0.699999988079071044921875) + 1.0));
                                float _3932 = exp2(log2(1.0 / ((_3909 * 3.5) + 5.0)) * 0.25);
                                float _3933 = 1.0 - _1079;
                                float _3940 = sqrt(1.0 - ((1.0 - (_3933 * _3933)) * (1.0 - (_3932 * _3932))));
                                float _3941 = _3940 * _3940;
                                float _3942 = _3941 * _3941;
                                float _3943 = _3889 - _3363;
                                float _3944 = _3890 - _3364;
                                float _3945 = _3891 - _3365;
                                float _3949 = inversesqrt(dot(vec3(_3943, _3944, _3945), vec3(_3943, _3944, _3945)));
                                float _3953 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3363, (-0.0) - _3364, (-0.0) - _3365));
                                float _5108 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3956 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3957 = dot(vec3(_1004, _1007, _1010), vec3(_3949 * _3943, _3949 * _3944, _3949 * _3945));
                                float _5119 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3960 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3964 = ((_3960 * _3960) * (_3942 + (-1.0))) + 1.0;
                                float _3965 = _3902 * _3941;
                                float _3966 = _3965 * _3965;
                                float _3972 = ((1.0 - _3966) * dot(vec3(_1004, _1007, _1010), vec3(_3889, _3890, _3891))) + _3966;
                                float _5130 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3973 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3974 = 1.0 - _3941;
                                float _3984 = (0.5 / (((_3973 * ((_3956 * _3974) + _3941)) + 9.9999999392252902907785028219223e-09) + (((_3973 * _3974) + _3941) * _3956))) * _3973;
                                float _5141 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3994 = (_3919 * _3896) * (((_3942 * 3.1415927410125732421875) * (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) / ((_3964 * _3964) * ((_3909 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3920 * _3766.z;
                                frontier_phi_90_pred_1 = _3920 * _3766.y;
                                frontier_phi_90_pred_2 = _3920 * _3766.x;
                                frontier_phi_90_pred_3 = _3994 * _3778.z;
                                frontier_phi_90_pred_4 = _3994 * _3778.y;
                                frontier_phi_90_pred_5 = _3994 * _3778.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4003 = frontier_phi_90_pred;
                            _4002 = frontier_phi_90_pred_1;
                            _4001 = frontier_phi_90_pred_2;
                            _4000 = frontier_phi_90_pred_3;
                            _3999 = frontier_phi_90_pred_4;
                            _3998 = frontier_phi_90_pred_5;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            if (_3725 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3725;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3710;
                        frontier_phi_84_pred_1 = _3709;
                        frontier_phi_84_pred_2 = _3708;
                        frontier_phi_84_pred_3 = _3707;
                        frontier_phi_84_pred_4 = _3706;
                        frontier_phi_84_pred_5 = _3705;
                    }
                    _3348 = frontier_phi_84_pred;
                    _3346 = frontier_phi_84_pred_1;
                    _3344 = frontier_phi_84_pred_2;
                    _3342 = frontier_phi_84_pred_3;
                    _3340 = frontier_phi_84_pred_4;
                    _3338 = frontier_phi_84_pred_5;
                    uint _3504 = _3503 + 1u;
                    if (_3504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3497 = _3338;
                        _3498 = _3340;
                        _3499 = _3342;
                        _3500 = _3344;
                        _3501 = _3346;
                        _3502 = _3348;
                        _3503 = _3504;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3344;
                frontier_phi_65_66_ladder_1 = _3348;
                frontier_phi_65_66_ladder_2 = _3346;
                frontier_phi_65_66_ladder_3 = _3342;
                frontier_phi_65_66_ladder_4 = _3340;
                frontier_phi_65_66_ladder_5 = _3338;
            }
            else
            {
                frontier_phi_65_66_ladder = _3214;
                frontier_phi_65_66_ladder_1 = _3218;
                frontier_phi_65_66_ladder_2 = _3216;
                frontier_phi_65_66_ladder_3 = _3212;
                frontier_phi_65_66_ladder_4 = _3210;
                frontier_phi_65_66_ladder_5 = _3208;
            }
            _3337 = frontier_phi_65_66_ladder_5;
            _3339 = frontier_phi_65_66_ladder_4;
            _3341 = frontier_phi_65_66_ladder_3;
            _3343 = frontier_phi_65_66_ladder;
            _3345 = frontier_phi_65_66_ladder_2;
            _3347 = frontier_phi_65_66_ladder_1;
        }
        float _3352 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3112 = (_3352 * _3343) + _2624;
        _3114 = (_3352 * _3345) + _2626;
        _3116 = (_3352 * _3347) + _2628;
        _3118 = ((_3337 * _1048) * _3352) + _2962;
        _3120 = ((_3339 * _1050) * _3352) + _2964;
        _3122 = ((_3341 * _1051) * _3352) + _2966;
    }
    else
    {
        _3112 = _2624;
        _3114 = _2626;
        _3116 = _2628;
        _3118 = _2962;
        _3120 = _2964;
        _3122 = _2966;
    }
    uint _3128 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _3134 = ((((((_796.x - _791.x) * _774) + _791.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _720) * cbMtdParam._m0[20u].x)) * _729) * cbInstanceData._m0[_3128].x;
    float _3135 = ((((((_796.y - _791.y) * _774) + _791.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_709.y - _707) * _687) + _707)) * cbMtdParam._m0[20u].y)) * _729) * cbInstanceData._m0[_3128].y;
    float _3136 = ((((((_796.z - _791.z) * _774) + _791.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_709.z - _708) * _687) + _708)) * cbMtdParam._m0[20u].z)) * _729) * cbInstanceData._m0[_3128].z;
    float _5157 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _5168 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _5179 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _3153 = (((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3112 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1063))) + ((_3118 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1892)) * cbPerFrame._m0[3u].x)) + _3134;
    float _3155 = (_3135 + ((_3120 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1892)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_3114 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1063)));
    float _3157 = (_3136 + ((_3122 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1892)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3116 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1063)));
    float _3158 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
    float _3159 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
    float _3160 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
    float _3166 = cbMtdParam._m0[2u].x * _3134;
    float _3167 = cbMtdParam._m0[2u].y * _3135;
    float _3168 = cbMtdParam._m0[2u].z * _3136;
    float _5205 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3170 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
    uint _3171 = _1023 + 6u;
    float _3179 = _985 / cbSceneParam._m0[86u].x;
    float _3180 = _986 / cbSceneParam._m0[86u].y;
    vec4 _3194 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, (log2((isnan(cbSceneParam._m0[77u].w) ? _910 : (isnan(_910) ? cbSceneParam._m0[77u].w : min(_910, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3196 = _3194.x;
    float _3197 = _3194.y;
    float _3198 = _3194.z;
    float _3199 = _3194.w;
    float _3270;
    float _3272;
    float _3274;
    float _3276;
    if (_910 > cbSceneParam._m0[78u].w)
    {
        float _3233 = isnan(_910) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _910 : min(cbSceneParam._m0[80u].w, _910));
        float _3234 = _3233 / _910;
        float _3245 = _3234 * _961;
        float _3246 = _962 * _3234;
        float _3247 = (-0.0) - _3246;
        float _3248 = _3234 * _963;
        float _3250 = (cbSceneParam._m0[77u].w * _3247) / _3233;
        float _3251 = _3250 + cbSceneParam._m0[79u].w;
        float _3252 = cbSceneParam._m0[79u].w - _3246;
        float _3258 = sqrt(((_3245 * _3245) + (_3246 * _3246)) + (_3248 * _3248));
        float _3261 = (1.0 - (cbSceneParam._m0[77u].w / _3233)) * _3258;
        float _3266 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3268 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3454;
        if (abs((_3247 - _3250) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3454 = ((((_3251 > 0.0) ? exp2(_3266 * _3251) : (2.0 - exp2(_3268 * _3251))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3261;
        }
        else
        {
            float _3398 = 1.0 / cbSceneParam._m0[80u].x;
            float _3399 = isnan(_3252) ? _3251 : (isnan(_3251) ? _3252 : max(_3251, _3252));
            float _3400 = isnan(_3252) ? _3251 : (isnan(_3251) ? _3252 : min(_3251, _3252));
            float _3409 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : min(_3399, 0.0));
            float _3410 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : min(_3400, 0.0));
            _3454 = ((abs(_3258 / _3247) * cbSceneParam._m0[80u].y) * ((((_3409 - _3410) * 2.0) - ((exp2(_3266 * (isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0)))) - exp2(_3266 * (isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))))) * _3398)) - ((exp2(_3268 * _3409) - exp2(_3268 * _3410)) * _3398))) + (_3261 * cbSceneParam._m0[80u].z);
        }
        vec4 _3456 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, 1.0), 0.0);
        float _3465 = exp2((_3454 * (-1.44269502162933349609375)) * (1.0 - _3456.w));
        float _3466 = log2(_3465);
        float _3482 = log2(_3199);
        _3270 = (exp2(_3482 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].x)) * _3456.x) / cbSceneParam._m0[78u].x)) + _3196;
        _3272 = (exp2(_3482 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].y)) * _3456.y) / cbSceneParam._m0[78u].y)) + _3197;
        _3274 = (exp2(_3482 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].z)) * _3456.z) / cbSceneParam._m0[78u].z)) + _3198;
        _3276 = _3465 * _3199;
    }
    else
    {
        _3270 = _3196;
        _3272 = _3197;
        _3274 = _3198;
        _3276 = _3199;
    }
    bool _3492;
    vec4 _3286;
    vec4 _3308;
    float _3310;
    float _3314;
    float _3315;
    float _3316;
    float _3319;
    float _3322;
    float _3325;
    float _3326;
    bool _3336;
    for (;;)
    {
        _3286 = cbMatDynParam._m0[0u];
        float _3288 = roundEven(_3286.y);
        bool _3289 = _3288 == 3.0;
        float _3290 = log2(_3276);
        float _3294 = exp2(_3290 * cbSceneParam._m0[78u].x);
        float _3295 = exp2(_3290 * cbSceneParam._m0[78u].y);
        float _3296 = exp2(_3290 * cbSceneParam._m0[78u].z);
        float _3297 = _3294 * _3158;
        float _3298 = _3295 * _3159;
        float _3299 = _3296 * _3160;
        float _3306 = _974 + (-0.5);
        _3308 = cbMtdParam._m0[1u];
        _3310 = _3308.y * _3306;
        float _3313 = (_3288 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3314 = _3313 * (_3289 ? _3297 : (_3297 + (cbSceneParam._m0[72u].w * _3270)));
        _3315 = _3313 * (_3289 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3272)));
        _3316 = _3313 * (_3289 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3274)));
        _3319 = ((_3166 * _3170) * _3294) * _3313;
        _3322 = ((_3167 * _3170) * _3295) * _3313;
        _3325 = ((_3168 * _3170) * _3296) * _3313;
        _3326 = _3306 * 0.999000012874603271484375;
        _3336 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3336)
        {
            if ((cbInstanceData._m0[_1023 + 7u].x + _3326) < 0.5)
            {
                _3492 = true;
                break;
            }
        }
        uint _3433 = _1024 + uint(_3286.w);
        if ((cbInstanceData._m0[_3433].w < 1.0) && ((cbInstanceData._m0[_3433].w + _3326) < 0.5))
        {
            _3492 = true;
            break;
        }
        if ((_3310 + 1.0) < _3308.x)
        {
            _3492 = true;
            break;
        }
        _3492 = false;
        break;
    }
    float _3696;
    if (_3492)
    {
        discard_state = true;
        _3696 = 0.0;
    }
    else
    {
        _3696 = cbInstanceData._m0[_3171].w;
    }
    SV_Target.x = _3314;
    SV_Target.y = _3315;
    SV_Target.z = _3316;
    SV_Target.w = _3696;
    SV_Target_1.x = _3319;
    SV_Target_1.y = _3322;
    SV_Target_1.z = _3325;
    SV_Target_1.w = cbInstanceData._m0[_3171].w;
    discard_exit();
}


