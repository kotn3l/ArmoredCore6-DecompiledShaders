#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 10) uniform texture2D C_C4200_Body_snp_0_Texture2D_22;
layout(set = 0, binding = 11) uniform texture2D C_C4200_Body_snp_0_Texture2D_23;
layout(set = 0, binding = 12) uniform texture2D C_C4200_Body_snp_0_Texture2D_24;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

float _726;
uint _2210;
uint _2211;
uint _2212;
uint _2479;
uint _2480;
uint _2481;
float _2740;
float _2741;
float _2742;
float _2743;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _173 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _174 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _175 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203 = gl_FragCoord.x * 0.125;
    float _205 = gl_FragCoord.y * 0.125;
    vec4 _228 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _239 = cbMtdParam._m0[22u].x * _228.x;
    float _240 = cbMtdParam._m0[22u].y * _228.y;
    float _241 = cbMtdParam._m0[22u].z * _228.z;
    vec4 _254 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _256 = _254.x;
    float _260 = _239 - (_256 * _239);
    float _261 = _240 - (_256 * _240);
    float _262 = _241 - (_256 * _241);
    vec4 _279 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _2752 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _2752 : (isnan(_2752) ? 1.0 : min(_2752, 1.0))));
    float _297 = _279.z * cbMtdParam._m0[29u].w;
    float _303 = fma(_296, _188 * NORMAL.x, fma(_289, _195 * TANGENT.x, (_181 * _173) * _287));
    float _306 = fma(_296, _188 * NORMAL.y, fma(_289, _195 * TANGENT.y, (_181 * _174) * _287));
    float _309 = fma(_296, _188 * NORMAL.z, fma(_289, _195 * TANGENT.z, (_181 * _175) * _287));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    float _314 = _313 * _303;
    float _315 = _313 * _306;
    float _316 = _313 * _309;
    float _2763 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _317 = isnan(1.0) ? _2763 : (isnan(_2763) ? 1.0 : min(_2763, 1.0));
    float _2774 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _318 = isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0));
    float _2785 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _319 = isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0));
    float _2796 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _320 = isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_203, _205)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    vec4 _403 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_203, _205));
    float _405 = _403.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _543 = sqrt(((_392 * _392) + (_393 * _393)) + (_394 * _394));
        float _549 = (cbMatDynParam._m0[5u].x * _543) + cbMatDynParam._m0[5u].y;
        float _2807 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _550 = isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0));
        float _554 = (cbMatDynParam._m0[5u].z * _543) + cbMatDynParam._m0[5u].w;
        float _2818 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2818 : (isnan(_2818) ? 1.0 : min(_2818, 1.0))) - _550)) + _550) < ((_405 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _438 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _441 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _444 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _456 = _453.x * TEXCOORD_3.w;
    float _457 = dot(vec3(_314, _315, _316), vec3(_399, _400, _401));
    float _460 = _457 * 2.0;
    float _464 = (_460 * _314) - _399;
    float _465 = (_460 * _315) - _400;
    float _466 = (_460 * _316) - _401;
    float _470 = abs(dot(vec3(_399, _400, _401), vec3(_314, _315, _316)));
    float _2829 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _2829 : (isnan(_2829) ? 1.0 : min(_2829, 1.0));
    float _477 = sqrt(_320);
    float _489 = exp2((_477 * 5.0) * log2(1.0 - (_471 * 0.999000012874603271484375))) / (4.0 - (_477 * 3.0));
    float _495 = (1.0 - _489) * ((_477 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _496 = _489 * _477;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _725;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _590 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _594 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _619 = _524 + _314;
        float _620 = _528 + _315;
        float _621 = _532 + _316;
        float _631 = fma(_621, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619)) - _586;
        float _632 = fma(_621, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619)) - _590;
        float _633 = fma(_621, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619)) - _594;
        float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
        float _649 = ((_637 * _631) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_586 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_637 * _632) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_590 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_637 * _633) / cbModelParam._m0[34u].z) + ((((((_594 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        _725 = _688 * (_654.z + (-0.5));
        _727 = _688 * (_654.y + (-0.5));
        _728 = _688 * (_654.x + (-0.5));
        _729 = _698 * (_661.z + (-0.5));
        _730 = _698 * (_661.y + (-0.5));
        _731 = _698 * (_661.x + (-0.5));
        _732 = _708 * (_668.z + (-0.5));
        _733 = _708 * (_668.y + (-0.5));
        _734 = _708 * (_668.x + (-0.5));
        _735 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        _736 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        _737 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    }
    else
    {
        _725 = _726;
        _727 = _726;
        _728 = _726;
        _729 = _726;
        _730 = _726;
        _731 = _726;
        _732 = _726;
        _733 = _726;
        _734 = _726;
        _735 = _726;
        _736 = _726;
        _737 = _726;
    }
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _763 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _767 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _771 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _794 = _524 + _314;
        float _795 = _528 + _315;
        float _796 = _532 + _316;
        float _806 = fma(_796, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _794)) - _763;
        float _807 = fma(_796, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _794)) - _767;
        float _808 = fma(_796, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _794)) - _771;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_763 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_767 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[35u].z) + ((((((_771 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _862 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _872 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _882 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _892 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_850.x + (-0.5));
        float _894 = _892 * (_850.y + (-0.5));
        float _895 = _892 * (_850.z + (-0.5));
        _899 = _862 * (_829.z + (-0.5));
        _900 = _862 * (_829.y + (-0.5));
        _901 = _862 * (_829.x + (-0.5));
        _902 = _872 * (_836.z + (-0.5));
        _903 = _872 * (_836.y + (-0.5));
        _904 = _872 * (_836.x + (-0.5));
        _905 = _882 * (_843.z + (-0.5));
        _906 = _882 * (_843.y + (-0.5));
        _907 = _882 * (_843.x + (-0.5));
        _908 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        _909 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        _910 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    }
    else
    {
        _899 = _726;
        _900 = _726;
        _901 = _726;
        _902 = _726;
        _903 = _726;
        _904 = _726;
        _905 = _726;
        _906 = _726;
        _907 = _726;
        _908 = _726;
        _909 = _726;
        _910 = _726;
    }
    float _925 = _464 * 0.5;
    float _926 = _465 * 0.5;
    float _927 = _466 * 0.5;
    float _928 = dot(vec4(_925, _926, _927, 1.0), vec4(_901, _904, _907, _910));
    float _931 = dot(vec4(_925, _926, _927, 1.0), vec4(_900, _903, _906, _909));
    float _934 = dot(vec4(_925, _926, _927, 1.0), vec4(_899, _902, _905, _908));
    float _969;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _941 = dot(vec4(_925, _926, _927, 1.0), vec4(_725, _729, _732, _735));
        float _945 = dot(vec4(_925, _926, _927, 1.0), vec4(_727, _730, _733, _736));
        float _949 = dot(vec4(_925, _926, _927, 1.0), vec4(_728, _731, _734, _737));
        float _956 = dot(vec4(cbModelParam._m0[39u]), vec4(_925, _926, _927, 1.0));
        _969 = dot(vec3(isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)), isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)), isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_956) ? 0.0 : (isnan(0.0) ? _956 : max(0.0, _956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _969 = 1.0;
    }
    float _980;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _971 = dot(vec4(cbModelParam._m0[40u]), vec4(_925, _926, _927, 1.0));
        _980 = dot(vec3(isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)), isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)), isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_971) ? 0.0 : (isnan(0.0) ? _971 : max(0.0, _971))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _980 = 1.0;
    }
    float _984 = (_980 * cbModelParam._m0[1u].x) + (_969 * (1.0 - cbModelParam._m0[1u].x));
    float _991 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _992 = isnan(_991) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _991 : min(cbModelParam._m0[25u].z, _991));
    float _1075;
    float _1077;
    float _1079;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1042 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1046 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1050 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1053 = fma(_466, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464));
        float _1056 = fma(_466, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464));
        float _1059 = fma(_466, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464));
        float _1087;
        if (_1053 > 0.0)
        {
            _1087 = abs((1.0 - _1042) / _1053);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1053 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1042 + 1.0) / _1053);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1087 = frontier_phi_19_17_ladder;
        }
        float _1433;
        if (_1056 > 0.0)
        {
            _1433 = abs((1.0 - _1046) / _1056);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1056 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1046 + 1.0) / _1056);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1433 = frontier_phi_28_24_ladder;
        }
        float _1639;
        if (_1059 > 0.0)
        {
            _1639 = abs((1.0 - _1050) / _1059);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1059 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1050 + 1.0) / _1059);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1639 = frontier_phi_40_35_ladder;
        }
        float _1641 = isnan(_1433) ? _1087 : (isnan(_1087) ? _1433 : min(_1087, _1433));
        float _1642 = isnan(_1639) ? _1641 : (isnan(_1641) ? _1639 : min(_1641, _1639));
        float _1646 = (_1642 * _1053) + _1042;
        float _1647 = (_1642 * _1056) + _1046;
        float _1648 = (_1642 * _1059) + _1050;
        float _1649 = _1642 * 9.9999997473787516355514526367188e-05;
        float _1651 = (-1.0) - _1649;
        float _1653 = _1649 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1648 > _1653) || ((_1648 < _1651) || ((_1647 > _1653) || ((_1647 < _1651) || ((_1646 < _1651) || (_1646 > _1653))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1648, cbModelParam._m0[9u].z, fma(_1647, cbModelParam._m0[9u].y, _1646 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1648, cbModelParam._m0[10u].z, fma(_1647, cbModelParam._m0[10u].y, _1646 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1648, cbModelParam._m0[11u].z, fma(_1647, cbModelParam._m0[11u].y, _1646 * cbModelParam._m0[11u].x))), _992);
            frontier_phi_18_40_ladder = _1841.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1841.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1841.x * cbModelParam._m0[1u].y;
        }
        _1075 = frontier_phi_18_40_ladder_2;
        _1077 = frontier_phi_18_40_ladder_1;
        _1079 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_464, _465, _466), _992);
        _1075 = _1063.x * cbModelParam._m0[1u].y;
        _1077 = _1063.y * cbModelParam._m0[1u].y;
        _1079 = _1063.z * cbModelParam._m0[1u].y;
    }
    float _1083 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1084 = isnan(_1083) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1083 : min(cbModelParam._m0[25u].w, _1083));
    float _1176;
    float _1178;
    float _1180;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1140 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1144 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1148 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1151 = fma(_466, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464));
        float _1154 = fma(_466, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464));
        float _1157 = fma(_466, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464));
        float _1438;
        if (_1151 > 0.0)
        {
            _1438 = abs((1.0 - _1140) / _1151);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1151 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1140 + 1.0) / _1151);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1438 = frontier_phi_30_26_ladder;
        }
        float _1666;
        if (_1154 > 0.0)
        {
            _1666 = abs((1.0 - _1144) / _1154);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1154 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1144 + 1.0) / _1154);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1666 = frontier_phi_42_37_ladder;
        }
        float _1973;
        if (_1157 > 0.0)
        {
            _1973 = abs((1.0 - _1148) / _1157);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1157 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1148 + 1.0) / _1157);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1973 = frontier_phi_53_48_ladder;
        }
        float _1975 = isnan(_1666) ? _1438 : (isnan(_1438) ? _1666 : min(_1438, _1666));
        float _1976 = isnan(_1973) ? _1975 : (isnan(_1975) ? _1973 : min(_1975, _1973));
        float _1980 = (_1976 * _1151) + _1140;
        float _1981 = (_1976 * _1154) + _1144;
        float _1982 = (_1976 * _1157) + _1148;
        float _1983 = _1976 * 9.9999997473787516355514526367188e-05;
        float _1984 = (-1.0) - _1983;
        float _1986 = _1983 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_1982 > _1986) || ((_1982 < _1984) || ((_1981 > _1986) || ((_1981 < _1984) || ((_1980 < _1984) || (_1980 > _1986))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1982, cbModelParam._m0[17u].z, fma(_1981, cbModelParam._m0[17u].y, _1980 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1982, cbModelParam._m0[18u].z, fma(_1981, cbModelParam._m0[18u].y, _1980 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1982, cbModelParam._m0[19u].z, fma(_1981, cbModelParam._m0[19u].y, _1980 * cbModelParam._m0[19u].x))), _1084);
            frontier_phi_27_53_ladder = _2108.z * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2108.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2108.x * cbModelParam._m0[1u].z;
        }
        _1176 = frontier_phi_27_53_ladder_2;
        _1178 = frontier_phi_27_53_ladder_1;
        _1180 = frontier_phi_27_53_ladder;
    }
    else
    {
        vec4 _1160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_464, _465, _466), _1084);
        _1176 = _1160.x * cbModelParam._m0[1u].z;
        _1178 = _1160.y * cbModelParam._m0[1u].z;
        _1180 = _1160.z * cbModelParam._m0[1u].z;
    }
    float _1193 = (((_495 * _317) + _496) * _456) * ((cbModelParam._m0[1u].w * (_1176 - _1075)) + _1075);
    float _1195 = (((_495 * _318) + _496) * _456) * ((cbModelParam._m0[1u].w * (_1178 - _1077)) + _1077);
    float _1197 = (((_495 * _319) + _496) * _456) * ((cbModelParam._m0[1u].w * (_1180 - _1079)) + _1079);
    float _1218 = fma(_1197, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1221 = fma(_1197, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1224 = fma(_1197, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, _1193 * cbSceneParam._m0[91u].x));
    uint _1231 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1235 = floatBitsToUint(cbInstanceData._m0[_1231 + 5u]);
    uint _1237 = _1235.x * 14u;
    uint _1238 = _1237 + 13u;
    float _1244 = _456 + (-1.0);
    float _1248 = (cbLight._m0[_1238].x * _1244) + 1.0;
    float _1249 = (cbLight._m0[_1238].y * _1244) + 1.0;
    float _1250 = (cbLight._m0[_1238].w * _1244) + 1.0;
    uint _1254 = _1237 + 8u;
    float _1270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1237].w)) * _320) * 0.949999988079071044921875);
    float _1271 = _1270 * _1270;
    float _1272 = cbLight._m0[_1237].x + _399;
    float _1273 = cbLight._m0[_1237].y + _400;
    float _1274 = cbLight._m0[_1237].z + _401;
    float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
    float _1279 = _1278 * _1272;
    float _1280 = _1278 * _1273;
    float _1281 = _1278 * _1274;
    float _1282 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1237].xyz));
    float _2955 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
    float _1285 = isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0));
    float _2966 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _1286 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
    float _1287 = dot(vec3(_314, _315, _316), vec3(_1279, _1280, _1281));
    float _2977 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
    float _1290 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
    float _1291 = dot(vec3(cbLight._m0[_1237].xyz), vec3(_1279, _1280, _1281));
    float _2988 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1295 = _1271 * _1271;
    float _1299 = ((_1290 * _1290) * (_1295 + (-1.0))) + 1.0;
    float _1307 = exp2(log2(1.0 - (isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0)))) * 5.0);
    float _1308 = 1.0 - _317;
    float _1309 = 1.0 - _318;
    float _1310 = 1.0 - _319;
    float _1317 = 1.0 - _1271;
    float _1328 = (0.5 / (((_1286 * ((_1285 * _1317) + _1271)) + 9.9999999392252902907785028219223e-09) + (((_1286 * _1317) + _1271) * _1285))) * _1285;
    float _2999 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _1330 = (isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0))) * (_1295 / ((_1299 * _1299) * 3.141590118408203125));
    float _1331 = isnan(1.0) ? _1248 : (isnan(_1248) ? 1.0 : min(_1248, 1.0));
    uint _1341 = _1237 | 1u;
    uint _1345 = _1237 + 9u;
    float _1359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1341].w)) * _320) * 0.949999988079071044921875);
    float _1360 = _1359 * _1359;
    float _1361 = cbLight._m0[_1341].x + _399;
    float _1362 = cbLight._m0[_1341].y + _400;
    float _1363 = cbLight._m0[_1341].z + _401;
    float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
    float _1368 = _1367 * _1361;
    float _1369 = _1367 * _1362;
    float _1370 = _1367 * _1363;
    float _1371 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1341].xyz));
    float _3015 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _1374 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
    float _1375 = dot(vec3(_314, _315, _316), vec3(_1368, _1369, _1370));
    float _3026 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    float _1378 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
    float _1379 = dot(vec3(cbLight._m0[_1341].xyz), vec3(_1368, _1369, _1370));
    float _3037 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
    float _1383 = _1360 * _1360;
    float _1387 = ((_1378 * _1378) * (_1383 + (-1.0))) + 1.0;
    float _1394 = exp2(log2(1.0 - (isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0)))) * 5.0);
    float _1401 = 1.0 - _1360;
    float _1411 = (0.5 / (((_1286 * ((_1374 * _1401) + _1360)) + 9.9999999392252902907785028219223e-09) + (((_1286 * _1401) + _1360) * _1374))) * _1374;
    float _3048 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
    float _1413 = (isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0))) * (_1383 / ((_1387 * _1387) * 3.141590118408203125));
    float _1414 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
    float _1424 = (((((_1394 * _1308) + _317) * cbLight._m0[_1345].x) * _1413) * _1414) + (((((_1307 * _1308) + _317) * cbLight._m0[_1254].x) * _1330) * _1331);
    float _1425 = (((((_1394 * _1309) + _318) * cbLight._m0[_1345].y) * _1413) * _1414) + (((((_1307 * _1309) + _318) * cbLight._m0[_1254].y) * _1330) * _1331);
    float _1426 = (((((_1394 * _1310) + _319) * cbLight._m0[_1345].z) * _1413) * _1414) + (((((_1307 * _1310) + _319) * cbLight._m0[_1254].z) * _1330) * _1331);
    uvec4 _1430 = floatBitsToUint(cbLight._m0[_1237 + 12u]);
    float _1443;
    float _1445;
    float _1447;
    if (_1430.x == 0u)
    {
        _1443 = _1424;
        _1445 = _1425;
        _1447 = _1426;
    }
    else
    {
        float _1453 = (cbLight._m0[_1238].z * _1244) + 1.0;
        uint _1454 = _1237 + 2u;
        uint _1458 = _1237 + 10u;
        float _1472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1454].w)) * _320) * 0.949999988079071044921875);
        float _1473 = _1472 * _1472;
        float _1474 = cbLight._m0[_1454].x + _399;
        float _1475 = cbLight._m0[_1454].y + _400;
        float _1476 = cbLight._m0[_1454].z + _401;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1481 = _1480 * _1474;
        float _1482 = _1480 * _1475;
        float _1483 = _1480 * _1476;
        float _1484 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1454].xyz));
        float _3064 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1487 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _1488 = dot(vec3(_314, _315, _316), vec3(_1481, _1482, _1483));
        float _3075 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1491 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _1492 = dot(vec3(cbLight._m0[_1454].xyz), vec3(_1481, _1482, _1483));
        float _3086 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1473 * _1473;
        float _1500 = ((_1491 * _1491) * (_1496 + (-1.0))) + 1.0;
        float _1507 = exp2(log2(1.0 - (isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0)))) * 5.0);
        float _1514 = 1.0 - _1473;
        float _1524 = (0.5 / (((_1286 * ((_1487 * _1514) + _1473)) + 9.9999999392252902907785028219223e-09) + (((_1286 * _1514) + _1473) * _1487))) * _1487;
        float _3097 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1526 = (isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_1496 / ((_1500 * _1500) * 3.141590118408203125));
        float _1527 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
        _1443 = (((((_1507 * _1308) + _317) * cbLight._m0[_1458].x) * _1526) * _1527) + _1424;
        _1445 = (((((_1507 * _1309) + _318) * cbLight._m0[_1458].y) * _1526) * _1527) + _1425;
        _1447 = (((((_1507 * _1310) + _319) * cbLight._m0[_1458].z) * _1526) * _1527) + _1426;
    }
    float _1545;
    float _1547;
    float _1549;
    if (_1430.y == 0u)
    {
        _1545 = _1443;
        _1547 = _1445;
        _1549 = _1447;
    }
    else
    {
        uint _1556 = _1237 + 3u;
        uint _1560 = _1237 + 11u;
        float _1574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1556].w)) * _320) * 0.949999988079071044921875);
        float _1575 = _1574 * _1574;
        float _1576 = cbLight._m0[_1556].x + _399;
        float _1577 = cbLight._m0[_1556].y + _400;
        float _1578 = cbLight._m0[_1556].z + _401;
        float _1582 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
        float _1583 = _1582 * _1576;
        float _1584 = _1582 * _1577;
        float _1585 = _1582 * _1578;
        float _1586 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1556].xyz));
        float _3113 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1589 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _1590 = dot(vec3(_314, _315, _316), vec3(_1583, _1584, _1585));
        float _3124 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1593 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
        float _1594 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_1583, _1584, _1585));
        float _3135 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1575 * _1575;
        float _1602 = ((_1593 * _1593) * (_1598 + (-1.0))) + 1.0;
        float _1609 = exp2(log2(1.0 - (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0)))) * 5.0);
        float _1616 = 1.0 - _1575;
        float _1626 = (0.5 / (((_1286 * ((_1589 * _1616) + _1575)) + 9.9999999392252902907785028219223e-09) + (((_1286 * _1616) + _1575) * _1589))) * _1589;
        float _3146 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1628 = (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0))) * (_1598 / ((_1602 * _1602) * 3.141590118408203125));
        float _1629 = isnan(1.0) ? _1250 : (isnan(_1250) ? 1.0 : min(_1250, 1.0));
        _1545 = (((((_1609 * _1308) + _317) * cbLight._m0[_1560].x) * _1628) * _1629) + _1443;
        _1547 = (((((_1609 * _1309) + _318) * cbLight._m0[_1560].y) * _1628) * _1629) + _1445;
        _1549 = (((((_1609 * _1310) + _319) * cbLight._m0[_1560].z) * _1628) * _1629) + _1447;
    }
    float _1771;
    float _1773;
    float _1775;
    if (_1235.y == 0u)
    {
        float _1710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1710;
        float _1712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1710;
        float _1713 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1710;
        uvec4 _1725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1726 = _1725.x;
        uint _1737 = uint((float(_1725.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _1726))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _1726)));
        float _1747 = (log2(_1713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1748 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        uint _1751 = uint(isnan(14.0) ? _1748 : (isnan(_1748) ? 14.0 : min(_1748, 14.0)));
        uvec4 _1756 = texelFetch(g_lightClusterGridBuffer, int(((_1751 << 2u) + (_1737 << 6u)) >> 2u));
        uint _1757 = _1756.x;
        uint _1758 = _1725.z;
        float _1850;
        float _1852;
        float _1854;
        if (((((1u << ((_1758 >> 4u) & 15u)) + 4294967295u) & _1757) == 0u) || ((_1758 & 240u) == 0u))
        {
            _1850 = 0.0;
            _1852 = 0.0;
            _1854 = 0.0;
        }
        else
        {
            float _1851;
            float _1853;
            float _1855;
            float _2022 = 0.0;
            float _2023 = 0.0;
            float _2024 = 0.0;
            uint _2025 = 0u;
            uint _2034;
            bool _2035;
            for (;;)
            {
                _2034 = texelFetch(g_lightClassification, int((((_1751 << 5u) + (_1737 << 9u)) + (_2025 << 2u)) >> 2u)).x;
                _2035 = _2034 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2035)
                {
                    frontier_phi_64_pred = _2024;
                    frontier_phi_64_pred_1 = _2023;
                    frontier_phi_64_pred_2 = _2022;
                }
                else
                {
                    float _2180;
                    float _2181;
                    float _2182;
                    uint _2183;
                    _2180 = _2022;
                    _2181 = _2023;
                    _2182 = _2024;
                    _2183 = _2034;
                    float _2113;
                    float _2114;
                    float _2115;
                    for (;;)
                    {
                        uint _2187 = uint(findLSB(_2183)) + (_2025 << 5u);
                        uint _2184 = (_2183 + 4294967295u) & _2183;
                        uint _2189 = _2187 * 48u;
                        vec4 _2203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2189)).x, texelFetch(g_PointLightRenderingBuffer, int(_2189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2189 + 3u)).x));
                        uint _2220 = (_2187 * 48u) + 8u;
                        vec3 _2231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2220)).x, texelFetch(g_PointLightRenderingBuffer, int(_2220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2220 + 2u)).x));
                        float _2235 = _2203.x - _1711;
                        float _2236 = _2203.y - _1712;
                        float _2237 = _2203.z - _1713;
                        float _2238 = dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237));
                        float _2241 = inversesqrt(_2238);
                        float _2242 = _2241 * _2235;
                        float _2243 = _2241 * _2236;
                        float _2244 = _2241 * _2237;
                        float _2250 = 1.0 - (_2238 * _2203.w);
                        float _3172 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
                        float _2252 = sqrt(_2238) * uintBitsToFloat(uvec4(_2210, _2211, _2212, texelFetch(g_PointLightRenderingBuffer, int(((_2187 * 48u) + 4u) + 3u)).x)).w;
                        float _2256 = _2252 * _2252;
                        float _2257 = (-0.0) - _1711;
                        float _2258 = (-0.0) - _1712;
                        float _2259 = (-0.0) - _1713;
                        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
                        float _2264 = _2263 * _2257;
                        float _2265 = _2263 * _2258;
                        float _2266 = _2263 * _2259;
                        float _2274 = exp2(log2(1.0 / ((_2256 * 3.5) + 5.0)) * 0.25);
                        float _2275 = 1.0 - _477;
                        float _2282 = sqrt(1.0 - ((1.0 - (_2275 * _2275)) * (1.0 - (_2274 * _2274))));
                        float _2283 = _2282 * _2282;
                        float _2284 = _2283 * _2283;
                        float _2285 = _2264 + _2242;
                        float _2286 = _2265 + _2243;
                        float _2287 = _2266 + _2244;
                        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
                        float _2295 = dot(vec3(_438, _441, _444), vec3(_2264, _2265, _2266));
                        float _3183 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
                        float _2298 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
                        float _2299 = dot(vec3(_438, _441, _444), vec3(_2291 * _2285, _2291 * _2286, _2291 * _2287));
                        float _3194 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
                        float _2302 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
                        float _2306 = ((_2302 * _2302) * (_2284 + (-1.0))) + 1.0;
                        float _2307 = (1.39999997615814208984375 / (_2252 + 1.39999997615814208984375)) * _2283;
                        float _2308 = _2307 * _2307;
                        float _2311 = ((1.0 - _2308) * dot(vec3(_438, _441, _444), vec3(_2242, _2243, _2244))) + _2308;
                        float _3205 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
                        float _2312 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
                        float _2313 = 1.0 - _2283;
                        float _2323 = (0.5 / (((_2312 * ((_2298 * _2313) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2313) + _2283) * _2298))) * _2312;
                        float _3216 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                        float _2334 = (((_2284 * 3.1415927410125732421875) * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) / ((_2306 * _2306) * ((_2256 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)));
                        _2113 = (_2334 * _2231.x) + _2180;
                        _2114 = (_2334 * _2231.y) + _2181;
                        _2115 = (_2334 * _2231.z) + _2182;
                        if (_2184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2180 = _2113;
                            _2181 = _2114;
                            _2182 = _2115;
                            _2183 = _2184;
                        }
                    }
                    frontier_phi_64_pred = _2115;
                    frontier_phi_64_pred_1 = _2114;
                    frontier_phi_64_pred_2 = _2113;
                }
                _1855 = frontier_phi_64_pred;
                _1853 = frontier_phi_64_pred_1;
                _1851 = frontier_phi_64_pred_2;
                uint _2026 = _2025 + 1u;
                if (_2026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2022 = _1851;
                    _2023 = _1853;
                    _2024 = _1855;
                    _2025 = _2026;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1850 = _1851;
            _1852 = _1853;
            _1854 = _1855;
        }
        uvec4 _1858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1859 = _1858.z;
        uint _1861 = (_1859 >> 8u) & 15u;
        float _1999;
        float _2001;
        float _2003;
        if (((4294967295u << _1861) & _1757) == 0u)
        {
            _1999 = _1850;
            _2001 = _1852;
            _2003 = _1854;
        }
        else
        {
            float _2015 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
            float _2016 = _2015 * _1711;
            float _2017 = _2015 * _1712;
            float _2018 = _2015 * _1713;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1861 < ((_1859 >> 12u) & 15u))
            {
                float _2000;
                float _2002;
                float _2004;
                float _2166 = _1850;
                float _2167 = _1852;
                float _2168 = _1854;
                uint _2169 = _1861;
                uint _2178;
                bool _2179;
                for (;;)
                {
                    _2178 = texelFetch(g_lightClassification, int((((_1751 << 5u) + (_1737 << 9u)) + (_2169 << 2u)) >> 2u)).x;
                    _2179 = _2178 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2179)
                    {
                        frontier_phi_75_pred = _2168;
                        frontier_phi_75_pred_1 = _2167;
                        frontier_phi_75_pred_2 = _2166;
                    }
                    else
                    {
                        float _2344;
                        float _2345;
                        float _2346;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2354 = _2166;
                        float _2355 = _2167;
                        float _2356 = _2168;
                        uint _2357 = _2178;
                        uint _2358;
                        uint _2368;
                        vec4 _2383;
                        float _2384;
                        vec3 _2396;
                        vec4 _2412;
                        vec4 _2428;
                        float _2475;
                        bool _2476;
                        for (;;)
                        {
                            _2368 = ((_2169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2357));
                            _2358 = (_2357 + 4294967295u) & _2357;
                            uint _2370 = _2368 * 40u;
                            _2383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2370 + 3u)).x));
                            _2384 = _2383.w;
                            uint _2386 = (_2368 * 40u) + 8u;
                            _2396 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2386 + 2u)).x));
                            uint _2399 = (_2368 * 40u) + 16u;
                            _2412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 3u)).x));
                            uint _2415 = (_2368 * 40u) + 20u;
                            _2428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2415 + 3u)).x));
                            uint _2431 = (_2368 * 40u) + 24u;
                            vec4 _2444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2431 + 3u)).x));
                            uint _2450 = (_2368 * 40u) + 28u;
                            vec4 _2463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2450 + 3u)).x));
                            _2475 = fma(_1713, _2463.z, fma(_1712, _2463.y, _2463.x * _1711)) + _2463.w;
                            _2476 = !((fma(_1713, _2444.z, fma(_1712, _2444.y, _2444.x * _1711)) + _2444.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2476)
                            {
                                float _2510 = _2383.x - _1711;
                                float _2511 = _2383.y - _1712;
                                float _2512 = _2383.z - _1713;
                                float _2513 = dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512));
                                float _2516 = inversesqrt(_2513);
                                float _2517 = _2516 * _2510;
                                float _2518 = _2516 * _2511;
                                float _2519 = _2516 * _2512;
                                float _2523 = 1.0 - (_2513 / (_2384 * _2384));
                                float _3227 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
                                float _2525 = sqrt(_2513) * uintBitsToFloat(uvec4(_2479, _2480, _2481, texelFetch(g_SpotLightRenderingBuffer, int(((_2368 * 40u) + 4u) + 3u)).x)).w;
                                float _2528 = _2525 * _2525;
                                float _2529 = (fma(_1713, _2412.z, fma(_1712, _2412.y, _2412.x * _1711)) + _2412.w) / _2475;
                                float _2530 = (fma(_1713, _2428.z, fma(_1712, _2428.y, _2428.x * _1711)) + _2428.w) / _2475;
                                float _2534 = 1.0 - dot(vec2(_2529, _2530), vec2(_2529, _2530));
                                float _3238 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                                float _2544 = exp2(log2(1.0 / ((_2528 * 3.5) + 5.0)) * 0.25);
                                float _2545 = 1.0 - _477;
                                float _2552 = sqrt(1.0 - ((1.0 - (_2545 * _2545)) * (1.0 - (_2544 * _2544))));
                                float _2553 = _2552 * _2552;
                                float _2554 = _2553 * _2553;
                                float _2555 = _2517 - _2016;
                                float _2556 = _2518 - _2017;
                                float _2557 = _2519 - _2018;
                                float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
                                float _2565 = dot(vec3(_438, _441, _444), vec3((-0.0) - _2016, (-0.0) - _2017, (-0.0) - _2018));
                                float _3249 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                                float _2568 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
                                float _2569 = dot(vec3(_438, _441, _444), vec3(_2561 * _2555, _2561 * _2556, _2561 * _2557));
                                float _3260 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                                float _2572 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
                                float _2576 = ((_2572 * _2572) * (_2554 + (-1.0))) + 1.0;
                                float _2577 = (1.39999997615814208984375 / (_2525 + 1.39999997615814208984375)) * _2553;
                                float _2578 = _2577 * _2577;
                                float _2584 = ((1.0 - _2578) * dot(vec3(_438, _441, _444), vec3(_2517, _2518, _2519))) + _2578;
                                float _3271 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
                                float _2585 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
                                float _2586 = 1.0 - _2553;
                                float _2596 = (0.5 / (((_2585 * ((_2568 * _2586) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2586) + _2553) * _2568))) * _2585;
                                float _3282 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                                float _2606 = ((isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * (((_2554 * 3.1415927410125732421875) * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) / ((_2576 * _2576) * ((_2528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2606 * _2396.z;
                                frontier_phi_81_pred_1 = _2606 * _2396.y;
                                frontier_phi_81_pred_2 = _2606 * _2396.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2612 = frontier_phi_81_pred;
                            _2611 = frontier_phi_81_pred_1;
                            _2610 = frontier_phi_81_pred_2;
                            _2344 = _2610 + _2354;
                            _2345 = _2611 + _2355;
                            _2346 = _2612 + _2356;
                            if (_2358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2354 = _2344;
                                _2355 = _2345;
                                _2356 = _2346;
                                _2357 = _2358;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2346;
                        frontier_phi_75_pred_1 = _2345;
                        frontier_phi_75_pred_2 = _2344;
                    }
                    _2004 = frontier_phi_75_pred;
                    _2002 = frontier_phi_75_pred_1;
                    _2000 = frontier_phi_75_pred_2;
                    uint _2170 = _2169 + 1u;
                    if (_2170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2166 = _2000;
                        _2167 = _2002;
                        _2168 = _2004;
                        _2169 = _2170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2004;
                frontier_phi_55_56_ladder_1 = _2002;
                frontier_phi_55_56_ladder_2 = _2000;
            }
            else
            {
                frontier_phi_55_56_ladder = _1854;
                frontier_phi_55_56_ladder_1 = _1852;
                frontier_phi_55_56_ladder_2 = _1850;
            }
            _1999 = frontier_phi_55_56_ladder_2;
            _2001 = frontier_phi_55_56_ladder_1;
            _2003 = frontier_phi_55_56_ladder;
        }
        float _2008 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
        _1771 = ((_1999 * _317) * _2008) + _1545;
        _1773 = ((_2001 * _318) * _2008) + _1547;
        _1775 = ((_2003 * _319) * _2008) + _1549;
    }
    else
    {
        _1771 = _1545;
        _1773 = _1547;
        _1775 = _1549;
    }
    float _1777 = dot(vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375), vec3(_317, _318, _319));
    float _1783 = _1771 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _984);
    float _1784 = _1773 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _984);
    float _1785 = _1775 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _984);
    uint _1786 = _1231 + 6u;
    float _1791 = (cbInstanceData._m0[_1786].w * cbMtdParam._m0[28u].x) * (((1.0 - _1777) * exp2(log2(1.0 - _471) * 5.0)) + _1777);
    float _1796 = _417 / cbSceneParam._m0[86u].x;
    float _1797 = _418 / cbSceneParam._m0[86u].y;
    vec4 _1811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1796, _1797, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1813 = _1811.x;
    float _1814 = _1811.y;
    float _1815 = _1811.z;
    float _1816 = _1811.w;
    float _1907;
    float _1909;
    float _1911;
    float _1913;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _1869 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _1870 = _1869 / _340;
        float _1881 = _1870 * _392;
        float _1882 = _393 * _1870;
        float _1883 = (-0.0) - _1882;
        float _1885 = _1870 * _394;
        float _1887 = (cbSceneParam._m0[77u].w * _1883) / _1869;
        float _1888 = _1887 + cbSceneParam._m0[79u].w;
        float _1889 = cbSceneParam._m0[79u].w - _1882;
        float _1895 = sqrt(((_1881 * _1881) + (_1882 * _1882)) + (_1885 * _1885));
        float _1898 = (1.0 - (cbSceneParam._m0[77u].w / _1869)) * _1895;
        float _1903 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1905 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2123;
        if (abs((_1883 - _1887) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2123 = ((((_1888 > 0.0) ? exp2(_1903 * _1888) : (2.0 - exp2(_1905 * _1888))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1898;
        }
        else
        {
            float _2048 = 1.0 / cbSceneParam._m0[80u].x;
            float _2049 = isnan(_1889) ? _1888 : (isnan(_1888) ? _1889 : max(_1888, _1889));
            float _2050 = isnan(_1889) ? _1888 : (isnan(_1888) ? _1889 : min(_1888, _1889));
            float _2059 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : min(_2049, 0.0));
            float _2060 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : min(_2050, 0.0));
            _2123 = ((abs(_1895 / _1883) * cbSceneParam._m0[80u].y) * ((((_2059 - _2060) * 2.0) - ((exp2(_1903 * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)))) - exp2(_1903 * (isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))))) * _2048)) - ((exp2(_1905 * _2059) - exp2(_1905 * _2060)) * _2048))) + (_1898 * cbSceneParam._m0[80u].z);
        }
        vec4 _2125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1796, _1797, 1.0), 0.0);
        float _2134 = exp2((_2123 * (-1.44269502162933349609375)) * (1.0 - _2125.w));
        float _2135 = log2(_2134);
        float _2151 = log2(_1816);
        _1907 = (exp2(_2151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2135 * cbSceneParam._m0[78u].x)) * _2125.x) / cbSceneParam._m0[78u].x)) + _1813;
        _1909 = (exp2(_2151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2135 * cbSceneParam._m0[78u].y)) * _2125.y) / cbSceneParam._m0[78u].y)) + _1814;
        _1911 = (exp2(_2151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2135 * cbSceneParam._m0[78u].z)) * _2125.z) / cbSceneParam._m0[78u].z)) + _1815;
        _1913 = _2134 * _1816;
    }
    else
    {
        _1907 = _1813;
        _1909 = _1814;
        _1911 = _1815;
        _1913 = _1816;
    }
    bool _2161;
    vec4 _1926;
    vec4 _1955;
    float _1957;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    bool _1972;
    for (;;)
    {
        _1926 = cbMatDynParam._m0[0u];
        bool _1929 = roundEven(_1926.y) == 3.0;
        float _1930 = log2(_1913);
        float _1937 = cbPerFrame._m0[3u].x * cbMtdParam._m0[28u].x;
        float _1940 = ((_1937 * _1783) * cbInstanceData._m0[_1786].w) * exp2(_1930 * cbSceneParam._m0[78u].x);
        float _1943 = ((_1937 * _1784) * cbInstanceData._m0[_1786].w) * exp2(_1930 * cbSceneParam._m0[78u].y);
        float _1946 = ((_1937 * _1785) * cbInstanceData._m0[_1786].w) * exp2(_1930 * cbSceneParam._m0[78u].z);
        float _1953 = _405 + (-0.5);
        _1955 = cbMtdParam._m0[1u];
        _1957 = _1955.y * _1953;
        _1959 = cbSceneParam._m0[72u].z * (_1929 ? _1940 : (_1940 + ((_1907 * _1791) * cbSceneParam._m0[72u].w)));
        _1960 = cbSceneParam._m0[72u].z * (_1929 ? _1943 : (_1943 + ((_1909 * _1791) * cbSceneParam._m0[72u].w)));
        _1961 = (_1929 ? _1946 : (_1946 + ((_1911 * _1791) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
        _1962 = _1953 * 0.999000012874603271484375;
        _1972 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1972)
        {
            if ((cbInstanceData._m0[_1231 + 7u].x + _1962) < 0.5)
            {
                _2161 = true;
                break;
            }
        }
        uint _2084 = (_1231 + 9u) + uint(_1926.w);
        if ((cbInstanceData._m0[_2084].w < 1.0) && ((cbInstanceData._m0[_2084].w + _1962) < 0.5))
        {
            _2161 = true;
            break;
        }
        if ((_1957 + 1.0) < _1955.x)
        {
            _2161 = true;
            break;
        }
        _2161 = false;
        break;
    }
    float _2339;
    if (_2161)
    {
        discard_state = true;
        _2339 = 0.0;
    }
    else
    {
        _2339 = _1791;
    }
    SV_Target.x = _1959;
    SV_Target.y = _1960;
    SV_Target.z = _1961;
    SV_Target.w = _2339;
    discard_exit();
}


