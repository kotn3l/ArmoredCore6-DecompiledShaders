#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1455;
float _4151;
float _4152;
float _4153;
float _4154;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _265 = log2(0.0);
    float _267 = exp2(_265 * cbMtdParam._m0[24u].x);
    float _268 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _269 = isnan(1.0) ? _268 : (isnan(_268) ? 1.0 : min(_268, 1.0));
    vec4 _283 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _287 = _283.z;
    float _295 = exp2(log2(_287 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _318 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(4.0) ? _319 : (isnan(_319) ? 4.0 : min(_319, 4.0));
    float _333 = floor(_320);
    vec4 _336 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _333));
    vec4 _361 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _372 = cbMtdParam._m0[9u].x * _361.x;
    float _373 = cbMtdParam._m0[9u].y * _361.y;
    float _374 = cbMtdParam._m0[9u].z * _361.z;
    float _381 = (((cbMtdParam._m0[10u].x * _336.x) - _372) * _297) + _372;
    float _382 = (((cbMtdParam._m0[10u].y * _336.y) - _373) * _297) + _373;
    float _383 = (((cbMtdParam._m0[10u].z * _336.z) - _374) * _297) + _374;
    float _389 = exp2(log2(_283.w) * cbMtdParam._m0[24u].w);
    vec4 _402 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _422 = (((cbMtdParam._m0[16u].x * _402.x) - _381) * _389) + _381;
    float _423 = (((cbMtdParam._m0[16u].y * _402.y) - _382) * _389) + _382;
    float _424 = (((cbMtdParam._m0[16u].z * _402.z) - _383) * _389) + _383;
    vec4 _437 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _462 = (_255.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _437.x) - _422) * _269) + _422);
    float _464 = (_255.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _437.y) - _423) * _269) + _423);
    float _466 = (_255.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _437.z) - _424) * _269) + _424);
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[30u].z;
    _191[0u] = cbMtdParam._m0[30u].w;
    _190[1u] = cbMtdParam._m0[32u].z;
    _191[1u] = cbMtdParam._m0[32u].w;
    _190[2u] = cbMtdParam._m0[32u].x;
    _191[2u] = cbMtdParam._m0[32u].y;
    _190[3u] = cbMtdParam._m0[31u].z;
    _191[3u] = cbMtdParam._m0[31u].w;
    _190[4u] = cbMtdParam._m0[31u].x;
    _191[4u] = cbMtdParam._m0[31u].y;
    float _505 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    uint _507 = uint(int(isnan(4.0) ? _505 : (isnan(_505) ? 4.0 : min(_505, 4.0))));
    float _514 = ((_191[_507] - cbMtdParam._m0[23u].z) * _297) + cbMtdParam._m0[23u].z;
    float _517 = ((cbMtdParam._m0[23u].w - _514) * _389) + _514;
    float _520 = ((cbMtdParam._m0[26u].y - _517) * _269) + _517;
    vec4 _535 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _333));
    vec4 _553 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _561 = cbMtdParam._m0[23u].x + _553.z;
    float _564 = (((_535.z + _190[_507]) - _561) * _297) + _561;
    vec4 _576 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _587 = (((_576.z - _564) + cbMtdParam._m0[30u].x) * _389) + _564;
    float _593 = ((((_287 * 2.0) * _587) - _587) * cbMtdParam._m0[25u].w) + _587;
    vec4 _605 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _616 = (((cbMtdParam._m0[24u].z + _605.z) - _593) * _269) + _593;
    float _629 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _652 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_629 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _629) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _656 = cbPerFrame._m0[22u].x * 2.0;
    float _657 = _656 * cbMtdParam._m0[28u].z;
    float _660 = (_652.x * 0.5) + (-0.25);
    float _663 = (_652.y * 0.5) + (-0.25);
    float _664 = _663 * cbMtdParam._m0[28u].y;
    float _666 = (-0.0) - (cbMtdParam._m0[28u].y * _660);
    float _668 = fract(_657);
    float _670 = fract(_657 + 0.5);
    float _682 = abs((_668 * 2.0) + (-1.0));
    vec4 _699 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_668 * _666) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_664 * _668) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _703 = _699.z;
    vec4 _704 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_670 * _666) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_664 * _670) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _715 = ((_704.x - _701) * _682) + _701;
    float _722 = exp2(log2(_715 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _723 = isnan(cbMtdParam._m0[29u].y) ? _722 : (isnan(_722) ? cbMtdParam._m0[29u].y : max(_722, cbMtdParam._m0[29u].y));
    float _724 = isnan(cbMtdParam._m0[29u].z) ? _723 : (isnan(_723) ? cbMtdParam._m0[29u].z : min(_723, cbMtdParam._m0[29u].z));
    float _748 = (cbMtdParam._m0[33u].x * _629) + TEXCOORD;
    float _749 = (cbMtdParam._m0[33u].y * _629) + TEXCOORD_1;
    float _752 = _656 * cbMtdParam._m0[27u].w;
    float _753 = _663 * cbMtdParam._m0[27u].z;
    float _755 = (-0.0) - (cbMtdParam._m0[27u].z * _660);
    float _756 = fract(_752);
    float _758 = fract(_752 + 0.5);
    float _769 = abs((_756 * 2.0) + (-1.0));
    vec4 _786 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_756 * _755) + _748) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_753 * _756) + _749) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _791 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_758 * _755) + _748) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_753 * _758) + _749) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _825 = ((_535.x - _555) * _297) + _555;
    float _826 = ((_535.y - _556) * _297) + _556;
    float _831 = ((_576.x - _825) * _389) + _825;
    float _832 = ((_576.y - _826) * _389) + _826;
    float _841 = ((((_605.x - _831) * _269) + _831) * 2.0) + (-1.0);
    float _842 = ((((_605.y - _832) * _269) + _832) * 2.0) + (-1.0);
    float _843 = dot(vec2(_841, _842), vec2(_841, _842));
    float _4213 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _848 = sqrt(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))));
    float _851 = (cbMtdParam._m0[26u].z * ((_283.x * 2.0) + (-1.0))) + _841;
    float _852 = (cbMtdParam._m0[26u].z * ((_283.y * 2.0) + (-1.0))) + _842;
    float _854 = gl_FragCoord.x * 0.125;
    float _856 = gl_FragCoord.y * 0.125;
    float _867 = fma(_848, _231 * NORMAL.x, fma(_852, _238 * TANGENT.x, (_224 * _216) * _851));
    float _870 = fma(_848, _231 * NORMAL.y, fma(_852, _238 * TANGENT.y, (_224 * _217) * _851));
    float _873 = fma(_848, _231 * NORMAL.z, fma(_852, _238 * TANGENT.z, (_224 * _218) * _851));
    float _877 = inversesqrt(dot(vec3(_867, _870, _873), vec3(_867, _870, _873)));
    float _878 = _877 * _867;
    float _879 = _877 * _870;
    float _880 = _877 * _873;
    float _4224 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _881 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4246 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4257 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4268 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _885 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_854, _856)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _905 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _956 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _946);
    float _957 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _946);
    float _958 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _946);
    float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
    float _963 = _956 * _962;
    float _964 = _957 * _962;
    float _965 = _958 * _962;
    vec4 _967 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_854, _856));
    float _969 = _967.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1139 = sqrt(((_956 * _956) + (_957 * _957)) + (_958 * _958));
        float _1145 = (cbMatDynParam._m0[5u].x * _1139) + cbMatDynParam._m0[5u].y;
        float _4279 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1150 = (cbMatDynParam._m0[5u].z * _1139) + cbMatDynParam._m0[5u].w;
        float _4290 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) - _1146)) + _1146) < ((_969 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _980 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _981 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _999 = fma(_880, cbSceneParam._m0[5u].z, fma(_879, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _878));
    float _1002 = fma(_880, cbSceneParam._m0[6u].z, fma(_879, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _878));
    float _1005 = fma(_880, cbSceneParam._m0[7u].z, fma(_879, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _878));
    uint _1018 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1019 = _1018 + 9u;
    uint _1020 = _1019 + uint(cbMatDynParam._m0[0u].w);
    float _1026 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * cbInstanceData._m0[_1020].x;
    float _1027 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * cbInstanceData._m0[_1020].y;
    float _1028 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * cbInstanceData._m0[_1020].z;
    float _4301 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _1032 = 1.0 - _885;
    float _1033 = _1029 * _1032;
    float _1034 = _1030 * _1032;
    float _1035 = _1031 * _1032;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _885;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _885;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _885;
    float _1043 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _980, cbSceneParam._m0[86u].y * _981));
    float _1058 = _1055.x * TEXCOORD_3.w;
    float _1059 = dot(vec3(_878, _879, _880), vec3(_963, _964, _965));
    float _1062 = _1059 * 2.0;
    float _1066 = (_1062 * _878) - _963;
    float _1067 = (_1062 * _879) - _964;
    float _1068 = (_1062 * _880) - _965;
    float _1072 = abs(dot(vec3(_963, _964, _965), vec3(_878, _879, _880)));
    float _4334 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = sqrt(_881);
    float _1085 = exp2((_1074 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1074 * 3.0));
    float _1091 = (1.0 - _1085) * ((_1074 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1092 = _1085 * _1074;
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1454;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1185 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1189 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1213 = _1120 + _878;
        float _1214 = _1124 + _879;
        float _1215 = _1128 + _880;
        float _1225 = fma(_1215, cbModelParam._m0[26u].z, fma(_1214, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213)) - _1181;
        float _1226 = fma(_1215, cbModelParam._m0[27u].z, fma(_1214, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213)) - _1185;
        float _1227 = fma(_1215, cbModelParam._m0[28u].z, fma(_1214, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213)) - _1189;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1243 = ((_1231 * _1225) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1231 * _1226) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1227) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1282 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1248.x + (-0.5));
        float _1284 = _1282 * (_1248.y + (-0.5));
        float _1285 = _1282 * (_1248.z + (-0.5));
        float _1292 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1255.x + (-0.5));
        float _1294 = _1292 * (_1255.y + (-0.5));
        float _1295 = _1292 * (_1255.z + (-0.5));
        float _1302 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1262.x + (-0.5));
        float _1304 = _1302 * (_1262.y + (-0.5));
        float _1305 = _1302 * (_1262.z + (-0.5));
        float _1312 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1269.x + (-0.5));
        float _1314 = _1312 * (_1269.y + (-0.5));
        float _1315 = _1312 * (_1269.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1336 = (dot(vec3(_878, _879, _880), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1346 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4382 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1348 + 1.0))) + _1353) * _1316;
        float _1363 = _1284 * 0.5;
        float _1364 = _1294 * 0.5;
        float _1365 = _1304 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_878, _879, _880), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4415 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1390 + 1.0))) + _1395) * _1317;
        float _1405 = _1285 * 0.5;
        float _1406 = _1295 * 0.5;
        float _1407 = _1305 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_878, _879, _880), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4448 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1432 + 1.0))) + _1437) * _1318;
        _1454 = _1285;
        _1456 = _1284;
        _1457 = _1283;
        _1458 = _1295;
        _1459 = _1294;
        _1460 = _1293;
        _1461 = _1305;
        _1462 = _1304;
        _1463 = _1303;
        _1464 = _1318;
        _1465 = _1317;
        _1466 = _1316;
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1455;
        _1456 = _1455;
        _1457 = _1455;
        _1458 = _1455;
        _1459 = _1455;
        _1460 = _1455;
        _1461 = _1455;
        _1462 = _1455;
        _1463 = _1455;
        _1464 = _1455;
        _1465 = _1455;
        _1466 = _1455;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1492 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1496 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1500 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1523 = _1120 + _878;
        float _1524 = _1124 + _879;
        float _1525 = _1128 + _880;
        float _1535 = fma(_1525, cbModelParam._m0[30u].z, fma(_1524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1523)) - _1492;
        float _1536 = fma(_1525, cbModelParam._m0[31u].z, fma(_1524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1523)) - _1496;
        float _1537 = fma(_1525, cbModelParam._m0[32u].z, fma(_1524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1523)) - _1500;
        float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
        float _1554 = ((_1541 * _1535) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1492 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1541 * _1536) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1496 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1541 * _1537) / cbModelParam._m0[35u].z) + ((((((_1500 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        float _1591 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1558.x + (-0.5));
        float _1593 = _1591 * (_1558.y + (-0.5));
        float _1594 = _1591 * (_1558.z + (-0.5));
        float _1601 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1565.x + (-0.5));
        float _1603 = _1601 * (_1565.y + (-0.5));
        float _1604 = _1601 * (_1565.z + (-0.5));
        float _1611 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1572.x + (-0.5));
        float _1613 = _1611 * (_1572.y + (-0.5));
        float _1614 = _1611 * (_1572.z + (-0.5));
        float _1621 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1579.x + (-0.5));
        float _1623 = _1621 * (_1579.y + (-0.5));
        float _1624 = _1621 * (_1579.z + (-0.5));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = _1592 * 0.5;
        float _1629 = _1602 * 0.5;
        float _1630 = _1612 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_878, _879, _880), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4511 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1655 + 1.0))) + _1660) * _1625;
        float _1670 = _1593 * 0.5;
        float _1671 = _1603 * 0.5;
        float _1672 = _1613 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_878, _879, _880), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4522 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4533 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4544 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_1697 + 1.0))) + _1702) * _1626;
        float _1712 = _1594 * 0.5;
        float _1713 = _1604 * 0.5;
        float _1714 = _1614 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_878, _879, _880), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4555 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4566 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4577 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_1739 + 1.0))) + _1744) * _1627;
        _1761 = _1594;
        _1762 = _1593;
        _1763 = _1592;
        _1764 = _1604;
        _1765 = _1603;
        _1766 = _1602;
        _1767 = _1614;
        _1768 = _1613;
        _1769 = _1612;
        _1770 = _1627;
        _1771 = _1626;
        _1772 = _1625;
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
    }
    else
    {
        _1761 = _1455;
        _1762 = _1455;
        _1763 = _1455;
        _1764 = _1455;
        _1765 = _1455;
        _1766 = _1455;
        _1767 = _1455;
        _1768 = _1455;
        _1769 = _1455;
        _1770 = _1455;
        _1771 = _1455;
        _1772 = _1455;
        _1773 = 0.0;
        _1774 = 0.0;
        _1775 = 0.0;
    }
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1467)) + _1467;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1468)) + _1468;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1469)) + _1469;
    float _1808 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1785));
    float _1829 = _1066 * 0.5;
    float _1830 = _1067 * 0.5;
    float _1831 = _1068 * 0.5;
    float _1832 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1835 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1838 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1872;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1845 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1454, _1458, _1461, _1464));
        float _1849 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1853 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1860 = dot(vec4(cbModelParam._m0[39u]), vec4(_1829, _1830, _1831, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1883;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1874 = dot(vec4(cbModelParam._m0[40u]), vec4(_1829, _1830, _1831, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1887 = (_1883 * cbModelParam._m0[1u].x) + (_1872 * (1.0 - cbModelParam._m0[1u].x));
    float _1897 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _881);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1897 : min(cbModelParam._m0[25u].z, _1897));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1945 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1949 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1953 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1956 = fma(_1068, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066));
        float _1959 = fma(_1068, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066));
        float _1962 = fma(_1068, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066));
        float _1990;
        if (_1956 > 0.0)
        {
            _1990 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1990 = frontier_phi_19_17_ladder;
        }
        float _2162;
        if (_1959 > 0.0)
        {
            _2162 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2162 = frontier_phi_28_24_ladder;
        }
        float _2456;
        if (_1962 > 0.0)
        {
            _2456 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2456 = frontier_phi_40_35_ladder;
        }
        float _2458 = isnan(_2162) ? _1990 : (isnan(_1990) ? _2162 : min(_1990, _2162));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1956) + _1945;
        float _2464 = (_2459 * _1959) + _1949;
        float _2465 = (_2459 * _1962) + _1953;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2466;
        float _2470 = _2466 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 > _2470) || ((_2464 < _2468) || ((_2463 < _2468) || (_2463 > _2470))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1898);
            frontier_phi_18_40_ladder = _2610.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2610.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2610.x * cbModelParam._m0[1u].y;
        }
        _1978 = frontier_phi_18_40_ladder_2;
        _1980 = frontier_phi_18_40_ladder_1;
        _1982 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1066, _1067, _1068), _1898);
        _1978 = _1966.x * cbModelParam._m0[1u].y;
        _1980 = _1966.y * cbModelParam._m0[1u].y;
        _1982 = _1966.z * cbModelParam._m0[1u].y;
    }
    float _1986 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _881);
    float _1987 = isnan(_1986) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1986 : min(cbModelParam._m0[25u].w, _1986));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2040 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2044 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2048 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2051 = fma(_1068, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066));
        float _2054 = fma(_1068, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066));
        float _2057 = fma(_1068, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066));
        float _2167;
        if (_2051 > 0.0)
        {
            _2167 = abs((1.0 - _2040) / _2051);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2040 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2167 = frontier_phi_30_26_ladder;
        }
        float _2483;
        if (_2054 > 0.0)
        {
            _2483 = abs((1.0 - _2044) / _2054);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2044 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2483 = frontier_phi_42_37_ladder;
        }
        float _2821;
        if (_2057 > 0.0)
        {
            _2821 = abs((1.0 - _2048) / _2057);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2048 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2821 = frontier_phi_52_49_ladder;
        }
        float _2823 = isnan(_2483) ? _2167 : (isnan(_2167) ? _2483 : min(_2167, _2483));
        float _2824 = isnan(_2821) ? _2823 : (isnan(_2823) ? _2821 : min(_2823, _2821));
        float _2828 = (_2824 * _2051) + _2040;
        float _2829 = (_2824 * _2054) + _2044;
        float _2830 = (_2824 * _2057) + _2048;
        float _2831 = _2824 * 9.9999997473787516355514526367188e-05;
        float _2832 = (-1.0) - _2831;
        float _2834 = _2831 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2830 > _2834) || ((_2830 < _2832) || ((_2829 > _2834) || ((_2829 < _2832) || ((_2828 < _2832) || (_2828 > _2834))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2830, cbModelParam._m0[17u].z, fma(_2829, cbModelParam._m0[17u].y, _2828 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2830, cbModelParam._m0[18u].z, fma(_2829, cbModelParam._m0[18u].y, _2828 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2830, cbModelParam._m0[19u].z, fma(_2829, cbModelParam._m0[19u].y, _2828 * cbModelParam._m0[19u].x))), _1987);
            frontier_phi_27_52_ladder = _2952.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2952.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2952.x * cbModelParam._m0[1u].z;
        }
        _2076 = frontier_phi_27_52_ladder_2;
        _2078 = frontier_phi_27_52_ladder_1;
        _2080 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1066, _1067, _1068), _1987);
        _2076 = _2060.x * cbModelParam._m0[1u].z;
        _2078 = _2060.y * cbModelParam._m0[1u].z;
        _2080 = _2060.z * cbModelParam._m0[1u].z;
    }
    float _2093 = (((_1091 * _1043) + _1092) * _1058) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1091 * _1045) + _1092) * _1058) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2097 = (((_1091 * _1046) + _1092) * _1058) * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2100 = fma(_2097, cbSceneParam._m0[89u].z, fma(_2095, cbSceneParam._m0[89u].y, _2093 * cbSceneParam._m0[89u].x));
    float _2103 = fma(_2097, cbSceneParam._m0[90u].z, fma(_2095, cbSceneParam._m0[90u].y, _2093 * cbSceneParam._m0[90u].x));
    float _2106 = fma(_2097, cbSceneParam._m0[91u].z, fma(_2095, cbSceneParam._m0[91u].y, _2093 * cbSceneParam._m0[91u].x));
    float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2154 = _2141 / _2153;
    float _2155 = _2145 / _2153;
    float _2156 = _2149 / _2153;
    float _2302;
    float _2303;
    float _2304;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2183 = ((uint(_2156 > cbSceneParam._m0[59u].y) + uint(_2156 > cbSceneParam._m0[59u].x)) + uint(_2156 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2184 = _2183 + 43u;
        uint _2192 = _2183 + 44u;
        uint _2200 = _2183 + 45u;
        uint _2208 = _2183 + 46u;
        float _2219 = fma(_2153, cbSceneParam._m0[_2184].w, fma(_2149, cbSceneParam._m0[_2184].z, fma(_2145, cbSceneParam._m0[_2184].y, _2141 * cbSceneParam._m0[_2184].x)));
        float _2223 = fma(_2153, cbSceneParam._m0[_2192].w, fma(_2149, cbSceneParam._m0[_2192].z, fma(_2145, cbSceneParam._m0[_2192].y, _2141 * cbSceneParam._m0[_2192].x)));
        float _2231 = fma(_2153, cbSceneParam._m0[_2208].w, fma(_2149, cbSceneParam._m0[_2208].z, fma(_2145, cbSceneParam._m0[_2208].y, _2141 * cbSceneParam._m0[_2208].x)));
        float _2235 = cbSceneParam._m0[33u].z * _2231;
        float _2237 = cbSceneParam._m0[33u].w * _2231;
        float _2240 = fma(_2153, cbSceneParam._m0[_2200].w, fma(_2149, cbSceneParam._m0[_2200].z, fma(_2145, cbSceneParam._m0[_2200].y, _2141 * cbSceneParam._m0[_2200].x))) / _2231;
        float _2288 = (cbSceneParam._m0[33u].x - sqrt(((_2155 * _2155) + (_2154 * _2154)) + (_2156 * _2156))) * cbSceneParam._m0[33u].y;
        float _4703 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2295 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2235 + _2219) / _2231, (_2237 + _2223) / _2231), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2237 + _2219) / _2231, (_2223 - _2235) / _2231), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 - _2235) / _2231, (_2223 - _2237) / _2231), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 - _2237) / _2231, (_2235 + _2223) / _2231), _2240), 0.0)).x), vec4(0.25)));
        _2302 = 1.0 - (_2295 * cbSceneParam._m0[34u].x);
        _2303 = 1.0 - (_2295 * cbSceneParam._m0[34u].y);
        _2304 = 1.0 - (_2295 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2302 = 1.0;
        _2303 = 1.0;
        _2304 = 1.0;
    }
    float _2368;
    float _2370;
    float _2372;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2356 = fma(_2153, cbSceneParam._m0[63u].w, fma(_2149, cbSceneParam._m0[63u].z, fma(_2145, cbSceneParam._m0[63u].y, _2141 * cbSceneParam._m0[63u].x)));
        float _2357 = fma(_2153, cbSceneParam._m0[60u].w, fma(_2149, cbSceneParam._m0[60u].z, fma(_2145, cbSceneParam._m0[60u].y, _2141 * cbSceneParam._m0[60u].x))) / _2356;
        float _2358 = fma(_2153, cbSceneParam._m0[61u].w, fma(_2149, cbSceneParam._m0[61u].z, fma(_2145, cbSceneParam._m0[61u].y, _2141 * cbSceneParam._m0[61u].x))) / _2356;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2357 >= cbSceneParam._m0[64u].x) && (_2358 >= cbSceneParam._m0[64u].y)) && (_2357 <= cbSceneParam._m0[64u].z)) && (_2358 <= cbSceneParam._m0[64u].w))
        {
            float _2496 = fma(_2153, cbSceneParam._m0[62u].w, fma(_2149, cbSceneParam._m0[62u].z, fma(_2145, cbSceneParam._m0[62u].y, _2141 * cbSceneParam._m0[62u].x))) / _2356;
            float _2500 = isnan(cbSceneParam._m0[41u].w) ? _2496 : (isnan(_2496) ? cbSceneParam._m0[41u].w : max(_2496, cbSceneParam._m0[41u].w));
            float _2543 = (cbSceneParam._m0[33u].x - sqrt(((_2155 * _2155) + (_2154 * _2154)) + (_2156 * _2156))) * cbSceneParam._m0[33u].y;
            float _4719 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
            float _2550 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2357, cbSceneParam._m0[33u].w + _2358), _2500), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2357, _2358 - cbSceneParam._m0[33u].z), _2500), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2357 - cbSceneParam._m0[33u].z, _2358 - cbSceneParam._m0[33u].w), _2500), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2357 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2358), _2500), 0.0)).x), vec4(0.25)));
            float _2554 = 1.0 - (_2550 * cbSceneParam._m0[34u].x);
            float _2555 = 1.0 - (_2550 * cbSceneParam._m0[34u].y);
            float _2556 = 1.0 - (_2550 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2556) ? _2304 : (isnan(_2304) ? _2556 : min(_2304, _2556));
            frontier_phi_39_38_ladder_1 = isnan(_2555) ? _2303 : (isnan(_2303) ? _2555 : min(_2303, _2555));
            frontier_phi_39_38_ladder_2 = isnan(_2554) ? _2302 : (isnan(_2302) ? _2554 : min(_2302, _2554));
        }
        else
        {
            frontier_phi_39_38_ladder = _2304;
            frontier_phi_39_38_ladder_1 = _2303;
            frontier_phi_39_38_ladder_2 = _2302;
        }
        _2368 = frontier_phi_39_38_ladder_2;
        _2370 = frontier_phi_39_38_ladder_1;
        _2372 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2368 = _2302;
        _2370 = _2303;
        _2372 = _2304;
    }
    uvec4 _2377 = floatBitsToUint(cbInstanceData._m0[_1018 + 5u]);
    uint _2379 = _2377.x * 14u;
    uint _2380 = _2379 + 13u;
    float _2387 = _1058 + (-1.0);
    float _2392 = (cbLight._m0[_2380].x * _2387) + 1.0;
    float _2393 = (cbLight._m0[_2380].y * _2387) + 1.0;
    float _2394 = (cbLight._m0[_2380].z * _2387) + 1.0;
    float _2395 = (cbLight._m0[_2380].w * _2387) + 1.0;
    uint _2396 = _2379 + 5u;
    float _2402 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
    uint _2406 = _2379 + 4u;
    float _2415 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
    uint _2419 = _2379 | 1u;
    float _2430 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_878, _879, _880));
    float _2433 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_878, _879, _880));
    float _4755 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _4766 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2438 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * 0.3183098733425140380859375;
    float _2440 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * 0.3183098733425140380859375;
    float _2447 = ((cbLight._m0[_2396].x * _2402) * _2440) + (((cbLight._m0[_2406].x * _2368) * _2415) * _2438);
    float _2448 = ((_2402 * cbLight._m0[_2396].y) * _2440) + (((cbLight._m0[_2406].y * _2370) * _2415) * _2438);
    float _2449 = ((_2402 * cbLight._m0[_2396].z) * _2440) + (((cbLight._m0[_2406].z * _2372) * _2415) * _2438);
    uvec4 _2453 = floatBitsToUint(cbLight._m0[_2379 + 12u]);
    bool _2455 = _2453.x == 0u;
    float _2557;
    float _2559;
    float _2561;
    if (_2455)
    {
        _2557 = _2447;
        _2559 = _2448;
        _2561 = _2449;
    }
    else
    {
        uint _2565 = _2379 + 6u;
        float _2581 = (dot(vec3(cbLight._m0[_2379 + 2u].xyz), vec3(_878, _879, _880)) * 0.5) + 0.5;
        float _2582 = _2581 * _2581;
        float _4777 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2583 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2584 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2557 = (((cbLight._m0[_2565].x * 0.3183098733425140380859375) * _2583) * _2584) + _2447;
        _2559 = (((cbLight._m0[_2565].y * 0.3183098733425140380859375) * _2583) * _2584) + _2448;
        _2561 = (((cbLight._m0[_2565].z * 0.3183098733425140380859375) * _2583) * _2584) + _2449;
    }
    bool _2564 = _2453.y == 0u;
    float _2619;
    float _2621;
    float _2623;
    if (_2564)
    {
        _2619 = _2557;
        _2621 = _2559;
        _2623 = _2561;
    }
    else
    {
        uint _2792 = _2379 + 7u;
        float _2808 = (dot(vec3(cbLight._m0[_2379 + 3u].xyz), vec3(_878, _879, _880)) * 0.5) + 0.5;
        float _2809 = _2808 * _2808;
        float _4793 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2810 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2811 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2619 = (((cbLight._m0[_2792].x * 0.3183098733425140380859375) * _2810) * _2811) + _2557;
        _2621 = (((cbLight._m0[_2792].y * 0.3183098733425140380859375) * _2810) * _2811) + _2559;
        _2623 = (((cbLight._m0[_2792].z * 0.3183098733425140380859375) * _2810) * _2811) + _2561;
    }
    uint _2626 = _2379 + 8u;
    float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _881) * 0.949999988079071044921875);
    float _2640 = _2639 * _2639;
    float _2641 = cbLight._m0[_2379].x + _963;
    float _2642 = cbLight._m0[_2379].y + _964;
    float _2643 = cbLight._m0[_2379].z + _965;
    float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
    float _2648 = _2647 * _2641;
    float _2649 = _2647 * _2642;
    float _2650 = _2647 * _2643;
    float _2651 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2379].xyz));
    float _4809 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    float _4820 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _2655 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2656 = dot(vec3(_878, _879, _880), vec3(_2648, _2649, _2650));
    float _4831 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2660 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2648, _2649, _2650));
    float _4842 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2664 = _2640 * _2640;
    float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
    float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0);
    float _2677 = 0.959999978542327880859375 - _1040;
    float _2679 = 0.959999978542327880859375 - _1041;
    float _2680 = 0.959999978542327880859375 - _1042;
    float _2687 = 1.0 - _2640;
    float _2698 = (0.5 / (((_2655 * ((_2654 * _2687) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _2687) + _2640) * _2654))) * _2654;
    float _4853 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2700 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
    uint _2714 = _2379 + 9u;
    float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _881) * 0.949999988079071044921875);
    float _2726 = _2725 * _2725;
    float _2727 = cbLight._m0[_2419].x + _963;
    float _2728 = cbLight._m0[_2419].y + _964;
    float _2729 = cbLight._m0[_2419].z + _965;
    float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
    float _2734 = _2733 * _2727;
    float _2735 = _2733 * _2728;
    float _2736 = _2733 * _2729;
    float _2737 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2419].xyz));
    float _4864 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2740 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _2741 = dot(vec3(_878, _879, _880), vec3(_2734, _2735, _2736));
    float _4875 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2744 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _2745 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2734, _2735, _2736));
    float _4886 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2749 = _2726 * _2726;
    float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
    float _2760 = exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0);
    float _2767 = 1.0 - _2726;
    float _2777 = (0.5 / (((_2655 * ((_2740 * _2767) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _2767) + _2726) * _2740))) * _2740;
    float _4897 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2779 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
    float _2789 = (((((_2760 * _2677) + _1043) * cbLight._m0[_2714].x) * _2779) * _2402) + ((((cbLight._m0[_2626].x * _2368) * ((_2676 * _2677) + _1043)) * _2700) * _2415);
    float _2790 = (((((_2760 * _2679) + _1045) * cbLight._m0[_2714].y) * _2779) * _2402) + ((((cbLight._m0[_2626].y * _2370) * ((_2676 * _2679) + _1045)) * _2700) * _2415);
    float _2791 = (((((_2760 * _2680) + _1046) * cbLight._m0[_2714].z) * _2779) * _2402) + ((((cbLight._m0[_2626].z * _2372) * ((_2676 * _2680) + _1046)) * _2700) * _2415);
    float _2847;
    float _2849;
    float _2851;
    if (_2455)
    {
        _2847 = _2789;
        _2849 = _2790;
        _2851 = _2791;
    }
    else
    {
        uint _2853 = _2379 + 2u;
        uint _2857 = _2379 + 10u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _881) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _963;
        float _2874 = cbLight._m0[_2853].y + _964;
        float _2875 = cbLight._m0[_2853].z + _965;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2853].xyz));
        float _4908 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2887 = dot(vec3(_878, _879, _880), vec3(_2880, _2881, _2882));
        float _4919 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _4930 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2906 = exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0);
        float _2913 = 1.0 - _2872;
        float _2923 = (0.5 / (((_2655 * ((_2886 * _2913) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _2913) + _2872) * _2886))) * _2886;
        float _4941 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2925 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2926 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2847 = (((((_2906 * _2677) + _1043) * cbLight._m0[_2857].x) * _2925) * _2926) + _2789;
        _2849 = (((((_2906 * _2679) + _1045) * cbLight._m0[_2857].y) * _2925) * _2926) + _2790;
        _2851 = (((((_2906 * _2680) + _1046) * cbLight._m0[_2857].z) * _2925) * _2926) + _2791;
    }
    float _2957;
    float _2959;
    float _2961;
    if (_2564)
    {
        _2957 = _2847;
        _2959 = _2849;
        _2961 = _2851;
    }
    else
    {
        uint _2968 = _2379 + 3u;
        uint _2972 = _2379 + 11u;
        float _2986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2968].w)) * _881) * 0.949999988079071044921875);
        float _2987 = _2986 * _2986;
        float _2988 = cbLight._m0[_2968].x + _963;
        float _2989 = cbLight._m0[_2968].y + _964;
        float _2990 = cbLight._m0[_2968].z + _965;
        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
        float _2995 = _2994 * _2988;
        float _2996 = _2994 * _2989;
        float _2997 = _2994 * _2990;
        float _2998 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2968].xyz));
        float _4957 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        float _3001 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
        float _3002 = dot(vec3(_878, _879, _880), vec3(_2995, _2996, _2997));
        float _4968 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3005 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
        float _3006 = dot(vec3(cbLight._m0[_2968].xyz), vec3(_2995, _2996, _2997));
        float _4979 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3010 = _2987 * _2987;
        float _3014 = ((_3005 * _3005) * (_3010 + (-1.0))) + 1.0;
        float _3021 = exp2(log2(1.0 - (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) * 5.0);
        float _3028 = 1.0 - _2987;
        float _3038 = (0.5 / (((_2655 * ((_3001 * _3028) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _3028) + _2987) * _3001))) * _3001;
        float _4990 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        float _3040 = (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3010 / ((_3014 * _3014) * 3.141590118408203125));
        float _3041 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2957 = (((((_3021 * _2677) + _1043) * cbLight._m0[_2972].x) * _3040) * _3041) + _2847;
        _2959 = (((((_3021 * _2679) + _1045) * cbLight._m0[_2972].y) * _3040) * _3041) + _2849;
        _2961 = (((((_3021 * _2680) + _1046) * cbLight._m0[_2972].z) * _3040) * _3041) + _2851;
    }
    float _3107;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_2377.y == 0u)
    {
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.x;
        uint _3074 = uint((float(_3062.y) * floor(float(uint(cbSceneParam._m0[85u].y * _981) / _3063))) + floor(float(uint(cbSceneParam._m0[85u].x * _980) / _3063)));
        float _3084 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3085 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        uint _3088 = uint(isnan(14.0) ? _3085 : (isnan(_3085) ? 14.0 : min(_3085, 14.0)));
        uvec4 _3093 = texelFetch(g_lightClusterGridBuffer, int(((_3088 << 2u) + (_3074 << 6u)) >> 2u));
        uint _3094 = _3093.x;
        uint _3095 = _3062.z;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((((1u << ((_3095 >> 4u) & 15u)) + 4294967295u) & _3094) == 0u) || ((_3095 & 240u) == 0u))
        {
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
        }
        else
        {
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            uint _3370 = 0u;
            uint _3379;
            bool _3380;
            for (;;)
            {
                _3379 = texelFetch(g_lightClassification, int((((_3088 << 5u) + (_3074 << 9u)) + (_3370 << 2u)) >> 2u)).x;
                _3380 = _3379 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3380)
                {
                    frontier_phi_73_pred = _3369;
                    frontier_phi_73_pred_1 = _3368;
                    frontier_phi_73_pred_2 = _3367;
                    frontier_phi_73_pred_3 = _3366;
                    frontier_phi_73_pred_4 = _3365;
                    frontier_phi_73_pred_5 = _3364;
                }
                else
                {
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    uint _3515;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3379;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    for (;;)
                    {
                        uint _3519 = uint(findLSB(_3515)) + (_3370 << 5u);
                        uint _3516 = (_3515 + 4294967295u) & _3515;
                        uint _3521 = _3519 * 48u;
                        vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3521)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 3u)).x));
                        uint _3541 = (_3519 * 48u) + 4u;
                        vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3541)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 3u)).x));
                        uint _3560 = (_3519 * 48u) + 8u;
                        vec3 _3571 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3560)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 2u)).x));
                        float _3575 = _3535.x - _2154;
                        float _3576 = _3535.y - _2155;
                        float _3577 = _3535.z - _2156;
                        float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                        float _3581 = inversesqrt(_3578);
                        float _3582 = _3581 * _3575;
                        float _3583 = _3581 * _3576;
                        float _3584 = _3581 * _3577;
                        float _3585 = dot(vec3(_999, _1002, _1005), vec3(_3582, _3583, _3584));
                        float _3590 = 1.0 - (_3578 * _3535.w);
                        float _5016 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                        float _3592 = sqrt(_3578) * _3554.w;
                        float _3595 = 1.39999997615814208984375 / (_3592 + 1.39999997615814208984375);
                        float _3596 = _3595 * _3595;
                        float _3599 = ((1.0 - _3596) * _3585) + _3596;
                        float _3602 = _3592 * _3592;
                        float _3606 = ((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3591) / ((_3602 * 0.699999988079071044921875) + 1.0);
                        float _3610 = (-0.0) - _2154;
                        float _3611 = (-0.0) - _2155;
                        float _3612 = (-0.0) - _2156;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3617 = _3616 * _3610;
                        float _3618 = _3616 * _3611;
                        float _3619 = _3616 * _3612;
                        float _3626 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                        float _3627 = 1.0 - _1074;
                        float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                        float _3635 = _3634 * _3634;
                        float _3636 = _3635 * _3635;
                        float _3637 = _3617 + _3582;
                        float _3638 = _3618 + _3583;
                        float _3639 = _3619 + _3584;
                        float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                        float _3647 = dot(vec3(_999, _1002, _1005), vec3(_3617, _3618, _3619));
                        float _5032 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3650 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                        float _3651 = dot(vec3(_999, _1002, _1005), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                        float _5043 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3654 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                        float _3659 = _3595 * _3635;
                        float _3660 = _3659 * _3659;
                        float _3663 = ((1.0 - _3660) * _3585) + _3660;
                        float _5054 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3664 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                        float _3665 = 1.0 - _3635;
                        float _3675 = (0.5 / (((_3664 * ((_3650 * _3665) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3664 * _3665) + _3635) * _3650))) * _3664;
                        float _5065 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3686 = (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0)))) / ((_3658 * _3658) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125))) * _3591;
                        _3439 = (_3606 * _3554.x) + _3512;
                        _3440 = (_3606 * _3554.y) + _3513;
                        _3441 = (_3606 * _3554.z) + _3514;
                        _3436 = (_3686 * _3571.x) + _3509;
                        _3437 = (_3686 * _3571.y) + _3510;
                        _3438 = (_3686 * _3571.z) + _3511;
                        if (_3516 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3516;
                        }
                    }
                    frontier_phi_73_pred = _3441;
                    frontier_phi_73_pred_1 = _3440;
                    frontier_phi_73_pred_2 = _3439;
                    frontier_phi_73_pred_3 = _3438;
                    frontier_phi_73_pred_4 = _3437;
                    frontier_phi_73_pred_5 = _3436;
                }
                _3214 = frontier_phi_73_pred;
                _3212 = frontier_phi_73_pred_1;
                _3210 = frontier_phi_73_pred_2;
                _3208 = frontier_phi_73_pred_3;
                _3206 = frontier_phi_73_pred_4;
                _3204 = frontier_phi_73_pred_5;
                uint _3371 = _3370 + 1u;
                if (_3371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3364 = _3204;
                    _3365 = _3206;
                    _3366 = _3208;
                    _3367 = _3210;
                    _3368 = _3212;
                    _3369 = _3214;
                    _3370 = _3371;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
        }
        uvec4 _3217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3218 = _3217.z;
        uint _3220 = (_3218 >> 8u) & 15u;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        if (((4294967295u << _3220) & _3094) == 0u)
        {
            _3332 = _3203;
            _3334 = _3205;
            _3336 = _3207;
            _3338 = _3209;
            _3340 = _3211;
            _3342 = _3213;
        }
        else
        {
            float _3357 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _3358 = _3357 * _2154;
            float _3359 = _3357 * _2155;
            float _3360 = _3357 * _2156;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3220 < ((_3218 >> 12u) & 15u))
            {
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3341;
                float _3343;
                float _3492 = _3203;
                float _3493 = _3205;
                float _3494 = _3207;
                float _3495 = _3209;
                float _3496 = _3211;
                float _3497 = _3213;
                uint _3498 = _3220;
                uint _3507;
                bool _3508;
                for (;;)
                {
                    _3507 = texelFetch(g_lightClassification, int((((_3088 << 5u) + (_3074 << 9u)) + (_3498 << 2u)) >> 2u)).x;
                    _3508 = _3507 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3508)
                    {
                        frontier_phi_84_pred = _3497;
                        frontier_phi_84_pred_1 = _3496;
                        frontier_phi_84_pred_2 = _3495;
                        frontier_phi_84_pred_3 = _3494;
                        frontier_phi_84_pred_4 = _3493;
                        frontier_phi_84_pred_5 = _3492;
                    }
                    else
                    {
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        float _3718 = _3497;
                        uint _3719 = _3507;
                        uint _3720;
                        vec4 _3745;
                        float _3746;
                        vec4 _3761;
                        vec3 _3773;
                        vec4 _3788;
                        vec4 _3803;
                        float _3849;
                        bool _3850;
                        for (;;)
                        {
                            uint _3730 = ((_3498 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3719));
                            _3720 = (_3719 + 4294967295u) & _3719;
                            uint _3732 = _3730 * 40u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            _3746 = _3745.w;
                            uint _3748 = (_3730 * 40u) + 4u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3763 = (_3730 * 40u) + 8u;
                            _3773 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x));
                            uint _3775 = (_3730 * 40u) + 16u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            uint _3790 = (_3730 * 40u) + 20u;
                            _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3805 = (_3730 * 40u) + 24u;
                            vec4 _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3824 = (_3730 * 40u) + 28u;
                            vec4 _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            _3849 = fma(_2156, _3837.z, fma(_2155, _3837.y, _3837.x * _2154)) + _3837.w;
                            _3850 = !((fma(_2156, _3818.z, fma(_2155, _3818.y, _3818.x * _2154)) + _3818.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3850)
                            {
                                float _3877 = _3745.x - _2154;
                                float _3878 = _3745.y - _2155;
                                float _3879 = _3745.z - _2156;
                                float _3880 = dot(vec3(_3877, _3878, _3879), vec3(_3877, _3878, _3879));
                                float _3883 = inversesqrt(_3880);
                                float _3884 = _3883 * _3877;
                                float _3885 = _3883 * _3878;
                                float _3886 = _3883 * _3879;
                                float _3890 = 1.0 - (_3880 / (_3746 * _3746));
                                float _5076 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                                float _3895 = sqrt(_3880) * _3761.w;
                                float _3897 = 1.39999997615814208984375 / (_3895 + 1.39999997615814208984375);
                                float _3898 = _3897 * _3897;
                                float _3901 = ((1.0 - _3898) * dot(vec3(_3884, _3885, _3886), vec3(_999, _1002, _1005))) + _3898;
                                float _3904 = _3895 * _3895;
                                float _3908 = (fma(_2156, _3788.z, fma(_2155, _3788.y, _3788.x * _2154)) + _3788.w) / _3849;
                                float _3909 = (fma(_2156, _3803.z, fma(_2155, _3803.y, _3803.x * _2154)) + _3803.w) / _3849;
                                float _3913 = 1.0 - dot(vec2(_3908, _3909), vec2(_3908, _3909));
                                float _5092 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                                float _3915 = _3914 * (((isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0))) * _3891) / ((_3904 * 0.699999988079071044921875) + 1.0));
                                float _3927 = exp2(log2(1.0 / ((_3904 * 3.5) + 5.0)) * 0.25);
                                float _3928 = 1.0 - _1074;
                                float _3935 = sqrt(1.0 - ((1.0 - (_3928 * _3928)) * (1.0 - (_3927 * _3927))));
                                float _3936 = _3935 * _3935;
                                float _3937 = _3936 * _3936;
                                float _3938 = _3884 - _3358;
                                float _3939 = _3885 - _3359;
                                float _3940 = _3886 - _3360;
                                float _3944 = inversesqrt(dot(vec3(_3938, _3939, _3940), vec3(_3938, _3939, _3940)));
                                float _3948 = dot(vec3(_999, _1002, _1005), vec3((-0.0) - _3358, (-0.0) - _3359, (-0.0) - _3360));
                                float _5103 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3951 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3952 = dot(vec3(_999, _1002, _1005), vec3(_3944 * _3938, _3944 * _3939, _3944 * _3940));
                                float _5114 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3955 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                                float _3959 = ((_3955 * _3955) * (_3937 + (-1.0))) + 1.0;
                                float _3960 = _3897 * _3936;
                                float _3961 = _3960 * _3960;
                                float _3967 = ((1.0 - _3961) * dot(vec3(_999, _1002, _1005), vec3(_3884, _3885, _3886))) + _3961;
                                float _5125 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                                float _3968 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                                float _3969 = 1.0 - _3936;
                                float _3979 = (0.5 / (((_3968 * ((_3951 * _3969) + _3936)) + 9.9999999392252902907785028219223e-09) + (((_3968 * _3969) + _3936) * _3951))) * _3968;
                                float _5136 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3989 = (_3914 * _3891) * (((_3937 * 3.1415927410125732421875) * (isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0)))) / ((_3959 * _3959) * ((_3904 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3915 * _3761.z;
                                frontier_phi_90_pred_1 = _3915 * _3761.y;
                                frontier_phi_90_pred_2 = _3915 * _3761.x;
                                frontier_phi_90_pred_3 = _3989 * _3773.z;
                                frontier_phi_90_pred_4 = _3989 * _3773.y;
                                frontier_phi_90_pred_5 = _3989 * _3773.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3998 = frontier_phi_90_pred;
                            _3997 = frontier_phi_90_pred_1;
                            _3996 = frontier_phi_90_pred_2;
                            _3995 = frontier_phi_90_pred_3;
                            _3994 = frontier_phi_90_pred_4;
                            _3993 = frontier_phi_90_pred_5;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            _3702 = _3995 + _3715;
                            if (_3720 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3720;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3705;
                        frontier_phi_84_pred_1 = _3704;
                        frontier_phi_84_pred_2 = _3703;
                        frontier_phi_84_pred_3 = _3702;
                        frontier_phi_84_pred_4 = _3701;
                        frontier_phi_84_pred_5 = _3700;
                    }
                    _3343 = frontier_phi_84_pred;
                    _3341 = frontier_phi_84_pred_1;
                    _3339 = frontier_phi_84_pred_2;
                    _3337 = frontier_phi_84_pred_3;
                    _3335 = frontier_phi_84_pred_4;
                    _3333 = frontier_phi_84_pred_5;
                    uint _3499 = _3498 + 1u;
                    if (_3499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3492 = _3333;
                        _3493 = _3335;
                        _3494 = _3337;
                        _3495 = _3339;
                        _3496 = _3341;
                        _3497 = _3343;
                        _3498 = _3499;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3339;
                frontier_phi_65_66_ladder_1 = _3343;
                frontier_phi_65_66_ladder_2 = _3341;
                frontier_phi_65_66_ladder_3 = _3337;
                frontier_phi_65_66_ladder_4 = _3335;
                frontier_phi_65_66_ladder_5 = _3333;
            }
            else
            {
                frontier_phi_65_66_ladder = _3209;
                frontier_phi_65_66_ladder_1 = _3213;
                frontier_phi_65_66_ladder_2 = _3211;
                frontier_phi_65_66_ladder_3 = _3207;
                frontier_phi_65_66_ladder_4 = _3205;
                frontier_phi_65_66_ladder_5 = _3203;
            }
            _3332 = frontier_phi_65_66_ladder_5;
            _3334 = frontier_phi_65_66_ladder_4;
            _3336 = frontier_phi_65_66_ladder_3;
            _3338 = frontier_phi_65_66_ladder;
            _3340 = frontier_phi_65_66_ladder_2;
            _3342 = frontier_phi_65_66_ladder_1;
        }
        float _3347 = isnan(1.0) ? _1058 : (isnan(_1058) ? 1.0 : min(_1058, 1.0));
        _3107 = (_3347 * _3338) + _2619;
        _3109 = (_3347 * _3340) + _2621;
        _3111 = (_3347 * _3342) + _2623;
        _3113 = ((_3332 * _1043) * _3347) + _2957;
        _3115 = ((_3334 * _1045) * _3347) + _2959;
        _3117 = ((_3336 * _1046) * _3347) + _2961;
    }
    else
    {
        _3107 = _2619;
        _3109 = _2621;
        _3111 = _2623;
        _3113 = _2957;
        _3115 = _2959;
        _3117 = _2961;
    }
    uint _3123 = _1019 + uint(cbMatDynParam._m0[0u].w);
    float _3129 = ((((((_791.x - _786.x) * _769) + _786.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _715) * cbMtdParam._m0[20u].x)) * _724) * cbInstanceData._m0[_3123].x;
    float _3130 = ((((((_791.y - _786.y) * _769) + _786.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_704.y - _702) * _682) + _702)) * cbMtdParam._m0[20u].y)) * _724) * cbInstanceData._m0[_3123].y;
    float _3131 = ((((((_791.z - _786.z) * _769) + _786.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_704.z - _703) * _682) + _703)) * cbMtdParam._m0[20u].z)) * _724) * cbInstanceData._m0[_3123].z;
    float _5152 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _5163 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _5174 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _3148 = (((isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0))) * (_3107 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1058))) + ((_3113 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1887)) * cbPerFrame._m0[3u].x)) + _3129;
    float _3150 = (_3130 + ((_3115 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1887)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0))) * (_3109 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1058)));
    float _3152 = (_3131 + ((_3117 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1887)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0))) * (_3111 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1058)));
    float _3153 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
    float _3154 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
    float _3155 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
    float _3161 = cbMtdParam._m0[2u].x * _3129;
    float _3162 = cbMtdParam._m0[2u].y * _3130;
    float _3163 = cbMtdParam._m0[2u].z * _3131;
    float _5200 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3165 = isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0));
    uint _3166 = _1018 + 6u;
    float _3174 = _980 / cbSceneParam._m0[86u].x;
    float _3175 = _981 / cbSceneParam._m0[86u].y;
    vec4 _3189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, (log2((isnan(cbSceneParam._m0[77u].w) ? _905 : (isnan(_905) ? cbSceneParam._m0[77u].w : min(_905, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3191 = _3189.x;
    float _3192 = _3189.y;
    float _3193 = _3189.z;
    float _3194 = _3189.w;
    float _3265;
    float _3267;
    float _3269;
    float _3271;
    if (_905 > cbSceneParam._m0[78u].w)
    {
        float _3228 = isnan(_905) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _905 : min(cbSceneParam._m0[80u].w, _905));
        float _3229 = _3228 / _905;
        float _3240 = _3229 * _956;
        float _3241 = _957 * _3229;
        float _3242 = (-0.0) - _3241;
        float _3243 = _3229 * _958;
        float _3245 = (cbSceneParam._m0[77u].w * _3242) / _3228;
        float _3246 = _3245 + cbSceneParam._m0[79u].w;
        float _3247 = cbSceneParam._m0[79u].w - _3241;
        float _3253 = sqrt(((_3240 * _3240) + (_3241 * _3241)) + (_3243 * _3243));
        float _3256 = (1.0 - (cbSceneParam._m0[77u].w / _3228)) * _3253;
        float _3261 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3263 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3449;
        if (abs((_3242 - _3245) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3449 = ((((_3246 > 0.0) ? exp2(_3261 * _3246) : (2.0 - exp2(_3263 * _3246))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3256;
        }
        else
        {
            float _3393 = 1.0 / cbSceneParam._m0[80u].x;
            float _3394 = isnan(_3247) ? _3246 : (isnan(_3246) ? _3247 : max(_3246, _3247));
            float _3395 = isnan(_3247) ? _3246 : (isnan(_3246) ? _3247 : min(_3246, _3247));
            float _3404 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : min(_3394, 0.0));
            float _3405 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : min(_3395, 0.0));
            _3449 = ((abs(_3253 / _3242) * cbSceneParam._m0[80u].y) * ((((_3404 - _3405) * 2.0) - ((exp2(_3261 * (isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0)))) - exp2(_3261 * (isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))))) * _3393)) - ((exp2(_3263 * _3404) - exp2(_3263 * _3405)) * _3393))) + (_3256 * cbSceneParam._m0[80u].z);
        }
        vec4 _3451 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, 1.0), 0.0);
        float _3460 = exp2((_3449 * (-1.44269502162933349609375)) * (1.0 - _3451.w));
        float _3461 = log2(_3460);
        float _3477 = log2(_3194);
        _3265 = (exp2(_3477 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].x)) * _3451.x) / cbSceneParam._m0[78u].x)) + _3191;
        _3267 = (exp2(_3477 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].y)) * _3451.y) / cbSceneParam._m0[78u].y)) + _3192;
        _3269 = (exp2(_3477 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].z)) * _3451.z) / cbSceneParam._m0[78u].z)) + _3193;
        _3271 = _3460 * _3194;
    }
    else
    {
        _3265 = _3191;
        _3267 = _3192;
        _3269 = _3193;
        _3271 = _3194;
    }
    bool _3487;
    vec4 _3281;
    vec4 _3303;
    float _3305;
    float _3309;
    float _3310;
    float _3311;
    float _3314;
    float _3317;
    float _3320;
    float _3321;
    bool _3331;
    for (;;)
    {
        _3281 = cbMatDynParam._m0[0u];
        float _3283 = roundEven(_3281.y);
        bool _3284 = _3283 == 3.0;
        float _3285 = log2(_3271);
        float _3289 = exp2(_3285 * cbSceneParam._m0[78u].x);
        float _3290 = exp2(_3285 * cbSceneParam._m0[78u].y);
        float _3291 = exp2(_3285 * cbSceneParam._m0[78u].z);
        float _3292 = _3289 * _3153;
        float _3293 = _3290 * _3154;
        float _3294 = _3291 * _3155;
        float _3301 = _969 + (-0.5);
        _3303 = cbMtdParam._m0[1u];
        _3305 = _3303.y * _3301;
        float _3308 = (_3283 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3309 = _3308 * (_3284 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3265)));
        _3310 = _3308 * (_3284 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3267)));
        _3311 = _3308 * (_3284 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3269)));
        _3314 = ((_3161 * _3165) * _3289) * _3308;
        _3317 = ((_3162 * _3165) * _3290) * _3308;
        _3320 = ((_3163 * _3165) * _3291) * _3308;
        _3321 = _3301 * 0.999000012874603271484375;
        _3331 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3331)
        {
            if ((cbInstanceData._m0[_1018 + 7u].x + _3321) < 0.5)
            {
                _3487 = true;
                break;
            }
        }
        uint _3428 = _1019 + uint(_3281.w);
        if ((cbInstanceData._m0[_3428].w < 1.0) && ((cbInstanceData._m0[_3428].w + _3321) < 0.5))
        {
            _3487 = true;
            break;
        }
        if ((_3305 + 1.0) < _3303.x)
        {
            _3487 = true;
            break;
        }
        _3487 = false;
        break;
    }
    float _3691;
    if (_3487)
    {
        discard_state = true;
        _3691 = 0.0;
    }
    else
    {
        _3691 = cbInstanceData._m0[_3166].w;
    }
    SV_Target.x = _3309;
    SV_Target.y = _3310;
    SV_Target.z = _3311;
    SV_Target.w = _3691;
    SV_Target_1.x = _3314;
    SV_Target_1.y = _3317;
    SV_Target_1.z = _3320;
    SV_Target_1.w = cbInstanceData._m0[_3166].w;
    discard_exit();
}


