#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1469;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _263 = log2(0.0);
    float _265 = exp2(_263 * cbMtdParam._m0[24u].x);
    float _266 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _267 = isnan(1.0) ? _266 : (isnan(_266) ? 1.0 : min(_266, 1.0));
    vec4 _281 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _285 = _281.z;
    float _293 = exp2(log2(_285 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    vec4 _307 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _310 = _307.y;
    float _313 = (_307.x + (-0.02500000037252902984619140625)) * 8.0;
    float _317 = roundEven(5.0 - _313);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(4.0) ? _318 : (isnan(_318) ? 4.0 : min(_318, 4.0));
    float _332 = floor(_319);
    vec4 _335 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _332));
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[17u].x;
    _188[0u] = cbMtdParam._m0[17u].y;
    _189[0u] = cbMtdParam._m0[17u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[14u].x;
    _188[2u] = cbMtdParam._m0[14u].y;
    _189[2u] = cbMtdParam._m0[14u].z;
    _187[3u] = cbMtdParam._m0[13u].x;
    _188[3u] = cbMtdParam._m0[13u].y;
    _189[3u] = cbMtdParam._m0[13u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[18u].x;
    _188[5u] = cbMtdParam._m0[18u].y;
    _189[5u] = cbMtdParam._m0[18u].z;
    float _399 = roundEven(_313);
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    uint _402 = uint(int(isnan(5.0) ? _400 : (isnan(_400) ? 5.0 : min(_400, 5.0))));
    vec4 _432 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _443 = cbMtdParam._m0[9u].x * _432.x;
    float _444 = cbMtdParam._m0[9u].y * _432.y;
    float _445 = cbMtdParam._m0[9u].z * _432.z;
    float _452 = ((((((_187[_402] - cbMtdParam._m0[10u].x) * _310) + cbMtdParam._m0[10u].x) * _335.x) - _443) * _295) + _443;
    float _453 = ((((((_188[_402] - cbMtdParam._m0[10u].y) * _310) + cbMtdParam._m0[10u].y) * _335.y) - _444) * _295) + _444;
    float _454 = ((((((_189[_402] - cbMtdParam._m0[10u].z) * _310) + cbMtdParam._m0[10u].z) * _335.z) - _445) * _295) + _445;
    float _460 = exp2(log2(_281.w) * cbMtdParam._m0[24u].w);
    vec4 _473 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _493 = (((cbMtdParam._m0[16u].x * _473.x) - _452) * _460) + _452;
    float _494 = (((cbMtdParam._m0[16u].y * _473.y) - _453) * _460) + _453;
    float _495 = (((cbMtdParam._m0[16u].z * _473.z) - _454) * _460) + _454;
    vec4 _507 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _532 = (_253.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _507.x) - _493) * _267) + _493);
    float _534 = (_253.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _507.y) - _494) * _267) + _494);
    float _536 = (_253.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _507.z) - _495) * _267) + _495);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[30u].z;
    _183[0u] = cbMtdParam._m0[30u].w;
    _182[1u] = cbMtdParam._m0[32u].z;
    _183[1u] = cbMtdParam._m0[32u].w;
    _182[2u] = cbMtdParam._m0[32u].x;
    _183[2u] = cbMtdParam._m0[32u].y;
    _182[3u] = cbMtdParam._m0[31u].z;
    _183[3u] = cbMtdParam._m0[31u].w;
    _182[4u] = cbMtdParam._m0[31u].x;
    _183[4u] = cbMtdParam._m0[31u].y;
    float _573 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    uint _575 = uint(int(isnan(4.0) ? _573 : (isnan(_573) ? 4.0 : min(_573, 4.0))));
    float _582 = ((_183[_575] - cbMtdParam._m0[23u].z) * _295) + cbMtdParam._m0[23u].z;
    float _585 = ((cbMtdParam._m0[23u].w - _582) * _460) + _582;
    float _588 = ((cbMtdParam._m0[26u].y - _585) * _267) + _585;
    vec4 _603 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _332));
    vec4 _620 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _622 = _620.x;
    float _623 = _620.y;
    float _628 = cbMtdParam._m0[23u].x + _620.z;
    float _631 = (((_603.z + _182[_575]) - _628) * _295) + _628;
    vec4 _643 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _654 = (((_643.z - _631) + cbMtdParam._m0[30u].x) * _460) + _631;
    float _660 = ((((_285 * 2.0) * _654) - _654) * cbMtdParam._m0[25u].w) + _654;
    vec4 _672 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _683 = (((cbMtdParam._m0[24u].z + _672.z) - _660) * _267) + _660;
    float _696 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _719 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_696 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _696) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _723 = cbPerFrame._m0[22u].x * 2.0;
    float _724 = _723 * cbMtdParam._m0[28u].z;
    float _727 = (_719.x * 0.5) + (-0.25);
    float _730 = (_719.y * 0.5) + (-0.25);
    float _731 = _730 * cbMtdParam._m0[28u].y;
    float _733 = (-0.0) - (cbMtdParam._m0[28u].y * _727);
    float _735 = fract(_724);
    float _737 = fract(_724 + 0.5);
    float _749 = abs((_735 * 2.0) + (-1.0));
    vec4 _765 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_735 * _733) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_731 * _735) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _767 = _765.x;
    float _768 = _765.y;
    float _769 = _765.z;
    vec4 _770 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_737 * _733) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_731 * _737) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _781 = ((_770.x - _767) * _749) + _767;
    float _788 = exp2(log2(_781 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _789 = isnan(cbMtdParam._m0[29u].y) ? _788 : (isnan(_788) ? cbMtdParam._m0[29u].y : max(_788, cbMtdParam._m0[29u].y));
    float _790 = isnan(cbMtdParam._m0[29u].z) ? _789 : (isnan(_789) ? cbMtdParam._m0[29u].z : min(_789, cbMtdParam._m0[29u].z));
    float _814 = (cbMtdParam._m0[33u].x * _696) + TEXCOORD;
    float _815 = (cbMtdParam._m0[33u].y * _696) + TEXCOORD_1;
    float _818 = _723 * cbMtdParam._m0[27u].w;
    float _819 = _730 * cbMtdParam._m0[27u].z;
    float _821 = (-0.0) - (cbMtdParam._m0[27u].z * _727);
    float _822 = fract(_818);
    float _824 = fract(_818 + 0.5);
    float _835 = abs((_822 * 2.0) + (-1.0));
    vec4 _852 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_822 * _821) + _814) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_819 * _822) + _815) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _857 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_824 * _821) + _814) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_819 * _824) + _815) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _891 = ((_603.x - _622) * _295) + _622;
    float _892 = ((_603.y - _623) * _295) + _623;
    float _897 = ((_643.x - _891) * _460) + _891;
    float _898 = ((_643.y - _892) * _460) + _892;
    float _907 = ((((_672.x - _897) * _267) + _897) * 2.0) + (-1.0);
    float _908 = ((((_672.y - _898) * _267) + _898) * 2.0) + (-1.0);
    float _909 = dot(vec2(_907, _908), vec2(_907, _908));
    float _3889 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _914 = sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))));
    float _917 = (cbMtdParam._m0[26u].z * ((_281.x * 2.0) + (-1.0))) + _907;
    float _918 = (cbMtdParam._m0[26u].z * ((_281.y * 2.0) + (-1.0))) + _908;
    float _921 = fma(_914, _229 * NORMAL.x, fma(_918, _236 * TANGENT.x, (_222 * _214) * _917));
    float _924 = fma(_914, _229 * NORMAL.y, fma(_918, _236 * TANGENT.y, (_222 * _215) * _917));
    float _927 = fma(_914, _229 * NORMAL.z, fma(_918, _236 * TANGENT.z, (_222 * _216) * _917));
    float _931 = inversesqrt(dot(vec3(_921, _924, _927), vec3(_921, _924, _927)));
    float _932 = _931 * _921;
    float _933 = _931 * _924;
    float _934 = _931 * _927;
    float _3900 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _935 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3922 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3933 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3944 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _939 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _955 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1006 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _996);
    float _1007 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _996);
    float _1008 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _996);
    float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
    float _1013 = _1006 * _1012;
    float _1014 = _1007 * _1012;
    float _1015 = _1008 * _1012;
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_934, cbSceneParam._m0[5u].z, fma(_933, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _932));
    float _1043 = fma(_934, cbSceneParam._m0[6u].z, fma(_933, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _932));
    float _1046 = fma(_934, cbSceneParam._m0[7u].z, fma(_933, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _932));
    uint _1059 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1060 = _1059 + 9u;
    uint _1061 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _1067 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_1061].x;
    float _1068 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1061].y;
    float _1069 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1061].z;
    float _3955 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1073 = 1.0 - _939;
    float _1074 = _1070 * _1073;
    float _1075 = _1071 * _1073;
    float _1076 = _1072 * _1073;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _939;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _939;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _939;
    float _1084 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    vec4 _1096 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = _1096.x * TEXCOORD_3.w;
    float _1100 = dot(vec3(_932, _933, _934), vec3(_1013, _1014, _1015));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _932) - _1013;
    float _1108 = (_1103 * _933) - _1014;
    float _1109 = (_1103 * _934) - _1015;
    float _1113 = abs(dot(vec3(_1013, _1014, _1015), vec3(_932, _933, _934)));
    float _3988 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_935);
    float _1126 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1132 = (1.0 - _1126) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1133 = _1126 * _1115;
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1468;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1195 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1199 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1203 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1227 = _1161 + _932;
        float _1228 = _1165 + _933;
        float _1229 = _1169 + _934;
        float _1239 = fma(_1229, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227)) - _1195;
        float _1240 = fma(_1229, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227)) - _1199;
        float _1241 = fma(_1229, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227)) - _1203;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1257 = ((_1245 * _1239) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1195 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1245 * _1240) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1199 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1241) / cbModelParam._m0[34u].z) + ((((((_1203 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1296 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1262.x + (-0.5));
        float _1298 = _1296 * (_1262.y + (-0.5));
        float _1299 = _1296 * (_1262.z + (-0.5));
        float _1306 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1269.x + (-0.5));
        float _1308 = _1306 * (_1269.y + (-0.5));
        float _1309 = _1306 * (_1269.z + (-0.5));
        float _1316 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1276.x + (-0.5));
        float _1318 = _1316 * (_1276.y + (-0.5));
        float _1319 = _1316 * (_1276.z + (-0.5));
        float _1326 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1283.x + (-0.5));
        float _1328 = _1326 * (_1283.y + (-0.5));
        float _1329 = _1326 * (_1283.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1350 = (dot(vec3(_932, _933, _934), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1360 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4036 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1362 + 1.0))) + _1367) * _1330;
        float _1377 = _1298 * 0.5;
        float _1378 = _1308 * 0.5;
        float _1379 = _1318 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_932, _933, _934), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4069 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1404 + 1.0))) + _1409) * _1331;
        float _1419 = _1299 * 0.5;
        float _1420 = _1309 * 0.5;
        float _1421 = _1319 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_932, _933, _934), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4102 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1446 + 1.0))) + _1451) * _1332;
        _1468 = _1299;
        _1470 = _1298;
        _1471 = _1297;
        _1472 = _1309;
        _1473 = _1308;
        _1474 = _1307;
        _1475 = _1319;
        _1476 = _1318;
        _1477 = _1317;
        _1478 = _1332;
        _1479 = _1331;
        _1480 = _1330;
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1469;
        _1470 = _1469;
        _1471 = _1469;
        _1472 = _1469;
        _1473 = _1469;
        _1474 = _1469;
        _1475 = _1469;
        _1476 = _1469;
        _1477 = _1469;
        _1478 = _1469;
        _1479 = _1469;
        _1480 = _1469;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1506 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1510 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1514 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1537 = _1161 + _932;
        float _1538 = _1165 + _933;
        float _1539 = _1169 + _934;
        float _1549 = fma(_1539, cbModelParam._m0[30u].z, fma(_1538, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1537)) - _1506;
        float _1550 = fma(_1539, cbModelParam._m0[31u].z, fma(_1538, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1537)) - _1510;
        float _1551 = fma(_1539, cbModelParam._m0[32u].z, fma(_1538, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1537)) - _1514;
        float _1555 = inversesqrt(dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551)));
        float _1568 = ((_1555 * _1549) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1506 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1569 = ((_1555 * _1550) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1510 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1555 * _1551) / cbModelParam._m0[35u].z) + ((((((_1514 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        float _1605 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1572.x + (-0.5));
        float _1607 = _1605 * (_1572.y + (-0.5));
        float _1608 = _1605 * (_1572.z + (-0.5));
        float _1615 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1579.x + (-0.5));
        float _1617 = _1615 * (_1579.y + (-0.5));
        float _1618 = _1615 * (_1579.z + (-0.5));
        float _1625 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1586.x + (-0.5));
        float _1627 = _1625 * (_1586.y + (-0.5));
        float _1628 = _1625 * (_1586.z + (-0.5));
        float _1635 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1593.x + (-0.5));
        float _1637 = _1635 * (_1593.y + (-0.5));
        float _1638 = _1635 * (_1593.z + (-0.5));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = _1606 * 0.5;
        float _1643 = _1616 * 0.5;
        float _1644 = _1626 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_932, _933, _934), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4165 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1669 + 1.0))) + _1674) * _1639;
        float _1684 = _1607 * 0.5;
        float _1685 = _1617 * 0.5;
        float _1686 = _1627 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_932, _933, _934), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4198 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1711 + 1.0))) + _1716) * _1640;
        float _1726 = _1608 * 0.5;
        float _1727 = _1618 * 0.5;
        float _1728 = _1628 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_932, _933, _934), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4231 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1753 + 1.0))) + _1758) * _1641;
        _1775 = _1608;
        _1776 = _1607;
        _1777 = _1606;
        _1778 = _1618;
        _1779 = _1617;
        _1780 = _1616;
        _1781 = _1628;
        _1782 = _1627;
        _1783 = _1626;
        _1784 = _1641;
        _1785 = _1640;
        _1786 = _1639;
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
    }
    else
    {
        _1775 = _1469;
        _1776 = _1469;
        _1777 = _1469;
        _1778 = _1469;
        _1779 = _1469;
        _1780 = _1469;
        _1781 = _1469;
        _1782 = _1469;
        _1783 = _1469;
        _1784 = _1469;
        _1785 = _1469;
        _1786 = _1469;
        _1787 = 0.0;
        _1788 = 0.0;
        _1789 = 0.0;
    }
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1481)) + _1481;
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1482)) + _1482;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1483)) + _1483;
    float _1822 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1799 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1799 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1799));
    float _1843 = _1107 * 0.5;
    float _1844 = _1108 * 0.5;
    float _1845 = _1109 * 0.5;
    float _1846 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1849 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1852 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1886;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1859 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1468, _1472, _1475, _1478));
        float _1863 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1470, _1473, _1476, _1479));
        float _1867 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1471, _1474, _1477, _1480));
        float _1874 = dot(vec4(cbModelParam._m0[39u]), vec4(_1843, _1844, _1845, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1897;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1888 = dot(vec4(cbModelParam._m0[40u]), vec4(_1843, _1844, _1845, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1901 = (_1897 * cbModelParam._m0[1u].x) + (_1886 * (1.0 - cbModelParam._m0[1u].x));
    float _1911 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _935);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1911 : min(cbModelParam._m0[25u].z, _1911));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1959 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1963 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _1967 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _1970 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _1973 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _1976 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2004;
        if (_1970 > 0.0)
        {
            _2004 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2004 = frontier_phi_14_12_ladder;
        }
        float _2206;
        if (_1973 > 0.0)
        {
            _2206 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2206 = frontier_phi_23_19_ladder;
        }
        float _2460;
        if (_1976 > 0.0)
        {
            _2460 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2460 = frontier_phi_35_30_ladder;
        }
        float _2462 = isnan(_2206) ? _2004 : (isnan(_2004) ? _2206 : min(_2004, _2206));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1970) + _1959;
        float _2468 = (_2463 * _1973) + _1963;
        float _2469 = (_2463 * _1976) + _1967;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2470;
        float _2474 = _2470 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 > _2474) || ((_2468 < _2472) || ((_2467 < _2472) || (_2467 > _2474))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2469, cbModelParam._m0[9u].z, fma(_2468, cbModelParam._m0[9u].y, _2467 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2469, cbModelParam._m0[10u].z, fma(_2468, cbModelParam._m0[10u].y, _2467 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2469, cbModelParam._m0[11u].z, fma(_2468, cbModelParam._m0[11u].y, _2467 * cbModelParam._m0[11u].x))), _1912);
            frontier_phi_13_35_ladder = _2597.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2597.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2597.x * cbModelParam._m0[1u].y;
        }
        _1992 = frontier_phi_13_35_ladder_2;
        _1994 = frontier_phi_13_35_ladder_1;
        _1996 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1912);
        _1992 = _1980.x * cbModelParam._m0[1u].y;
        _1994 = _1980.y * cbModelParam._m0[1u].y;
        _1996 = _1980.z * cbModelParam._m0[1u].y;
    }
    float _2000 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _935);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2000 : min(cbModelParam._m0[25u].w, _2000));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2054 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2058 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2062 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2065 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2068 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2071 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2211;
        if (_2065 > 0.0)
        {
            _2211 = abs((1.0 - _2054) / _2065);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2054 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2211 = frontier_phi_25_21_ladder;
        }
        float _2487;
        if (_2068 > 0.0)
        {
            _2487 = abs((1.0 - _2058) / _2068);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2058 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2487 = frontier_phi_37_32_ladder;
        }
        float _2700;
        if (_2071 > 0.0)
        {
            _2700 = abs((1.0 - _2062) / _2071);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2062 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2700 = frontier_phi_46_43_ladder;
        }
        float _2702 = isnan(_2487) ? _2211 : (isnan(_2211) ? _2487 : min(_2211, _2487));
        float _2703 = isnan(_2700) ? _2702 : (isnan(_2702) ? _2700 : min(_2702, _2700));
        float _2707 = (_2703 * _2065) + _2054;
        float _2708 = (_2703 * _2068) + _2058;
        float _2709 = (_2703 * _2071) + _2062;
        float _2710 = _2703 * 9.9999997473787516355514526367188e-05;
        float _2711 = (-1.0) - _2710;
        float _2713 = _2710 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2709 > _2713) || ((_2709 < _2711) || ((_2708 > _2713) || ((_2708 < _2711) || ((_2707 < _2711) || (_2707 > _2713))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2709, cbModelParam._m0[17u].z, fma(_2708, cbModelParam._m0[17u].y, _2707 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2709, cbModelParam._m0[18u].z, fma(_2708, cbModelParam._m0[18u].y, _2707 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2709, cbModelParam._m0[19u].z, fma(_2708, cbModelParam._m0[19u].y, _2707 * cbModelParam._m0[19u].x))), _2001);
            frontier_phi_22_46_ladder = _2937.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2937.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2937.x * cbModelParam._m0[1u].z;
        }
        _2090 = frontier_phi_22_46_ladder_2;
        _2092 = frontier_phi_22_46_ladder_1;
        _2094 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2001);
        _2090 = _2074.x * cbModelParam._m0[1u].z;
        _2092 = _2074.y * cbModelParam._m0[1u].z;
        _2094 = _2074.z * cbModelParam._m0[1u].z;
    }
    float _2107 = (((_1132 * _1084) + _1133) * _1099) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2109 = (((_1132 * _1086) + _1133) * _1099) * ((cbModelParam._m0[1u].w * (_2092 - _1994)) + _1994);
    float _2111 = (((_1132 * _1087) + _1133) * _1099) * ((cbModelParam._m0[1u].w * (_2094 - _1996)) + _1996);
    float _2114 = fma(_2111, cbSceneParam._m0[89u].z, fma(_2109, cbSceneParam._m0[89u].y, _2107 * cbSceneParam._m0[89u].x));
    float _2117 = fma(_2111, cbSceneParam._m0[90u].z, fma(_2109, cbSceneParam._m0[90u].y, _2107 * cbSceneParam._m0[90u].x));
    float _2120 = fma(_2111, cbSceneParam._m0[91u].z, fma(_2109, cbSceneParam._m0[91u].y, _2107 * cbSceneParam._m0[91u].x));
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_1059 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2140 = _1099 + (-1.0);
    float _2145 = (cbLight._m0[_2133].x * _2140) + 1.0;
    float _2146 = (cbLight._m0[_2133].y * _2140) + 1.0;
    float _2147 = (cbLight._m0[_2133].z * _2140) + 1.0;
    float _2148 = (cbLight._m0[_2133].w * _2140) + 1.0;
    uint _2149 = _2132 + 5u;
    float _2155 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2159 = _2132 + 4u;
    float _2165 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2169 = _2132 | 1u;
    float _2180 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_932, _933, _934));
    float _2183 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_932, _933, _934));
    float _4367 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _4378 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2188 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2190 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2197 = ((cbLight._m0[_2149].x * _2155) * _2190) + ((cbLight._m0[_2159].x * _2165) * _2188);
    float _2198 = ((_2155 * cbLight._m0[_2149].y) * _2190) + ((_2165 * cbLight._m0[_2159].y) * _2188);
    float _2199 = ((_2155 * cbLight._m0[_2149].z) * _2190) + ((_2165 * cbLight._m0[_2159].z) * _2188);
    uvec4 _2203 = floatBitsToUint(cbLight._m0[_2132 + 12u]);
    bool _2205 = _2203.x == 0u;
    float _2216;
    float _2218;
    float _2220;
    if (_2205)
    {
        _2216 = _2197;
        _2218 = _2198;
        _2220 = _2199;
    }
    else
    {
        uint _2224 = _2132 + 6u;
        float _2240 = (dot(vec3(cbLight._m0[_2132 + 2u].xyz), vec3(_932, _933, _934)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4389 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2243 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2216 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2197;
        _2218 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2198;
        _2220 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2199;
    }
    bool _2223 = _2203.y == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2223)
    {
        _2261 = _2216;
        _2263 = _2218;
        _2265 = _2220;
    }
    else
    {
        uint _2431 = _2132 + 7u;
        float _2447 = (dot(vec3(cbLight._m0[_2132 + 3u].xyz), vec3(_932, _933, _934)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4405 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2450 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2261 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2216;
        _2263 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2218;
        _2265 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2220;
    }
    uint _2268 = _2132 + 8u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _935) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_2132].x + _1013;
    float _2284 = cbLight._m0[_2132].y + _1014;
    float _2285 = cbLight._m0[_2132].z + _1015;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2132].xyz));
    float _4421 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2297 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2298 = dot(vec3(_932, _933, _934), vec3(_2290, _2291, _2292));
    float _4443 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2290, _2291, _2292));
    float _4454 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2282 * _2282;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2319 = 0.959999978542327880859375 - _1081;
    float _2321 = 0.959999978542327880859375 - _1082;
    float _2322 = 0.959999978542327880859375 - _1083;
    float _2329 = 1.0 - _2282;
    float _2340 = (0.5 / (((_2297 * ((_2296 * _2329) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2329) + _2282) * _2296))) * _2296;
    float _4465 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    uint _2353 = _2132 + 9u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _935) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2169].x + _1013;
    float _2367 = cbLight._m0[_2169].y + _1014;
    float _2368 = cbLight._m0[_2169].z + _1015;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2169].xyz));
    float _4476 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2380 = dot(vec3(_932, _933, _934), vec3(_2373, _2374, _2375));
    float _4487 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2373, _2374, _2375));
    float _4498 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2365 * _2365;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2406 = 1.0 - _2365;
    float _2416 = (0.5 / (((_2297 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2406) + _2365) * _2379))) * _2379;
    float _4509 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    float _2428 = (((((_2399 * _2319) + _1084) * cbLight._m0[_2353].x) * _2418) * _2155) + (((((_2318 * _2319) + _1084) * cbLight._m0[_2268].x) * _2342) * _2165);
    float _2429 = (((((_2399 * _2321) + _1086) * cbLight._m0[_2353].y) * _2418) * _2155) + (((((_2318 * _2321) + _1086) * cbLight._m0[_2268].y) * _2342) * _2165);
    float _2430 = (((((_2399 * _2322) + _1087) * cbLight._m0[_2353].z) * _2418) * _2155) + (((((_2318 * _2322) + _1087) * cbLight._m0[_2268].z) * _2342) * _2165);
    float _2492;
    float _2494;
    float _2496;
    if (_2205)
    {
        _2492 = _2428;
        _2494 = _2429;
        _2496 = _2430;
    }
    else
    {
        uint _2498 = _2132 + 2u;
        uint _2502 = _2132 + 10u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _935) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _1013;
        float _2519 = cbLight._m0[_2498].y + _1014;
        float _2520 = cbLight._m0[_2498].z + _1015;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2498].xyz));
        float _4520 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2532 = dot(vec3(_932, _933, _934), vec3(_2525, _2526, _2527));
        float _4531 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4542 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2558 = 1.0 - _2517;
        float _2568 = (0.5 / (((_2297 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2558) + _2517) * _2531))) * _2531;
        float _4553 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2492 = (((((_2551 * _2319) + _1084) * cbLight._m0[_2502].x) * _2570) * _2571) + _2428;
        _2494 = (((((_2551 * _2321) + _1086) * cbLight._m0[_2502].y) * _2570) * _2571) + _2429;
        _2496 = (((((_2551 * _2322) + _1087) * cbLight._m0[_2502].z) * _2570) * _2571) + _2430;
    }
    float _2606;
    float _2608;
    float _2610;
    if (_2223)
    {
        _2606 = _2492;
        _2608 = _2494;
        _2610 = _2496;
    }
    else
    {
        uint _2617 = _2132 + 3u;
        uint _2621 = _2132 + 11u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _935) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _1013;
        float _2638 = cbLight._m0[_2617].y + _1014;
        float _2639 = cbLight._m0[_2617].z + _1015;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2617].xyz));
        float _4569 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2651 = dot(vec3(_932, _933, _934), vec3(_2644, _2645, _2646));
        float _4580 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4591 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2677 = 1.0 - _2636;
        float _2687 = (0.5 / (((_2297 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2677) + _2636) * _2650))) * _2650;
        float _4602 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2606 = (((((_2670 * _2319) + _1084) * cbLight._m0[_2621].x) * _2689) * _2690) + _2492;
        _2608 = (((((_2670 * _2321) + _1086) * cbLight._m0[_2621].y) * _2689) * _2690) + _2494;
        _2610 = (((((_2670 * _2322) + _1087) * cbLight._m0[_2621].z) * _2689) * _2690) + _2496;
    }
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_2130.y == 0u)
    {
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2765;
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2765;
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2765;
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.x;
        uint _2792 = uint((float(_2780.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _2781))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _2781)));
        float _2802 = (log2(_2768 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2803 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        uint _2806 = uint(isnan(14.0) ? _2803 : (isnan(_2803) ? 14.0 : min(_2803, 14.0)));
        uvec4 _2811 = texelFetch(g_lightClusterGridBuffer, int(((_2806 << 2u) + (_2792 << 6u)) >> 2u));
        uint _2812 = _2811.x;
        uint _2813 = _2780.z;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        if (((((1u << ((_2813 >> 4u) & 15u)) + 4294967295u) & _2812) == 0u) || ((_2813 & 240u) == 0u))
        {
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
        }
        else
        {
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            uint _3101 = 0u;
            uint _3110;
            bool _3111;
            for (;;)
            {
                _3110 = texelFetch(g_lightClassification, int((((_2806 << 5u) + (_2792 << 9u)) + (_3101 << 2u)) >> 2u)).x;
                _3111 = _3110 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3111)
                {
                    frontier_phi_61_pred = _3095;
                    frontier_phi_61_pred_1 = _3100;
                    frontier_phi_61_pred_2 = _3099;
                    frontier_phi_61_pred_3 = _3098;
                    frontier_phi_61_pred_4 = _3097;
                    frontier_phi_61_pred_5 = _3096;
                }
                else
                {
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    uint _3225;
                    _3219 = _3095;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3110;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    for (;;)
                    {
                        uint _3229 = uint(findLSB(_3225)) + (_3101 << 5u);
                        uint _3226 = (_3225 + 4294967295u) & _3225;
                        uint _3231 = _3229 * 48u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3251 = (_3229 * 48u) + 4u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3270 = (_3229 * 48u) + 8u;
                        vec3 _3281 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x));
                        float _3285 = _3245.x - _2766;
                        float _3286 = _3245.y - _2767;
                        float _3287 = _3245.z - _2768;
                        float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                        float _3291 = inversesqrt(_3288);
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3295 = dot(vec3(_1040, _1043, _1046), vec3(_3292, _3293, _3294));
                        float _3300 = 1.0 - (_3288 * _3245.w);
                        float _4628 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3302 = sqrt(_3288) * _3264.w;
                        float _3305 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3295) + _3306;
                        float _3312 = _3302 * _3302;
                        float _3316 = ((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3301) / ((_3312 * 0.699999988079071044921875) + 1.0);
                        float _3320 = (-0.0) - _2766;
                        float _3321 = (-0.0) - _2767;
                        float _3322 = (-0.0) - _2768;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3337 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _1115;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3327 + _3292;
                        float _3349 = _3328 + _3293;
                        float _3350 = _3329 + _3294;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_1040, _1043, _1046), vec3(_3327, _3328, _3329));
                        float _4644 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3362 = dot(vec3(_1040, _1043, _1046), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4655 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3305 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3295) + _3371;
                        float _4666 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4677 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3369 * _3369) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125))) * _3301;
                        _3154 = (_3316 * _3264.x) + _3222;
                        _3155 = (_3316 * _3264.y) + _3223;
                        _3156 = (_3316 * _3264.z) + _3224;
                        _3151 = (_3397 * _3281.x) + _3219;
                        _3152 = (_3397 * _3281.y) + _3220;
                        _3153 = (_3397 * _3281.z) + _3221;
                        if (_3226 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3219 = _3151;
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3226;
                        }
                    }
                    frontier_phi_61_pred = _3151;
                    frontier_phi_61_pred_1 = _3156;
                    frontier_phi_61_pred_2 = _3155;
                    frontier_phi_61_pred_3 = _3154;
                    frontier_phi_61_pred_4 = _3153;
                    frontier_phi_61_pred_5 = _3152;
                }
                _2943 = frontier_phi_61_pred;
                _2953 = frontier_phi_61_pred_1;
                _2951 = frontier_phi_61_pred_2;
                _2949 = frontier_phi_61_pred_3;
                _2947 = frontier_phi_61_pred_4;
                _2945 = frontier_phi_61_pred_5;
                uint _3102 = _3101 + 1u;
                if (_3102 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3095 = _2943;
                    _3096 = _2945;
                    _3097 = _2947;
                    _3098 = _2949;
                    _3099 = _2951;
                    _3100 = _2953;
                    _3101 = _3102;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
        }
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.z;
        uint _2959 = (_2957 >> 8u) & 15u;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((4294967295u << _2959) & _2812) == 0u)
        {
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
        }
        else
        {
            float _3088 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
            float _3089 = _3088 * _2766;
            float _3090 = _3088 * _2767;
            float _3091 = _3088 * _2768;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2959 < ((_2957 >> 12u) & 15u))
            {
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3202 = _2942;
                float _3203 = _2944;
                float _3204 = _2946;
                float _3205 = _2948;
                float _3206 = _2950;
                float _3207 = _2952;
                uint _3208 = _2959;
                uint _3217;
                bool _3218;
                for (;;)
                {
                    _3217 = texelFetch(g_lightClassification, int((((_2806 << 5u) + (_2792 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                    _3218 = _3217 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3218)
                    {
                        frontier_phi_67_pred = _3205;
                        frontier_phi_67_pred_1 = _3206;
                        frontier_phi_67_pred_2 = _3207;
                        frontier_phi_67_pred_3 = _3204;
                        frontier_phi_67_pred_4 = _3203;
                        frontier_phi_67_pred_5 = _3202;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3415 = _3202;
                        float _3416 = _3203;
                        float _3417 = _3204;
                        float _3418 = _3205;
                        float _3419 = _3206;
                        float _3420 = _3207;
                        uint _3421 = _3217;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3505;
                        float _3551;
                        bool _3552;
                        for (;;)
                        {
                            uint _3432 = ((_3208 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3432 * 40u) + 20u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3432 * 40u) + 24u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3526 = (_3432 * 40u) + 28u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3551 = fma(_2768, _3539.z, fma(_2767, _3539.y, _3539.x * _2766)) + _3539.w;
                            _3552 = !((fma(_2768, _3520.z, fma(_2767, _3520.y, _3520.x * _2766)) + _3520.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3552)
                            {
                                float _3579 = _3447.x - _2766;
                                float _3580 = _3447.y - _2767;
                                float _3581 = _3447.z - _2768;
                                float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                                float _3585 = inversesqrt(_3582);
                                float _3586 = _3585 * _3579;
                                float _3587 = _3585 * _3580;
                                float _3588 = _3585 * _3581;
                                float _3592 = 1.0 - (_3582 / (_3448 * _3448));
                                float _4688 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3597 = sqrt(_3582) * _3463.w;
                                float _3599 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                                float _3600 = _3599 * _3599;
                                float _3603 = ((1.0 - _3600) * dot(vec3(_3586, _3587, _3588), vec3(_1040, _1043, _1046))) + _3600;
                                float _3606 = _3597 * _3597;
                                float _3610 = (fma(_2768, _3490.z, fma(_2767, _3490.y, _3490.x * _2766)) + _3490.w) / _3551;
                                float _3611 = (fma(_2768, _3505.z, fma(_2767, _3505.y, _3505.x * _2766)) + _3505.w) / _3551;
                                float _3615 = 1.0 - dot(vec2(_3610, _3611), vec2(_3610, _3611));
                                float _4704 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3617 = _3616 * (((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3593) / ((_3606 * 0.699999988079071044921875) + 1.0));
                                float _3629 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                                float _3630 = 1.0 - _1115;
                                float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                                float _3638 = _3637 * _3637;
                                float _3639 = _3638 * _3638;
                                float _3640 = _3586 - _3089;
                                float _3641 = _3587 - _3090;
                                float _3642 = _3588 - _3091;
                                float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                                float _3650 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3089, (-0.0) - _3090, (-0.0) - _3091));
                                float _4715 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3654 = dot(vec3(_1040, _1043, _1046), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                                float _4726 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                                float _3662 = _3599 * _3638;
                                float _3663 = _3662 * _3662;
                                float _3669 = ((1.0 - _3663) * dot(vec3(_1040, _1043, _1046), vec3(_3586, _3587, _3588))) + _3663;
                                float _4737 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3671 = 1.0 - _3638;
                                float _3681 = (0.5 / (((_3670 * ((_3653 * _3671) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3638) * _3653))) * _3670;
                                float _4748 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3691 = (_3616 * _3593) * (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3661 * _3661) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3691 * _3475.x;
                                frontier_phi_73_pred_1 = _3691 * _3475.y;
                                frontier_phi_73_pred_2 = _3617 * _3463.z;
                                frontier_phi_73_pred_3 = _3617 * _3463.y;
                                frontier_phi_73_pred_4 = _3617 * _3463.x;
                                frontier_phi_73_pred_5 = _3691 * _3475.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3695 = frontier_phi_73_pred;
                            _3696 = frontier_phi_73_pred_1;
                            _3700 = frontier_phi_73_pred_2;
                            _3699 = frontier_phi_73_pred_3;
                            _3698 = frontier_phi_73_pred_4;
                            _3697 = frontier_phi_73_pred_5;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3405;
                        frontier_phi_67_pred_1 = _3406;
                        frontier_phi_67_pred_2 = _3407;
                        frontier_phi_67_pred_3 = _3404;
                        frontier_phi_67_pred_4 = _3403;
                        frontier_phi_67_pred_5 = _3402;
                    }
                    _3070 = frontier_phi_67_pred;
                    _3072 = frontier_phi_67_pred_1;
                    _3074 = frontier_phi_67_pred_2;
                    _3068 = frontier_phi_67_pred_3;
                    _3066 = frontier_phi_67_pred_4;
                    _3064 = frontier_phi_67_pred_5;
                    uint _3209 = _3208 + 1u;
                    if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3202 = _3064;
                        _3203 = _3066;
                        _3204 = _3068;
                        _3205 = _3070;
                        _3206 = _3072;
                        _3207 = _3074;
                        _3208 = _3209;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3072;
                frontier_phi_55_56_ladder_1 = _3074;
                frontier_phi_55_56_ladder_2 = _3070;
                frontier_phi_55_56_ladder_3 = _3068;
                frontier_phi_55_56_ladder_4 = _3066;
                frontier_phi_55_56_ladder_5 = _3064;
            }
            else
            {
                frontier_phi_55_56_ladder = _2950;
                frontier_phi_55_56_ladder_1 = _2952;
                frontier_phi_55_56_ladder_2 = _2948;
                frontier_phi_55_56_ladder_3 = _2946;
                frontier_phi_55_56_ladder_4 = _2944;
                frontier_phi_55_56_ladder_5 = _2942;
            }
            _3063 = frontier_phi_55_56_ladder_5;
            _3065 = frontier_phi_55_56_ladder_4;
            _3067 = frontier_phi_55_56_ladder_3;
            _3069 = frontier_phi_55_56_ladder_2;
            _3071 = frontier_phi_55_56_ladder;
            _3073 = frontier_phi_55_56_ladder_1;
        }
        float _3078 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _2825 = (_3078 * _3069) + _2261;
        _2827 = (_3078 * _3071) + _2263;
        _2829 = (_3078 * _3073) + _2265;
        _2831 = ((_3063 * _1084) * _3078) + _2606;
        _2833 = ((_3065 * _1086) * _3078) + _2608;
        _2835 = ((_3067 * _1087) * _3078) + _2610;
    }
    else
    {
        _2825 = _2261;
        _2827 = _2263;
        _2829 = _2265;
        _2831 = _2606;
        _2833 = _2608;
        _2835 = _2610;
    }
    uint _2841 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _2847 = ((((((_857.x - _852.x) * _835) + _852.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _781) * cbMtdParam._m0[20u].x)) * _790) * cbInstanceData._m0[_2841].x;
    float _2848 = ((((((_857.y - _852.y) * _835) + _852.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_770.y - _768) * _749) + _768)) * cbMtdParam._m0[20u].y)) * _790) * cbInstanceData._m0[_2841].y;
    float _2849 = ((((((_857.z - _852.z) * _835) + _852.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_770.z - _769) * _749) + _769)) * cbMtdParam._m0[20u].z)) * _790) * cbInstanceData._m0[_2841].z;
    float _4764 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4775 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _4786 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2866 = (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2825 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1099))) + ((_2831 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1901)) * cbPerFrame._m0[3u].x)) + _2847;
    float _2868 = (_2848 + ((_2833 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1901)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2827 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1099)));
    float _2870 = (_2849 + ((_2835 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1901)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2829 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1099)));
    float _4812 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2883 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    uint _2884 = _1059 + 6u;
    float _2892 = _1021 / cbSceneParam._m0[86u].x;
    float _2893 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _2907 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, (log2((isnan(cbSceneParam._m0[77u].w) ? _955 : (isnan(_955) ? cbSceneParam._m0[77u].w : min(_955, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2909 = _2907.x;
    float _2910 = _2907.y;
    float _2911 = _2907.z;
    float _2912 = _2907.w;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_955 > cbSceneParam._m0[78u].w)
    {
        float _2967 = isnan(_955) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _955 : min(cbSceneParam._m0[80u].w, _955));
        float _2968 = _2967 / _955;
        float _2979 = _2968 * _1006;
        float _2980 = _1007 * _2968;
        float _2981 = (-0.0) - _2980;
        float _2982 = _2968 * _1008;
        float _2984 = (cbSceneParam._m0[77u].w * _2981) / _2967;
        float _2985 = _2984 + cbSceneParam._m0[79u].w;
        float _2986 = cbSceneParam._m0[79u].w - _2980;
        float _2992 = sqrt(((_2979 * _2979) + (_2980 * _2980)) + (_2982 * _2982));
        float _2995 = (1.0 - (cbSceneParam._m0[77u].w / _2967)) * _2992;
        float _3000 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3002 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3164;
        if (abs((_2981 - _2984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3164 = ((((_2985 > 0.0) ? exp2(_3000 * _2985) : (2.0 - exp2(_3002 * _2985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2995;
        }
        else
        {
            float _3124 = 1.0 / cbSceneParam._m0[80u].x;
            float _3125 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : max(_2985, _2986));
            float _3126 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : min(_2985, _2986));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            _3164 = ((abs(_2992 / _2981) * cbSceneParam._m0[80u].y) * ((((_3135 - _3136) * 2.0) - ((exp2(_3000 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)))) - exp2(_3000 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))))) * _3124)) - ((exp2(_3002 * _3135) - exp2(_3002 * _3136)) * _3124))) + (_2995 * cbSceneParam._m0[80u].z);
        }
        vec4 _3166 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, 1.0), 0.0);
        float _3175 = exp2((_3164 * (-1.44269502162933349609375)) * (1.0 - _3166.w));
        float _3176 = log2(_3175);
        float _3192 = log2(_2912);
        _3004 = (exp2(_3192 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].x)) * _3166.x) / cbSceneParam._m0[78u].x)) + _2909;
        _3006 = (exp2(_3192 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].y)) * _3166.y) / cbSceneParam._m0[78u].y)) + _2910;
        _3008 = (exp2(_3192 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].z)) * _3166.z) / cbSceneParam._m0[78u].z)) + _2911;
        _3010 = _3175 * _2912;
    }
    else
    {
        _3004 = _2909;
        _3006 = _2910;
        _3008 = _2911;
        _3010 = _2912;
    }
    float _3022 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3023 = _3022 == 3.0;
    float _3024 = log2(_3010);
    float _3028 = exp2(_3024 * cbSceneParam._m0[78u].x);
    float _3029 = exp2(_3024 * cbSceneParam._m0[78u].y);
    float _3030 = exp2(_3024 * cbSceneParam._m0[78u].z);
    float _3031 = _3028 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)));
    float _3032 = _3029 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)));
    float _3033 = _3030 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0)));
    float _3042 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3042 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.y = _3042 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.z = _3042 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.w = cbInstanceData._m0[_2884].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2847) * _2883) * _3028) * _3042;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2848) * _2883) * _3029) * _3042;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2849) * _2883) * _3030) * _3042;
    SV_Target_1.w = cbInstanceData._m0[_2884].w;
}


