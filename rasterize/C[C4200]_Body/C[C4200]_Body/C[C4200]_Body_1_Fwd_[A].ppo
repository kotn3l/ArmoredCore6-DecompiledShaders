#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1456;
float _3870;
float _3871;
float _3872;
float _3873;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _269 = exp2(log2(_255.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _270 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _271 = isnan(1.0) ? _270 : (isnan(_270) ? 1.0 : min(_270, 1.0));
    vec4 _285 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _289 = _285.z;
    float _297 = exp2(log2(_289 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _320 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(4.0) ? _321 : (isnan(_321) ? 4.0 : min(_321, 4.0));
    float _335 = floor(_322);
    vec4 _338 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _335));
    vec4 _363 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _374 = cbMtdParam._m0[9u].x * _363.x;
    float _375 = cbMtdParam._m0[9u].y * _363.y;
    float _376 = cbMtdParam._m0[9u].z * _363.z;
    float _383 = (((cbMtdParam._m0[10u].x * _338.x) - _374) * _299) + _374;
    float _384 = (((cbMtdParam._m0[10u].y * _338.y) - _375) * _299) + _375;
    float _385 = (((cbMtdParam._m0[10u].z * _338.z) - _376) * _299) + _376;
    float _391 = exp2(log2(_285.w) * cbMtdParam._m0[24u].w);
    vec4 _404 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _424 = (((cbMtdParam._m0[16u].x * _404.x) - _383) * _391) + _383;
    float _425 = (((cbMtdParam._m0[16u].y * _404.y) - _384) * _391) + _384;
    float _426 = (((cbMtdParam._m0[16u].z * _404.z) - _385) * _391) + _385;
    vec4 _439 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _464 = (_255.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _439.x) - _424) * _271) + _424);
    float _466 = (_255.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _439.y) - _425) * _271) + _425);
    float _468 = (_255.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _439.z) - _426) * _271) + _426);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[30u].z;
    _187[0u] = cbMtdParam._m0[30u].w;
    _186[1u] = cbMtdParam._m0[32u].z;
    _187[1u] = cbMtdParam._m0[32u].w;
    _186[2u] = cbMtdParam._m0[32u].x;
    _187[2u] = cbMtdParam._m0[32u].y;
    _186[3u] = cbMtdParam._m0[31u].z;
    _187[3u] = cbMtdParam._m0[31u].w;
    _186[4u] = cbMtdParam._m0[31u].x;
    _187[4u] = cbMtdParam._m0[31u].y;
    float _506 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    uint _508 = uint(int(isnan(4.0) ? _506 : (isnan(_506) ? 4.0 : min(_506, 4.0))));
    float _515 = ((_187[_508] - cbMtdParam._m0[23u].z) * _299) + cbMtdParam._m0[23u].z;
    float _518 = ((cbMtdParam._m0[23u].w - _515) * _391) + _515;
    float _521 = ((cbMtdParam._m0[26u].y - _518) * _271) + _518;
    vec4 _536 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _335));
    vec4 _554 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _562 = cbMtdParam._m0[23u].x + _554.z;
    float _565 = (((_536.z + _186[_508]) - _562) * _299) + _562;
    vec4 _577 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _588 = (((_577.z - _565) + cbMtdParam._m0[30u].x) * _391) + _565;
    float _594 = ((((_289 * 2.0) * _588) - _588) * cbMtdParam._m0[25u].w) + _588;
    vec4 _606 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _617 = (((cbMtdParam._m0[24u].z + _606.z) - _594) * _271) + _594;
    float _630 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _653 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_630 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _630) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _657 = cbPerFrame._m0[22u].x * 2.0;
    float _658 = _657 * cbMtdParam._m0[28u].z;
    float _661 = (_653.x * 0.5) + (-0.25);
    float _664 = (_653.y * 0.5) + (-0.25);
    float _665 = _664 * cbMtdParam._m0[28u].y;
    float _667 = (-0.0) - (cbMtdParam._m0[28u].y * _661);
    float _669 = fract(_658);
    float _671 = fract(_658 + 0.5);
    float _683 = abs((_669 * 2.0) + (-1.0));
    vec4 _700 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_669 * _667) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_665 * _669) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _702 = _700.x;
    float _703 = _700.y;
    float _704 = _700.z;
    vec4 _705 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_671 * _667) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_665 * _671) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _716 = ((_705.x - _702) * _683) + _702;
    float _723 = exp2(log2(_716 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _724 = isnan(cbMtdParam._m0[29u].y) ? _723 : (isnan(_723) ? cbMtdParam._m0[29u].y : max(_723, cbMtdParam._m0[29u].y));
    float _725 = isnan(cbMtdParam._m0[29u].z) ? _724 : (isnan(_724) ? cbMtdParam._m0[29u].z : min(_724, cbMtdParam._m0[29u].z));
    float _749 = (cbMtdParam._m0[33u].x * _630) + TEXCOORD;
    float _750 = (cbMtdParam._m0[33u].y * _630) + TEXCOORD_1;
    float _753 = _657 * cbMtdParam._m0[27u].w;
    float _754 = _664 * cbMtdParam._m0[27u].z;
    float _756 = (-0.0) - (cbMtdParam._m0[27u].z * _661);
    float _757 = fract(_753);
    float _759 = fract(_753 + 0.5);
    float _770 = abs((_757 * 2.0) + (-1.0));
    vec4 _787 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_757 * _756) + _749) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_754 * _757) + _750) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _792 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_759 * _756) + _749) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_754 * _759) + _750) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _826 = ((_536.x - _556) * _299) + _556;
    float _827 = ((_536.y - _557) * _299) + _557;
    float _832 = ((_577.x - _826) * _391) + _826;
    float _833 = ((_577.y - _827) * _391) + _827;
    float _842 = ((((_606.x - _832) * _271) + _832) * 2.0) + (-1.0);
    float _843 = ((((_606.y - _833) * _271) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _3932 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))));
    float _852 = (cbMtdParam._m0[26u].z * ((_285.x * 2.0) + (-1.0))) + _842;
    float _853 = (cbMtdParam._m0[26u].z * ((_285.y * 2.0) + (-1.0))) + _843;
    float _855 = gl_FragCoord.x * 0.125;
    float _857 = gl_FragCoord.y * 0.125;
    float _868 = fma(_849, _227 * NORMAL.x, fma(_853, _234 * TANGENT.x, (_220 * _212) * _852));
    float _871 = fma(_849, _227 * NORMAL.y, fma(_853, _234 * TANGENT.y, (_220 * _213) * _852));
    float _874 = fma(_849, _227 * NORMAL.z, fma(_853, _234 * TANGENT.z, (_220 * _214) * _852));
    float _878 = inversesqrt(dot(vec3(_868, _871, _874), vec3(_868, _871, _874)));
    float _879 = _878 * _868;
    float _880 = _878 * _871;
    float _881 = _878 * _874;
    float _3943 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _882 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3965 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3976 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3987 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _886 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_855, _857)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _906 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _957 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _947);
    float _958 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _947);
    float _959 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _947);
    float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
    float _964 = _957 * _963;
    float _965 = _958 * _963;
    float _966 = _959 * _963;
    vec4 _968 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_855, _857));
    float _970 = _968.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1140 = sqrt(((_957 * _957) + (_958 * _958)) + (_959 * _959));
        float _1146 = (cbMatDynParam._m0[5u].x * _1140) + cbMatDynParam._m0[5u].y;
        float _3998 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1151 = (cbMatDynParam._m0[5u].z * _1140) + cbMatDynParam._m0[5u].w;
        float _4009 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) - _1147)) + _1147) < ((_970 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _981 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _982 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1000 = fma(_881, cbSceneParam._m0[5u].z, fma(_880, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _879));
    float _1003 = fma(_881, cbSceneParam._m0[6u].z, fma(_880, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _879));
    float _1006 = fma(_881, cbSceneParam._m0[7u].z, fma(_880, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _879));
    uint _1019 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1020 = _1019 + 9u;
    uint _1021 = _1020 + uint(cbMatDynParam._m0[0u].w);
    float _1027 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_1021].x;
    float _1028 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_1021].y;
    float _1029 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1021].z;
    float _4020 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1033 = 1.0 - _886;
    float _1034 = _1030 * _1033;
    float _1035 = _1031 * _1033;
    float _1036 = _1032 * _1033;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _886;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _886;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _886;
    float _1044 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _981, cbSceneParam._m0[86u].y * _982));
    float _1059 = _1056.x * TEXCOORD_3.w;
    float _1060 = dot(vec3(_879, _880, _881), vec3(_964, _965, _966));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _879) - _964;
    float _1068 = (_1063 * _880) - _965;
    float _1069 = (_1063 * _881) - _966;
    float _1073 = abs(dot(vec3(_964, _965, _966), vec3(_879, _880, _881)));
    float _4053 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_882);
    float _1086 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1075;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1455;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1182 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1186 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1190 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1214 = _1121 + _879;
        float _1215 = _1125 + _880;
        float _1216 = _1129 + _881;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1182;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1186;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1190;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1244 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1182 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1186 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1190 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1283 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1249.x + (-0.5));
        float _1285 = _1283 * (_1249.y + (-0.5));
        float _1286 = _1283 * (_1249.z + (-0.5));
        float _1293 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1256.x + (-0.5));
        float _1295 = _1293 * (_1256.y + (-0.5));
        float _1296 = _1293 * (_1256.z + (-0.5));
        float _1303 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1263.x + (-0.5));
        float _1305 = _1303 * (_1263.y + (-0.5));
        float _1306 = _1303 * (_1263.z + (-0.5));
        float _1313 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1270.x + (-0.5));
        float _1315 = _1313 * (_1270.y + (-0.5));
        float _1316 = _1313 * (_1270.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1337 = (dot(vec3(_879, _880, _881), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1347 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4101 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1349 + 1.0))) + _1354) * _1317;
        float _1364 = _1285 * 0.5;
        float _1365 = _1295 * 0.5;
        float _1366 = _1305 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_879, _880, _881), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4134 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1391 + 1.0))) + _1396) * _1318;
        float _1406 = _1286 * 0.5;
        float _1407 = _1296 * 0.5;
        float _1408 = _1306 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_879, _880, _881), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4167 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1433 + 1.0))) + _1438) * _1319;
        _1455 = _1286;
        _1457 = _1285;
        _1458 = _1284;
        _1459 = _1296;
        _1460 = _1295;
        _1461 = _1294;
        _1462 = _1306;
        _1463 = _1305;
        _1464 = _1304;
        _1465 = _1319;
        _1466 = _1318;
        _1467 = _1317;
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1456;
        _1457 = _1456;
        _1458 = _1456;
        _1459 = _1456;
        _1460 = _1456;
        _1461 = _1456;
        _1462 = _1456;
        _1463 = _1456;
        _1464 = _1456;
        _1465 = _1456;
        _1466 = _1456;
        _1467 = _1456;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1497 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1501 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1524 = _1121 + _879;
        float _1525 = _1125 + _880;
        float _1526 = _1129 + _881;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_879, _880, _881), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4230 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_879, _880, _881), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4263 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_879, _880, _881), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4296 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1456;
        _1763 = _1456;
        _1764 = _1456;
        _1765 = _1456;
        _1766 = _1456;
        _1767 = _1456;
        _1768 = _1456;
        _1769 = _1456;
        _1770 = _1456;
        _1771 = _1456;
        _1772 = _1456;
        _1773 = _1456;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1468)) + _1468;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1469)) + _1469;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1470)) + _1470;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1067 * 0.5;
    float _1831 = _1068 * 0.5;
    float _1832 = _1069 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1455, _1459, _1462, _1465));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _882);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1946 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1950 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1954 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1957 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1960 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1963 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1991;
        if (_1957 > 0.0)
        {
            _1991 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1991 = frontier_phi_19_17_ladder;
        }
        float _2194;
        if (_1960 > 0.0)
        {
            _2194 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2194 = frontier_phi_28_24_ladder;
        }
        float _2448;
        if (_1963 > 0.0)
        {
            _2448 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2448 = frontier_phi_40_35_ladder;
        }
        float _2450 = isnan(_2194) ? _1991 : (isnan(_1991) ? _2194 : min(_1991, _2194));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1957) + _1946;
        float _2456 = (_2451 * _1960) + _1950;
        float _2457 = (_2451 * _1963) + _1954;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2458;
        float _2462 = _2458 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 > _2462) || ((_2456 < _2460) || ((_2455 < _2460) || (_2455 > _2462))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2457, cbModelParam._m0[9u].z, fma(_2456, cbModelParam._m0[9u].y, _2455 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2457, cbModelParam._m0[10u].z, fma(_2456, cbModelParam._m0[10u].y, _2455 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2457, cbModelParam._m0[11u].z, fma(_2456, cbModelParam._m0[11u].y, _2455 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_18_40_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1979 = frontier_phi_18_40_ladder_2;
        _1981 = frontier_phi_18_40_ladder_1;
        _1983 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1899);
        _1979 = _1967.x * cbModelParam._m0[1u].y;
        _1981 = _1967.y * cbModelParam._m0[1u].y;
        _1983 = _1967.z * cbModelParam._m0[1u].y;
    }
    float _1987 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _882);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1987 : min(cbModelParam._m0[25u].w, _1987));
    float _2077;
    float _2079;
    float _2081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2041 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2045 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2049 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2052 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2055 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2058 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2199;
        if (_2052 > 0.0)
        {
            _2199 = abs((1.0 - _2041) / _2052);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2041 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2199 = frontier_phi_30_26_ladder;
        }
        float _2475;
        if (_2055 > 0.0)
        {
            _2475 = abs((1.0 - _2045) / _2055);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2045 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2475 = frontier_phi_42_37_ladder;
        }
        float _2688;
        if (_2058 > 0.0)
        {
            _2688 = abs((1.0 - _2049) / _2058);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2049 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2688 = frontier_phi_51_48_ladder;
        }
        float _2690 = isnan(_2475) ? _2199 : (isnan(_2199) ? _2475 : min(_2199, _2475));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _2052) + _2041;
        float _2696 = (_2691 * _2055) + _2045;
        float _2697 = (_2691 * _2058) + _2049;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _1988);
            frontier_phi_27_51_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2077 = frontier_phi_27_51_ladder_2;
        _2079 = frontier_phi_27_51_ladder_1;
        _2081 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1988);
        _2077 = _2061.x * cbModelParam._m0[1u].z;
        _2079 = _2061.y * cbModelParam._m0[1u].z;
        _2081 = _2061.z * cbModelParam._m0[1u].z;
    }
    float _2094 = (((_1092 * _1044) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2096 = (((_1092 * _1046) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1092 * _1047) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2101 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2094 * cbSceneParam._m0[89u].x));
    float _2104 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2094 * cbSceneParam._m0[90u].x));
    float _2107 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2094 * cbSceneParam._m0[91u].x));
    uvec4 _2117 = floatBitsToUint(cbInstanceData._m0[_1019 + 5u]);
    uint _2119 = _2117.x * 14u;
    uint _2120 = _2119 + 13u;
    float _2127 = _1059 + (-1.0);
    float _2132 = (cbLight._m0[_2120].x * _2127) + 1.0;
    float _2133 = (cbLight._m0[_2120].y * _2127) + 1.0;
    float _2134 = (cbLight._m0[_2120].z * _2127) + 1.0;
    float _2135 = (cbLight._m0[_2120].w * _2127) + 1.0;
    uint _2136 = _2119 + 5u;
    float _2142 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2146 = _2119 + 4u;
    float _2152 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2156 = _2119 | 1u;
    float _2167 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_879, _880, _881));
    float _2170 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_879, _880, _881));
    float _4432 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _4443 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2175 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2177 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2184 = ((cbLight._m0[_2136].x * _2142) * _2177) + ((cbLight._m0[_2146].x * _2152) * _2175);
    float _2185 = ((_2142 * cbLight._m0[_2136].y) * _2177) + ((_2152 * cbLight._m0[_2146].y) * _2175);
    float _2186 = ((_2142 * cbLight._m0[_2136].z) * _2177) + ((_2152 * cbLight._m0[_2146].z) * _2175);
    uvec4 _2191 = floatBitsToUint(cbLight._m0[_2119 + 12u]);
    bool _2193 = _2191.x == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2193)
    {
        _2204 = _2184;
        _2206 = _2185;
        _2208 = _2186;
    }
    else
    {
        uint _2212 = _2119 + 6u;
        float _2228 = (dot(vec3(cbLight._m0[_2119 + 2u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4454 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2231 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2204 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _2184;
        _2206 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _2185;
        _2208 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2186;
    }
    bool _2211 = _2191.y == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2211)
    {
        _2249 = _2204;
        _2251 = _2206;
        _2253 = _2208;
    }
    else
    {
        uint _2419 = _2119 + 7u;
        float _2435 = (dot(vec3(cbLight._m0[_2119 + 3u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2436 = _2435 * _2435;
        float _4470 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2437 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2438 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2249 = (((cbLight._m0[_2419].x * 0.3183098733425140380859375) * _2437) * _2438) + _2204;
        _2251 = (((cbLight._m0[_2419].y * 0.3183098733425140380859375) * _2437) * _2438) + _2206;
        _2253 = (((cbLight._m0[_2419].z * 0.3183098733425140380859375) * _2437) * _2438) + _2208;
    }
    uint _2256 = _2119 + 8u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _882) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2119].x + _964;
    float _2272 = cbLight._m0[_2119].y + _965;
    float _2273 = cbLight._m0[_2119].z + _966;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2119].xyz));
    float _4486 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2285 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2286 = dot(vec3(_879, _880, _881), vec3(_2278, _2279, _2280));
    float _4508 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2278, _2279, _2280));
    float _4519 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2270 * _2270;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2307 = 0.959999978542327880859375 - _1041;
    float _2309 = 0.959999978542327880859375 - _1042;
    float _2310 = 0.959999978542327880859375 - _1043;
    float _2317 = 1.0 - _2270;
    float _2328 = (0.5 / (((_2285 * ((_2284 * _2317) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2317) + _2270) * _2284))) * _2284;
    float _4530 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    uint _2341 = _2119 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _882) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2156].x + _964;
    float _2355 = cbLight._m0[_2156].y + _965;
    float _2356 = cbLight._m0[_2156].z + _966;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2156].xyz));
    float _4541 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2368 = dot(vec3(_879, _880, _881), vec3(_2361, _2362, _2363));
    float _4552 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2361, _2362, _2363));
    float _4563 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
    float _2394 = 1.0 - _2353;
    float _2404 = (0.5 / (((_2285 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2394) + _2353) * _2367))) * _2367;
    float _4574 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2406 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2416 = (((((_2387 * _2307) + _1044) * cbLight._m0[_2341].x) * _2406) * _2142) + (((((_2306 * _2307) + _1044) * cbLight._m0[_2256].x) * _2330) * _2152);
    float _2417 = (((((_2387 * _2309) + _1046) * cbLight._m0[_2341].y) * _2406) * _2142) + (((((_2306 * _2309) + _1046) * cbLight._m0[_2256].y) * _2330) * _2152);
    float _2418 = (((((_2387 * _2310) + _1047) * cbLight._m0[_2341].z) * _2406) * _2142) + (((((_2306 * _2310) + _1047) * cbLight._m0[_2256].z) * _2330) * _2152);
    float _2480;
    float _2482;
    float _2484;
    if (_2193)
    {
        _2480 = _2416;
        _2482 = _2417;
        _2484 = _2418;
    }
    else
    {
        uint _2486 = _2119 + 2u;
        uint _2490 = _2119 + 10u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _882) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _964;
        float _2507 = cbLight._m0[_2486].y + _965;
        float _2508 = cbLight._m0[_2486].z + _966;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2486].xyz));
        float _4585 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2520 = dot(vec3(_879, _880, _881), vec3(_2513, _2514, _2515));
        float _4596 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4607 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2546 = 1.0 - _2505;
        float _2556 = (0.5 / (((_2285 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2546) + _2505) * _2519))) * _2519;
        float _4618 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2480 = (((((_2539 * _2307) + _1044) * cbLight._m0[_2490].x) * _2558) * _2559) + _2416;
        _2482 = (((((_2539 * _2309) + _1046) * cbLight._m0[_2490].y) * _2558) * _2559) + _2417;
        _2484 = (((((_2539 * _2310) + _1047) * cbLight._m0[_2490].z) * _2558) * _2559) + _2418;
    }
    float _2594;
    float _2596;
    float _2598;
    if (_2211)
    {
        _2594 = _2480;
        _2596 = _2482;
        _2598 = _2484;
    }
    else
    {
        uint _2605 = _2119 + 3u;
        uint _2609 = _2119 + 11u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _882) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _964;
        float _2626 = cbLight._m0[_2605].y + _965;
        float _2627 = cbLight._m0[_2605].z + _966;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2605].xyz));
        float _4634 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2639 = dot(vec3(_879, _880, _881), vec3(_2632, _2633, _2634));
        float _4645 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4656 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2285 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2665) + _2624) * _2638))) * _2638;
        float _4667 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2594 = (((((_2658 * _2307) + _1044) * cbLight._m0[_2609].x) * _2677) * _2678) + _2480;
        _2596 = (((((_2658 * _2309) + _1046) * cbLight._m0[_2609].y) * _2677) * _2678) + _2482;
        _2598 = (((((_2658 * _2310) + _1047) * cbLight._m0[_2609].z) * _2677) * _2678) + _2484;
    }
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_2117.y == 0u)
    {
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2753;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2753;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2753;
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.x;
        uint _2780 = uint((float(_2768.y) * floor(float(uint(cbSceneParam._m0[85u].y * _982) / _2769))) + floor(float(uint(cbSceneParam._m0[85u].x * _981) / _2769)));
        float _2790 = (log2(_2756 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2791 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        uint _2794 = uint(isnan(14.0) ? _2791 : (isnan(_2791) ? 14.0 : min(_2791, 14.0)));
        uvec4 _2799 = texelFetch(g_lightClusterGridBuffer, int(((_2794 << 2u) + (_2780 << 6u)) >> 2u));
        uint _2800 = _2799.x;
        uint _2801 = _2768.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2801 >> 4u) & 15u)) + 4294967295u) & _2800) == 0u) || ((_2801 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            uint _3097 = 0u;
            uint _3106;
            bool _3107;
            for (;;)
            {
                _3106 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                _3107 = _3106 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3107)
                {
                    frontier_phi_68_pred = _3091;
                    frontier_phi_68_pred_1 = _3096;
                    frontier_phi_68_pred_2 = _3095;
                    frontier_phi_68_pred_3 = _3094;
                    frontier_phi_68_pred_4 = _3093;
                    frontier_phi_68_pred_5 = _3092;
                }
                else
                {
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    uint _3242;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3106;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    for (;;)
                    {
                        uint _3246 = uint(findLSB(_3242)) + (_3097 << 5u);
                        uint _3243 = (_3242 + 4294967295u) & _3242;
                        uint _3248 = _3246 * 48u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3268 = (_3246 * 48u) + 4u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3287 = (_3246 * 48u) + 8u;
                        vec3 _3298 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x));
                        float _3302 = _3262.x - _2754;
                        float _3303 = _3262.y - _2755;
                        float _3304 = _3262.z - _2756;
                        float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                        float _3308 = inversesqrt(_3305);
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3312 = dot(vec3(_1000, _1003, _1006), vec3(_3309, _3310, _3311));
                        float _3317 = 1.0 - (_3305 * _3262.w);
                        float _4693 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3319 = sqrt(_3305) * _3281.w;
                        float _3322 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3312) + _3323;
                        float _3329 = _3319 * _3319;
                        float _3333 = ((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3318) / ((_3329 * 0.699999988079071044921875) + 1.0);
                        float _3337 = (-0.0) - _2754;
                        float _3338 = (-0.0) - _2755;
                        float _3339 = (-0.0) - _2756;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3354 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                        float _3355 = 1.0 - _1075;
                        float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                        float _3363 = _3362 * _3362;
                        float _3364 = _3363 * _3363;
                        float _3365 = _3344 + _3309;
                        float _3366 = _3345 + _3310;
                        float _3367 = _3346 + _3311;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3375 = dot(vec3(_1000, _1003, _1006), vec3(_3344, _3345, _3346));
                        float _4709 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3379 = dot(vec3(_1000, _1003, _1006), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                        float _4720 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                        float _3387 = _3322 * _3363;
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3312) + _3388;
                        float _4731 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3393 = 1.0 - _3363;
                        float _3403 = (0.5 / (((_3392 * ((_3378 * _3393) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3363) * _3378))) * _3392;
                        float _4742 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3414 = (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3386 * _3386) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125))) * _3318;
                        _3166 = (_3333 * _3281.x) + _3239;
                        _3167 = (_3333 * _3281.y) + _3240;
                        _3168 = (_3333 * _3281.z) + _3241;
                        _3163 = (_3414 * _3298.x) + _3236;
                        _3164 = (_3414 * _3298.y) + _3237;
                        _3165 = (_3414 * _3298.z) + _3238;
                        if (_3243 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3243;
                        }
                    }
                    frontier_phi_68_pred = _3163;
                    frontier_phi_68_pred_1 = _3168;
                    frontier_phi_68_pred_2 = _3167;
                    frontier_phi_68_pred_3 = _3166;
                    frontier_phi_68_pred_4 = _3165;
                    frontier_phi_68_pred_5 = _3164;
                }
                _2931 = frontier_phi_68_pred;
                _2941 = frontier_phi_68_pred_1;
                _2939 = frontier_phi_68_pred_2;
                _2937 = frontier_phi_68_pred_3;
                _2935 = frontier_phi_68_pred_4;
                _2933 = frontier_phi_68_pred_5;
                uint _3098 = _3097 + 1u;
                if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3091 = _2931;
                    _3092 = _2933;
                    _3093 = _2935;
                    _3094 = _2937;
                    _3095 = _2939;
                    _3096 = _2941;
                    _3097 = _3098;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        if (((4294967295u << _2947) & _2800) == 0u)
        {
            _3059 = _2930;
            _3061 = _2932;
            _3063 = _2934;
            _3065 = _2936;
            _3067 = _2938;
            _3069 = _2940;
        }
        else
        {
            float _3084 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
            float _3085 = _3084 * _2754;
            float _3086 = _3084 * _2755;
            float _3087 = _3084 * _2756;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3219 = _2930;
                float _3220 = _2932;
                float _3221 = _2934;
                float _3222 = _2936;
                float _3223 = _2938;
                float _3224 = _2940;
                uint _3225 = _2947;
                uint _3234;
                bool _3235;
                for (;;)
                {
                    _3234 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                    _3235 = _3234 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3235)
                    {
                        frontier_phi_79_pred = _3224;
                        frontier_phi_79_pred_1 = _3223;
                        frontier_phi_79_pred_2 = _3222;
                        frontier_phi_79_pred_3 = _3221;
                        frontier_phi_79_pred_4 = _3220;
                        frontier_phi_79_pred_5 = _3219;
                    }
                    else
                    {
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        uint _3447 = _3234;
                        uint _3448;
                        vec4 _3473;
                        float _3474;
                        vec4 _3489;
                        vec3 _3501;
                        vec4 _3516;
                        vec4 _3531;
                        float _3577;
                        bool _3578;
                        for (;;)
                        {
                            uint _3458 = ((_3225 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3447));
                            _3448 = (_3447 + 4294967295u) & _3447;
                            uint _3460 = _3458 * 40u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3474 = _3473.w;
                            uint _3476 = (_3458 * 40u) + 4u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3458 * 40u) + 8u;
                            _3501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x));
                            uint _3503 = (_3458 * 40u) + 16u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3458 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3458 * 40u) + 24u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3552 = (_3458 * 40u) + 28u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3577 = fma(_2756, _3565.z, fma(_2755, _3565.y, _3565.x * _2754)) + _3565.w;
                            _3578 = !((fma(_2756, _3546.z, fma(_2755, _3546.y, _3546.x * _2754)) + _3546.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3578)
                            {
                                float _3605 = _3473.x - _2754;
                                float _3606 = _3473.y - _2755;
                                float _3607 = _3473.z - _2756;
                                float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                                float _3611 = inversesqrt(_3608);
                                float _3612 = _3611 * _3605;
                                float _3613 = _3611 * _3606;
                                float _3614 = _3611 * _3607;
                                float _3618 = 1.0 - (_3608 / (_3474 * _3474));
                                float _4753 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3623 = sqrt(_3608) * _3489.w;
                                float _3625 = 1.39999997615814208984375 / (_3623 + 1.39999997615814208984375);
                                float _3626 = _3625 * _3625;
                                float _3629 = ((1.0 - _3626) * dot(vec3(_3612, _3613, _3614), vec3(_1000, _1003, _1006))) + _3626;
                                float _3632 = _3623 * _3623;
                                float _3636 = (fma(_2756, _3516.z, fma(_2755, _3516.y, _3516.x * _2754)) + _3516.w) / _3577;
                                float _3637 = (fma(_2756, _3531.z, fma(_2755, _3531.y, _3531.x * _2754)) + _3531.w) / _3577;
                                float _3641 = 1.0 - dot(vec2(_3636, _3637), vec2(_3636, _3637));
                                float _4769 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3643 = _3642 * (((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3619) / ((_3632 * 0.699999988079071044921875) + 1.0));
                                float _3655 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _1075;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3612 - _3085;
                                float _3667 = _3613 - _3086;
                                float _3668 = _3614 - _3087;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3085, (-0.0) - _3086, (-0.0) - _3087));
                                float _4780 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3680 = dot(vec3(_1000, _1003, _1006), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4791 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = _3625 * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_1000, _1003, _1006), vec3(_3612, _3613, _3614))) + _3689;
                                float _4802 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4813 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = (_3642 * _3619) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3687 * _3687) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3643 * _3489.y;
                                frontier_phi_85_pred_1 = _3643 * _3489.x;
                                frontier_phi_85_pred_2 = _3717 * _3501.z;
                                frontier_phi_85_pred_3 = _3717 * _3501.y;
                                frontier_phi_85_pred_4 = _3717 * _3501.x;
                                frontier_phi_85_pred_5 = _3643 * _3489.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3725 = frontier_phi_85_pred;
                            _3724 = frontier_phi_85_pred_1;
                            _3723 = frontier_phi_85_pred_2;
                            _3722 = frontier_phi_85_pred_3;
                            _3721 = frontier_phi_85_pred_4;
                            _3726 = frontier_phi_85_pred_5;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            if (_3448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3448;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3433;
                        frontier_phi_79_pred_1 = _3432;
                        frontier_phi_79_pred_2 = _3431;
                        frontier_phi_79_pred_3 = _3430;
                        frontier_phi_79_pred_4 = _3429;
                        frontier_phi_79_pred_5 = _3428;
                    }
                    _3070 = frontier_phi_79_pred;
                    _3068 = frontier_phi_79_pred_1;
                    _3066 = frontier_phi_79_pred_2;
                    _3064 = frontier_phi_79_pred_3;
                    _3062 = frontier_phi_79_pred_4;
                    _3060 = frontier_phi_79_pred_5;
                    uint _3226 = _3225 + 1u;
                    if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3219 = _3060;
                        _3220 = _3062;
                        _3221 = _3064;
                        _3222 = _3066;
                        _3223 = _3068;
                        _3224 = _3070;
                        _3225 = _3226;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3064;
                frontier_phi_60_61_ladder_1 = _3070;
                frontier_phi_60_61_ladder_2 = _3068;
                frontier_phi_60_61_ladder_3 = _3066;
                frontier_phi_60_61_ladder_4 = _3062;
                frontier_phi_60_61_ladder_5 = _3060;
            }
            else
            {
                frontier_phi_60_61_ladder = _2934;
                frontier_phi_60_61_ladder_1 = _2940;
                frontier_phi_60_61_ladder_2 = _2938;
                frontier_phi_60_61_ladder_3 = _2936;
                frontier_phi_60_61_ladder_4 = _2932;
                frontier_phi_60_61_ladder_5 = _2930;
            }
            _3059 = frontier_phi_60_61_ladder_5;
            _3061 = frontier_phi_60_61_ladder_4;
            _3063 = frontier_phi_60_61_ladder;
            _3065 = frontier_phi_60_61_ladder_3;
            _3067 = frontier_phi_60_61_ladder_2;
            _3069 = frontier_phi_60_61_ladder_1;
        }
        float _3074 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2813 = (_3074 * _3065) + _2249;
        _2815 = (_3074 * _3067) + _2251;
        _2817 = (_3074 * _3069) + _2253;
        _2819 = ((_3059 * _1044) * _3074) + _2594;
        _2821 = ((_3061 * _1046) * _3074) + _2596;
        _2823 = ((_3063 * _1047) * _3074) + _2598;
    }
    else
    {
        _2813 = _2249;
        _2815 = _2251;
        _2817 = _2253;
        _2819 = _2594;
        _2821 = _2596;
        _2823 = _2598;
    }
    uint _2829 = _1020 + uint(cbMatDynParam._m0[0u].w);
    float _2835 = ((((((_792.x - _787.x) * _770) + _787.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _716) * cbMtdParam._m0[20u].x)) * _725) * cbInstanceData._m0[_2829].x;
    float _2836 = ((((((_792.y - _787.y) * _770) + _787.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_705.y - _703) * _683) + _703)) * cbMtdParam._m0[20u].y)) * _725) * cbInstanceData._m0[_2829].y;
    float _2837 = ((((((_792.z - _787.z) * _770) + _787.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_705.z - _704) * _683) + _704)) * cbMtdParam._m0[20u].z)) * _725) * cbInstanceData._m0[_2829].z;
    float _4829 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4840 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4851 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _2854 = (((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2813 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1059))) + ((_2819 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1888)) * cbPerFrame._m0[3u].x)) + _2835;
    float _2856 = (_2836 + ((_2821 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1888)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2815 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1059)));
    float _2858 = (_2837 + ((_2823 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1888)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2817 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1059)));
    float _2859 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2860 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
    float _2861 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
    float _2867 = cbMtdParam._m0[2u].x * _2835;
    float _2868 = cbMtdParam._m0[2u].y * _2836;
    float _2869 = cbMtdParam._m0[2u].z * _2837;
    float _4877 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2871 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    uint _2872 = _1019 + 6u;
    float _2880 = _981 / cbSceneParam._m0[86u].x;
    float _2881 = _982 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _906 : (isnan(_906) ? cbSceneParam._m0[77u].w : min(_906, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_906 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_906) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _906 : min(cbSceneParam._m0[80u].w, _906));
        float _2956 = _2955 / _906;
        float _2967 = _2956 * _957;
        float _2968 = _958 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2970 = _2956 * _959;
        float _2972 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2968;
        float _2980 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_2969 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3120 = 1.0 / cbSceneParam._m0[80u].x;
            float _3121 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3122 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            _3176 = ((abs(_2980 / _2969) * cbSceneParam._m0[80u].y) * ((((_3131 - _3132) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))))) * _3120)) - ((exp2(_2990 * _3131) - exp2(_2990 * _3132)) * _3120))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2900);
        _2992 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2994 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2996 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2998 = _3187 * _2900;
    }
    else
    {
        _2992 = _2897;
        _2994 = _2898;
        _2996 = _2899;
        _2998 = _2900;
    }
    bool _3214;
    vec4 _3008;
    vec4 _3030;
    float _3032;
    float _3036;
    float _3037;
    float _3038;
    float _3041;
    float _3044;
    float _3047;
    float _3048;
    bool _3058;
    for (;;)
    {
        _3008 = cbMatDynParam._m0[0u];
        float _3010 = roundEven(_3008.y);
        bool _3011 = _3010 == 3.0;
        float _3012 = log2(_2998);
        float _3016 = exp2(_3012 * cbSceneParam._m0[78u].x);
        float _3017 = exp2(_3012 * cbSceneParam._m0[78u].y);
        float _3018 = exp2(_3012 * cbSceneParam._m0[78u].z);
        float _3019 = _3016 * _2859;
        float _3020 = _3017 * _2860;
        float _3021 = _3018 * _2861;
        float _3028 = _970 + (-0.5);
        _3030 = cbMtdParam._m0[1u];
        _3032 = _3030.y * _3028;
        float _3035 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3036 = _3035 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
        _3037 = _3035 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
        _3038 = _3035 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
        _3041 = ((_2867 * _2871) * _3016) * _3035;
        _3044 = ((_2868 * _2871) * _3017) * _3035;
        _3047 = ((_2869 * _2871) * _3018) * _3035;
        _3048 = _3028 * 0.999000012874603271484375;
        _3058 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3058)
        {
            if ((cbInstanceData._m0[_1019 + 7u].x + _3048) < 0.5)
            {
                _3214 = true;
                break;
            }
        }
        uint _3155 = _1020 + uint(_3008.w);
        if ((cbInstanceData._m0[_3155].w < 1.0) && ((cbInstanceData._m0[_3155].w + _3048) < 0.5))
        {
            _3214 = true;
            break;
        }
        if ((_3032 + 1.0) < _3030.x)
        {
            _3214 = true;
            break;
        }
        _3214 = false;
        break;
    }
    float _3419;
    if (_3214)
    {
        discard_state = true;
        _3419 = 0.0;
    }
    else
    {
        _3419 = cbInstanceData._m0[_2872].w;
    }
    SV_Target.x = _3036;
    SV_Target.y = _3037;
    SV_Target.z = _3038;
    SV_Target.w = _3419;
    SV_Target_1.x = _3041;
    SV_Target_1.y = _3044;
    SV_Target_1.z = _3047;
    SV_Target_1.w = cbInstanceData._m0[_2872].w;
    discard_exit();
}


