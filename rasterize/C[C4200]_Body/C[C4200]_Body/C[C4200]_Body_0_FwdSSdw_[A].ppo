#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1453;
float _3891;
float _3892;
float _3893;
float _3894;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _263 = log2(0.0);
    float _265 = exp2(_263 * cbMtdParam._m0[24u].x);
    float _266 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _267 = isnan(1.0) ? _266 : (isnan(_266) ? 1.0 : min(_266, 1.0));
    vec4 _281 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _285 = _281.z;
    float _293 = exp2(log2(_285 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    float _316 = roundEven(5.0 - ((texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(4.0) ? _317 : (isnan(_317) ? 4.0 : min(_317, 4.0));
    float _331 = floor(_318);
    vec4 _334 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _331));
    vec4 _359 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _370 = cbMtdParam._m0[9u].x * _359.x;
    float _371 = cbMtdParam._m0[9u].y * _359.y;
    float _372 = cbMtdParam._m0[9u].z * _359.z;
    float _379 = (((cbMtdParam._m0[10u].x * _334.x) - _370) * _295) + _370;
    float _380 = (((cbMtdParam._m0[10u].y * _334.y) - _371) * _295) + _371;
    float _381 = (((cbMtdParam._m0[10u].z * _334.z) - _372) * _295) + _372;
    float _387 = exp2(log2(_281.w) * cbMtdParam._m0[24u].w);
    vec4 _400 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _420 = (((cbMtdParam._m0[16u].x * _400.x) - _379) * _387) + _379;
    float _421 = (((cbMtdParam._m0[16u].y * _400.y) - _380) * _387) + _380;
    float _422 = (((cbMtdParam._m0[16u].z * _400.z) - _381) * _387) + _381;
    vec4 _435 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _460 = (_253.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _435.x) - _420) * _267) + _420);
    float _462 = (_253.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _435.y) - _421) * _267) + _421);
    float _464 = (_253.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _435.z) - _422) * _267) + _422);
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[30u].z;
    _189[0u] = cbMtdParam._m0[30u].w;
    _188[1u] = cbMtdParam._m0[32u].z;
    _189[1u] = cbMtdParam._m0[32u].w;
    _188[2u] = cbMtdParam._m0[32u].x;
    _189[2u] = cbMtdParam._m0[32u].y;
    _188[3u] = cbMtdParam._m0[31u].z;
    _189[3u] = cbMtdParam._m0[31u].w;
    _188[4u] = cbMtdParam._m0[31u].x;
    _189[4u] = cbMtdParam._m0[31u].y;
    float _503 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    uint _505 = uint(int(isnan(4.0) ? _503 : (isnan(_503) ? 4.0 : min(_503, 4.0))));
    float _512 = ((_189[_505] - cbMtdParam._m0[23u].z) * _295) + cbMtdParam._m0[23u].z;
    float _515 = ((cbMtdParam._m0[23u].w - _512) * _387) + _512;
    float _518 = ((cbMtdParam._m0[26u].y - _515) * _267) + _515;
    vec4 _533 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _331));
    vec4 _551 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _559 = cbMtdParam._m0[23u].x + _551.z;
    float _562 = (((_533.z + _188[_505]) - _559) * _295) + _559;
    vec4 _574 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _585 = (((_574.z - _562) + cbMtdParam._m0[30u].x) * _387) + _562;
    float _591 = ((((_285 * 2.0) * _585) - _585) * cbMtdParam._m0[25u].w) + _585;
    vec4 _603 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _614 = (((cbMtdParam._m0[24u].z + _603.z) - _591) * _267) + _591;
    float _627 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _650 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_627 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _627) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _654 = cbPerFrame._m0[22u].x * 2.0;
    float _655 = _654 * cbMtdParam._m0[28u].z;
    float _658 = (_650.x * 0.5) + (-0.25);
    float _661 = (_650.y * 0.5) + (-0.25);
    float _662 = _661 * cbMtdParam._m0[28u].y;
    float _664 = (-0.0) - (cbMtdParam._m0[28u].y * _658);
    float _666 = fract(_655);
    float _668 = fract(_655 + 0.5);
    float _680 = abs((_666 * 2.0) + (-1.0));
    vec4 _697 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_666 * _664) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_662 * _666) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _699 = _697.x;
    float _700 = _697.y;
    float _701 = _697.z;
    vec4 _702 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_668 * _664) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_662 * _668) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _713 = ((_702.x - _699) * _680) + _699;
    float _720 = exp2(log2(_713 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _721 = isnan(cbMtdParam._m0[29u].y) ? _720 : (isnan(_720) ? cbMtdParam._m0[29u].y : max(_720, cbMtdParam._m0[29u].y));
    float _722 = isnan(cbMtdParam._m0[29u].z) ? _721 : (isnan(_721) ? cbMtdParam._m0[29u].z : min(_721, cbMtdParam._m0[29u].z));
    float _746 = (cbMtdParam._m0[33u].x * _627) + TEXCOORD;
    float _747 = (cbMtdParam._m0[33u].y * _627) + TEXCOORD_1;
    float _750 = _654 * cbMtdParam._m0[27u].w;
    float _751 = _661 * cbMtdParam._m0[27u].z;
    float _753 = (-0.0) - (cbMtdParam._m0[27u].z * _658);
    float _754 = fract(_750);
    float _756 = fract(_750 + 0.5);
    float _767 = abs((_754 * 2.0) + (-1.0));
    vec4 _784 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_754 * _753) + _746) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_751 * _754) + _747) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _789 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_756 * _753) + _746) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_751 * _756) + _747) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _823 = ((_533.x - _553) * _295) + _553;
    float _824 = ((_533.y - _554) * _295) + _554;
    float _829 = ((_574.x - _823) * _387) + _823;
    float _830 = ((_574.y - _824) * _387) + _824;
    float _839 = ((((_603.x - _829) * _267) + _829) * 2.0) + (-1.0);
    float _840 = ((((_603.y - _830) * _267) + _830) * 2.0) + (-1.0);
    float _841 = dot(vec2(_839, _840), vec2(_839, _840));
    float _3953 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _846 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _849 = (cbMtdParam._m0[26u].z * ((_281.x * 2.0) + (-1.0))) + _839;
    float _850 = (cbMtdParam._m0[26u].z * ((_281.y * 2.0) + (-1.0))) + _840;
    float _852 = gl_FragCoord.x * 0.125;
    float _854 = gl_FragCoord.y * 0.125;
    float _865 = fma(_846, _229 * NORMAL.x, fma(_850, _236 * TANGENT.x, (_222 * _214) * _849));
    float _868 = fma(_846, _229 * NORMAL.y, fma(_850, _236 * TANGENT.y, (_222 * _215) * _849));
    float _871 = fma(_846, _229 * NORMAL.z, fma(_850, _236 * TANGENT.z, (_222 * _216) * _849));
    float _875 = inversesqrt(dot(vec3(_865, _868, _871), vec3(_865, _868, _871)));
    float _876 = _875 * _865;
    float _877 = _875 * _868;
    float _878 = _875 * _871;
    float _3964 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _879 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3986 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3997 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4008 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _883 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_852, _854)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _903 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _954 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _944);
    float _955 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _944);
    float _956 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _944);
    float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
    float _961 = _954 * _960;
    float _962 = _955 * _960;
    float _963 = _956 * _960;
    vec4 _965 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_852, _854));
    float _967 = _965.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1137 = sqrt(((_954 * _954) + (_955 * _955)) + (_956 * _956));
        float _1143 = (cbMatDynParam._m0[5u].x * _1137) + cbMatDynParam._m0[5u].y;
        float _4019 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1148 = (cbMatDynParam._m0[5u].z * _1137) + cbMatDynParam._m0[5u].w;
        float _4030 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) - _1144)) + _1144) < ((_967 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _978 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _979 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _997 = fma(_878, cbSceneParam._m0[5u].z, fma(_877, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _876));
    float _1000 = fma(_878, cbSceneParam._m0[6u].z, fma(_877, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _876));
    float _1003 = fma(_878, cbSceneParam._m0[7u].z, fma(_877, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _876));
    uint _1016 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1017 = _1016 + 9u;
    uint _1018 = _1017 + uint(cbMatDynParam._m0[0u].w);
    float _1024 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_1018].x;
    float _1025 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1018].y;
    float _1026 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1018].z;
    float _4041 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1030 = 1.0 - _883;
    float _1031 = _1027 * _1030;
    float _1032 = _1028 * _1030;
    float _1033 = _1029 * _1030;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _883;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _883;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _883;
    float _1041 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    vec4 _1053 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _978, cbSceneParam._m0[86u].y * _979));
    float _1056 = _1053.x * TEXCOORD_3.w;
    float _1057 = dot(vec3(_876, _877, _878), vec3(_961, _962, _963));
    float _1060 = _1057 * 2.0;
    float _1064 = (_1060 * _876) - _961;
    float _1065 = (_1060 * _877) - _962;
    float _1066 = (_1060 * _878) - _963;
    float _1070 = abs(dot(vec3(_961, _962, _963), vec3(_876, _877, _878)));
    float _4074 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = sqrt(_879);
    float _1083 = exp2((_1072 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1072 * 3.0));
    float _1089 = (1.0 - _1083) * ((_1072 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1090 = _1083 * _1072;
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1452;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1179 = fma(_1126, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118));
        float _1183 = fma(_1126, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118));
        float _1187 = fma(_1126, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118));
        float _1211 = _1118 + _876;
        float _1212 = _1122 + _877;
        float _1213 = _1126 + _878;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1179;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1183;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1187;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1241 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1179 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1183 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1187 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1280 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1246.x + (-0.5));
        float _1282 = _1280 * (_1246.y + (-0.5));
        float _1283 = _1280 * (_1246.z + (-0.5));
        float _1290 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1253.x + (-0.5));
        float _1292 = _1290 * (_1253.y + (-0.5));
        float _1293 = _1290 * (_1253.z + (-0.5));
        float _1300 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1260.x + (-0.5));
        float _1302 = _1300 * (_1260.y + (-0.5));
        float _1303 = _1300 * (_1260.z + (-0.5));
        float _1310 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1267.x + (-0.5));
        float _1312 = _1310 * (_1267.y + (-0.5));
        float _1313 = _1310 * (_1267.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1334 = (dot(vec3(_876, _877, _878), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1344 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4122 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1346 + 1.0))) + _1351) * _1314;
        float _1361 = _1282 * 0.5;
        float _1362 = _1292 * 0.5;
        float _1363 = _1302 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_876, _877, _878), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4155 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1388 + 1.0))) + _1393) * _1315;
        float _1403 = _1283 * 0.5;
        float _1404 = _1293 * 0.5;
        float _1405 = _1303 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_876, _877, _878), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4188 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1430 + 1.0))) + _1435) * _1316;
        _1452 = _1283;
        _1454 = _1282;
        _1455 = _1281;
        _1456 = _1293;
        _1457 = _1292;
        _1458 = _1291;
        _1459 = _1303;
        _1460 = _1302;
        _1461 = _1301;
        _1462 = _1316;
        _1463 = _1315;
        _1464 = _1314;
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1453;
        _1454 = _1453;
        _1455 = _1453;
        _1456 = _1453;
        _1457 = _1453;
        _1458 = _1453;
        _1459 = _1453;
        _1460 = _1453;
        _1461 = _1453;
        _1462 = _1453;
        _1463 = _1453;
        _1464 = _1453;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1126, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118));
        float _1494 = fma(_1126, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118));
        float _1498 = fma(_1126, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118));
        float _1521 = _1118 + _876;
        float _1522 = _1122 + _877;
        float _1523 = _1126 + _878;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_876, _877, _878), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4251 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_876, _877, _878), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4284 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_876, _877, _878), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4317 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1453;
        _1760 = _1453;
        _1761 = _1453;
        _1762 = _1453;
        _1763 = _1453;
        _1764 = _1453;
        _1765 = _1453;
        _1766 = _1453;
        _1767 = _1453;
        _1768 = _1453;
        _1769 = _1453;
        _1770 = _1453;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1466)) + _1466;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1467)) + _1467;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1064 * 0.5;
    float _1828 = _1065 * 0.5;
    float _1829 = _1066 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1870;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1452, _1456, _1459, _1462));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1881;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1872 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1885 = (_1881 * cbModelParam._m0[1u].x) + (_1870 * (1.0 - cbModelParam._m0[1u].x));
    float _1895 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1895 : min(cbModelParam._m0[25u].z, _1895));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1943 = fma(_1126, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118)) + cbModelParam._m0[13u].w;
        float _1947 = fma(_1126, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118)) + cbModelParam._m0[14u].w;
        float _1951 = fma(_1126, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118)) + cbModelParam._m0[15u].w;
        float _1954 = fma(_1066, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064));
        float _1957 = fma(_1066, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064));
        float _1960 = fma(_1066, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064));
        float _1988;
        if (_1954 > 0.0)
        {
            _1988 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1988 = frontier_phi_19_17_ladder;
        }
        float _2212;
        if (_1957 > 0.0)
        {
            _2212 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2212 = frontier_phi_28_24_ladder;
        }
        float _2469;
        if (_1960 > 0.0)
        {
            _2469 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2469 = frontier_phi_40_35_ladder;
        }
        float _2471 = isnan(_2212) ? _1988 : (isnan(_1988) ? _2212 : min(_1988, _2212));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1954) + _1943;
        float _2477 = (_2472 * _1957) + _1947;
        float _2478 = (_2472 * _1960) + _1951;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1896);
            frontier_phi_18_40_ladder = _2606.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2606.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2606.x * cbModelParam._m0[1u].y;
        }
        _1976 = frontier_phi_18_40_ladder_2;
        _1978 = frontier_phi_18_40_ladder_1;
        _1980 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1064, _1065, _1066), _1896);
        _1976 = _1964.x * cbModelParam._m0[1u].y;
        _1978 = _1964.y * cbModelParam._m0[1u].y;
        _1980 = _1964.z * cbModelParam._m0[1u].y;
    }
    float _1984 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1984 : min(cbModelParam._m0[25u].w, _1984));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2038 = fma(_1126, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118)) + cbModelParam._m0[21u].w;
        float _2042 = fma(_1126, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118)) + cbModelParam._m0[22u].w;
        float _2046 = fma(_1126, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118)) + cbModelParam._m0[23u].w;
        float _2049 = fma(_1066, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064));
        float _2052 = fma(_1066, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064));
        float _2055 = fma(_1066, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064));
        float _2217;
        if (_2049 > 0.0)
        {
            _2217 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2217 = frontier_phi_30_26_ladder;
        }
        float _2496;
        if (_2052 > 0.0)
        {
            _2496 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2496 = frontier_phi_42_37_ladder;
        }
        float _2709;
        if (_2055 > 0.0)
        {
            _2709 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2709 = frontier_phi_51_48_ladder;
        }
        float _2711 = isnan(_2496) ? _2217 : (isnan(_2217) ? _2496 : min(_2217, _2496));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _2049) + _2038;
        float _2717 = (_2712 * _2052) + _2042;
        float _2718 = (_2712 * _2055) + _2046;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _1985);
            frontier_phi_27_51_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2074 = frontier_phi_27_51_ladder_2;
        _2076 = frontier_phi_27_51_ladder_1;
        _2078 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1064, _1065, _1066), _1985);
        _2074 = _2058.x * cbModelParam._m0[1u].z;
        _2076 = _2058.y * cbModelParam._m0[1u].z;
        _2078 = _2058.z * cbModelParam._m0[1u].z;
    }
    float _2091 = (((_1089 * _1041) + _1090) * _1056) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1089 * _1043) + _1090) * _1056) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1089 * _1044) + _1090) * _1056) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2098 = fma(_2095, cbSceneParam._m0[89u].z, fma(_2093, cbSceneParam._m0[89u].y, _2091 * cbSceneParam._m0[89u].x));
    float _2101 = fma(_2095, cbSceneParam._m0[90u].z, fma(_2093, cbSceneParam._m0[90u].y, _2091 * cbSceneParam._m0[90u].x));
    float _2104 = fma(_2095, cbSceneParam._m0[91u].z, fma(_2093, cbSceneParam._m0[91u].y, _2091 * cbSceneParam._m0[91u].x));
    vec4 _2112 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_978, _979));
    float _2114 = _2112.w;
    float _2126 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2114);
    float _2127 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2114);
    float _2128 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2114);
    uvec4 _2132 = floatBitsToUint(cbInstanceData._m0[_1016 + 5u]);
    uint _2134 = _2132.x * 14u;
    uint _2135 = _2134 + 13u;
    float _2142 = _1056 + (-1.0);
    float _2147 = (cbLight._m0[_2135].x * _2142) + 1.0;
    float _2148 = (cbLight._m0[_2135].y * _2142) + 1.0;
    float _2149 = (cbLight._m0[_2135].z * _2142) + 1.0;
    float _2150 = (cbLight._m0[_2135].w * _2142) + 1.0;
    uint _2151 = _2134 + 5u;
    float _2157 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2161 = _2134 + 4u;
    float _2170 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2174 = _2134 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_876, _877, _878));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_876, _877, _878));
    float _4453 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4464 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2151].x * _2157) * _2195) + (((cbLight._m0[_2161].x * _2126) * _2170) * _2193);
    float _2203 = ((_2157 * cbLight._m0[_2151].y) * _2195) + (((cbLight._m0[_2161].y * _2127) * _2170) * _2193);
    float _2204 = ((_2157 * cbLight._m0[_2151].z) * _2195) + (((cbLight._m0[_2161].z * _2128) * _2170) * _2193);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2134 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2211)
    {
        _2222 = _2202;
        _2224 = _2203;
        _2226 = _2204;
    }
    else
    {
        uint _2230 = _2134 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2134 + 2u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4475 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2249 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2202;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2203;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2204;
    }
    bool _2229 = _2209.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2229)
    {
        _2267 = _2222;
        _2269 = _2224;
        _2271 = _2226;
    }
    else
    {
        uint _2440 = _2134 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2134 + 3u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4491 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2459 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2267 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2222;
        _2269 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2224;
        _2271 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2226;
    }
    uint _2274 = _2134 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _879) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2134].x + _961;
    float _2290 = cbLight._m0[_2134].y + _962;
    float _2291 = cbLight._m0[_2134].z + _963;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2134].xyz));
    float _4507 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _2303 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2304 = dot(vec3(_876, _877, _878), vec3(_2296, _2297, _2298));
    float _4529 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2296, _2297, _2298));
    float _4540 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2325 = 0.959999978542327880859375 - _1038;
    float _2327 = 0.959999978542327880859375 - _1039;
    float _2328 = 0.959999978542327880859375 - _1040;
    float _2335 = 1.0 - _2288;
    float _2346 = (0.5 / (((_2303 * ((_2302 * _2335) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2335) + _2288) * _2302))) * _2302;
    float _4551 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2362 = _2134 + 9u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _879) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2174].x + _961;
    float _2376 = cbLight._m0[_2174].y + _962;
    float _2377 = cbLight._m0[_2174].z + _963;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2174].xyz));
    float _4562 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2389 = dot(vec3(_876, _877, _878), vec3(_2382, _2383, _2384));
    float _4573 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2382, _2383, _2384));
    float _4584 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2374 * _2374;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2415 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2303 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2415) + _2374) * _2388))) * _2388;
    float _4595 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    float _2437 = (((((_2408 * _2325) + _1041) * cbLight._m0[_2362].x) * _2427) * _2157) + ((((cbLight._m0[_2274].x * _2126) * ((_2324 * _2325) + _1041)) * _2348) * _2170);
    float _2438 = (((((_2408 * _2327) + _1043) * cbLight._m0[_2362].y) * _2427) * _2157) + ((((cbLight._m0[_2274].y * _2127) * ((_2324 * _2327) + _1043)) * _2348) * _2170);
    float _2439 = (((((_2408 * _2328) + _1044) * cbLight._m0[_2362].z) * _2427) * _2157) + ((((cbLight._m0[_2274].z * _2128) * ((_2324 * _2328) + _1044)) * _2348) * _2170);
    float _2501;
    float _2503;
    float _2505;
    if (_2211)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2134 + 2u;
        uint _2511 = _2134 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _879) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _961;
        float _2528 = cbLight._m0[_2507].y + _962;
        float _2529 = cbLight._m0[_2507].z + _963;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2507].xyz));
        float _4606 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2541 = dot(vec3(_876, _877, _878), vec3(_2534, _2535, _2536));
        float _4617 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4628 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2567 = 1.0 - _2526;
        float _2577 = (0.5 / (((_2303 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2567) + _2526) * _2540))) * _2540;
        float _4639 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2501 = (((((_2560 * _2325) + _1041) * cbLight._m0[_2511].x) * _2579) * _2580) + _2437;
        _2503 = (((((_2560 * _2327) + _1043) * cbLight._m0[_2511].y) * _2579) * _2580) + _2438;
        _2505 = (((((_2560 * _2328) + _1044) * cbLight._m0[_2511].z) * _2579) * _2580) + _2439;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2229)
    {
        _2615 = _2501;
        _2617 = _2503;
        _2619 = _2505;
    }
    else
    {
        uint _2626 = _2134 + 3u;
        uint _2630 = _2134 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _879) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _961;
        float _2647 = cbLight._m0[_2626].y + _962;
        float _2648 = cbLight._m0[_2626].z + _963;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2626].xyz));
        float _4655 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2660 = dot(vec3(_876, _877, _878), vec3(_2653, _2654, _2655));
        float _4666 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4677 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2303 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2686) + _2645) * _2659))) * _2659;
        float _4688 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2615 = (((((_2679 * _2325) + _1041) * cbLight._m0[_2630].x) * _2698) * _2699) + _2501;
        _2617 = (((((_2679 * _2327) + _1043) * cbLight._m0[_2630].y) * _2698) * _2699) + _2503;
        _2619 = (((((_2679 * _2328) + _1044) * cbLight._m0[_2630].z) * _2698) * _2699) + _2505;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2132.y == 0u)
    {
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2774;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2774;
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2774;
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _979) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _978) / _2790)));
        float _2811 = (log2(_2777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            uint _3118 = 0u;
            uint _3127;
            bool _3128;
            for (;;)
            {
                _3127 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                _3128 = _3127 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3128)
                {
                    frontier_phi_68_pred = _3112;
                    frontier_phi_68_pred_1 = _3117;
                    frontier_phi_68_pred_2 = _3116;
                    frontier_phi_68_pred_3 = _3115;
                    frontier_phi_68_pred_4 = _3114;
                    frontier_phi_68_pred_5 = _3113;
                }
                else
                {
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    uint _3263;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3127;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    for (;;)
                    {
                        uint _3267 = uint(findLSB(_3263)) + (_3118 << 5u);
                        uint _3264 = (_3263 + 4294967295u) & _3263;
                        uint _3269 = _3267 * 48u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3289 = (_3267 * 48u) + 4u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3308 = (_3267 * 48u) + 8u;
                        vec3 _3319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x));
                        float _3323 = _3283.x - _2775;
                        float _3324 = _3283.y - _2776;
                        float _3325 = _3283.z - _2777;
                        float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                        float _3329 = inversesqrt(_3326);
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3333 = dot(vec3(_997, _1000, _1003), vec3(_3330, _3331, _3332));
                        float _3338 = 1.0 - (_3326 * _3283.w);
                        float _4714 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3340 = sqrt(_3326) * _3302.w;
                        float _3343 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3333) + _3344;
                        float _3350 = _3340 * _3340;
                        float _3354 = ((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3339) / ((_3350 * 0.699999988079071044921875) + 1.0);
                        float _3358 = (-0.0) - _2775;
                        float _3359 = (-0.0) - _2776;
                        float _3360 = (-0.0) - _2777;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3375 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _1072;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3365 + _3330;
                        float _3387 = _3366 + _3331;
                        float _3388 = _3367 + _3332;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_997, _1000, _1003), vec3(_3365, _3366, _3367));
                        float _4730 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3400 = dot(vec3(_997, _1000, _1003), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4741 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3343 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3333) + _3409;
                        float _4752 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4763 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3407 * _3407) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125))) * _3339;
                        _3187 = (_3354 * _3302.x) + _3260;
                        _3188 = (_3354 * _3302.y) + _3261;
                        _3189 = (_3354 * _3302.z) + _3262;
                        _3184 = (_3435 * _3319.x) + _3257;
                        _3185 = (_3435 * _3319.y) + _3258;
                        _3186 = (_3435 * _3319.z) + _3259;
                        if (_3264 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3264;
                        }
                    }
                    frontier_phi_68_pred = _3184;
                    frontier_phi_68_pred_1 = _3189;
                    frontier_phi_68_pred_2 = _3188;
                    frontier_phi_68_pred_3 = _3187;
                    frontier_phi_68_pred_4 = _3186;
                    frontier_phi_68_pred_5 = _3185;
                }
                _2952 = frontier_phi_68_pred;
                _2962 = frontier_phi_68_pred_1;
                _2960 = frontier_phi_68_pred_2;
                _2958 = frontier_phi_68_pred_3;
                _2956 = frontier_phi_68_pred_4;
                _2954 = frontier_phi_68_pred_5;
                uint _3119 = _3118 + 1u;
                if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3112 = _2952;
                    _3113 = _2954;
                    _3114 = _2956;
                    _3115 = _2958;
                    _3116 = _2960;
                    _3117 = _2962;
                    _3118 = _3119;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((4294967295u << _2968) & _2821) == 0u)
        {
            _3080 = _2951;
            _3082 = _2953;
            _3084 = _2955;
            _3086 = _2957;
            _3088 = _2959;
            _3090 = _2961;
        }
        else
        {
            float _3105 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
            float _3106 = _3105 * _2775;
            float _3107 = _3105 * _2776;
            float _3108 = _3105 * _2777;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3240 = _2951;
                float _3241 = _2953;
                float _3242 = _2955;
                float _3243 = _2957;
                float _3244 = _2959;
                float _3245 = _2961;
                uint _3246 = _2968;
                uint _3255;
                bool _3256;
                for (;;)
                {
                    _3255 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                    _3256 = _3255 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3256)
                    {
                        frontier_phi_79_pred = _3245;
                        frontier_phi_79_pred_1 = _3244;
                        frontier_phi_79_pred_2 = _3243;
                        frontier_phi_79_pred_3 = _3242;
                        frontier_phi_79_pred_4 = _3241;
                        frontier_phi_79_pred_5 = _3240;
                    }
                    else
                    {
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        float _3467 = _3245;
                        uint _3468 = _3255;
                        uint _3469;
                        vec4 _3494;
                        float _3495;
                        vec4 _3510;
                        vec3 _3522;
                        vec4 _3537;
                        vec4 _3552;
                        float _3598;
                        bool _3599;
                        for (;;)
                        {
                            uint _3479 = ((_3246 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3468));
                            _3469 = (_3468 + 4294967295u) & _3468;
                            uint _3481 = _3479 * 40u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3495 = _3494.w;
                            uint _3497 = (_3479 * 40u) + 4u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3479 * 40u) + 8u;
                            _3522 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x));
                            uint _3524 = (_3479 * 40u) + 16u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3479 * 40u) + 20u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3479 * 40u) + 24u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3573 = (_3479 * 40u) + 28u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3598 = fma(_2777, _3586.z, fma(_2776, _3586.y, _3586.x * _2775)) + _3586.w;
                            _3599 = !((fma(_2777, _3567.z, fma(_2776, _3567.y, _3567.x * _2775)) + _3567.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3599)
                            {
                                float _3626 = _3494.x - _2775;
                                float _3627 = _3494.y - _2776;
                                float _3628 = _3494.z - _2777;
                                float _3629 = dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628));
                                float _3632 = inversesqrt(_3629);
                                float _3633 = _3632 * _3626;
                                float _3634 = _3632 * _3627;
                                float _3635 = _3632 * _3628;
                                float _3639 = 1.0 - (_3629 / (_3495 * _3495));
                                float _4774 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3644 = sqrt(_3629) * _3510.w;
                                float _3646 = 1.39999997615814208984375 / (_3644 + 1.39999997615814208984375);
                                float _3647 = _3646 * _3646;
                                float _3650 = ((1.0 - _3647) * dot(vec3(_3633, _3634, _3635), vec3(_997, _1000, _1003))) + _3647;
                                float _3653 = _3644 * _3644;
                                float _3657 = (fma(_2777, _3537.z, fma(_2776, _3537.y, _3537.x * _2775)) + _3537.w) / _3598;
                                float _3658 = (fma(_2777, _3552.z, fma(_2776, _3552.y, _3552.x * _2775)) + _3552.w) / _3598;
                                float _3662 = 1.0 - dot(vec2(_3657, _3658), vec2(_3657, _3658));
                                float _4790 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3664 = _3663 * (((isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0))) * _3640) / ((_3653 * 0.699999988079071044921875) + 1.0));
                                float _3676 = exp2(log2(1.0 / ((_3653 * 3.5) + 5.0)) * 0.25);
                                float _3677 = 1.0 - _1072;
                                float _3684 = sqrt(1.0 - ((1.0 - (_3677 * _3677)) * (1.0 - (_3676 * _3676))));
                                float _3685 = _3684 * _3684;
                                float _3686 = _3685 * _3685;
                                float _3687 = _3633 - _3106;
                                float _3688 = _3634 - _3107;
                                float _3689 = _3635 - _3108;
                                float _3693 = inversesqrt(dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689)));
                                float _3697 = dot(vec3(_997, _1000, _1003), vec3((-0.0) - _3106, (-0.0) - _3107, (-0.0) - _3108));
                                float _4801 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3701 = dot(vec3(_997, _1000, _1003), vec3(_3693 * _3687, _3693 * _3688, _3693 * _3689));
                                float _4812 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3708 = ((_3704 * _3704) * (_3686 + (-1.0))) + 1.0;
                                float _3709 = _3646 * _3685;
                                float _3710 = _3709 * _3709;
                                float _3716 = ((1.0 - _3710) * dot(vec3(_997, _1000, _1003), vec3(_3633, _3634, _3635))) + _3710;
                                float _4823 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3718 = 1.0 - _3685;
                                float _3728 = (0.5 / (((_3717 * ((_3700 * _3718) + _3685)) + 9.9999999392252902907785028219223e-09) + (((_3717 * _3718) + _3685) * _3700))) * _3717;
                                float _4834 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3738 = (_3663 * _3640) * (((_3686 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3708 * _3708) * ((_3653 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3664 * _3510.y;
                                frontier_phi_85_pred_1 = _3664 * _3510.x;
                                frontier_phi_85_pred_2 = _3738 * _3522.z;
                                frontier_phi_85_pred_3 = _3738 * _3522.y;
                                frontier_phi_85_pred_4 = _3738 * _3522.x;
                                frontier_phi_85_pred_5 = _3664 * _3510.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_85_pred;
                            _3745 = frontier_phi_85_pred_1;
                            _3744 = frontier_phi_85_pred_2;
                            _3743 = frontier_phi_85_pred_3;
                            _3742 = frontier_phi_85_pred_4;
                            _3747 = frontier_phi_85_pred_5;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            if (_3469 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3469;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3454;
                        frontier_phi_79_pred_1 = _3453;
                        frontier_phi_79_pred_2 = _3452;
                        frontier_phi_79_pred_3 = _3451;
                        frontier_phi_79_pred_4 = _3450;
                        frontier_phi_79_pred_5 = _3449;
                    }
                    _3091 = frontier_phi_79_pred;
                    _3089 = frontier_phi_79_pred_1;
                    _3087 = frontier_phi_79_pred_2;
                    _3085 = frontier_phi_79_pred_3;
                    _3083 = frontier_phi_79_pred_4;
                    _3081 = frontier_phi_79_pred_5;
                    uint _3247 = _3246 + 1u;
                    if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3240 = _3081;
                        _3241 = _3083;
                        _3242 = _3085;
                        _3243 = _3087;
                        _3244 = _3089;
                        _3245 = _3091;
                        _3246 = _3247;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3085;
                frontier_phi_60_61_ladder_1 = _3091;
                frontier_phi_60_61_ladder_2 = _3089;
                frontier_phi_60_61_ladder_3 = _3087;
                frontier_phi_60_61_ladder_4 = _3083;
                frontier_phi_60_61_ladder_5 = _3081;
            }
            else
            {
                frontier_phi_60_61_ladder = _2955;
                frontier_phi_60_61_ladder_1 = _2961;
                frontier_phi_60_61_ladder_2 = _2959;
                frontier_phi_60_61_ladder_3 = _2957;
                frontier_phi_60_61_ladder_4 = _2953;
                frontier_phi_60_61_ladder_5 = _2951;
            }
            _3080 = frontier_phi_60_61_ladder_5;
            _3082 = frontier_phi_60_61_ladder_4;
            _3084 = frontier_phi_60_61_ladder;
            _3086 = frontier_phi_60_61_ladder_3;
            _3088 = frontier_phi_60_61_ladder_2;
            _3090 = frontier_phi_60_61_ladder_1;
        }
        float _3095 = isnan(1.0) ? _1056 : (isnan(_1056) ? 1.0 : min(_1056, 1.0));
        _2834 = (_3095 * _3086) + _2267;
        _2836 = (_3095 * _3088) + _2269;
        _2838 = (_3095 * _3090) + _2271;
        _2840 = ((_3080 * _1041) * _3095) + _2615;
        _2842 = ((_3082 * _1043) * _3095) + _2617;
        _2844 = ((_3084 * _1044) * _3095) + _2619;
    }
    else
    {
        _2834 = _2267;
        _2836 = _2269;
        _2838 = _2271;
        _2840 = _2615;
        _2842 = _2617;
        _2844 = _2619;
    }
    uint _2850 = _1017 + uint(cbMatDynParam._m0[0u].w);
    float _2856 = ((((((_789.x - _784.x) * _767) + _784.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _713) * cbMtdParam._m0[20u].x)) * _722) * cbInstanceData._m0[_2850].x;
    float _2857 = ((((((_789.y - _784.y) * _767) + _784.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_702.y - _700) * _680) + _700)) * cbMtdParam._m0[20u].y)) * _722) * cbInstanceData._m0[_2850].y;
    float _2858 = ((((((_789.z - _784.z) * _767) + _784.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_702.z - _701) * _680) + _701)) * cbMtdParam._m0[20u].z)) * _722) * cbInstanceData._m0[_2850].z;
    float _4850 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4861 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _4872 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _2875 = (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2834 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1056))) + ((_2840 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1885)) * cbPerFrame._m0[3u].x)) + _2856;
    float _2877 = (_2857 + ((_2842 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1885)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2836 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1056)));
    float _2879 = (_2858 + ((_2844 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1885)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2838 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1056)));
    float _2880 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
    float _2881 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
    float _2882 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
    float _2888 = cbMtdParam._m0[2u].x * _2856;
    float _2889 = cbMtdParam._m0[2u].y * _2857;
    float _2890 = cbMtdParam._m0[2u].z * _2858;
    float _4898 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2892 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    uint _2893 = _1016 + 6u;
    float _2901 = _978 / cbSceneParam._m0[86u].x;
    float _2902 = _979 / cbSceneParam._m0[86u].y;
    vec4 _2916 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, (log2((isnan(cbSceneParam._m0[77u].w) ? _903 : (isnan(_903) ? cbSceneParam._m0[77u].w : min(_903, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2918 = _2916.x;
    float _2919 = _2916.y;
    float _2920 = _2916.z;
    float _2921 = _2916.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_903 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_903) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _903 : min(cbSceneParam._m0[80u].w, _903));
        float _2977 = _2976 / _903;
        float _2988 = _2977 * _954;
        float _2989 = _955 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2991 = _2977 * _956;
        float _2993 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2989;
        float _3001 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3197;
        if (abs((_2990 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3197 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3141 = 1.0 / cbSceneParam._m0[80u].x;
            float _3142 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3143 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            _3197 = ((abs(_3001 / _2990) * cbSceneParam._m0[80u].y) * ((((_3152 - _3153) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))))) * _3141)) - ((exp2(_3011 * _3152) - exp2(_3011 * _3153)) * _3141))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3199 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, 1.0), 0.0);
        float _3208 = exp2((_3197 * (-1.44269502162933349609375)) * (1.0 - _3199.w));
        float _3209 = log2(_3208);
        float _3225 = log2(_2921);
        _3013 = (exp2(_3225 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].x)) * _3199.x) / cbSceneParam._m0[78u].x)) + _2918;
        _3015 = (exp2(_3225 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].y)) * _3199.y) / cbSceneParam._m0[78u].y)) + _2919;
        _3017 = (exp2(_3225 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].z)) * _3199.z) / cbSceneParam._m0[78u].z)) + _2920;
        _3019 = _3208 * _2921;
    }
    else
    {
        _3013 = _2918;
        _3015 = _2919;
        _3017 = _2920;
        _3019 = _2921;
    }
    bool _3235;
    vec4 _3029;
    vec4 _3051;
    float _3053;
    float _3057;
    float _3058;
    float _3059;
    float _3062;
    float _3065;
    float _3068;
    float _3069;
    bool _3079;
    for (;;)
    {
        _3029 = cbMatDynParam._m0[0u];
        float _3031 = roundEven(_3029.y);
        bool _3032 = _3031 == 3.0;
        float _3033 = log2(_3019);
        float _3037 = exp2(_3033 * cbSceneParam._m0[78u].x);
        float _3038 = exp2(_3033 * cbSceneParam._m0[78u].y);
        float _3039 = exp2(_3033 * cbSceneParam._m0[78u].z);
        float _3040 = _3037 * _2880;
        float _3041 = _3038 * _2881;
        float _3042 = _3039 * _2882;
        float _3049 = _967 + (-0.5);
        _3051 = cbMtdParam._m0[1u];
        _3053 = _3051.y * _3049;
        float _3056 = (_3031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3057 = _3056 * (_3032 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3013)));
        _3058 = _3056 * (_3032 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3015)));
        _3059 = _3056 * (_3032 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3017)));
        _3062 = ((_2888 * _2892) * _3037) * _3056;
        _3065 = ((_2889 * _2892) * _3038) * _3056;
        _3068 = ((_2890 * _2892) * _3039) * _3056;
        _3069 = _3049 * 0.999000012874603271484375;
        _3079 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3079)
        {
            if ((cbInstanceData._m0[_1016 + 7u].x + _3069) < 0.5)
            {
                _3235 = true;
                break;
            }
        }
        uint _3176 = _1017 + uint(_3029.w);
        if ((cbInstanceData._m0[_3176].w < 1.0) && ((cbInstanceData._m0[_3176].w + _3069) < 0.5))
        {
            _3235 = true;
            break;
        }
        if ((_3053 + 1.0) < _3051.x)
        {
            _3235 = true;
            break;
        }
        _3235 = false;
        break;
    }
    float _3440;
    if (_3235)
    {
        discard_state = true;
        _3440 = 0.0;
    }
    else
    {
        _3440 = cbInstanceData._m0[_2893].w;
    }
    SV_Target.x = _3057;
    SV_Target.y = _3058;
    SV_Target.z = _3059;
    SV_Target.w = _3440;
    SV_Target_1.x = _3062;
    SV_Target_1.y = _3065;
    SV_Target_1.z = _3068;
    SV_Target_1.w = cbInstanceData._m0[_2893].w;
    discard_exit();
}


