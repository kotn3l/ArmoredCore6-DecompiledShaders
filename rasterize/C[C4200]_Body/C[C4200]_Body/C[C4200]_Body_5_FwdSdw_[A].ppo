#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1641;
float _4336;
float _4337;
float _4338;
float _4339;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _294 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _307 = exp2(log2(_294.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _323 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _327 = _323.z;
    float _335 = exp2(log2(_327 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    vec4 _349 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _352 = _349.y;
    float _355 = (_349.x + (-0.02500000037252902984619140625)) * 8.0;
    float _359 = roundEven(5.0 - _355);
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _361 = isnan(4.0) ? _360 : (isnan(_360) ? 4.0 : min(_360, 4.0));
    float _374 = floor(_361);
    vec4 _377 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _374));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = cbMtdParam._m0[17u].x;
    _206[0u] = cbMtdParam._m0[17u].y;
    _207[0u] = cbMtdParam._m0[17u].z;
    _205[1u] = cbMtdParam._m0[15u].x;
    _206[1u] = cbMtdParam._m0[15u].y;
    _207[1u] = cbMtdParam._m0[15u].z;
    _205[2u] = cbMtdParam._m0[14u].x;
    _206[2u] = cbMtdParam._m0[14u].y;
    _207[2u] = cbMtdParam._m0[14u].z;
    _205[3u] = cbMtdParam._m0[13u].x;
    _206[3u] = cbMtdParam._m0[13u].y;
    _207[3u] = cbMtdParam._m0[13u].z;
    _205[4u] = cbMtdParam._m0[12u].x;
    _206[4u] = cbMtdParam._m0[12u].y;
    _207[4u] = cbMtdParam._m0[12u].z;
    _205[5u] = cbMtdParam._m0[18u].x;
    _206[5u] = cbMtdParam._m0[18u].y;
    _207[5u] = cbMtdParam._m0[18u].z;
    float _441 = roundEven(_355);
    float _442 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    uint _444 = uint(int(isnan(5.0) ? _442 : (isnan(_442) ? 5.0 : min(_442, 5.0))));
    vec4 _474 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _485 = cbMtdParam._m0[9u].x * _474.x;
    float _486 = cbMtdParam._m0[9u].y * _474.y;
    float _487 = cbMtdParam._m0[9u].z * _474.z;
    float _494 = ((((((_205[_444] - cbMtdParam._m0[10u].x) * _352) + cbMtdParam._m0[10u].x) * _377.x) - _485) * _337) + _485;
    float _495 = ((((((_206[_444] - cbMtdParam._m0[10u].y) * _352) + cbMtdParam._m0[10u].y) * _377.y) - _486) * _337) + _486;
    float _496 = ((((((_207[_444] - cbMtdParam._m0[10u].z) * _352) + cbMtdParam._m0[10u].z) * _377.z) - _487) * _337) + _487;
    float _502 = exp2(log2(_323.w) * cbMtdParam._m0[24u].w);
    vec4 _515 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _535 = (((cbMtdParam._m0[16u].x * _515.x) - _494) * _502) + _494;
    float _536 = (((cbMtdParam._m0[16u].y * _515.y) - _495) * _502) + _495;
    float _537 = (((cbMtdParam._m0[16u].z * _515.z) - _496) * _502) + _496;
    vec4 _549 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _574 = (_294.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _549.x) - _535) * _309) + _535);
    float _576 = (_294.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _549.y) - _536) * _309) + _536);
    float _578 = (_294.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _549.z) - _537) * _309) + _537);
    vec4 _590 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _609 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_274.x + 0.00999999977648258209228515625));
    float _611 = _609 * (cbMtdParam._m0[25u].z + 1.0);
    float _4388 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _619 = (_612 * ((cbMtdParam._m0[11u].x * _590.x) - _574)) + _574;
    float _620 = (((cbMtdParam._m0[11u].y * _590.y) - _576) * _612) + _576;
    float _621 = (((cbMtdParam._m0[11u].z * _590.z) - _578) * _612) + _578;
    float _200[5];
    float _201[5];
    _200[0u] = cbMtdParam._m0[30u].z;
    _201[0u] = cbMtdParam._m0[30u].w;
    _200[1u] = cbMtdParam._m0[32u].z;
    _201[1u] = cbMtdParam._m0[32u].w;
    _200[2u] = cbMtdParam._m0[32u].x;
    _201[2u] = cbMtdParam._m0[32u].y;
    _200[3u] = cbMtdParam._m0[31u].z;
    _201[3u] = cbMtdParam._m0[31u].w;
    _200[4u] = cbMtdParam._m0[31u].x;
    _201[4u] = cbMtdParam._m0[31u].y;
    float _657 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    uint _659 = uint(int(isnan(4.0) ? _657 : (isnan(_657) ? 4.0 : min(_657, 4.0))));
    float _666 = ((_201[_659] - cbMtdParam._m0[23u].z) * _337) + cbMtdParam._m0[23u].z;
    float _669 = ((cbMtdParam._m0[23u].w - _666) * _502) + _666;
    float _672 = ((cbMtdParam._m0[26u].y - _669) * _309) + _669;
    float _677 = (cbMtdParam._m0[25u].y + 1.0) * _609;
    float _4409 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _680 = _672 - (_672 * _678);
    vec4 _693 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _374));
    vec4 _710 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _718 = cbMtdParam._m0[23u].x + _710.z;
    float _721 = (((_693.z + _200[_659]) - _718) * _337) + _718;
    vec4 _733 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _744 = (((_733.z - _721) + cbMtdParam._m0[30u].x) * _502) + _721;
    float _750 = ((((_327 * 2.0) * _744) - _744) * cbMtdParam._m0[25u].w) + _744;
    vec4 _762 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _773 = (((cbMtdParam._m0[24u].z + _762.z) - _750) * _309) + _750;
    vec4 _785 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _797 = ((_785.z - _773) * _678) + _773;
    float _810 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _833 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_810 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _810) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _837 = cbPerFrame._m0[22u].x * 2.0;
    float _838 = _837 * cbMtdParam._m0[28u].z;
    float _841 = (_833.x * 0.5) + (-0.25);
    float _844 = (_833.y * 0.5) + (-0.25);
    float _845 = _844 * cbMtdParam._m0[28u].y;
    float _847 = (-0.0) - (cbMtdParam._m0[28u].y * _841);
    float _849 = fract(_838);
    float _851 = fract(_838 + 0.5);
    float _862 = abs((_849 * 2.0) + (-1.0));
    vec4 _878 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_849 * _847) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_845 * _849) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _880 = _878.x;
    float _881 = _878.y;
    float _882 = _878.z;
    vec4 _883 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_851 * _847) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_845 * _851) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _894 = ((_883.x - _880) * _862) + _880;
    float _901 = exp2(log2(_894 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _902 = isnan(cbMtdParam._m0[29u].y) ? _901 : (isnan(_901) ? cbMtdParam._m0[29u].y : max(_901, cbMtdParam._m0[29u].y));
    float _903 = isnan(cbMtdParam._m0[29u].z) ? _902 : (isnan(_902) ? cbMtdParam._m0[29u].z : min(_902, cbMtdParam._m0[29u].z));
    float _927 = (cbMtdParam._m0[33u].x * _810) + TEXCOORD;
    float _928 = (cbMtdParam._m0[33u].y * _810) + TEXCOORD_1;
    float _931 = _837 * cbMtdParam._m0[27u].w;
    float _932 = _844 * cbMtdParam._m0[27u].z;
    float _934 = (-0.0) - (cbMtdParam._m0[27u].z * _841);
    float _935 = fract(_931);
    float _937 = fract(_931 + 0.5);
    float _948 = abs((_935 * 2.0) + (-1.0));
    vec4 _965 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_935 * _934) + _927) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_932 * _935) + _928) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _970 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_937 * _934) + _927) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_932 * _937) + _928) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1007 = ((_693.x - _712) * _337) + _712;
    float _1008 = ((_693.y - _713) * _337) + _713;
    float _1013 = ((_733.x - _1007) * _502) + _1007;
    float _1014 = ((_733.y - _1008) * _502) + _1008;
    float _1023 = ((((_762.x - _1013) * _309) + _1013) * 2.0) + (-1.0);
    float _1024 = ((((_762.y - _1014) * _309) + _1014) * 2.0) + (-1.0);
    float _1025 = dot(vec2(_1023, _1024), vec2(_1023, _1024));
    float _4430 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1030 = sqrt(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))));
    float _1039 = ((cbMtdParam._m0[26u].z * ((_323.x * 2.0) + (-1.0))) + _1023) + (((((_785.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _678);
    float _1040 = ((cbMtdParam._m0[26u].z * ((_323.y * 2.0) + (-1.0))) + _1024) + (((((_785.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _678);
    float _1042 = gl_FragCoord.x * 0.125;
    float _1044 = gl_FragCoord.y * 0.125;
    float _1054 = fma(_1030, _247 * NORMAL.x, fma(_1040, _254 * TANGENT.x, (_240 * _232) * _1039));
    float _1057 = fma(_1030, _247 * NORMAL.y, fma(_1040, _254 * TANGENT.y, (_240 * _233) * _1039));
    float _1060 = fma(_1030, _247 * NORMAL.z, fma(_1040, _254 * TANGENT.z, (_240 * _234) * _1039));
    float _1064 = inversesqrt(dot(vec3(_1054, _1057, _1060), vec3(_1054, _1057, _1060)));
    float _1065 = _1064 * _1054;
    float _1066 = _1064 * _1057;
    float _1067 = _1064 * _1060;
    float _4441 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _1068 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _4452 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4463 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4474 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4485 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1072 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1042, _1044)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1092 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1142 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1132);
    float _1143 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1132);
    float _1144 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1132);
    float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
    float _1149 = _1142 * _1148;
    float _1150 = _1143 * _1148;
    float _1151 = _1144 * _1148;
    vec4 _1153 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1042, _1044));
    float _1155 = _1153.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1325 = sqrt(((_1142 * _1142) + (_1143 * _1143)) + (_1144 * _1144));
        float _1331 = (cbMatDynParam._m0[5u].x * _1325) + cbMatDynParam._m0[5u].y;
        float _4496 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1336 = (cbMatDynParam._m0[5u].z * _1325) + cbMatDynParam._m0[5u].w;
        float _4507 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) - _1332)) + _1332) < ((_1155 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1166 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1167 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1185 = fma(_1067, cbSceneParam._m0[5u].z, fma(_1066, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1065));
    float _1188 = fma(_1067, cbSceneParam._m0[6u].z, fma(_1066, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1065));
    float _1191 = fma(_1067, cbSceneParam._m0[7u].z, fma(_1066, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1065));
    uint _1204 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1205 = _1204 + 9u;
    uint _1206 = _1205 + uint(cbMatDynParam._m0[0u].w);
    float _1212 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * cbInstanceData._m0[_1206].x;
    float _1213 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * cbInstanceData._m0[_1206].y;
    float _1214 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * cbInstanceData._m0[_1206].z;
    float _4518 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _4529 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _4540 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1217 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _1218 = 1.0 - _1072;
    float _1219 = _1215 * _1218;
    float _1220 = _1216 * _1218;
    float _1221 = _1217 * _1218;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1072;
    float _1227 = (_1216 + (-0.039999999105930328369140625)) * _1072;
    float _1228 = (_1217 + (-0.039999999105930328369140625)) * _1072;
    float _1229 = _1226 + 0.039999999105930328369140625;
    float _1231 = _1227 + 0.039999999105930328369140625;
    float _1232 = _1228 + 0.039999999105930328369140625;
    vec4 _1241 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1166, cbSceneParam._m0[86u].y * _1167));
    float _1244 = _1241.x * TEXCOORD_3.w;
    float _1245 = dot(vec3(_1065, _1066, _1067), vec3(_1149, _1150, _1151));
    float _1248 = _1245 * 2.0;
    float _1252 = (_1248 * _1065) - _1149;
    float _1253 = (_1248 * _1066) - _1150;
    float _1254 = (_1248 * _1067) - _1151;
    float _1258 = abs(dot(vec3(_1149, _1150, _1151), vec3(_1065, _1066, _1067)));
    float _4551 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1260 = sqrt(_1068);
    float _1271 = exp2((_1260 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1260 * 3.0));
    float _1277 = (1.0 - _1271) * ((_1260 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1278 = _1271 * _1260;
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1314 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1640;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1367 = fma(_1314, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1306));
        float _1371 = fma(_1314, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1306));
        float _1375 = fma(_1314, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1306));
        float _1399 = _1306 + _1065;
        float _1400 = _1310 + _1066;
        float _1401 = _1314 + _1067;
        float _1411 = fma(_1401, cbModelParam._m0[26u].z, fma(_1400, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1399)) - _1367;
        float _1412 = fma(_1401, cbModelParam._m0[27u].z, fma(_1400, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1399)) - _1371;
        float _1413 = fma(_1401, cbModelParam._m0[28u].z, fma(_1400, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1399)) - _1375;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1429 = ((_1417 * _1411) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1367 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1417 * _1412) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1371 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1413) / cbModelParam._m0[34u].z) + ((((((_1375 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1468 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1434.x + (-0.5));
        float _1470 = _1468 * (_1434.y + (-0.5));
        float _1471 = _1468 * (_1434.z + (-0.5));
        float _1478 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1441.x + (-0.5));
        float _1480 = _1478 * (_1441.y + (-0.5));
        float _1481 = _1478 * (_1441.z + (-0.5));
        float _1488 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1448.x + (-0.5));
        float _1490 = _1488 * (_1448.y + (-0.5));
        float _1491 = _1488 * (_1448.z + (-0.5));
        float _1498 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1455.x + (-0.5));
        float _1500 = _1498 * (_1455.y + (-0.5));
        float _1501 = _1498 * (_1455.z + (-0.5));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = _1469 * 0.5;
        float _1506 = _1479 * 0.5;
        float _1507 = _1489 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1522 = (dot(vec3(_1065, _1066, _1067), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1532 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4599 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1534 + 1.0))) + _1539) * _1502;
        float _1549 = _1470 * 0.5;
        float _1550 = _1480 * 0.5;
        float _1551 = _1490 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_1065, _1066, _1067), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4610 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4621 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4632 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_1576 + 1.0))) + _1581) * _1503;
        float _1591 = _1471 * 0.5;
        float _1592 = _1481 * 0.5;
        float _1593 = _1491 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_1065, _1066, _1067), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4643 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4654 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4665 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_1618 + 1.0))) + _1623) * _1504;
        _1640 = _1471;
        _1642 = _1470;
        _1643 = _1469;
        _1644 = _1481;
        _1645 = _1480;
        _1646 = _1479;
        _1647 = _1491;
        _1648 = _1490;
        _1649 = _1489;
        _1650 = _1504;
        _1651 = _1503;
        _1652 = _1502;
        _1653 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1654 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1655 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
    }
    else
    {
        _1640 = _1641;
        _1642 = _1641;
        _1643 = _1641;
        _1644 = _1641;
        _1645 = _1641;
        _1646 = _1641;
        _1647 = _1641;
        _1648 = _1641;
        _1649 = _1641;
        _1650 = _1641;
        _1651 = _1641;
        _1652 = _1641;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1678 = fma(_1314, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306));
        float _1682 = fma(_1314, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306));
        float _1686 = fma(_1314, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306));
        float _1709 = _1306 + _1065;
        float _1710 = _1310 + _1066;
        float _1711 = _1314 + _1067;
        float _1721 = fma(_1711, cbModelParam._m0[30u].z, fma(_1710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1709)) - _1678;
        float _1722 = fma(_1711, cbModelParam._m0[31u].z, fma(_1710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1709)) - _1682;
        float _1723 = fma(_1711, cbModelParam._m0[32u].z, fma(_1710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1709)) - _1686;
        float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
        float _1740 = ((_1727 * _1721) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1678 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1741 = ((_1727 * _1722) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1682 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1742 = ((_1727 * _1723) / cbModelParam._m0[35u].z) + ((((((_1686 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1740, _1741, _1742), 0.0);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1740, _1741, _1742), 0.0);
        vec4 _1758 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1740, _1741, _1742), 0.0);
        vec4 _1765 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1740, _1741, _1742), 0.0);
        float _1777 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1778 = _1777 * (_1744.x + (-0.5));
        float _1779 = _1777 * (_1744.y + (-0.5));
        float _1780 = _1777 * (_1744.z + (-0.5));
        float _1787 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1751.x + (-0.5));
        float _1789 = _1787 * (_1751.y + (-0.5));
        float _1790 = _1787 * (_1751.z + (-0.5));
        float _1797 = exp2((_1758.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1758.x + (-0.5));
        float _1799 = _1797 * (_1758.y + (-0.5));
        float _1800 = _1797 * (_1758.z + (-0.5));
        float _1807 = exp2((_1765.w + (-0.5)) * 20.0) * 2.0;
        float _1808 = _1807 * (_1765.x + (-0.5));
        float _1809 = _1807 * (_1765.y + (-0.5));
        float _1810 = _1807 * (_1765.z + (-0.5));
        float _1811 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1812 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1813 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1814 = _1778 * 0.5;
        float _1815 = _1788 * 0.5;
        float _1816 = _1798 * 0.5;
        float _1817 = dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816));
        float _1822 = (_1817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1817);
        float _1830 = (dot(vec3(_1065, _1066, _1067), vec3(_1822 * _1814, _1822 * _1815, _1822 * _1816)) + 1.0) * 0.5;
        float _4706 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816)) / (_1811 + 9.9999997473787516355514526367188e-06);
        float _4717 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _1841 = _1840 * 2.0;
        float _1845 = (1.0 - _1840) / (_1840 + 1.0);
        float _4728 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _1855 = ((((1.0 - _1846) * (_1841 + 2.0)) * exp2(log2(isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_1841 + 1.0))) + _1846) * _1811;
        float _1856 = _1779 * 0.5;
        float _1857 = _1789 * 0.5;
        float _1858 = _1799 * 0.5;
        float _1859 = dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858));
        float _1864 = (_1859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1859);
        float _1872 = (dot(vec3(_1065, _1066, _1067), vec3(_1864 * _1856, _1864 * _1857, _1864 * _1858)) + 1.0) * 0.5;
        float _4739 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1881 = sqrt(((_1857 * _1857) + (_1856 * _1856)) + (_1858 * _1858)) / (_1812 + 9.9999997473787516355514526367188e-06);
        float _4750 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _1883 = _1882 * 2.0;
        float _1887 = (1.0 - _1882) / (_1882 + 1.0);
        float _4761 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _1897 = ((((1.0 - _1888) * (_1883 + 2.0)) * exp2(log2(isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_1883 + 1.0))) + _1888) * _1812;
        float _1898 = _1780 * 0.5;
        float _1899 = _1790 * 0.5;
        float _1900 = _1800 * 0.5;
        float _1901 = dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900));
        float _1906 = (_1901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1901);
        float _1914 = (dot(vec3(_1065, _1066, _1067), vec3(_1906 * _1898, _1906 * _1899, _1906 * _1900)) + 1.0) * 0.5;
        float _4772 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1923 = sqrt(((_1899 * _1899) + (_1898 * _1898)) + (_1900 * _1900)) / (_1813 + 9.9999997473787516355514526367188e-06);
        float _4783 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _1925 = _1924 * 2.0;
        float _1929 = (1.0 - _1924) / (_1924 + 1.0);
        float _4794 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _1939 = ((((1.0 - _1930) * (_1925 + 2.0)) * exp2(log2(isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_1925 + 1.0))) + _1930) * _1813;
        _1947 = _1780;
        _1948 = _1779;
        _1949 = _1778;
        _1950 = _1790;
        _1951 = _1789;
        _1952 = _1788;
        _1953 = _1800;
        _1954 = _1799;
        _1955 = _1798;
        _1956 = _1813;
        _1957 = _1812;
        _1958 = _1811;
        _1959 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)));
        _1960 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)));
        _1961 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)));
    }
    else
    {
        _1947 = _1641;
        _1948 = _1641;
        _1949 = _1641;
        _1950 = _1641;
        _1951 = _1641;
        _1952 = _1641;
        _1953 = _1641;
        _1954 = _1641;
        _1955 = _1641;
        _1956 = _1641;
        _1957 = _1641;
        _1958 = _1641;
        _1959 = 0.0;
        _1960 = 0.0;
        _1961 = 0.0;
    }
    float _1971 = (cbModelParam._m0[1u].x * (_1959 - _1653)) + _1653;
    float _1972 = (cbModelParam._m0[1u].x * (_1960 - _1654)) + _1654;
    float _1973 = (cbModelParam._m0[1u].x * (_1961 - _1655)) + _1655;
    float _1994 = fma(_1973, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1973, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1973, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1971));
    float _2015 = _1252 * 0.5;
    float _2016 = _1253 * 0.5;
    float _2017 = _1254 * 0.5;
    float _2018 = dot(vec4(_2015, _2016, _2017, 1.0), vec4(_1949, _1952, _1955, _1958));
    float _2021 = dot(vec4(_2015, _2016, _2017, 1.0), vec4(_1948, _1951, _1954, _1957));
    float _2024 = dot(vec4(_2015, _2016, _2017, 1.0), vec4(_1947, _1950, _1953, _1956));
    float _2058;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2031 = dot(vec4(_2015, _2016, _2017, 1.0), vec4(_1640, _1644, _1647, _1650));
        float _2035 = dot(vec4(_2015, _2016, _2017, 1.0), vec4(_1642, _1645, _1648, _1651));
        float _2039 = dot(vec4(_2015, _2016, _2017, 1.0), vec4(_1643, _1646, _1649, _1652));
        float _2046 = dot(vec4(cbModelParam._m0[39u]), vec4(_2015, _2016, _2017, 1.0));
        _2058 = dot(vec3(isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)), isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)), isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2046) ? 0.0 : (isnan(0.0) ? _2046 : max(0.0, _2046))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2058 = 1.0;
    }
    float _2069;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2060 = dot(vec4(cbModelParam._m0[40u]), vec4(_2015, _2016, _2017, 1.0));
        _2069 = dot(vec3(isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)), isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2060) ? 0.0 : (isnan(0.0) ? _2060 : max(0.0, _2060))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2069 = 1.0;
    }
    float _2073 = (_2069 * cbModelParam._m0[1u].x) + (_2058 * (1.0 - cbModelParam._m0[1u].x));
    float _2083 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1068);
    float _2084 = isnan(_2083) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2083 : min(cbModelParam._m0[25u].z, _2083));
    float _2164;
    float _2166;
    float _2168;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2131 = fma(_1314, cbModelParam._m0[13u].z, fma(_1310, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1306)) + cbModelParam._m0[13u].w;
        float _2135 = fma(_1314, cbModelParam._m0[14u].z, fma(_1310, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1306)) + cbModelParam._m0[14u].w;
        float _2139 = fma(_1314, cbModelParam._m0[15u].z, fma(_1310, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1306)) + cbModelParam._m0[15u].w;
        float _2142 = fma(_1254, cbModelParam._m0[13u].z, fma(_1253, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1252));
        float _2145 = fma(_1254, cbModelParam._m0[14u].z, fma(_1253, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1252));
        float _2148 = fma(_1254, cbModelParam._m0[15u].z, fma(_1253, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1252));
        float _2176;
        if (_2142 > 0.0)
        {
            _2176 = abs((1.0 - _2131) / _2142);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2131 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2176 = frontier_phi_19_17_ladder;
        }
        float _2347;
        if (_2145 > 0.0)
        {
            _2347 = abs((1.0 - _2135) / _2145);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2135 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2347 = frontier_phi_28_24_ladder;
        }
        float _2641;
        if (_2148 > 0.0)
        {
            _2641 = abs((1.0 - _2139) / _2148);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2139 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2641 = frontier_phi_40_35_ladder;
        }
        float _2643 = isnan(_2347) ? _2176 : (isnan(_2176) ? _2347 : min(_2176, _2347));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _2142) + _2131;
        float _2649 = (_2644 * _2145) + _2135;
        float _2650 = (_2644 * _2148) + _2139;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2651;
        float _2655 = _2651 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 > _2655) || ((_2649 < _2653) || ((_2648 < _2653) || (_2648 > _2655))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2650, cbModelParam._m0[9u].z, fma(_2649, cbModelParam._m0[9u].y, _2648 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2650, cbModelParam._m0[10u].z, fma(_2649, cbModelParam._m0[10u].y, _2648 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2650, cbModelParam._m0[11u].z, fma(_2649, cbModelParam._m0[11u].y, _2648 * cbModelParam._m0[11u].x))), _2084);
            frontier_phi_18_40_ladder = _2795.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2795.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2795.x * cbModelParam._m0[1u].y;
        }
        _2164 = frontier_phi_18_40_ladder_2;
        _2166 = frontier_phi_18_40_ladder_1;
        _2168 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2152 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1252, _1253, _1254), _2084);
        _2164 = _2152.x * cbModelParam._m0[1u].y;
        _2166 = _2152.y * cbModelParam._m0[1u].y;
        _2168 = _2152.z * cbModelParam._m0[1u].y;
    }
    float _2172 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1068);
    float _2173 = isnan(_2172) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2172 : min(cbModelParam._m0[25u].w, _2172));
    float _2262;
    float _2264;
    float _2266;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2226 = fma(_1314, cbModelParam._m0[21u].z, fma(_1310, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1306)) + cbModelParam._m0[21u].w;
        float _2230 = fma(_1314, cbModelParam._m0[22u].z, fma(_1310, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1306)) + cbModelParam._m0[22u].w;
        float _2234 = fma(_1314, cbModelParam._m0[23u].z, fma(_1310, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1306)) + cbModelParam._m0[23u].w;
        float _2237 = fma(_1254, cbModelParam._m0[21u].z, fma(_1253, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1252));
        float _2240 = fma(_1254, cbModelParam._m0[22u].z, fma(_1253, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1252));
        float _2243 = fma(_1254, cbModelParam._m0[23u].z, fma(_1253, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1252));
        float _2352;
        if (_2237 > 0.0)
        {
            _2352 = abs((1.0 - _2226) / _2237);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2237 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2226 + 1.0) / _2237);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2352 = frontier_phi_30_26_ladder;
        }
        float _2668;
        if (_2240 > 0.0)
        {
            _2668 = abs((1.0 - _2230) / _2240);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2240 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2230 + 1.0) / _2240);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2668 = frontier_phi_42_37_ladder;
        }
        float _3006;
        if (_2243 > 0.0)
        {
            _3006 = abs((1.0 - _2234) / _2243);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2234 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _3006 = frontier_phi_52_49_ladder;
        }
        float _3008 = isnan(_2668) ? _2352 : (isnan(_2352) ? _2668 : min(_2352, _2668));
        float _3009 = isnan(_3006) ? _3008 : (isnan(_3008) ? _3006 : min(_3008, _3006));
        float _3013 = (_3009 * _2237) + _2226;
        float _3014 = (_3009 * _2240) + _2230;
        float _3015 = (_3009 * _2243) + _2234;
        float _3016 = _3009 * 9.9999997473787516355514526367188e-05;
        float _3017 = (-1.0) - _3016;
        float _3019 = _3016 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_3015 > _3019) || ((_3015 < _3017) || ((_3014 > _3019) || ((_3014 < _3017) || ((_3013 < _3017) || (_3013 > _3019))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3015, cbModelParam._m0[17u].z, fma(_3014, cbModelParam._m0[17u].y, _3013 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3015, cbModelParam._m0[18u].z, fma(_3014, cbModelParam._m0[18u].y, _3013 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3015, cbModelParam._m0[19u].z, fma(_3014, cbModelParam._m0[19u].y, _3013 * cbModelParam._m0[19u].x))), _2173);
            frontier_phi_27_52_ladder = _3137.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3137.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3137.x * cbModelParam._m0[1u].z;
        }
        _2262 = frontier_phi_27_52_ladder_2;
        _2264 = frontier_phi_27_52_ladder_1;
        _2266 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2246 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1252, _1253, _1254), _2173);
        _2262 = _2246.x * cbModelParam._m0[1u].z;
        _2264 = _2246.y * cbModelParam._m0[1u].z;
        _2266 = _2246.z * cbModelParam._m0[1u].z;
    }
    float _2279 = (((_1277 * _1229) + _1278) * _1244) * ((cbModelParam._m0[1u].w * (_2262 - _2164)) + _2164);
    float _2281 = (((_1277 * _1231) + _1278) * _1244) * ((cbModelParam._m0[1u].w * (_2264 - _2166)) + _2166);
    float _2283 = (((_1277 * _1232) + _1278) * _1244) * ((cbModelParam._m0[1u].w * (_2266 - _2168)) + _2168);
    float _2286 = fma(_2283, cbSceneParam._m0[89u].z, fma(_2281, cbSceneParam._m0[89u].y, _2279 * cbSceneParam._m0[89u].x));
    float _2289 = fma(_2283, cbSceneParam._m0[90u].z, fma(_2281, cbSceneParam._m0[90u].y, _2279 * cbSceneParam._m0[90u].x));
    float _2292 = fma(_2283, cbSceneParam._m0[91u].z, fma(_2281, cbSceneParam._m0[91u].y, _2279 * cbSceneParam._m0[91u].x));
    float _2326 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2330 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2334 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2338 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2339 = _2326 / _2338;
    float _2340 = _2330 / _2338;
    float _2341 = _2334 / _2338;
    float _2487;
    float _2488;
    float _2489;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2368 = ((uint(_2341 > cbSceneParam._m0[59u].y) + uint(_2341 > cbSceneParam._m0[59u].x)) + uint(_2341 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2369 = _2368 + 43u;
        uint _2377 = _2368 + 44u;
        uint _2385 = _2368 + 45u;
        uint _2393 = _2368 + 46u;
        float _2404 = fma(_2338, cbSceneParam._m0[_2369].w, fma(_2334, cbSceneParam._m0[_2369].z, fma(_2330, cbSceneParam._m0[_2369].y, _2326 * cbSceneParam._m0[_2369].x)));
        float _2408 = fma(_2338, cbSceneParam._m0[_2377].w, fma(_2334, cbSceneParam._m0[_2377].z, fma(_2330, cbSceneParam._m0[_2377].y, _2326 * cbSceneParam._m0[_2377].x)));
        float _2416 = fma(_2338, cbSceneParam._m0[_2393].w, fma(_2334, cbSceneParam._m0[_2393].z, fma(_2330, cbSceneParam._m0[_2393].y, _2326 * cbSceneParam._m0[_2393].x)));
        float _2420 = cbSceneParam._m0[33u].z * _2416;
        float _2422 = cbSceneParam._m0[33u].w * _2416;
        float _2425 = fma(_2338, cbSceneParam._m0[_2385].w, fma(_2334, cbSceneParam._m0[_2385].z, fma(_2330, cbSceneParam._m0[_2385].y, _2326 * cbSceneParam._m0[_2385].x))) / _2416;
        float _2473 = (cbSceneParam._m0[33u].x - sqrt(((_2340 * _2340) + (_2339 * _2339)) + (_2341 * _2341))) * cbSceneParam._m0[33u].y;
        float _4920 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2480 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2420 + _2404) / _2416, (_2422 + _2408) / _2416), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2422 + _2404) / _2416, (_2408 - _2420) / _2416), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2404 - _2420) / _2416, (_2408 - _2422) / _2416), _2425), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2404 - _2422) / _2416, (_2420 + _2408) / _2416), _2425), 0.0)).x), vec4(0.25)));
        _2487 = 1.0 - (_2480 * cbSceneParam._m0[34u].x);
        _2488 = 1.0 - (_2480 * cbSceneParam._m0[34u].y);
        _2489 = 1.0 - (_2480 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2487 = 1.0;
        _2488 = 1.0;
        _2489 = 1.0;
    }
    float _2553;
    float _2555;
    float _2557;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2541 = fma(_2338, cbSceneParam._m0[63u].w, fma(_2334, cbSceneParam._m0[63u].z, fma(_2330, cbSceneParam._m0[63u].y, _2326 * cbSceneParam._m0[63u].x)));
        float _2542 = fma(_2338, cbSceneParam._m0[60u].w, fma(_2334, cbSceneParam._m0[60u].z, fma(_2330, cbSceneParam._m0[60u].y, _2326 * cbSceneParam._m0[60u].x))) / _2541;
        float _2543 = fma(_2338, cbSceneParam._m0[61u].w, fma(_2334, cbSceneParam._m0[61u].z, fma(_2330, cbSceneParam._m0[61u].y, _2326 * cbSceneParam._m0[61u].x))) / _2541;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2542 >= cbSceneParam._m0[64u].x) && (_2543 >= cbSceneParam._m0[64u].y)) && (_2542 <= cbSceneParam._m0[64u].z)) && (_2543 <= cbSceneParam._m0[64u].w))
        {
            float _2681 = fma(_2338, cbSceneParam._m0[62u].w, fma(_2334, cbSceneParam._m0[62u].z, fma(_2330, cbSceneParam._m0[62u].y, _2326 * cbSceneParam._m0[62u].x))) / _2541;
            float _2685 = isnan(cbSceneParam._m0[41u].w) ? _2681 : (isnan(_2681) ? cbSceneParam._m0[41u].w : max(_2681, cbSceneParam._m0[41u].w));
            float _2728 = (cbSceneParam._m0[33u].x - sqrt(((_2340 * _2340) + (_2339 * _2339)) + (_2341 * _2341))) * cbSceneParam._m0[33u].y;
            float _4936 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
            float _2735 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2542, cbSceneParam._m0[33u].w + _2543), _2685), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2542, _2543 - cbSceneParam._m0[33u].z), _2685), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2542 - cbSceneParam._m0[33u].z, _2543 - cbSceneParam._m0[33u].w), _2685), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2542 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2543), _2685), 0.0)).x), vec4(0.25)));
            float _2739 = 1.0 - (_2735 * cbSceneParam._m0[34u].x);
            float _2740 = 1.0 - (_2735 * cbSceneParam._m0[34u].y);
            float _2741 = 1.0 - (_2735 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2741) ? _2489 : (isnan(_2489) ? _2741 : min(_2489, _2741));
            frontier_phi_39_38_ladder_1 = isnan(_2740) ? _2488 : (isnan(_2488) ? _2740 : min(_2488, _2740));
            frontier_phi_39_38_ladder_2 = isnan(_2739) ? _2487 : (isnan(_2487) ? _2739 : min(_2487, _2739));
        }
        else
        {
            frontier_phi_39_38_ladder = _2489;
            frontier_phi_39_38_ladder_1 = _2488;
            frontier_phi_39_38_ladder_2 = _2487;
        }
        _2553 = frontier_phi_39_38_ladder_2;
        _2555 = frontier_phi_39_38_ladder_1;
        _2557 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2553 = _2487;
        _2555 = _2488;
        _2557 = _2489;
    }
    uvec4 _2562 = floatBitsToUint(cbInstanceData._m0[_1204 + 5u]);
    uint _2564 = _2562.x * 14u;
    uint _2565 = _2564 + 13u;
    float _2572 = _1244 + (-1.0);
    float _2577 = (cbLight._m0[_2565].x * _2572) + 1.0;
    float _2578 = (cbLight._m0[_2565].y * _2572) + 1.0;
    float _2579 = (cbLight._m0[_2565].z * _2572) + 1.0;
    float _2580 = (cbLight._m0[_2565].w * _2572) + 1.0;
    uint _2581 = _2564 + 5u;
    float _2587 = isnan(1.0) ? _2578 : (isnan(_2578) ? 1.0 : min(_2578, 1.0));
    uint _2591 = _2564 + 4u;
    float _2600 = isnan(1.0) ? _2577 : (isnan(_2577) ? 1.0 : min(_2577, 1.0));
    uint _2604 = _2564 | 1u;
    float _2615 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_1065, _1066, _1067));
    float _2618 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_1065, _1066, _1067));
    float _4972 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _4983 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2623 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * 0.3183098733425140380859375;
    float _2625 = (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * 0.3183098733425140380859375;
    float _2632 = ((cbLight._m0[_2581].x * _2587) * _2625) + (((cbLight._m0[_2591].x * _2553) * _2600) * _2623);
    float _2633 = ((_2587 * cbLight._m0[_2581].y) * _2625) + (((cbLight._m0[_2591].y * _2555) * _2600) * _2623);
    float _2634 = ((_2587 * cbLight._m0[_2581].z) * _2625) + (((cbLight._m0[_2591].z * _2557) * _2600) * _2623);
    uvec4 _2638 = floatBitsToUint(cbLight._m0[_2564 + 12u]);
    bool _2640 = _2638.x == 0u;
    float _2742;
    float _2744;
    float _2746;
    if (_2640)
    {
        _2742 = _2632;
        _2744 = _2633;
        _2746 = _2634;
    }
    else
    {
        uint _2750 = _2564 + 6u;
        float _2766 = (dot(vec3(cbLight._m0[_2564 + 2u].xyz), vec3(_1065, _1066, _1067)) * 0.5) + 0.5;
        float _2767 = _2766 * _2766;
        float _4994 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2768 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
        float _2769 = isnan(1.0) ? _2579 : (isnan(_2579) ? 1.0 : min(_2579, 1.0));
        _2742 = (((cbLight._m0[_2750].x * 0.3183098733425140380859375) * _2768) * _2769) + _2632;
        _2744 = (((cbLight._m0[_2750].y * 0.3183098733425140380859375) * _2768) * _2769) + _2633;
        _2746 = (((cbLight._m0[_2750].z * 0.3183098733425140380859375) * _2768) * _2769) + _2634;
    }
    bool _2749 = _2638.y == 0u;
    float _2804;
    float _2806;
    float _2808;
    if (_2749)
    {
        _2804 = _2742;
        _2806 = _2744;
        _2808 = _2746;
    }
    else
    {
        uint _2977 = _2564 + 7u;
        float _2993 = (dot(vec3(cbLight._m0[_2564 + 3u].xyz), vec3(_1065, _1066, _1067)) * 0.5) + 0.5;
        float _2994 = _2993 * _2993;
        float _5010 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2995 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _2996 = isnan(1.0) ? _2580 : (isnan(_2580) ? 1.0 : min(_2580, 1.0));
        _2804 = (((cbLight._m0[_2977].x * 0.3183098733425140380859375) * _2995) * _2996) + _2742;
        _2806 = (((cbLight._m0[_2977].y * 0.3183098733425140380859375) * _2995) * _2996) + _2744;
        _2808 = (((cbLight._m0[_2977].z * 0.3183098733425140380859375) * _2995) * _2996) + _2746;
    }
    uint _2811 = _2564 + 8u;
    float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _1068) * 0.949999988079071044921875);
    float _2825 = _2824 * _2824;
    float _2826 = cbLight._m0[_2564].x + _1149;
    float _2827 = cbLight._m0[_2564].y + _1150;
    float _2828 = cbLight._m0[_2564].z + _1151;
    float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
    float _2833 = _2832 * _2826;
    float _2834 = _2832 * _2827;
    float _2835 = _2832 * _2828;
    float _2836 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_2564].xyz));
    float _5026 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
    float _2839 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
    float _5037 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _2840 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
    float _2841 = dot(vec3(_1065, _1066, _1067), vec3(_2833, _2834, _2835));
    float _5048 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
    float _2844 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
    float _2845 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2833, _2834, _2835));
    float _5059 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
    float _2849 = _2825 * _2825;
    float _2853 = ((_2844 * _2844) * (_2849 + (-1.0))) + 1.0;
    float _2861 = exp2(log2(1.0 - (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0)))) * 5.0);
    float _2862 = 0.959999978542327880859375 - _1226;
    float _2864 = 0.959999978542327880859375 - _1227;
    float _2865 = 0.959999978542327880859375 - _1228;
    float _2872 = 1.0 - _2825;
    float _2883 = (0.5 / (((_2840 * ((_2839 * _2872) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _2872) + _2825) * _2839))) * _2839;
    float _5070 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2885 = (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_2849 / ((_2853 * _2853) * 3.141590118408203125));
    uint _2899 = _2564 + 9u;
    float _2910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _1068) * 0.949999988079071044921875);
    float _2911 = _2910 * _2910;
    float _2912 = cbLight._m0[_2604].x + _1149;
    float _2913 = cbLight._m0[_2604].y + _1150;
    float _2914 = cbLight._m0[_2604].z + _1151;
    float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
    float _2919 = _2918 * _2912;
    float _2920 = _2918 * _2913;
    float _2921 = _2918 * _2914;
    float _2922 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_2604].xyz));
    float _5081 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    float _2925 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
    float _2926 = dot(vec3(_1065, _1066, _1067), vec3(_2919, _2920, _2921));
    float _5092 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
    float _2929 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
    float _2930 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2919, _2920, _2921));
    float _5103 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
    float _2934 = _2911 * _2911;
    float _2938 = ((_2929 * _2929) * (_2934 + (-1.0))) + 1.0;
    float _2945 = exp2(log2(1.0 - (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) * 5.0);
    float _2952 = 1.0 - _2911;
    float _2962 = (0.5 / (((_2840 * ((_2925 * _2952) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _2952) + _2911) * _2925))) * _2925;
    float _5114 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
    float _2964 = (isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_2934 / ((_2938 * _2938) * 3.141590118408203125));
    float _2974 = (((((_2945 * _2862) + _1229) * cbLight._m0[_2899].x) * _2964) * _2587) + ((((cbLight._m0[_2811].x * _2553) * ((_2861 * _2862) + _1229)) * _2885) * _2600);
    float _2975 = (((((_2945 * _2864) + _1231) * cbLight._m0[_2899].y) * _2964) * _2587) + ((((cbLight._m0[_2811].y * _2555) * ((_2861 * _2864) + _1231)) * _2885) * _2600);
    float _2976 = (((((_2945 * _2865) + _1232) * cbLight._m0[_2899].z) * _2964) * _2587) + ((((cbLight._m0[_2811].z * _2557) * ((_2861 * _2865) + _1232)) * _2885) * _2600);
    float _3032;
    float _3034;
    float _3036;
    if (_2640)
    {
        _3032 = _2974;
        _3034 = _2975;
        _3036 = _2976;
    }
    else
    {
        uint _3038 = _2564 + 2u;
        uint _3042 = _2564 + 10u;
        float _3056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3038].w)) * _1068) * 0.949999988079071044921875);
        float _3057 = _3056 * _3056;
        float _3058 = cbLight._m0[_3038].x + _1149;
        float _3059 = cbLight._m0[_3038].y + _1150;
        float _3060 = cbLight._m0[_3038].z + _1151;
        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
        float _3065 = _3064 * _3058;
        float _3066 = _3064 * _3059;
        float _3067 = _3064 * _3060;
        float _3068 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_3038].xyz));
        float _5125 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3071 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
        float _3072 = dot(vec3(_1065, _1066, _1067), vec3(_3065, _3066, _3067));
        float _5136 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3075 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
        float _3076 = dot(vec3(cbLight._m0[_3038].xyz), vec3(_3065, _3066, _3067));
        float _5147 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3080 = _3057 * _3057;
        float _3084 = ((_3075 * _3075) * (_3080 + (-1.0))) + 1.0;
        float _3091 = exp2(log2(1.0 - (isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0)))) * 5.0);
        float _3098 = 1.0 - _3057;
        float _3108 = (0.5 / (((_2840 * ((_3071 * _3098) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _3098) + _3057) * _3071))) * _3071;
        float _5158 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3110 = (isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0))) * (_3080 / ((_3084 * _3084) * 3.141590118408203125));
        float _3111 = isnan(1.0) ? _2579 : (isnan(_2579) ? 1.0 : min(_2579, 1.0));
        _3032 = (((((_3091 * _2862) + _1229) * cbLight._m0[_3042].x) * _3110) * _3111) + _2974;
        _3034 = (((((_3091 * _2864) + _1231) * cbLight._m0[_3042].y) * _3110) * _3111) + _2975;
        _3036 = (((((_3091 * _2865) + _1232) * cbLight._m0[_3042].z) * _3110) * _3111) + _2976;
    }
    float _3142;
    float _3144;
    float _3146;
    if (_2749)
    {
        _3142 = _3032;
        _3144 = _3034;
        _3146 = _3036;
    }
    else
    {
        uint _3153 = _2564 + 3u;
        uint _3157 = _2564 + 11u;
        float _3171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3153].w)) * _1068) * 0.949999988079071044921875);
        float _3172 = _3171 * _3171;
        float _3173 = cbLight._m0[_3153].x + _1149;
        float _3174 = cbLight._m0[_3153].y + _1150;
        float _3175 = cbLight._m0[_3153].z + _1151;
        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
        float _3180 = _3179 * _3173;
        float _3181 = _3179 * _3174;
        float _3182 = _3179 * _3175;
        float _3183 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_3153].xyz));
        float _5174 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
        float _3186 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
        float _3187 = dot(vec3(_1065, _1066, _1067), vec3(_3180, _3181, _3182));
        float _5185 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
        float _3190 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
        float _3191 = dot(vec3(cbLight._m0[_3153].xyz), vec3(_3180, _3181, _3182));
        float _5196 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
        float _3195 = _3172 * _3172;
        float _3199 = ((_3190 * _3190) * (_3195 + (-1.0))) + 1.0;
        float _3206 = exp2(log2(1.0 - (isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0)))) * 5.0);
        float _3213 = 1.0 - _3172;
        float _3223 = (0.5 / (((_2840 * ((_3186 * _3213) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _3213) + _3172) * _3186))) * _3186;
        float _5207 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
        float _3225 = (isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_3195 / ((_3199 * _3199) * 3.141590118408203125));
        float _3226 = isnan(1.0) ? _2580 : (isnan(_2580) ? 1.0 : min(_2580, 1.0));
        _3142 = (((((_3206 * _2862) + _1229) * cbLight._m0[_3157].x) * _3225) * _3226) + _3032;
        _3144 = (((((_3206 * _2864) + _1231) * cbLight._m0[_3157].y) * _3225) * _3226) + _3034;
        _3146 = (((((_3206 * _2865) + _1232) * cbLight._m0[_3157].z) * _3225) * _3226) + _3036;
    }
    float _3292;
    float _3294;
    float _3296;
    float _3298;
    float _3300;
    float _3302;
    if (_2562.y == 0u)
    {
        uvec4 _3247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3248 = _3247.x;
        uint _3259 = uint((float(_3247.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1167) / _3248))) + floor(float(uint(cbSceneParam._m0[85u].x * _1166) / _3248)));
        float _3269 = (log2(_2341 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3270 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
        uint _3273 = uint(isnan(14.0) ? _3270 : (isnan(_3270) ? 14.0 : min(_3270, 14.0)));
        uvec4 _3278 = texelFetch(g_lightClusterGridBuffer, int(((_3273 << 2u) + (_3259 << 6u)) >> 2u));
        uint _3279 = _3278.x;
        uint _3280 = _3247.z;
        float _3388;
        float _3390;
        float _3392;
        float _3394;
        float _3396;
        float _3398;
        if (((((1u << ((_3280 >> 4u) & 15u)) + 4294967295u) & _3279) == 0u) || ((_3280 & 240u) == 0u))
        {
            _3388 = 0.0;
            _3390 = 0.0;
            _3392 = 0.0;
            _3394 = 0.0;
            _3396 = 0.0;
            _3398 = 0.0;
        }
        else
        {
            float _3389;
            float _3391;
            float _3393;
            float _3395;
            float _3397;
            float _3399;
            float _3549 = 0.0;
            float _3550 = 0.0;
            float _3551 = 0.0;
            float _3552 = 0.0;
            float _3553 = 0.0;
            float _3554 = 0.0;
            uint _3555 = 0u;
            uint _3564;
            bool _3565;
            for (;;)
            {
                _3564 = texelFetch(g_lightClassification, int((((_3273 << 5u) + (_3259 << 9u)) + (_3555 << 2u)) >> 2u)).x;
                _3565 = _3564 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3565)
                {
                    frontier_phi_73_pred = _3554;
                    frontier_phi_73_pred_1 = _3553;
                    frontier_phi_73_pred_2 = _3552;
                    frontier_phi_73_pred_3 = _3551;
                    frontier_phi_73_pred_4 = _3550;
                    frontier_phi_73_pred_5 = _3549;
                }
                else
                {
                    float _3694;
                    float _3695;
                    float _3696;
                    float _3697;
                    float _3698;
                    float _3699;
                    uint _3700;
                    _3694 = _3549;
                    _3695 = _3550;
                    _3696 = _3551;
                    _3697 = _3552;
                    _3698 = _3553;
                    _3699 = _3554;
                    _3700 = _3564;
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    float _3625;
                    float _3626;
                    for (;;)
                    {
                        uint _3704 = uint(findLSB(_3700)) + (_3555 << 5u);
                        uint _3701 = (_3700 + 4294967295u) & _3700;
                        uint _3706 = _3704 * 48u;
                        vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3706)).x, texelFetch(g_PointLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3706 + 3u)).x));
                        uint _3726 = (_3704 * 48u) + 4u;
                        vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3726)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3726 + 3u)).x));
                        uint _3745 = (_3704 * 48u) + 8u;
                        vec3 _3756 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3745)).x, texelFetch(g_PointLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3745 + 2u)).x));
                        float _3760 = _3720.x - _2339;
                        float _3761 = _3720.y - _2340;
                        float _3762 = _3720.z - _2341;
                        float _3763 = dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762));
                        float _3766 = inversesqrt(_3763);
                        float _3767 = _3766 * _3760;
                        float _3768 = _3766 * _3761;
                        float _3769 = _3766 * _3762;
                        float _3770 = dot(vec3(_1185, _1188, _1191), vec3(_3767, _3768, _3769));
                        float _3775 = 1.0 - (_3763 * _3720.w);
                        float _5233 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                        float _3776 = isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0));
                        float _3777 = sqrt(_3763) * _3739.w;
                        float _3780 = 1.39999997615814208984375 / (_3777 + 1.39999997615814208984375);
                        float _3781 = _3780 * _3780;
                        float _3784 = ((1.0 - _3781) * _3770) + _3781;
                        float _3787 = _3777 * _3777;
                        float _3791 = ((isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0))) * _3776) / ((_3787 * 0.699999988079071044921875) + 1.0);
                        float _3795 = (-0.0) - _2339;
                        float _3796 = (-0.0) - _2340;
                        float _3797 = (-0.0) - _2341;
                        float _3801 = inversesqrt(dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797)));
                        float _3802 = _3801 * _3795;
                        float _3803 = _3801 * _3796;
                        float _3804 = _3801 * _3797;
                        float _3811 = exp2(log2(1.0 / ((_3787 * 3.5) + 5.0)) * 0.25);
                        float _3812 = 1.0 - _1260;
                        float _3819 = sqrt(1.0 - ((1.0 - (_3812 * _3812)) * (1.0 - (_3811 * _3811))));
                        float _3820 = _3819 * _3819;
                        float _3821 = _3820 * _3820;
                        float _3822 = _3802 + _3767;
                        float _3823 = _3803 + _3768;
                        float _3824 = _3804 + _3769;
                        float _3828 = inversesqrt(dot(vec3(_3822, _3823, _3824), vec3(_3822, _3823, _3824)));
                        float _3832 = dot(vec3(_1185, _1188, _1191), vec3(_3802, _3803, _3804));
                        float _5249 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                        float _3835 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                        float _3836 = dot(vec3(_1185, _1188, _1191), vec3(_3828 * _3822, _3828 * _3823, _3828 * _3824));
                        float _5260 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                        float _3839 = isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0));
                        float _3843 = ((_3839 * _3839) * (_3821 + (-1.0))) + 1.0;
                        float _3844 = _3780 * _3820;
                        float _3845 = _3844 * _3844;
                        float _3848 = ((1.0 - _3845) * _3770) + _3845;
                        float _5271 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                        float _3849 = isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0));
                        float _3850 = 1.0 - _3820;
                        float _3860 = (0.5 / (((_3849 * ((_3835 * _3850) + _3820)) + 9.9999999392252902907785028219223e-09) + (((_3849 * _3850) + _3820) * _3835))) * _3849;
                        float _5282 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                        float _3871 = (((_3821 * 3.1415927410125732421875) * (isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0)))) / ((_3843 * _3843) * ((_3787 * 2.1991131305694580078125) + 3.141590118408203125))) * _3776;
                        _3624 = (_3791 * _3739.x) + _3697;
                        _3625 = (_3791 * _3739.y) + _3698;
                        _3626 = (_3791 * _3739.z) + _3699;
                        _3621 = (_3871 * _3756.x) + _3694;
                        _3622 = (_3871 * _3756.y) + _3695;
                        _3623 = (_3871 * _3756.z) + _3696;
                        if (_3701 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3694 = _3621;
                            _3695 = _3622;
                            _3696 = _3623;
                            _3697 = _3624;
                            _3698 = _3625;
                            _3699 = _3626;
                            _3700 = _3701;
                        }
                    }
                    frontier_phi_73_pred = _3626;
                    frontier_phi_73_pred_1 = _3625;
                    frontier_phi_73_pred_2 = _3624;
                    frontier_phi_73_pred_3 = _3623;
                    frontier_phi_73_pred_4 = _3622;
                    frontier_phi_73_pred_5 = _3621;
                }
                _3399 = frontier_phi_73_pred;
                _3397 = frontier_phi_73_pred_1;
                _3395 = frontier_phi_73_pred_2;
                _3393 = frontier_phi_73_pred_3;
                _3391 = frontier_phi_73_pred_4;
                _3389 = frontier_phi_73_pred_5;
                uint _3556 = _3555 + 1u;
                if (_3556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3549 = _3389;
                    _3550 = _3391;
                    _3551 = _3393;
                    _3552 = _3395;
                    _3553 = _3397;
                    _3554 = _3399;
                    _3555 = _3556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3388 = _3389;
            _3390 = _3391;
            _3392 = _3393;
            _3394 = _3395;
            _3396 = _3397;
            _3398 = _3399;
        }
        uvec4 _3402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3403 = _3402.z;
        uint _3405 = (_3403 >> 8u) & 15u;
        float _3517;
        float _3519;
        float _3521;
        float _3523;
        float _3525;
        float _3527;
        if (((4294967295u << _3405) & _3279) == 0u)
        {
            _3517 = _3388;
            _3519 = _3390;
            _3521 = _3392;
            _3523 = _3394;
            _3525 = _3396;
            _3527 = _3398;
        }
        else
        {
            float _3542 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
            float _3543 = _3542 * _2339;
            float _3544 = _3542 * _2340;
            float _3545 = _3542 * _2341;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3405 < ((_3403 >> 12u) & 15u))
            {
                float _3518;
                float _3520;
                float _3522;
                float _3524;
                float _3526;
                float _3528;
                float _3677 = _3388;
                float _3678 = _3390;
                float _3679 = _3392;
                float _3680 = _3394;
                float _3681 = _3396;
                float _3682 = _3398;
                uint _3683 = _3405;
                uint _3692;
                bool _3693;
                for (;;)
                {
                    _3692 = texelFetch(g_lightClassification, int((((_3273 << 5u) + (_3259 << 9u)) + (_3683 << 2u)) >> 2u)).x;
                    _3693 = _3692 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3693)
                    {
                        frontier_phi_84_pred = _3682;
                        frontier_phi_84_pred_1 = _3681;
                        frontier_phi_84_pred_2 = _3680;
                        frontier_phi_84_pred_3 = _3679;
                        frontier_phi_84_pred_4 = _3678;
                        frontier_phi_84_pred_5 = _3677;
                    }
                    else
                    {
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _4178;
                        float _4179;
                        float _4180;
                        float _4181;
                        float _4182;
                        float _4183;
                        float _3898 = _3677;
                        float _3899 = _3678;
                        float _3900 = _3679;
                        float _3901 = _3680;
                        float _3902 = _3681;
                        float _3903 = _3682;
                        uint _3904 = _3692;
                        uint _3905;
                        vec4 _3930;
                        float _3931;
                        vec4 _3946;
                        vec3 _3958;
                        vec4 _3973;
                        vec4 _3988;
                        float _4034;
                        bool _4035;
                        for (;;)
                        {
                            uint _3915 = ((_3683 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3904));
                            _3905 = (_3904 + 4294967295u) & _3904;
                            uint _3917 = _3915 * 40u;
                            _3930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 3u)).x));
                            _3931 = _3930.w;
                            uint _3933 = (_3915 * 40u) + 4u;
                            _3946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 3u)).x));
                            uint _3948 = (_3915 * 40u) + 8u;
                            _3958 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3948 + 2u)).x));
                            uint _3960 = (_3915 * 40u) + 16u;
                            _3973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3960 + 3u)).x));
                            uint _3975 = (_3915 * 40u) + 20u;
                            _3988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3975 + 3u)).x));
                            uint _3990 = (_3915 * 40u) + 24u;
                            vec4 _4003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3990 + 3u)).x));
                            uint _4009 = (_3915 * 40u) + 28u;
                            vec4 _4022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 3u)).x));
                            _4034 = fma(_2341, _4022.z, fma(_2340, _4022.y, _4022.x * _2339)) + _4022.w;
                            _4035 = !((fma(_2341, _4003.z, fma(_2340, _4003.y, _4003.x * _2339)) + _4003.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_4035)
                            {
                                float _4062 = _3930.x - _2339;
                                float _4063 = _3930.y - _2340;
                                float _4064 = _3930.z - _2341;
                                float _4065 = dot(vec3(_4062, _4063, _4064), vec3(_4062, _4063, _4064));
                                float _4068 = inversesqrt(_4065);
                                float _4069 = _4068 * _4062;
                                float _4070 = _4068 * _4063;
                                float _4071 = _4068 * _4064;
                                float _4075 = 1.0 - (_4065 / (_3931 * _3931));
                                float _5293 = isnan(0.0) ? _4075 : (isnan(_4075) ? 0.0 : max(_4075, 0.0));
                                float _4076 = isnan(1.0) ? _5293 : (isnan(_5293) ? 1.0 : min(_5293, 1.0));
                                float _4080 = sqrt(_4065) * _3946.w;
                                float _4082 = 1.39999997615814208984375 / (_4080 + 1.39999997615814208984375);
                                float _4083 = _4082 * _4082;
                                float _4086 = ((1.0 - _4083) * dot(vec3(_4069, _4070, _4071), vec3(_1185, _1188, _1191))) + _4083;
                                float _4089 = _4080 * _4080;
                                float _4093 = (fma(_2341, _3973.z, fma(_2340, _3973.y, _3973.x * _2339)) + _3973.w) / _4034;
                                float _4094 = (fma(_2341, _3988.z, fma(_2340, _3988.y, _3988.x * _2339)) + _3988.w) / _4034;
                                float _4098 = 1.0 - dot(vec2(_4093, _4094), vec2(_4093, _4094));
                                float _5309 = isnan(0.0) ? _4098 : (isnan(_4098) ? 0.0 : max(_4098, 0.0));
                                float _4099 = isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0));
                                float _4100 = _4099 * (((isnan(0.0) ? _4086 : (isnan(_4086) ? 0.0 : max(_4086, 0.0))) * _4076) / ((_4089 * 0.699999988079071044921875) + 1.0));
                                float _4112 = exp2(log2(1.0 / ((_4089 * 3.5) + 5.0)) * 0.25);
                                float _4113 = 1.0 - _1260;
                                float _4120 = sqrt(1.0 - ((1.0 - (_4113 * _4113)) * (1.0 - (_4112 * _4112))));
                                float _4121 = _4120 * _4120;
                                float _4122 = _4121 * _4121;
                                float _4123 = _4069 - _3543;
                                float _4124 = _4070 - _3544;
                                float _4125 = _4071 - _3545;
                                float _4129 = inversesqrt(dot(vec3(_4123, _4124, _4125), vec3(_4123, _4124, _4125)));
                                float _4133 = dot(vec3(_1185, _1188, _1191), vec3((-0.0) - _3543, (-0.0) - _3544, (-0.0) - _3545));
                                float _5320 = isnan(0.0) ? _4133 : (isnan(_4133) ? 0.0 : max(_4133, 0.0));
                                float _4136 = isnan(1.0) ? _5320 : (isnan(_5320) ? 1.0 : min(_5320, 1.0));
                                float _4137 = dot(vec3(_1185, _1188, _1191), vec3(_4129 * _4123, _4129 * _4124, _4129 * _4125));
                                float _5331 = isnan(0.0) ? _4137 : (isnan(_4137) ? 0.0 : max(_4137, 0.0));
                                float _4140 = isnan(1.0) ? _5331 : (isnan(_5331) ? 1.0 : min(_5331, 1.0));
                                float _4144 = ((_4140 * _4140) * (_4122 + (-1.0))) + 1.0;
                                float _4145 = _4082 * _4121;
                                float _4146 = _4145 * _4145;
                                float _4152 = ((1.0 - _4146) * dot(vec3(_1185, _1188, _1191), vec3(_4069, _4070, _4071))) + _4146;
                                float _5342 = isnan(0.0) ? _4152 : (isnan(_4152) ? 0.0 : max(_4152, 0.0));
                                float _4153 = isnan(1.0) ? _5342 : (isnan(_5342) ? 1.0 : min(_5342, 1.0));
                                float _4154 = 1.0 - _4121;
                                float _4164 = (0.5 / (((_4153 * ((_4136 * _4154) + _4121)) + 9.9999999392252902907785028219223e-09) + (((_4153 * _4154) + _4121) * _4136))) * _4153;
                                float _5353 = isnan(0.0) ? _4164 : (isnan(_4164) ? 0.0 : max(_4164, 0.0));
                                float _4174 = (_4099 * _4076) * (((_4122 * 3.1415927410125732421875) * (isnan(1.0) ? _5353 : (isnan(_5353) ? 1.0 : min(_5353, 1.0)))) / ((_4144 * _4144) * ((_4089 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4100 * _3946.z;
                                frontier_phi_90_pred_1 = _4100 * _3946.y;
                                frontier_phi_90_pred_2 = _4100 * _3946.x;
                                frontier_phi_90_pred_3 = _4174 * _3958.z;
                                frontier_phi_90_pred_4 = _4174 * _3958.y;
                                frontier_phi_90_pred_5 = _4174 * _3958.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4183 = frontier_phi_90_pred;
                            _4182 = frontier_phi_90_pred_1;
                            _4181 = frontier_phi_90_pred_2;
                            _4180 = frontier_phi_90_pred_3;
                            _4179 = frontier_phi_90_pred_4;
                            _4178 = frontier_phi_90_pred_5;
                            _3888 = _4181 + _3901;
                            _3889 = _4182 + _3902;
                            _3890 = _4183 + _3903;
                            _3885 = _4178 + _3898;
                            _3886 = _4179 + _3899;
                            _3887 = _4180 + _3900;
                            if (_3905 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3898 = _3885;
                                _3899 = _3886;
                                _3900 = _3887;
                                _3901 = _3888;
                                _3902 = _3889;
                                _3903 = _3890;
                                _3904 = _3905;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3890;
                        frontier_phi_84_pred_1 = _3889;
                        frontier_phi_84_pred_2 = _3888;
                        frontier_phi_84_pred_3 = _3887;
                        frontier_phi_84_pred_4 = _3886;
                        frontier_phi_84_pred_5 = _3885;
                    }
                    _3528 = frontier_phi_84_pred;
                    _3526 = frontier_phi_84_pred_1;
                    _3524 = frontier_phi_84_pred_2;
                    _3522 = frontier_phi_84_pred_3;
                    _3520 = frontier_phi_84_pred_4;
                    _3518 = frontier_phi_84_pred_5;
                    uint _3684 = _3683 + 1u;
                    if (_3684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3677 = _3518;
                        _3678 = _3520;
                        _3679 = _3522;
                        _3680 = _3524;
                        _3681 = _3526;
                        _3682 = _3528;
                        _3683 = _3684;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3524;
                frontier_phi_65_66_ladder_1 = _3528;
                frontier_phi_65_66_ladder_2 = _3526;
                frontier_phi_65_66_ladder_3 = _3522;
                frontier_phi_65_66_ladder_4 = _3520;
                frontier_phi_65_66_ladder_5 = _3518;
            }
            else
            {
                frontier_phi_65_66_ladder = _3394;
                frontier_phi_65_66_ladder_1 = _3398;
                frontier_phi_65_66_ladder_2 = _3396;
                frontier_phi_65_66_ladder_3 = _3392;
                frontier_phi_65_66_ladder_4 = _3390;
                frontier_phi_65_66_ladder_5 = _3388;
            }
            _3517 = frontier_phi_65_66_ladder_5;
            _3519 = frontier_phi_65_66_ladder_4;
            _3521 = frontier_phi_65_66_ladder_3;
            _3523 = frontier_phi_65_66_ladder;
            _3525 = frontier_phi_65_66_ladder_2;
            _3527 = frontier_phi_65_66_ladder_1;
        }
        float _3532 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _3292 = (_3532 * _3523) + _2804;
        _3294 = (_3532 * _3525) + _2806;
        _3296 = (_3532 * _3527) + _2808;
        _3298 = ((_3517 * _1229) * _3532) + _3142;
        _3300 = ((_3519 * _1231) * _3532) + _3144;
        _3302 = ((_3521 * _1232) * _3532) + _3146;
    }
    else
    {
        _3292 = _2804;
        _3294 = _2806;
        _3296 = _2808;
        _3298 = _3142;
        _3300 = _3144;
        _3302 = _3146;
    }
    uint _3308 = _1205 + uint(cbMatDynParam._m0[0u].w);
    float _3314 = ((((((_970.x - _965.x) * _948) + _965.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _894) * cbMtdParam._m0[20u].x)) * _903) * cbInstanceData._m0[_3308].x;
    float _3315 = ((((((_970.y - _965.y) * _948) + _965.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_883.y - _881) * _862) + _881)) * cbMtdParam._m0[20u].y)) * _903) * cbInstanceData._m0[_3308].y;
    float _3316 = ((((((_970.z - _965.z) * _948) + _965.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_883.z - _882) * _862) + _882)) * cbMtdParam._m0[20u].z)) * _903) * cbInstanceData._m0[_3308].z;
    float _5369 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _5380 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _5391 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _3333 = (((isnan(1.0) ? _5369 : (isnan(_5369) ? 1.0 : min(_5369, 1.0))) * (_3292 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1244))) + ((_3298 + ((isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0))) * _2073)) * cbPerFrame._m0[3u].x)) + _3314;
    float _3335 = (_3315 + ((_3300 + ((isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0))) * _2073)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5380 : (isnan(_5380) ? 1.0 : min(_5380, 1.0))) * (_3294 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1244)));
    float _3337 = (_3316 + ((_3302 + ((isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))) * _2073)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5391 : (isnan(_5391) ? 1.0 : min(_5391, 1.0))) * (_3296 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1244)));
    float _3338 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
    float _3339 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
    float _3340 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
    float _3346 = cbMtdParam._m0[2u].x * _3314;
    float _3347 = cbMtdParam._m0[2u].y * _3315;
    float _3348 = cbMtdParam._m0[2u].z * _3316;
    float _5417 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3350 = isnan(1.0) ? _5417 : (isnan(_5417) ? 1.0 : min(_5417, 1.0));
    uint _3351 = _1204 + 6u;
    float _3359 = _1166 / cbSceneParam._m0[86u].x;
    float _3360 = _1167 / cbSceneParam._m0[86u].y;
    vec4 _3374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3359, _3360, (log2((isnan(cbSceneParam._m0[77u].w) ? _1092 : (isnan(_1092) ? cbSceneParam._m0[77u].w : min(_1092, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3376 = _3374.x;
    float _3377 = _3374.y;
    float _3378 = _3374.z;
    float _3379 = _3374.w;
    float _3450;
    float _3452;
    float _3454;
    float _3456;
    if (_1092 > cbSceneParam._m0[78u].w)
    {
        float _3413 = isnan(_1092) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1092 : min(cbSceneParam._m0[80u].w, _1092));
        float _3414 = _3413 / _1092;
        float _3425 = _3414 * _1142;
        float _3426 = _1143 * _3414;
        float _3427 = (-0.0) - _3426;
        float _3428 = _3414 * _1144;
        float _3430 = (cbSceneParam._m0[77u].w * _3427) / _3413;
        float _3431 = _3430 + cbSceneParam._m0[79u].w;
        float _3432 = cbSceneParam._m0[79u].w - _3426;
        float _3438 = sqrt(((_3425 * _3425) + (_3426 * _3426)) + (_3428 * _3428));
        float _3441 = (1.0 - (cbSceneParam._m0[77u].w / _3413)) * _3438;
        float _3446 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3448 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3634;
        if (abs((_3427 - _3430) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3634 = ((((_3431 > 0.0) ? exp2(_3446 * _3431) : (2.0 - exp2(_3448 * _3431))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3441;
        }
        else
        {
            float _3578 = 1.0 / cbSceneParam._m0[80u].x;
            float _3579 = isnan(_3432) ? _3431 : (isnan(_3431) ? _3432 : max(_3431, _3432));
            float _3580 = isnan(_3432) ? _3431 : (isnan(_3431) ? _3432 : min(_3431, _3432));
            float _3589 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : min(_3579, 0.0));
            float _3590 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : min(_3580, 0.0));
            _3634 = ((abs(_3438 / _3427) * cbSceneParam._m0[80u].y) * ((((_3589 - _3590) * 2.0) - ((exp2(_3446 * (isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0)))) - exp2(_3446 * (isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))))) * _3578)) - ((exp2(_3448 * _3589) - exp2(_3448 * _3590)) * _3578))) + (_3441 * cbSceneParam._m0[80u].z);
        }
        vec4 _3636 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3359, _3360, 1.0), 0.0);
        float _3645 = exp2((_3634 * (-1.44269502162933349609375)) * (1.0 - _3636.w));
        float _3646 = log2(_3645);
        float _3662 = log2(_3379);
        _3450 = (exp2(_3662 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3646 * cbSceneParam._m0[78u].x)) * _3636.x) / cbSceneParam._m0[78u].x)) + _3376;
        _3452 = (exp2(_3662 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3646 * cbSceneParam._m0[78u].y)) * _3636.y) / cbSceneParam._m0[78u].y)) + _3377;
        _3454 = (exp2(_3662 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3646 * cbSceneParam._m0[78u].z)) * _3636.z) / cbSceneParam._m0[78u].z)) + _3378;
        _3456 = _3645 * _3379;
    }
    else
    {
        _3450 = _3376;
        _3452 = _3377;
        _3454 = _3378;
        _3456 = _3379;
    }
    bool _3672;
    vec4 _3466;
    vec4 _3488;
    float _3490;
    float _3494;
    float _3495;
    float _3496;
    float _3499;
    float _3502;
    float _3505;
    float _3506;
    bool _3516;
    for (;;)
    {
        _3466 = cbMatDynParam._m0[0u];
        float _3468 = roundEven(_3466.y);
        bool _3469 = _3468 == 3.0;
        float _3470 = log2(_3456);
        float _3474 = exp2(_3470 * cbSceneParam._m0[78u].x);
        float _3475 = exp2(_3470 * cbSceneParam._m0[78u].y);
        float _3476 = exp2(_3470 * cbSceneParam._m0[78u].z);
        float _3477 = _3474 * _3338;
        float _3478 = _3475 * _3339;
        float _3479 = _3476 * _3340;
        float _3486 = _1155 + (-0.5);
        _3488 = cbMtdParam._m0[1u];
        _3490 = _3488.y * _3486;
        float _3493 = (_3468 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3494 = _3493 * (_3469 ? _3477 : (_3477 + (cbSceneParam._m0[72u].w * _3450)));
        _3495 = _3493 * (_3469 ? _3478 : (_3478 + (cbSceneParam._m0[72u].w * _3452)));
        _3496 = _3493 * (_3469 ? _3479 : (_3479 + (cbSceneParam._m0[72u].w * _3454)));
        _3499 = ((_3346 * _3350) * _3474) * _3493;
        _3502 = ((_3347 * _3350) * _3475) * _3493;
        _3505 = ((_3348 * _3350) * _3476) * _3493;
        _3506 = _3486 * 0.999000012874603271484375;
        _3516 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3516)
        {
            if ((cbInstanceData._m0[_1204 + 7u].x + _3506) < 0.5)
            {
                _3672 = true;
                break;
            }
        }
        uint _3613 = _1205 + uint(_3466.w);
        if ((cbInstanceData._m0[_3613].w < 1.0) && ((cbInstanceData._m0[_3613].w + _3506) < 0.5))
        {
            _3672 = true;
            break;
        }
        if ((_3490 + 1.0) < _3488.x)
        {
            _3672 = true;
            break;
        }
        _3672 = false;
        break;
    }
    float _3876;
    if (_3672)
    {
        discard_state = true;
        _3876 = 0.0;
    }
    else
    {
        _3876 = cbInstanceData._m0[_3351].w;
    }
    SV_Target.x = _3494;
    SV_Target.y = _3495;
    SV_Target.z = _3496;
    SV_Target.w = _3876;
    SV_Target_1.x = _3499;
    SV_Target_1.y = _3502;
    SV_Target_1.z = _3505;
    SV_Target_1.w = cbInstanceData._m0[_3351].w;
    discard_exit();
}


