#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1474;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _271 = exp2(log2(_257.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _272 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _273 = isnan(1.0) ? _272 : (isnan(_272) ? 1.0 : min(_272, 1.0));
    vec4 _287 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _291 = _287.z;
    float _299 = exp2(log2(_291 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _313 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _316 = _313.y;
    float _319 = (_313.x + (-0.02500000037252902984619140625)) * 8.0;
    float _323 = roundEven(5.0 - _319);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(4.0) ? _324 : (isnan(_324) ? 4.0 : min(_324, 4.0));
    float _338 = floor(_325);
    vec4 _341 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _338));
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[17u].x;
    _188[0u] = cbMtdParam._m0[17u].y;
    _189[0u] = cbMtdParam._m0[17u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[14u].x;
    _188[2u] = cbMtdParam._m0[14u].y;
    _189[2u] = cbMtdParam._m0[14u].z;
    _187[3u] = cbMtdParam._m0[13u].x;
    _188[3u] = cbMtdParam._m0[13u].y;
    _189[3u] = cbMtdParam._m0[13u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[18u].x;
    _188[5u] = cbMtdParam._m0[18u].y;
    _189[5u] = cbMtdParam._m0[18u].z;
    float _405 = roundEven(_319);
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    uint _408 = uint(int(isnan(5.0) ? _406 : (isnan(_406) ? 5.0 : min(_406, 5.0))));
    vec4 _438 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _449 = cbMtdParam._m0[9u].x * _438.x;
    float _450 = cbMtdParam._m0[9u].y * _438.y;
    float _451 = cbMtdParam._m0[9u].z * _438.z;
    float _458 = ((((((_187[_408] - cbMtdParam._m0[10u].x) * _316) + cbMtdParam._m0[10u].x) * _341.x) - _449) * _301) + _449;
    float _459 = ((((((_188[_408] - cbMtdParam._m0[10u].y) * _316) + cbMtdParam._m0[10u].y) * _341.y) - _450) * _301) + _450;
    float _460 = ((((((_189[_408] - cbMtdParam._m0[10u].z) * _316) + cbMtdParam._m0[10u].z) * _341.z) - _451) * _301) + _451;
    float _466 = exp2(log2(_287.w) * cbMtdParam._m0[24u].w);
    vec4 _479 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _499 = (((cbMtdParam._m0[16u].x * _479.x) - _458) * _466) + _458;
    float _500 = (((cbMtdParam._m0[16u].y * _479.y) - _459) * _466) + _459;
    float _501 = (((cbMtdParam._m0[16u].z * _479.z) - _460) * _466) + _460;
    vec4 _513 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _538 = (_257.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _513.x) - _499) * _273) + _499);
    float _540 = (_257.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _513.y) - _500) * _273) + _500);
    float _542 = (_257.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _513.z) - _501) * _273) + _501);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[30u].z;
    _183[0u] = cbMtdParam._m0[30u].w;
    _182[1u] = cbMtdParam._m0[32u].z;
    _183[1u] = cbMtdParam._m0[32u].w;
    _182[2u] = cbMtdParam._m0[32u].x;
    _183[2u] = cbMtdParam._m0[32u].y;
    _182[3u] = cbMtdParam._m0[31u].z;
    _183[3u] = cbMtdParam._m0[31u].w;
    _182[4u] = cbMtdParam._m0[31u].x;
    _183[4u] = cbMtdParam._m0[31u].y;
    float _578 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    uint _580 = uint(int(isnan(4.0) ? _578 : (isnan(_578) ? 4.0 : min(_578, 4.0))));
    float _587 = ((_183[_580] - cbMtdParam._m0[23u].z) * _301) + cbMtdParam._m0[23u].z;
    float _590 = ((cbMtdParam._m0[23u].w - _587) * _466) + _587;
    float _593 = ((cbMtdParam._m0[26u].y - _590) * _273) + _590;
    vec4 _608 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _338));
    vec4 _625 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _633 = cbMtdParam._m0[23u].x + _625.z;
    float _636 = (((_608.z + _182[_580]) - _633) * _301) + _633;
    vec4 _648 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _659 = (((_648.z - _636) + cbMtdParam._m0[30u].x) * _466) + _636;
    float _665 = ((((_291 * 2.0) * _659) - _659) * cbMtdParam._m0[25u].w) + _659;
    vec4 _677 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _688 = (((cbMtdParam._m0[24u].z + _677.z) - _665) * _273) + _665;
    float _701 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _724 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_701 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _701) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _728 = cbPerFrame._m0[22u].x * 2.0;
    float _729 = _728 * cbMtdParam._m0[28u].z;
    float _732 = (_724.x * 0.5) + (-0.25);
    float _735 = (_724.y * 0.5) + (-0.25);
    float _736 = _735 * cbMtdParam._m0[28u].y;
    float _738 = (-0.0) - (cbMtdParam._m0[28u].y * _732);
    float _740 = fract(_729);
    float _742 = fract(_729 + 0.5);
    float _754 = abs((_740 * 2.0) + (-1.0));
    vec4 _770 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_740 * _738) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_736 * _740) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _772 = _770.x;
    float _773 = _770.y;
    float _774 = _770.z;
    vec4 _775 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_742 * _738) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_736 * _742) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _786 = ((_775.x - _772) * _754) + _772;
    float _793 = exp2(log2(_786 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _794 = isnan(cbMtdParam._m0[29u].y) ? _793 : (isnan(_793) ? cbMtdParam._m0[29u].y : max(_793, cbMtdParam._m0[29u].y));
    float _795 = isnan(cbMtdParam._m0[29u].z) ? _794 : (isnan(_794) ? cbMtdParam._m0[29u].z : min(_794, cbMtdParam._m0[29u].z));
    float _819 = (cbMtdParam._m0[33u].x * _701) + TEXCOORD;
    float _820 = (cbMtdParam._m0[33u].y * _701) + TEXCOORD_1;
    float _823 = _728 * cbMtdParam._m0[27u].w;
    float _824 = _735 * cbMtdParam._m0[27u].z;
    float _826 = (-0.0) - (cbMtdParam._m0[27u].z * _732);
    float _827 = fract(_823);
    float _829 = fract(_823 + 0.5);
    float _840 = abs((_827 * 2.0) + (-1.0));
    vec4 _857 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_827 * _826) + _819) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_824 * _827) + _820) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _862 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_829 * _826) + _819) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_824 * _829) + _820) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _896 = ((_608.x - _627) * _301) + _627;
    float _897 = ((_608.y - _628) * _301) + _628;
    float _902 = ((_648.x - _896) * _466) + _896;
    float _903 = ((_648.y - _897) * _466) + _897;
    float _912 = ((((_677.x - _902) * _273) + _902) * 2.0) + (-1.0);
    float _913 = ((((_677.y - _903) * _273) + _903) * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _3894 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _919 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    float _922 = (cbMtdParam._m0[26u].z * ((_287.x * 2.0) + (-1.0))) + _912;
    float _923 = (cbMtdParam._m0[26u].z * ((_287.y * 2.0) + (-1.0))) + _913;
    float _926 = fma(_919, _229 * NORMAL.x, fma(_923, _236 * TANGENT.x, (_222 * _214) * _922));
    float _929 = fma(_919, _229 * NORMAL.y, fma(_923, _236 * TANGENT.y, (_222 * _215) * _922));
    float _932 = fma(_919, _229 * NORMAL.z, fma(_923, _236 * TANGENT.z, (_222 * _216) * _922));
    float _936 = inversesqrt(dot(vec3(_926, _929, _932), vec3(_926, _929, _932)));
    float _937 = _936 * _926;
    float _938 = _936 * _929;
    float _939 = _936 * _932;
    float _3905 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _940 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3927 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3938 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3949 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _944 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _960 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    float _1026 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1027 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1045 = fma(_939, cbSceneParam._m0[5u].z, fma(_938, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _937));
    float _1048 = fma(_939, cbSceneParam._m0[6u].z, fma(_938, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _937));
    float _1051 = fma(_939, cbSceneParam._m0[7u].z, fma(_938, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _937));
    uint _1064 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1065 = _1064 + 9u;
    uint _1066 = _1065 + uint(cbMatDynParam._m0[0u].w);
    float _1072 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_1066].x;
    float _1073 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_1066].y;
    float _1074 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_1066].z;
    float _3960 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1078 = 1.0 - _944;
    float _1079 = _1075 * _1078;
    float _1080 = _1076 * _1078;
    float _1081 = _1077 * _1078;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _944;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _944;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _944;
    float _1089 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1026, cbSceneParam._m0[86u].y * _1027));
    float _1104 = _1101.x * TEXCOORD_3.w;
    float _1105 = dot(vec3(_937, _938, _939), vec3(_1018, _1019, _1020));
    float _1108 = _1105 * 2.0;
    float _1112 = (_1108 * _937) - _1018;
    float _1113 = (_1108 * _938) - _1019;
    float _1114 = (_1108 * _939) - _1020;
    float _1118 = abs(dot(vec3(_1018, _1019, _1020), vec3(_937, _938, _939)));
    float _3993 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1120 = sqrt(_940);
    float _1131 = exp2((_1120 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1120 * 3.0));
    float _1137 = (1.0 - _1131) * ((_1120 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1138 = _1131 * _1120;
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1473;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1204 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1208 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1232 = _1166 + _937;
        float _1233 = _1170 + _938;
        float _1234 = _1174 + _939;
        float _1244 = fma(_1234, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1232)) - _1200;
        float _1245 = fma(_1234, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1232)) - _1204;
        float _1246 = fma(_1234, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1232)) - _1208;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1262 = ((_1250 * _1244) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1250 * _1245) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1246) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1301 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1267.x + (-0.5));
        float _1303 = _1301 * (_1267.y + (-0.5));
        float _1304 = _1301 * (_1267.z + (-0.5));
        float _1311 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1274.x + (-0.5));
        float _1313 = _1311 * (_1274.y + (-0.5));
        float _1314 = _1311 * (_1274.z + (-0.5));
        float _1321 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1281.x + (-0.5));
        float _1323 = _1321 * (_1281.y + (-0.5));
        float _1324 = _1321 * (_1281.z + (-0.5));
        float _1331 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1288.x + (-0.5));
        float _1333 = _1331 * (_1288.y + (-0.5));
        float _1334 = _1331 * (_1288.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1355 = (dot(vec3(_937, _938, _939), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1365 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4041 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1367 + 1.0))) + _1372) * _1335;
        float _1382 = _1303 * 0.5;
        float _1383 = _1313 * 0.5;
        float _1384 = _1323 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_937, _938, _939), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4074 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1409 + 1.0))) + _1414) * _1336;
        float _1424 = _1304 * 0.5;
        float _1425 = _1314 * 0.5;
        float _1426 = _1324 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_937, _938, _939), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4107 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1451 + 1.0))) + _1456) * _1337;
        _1473 = _1304;
        _1475 = _1303;
        _1476 = _1302;
        _1477 = _1314;
        _1478 = _1313;
        _1479 = _1312;
        _1480 = _1324;
        _1481 = _1323;
        _1482 = _1322;
        _1483 = _1337;
        _1484 = _1336;
        _1485 = _1335;
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1474;
        _1475 = _1474;
        _1476 = _1474;
        _1477 = _1474;
        _1478 = _1474;
        _1479 = _1474;
        _1480 = _1474;
        _1481 = _1474;
        _1482 = _1474;
        _1483 = _1474;
        _1484 = _1474;
        _1485 = _1474;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1511 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1515 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1519 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1542 = _1166 + _937;
        float _1543 = _1170 + _938;
        float _1544 = _1174 + _939;
        float _1554 = fma(_1544, cbModelParam._m0[30u].z, fma(_1543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1542)) - _1511;
        float _1555 = fma(_1544, cbModelParam._m0[31u].z, fma(_1543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1542)) - _1515;
        float _1556 = fma(_1544, cbModelParam._m0[32u].z, fma(_1543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1542)) - _1519;
        float _1560 = inversesqrt(dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556)));
        float _1573 = ((_1560 * _1554) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1511 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1560 * _1555) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1515 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1560 * _1556) / cbModelParam._m0[35u].z) + ((((((_1519 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        float _1610 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1577.x + (-0.5));
        float _1612 = _1610 * (_1577.y + (-0.5));
        float _1613 = _1610 * (_1577.z + (-0.5));
        float _1620 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1584.x + (-0.5));
        float _1622 = _1620 * (_1584.y + (-0.5));
        float _1623 = _1620 * (_1584.z + (-0.5));
        float _1630 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1591.x + (-0.5));
        float _1632 = _1630 * (_1591.y + (-0.5));
        float _1633 = _1630 * (_1591.z + (-0.5));
        float _1640 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1598.x + (-0.5));
        float _1642 = _1640 * (_1598.y + (-0.5));
        float _1643 = _1640 * (_1598.z + (-0.5));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = _1611 * 0.5;
        float _1648 = _1621 * 0.5;
        float _1649 = _1631 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_937, _938, _939), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4170 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1674 + 1.0))) + _1679) * _1644;
        float _1689 = _1612 * 0.5;
        float _1690 = _1622 * 0.5;
        float _1691 = _1632 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_937, _938, _939), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4203 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1716 + 1.0))) + _1721) * _1645;
        float _1731 = _1613 * 0.5;
        float _1732 = _1623 * 0.5;
        float _1733 = _1633 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_937, _938, _939), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4236 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1758 + 1.0))) + _1763) * _1646;
        _1780 = _1613;
        _1781 = _1612;
        _1782 = _1611;
        _1783 = _1623;
        _1784 = _1622;
        _1785 = _1621;
        _1786 = _1633;
        _1787 = _1632;
        _1788 = _1631;
        _1789 = _1646;
        _1790 = _1645;
        _1791 = _1644;
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
    }
    else
    {
        _1780 = _1474;
        _1781 = _1474;
        _1782 = _1474;
        _1783 = _1474;
        _1784 = _1474;
        _1785 = _1474;
        _1786 = _1474;
        _1787 = _1474;
        _1788 = _1474;
        _1789 = _1474;
        _1790 = _1474;
        _1791 = _1474;
        _1792 = 0.0;
        _1793 = 0.0;
        _1794 = 0.0;
    }
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1486)) + _1486;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1487)) + _1487;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1488)) + _1488;
    float _1827 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1804));
    float _1848 = _1112 * 0.5;
    float _1849 = _1113 * 0.5;
    float _1850 = _1114 * 0.5;
    float _1851 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1854 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1857 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1891;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1864 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1473, _1477, _1480, _1483));
        float _1868 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1872 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1879 = dot(vec4(cbModelParam._m0[39u]), vec4(_1848, _1849, _1850, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1902;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1893 = dot(vec4(cbModelParam._m0[40u]), vec4(_1848, _1849, _1850, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1906 = (_1902 * cbModelParam._m0[1u].x) + (_1891 * (1.0 - cbModelParam._m0[1u].x));
    float _1916 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _940);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1916 : min(cbModelParam._m0[25u].z, _1916));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1964 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _1968 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _1972 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _1975 = fma(_1114, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112));
        float _1978 = fma(_1114, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112));
        float _1981 = fma(_1114, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112));
        float _2009;
        if (_1975 > 0.0)
        {
            _2009 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2009 = frontier_phi_14_12_ladder;
        }
        float _2211;
        if (_1978 > 0.0)
        {
            _2211 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2211 = frontier_phi_23_19_ladder;
        }
        float _2465;
        if (_1981 > 0.0)
        {
            _2465 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2465 = frontier_phi_35_30_ladder;
        }
        float _2467 = isnan(_2211) ? _2009 : (isnan(_2009) ? _2211 : min(_2009, _2211));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1975) + _1964;
        float _2473 = (_2468 * _1978) + _1968;
        float _2474 = (_2468 * _1981) + _1972;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2475;
        float _2479 = _2475 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 > _2479) || ((_2473 < _2477) || ((_2472 < _2477) || (_2472 > _2479))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2474, cbModelParam._m0[9u].z, fma(_2473, cbModelParam._m0[9u].y, _2472 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2474, cbModelParam._m0[10u].z, fma(_2473, cbModelParam._m0[10u].y, _2472 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2474, cbModelParam._m0[11u].z, fma(_2473, cbModelParam._m0[11u].y, _2472 * cbModelParam._m0[11u].x))), _1917);
            frontier_phi_13_35_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _1997 = frontier_phi_13_35_ladder_2;
        _1999 = frontier_phi_13_35_ladder_1;
        _2001 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1112, _1113, _1114), _1917);
        _1997 = _1985.x * cbModelParam._m0[1u].y;
        _1999 = _1985.y * cbModelParam._m0[1u].y;
        _2001 = _1985.z * cbModelParam._m0[1u].y;
    }
    float _2005 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _940);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2005 : min(cbModelParam._m0[25u].w, _2005));
    float _2095;
    float _2097;
    float _2099;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2059 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2063 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2067 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2070 = fma(_1114, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112));
        float _2073 = fma(_1114, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112));
        float _2076 = fma(_1114, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112));
        float _2216;
        if (_2070 > 0.0)
        {
            _2216 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2216 = frontier_phi_25_21_ladder;
        }
        float _2492;
        if (_2073 > 0.0)
        {
            _2492 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2492 = frontier_phi_37_32_ladder;
        }
        float _2705;
        if (_2076 > 0.0)
        {
            _2705 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2705 = frontier_phi_46_43_ladder;
        }
        float _2707 = isnan(_2492) ? _2216 : (isnan(_2216) ? _2492 : min(_2216, _2492));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _2070) + _2059;
        float _2713 = (_2708 * _2073) + _2063;
        float _2714 = (_2708 * _2076) + _2067;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _2006);
            frontier_phi_22_46_ladder = _2942.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2942.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2942.x * cbModelParam._m0[1u].z;
        }
        _2095 = frontier_phi_22_46_ladder_2;
        _2097 = frontier_phi_22_46_ladder_1;
        _2099 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1112, _1113, _1114), _2006);
        _2095 = _2079.x * cbModelParam._m0[1u].z;
        _2097 = _2079.y * cbModelParam._m0[1u].z;
        _2099 = _2079.z * cbModelParam._m0[1u].z;
    }
    float _2112 = (((_1137 * _1089) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2095 - _1997)) + _1997);
    float _2114 = (((_1137 * _1091) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1137 * _1092) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2119 = fma(_2116, cbSceneParam._m0[89u].z, fma(_2114, cbSceneParam._m0[89u].y, _2112 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2116, cbSceneParam._m0[90u].z, fma(_2114, cbSceneParam._m0[90u].y, _2112 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2116, cbSceneParam._m0[91u].z, fma(_2114, cbSceneParam._m0[91u].y, _2112 * cbSceneParam._m0[91u].x));
    uvec4 _2135 = floatBitsToUint(cbInstanceData._m0[_1064 + 5u]);
    uint _2137 = _2135.x * 14u;
    uint _2138 = _2137 + 13u;
    float _2145 = _1104 + (-1.0);
    float _2150 = (cbLight._m0[_2138].x * _2145) + 1.0;
    float _2151 = (cbLight._m0[_2138].y * _2145) + 1.0;
    float _2152 = (cbLight._m0[_2138].z * _2145) + 1.0;
    float _2153 = (cbLight._m0[_2138].w * _2145) + 1.0;
    uint _2154 = _2137 + 5u;
    float _2160 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2164 = _2137 + 4u;
    float _2170 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2174 = _2137 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_937, _938, _939));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_937, _938, _939));
    float _4372 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4383 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2154].x * _2160) * _2195) + ((cbLight._m0[_2164].x * _2170) * _2193);
    float _2203 = ((_2160 * cbLight._m0[_2154].y) * _2195) + ((_2170 * cbLight._m0[_2164].y) * _2193);
    float _2204 = ((_2160 * cbLight._m0[_2154].z) * _2195) + ((_2170 * cbLight._m0[_2164].z) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2137 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2210)
    {
        _2221 = _2202;
        _2223 = _2203;
        _2225 = _2204;
    }
    else
    {
        uint _2229 = _2137 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2137 + 2u].xyz), vec3(_937, _938, _939)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4394 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2248 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2202;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2203;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2204;
    }
    bool _2228 = _2208.y == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2228)
    {
        _2266 = _2221;
        _2268 = _2223;
        _2270 = _2225;
    }
    else
    {
        uint _2436 = _2137 + 7u;
        float _2452 = (dot(vec3(cbLight._m0[_2137 + 3u].xyz), vec3(_937, _938, _939)) * 0.5) + 0.5;
        float _2453 = _2452 * _2452;
        float _4410 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2454 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2455 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2266 = (((cbLight._m0[_2436].x * 0.3183098733425140380859375) * _2454) * _2455) + _2221;
        _2268 = (((cbLight._m0[_2436].y * 0.3183098733425140380859375) * _2454) * _2455) + _2223;
        _2270 = (((cbLight._m0[_2436].z * 0.3183098733425140380859375) * _2454) * _2455) + _2225;
    }
    uint _2273 = _2137 + 8u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _940) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2137].x + _1018;
    float _2289 = cbLight._m0[_2137].y + _1019;
    float _2290 = cbLight._m0[_2137].z + _1020;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_937, _938, _939), vec3(cbLight._m0[_2137].xyz));
    float _4426 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _2302 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2303 = dot(vec3(_937, _938, _939), vec3(_2295, _2296, _2297));
    float _4448 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2295, _2296, _2297));
    float _4459 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2287 * _2287;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
    float _2324 = 0.959999978542327880859375 - _1086;
    float _2326 = 0.959999978542327880859375 - _1087;
    float _2327 = 0.959999978542327880859375 - _1088;
    float _2334 = 1.0 - _2287;
    float _2345 = (0.5 / (((_2302 * ((_2301 * _2334) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2334) + _2287) * _2301))) * _2301;
    float _4470 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    uint _2358 = _2137 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _940) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2174].x + _1018;
    float _2372 = cbLight._m0[_2174].y + _1019;
    float _2373 = cbLight._m0[_2174].z + _1020;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_937, _938, _939), vec3(cbLight._m0[_2174].xyz));
    float _4481 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2385 = dot(vec3(_937, _938, _939), vec3(_2378, _2379, _2380));
    float _4492 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2378, _2379, _2380));
    float _4503 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2411 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2302 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2411) + _2370) * _2384))) * _2384;
    float _4514 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2433 = (((((_2404 * _2324) + _1089) * cbLight._m0[_2358].x) * _2423) * _2160) + (((((_2323 * _2324) + _1089) * cbLight._m0[_2273].x) * _2347) * _2170);
    float _2434 = (((((_2404 * _2326) + _1091) * cbLight._m0[_2358].y) * _2423) * _2160) + (((((_2323 * _2326) + _1091) * cbLight._m0[_2273].y) * _2347) * _2170);
    float _2435 = (((((_2404 * _2327) + _1092) * cbLight._m0[_2358].z) * _2423) * _2160) + (((((_2323 * _2327) + _1092) * cbLight._m0[_2273].z) * _2347) * _2170);
    float _2497;
    float _2499;
    float _2501;
    if (_2210)
    {
        _2497 = _2433;
        _2499 = _2434;
        _2501 = _2435;
    }
    else
    {
        uint _2503 = _2137 + 2u;
        uint _2507 = _2137 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _940) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _1018;
        float _2524 = cbLight._m0[_2503].y + _1019;
        float _2525 = cbLight._m0[_2503].z + _1020;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_937, _938, _939), vec3(cbLight._m0[_2503].xyz));
        float _4525 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2537 = dot(vec3(_937, _938, _939), vec3(_2530, _2531, _2532));
        float _4536 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4547 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2302 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2563) + _2522) * _2536))) * _2536;
        float _4558 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2497 = (((((_2556 * _2324) + _1089) * cbLight._m0[_2507].x) * _2575) * _2576) + _2433;
        _2499 = (((((_2556 * _2326) + _1091) * cbLight._m0[_2507].y) * _2575) * _2576) + _2434;
        _2501 = (((((_2556 * _2327) + _1092) * cbLight._m0[_2507].z) * _2575) * _2576) + _2435;
    }
    float _2611;
    float _2613;
    float _2615;
    if (_2228)
    {
        _2611 = _2497;
        _2613 = _2499;
        _2615 = _2501;
    }
    else
    {
        uint _2622 = _2137 + 3u;
        uint _2626 = _2137 + 11u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _940) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _1018;
        float _2643 = cbLight._m0[_2622].y + _1019;
        float _2644 = cbLight._m0[_2622].z + _1020;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_937, _938, _939), vec3(cbLight._m0[_2622].xyz));
        float _4574 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2656 = dot(vec3(_937, _938, _939), vec3(_2649, _2650, _2651));
        float _4585 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4596 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2302 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2682) + _2641) * _2655))) * _2655;
        float _4607 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2611 = (((((_2675 * _2324) + _1089) * cbLight._m0[_2626].x) * _2694) * _2695) + _2497;
        _2613 = (((((_2675 * _2326) + _1091) * cbLight._m0[_2626].y) * _2694) * _2695) + _2499;
        _2615 = (((((_2675 * _2327) + _1092) * cbLight._m0[_2626].z) * _2694) * _2695) + _2501;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2135.y == 0u)
    {
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2770;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2770;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2770;
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1027) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _1026) / _2786)));
        float _2807 = (log2(_2773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
        }
        else
        {
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            uint _3106 = 0u;
            uint _3115;
            bool _3116;
            for (;;)
            {
                _3115 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                _3116 = _3115 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3116)
                {
                    frontier_phi_61_pred = _3100;
                    frontier_phi_61_pred_1 = _3105;
                    frontier_phi_61_pred_2 = _3104;
                    frontier_phi_61_pred_3 = _3103;
                    frontier_phi_61_pred_4 = _3102;
                    frontier_phi_61_pred_5 = _3101;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3115;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3106 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _2771;
                        float _3291 = _3250.y - _2772;
                        float _3292 = _3250.z - _2773;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_1045, _1048, _1051), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4633 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _2771;
                        float _3326 = (-0.0) - _2772;
                        float _3327 = (-0.0) - _2773;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3342 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _1120;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_1045, _1048, _1051), vec3(_3332, _3333, _3334));
                        float _4649 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3367 = dot(vec3(_1045, _1048, _1051), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4660 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3310 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3300) + _3376;
                        float _4671 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4682 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3374 * _3374) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3159 = (_3321 * _3269.x) + _3227;
                        _3160 = (_3321 * _3269.y) + _3228;
                        _3161 = (_3321 * _3269.z) + _3229;
                        _3156 = (_3402 * _3286.x) + _3224;
                        _3157 = (_3402 * _3286.y) + _3225;
                        _3158 = (_3402 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_61_pred = _3156;
                    frontier_phi_61_pred_1 = _3161;
                    frontier_phi_61_pred_2 = _3160;
                    frontier_phi_61_pred_3 = _3159;
                    frontier_phi_61_pred_4 = _3158;
                    frontier_phi_61_pred_5 = _3157;
                }
                _2948 = frontier_phi_61_pred;
                _2958 = frontier_phi_61_pred_1;
                _2956 = frontier_phi_61_pred_2;
                _2954 = frontier_phi_61_pred_3;
                _2952 = frontier_phi_61_pred_4;
                _2950 = frontier_phi_61_pred_5;
                uint _3107 = _3106 + 1u;
                if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3100 = _2948;
                    _3101 = _2950;
                    _3102 = _2952;
                    _3103 = _2954;
                    _3104 = _2956;
                    _3105 = _2958;
                    _3106 = _3107;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
        }
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.z;
        uint _2964 = (_2962 >> 8u) & 15u;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((4294967295u << _2964) & _2817) == 0u)
        {
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
        }
        else
        {
            float _3093 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
            float _3094 = _3093 * _2771;
            float _3095 = _3093 * _2772;
            float _3096 = _3093 * _2773;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2964 < ((_2962 >> 12u) & 15u))
            {
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3207 = _2947;
                float _3208 = _2949;
                float _3209 = _2951;
                float _3210 = _2953;
                float _3211 = _2955;
                float _3212 = _2957;
                uint _3213 = _2964;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3223)
                    {
                        frontier_phi_67_pred = _3210;
                        frontier_phi_67_pred_1 = _3211;
                        frontier_phi_67_pred_2 = _3212;
                        frontier_phi_67_pred_3 = _3209;
                        frontier_phi_67_pred_4 = _3208;
                        frontier_phi_67_pred_5 = _3207;
                    }
                    else
                    {
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3420 = _3207;
                        float _3421 = _3208;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        uint _3426 = _3222;
                        uint _3427;
                        vec4 _3452;
                        float _3453;
                        vec4 _3468;
                        vec3 _3480;
                        vec4 _3495;
                        vec4 _3510;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3437 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3426));
                            _3427 = (_3426 + 4294967295u) & _3426;
                            uint _3439 = _3437 * 40u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            _3453 = _3452.w;
                            uint _3455 = (_3437 * 40u) + 4u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3437 * 40u) + 8u;
                            _3480 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x));
                            uint _3482 = (_3437 * 40u) + 16u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3437 * 40u) + 20u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3437 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3437 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_2773, _3544.z, fma(_2772, _3544.y, _3544.x * _2771)) + _3544.w;
                            _3557 = !((fma(_2773, _3525.z, fma(_2772, _3525.y, _3525.x * _2771)) + _3525.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3452.x - _2771;
                                float _3585 = _3452.y - _2772;
                                float _3586 = _3452.z - _2773;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3453 * _3453));
                                float _4693 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3602 = sqrt(_3587) * _3468.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_1045, _1048, _1051))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_2773, _3495.z, fma(_2772, _3495.y, _3495.x * _2771)) + _3495.w) / _3556;
                                float _3616 = (fma(_2773, _3510.z, fma(_2772, _3510.y, _3510.x * _2771)) + _3510.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4709 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _1120;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3094;
                                float _3646 = _3592 - _3095;
                                float _3647 = _3593 - _3096;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_1045, _1048, _1051), vec3((-0.0) - _3094, (-0.0) - _3095, (-0.0) - _3096));
                                float _4720 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3659 = dot(vec3(_1045, _1048, _1051), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4731 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_1045, _1048, _1051), vec3(_3591, _3592, _3593))) + _3668;
                                float _4742 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4753 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3696 * _3480.x;
                                frontier_phi_73_pred_1 = _3696 * _3480.y;
                                frontier_phi_73_pred_2 = _3622 * _3468.z;
                                frontier_phi_73_pred_3 = _3622 * _3468.y;
                                frontier_phi_73_pred_4 = _3622 * _3468.x;
                                frontier_phi_73_pred_5 = _3696 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3700 = frontier_phi_73_pred;
                            _3701 = frontier_phi_73_pred_1;
                            _3705 = frontier_phi_73_pred_2;
                            _3704 = frontier_phi_73_pred_3;
                            _3703 = frontier_phi_73_pred_4;
                            _3702 = frontier_phi_73_pred_5;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            if (_3427 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3427;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3410;
                        frontier_phi_67_pred_1 = _3411;
                        frontier_phi_67_pred_2 = _3412;
                        frontier_phi_67_pred_3 = _3409;
                        frontier_phi_67_pred_4 = _3408;
                        frontier_phi_67_pred_5 = _3407;
                    }
                    _3075 = frontier_phi_67_pred;
                    _3077 = frontier_phi_67_pred_1;
                    _3079 = frontier_phi_67_pred_2;
                    _3073 = frontier_phi_67_pred_3;
                    _3071 = frontier_phi_67_pred_4;
                    _3069 = frontier_phi_67_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3069;
                        _3208 = _3071;
                        _3209 = _3073;
                        _3210 = _3075;
                        _3211 = _3077;
                        _3212 = _3079;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3077;
                frontier_phi_55_56_ladder_1 = _3079;
                frontier_phi_55_56_ladder_2 = _3075;
                frontier_phi_55_56_ladder_3 = _3073;
                frontier_phi_55_56_ladder_4 = _3071;
                frontier_phi_55_56_ladder_5 = _3069;
            }
            else
            {
                frontier_phi_55_56_ladder = _2955;
                frontier_phi_55_56_ladder_1 = _2957;
                frontier_phi_55_56_ladder_2 = _2953;
                frontier_phi_55_56_ladder_3 = _2951;
                frontier_phi_55_56_ladder_4 = _2949;
                frontier_phi_55_56_ladder_5 = _2947;
            }
            _3068 = frontier_phi_55_56_ladder_5;
            _3070 = frontier_phi_55_56_ladder_4;
            _3072 = frontier_phi_55_56_ladder_3;
            _3074 = frontier_phi_55_56_ladder_2;
            _3076 = frontier_phi_55_56_ladder;
            _3078 = frontier_phi_55_56_ladder_1;
        }
        float _3083 = isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0));
        _2830 = (_3083 * _3074) + _2266;
        _2832 = (_3083 * _3076) + _2268;
        _2834 = (_3083 * _3078) + _2270;
        _2836 = ((_3068 * _1089) * _3083) + _2611;
        _2838 = ((_3070 * _1091) * _3083) + _2613;
        _2840 = ((_3072 * _1092) * _3083) + _2615;
    }
    else
    {
        _2830 = _2266;
        _2832 = _2268;
        _2834 = _2270;
        _2836 = _2611;
        _2838 = _2613;
        _2840 = _2615;
    }
    uint _2846 = _1065 + uint(cbMatDynParam._m0[0u].w);
    float _2852 = ((((((_862.x - _857.x) * _840) + _857.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _786) * cbMtdParam._m0[20u].x)) * _795) * cbInstanceData._m0[_2846].x;
    float _2853 = ((((((_862.y - _857.y) * _840) + _857.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_775.y - _773) * _754) + _773)) * cbMtdParam._m0[20u].y)) * _795) * cbInstanceData._m0[_2846].y;
    float _2854 = ((((((_862.z - _857.z) * _840) + _857.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_775.z - _774) * _754) + _774)) * cbMtdParam._m0[20u].z)) * _795) * cbInstanceData._m0[_2846].z;
    float _4769 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4780 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4791 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2871 = (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2830 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1104))) + ((_2836 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1906)) * cbPerFrame._m0[3u].x)) + _2852;
    float _2873 = (_2853 + ((_2838 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1906)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2832 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1104)));
    float _2875 = (_2854 + ((_2840 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1906)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2834 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1104)));
    float _4817 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2888 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    uint _2889 = _1064 + 6u;
    float _2897 = _1026 / cbSceneParam._m0[86u].x;
    float _2898 = _1027 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _960 : (isnan(_960) ? cbSceneParam._m0[77u].w : min(_960, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    if (_960 > cbSceneParam._m0[78u].w)
    {
        float _2972 = isnan(_960) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _960 : min(cbSceneParam._m0[80u].w, _960));
        float _2973 = _2972 / _960;
        float _2984 = _2973 * _1011;
        float _2985 = _1012 * _2973;
        float _2986 = (-0.0) - _2985;
        float _2987 = _2973 * _1013;
        float _2989 = (cbSceneParam._m0[77u].w * _2986) / _2972;
        float _2990 = _2989 + cbSceneParam._m0[79u].w;
        float _2991 = cbSceneParam._m0[79u].w - _2985;
        float _2997 = sqrt(((_2984 * _2984) + (_2985 * _2985)) + (_2987 * _2987));
        float _3000 = (1.0 - (cbSceneParam._m0[77u].w / _2972)) * _2997;
        float _3005 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3007 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2986 - _2989) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2990 > 0.0) ? exp2(_3005 * _2990) : (2.0 - exp2(_3007 * _2990))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3000;
        }
        else
        {
            float _3129 = 1.0 / cbSceneParam._m0[80u].x;
            float _3130 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : max(_2990, _2991));
            float _3131 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : min(_2990, _2991));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            _3169 = ((abs(_2997 / _2986) * cbSceneParam._m0[80u].y) * ((((_3140 - _3141) * 2.0) - ((exp2(_3005 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0)))) - exp2(_3005 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))))) * _3129)) - ((exp2(_3007 * _3140) - exp2(_3007 * _3141)) * _3129))) + (_3000 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2917);
        _3009 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2914;
        _3011 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2915;
        _3013 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2916;
        _3015 = _3180 * _2917;
    }
    else
    {
        _3009 = _2914;
        _3011 = _2915;
        _3013 = _2916;
        _3015 = _2917;
    }
    float _3027 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3028 = _3027 == 3.0;
    float _3029 = log2(_3015);
    float _3033 = exp2(_3029 * cbSceneParam._m0[78u].x);
    float _3034 = exp2(_3029 * cbSceneParam._m0[78u].y);
    float _3035 = exp2(_3029 * cbSceneParam._m0[78u].z);
    float _3036 = _3033 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)));
    float _3037 = _3034 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0)));
    float _3038 = _3035 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)));
    float _3047 = (_3027 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3047 * (_3028 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3009)));
    SV_Target.y = _3047 * (_3028 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3011)));
    SV_Target.z = _3047 * (_3028 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3013)));
    SV_Target.w = cbInstanceData._m0[_2889].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2852) * _2888) * _3033) * _3047;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2853) * _2888) * _3034) * _3047;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2854) * _2888) * _3035) * _3047;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
}


