#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[34];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_C4200_Body_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_C4200_Body_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D C_C4200_Body_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_C4200_Body_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_C4200_Body_snp_0_Texture2D_7;
layout(set = 0, binding = 16) uniform texture2D C_C4200_Body_snp_0_Texture2D_8;
layout(set = 0, binding = 17) uniform texture2D C_C4200_Body_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_C4200_Body_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_C4200_Body_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_C4200_Body_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_C4200_Body_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_C4200_Body_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_C4200_Body_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_C4200_Body_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_C4200_Body_snp_0_Texture2D_21;
layout(set = 0, binding = 18) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_0;
layout(set = 0, binding = 19) uniform texture2DArray C_C4200_Body_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1637;
float _4050;
float _4051;
float _4052;
float _4053;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _290 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _303 = exp2(log2(_290.w * cbMtdParam._m0[30u].y) * cbMtdParam._m0[24u].x);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _319 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _323 = _319.z;
    float _331 = exp2(log2(_323 * cbMtdParam._m0[24u].y) * cbMtdParam._m0[23u].y);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    vec4 _345 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _348 = _345.y;
    float _351 = (_345.x + (-0.02500000037252902984619140625)) * 8.0;
    float _355 = roundEven(5.0 - _351);
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _357 = isnan(4.0) ? _356 : (isnan(_356) ? 4.0 : min(_356, 4.0));
    float _370 = floor(_357);
    vec4 _373 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w, _370));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[17u].x;
    _202[0u] = cbMtdParam._m0[17u].y;
    _203[0u] = cbMtdParam._m0[17u].z;
    _201[1u] = cbMtdParam._m0[15u].x;
    _202[1u] = cbMtdParam._m0[15u].y;
    _203[1u] = cbMtdParam._m0[15u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[13u].x;
    _202[3u] = cbMtdParam._m0[13u].y;
    _203[3u] = cbMtdParam._m0[13u].z;
    _201[4u] = cbMtdParam._m0[12u].x;
    _202[4u] = cbMtdParam._m0[12u].y;
    _203[4u] = cbMtdParam._m0[12u].z;
    _201[5u] = cbMtdParam._m0[18u].x;
    _202[5u] = cbMtdParam._m0[18u].y;
    _203[5u] = cbMtdParam._m0[18u].z;
    float _437 = roundEven(_351);
    float _438 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    uint _440 = uint(int(isnan(5.0) ? _438 : (isnan(_438) ? 5.0 : min(_438, 5.0))));
    vec4 _470 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _481 = cbMtdParam._m0[9u].x * _470.x;
    float _482 = cbMtdParam._m0[9u].y * _470.y;
    float _483 = cbMtdParam._m0[9u].z * _470.z;
    float _490 = ((((((_201[_440] - cbMtdParam._m0[10u].x) * _348) + cbMtdParam._m0[10u].x) * _373.x) - _481) * _333) + _481;
    float _491 = ((((((_202[_440] - cbMtdParam._m0[10u].y) * _348) + cbMtdParam._m0[10u].y) * _373.y) - _482) * _333) + _482;
    float _492 = ((((((_203[_440] - cbMtdParam._m0[10u].z) * _348) + cbMtdParam._m0[10u].z) * _373.z) - _483) * _333) + _483;
    float _498 = exp2(log2(_319.w) * cbMtdParam._m0[24u].w);
    vec4 _511 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _531 = (((cbMtdParam._m0[16u].x * _511.x) - _490) * _498) + _490;
    float _532 = (((cbMtdParam._m0[16u].y * _511.y) - _491) * _498) + _491;
    float _533 = (((cbMtdParam._m0[16u].z * _511.z) - _492) * _498) + _492;
    vec4 _545 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _570 = (_290.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _545.x) - _531) * _305) + _531);
    float _572 = (_290.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _545.y) - _532) * _305) + _532);
    float _574 = (_290.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _545.z) - _533) * _305) + _533);
    vec4 _586 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _605 = TEXCOORD_3.x - ((cbMtdParam._m0[25u].x * (1.0 - TEXCOORD_3.x)) * (_270.x + 0.00999999977648258209228515625));
    float _607 = _605 * (cbMtdParam._m0[25u].z + 1.0);
    float _4102 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _615 = (_608 * ((cbMtdParam._m0[11u].x * _586.x) - _570)) + _570;
    float _616 = (((cbMtdParam._m0[11u].y * _586.y) - _572) * _608) + _572;
    float _617 = (((cbMtdParam._m0[11u].z * _586.z) - _574) * _608) + _574;
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[30u].z;
    _197[0u] = cbMtdParam._m0[30u].w;
    _196[1u] = cbMtdParam._m0[32u].z;
    _197[1u] = cbMtdParam._m0[32u].w;
    _196[2u] = cbMtdParam._m0[32u].x;
    _197[2u] = cbMtdParam._m0[32u].y;
    _196[3u] = cbMtdParam._m0[31u].z;
    _197[3u] = cbMtdParam._m0[31u].w;
    _196[4u] = cbMtdParam._m0[31u].x;
    _197[4u] = cbMtdParam._m0[31u].y;
    float _653 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    uint _655 = uint(int(isnan(4.0) ? _653 : (isnan(_653) ? 4.0 : min(_653, 4.0))));
    float _662 = ((_197[_655] - cbMtdParam._m0[23u].z) * _333) + cbMtdParam._m0[23u].z;
    float _665 = ((cbMtdParam._m0[23u].w - _662) * _498) + _662;
    float _668 = ((cbMtdParam._m0[26u].y - _665) * _305) + _665;
    float _673 = (cbMtdParam._m0[25u].y + 1.0) * _605;
    float _4123 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _676 = _668 - (_668 * _674);
    vec4 _689 = texture(sampler2DArray(C_C4200_Body_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w, _370));
    vec4 _706 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _708 = _706.x;
    float _709 = _706.y;
    float _714 = cbMtdParam._m0[23u].x + _706.z;
    float _717 = (((_689.z + _196[_655]) - _714) * _333) + _714;
    vec4 _729 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _740 = (((_729.z - _717) + cbMtdParam._m0[30u].x) * _498) + _717;
    float _746 = ((((_323 * 2.0) * _740) - _740) * cbMtdParam._m0[25u].w) + _740;
    vec4 _758 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    float _769 = (((cbMtdParam._m0[24u].z + _758.z) - _746) * _305) + _746;
    vec4 _781 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _793 = ((_781.z - _769) * _674) + _769;
    float _806 = cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x;
    vec4 _829 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * ((_806 * cbMtdParam._m0[33u].z) + TEXCOORD)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * ((cbMtdParam._m0[33u].w * _806) + TEXCOORD_1)) + cbTextureTilingScale._m0[9u].w));
    float _833 = cbPerFrame._m0[22u].x * 2.0;
    float _834 = _833 * cbMtdParam._m0[28u].z;
    float _837 = (_829.x * 0.5) + (-0.25);
    float _840 = (_829.y * 0.5) + (-0.25);
    float _841 = _840 * cbMtdParam._m0[28u].y;
    float _843 = (-0.0) - (cbMtdParam._m0[28u].y * _837);
    float _845 = fract(_834);
    float _847 = fract(_834 + 0.5);
    float _858 = abs((_845 * 2.0) + (-1.0));
    vec4 _874 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_845 * _843) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_841 * _845) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _876 = _874.x;
    float _877 = _874.y;
    float _878 = _874.z;
    vec4 _879 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_19, SS_DiffuseMap), vec2((((_847 * _843) + TEXCOORD) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_841 * _847) + TEXCOORD_1) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _890 = ((_879.x - _876) * _858) + _876;
    float _897 = exp2(log2(_890 * cbMtdParam._m0[28u].w) * cbMtdParam._m0[29u].x);
    float _898 = isnan(cbMtdParam._m0[29u].y) ? _897 : (isnan(_897) ? cbMtdParam._m0[29u].y : max(_897, cbMtdParam._m0[29u].y));
    float _899 = isnan(cbMtdParam._m0[29u].z) ? _898 : (isnan(_898) ? cbMtdParam._m0[29u].z : min(_898, cbMtdParam._m0[29u].z));
    float _923 = (cbMtdParam._m0[33u].x * _806) + TEXCOORD;
    float _924 = (cbMtdParam._m0[33u].y * _806) + TEXCOORD_1;
    float _927 = _833 * cbMtdParam._m0[27u].w;
    float _928 = _840 * cbMtdParam._m0[27u].z;
    float _930 = (-0.0) - (cbMtdParam._m0[27u].z * _837);
    float _931 = fract(_927);
    float _933 = fract(_927 + 0.5);
    float _944 = abs((_931 * 2.0) + (-1.0));
    vec4 _961 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_931 * _930) + _923) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_928 * _931) + _924) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _966 = texture(sampler2D(C_C4200_Body_snp_0_Texture2D_20, SS_DiffuseMap), vec2((((_933 * _930) + _923) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_928 * _933) + _924) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1003 = ((_689.x - _708) * _333) + _708;
    float _1004 = ((_689.y - _709) * _333) + _709;
    float _1009 = ((_729.x - _1003) * _498) + _1003;
    float _1010 = ((_729.y - _1004) * _498) + _1004;
    float _1019 = ((((_758.x - _1009) * _305) + _1009) * 2.0) + (-1.0);
    float _1020 = ((((_758.y - _1010) * _305) + _1010) * 2.0) + (-1.0);
    float _1021 = dot(vec2(_1019, _1020), vec2(_1019, _1020));
    float _4144 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1026 = sqrt(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))));
    float _1035 = ((cbMtdParam._m0[26u].z * ((_319.x * 2.0) + (-1.0))) + _1019) + (((((_781.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[26u].w) * _674);
    float _1036 = ((cbMtdParam._m0[26u].z * ((_319.y * 2.0) + (-1.0))) + _1020) + (((((_781.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[26u].w) * _674);
    float _1038 = gl_FragCoord.x * 0.125;
    float _1040 = gl_FragCoord.y * 0.125;
    float _1050 = fma(_1026, _243 * NORMAL.x, fma(_1036, _250 * TANGENT.x, (_236 * _228) * _1035));
    float _1053 = fma(_1026, _243 * NORMAL.y, fma(_1036, _250 * TANGENT.y, (_236 * _229) * _1035));
    float _1056 = fma(_1026, _243 * NORMAL.z, fma(_1036, _250 * TANGENT.z, (_236 * _230) * _1035));
    float _1060 = inversesqrt(dot(vec3(_1050, _1053, _1056), vec3(_1050, _1053, _1056)));
    float _1061 = _1060 * _1050;
    float _1062 = _1060 * _1053;
    float _1063 = _1060 * _1056;
    float _4155 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _1064 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4177 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4188 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4199 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _1068 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    if (!(cbMtdParam._m0[26u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1038, _1040)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1088 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1138 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1128);
    float _1139 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1128);
    float _1140 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1128);
    float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
    float _1145 = _1138 * _1144;
    float _1146 = _1139 * _1144;
    float _1147 = _1140 * _1144;
    vec4 _1149 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1038, _1040));
    float _1151 = _1149.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1321 = sqrt(((_1138 * _1138) + (_1139 * _1139)) + (_1140 * _1140));
        float _1327 = (cbMatDynParam._m0[5u].x * _1321) + cbMatDynParam._m0[5u].y;
        float _4210 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1332 = (cbMatDynParam._m0[5u].z * _1321) + cbMatDynParam._m0[5u].w;
        float _4221 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) - _1328)) + _1328) < ((_1151 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1162 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1163 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1181 = fma(_1063, cbSceneParam._m0[5u].z, fma(_1062, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1061));
    float _1184 = fma(_1063, cbSceneParam._m0[6u].z, fma(_1062, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1061));
    float _1187 = fma(_1063, cbSceneParam._m0[7u].z, fma(_1062, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1061));
    uint _1200 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1201 = _1200 + 9u;
    uint _1202 = _1201 + uint(cbMatDynParam._m0[0u].w);
    float _1208 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1202].x;
    float _1209 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_1202].y;
    float _1210 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_1202].z;
    float _4232 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _1214 = 1.0 - _1068;
    float _1215 = _1211 * _1214;
    float _1216 = _1212 * _1214;
    float _1217 = _1213 * _1214;
    float _1222 = (_1211 + (-0.039999999105930328369140625)) * _1068;
    float _1223 = (_1212 + (-0.039999999105930328369140625)) * _1068;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1068;
    float _1225 = _1222 + 0.039999999105930328369140625;
    float _1227 = _1223 + 0.039999999105930328369140625;
    float _1228 = _1224 + 0.039999999105930328369140625;
    vec4 _1237 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1162, cbSceneParam._m0[86u].y * _1163));
    float _1240 = _1237.x * TEXCOORD_3.w;
    float _1241 = dot(vec3(_1061, _1062, _1063), vec3(_1145, _1146, _1147));
    float _1244 = _1241 * 2.0;
    float _1248 = (_1244 * _1061) - _1145;
    float _1249 = (_1244 * _1062) - _1146;
    float _1250 = (_1244 * _1063) - _1147;
    float _1254 = abs(dot(vec3(_1145, _1146, _1147), vec3(_1061, _1062, _1063)));
    float _4265 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _1256 = sqrt(_1064);
    float _1267 = exp2((_1256 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1256 * 3.0));
    float _1273 = (1.0 - _1267) * ((_1256 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1274 = _1267 * _1256;
    float _1302 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1636;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1363 = fma(_1310, cbModelParam._m0[26u].z, fma(_1306, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1302));
        float _1367 = fma(_1310, cbModelParam._m0[27u].z, fma(_1306, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1302));
        float _1371 = fma(_1310, cbModelParam._m0[28u].z, fma(_1306, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1302));
        float _1395 = _1302 + _1061;
        float _1396 = _1306 + _1062;
        float _1397 = _1310 + _1063;
        float _1407 = fma(_1397, cbModelParam._m0[26u].z, fma(_1396, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1395)) - _1363;
        float _1408 = fma(_1397, cbModelParam._m0[27u].z, fma(_1396, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1395)) - _1367;
        float _1409 = fma(_1397, cbModelParam._m0[28u].z, fma(_1396, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1395)) - _1371;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1425 = ((_1413 * _1407) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1363 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1413 * _1408) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1367 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1409) / cbModelParam._m0[34u].z) + ((((((_1371 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1464 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1430.x + (-0.5));
        float _1466 = _1464 * (_1430.y + (-0.5));
        float _1467 = _1464 * (_1430.z + (-0.5));
        float _1474 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1437.x + (-0.5));
        float _1476 = _1474 * (_1437.y + (-0.5));
        float _1477 = _1474 * (_1437.z + (-0.5));
        float _1484 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1444.x + (-0.5));
        float _1486 = _1484 * (_1444.y + (-0.5));
        float _1487 = _1484 * (_1444.z + (-0.5));
        float _1494 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1451.x + (-0.5));
        float _1496 = _1494 * (_1451.y + (-0.5));
        float _1497 = _1494 * (_1451.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1518 = (dot(vec3(_1061, _1062, _1063), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1528 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4313 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1530 + 1.0))) + _1535) * _1498;
        float _1545 = _1466 * 0.5;
        float _1546 = _1476 * 0.5;
        float _1547 = _1486 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_1061, _1062, _1063), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4346 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1572 + 1.0))) + _1577) * _1499;
        float _1587 = _1467 * 0.5;
        float _1588 = _1477 * 0.5;
        float _1589 = _1487 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_1061, _1062, _1063), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4379 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1614 + 1.0))) + _1619) * _1500;
        _1636 = _1467;
        _1638 = _1466;
        _1639 = _1465;
        _1640 = _1477;
        _1641 = _1476;
        _1642 = _1475;
        _1643 = _1487;
        _1644 = _1486;
        _1645 = _1485;
        _1646 = _1500;
        _1647 = _1499;
        _1648 = _1498;
        _1649 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1650 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1651 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1637;
        _1638 = _1637;
        _1639 = _1637;
        _1640 = _1637;
        _1641 = _1637;
        _1642 = _1637;
        _1643 = _1637;
        _1644 = _1637;
        _1645 = _1637;
        _1646 = _1637;
        _1647 = _1637;
        _1648 = _1637;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1674 = fma(_1310, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302));
        float _1678 = fma(_1310, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302));
        float _1682 = fma(_1310, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302));
        float _1705 = _1302 + _1061;
        float _1706 = _1306 + _1062;
        float _1707 = _1310 + _1063;
        float _1717 = fma(_1707, cbModelParam._m0[30u].z, fma(_1706, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1705)) - _1674;
        float _1718 = fma(_1707, cbModelParam._m0[31u].z, fma(_1706, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1705)) - _1678;
        float _1719 = fma(_1707, cbModelParam._m0[32u].z, fma(_1706, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1705)) - _1682;
        float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
        float _1736 = ((_1723 * _1717) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1674 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1737 = ((_1723 * _1718) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1678 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1738 = ((_1723 * _1719) / cbModelParam._m0[35u].z) + ((((((_1682 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1736, _1737, _1738), 0.0);
        vec4 _1747 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1736, _1737, _1738), 0.0);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1736, _1737, _1738), 0.0);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1736, _1737, _1738), 0.0);
        float _1773 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1740.x + (-0.5));
        float _1775 = _1773 * (_1740.y + (-0.5));
        float _1776 = _1773 * (_1740.z + (-0.5));
        float _1783 = exp2((_1747.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1747.x + (-0.5));
        float _1785 = _1783 * (_1747.y + (-0.5));
        float _1786 = _1783 * (_1747.z + (-0.5));
        float _1793 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1754.x + (-0.5));
        float _1795 = _1793 * (_1754.y + (-0.5));
        float _1796 = _1793 * (_1754.z + (-0.5));
        float _1803 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1761.x + (-0.5));
        float _1805 = _1803 * (_1761.y + (-0.5));
        float _1806 = _1803 * (_1761.z + (-0.5));
        float _1807 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1808 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1809 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1810 = _1774 * 0.5;
        float _1811 = _1784 * 0.5;
        float _1812 = _1794 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1826 = (dot(vec3(_1061, _1062, _1063), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1807 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1837 = _1836 * 2.0;
        float _1841 = (1.0 - _1836) / (_1836 + 1.0);
        float _4442 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1851 = ((((1.0 - _1842) * (_1837 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1837 + 1.0))) + _1842) * _1807;
        float _1852 = _1775 * 0.5;
        float _1853 = _1785 * 0.5;
        float _1854 = _1795 * 0.5;
        float _1855 = dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854));
        float _1860 = (_1855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1855);
        float _1868 = (dot(vec3(_1061, _1062, _1063), vec3(_1860 * _1852, _1860 * _1853, _1860 * _1854)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1877 = sqrt(((_1853 * _1853) + (_1852 * _1852)) + (_1854 * _1854)) / (_1808 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1879 = _1878 * 2.0;
        float _1883 = (1.0 - _1878) / (_1878 + 1.0);
        float _4475 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1893 = ((((1.0 - _1884) * (_1879 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1879 + 1.0))) + _1884) * _1808;
        float _1894 = _1776 * 0.5;
        float _1895 = _1786 * 0.5;
        float _1896 = _1796 * 0.5;
        float _1897 = dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896));
        float _1902 = (_1897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1897);
        float _1910 = (dot(vec3(_1061, _1062, _1063), vec3(_1902 * _1894, _1902 * _1895, _1902 * _1896)) + 1.0) * 0.5;
        float _4486 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1919 = sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896)) / (_1809 + 9.9999997473787516355514526367188e-06);
        float _4497 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1921 = _1920 * 2.0;
        float _1925 = (1.0 - _1920) / (_1920 + 1.0);
        float _4508 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1935 = ((((1.0 - _1926) * (_1921 + 2.0)) * exp2(log2(isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_1921 + 1.0))) + _1926) * _1809;
        _1943 = _1776;
        _1944 = _1775;
        _1945 = _1774;
        _1946 = _1786;
        _1947 = _1785;
        _1948 = _1784;
        _1949 = _1796;
        _1950 = _1795;
        _1951 = _1794;
        _1952 = _1809;
        _1953 = _1808;
        _1954 = _1807;
        _1955 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
        _1956 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)));
        _1957 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)));
    }
    else
    {
        _1943 = _1637;
        _1944 = _1637;
        _1945 = _1637;
        _1946 = _1637;
        _1947 = _1637;
        _1948 = _1637;
        _1949 = _1637;
        _1950 = _1637;
        _1951 = _1637;
        _1952 = _1637;
        _1953 = _1637;
        _1954 = _1637;
        _1955 = 0.0;
        _1956 = 0.0;
        _1957 = 0.0;
    }
    float _1967 = (cbModelParam._m0[1u].x * (_1955 - _1649)) + _1649;
    float _1968 = (cbModelParam._m0[1u].x * (_1956 - _1650)) + _1650;
    float _1969 = (cbModelParam._m0[1u].x * (_1957 - _1651)) + _1651;
    float _1990 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1967 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1967 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1967));
    float _2011 = _1248 * 0.5;
    float _2012 = _1249 * 0.5;
    float _2013 = _1250 * 0.5;
    float _2014 = dot(vec4(_2011, _2012, _2013, 1.0), vec4(_1945, _1948, _1951, _1954));
    float _2017 = dot(vec4(_2011, _2012, _2013, 1.0), vec4(_1944, _1947, _1950, _1953));
    float _2020 = dot(vec4(_2011, _2012, _2013, 1.0), vec4(_1943, _1946, _1949, _1952));
    float _2054;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2027 = dot(vec4(_2011, _2012, _2013, 1.0), vec4(_1636, _1640, _1643, _1646));
        float _2031 = dot(vec4(_2011, _2012, _2013, 1.0), vec4(_1638, _1641, _1644, _1647));
        float _2035 = dot(vec4(_2011, _2012, _2013, 1.0), vec4(_1639, _1642, _1645, _1648));
        float _2042 = dot(vec4(cbModelParam._m0[39u]), vec4(_2011, _2012, _2013, 1.0));
        _2054 = dot(vec3(isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)), isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2042) ? 0.0 : (isnan(0.0) ? _2042 : max(0.0, _2042))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2054 = 1.0;
    }
    float _2065;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2056 = dot(vec4(cbModelParam._m0[40u]), vec4(_2011, _2012, _2013, 1.0));
        _2065 = dot(vec3(isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2056) ? 0.0 : (isnan(0.0) ? _2056 : max(0.0, _2056))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2065 = 1.0;
    }
    float _2069 = (_2065 * cbModelParam._m0[1u].x) + (_2054 * (1.0 - cbModelParam._m0[1u].x));
    float _2079 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1064);
    float _2080 = isnan(_2079) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2079 : min(cbModelParam._m0[25u].z, _2079));
    float _2160;
    float _2162;
    float _2164;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2127 = fma(_1310, cbModelParam._m0[13u].z, fma(_1306, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1302)) + cbModelParam._m0[13u].w;
        float _2131 = fma(_1310, cbModelParam._m0[14u].z, fma(_1306, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1302)) + cbModelParam._m0[14u].w;
        float _2135 = fma(_1310, cbModelParam._m0[15u].z, fma(_1306, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1302)) + cbModelParam._m0[15u].w;
        float _2138 = fma(_1250, cbModelParam._m0[13u].z, fma(_1249, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1248));
        float _2141 = fma(_1250, cbModelParam._m0[14u].z, fma(_1249, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1248));
        float _2144 = fma(_1250, cbModelParam._m0[15u].z, fma(_1249, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1248));
        float _2172;
        if (_2138 > 0.0)
        {
            _2172 = abs((1.0 - _2127) / _2138);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2127 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2172 = frontier_phi_19_17_ladder;
        }
        float _2374;
        if (_2141 > 0.0)
        {
            _2374 = abs((1.0 - _2131) / _2141);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2131 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2374 = frontier_phi_28_24_ladder;
        }
        float _2628;
        if (_2144 > 0.0)
        {
            _2628 = abs((1.0 - _2135) / _2144);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2135 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2628 = frontier_phi_40_35_ladder;
        }
        float _2630 = isnan(_2374) ? _2172 : (isnan(_2172) ? _2374 : min(_2172, _2374));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _2138) + _2127;
        float _2636 = (_2631 * _2141) + _2131;
        float _2637 = (_2631 * _2144) + _2135;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2638;
        float _2642 = _2638 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 > _2642) || ((_2636 < _2640) || ((_2635 < _2640) || (_2635 > _2642))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2637, cbModelParam._m0[9u].z, fma(_2636, cbModelParam._m0[9u].y, _2635 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2637, cbModelParam._m0[10u].z, fma(_2636, cbModelParam._m0[10u].y, _2635 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2637, cbModelParam._m0[11u].z, fma(_2636, cbModelParam._m0[11u].y, _2635 * cbModelParam._m0[11u].x))), _2080);
            frontier_phi_18_40_ladder = _2765.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2765.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2765.x * cbModelParam._m0[1u].y;
        }
        _2160 = frontier_phi_18_40_ladder_2;
        _2162 = frontier_phi_18_40_ladder_1;
        _2164 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1248, _1249, _1250), _2080);
        _2160 = _2148.x * cbModelParam._m0[1u].y;
        _2162 = _2148.y * cbModelParam._m0[1u].y;
        _2164 = _2148.z * cbModelParam._m0[1u].y;
    }
    float _2168 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1064);
    float _2169 = isnan(_2168) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2168 : min(cbModelParam._m0[25u].w, _2168));
    float _2258;
    float _2260;
    float _2262;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2222 = fma(_1310, cbModelParam._m0[21u].z, fma(_1306, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1302)) + cbModelParam._m0[21u].w;
        float _2226 = fma(_1310, cbModelParam._m0[22u].z, fma(_1306, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1302)) + cbModelParam._m0[22u].w;
        float _2230 = fma(_1310, cbModelParam._m0[23u].z, fma(_1306, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1302)) + cbModelParam._m0[23u].w;
        float _2233 = fma(_1250, cbModelParam._m0[21u].z, fma(_1249, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1248));
        float _2236 = fma(_1250, cbModelParam._m0[22u].z, fma(_1249, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1248));
        float _2239 = fma(_1250, cbModelParam._m0[23u].z, fma(_1249, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1248));
        float _2379;
        if (_2233 > 0.0)
        {
            _2379 = abs((1.0 - _2222) / _2233);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2222 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2379 = frontier_phi_30_26_ladder;
        }
        float _2655;
        if (_2236 > 0.0)
        {
            _2655 = abs((1.0 - _2226) / _2236);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2236 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2226 + 1.0) / _2236);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2655 = frontier_phi_42_37_ladder;
        }
        float _2868;
        if (_2239 > 0.0)
        {
            _2868 = abs((1.0 - _2230) / _2239);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2239 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2230 + 1.0) / _2239);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2868 = frontier_phi_51_48_ladder;
        }
        float _2870 = isnan(_2655) ? _2379 : (isnan(_2379) ? _2655 : min(_2379, _2655));
        float _2871 = isnan(_2868) ? _2870 : (isnan(_2870) ? _2868 : min(_2870, _2868));
        float _2875 = (_2871 * _2233) + _2222;
        float _2876 = (_2871 * _2236) + _2226;
        float _2877 = (_2871 * _2239) + _2230;
        float _2878 = _2871 * 9.9999997473787516355514526367188e-05;
        float _2879 = (-1.0) - _2878;
        float _2881 = _2878 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2877 > _2881) || ((_2877 < _2879) || ((_2876 > _2881) || ((_2876 < _2879) || ((_2875 < _2879) || (_2875 > _2881))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2877, cbModelParam._m0[17u].z, fma(_2876, cbModelParam._m0[17u].y, _2875 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2877, cbModelParam._m0[18u].z, fma(_2876, cbModelParam._m0[18u].y, _2875 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2877, cbModelParam._m0[19u].z, fma(_2876, cbModelParam._m0[19u].y, _2875 * cbModelParam._m0[19u].x))), _2169);
            frontier_phi_27_51_ladder = _3105.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3105.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3105.x * cbModelParam._m0[1u].z;
        }
        _2258 = frontier_phi_27_51_ladder_2;
        _2260 = frontier_phi_27_51_ladder_1;
        _2262 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2242 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1248, _1249, _1250), _2169);
        _2258 = _2242.x * cbModelParam._m0[1u].z;
        _2260 = _2242.y * cbModelParam._m0[1u].z;
        _2262 = _2242.z * cbModelParam._m0[1u].z;
    }
    float _2275 = (((_1273 * _1225) + _1274) * _1240) * ((cbModelParam._m0[1u].w * (_2258 - _2160)) + _2160);
    float _2277 = (((_1273 * _1227) + _1274) * _1240) * ((cbModelParam._m0[1u].w * (_2260 - _2162)) + _2162);
    float _2279 = (((_1273 * _1228) + _1274) * _1240) * ((cbModelParam._m0[1u].w * (_2262 - _2164)) + _2164);
    float _2282 = fma(_2279, cbSceneParam._m0[89u].z, fma(_2277, cbSceneParam._m0[89u].y, _2275 * cbSceneParam._m0[89u].x));
    float _2285 = fma(_2279, cbSceneParam._m0[90u].z, fma(_2277, cbSceneParam._m0[90u].y, _2275 * cbSceneParam._m0[90u].x));
    float _2288 = fma(_2279, cbSceneParam._m0[91u].z, fma(_2277, cbSceneParam._m0[91u].y, _2275 * cbSceneParam._m0[91u].x));
    uvec4 _2298 = floatBitsToUint(cbInstanceData._m0[_1200 + 5u]);
    uint _2300 = _2298.x * 14u;
    uint _2301 = _2300 + 13u;
    float _2308 = _1240 + (-1.0);
    float _2313 = (cbLight._m0[_2301].x * _2308) + 1.0;
    float _2314 = (cbLight._m0[_2301].y * _2308) + 1.0;
    float _2315 = (cbLight._m0[_2301].z * _2308) + 1.0;
    float _2316 = (cbLight._m0[_2301].w * _2308) + 1.0;
    uint _2317 = _2300 + 5u;
    float _2323 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2327 = _2300 + 4u;
    float _2333 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2337 = _2300 | 1u;
    float _2348 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_1061, _1062, _1063));
    float _2351 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_1061, _1062, _1063));
    float _4644 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _4655 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2356 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2358 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2365 = ((cbLight._m0[_2317].x * _2323) * _2358) + ((cbLight._m0[_2327].x * _2333) * _2356);
    float _2366 = ((_2323 * cbLight._m0[_2317].y) * _2358) + ((_2333 * cbLight._m0[_2327].y) * _2356);
    float _2367 = ((_2323 * cbLight._m0[_2317].z) * _2358) + ((_2333 * cbLight._m0[_2327].z) * _2356);
    uvec4 _2371 = floatBitsToUint(cbLight._m0[_2300 + 12u]);
    bool _2373 = _2371.x == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2373)
    {
        _2384 = _2365;
        _2386 = _2366;
        _2388 = _2367;
    }
    else
    {
        uint _2392 = _2300 + 6u;
        float _2408 = (dot(vec3(cbLight._m0[_2300 + 2u].xyz), vec3(_1061, _1062, _1063)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4666 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2411 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2384 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2365;
        _2386 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2366;
        _2388 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2367;
    }
    bool _2391 = _2371.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2391)
    {
        _2429 = _2384;
        _2431 = _2386;
        _2433 = _2388;
    }
    else
    {
        uint _2599 = _2300 + 7u;
        float _2615 = (dot(vec3(cbLight._m0[_2300 + 3u].xyz), vec3(_1061, _1062, _1063)) * 0.5) + 0.5;
        float _2616 = _2615 * _2615;
        float _4682 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2617 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2618 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2429 = (((cbLight._m0[_2599].x * 0.3183098733425140380859375) * _2617) * _2618) + _2384;
        _2431 = (((cbLight._m0[_2599].y * 0.3183098733425140380859375) * _2617) * _2618) + _2386;
        _2433 = (((cbLight._m0[_2599].z * 0.3183098733425140380859375) * _2617) * _2618) + _2388;
    }
    uint _2436 = _2300 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _1064) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2300].x + _1145;
    float _2452 = cbLight._m0[_2300].y + _1146;
    float _2453 = cbLight._m0[_2300].z + _1147;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2300].xyz));
    float _4698 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _4709 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _2465 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2466 = dot(vec3(_1061, _1062, _1063), vec3(_2458, _2459, _2460));
    float _4720 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2458, _2459, _2460));
    float _4731 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
    float _2487 = 0.959999978542327880859375 - _1222;
    float _2489 = 0.959999978542327880859375 - _1223;
    float _2490 = 0.959999978542327880859375 - _1224;
    float _2497 = 1.0 - _2450;
    float _2508 = (0.5 / (((_2465 * ((_2464 * _2497) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2497) + _2450) * _2464))) * _2464;
    float _4742 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2521 = _2300 + 9u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _1064) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2337].x + _1145;
    float _2535 = cbLight._m0[_2337].y + _1146;
    float _2536 = cbLight._m0[_2337].z + _1147;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2337].xyz));
    float _4753 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2548 = dot(vec3(_1061, _1062, _1063), vec3(_2541, _2542, _2543));
    float _4764 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2541, _2542, _2543));
    float _4775 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2533 * _2533;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
    float _2574 = 1.0 - _2533;
    float _2584 = (0.5 / (((_2465 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2574) + _2533) * _2547))) * _2547;
    float _4786 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2586 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    float _2596 = (((((_2567 * _2487) + _1225) * cbLight._m0[_2521].x) * _2586) * _2323) + (((((_2486 * _2487) + _1225) * cbLight._m0[_2436].x) * _2510) * _2333);
    float _2597 = (((((_2567 * _2489) + _1227) * cbLight._m0[_2521].y) * _2586) * _2323) + (((((_2486 * _2489) + _1227) * cbLight._m0[_2436].y) * _2510) * _2333);
    float _2598 = (((((_2567 * _2490) + _1228) * cbLight._m0[_2521].z) * _2586) * _2323) + (((((_2486 * _2490) + _1228) * cbLight._m0[_2436].z) * _2510) * _2333);
    float _2660;
    float _2662;
    float _2664;
    if (_2373)
    {
        _2660 = _2596;
        _2662 = _2597;
        _2664 = _2598;
    }
    else
    {
        uint _2666 = _2300 + 2u;
        uint _2670 = _2300 + 10u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _1064) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _1145;
        float _2687 = cbLight._m0[_2666].y + _1146;
        float _2688 = cbLight._m0[_2666].z + _1147;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2666].xyz));
        float _4797 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2700 = dot(vec3(_1061, _1062, _1063), vec3(_2693, _2694, _2695));
        float _4808 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4819 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0);
        float _2726 = 1.0 - _2685;
        float _2736 = (0.5 / (((_2465 * ((_2699 * _2726) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2726) + _2685) * _2699))) * _2699;
        float _4830 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2738 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2739 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2660 = (((((_2719 * _2487) + _1225) * cbLight._m0[_2670].x) * _2738) * _2739) + _2596;
        _2662 = (((((_2719 * _2489) + _1227) * cbLight._m0[_2670].y) * _2738) * _2739) + _2597;
        _2664 = (((((_2719 * _2490) + _1228) * cbLight._m0[_2670].z) * _2738) * _2739) + _2598;
    }
    float _2774;
    float _2776;
    float _2778;
    if (_2391)
    {
        _2774 = _2660;
        _2776 = _2662;
        _2778 = _2664;
    }
    else
    {
        uint _2785 = _2300 + 3u;
        uint _2789 = _2300 + 11u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _1064) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _1145;
        float _2806 = cbLight._m0[_2785].y + _1146;
        float _2807 = cbLight._m0[_2785].z + _1147;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2785].xyz));
        float _4846 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2819 = dot(vec3(_1061, _1062, _1063), vec3(_2812, _2813, _2814));
        float _4857 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4868 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0);
        float _2845 = 1.0 - _2804;
        float _2855 = (0.5 / (((_2465 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2845) + _2804) * _2818))) * _2818;
        float _4879 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2774 = (((((_2838 * _2487) + _1225) * cbLight._m0[_2789].x) * _2857) * _2858) + _2660;
        _2776 = (((((_2838 * _2489) + _1227) * cbLight._m0[_2789].y) * _2857) * _2858) + _2662;
        _2778 = (((((_2838 * _2490) + _1228) * cbLight._m0[_2789].z) * _2857) * _2858) + _2664;
    }
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_2298.y == 0u)
    {
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2933;
        float _2935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2933;
        float _2936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2933;
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.x;
        uint _2960 = uint((float(_2948.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1163) / _2949))) + floor(float(uint(cbSceneParam._m0[85u].x * _1162) / _2949)));
        float _2970 = (log2(_2936 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2971 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        uint _2974 = uint(isnan(14.0) ? _2971 : (isnan(_2971) ? 14.0 : min(_2971, 14.0)));
        uvec4 _2979 = texelFetch(g_lightClusterGridBuffer, int(((_2974 << 2u) + (_2960 << 6u)) >> 2u));
        uint _2980 = _2979.x;
        uint _2981 = _2948.z;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((((1u << ((_2981 >> 4u) & 15u)) + 4294967295u) & _2980) == 0u) || ((_2981 & 240u) == 0u))
        {
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
        }
        else
        {
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            uint _3277 = 0u;
            uint _3286;
            bool _3287;
            for (;;)
            {
                _3286 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                _3287 = _3286 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3287)
                {
                    frontier_phi_68_pred = _3271;
                    frontier_phi_68_pred_1 = _3276;
                    frontier_phi_68_pred_2 = _3275;
                    frontier_phi_68_pred_3 = _3274;
                    frontier_phi_68_pred_4 = _3273;
                    frontier_phi_68_pred_5 = _3272;
                }
                else
                {
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    uint _3422;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3286;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    for (;;)
                    {
                        uint _3426 = uint(findLSB(_3422)) + (_3277 << 5u);
                        uint _3423 = (_3422 + 4294967295u) & _3422;
                        uint _3428 = _3426 * 48u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3448 = (_3426 * 48u) + 4u;
                        vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 3u)).x));
                        uint _3467 = (_3426 * 48u) + 8u;
                        vec3 _3478 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x));
                        float _3482 = _3442.x - _2934;
                        float _3483 = _3442.y - _2935;
                        float _3484 = _3442.z - _2936;
                        float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                        float _3488 = inversesqrt(_3485);
                        float _3489 = _3488 * _3482;
                        float _3490 = _3488 * _3483;
                        float _3491 = _3488 * _3484;
                        float _3492 = dot(vec3(_1181, _1184, _1187), vec3(_3489, _3490, _3491));
                        float _3497 = 1.0 - (_3485 * _3442.w);
                        float _4905 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3498 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3499 = sqrt(_3485) * _3461.w;
                        float _3502 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                        float _3503 = _3502 * _3502;
                        float _3506 = ((1.0 - _3503) * _3492) + _3503;
                        float _3509 = _3499 * _3499;
                        float _3513 = ((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3498) / ((_3509 * 0.699999988079071044921875) + 1.0);
                        float _3517 = (-0.0) - _2934;
                        float _3518 = (-0.0) - _2935;
                        float _3519 = (-0.0) - _2936;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3524 = _3523 * _3517;
                        float _3525 = _3523 * _3518;
                        float _3526 = _3523 * _3519;
                        float _3534 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                        float _3535 = 1.0 - _1256;
                        float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                        float _3543 = _3542 * _3542;
                        float _3544 = _3543 * _3543;
                        float _3545 = _3524 + _3489;
                        float _3546 = _3525 + _3490;
                        float _3547 = _3526 + _3491;
                        float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                        float _3555 = dot(vec3(_1181, _1184, _1187), vec3(_3524, _3525, _3526));
                        float _4921 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3558 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3559 = dot(vec3(_1181, _1184, _1187), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                        float _4932 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3562 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                        float _3567 = _3502 * _3543;
                        float _3568 = _3567 * _3567;
                        float _3571 = ((1.0 - _3568) * _3492) + _3568;
                        float _4943 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3572 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3573 = 1.0 - _3543;
                        float _3583 = (0.5 / (((_3572 * ((_3558 * _3573) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3543) * _3558))) * _3572;
                        float _4954 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3594 = (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3566 * _3566) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125))) * _3498;
                        _3346 = (_3513 * _3461.x) + _3419;
                        _3347 = (_3513 * _3461.y) + _3420;
                        _3348 = (_3513 * _3461.z) + _3421;
                        _3343 = (_3594 * _3478.x) + _3416;
                        _3344 = (_3594 * _3478.y) + _3417;
                        _3345 = (_3594 * _3478.z) + _3418;
                        if (_3423 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3423;
                        }
                    }
                    frontier_phi_68_pred = _3343;
                    frontier_phi_68_pred_1 = _3348;
                    frontier_phi_68_pred_2 = _3347;
                    frontier_phi_68_pred_3 = _3346;
                    frontier_phi_68_pred_4 = _3345;
                    frontier_phi_68_pred_5 = _3344;
                }
                _3111 = frontier_phi_68_pred;
                _3121 = frontier_phi_68_pred_1;
                _3119 = frontier_phi_68_pred_2;
                _3117 = frontier_phi_68_pred_3;
                _3115 = frontier_phi_68_pred_4;
                _3113 = frontier_phi_68_pred_5;
                uint _3278 = _3277 + 1u;
                if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3271 = _3111;
                    _3272 = _3113;
                    _3273 = _3115;
                    _3274 = _3117;
                    _3275 = _3119;
                    _3276 = _3121;
                    _3277 = _3278;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
        }
        uvec4 _3124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3125 = _3124.z;
        uint _3127 = (_3125 >> 8u) & 15u;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        if (((4294967295u << _3127) & _2980) == 0u)
        {
            _3239 = _3110;
            _3241 = _3112;
            _3243 = _3114;
            _3245 = _3116;
            _3247 = _3118;
            _3249 = _3120;
        }
        else
        {
            float _3264 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
            float _3265 = _3264 * _2934;
            float _3266 = _3264 * _2935;
            float _3267 = _3264 * _2936;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3127 < ((_3125 >> 12u) & 15u))
            {
                float _3240;
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3399 = _3110;
                float _3400 = _3112;
                float _3401 = _3114;
                float _3402 = _3116;
                float _3403 = _3118;
                float _3404 = _3120;
                uint _3405 = _3127;
                uint _3414;
                bool _3415;
                for (;;)
                {
                    _3414 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3405 << 2u)) >> 2u)).x;
                    _3415 = _3414 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3415)
                    {
                        frontier_phi_79_pred = _3404;
                        frontier_phi_79_pred_1 = _3403;
                        frontier_phi_79_pred_2 = _3402;
                        frontier_phi_79_pred_3 = _3401;
                        frontier_phi_79_pred_4 = _3400;
                        frontier_phi_79_pred_5 = _3399;
                    }
                    else
                    {
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3621 = _3399;
                        float _3622 = _3400;
                        float _3623 = _3401;
                        float _3624 = _3402;
                        float _3625 = _3403;
                        float _3626 = _3404;
                        uint _3627 = _3414;
                        uint _3628;
                        vec4 _3653;
                        float _3654;
                        vec4 _3669;
                        vec3 _3681;
                        vec4 _3696;
                        vec4 _3711;
                        float _3757;
                        bool _3758;
                        for (;;)
                        {
                            uint _3638 = ((_3405 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3627));
                            _3628 = (_3627 + 4294967295u) & _3627;
                            uint _3640 = _3638 * 40u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            _3654 = _3653.w;
                            uint _3656 = (_3638 * 40u) + 4u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3671 = (_3638 * 40u) + 8u;
                            _3681 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x));
                            uint _3683 = (_3638 * 40u) + 16u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3638 * 40u) + 20u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3638 * 40u) + 24u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3732 = (_3638 * 40u) + 28u;
                            vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            _3757 = fma(_2936, _3745.z, fma(_2935, _3745.y, _3745.x * _2934)) + _3745.w;
                            _3758 = !((fma(_2936, _3726.z, fma(_2935, _3726.y, _3726.x * _2934)) + _3726.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3758)
                            {
                                float _3785 = _3653.x - _2934;
                                float _3786 = _3653.y - _2935;
                                float _3787 = _3653.z - _2936;
                                float _3788 = dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787));
                                float _3791 = inversesqrt(_3788);
                                float _3792 = _3791 * _3785;
                                float _3793 = _3791 * _3786;
                                float _3794 = _3791 * _3787;
                                float _3798 = 1.0 - (_3788 / (_3654 * _3654));
                                float _4965 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3803 = sqrt(_3788) * _3669.w;
                                float _3805 = 1.39999997615814208984375 / (_3803 + 1.39999997615814208984375);
                                float _3806 = _3805 * _3805;
                                float _3809 = ((1.0 - _3806) * dot(vec3(_3792, _3793, _3794), vec3(_1181, _1184, _1187))) + _3806;
                                float _3812 = _3803 * _3803;
                                float _3816 = (fma(_2936, _3696.z, fma(_2935, _3696.y, _3696.x * _2934)) + _3696.w) / _3757;
                                float _3817 = (fma(_2936, _3711.z, fma(_2935, _3711.y, _3711.x * _2934)) + _3711.w) / _3757;
                                float _3821 = 1.0 - dot(vec2(_3816, _3817), vec2(_3816, _3817));
                                float _4981 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3823 = _3822 * (((isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0))) * _3799) / ((_3812 * 0.699999988079071044921875) + 1.0));
                                float _3835 = exp2(log2(1.0 / ((_3812 * 3.5) + 5.0)) * 0.25);
                                float _3836 = 1.0 - _1256;
                                float _3843 = sqrt(1.0 - ((1.0 - (_3836 * _3836)) * (1.0 - (_3835 * _3835))));
                                float _3844 = _3843 * _3843;
                                float _3845 = _3844 * _3844;
                                float _3846 = _3792 - _3265;
                                float _3847 = _3793 - _3266;
                                float _3848 = _3794 - _3267;
                                float _3852 = inversesqrt(dot(vec3(_3846, _3847, _3848), vec3(_3846, _3847, _3848)));
                                float _3856 = dot(vec3(_1181, _1184, _1187), vec3((-0.0) - _3265, (-0.0) - _3266, (-0.0) - _3267));
                                float _4992 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3859 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3860 = dot(vec3(_1181, _1184, _1187), vec3(_3852 * _3846, _3852 * _3847, _3852 * _3848));
                                float _5003 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3863 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3867 = ((_3863 * _3863) * (_3845 + (-1.0))) + 1.0;
                                float _3868 = _3805 * _3844;
                                float _3869 = _3868 * _3868;
                                float _3875 = ((1.0 - _3869) * dot(vec3(_1181, _1184, _1187), vec3(_3792, _3793, _3794))) + _3869;
                                float _5014 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3876 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3877 = 1.0 - _3844;
                                float _3887 = (0.5 / (((_3876 * ((_3859 * _3877) + _3844)) + 9.9999999392252902907785028219223e-09) + (((_3876 * _3877) + _3844) * _3859))) * _3876;
                                float _5025 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3897 = (_3822 * _3799) * (((_3845 * 3.1415927410125732421875) * (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) / ((_3867 * _3867) * ((_3812 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3823 * _3669.y;
                                frontier_phi_85_pred_1 = _3823 * _3669.x;
                                frontier_phi_85_pred_2 = _3897 * _3681.z;
                                frontier_phi_85_pred_3 = _3897 * _3681.y;
                                frontier_phi_85_pred_4 = _3897 * _3681.x;
                                frontier_phi_85_pred_5 = _3823 * _3669.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3905 = frontier_phi_85_pred;
                            _3904 = frontier_phi_85_pred_1;
                            _3903 = frontier_phi_85_pred_2;
                            _3902 = frontier_phi_85_pred_3;
                            _3901 = frontier_phi_85_pred_4;
                            _3906 = frontier_phi_85_pred_5;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            if (_3628 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3628;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3613;
                        frontier_phi_79_pred_1 = _3612;
                        frontier_phi_79_pred_2 = _3611;
                        frontier_phi_79_pred_3 = _3610;
                        frontier_phi_79_pred_4 = _3609;
                        frontier_phi_79_pred_5 = _3608;
                    }
                    _3250 = frontier_phi_79_pred;
                    _3248 = frontier_phi_79_pred_1;
                    _3246 = frontier_phi_79_pred_2;
                    _3244 = frontier_phi_79_pred_3;
                    _3242 = frontier_phi_79_pred_4;
                    _3240 = frontier_phi_79_pred_5;
                    uint _3406 = _3405 + 1u;
                    if (_3406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3399 = _3240;
                        _3400 = _3242;
                        _3401 = _3244;
                        _3402 = _3246;
                        _3403 = _3248;
                        _3404 = _3250;
                        _3405 = _3406;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3244;
                frontier_phi_60_61_ladder_1 = _3250;
                frontier_phi_60_61_ladder_2 = _3248;
                frontier_phi_60_61_ladder_3 = _3246;
                frontier_phi_60_61_ladder_4 = _3242;
                frontier_phi_60_61_ladder_5 = _3240;
            }
            else
            {
                frontier_phi_60_61_ladder = _3114;
                frontier_phi_60_61_ladder_1 = _3120;
                frontier_phi_60_61_ladder_2 = _3118;
                frontier_phi_60_61_ladder_3 = _3116;
                frontier_phi_60_61_ladder_4 = _3112;
                frontier_phi_60_61_ladder_5 = _3110;
            }
            _3239 = frontier_phi_60_61_ladder_5;
            _3241 = frontier_phi_60_61_ladder_4;
            _3243 = frontier_phi_60_61_ladder;
            _3245 = frontier_phi_60_61_ladder_3;
            _3247 = frontier_phi_60_61_ladder_2;
            _3249 = frontier_phi_60_61_ladder_1;
        }
        float _3254 = isnan(1.0) ? _1240 : (isnan(_1240) ? 1.0 : min(_1240, 1.0));
        _2993 = (_3254 * _3245) + _2429;
        _2995 = (_3254 * _3247) + _2431;
        _2997 = (_3254 * _3249) + _2433;
        _2999 = ((_3239 * _1225) * _3254) + _2774;
        _3001 = ((_3241 * _1227) * _3254) + _2776;
        _3003 = ((_3243 * _1228) * _3254) + _2778;
    }
    else
    {
        _2993 = _2429;
        _2995 = _2431;
        _2997 = _2433;
        _2999 = _2774;
        _3001 = _2776;
        _3003 = _2778;
    }
    uint _3009 = _1201 + uint(cbMatDynParam._m0[0u].w);
    float _3015 = ((((((_966.x - _961.x) * _944) + _961.x) * cbMtdParam._m0[21u].x) + ((cbMtdParam._m0[27u].x * _890) * cbMtdParam._m0[20u].x)) * _899) * cbInstanceData._m0[_3009].x;
    float _3016 = ((((((_966.y - _961.y) * _944) + _961.y) * cbMtdParam._m0[21u].y) + ((cbMtdParam._m0[27u].x * (((_879.y - _877) * _858) + _877)) * cbMtdParam._m0[20u].y)) * _899) * cbInstanceData._m0[_3009].y;
    float _3017 = ((((((_966.z - _961.z) * _944) + _961.z) * cbMtdParam._m0[21u].z) + ((cbMtdParam._m0[27u].x * (((_879.z - _878) * _858) + _878)) * cbMtdParam._m0[20u].z)) * _899) * cbInstanceData._m0[_3009].z;
    float _5041 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _5052 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _5063 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _3034 = (((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2993 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1240))) + ((_2999 + ((isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))) * _2069)) * cbPerFrame._m0[3u].x)) + _3015;
    float _3036 = (_3016 + ((_3001 + ((isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0))) * _2069)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_2995 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1240)));
    float _3038 = (_3017 + ((_3003 + ((isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0))) * _2069)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_2997 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1240)));
    float _3039 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
    float _3040 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
    float _3041 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
    float _3047 = cbMtdParam._m0[2u].x * _3015;
    float _3048 = cbMtdParam._m0[2u].y * _3016;
    float _3049 = cbMtdParam._m0[2u].z * _3017;
    float _5089 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3051 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
    uint _3052 = _1200 + 6u;
    float _3060 = _1162 / cbSceneParam._m0[86u].x;
    float _3061 = _1163 / cbSceneParam._m0[86u].y;
    vec4 _3075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, (log2((isnan(cbSceneParam._m0[77u].w) ? _1088 : (isnan(_1088) ? cbSceneParam._m0[77u].w : min(_1088, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3077 = _3075.x;
    float _3078 = _3075.y;
    float _3079 = _3075.z;
    float _3080 = _3075.w;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    if (_1088 > cbSceneParam._m0[78u].w)
    {
        float _3135 = isnan(_1088) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1088 : min(cbSceneParam._m0[80u].w, _1088));
        float _3136 = _3135 / _1088;
        float _3147 = _3136 * _1138;
        float _3148 = _1139 * _3136;
        float _3149 = (-0.0) - _3148;
        float _3150 = _3136 * _1140;
        float _3152 = (cbSceneParam._m0[77u].w * _3149) / _3135;
        float _3153 = _3152 + cbSceneParam._m0[79u].w;
        float _3154 = cbSceneParam._m0[79u].w - _3148;
        float _3160 = sqrt(((_3147 * _3147) + (_3148 * _3148)) + (_3150 * _3150));
        float _3163 = (1.0 - (cbSceneParam._m0[77u].w / _3135)) * _3160;
        float _3168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3356;
        if (abs((_3149 - _3152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3356 = ((((_3153 > 0.0) ? exp2(_3168 * _3153) : (2.0 - exp2(_3170 * _3153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3163;
        }
        else
        {
            float _3300 = 1.0 / cbSceneParam._m0[80u].x;
            float _3301 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : max(_3153, _3154));
            float _3302 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : min(_3153, _3154));
            float _3311 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : min(_3301, 0.0));
            float _3312 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : min(_3302, 0.0));
            _3356 = ((abs(_3160 / _3149) * cbSceneParam._m0[80u].y) * ((((_3311 - _3312) * 2.0) - ((exp2(_3168 * (isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0)))) - exp2(_3168 * (isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))))) * _3300)) - ((exp2(_3170 * _3311) - exp2(_3170 * _3312)) * _3300))) + (_3163 * cbSceneParam._m0[80u].z);
        }
        vec4 _3358 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, 1.0), 0.0);
        float _3367 = exp2((_3356 * (-1.44269502162933349609375)) * (1.0 - _3358.w));
        float _3368 = log2(_3367);
        float _3384 = log2(_3080);
        _3172 = (exp2(_3384 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].x)) * _3358.x) / cbSceneParam._m0[78u].x)) + _3077;
        _3174 = (exp2(_3384 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].y)) * _3358.y) / cbSceneParam._m0[78u].y)) + _3078;
        _3176 = (exp2(_3384 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].z)) * _3358.z) / cbSceneParam._m0[78u].z)) + _3079;
        _3178 = _3367 * _3080;
    }
    else
    {
        _3172 = _3077;
        _3174 = _3078;
        _3176 = _3079;
        _3178 = _3080;
    }
    bool _3394;
    vec4 _3188;
    vec4 _3210;
    float _3212;
    float _3216;
    float _3217;
    float _3218;
    float _3221;
    float _3224;
    float _3227;
    float _3228;
    bool _3238;
    for (;;)
    {
        _3188 = cbMatDynParam._m0[0u];
        float _3190 = roundEven(_3188.y);
        bool _3191 = _3190 == 3.0;
        float _3192 = log2(_3178);
        float _3196 = exp2(_3192 * cbSceneParam._m0[78u].x);
        float _3197 = exp2(_3192 * cbSceneParam._m0[78u].y);
        float _3198 = exp2(_3192 * cbSceneParam._m0[78u].z);
        float _3199 = _3196 * _3039;
        float _3200 = _3197 * _3040;
        float _3201 = _3198 * _3041;
        float _3208 = _1151 + (-0.5);
        _3210 = cbMtdParam._m0[1u];
        _3212 = _3210.y * _3208;
        float _3215 = (_3190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3216 = _3215 * (_3191 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3172)));
        _3217 = _3215 * (_3191 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3174)));
        _3218 = _3215 * (_3191 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3176)));
        _3221 = ((_3047 * _3051) * _3196) * _3215;
        _3224 = ((_3048 * _3051) * _3197) * _3215;
        _3227 = ((_3049 * _3051) * _3198) * _3215;
        _3228 = _3208 * 0.999000012874603271484375;
        _3238 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3238)
        {
            if ((cbInstanceData._m0[_1200 + 7u].x + _3228) < 0.5)
            {
                _3394 = true;
                break;
            }
        }
        uint _3335 = _1201 + uint(_3188.w);
        if ((cbInstanceData._m0[_3335].w < 1.0) && ((cbInstanceData._m0[_3335].w + _3228) < 0.5))
        {
            _3394 = true;
            break;
        }
        if ((_3212 + 1.0) < _3210.x)
        {
            _3394 = true;
            break;
        }
        _3394 = false;
        break;
    }
    float _3599;
    if (_3394)
    {
        discard_state = true;
        _3599 = 0.0;
    }
    else
    {
        _3599 = cbInstanceData._m0[_3052].w;
    }
    SV_Target.x = _3216;
    SV_Target.y = _3217;
    SV_Target.z = _3218;
    SV_Target.w = _3599;
    SV_Target_1.x = _3221;
    SV_Target_1.y = _3224;
    SV_Target_1.z = _3227;
    SV_Target_1.w = cbInstanceData._m0[_3052].w;
    discard_exit();
}


