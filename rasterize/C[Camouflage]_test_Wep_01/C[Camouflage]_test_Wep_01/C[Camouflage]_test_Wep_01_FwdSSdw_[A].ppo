#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1098;
float _3565;
float _3566;
float _3567;
float _3568;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    vec4 _310 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _310.w;
    float _317 = _310.x * cbMtdParam._m0[10u].x;
    float _318 = _310.y * cbMtdParam._m0[10u].y;
    float _319 = _310.z * cbMtdParam._m0[10u].z;
    vec4 _335 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _338 = _335.x + cbMtdParam._m0[12u].w;
    vec4 _354 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _362 = (_354.x * 2.0) + (-1.0);
    float _364 = (_354.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3577 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _374 = fma(_371, _233, fma(_364, _225 * TANGENT.x, (_211 * _203) * _362));
    float _377 = fma(_371, _234, fma(_364, _225 * TANGENT.y, (_211 * _204) * _362));
    float _380 = fma(_371, _235, fma(_364, _225 * TANGENT.z, (_211 * _205) * _362));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _388 = _354.z + cbMtdParam._m0[13u].x;
    float _400 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _401 = _400 * _290;
    float _402 = _400 * _291;
    float _403 = _400 * _292;
    float _407 = dot(vec4(_401, _402, _403, 0.0), vec4(_385, _386, _387, 0.0)) - cbMtdParam._m0[13u].y;
    float _3588 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _414 = exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _444 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _472 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _385);
    float _473 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _386);
    float _480 = isnan(cbInstanceData._m0[8u].x) ? _472 : (isnan(_472) ? cbInstanceData._m0[8u].x : max(_472, cbInstanceData._m0[8u].x));
    float _481 = isnan(cbInstanceData._m0[8u].y) ? _473 : (isnan(_473) ? cbInstanceData._m0[8u].y : max(_473, cbInstanceData._m0[8u].y));
    vec4 _485 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _480 : (isnan(_480) ? cbInstanceData._m0[8u].z : min(_480, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _481 : (isnan(_481) ? cbInstanceData._m0[8u].w : min(_481, cbInstanceData._m0[8u].w))));
    vec4 _510 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _513 = _510.x + cbMtdParam._m0[12u].x;
    float _514 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _515 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
    float _519 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _520 = _519 * _385;
    float _521 = _519 * _386;
    float _522 = _519 * _387;
    float _3634 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _523 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _524 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3667 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3678 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3689 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _528 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _549 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _551 = _549.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _777 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _783 = (cbMatDynParam._m0[5u].x * _777) + cbMatDynParam._m0[5u].y;
        float _3700 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _788 = (cbMatDynParam._m0[5u].z * _777) + cbMatDynParam._m0[5u].w;
        float _3711 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) - _784)) + _784) < ((_551 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _565 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _567 = _565.w;
    float _587 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _590 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _593 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    vec4 _595 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _606 = (((_595.y - _524) + (_595.w * _524)) * cbMtdParam._m0[3u].x) + _524;
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _620 = _619 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3722 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    vec4 _633 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _638 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _649 = (((_638.x - _528) + (_638.w * _528)) * cbMtdParam._m0[3u].x) + _528;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _567) - _630) + _633.x)) + _630;
    float _663 = (cbMtdParam._m0[3u].x * (((_631 * _567) - _631) + _633.y)) + _631;
    float _664 = (cbMtdParam._m0[3u].x * (((_632 * _567) - _632) + _633.z)) + _632;
    float _665 = 1.0 - _649;
    float _666 = _665 * _662;
    float _667 = _665 * _663;
    float _668 = _665 * _664;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _649;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _649;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _649;
    float _676 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    vec4 _687 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _690 = _687.x * TEXCOORD_8;
    float _691 = dot(vec3(_520, _521, _522), vec3(_401, _402, _403));
    float _694 = _691 * 2.0;
    float _698 = (_694 * _520) - _401;
    float _699 = (_694 * _521) - _402;
    float _700 = (_694 * _522) - _403;
    float _704 = abs(dot(vec3(_401, _402, _403), vec3(_520, _521, _522)));
    float _3755 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _711 = sqrt(_606);
    float _723 = exp2((_711 * 5.0) * log2(1.0 - (_705 * 0.999000012874603271484375))) / (4.0 - (_711 * 3.0));
    float _729 = (1.0 - _723) * ((_711 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _730 = _723 * _711;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758));
        float _826 = fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758));
        float _830 = fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758));
        float _855 = _758 + _520;
        float _856 = _762 + _521;
        float _857 = _766 + _522;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_520, _521, _522), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3803 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_520, _521, _522), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3836 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_520, _521, _522), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3869 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1141 = fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758));
        float _1145 = fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758));
        float _1149 = fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758));
        float _1172 = _758 + _520;
        float _1173 = _762 + _521;
        float _1174 = _766 + _522;
        float _1184 = fma(_1174, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172)) - _1141;
        float _1185 = fma(_1174, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172)) - _1145;
        float _1186 = fma(_1174, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172)) - _1149;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1141 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1145 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[35u].z) + ((((((_1149 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1240 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1207.x + (-0.5));
        float _1242 = _1240 * (_1207.y + (-0.5));
        float _1243 = _1240 * (_1207.z + (-0.5));
        float _1250 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1214.x + (-0.5));
        float _1252 = _1250 * (_1214.y + (-0.5));
        float _1253 = _1250 * (_1214.z + (-0.5));
        float _1260 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1221.x + (-0.5));
        float _1262 = _1260 * (_1221.y + (-0.5));
        float _1263 = _1260 * (_1221.z + (-0.5));
        float _1270 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1228.x + (-0.5));
        float _1272 = _1270 * (_1228.y + (-0.5));
        float _1273 = _1270 * (_1228.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_520, _521, _522), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3932 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1304 + 1.0))) + _1309) * _1274;
        float _1319 = _1242 * 0.5;
        float _1320 = _1252 * 0.5;
        float _1321 = _1262 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_520, _521, _522), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3965 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1346 + 1.0))) + _1351) * _1275;
        float _1361 = _1243 * 0.5;
        float _1362 = _1253 * 0.5;
        float _1363 = _1263 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_520, _521, _522), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3998 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1388 + 1.0))) + _1393) * _1276;
        _1410 = _1243;
        _1411 = _1242;
        _1412 = _1241;
        _1413 = _1253;
        _1414 = _1252;
        _1415 = _1251;
        _1416 = _1263;
        _1417 = _1262;
        _1418 = _1261;
        _1419 = _1276;
        _1420 = _1275;
        _1421 = _1274;
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = _1098;
        _1419 = _1098;
        _1420 = _1098;
        _1421 = _1098;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1457 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1434));
    float _1478 = _698 * 0.5;
    float _1479 = _699 * 0.5;
    float _1480 = _700 * 0.5;
    float _1481 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1484 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1487 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1521;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1494 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1498 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1502 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1509 = dot(vec4(cbModelParam._m0[39u]), vec4(_1478, _1479, _1480, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1532;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1523 = dot(vec4(cbModelParam._m0[40u]), vec4(_1478, _1479, _1480, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1536 = (_1532 * cbModelParam._m0[1u].x) + (_1521 * (1.0 - cbModelParam._m0[1u].x));
    float _1546 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1547 = isnan(_1546) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1546 : min(cbModelParam._m0[25u].z, _1546));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1595 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1599 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1603 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1606 = fma(_700, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698));
        float _1609 = fma(_700, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698));
        float _1612 = fma(_700, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698));
        float _1640;
        if (_1606 > 0.0)
        {
            _1640 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1640 = frontier_phi_19_17_ladder;
        }
        float _1867;
        if (_1609 > 0.0)
        {
            _1867 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1867 = frontier_phi_28_24_ladder;
        }
        float _2124;
        if (_1612 > 0.0)
        {
            _2124 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2124 = frontier_phi_40_35_ladder;
        }
        float _2126 = isnan(_1867) ? _1640 : (isnan(_1640) ? _1867 : min(_1640, _1867));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1606) + _1595;
        float _2132 = (_2127 * _1609) + _1599;
        float _2133 = (_2127 * _1612) + _1603;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2134;
        float _2138 = _2134 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 > _2138) || ((_2132 < _2136) || ((_2131 < _2136) || (_2131 > _2138))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2133, cbModelParam._m0[9u].z, fma(_2132, cbModelParam._m0[9u].y, _2131 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2133, cbModelParam._m0[10u].z, fma(_2132, cbModelParam._m0[10u].y, _2131 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2133, cbModelParam._m0[11u].z, fma(_2132, cbModelParam._m0[11u].y, _2131 * cbModelParam._m0[11u].x))), _1547);
            frontier_phi_18_40_ladder = _2261.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2261.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2261.x * cbModelParam._m0[1u].y;
        }
        _1628 = frontier_phi_18_40_ladder_2;
        _1630 = frontier_phi_18_40_ladder_1;
        _1632 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_698, _699, _700), _1547);
        _1628 = _1616.x * cbModelParam._m0[1u].y;
        _1630 = _1616.y * cbModelParam._m0[1u].y;
        _1632 = _1616.z * cbModelParam._m0[1u].y;
    }
    float _1636 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1636 : min(cbModelParam._m0[25u].w, _1636));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1694 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1698 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1702 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1705 = fma(_700, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698));
        float _1708 = fma(_700, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698));
        float _1711 = fma(_700, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698));
        float _1872;
        if (_1705 > 0.0)
        {
            _1872 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1872 = frontier_phi_30_26_ladder;
        }
        float _2151;
        if (_1708 > 0.0)
        {
            _2151 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2151 = frontier_phi_42_37_ladder;
        }
        float _2364;
        if (_1711 > 0.0)
        {
            _2364 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2364 = frontier_phi_51_48_ladder;
        }
        float _2366 = isnan(_2151) ? _1872 : (isnan(_1872) ? _2151 : min(_1872, _2151));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1705) + _1694;
        float _2372 = (_2367 * _1708) + _1698;
        float _2373 = (_2367 * _1711) + _1702;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1637);
            frontier_phi_27_51_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1730 = frontier_phi_27_51_ladder_2;
        _1732 = frontier_phi_27_51_ladder_1;
        _1734 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_698, _699, _700), _1637);
        _1730 = _1714.x * cbModelParam._m0[1u].z;
        _1732 = _1714.y * cbModelParam._m0[1u].z;
        _1734 = _1714.z * cbModelParam._m0[1u].z;
    }
    float _1747 = (((_729 * _676) + _730) * _690) * ((cbModelParam._m0[1u].w * (_1730 - _1628)) + _1628);
    float _1749 = (((_729 * _678) + _730) * _690) * ((cbModelParam._m0[1u].w * (_1732 - _1630)) + _1630);
    float _1751 = (((_729 * _679) + _730) * _690) * ((cbModelParam._m0[1u].w * (_1734 - _1632)) + _1632);
    float _1754 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, _1747 * cbSceneParam._m0[91u].x));
    vec4 _1768 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_562, _563));
    float _1770 = _1768.w;
    float _1782 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1770);
    float _1783 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1770);
    float _1784 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1770);
    uvec4 _1788 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _1790 = _1788.x * 14u;
    uint _1791 = _1790 + 13u;
    float _1798 = _690 + (-1.0);
    float _1803 = (cbLight._m0[_1791].x * _1798) + 1.0;
    float _1804 = (cbLight._m0[_1791].y * _1798) + 1.0;
    float _1805 = (cbLight._m0[_1791].z * _1798) + 1.0;
    float _1806 = (cbLight._m0[_1791].w * _1798) + 1.0;
    uint _1807 = _1790 + 5u;
    float _1813 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1817 = _1790 + 4u;
    float _1826 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1830 = _1790 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_520, _521, _522));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_520, _521, _522));
    float _4134 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _4145 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1807].x * _1813) * _1851) + (((cbLight._m0[_1817].x * _1782) * _1826) * _1849);
    float _1859 = ((_1813 * cbLight._m0[_1807].y) * _1851) + (((cbLight._m0[_1817].y * _1783) * _1826) * _1849);
    float _1860 = ((_1813 * cbLight._m0[_1807].z) * _1851) + (((cbLight._m0[_1817].z * _1784) * _1826) * _1849);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1790 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1858;
        _1879 = _1859;
        _1881 = _1860;
    }
    else
    {
        uint _1885 = _1790 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1790 + 2u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _4156 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1904 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1860;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2095 = _1790 + 7u;
        float _2111 = (dot(vec3(cbLight._m0[_1790 + 3u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4172 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2114 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1922 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1877;
        _1924 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1879;
        _1926 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1881;
    }
    uint _1929 = _1790 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _606) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1790].x + _401;
    float _1945 = cbLight._m0[_1790].y + _402;
    float _1946 = cbLight._m0[_1790].z + _403;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1790].xyz));
    float _4188 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _1958 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _1959 = dot(vec3(_520, _521, _522), vec3(_1951, _1952, _1953));
    float _4210 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1951, _1952, _1953));
    float _4221 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
    float _1980 = 0.959999978542327880859375 - _673;
    float _1982 = 0.959999978542327880859375 - _674;
    float _1983 = 0.959999978542327880859375 - _675;
    float _1990 = 1.0 - _1943;
    float _2001 = (0.5 / (((_1958 * ((_1957 * _1990) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1990) + _1943) * _1957))) * _1957;
    float _4232 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2017 = _1790 + 9u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _606) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1830].x + _401;
    float _2031 = cbLight._m0[_1830].y + _402;
    float _2032 = cbLight._m0[_1830].z + _403;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1830].xyz));
    float _4243 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2044 = dot(vec3(_520, _521, _522), vec3(_2037, _2038, _2039));
    float _4254 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2037, _2038, _2039));
    float _4265 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2029 * _2029;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2070 = 1.0 - _2029;
    float _2080 = (0.5 / (((_1958 * ((_2043 * _2070) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2070) + _2029) * _2043))) * _2043;
    float _4276 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    float _2092 = (((((_2063 * _1980) + _676) * cbLight._m0[_2017].x) * _2082) * _1813) + ((((cbLight._m0[_1929].x * _1782) * ((_1979 * _1980) + _676)) * _2003) * _1826);
    float _2093 = (((((_2063 * _1982) + _678) * cbLight._m0[_2017].y) * _2082) * _1813) + ((((cbLight._m0[_1929].y * _1783) * ((_1979 * _1982) + _678)) * _2003) * _1826);
    float _2094 = (((((_2063 * _1983) + _679) * cbLight._m0[_2017].z) * _2082) * _1813) + ((((cbLight._m0[_1929].z * _1784) * ((_1979 * _1983) + _679)) * _2003) * _1826);
    float _2156;
    float _2158;
    float _2160;
    if (_1866)
    {
        _2156 = _2092;
        _2158 = _2093;
        _2160 = _2094;
    }
    else
    {
        uint _2162 = _1790 + 2u;
        uint _2166 = _1790 + 10u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _606) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _401;
        float _2183 = cbLight._m0[_2162].y + _402;
        float _2184 = cbLight._m0[_2162].z + _403;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2162].xyz));
        float _4287 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2196 = dot(vec3(_520, _521, _522), vec3(_2189, _2190, _2191));
        float _4298 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4309 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
        float _2222 = 1.0 - _2181;
        float _2232 = (0.5 / (((_1958 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2222) + _2181) * _2195))) * _2195;
        float _4320 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2234 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2235 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _2156 = (((((_2215 * _1980) + _676) * cbLight._m0[_2166].x) * _2234) * _2235) + _2092;
        _2158 = (((((_2215 * _1982) + _678) * cbLight._m0[_2166].y) * _2234) * _2235) + _2093;
        _2160 = (((((_2215 * _1983) + _679) * cbLight._m0[_2166].z) * _2234) * _2235) + _2094;
    }
    float _2270;
    float _2272;
    float _2274;
    if (_1884)
    {
        _2270 = _2156;
        _2272 = _2158;
        _2274 = _2160;
    }
    else
    {
        uint _2281 = _1790 + 3u;
        uint _2285 = _1790 + 11u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _606) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _401;
        float _2302 = cbLight._m0[_2281].y + _402;
        float _2303 = cbLight._m0[_2281].z + _403;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2281].xyz));
        float _4336 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2315 = dot(vec3(_520, _521, _522), vec3(_2308, _2309, _2310));
        float _4347 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4358 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_1958 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2341) + _2300) * _2314))) * _2314;
        float _4369 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2270 = (((((_2334 * _1980) + _676) * cbLight._m0[_2285].x) * _2353) * _2354) + _2156;
        _2272 = (((((_2334 * _1982) + _678) * cbLight._m0[_2285].y) * _2353) * _2354) + _2158;
        _2274 = (((((_2334 * _1983) + _679) * cbLight._m0[_2285].z) * _2353) * _2354) + _2160;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1788.y == 0u)
    {
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2429;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2429;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2429;
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2445)));
        float _2466 = (log2(_2432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
        }
        else
        {
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2799)
                {
                    frontier_phi_68_pred = _2785;
                    frontier_phi_68_pred_1 = _2788;
                    frontier_phi_68_pred_2 = _2787;
                    frontier_phi_68_pred_3 = _2786;
                    frontier_phi_68_pred_4 = _2784;
                    frontier_phi_68_pred_5 = _2783;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2798;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2789 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _2430;
                        float _2995 = _2954.y - _2431;
                        float _2996 = _2954.z - _2432;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_587, _590, _593), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4395 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _2430;
                        float _3030 = (-0.0) - _2431;
                        float _3031 = (-0.0) - _2432;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3046 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3047 = 1.0 - _711;
                        float _3054 = sqrt(1.0 - ((1.0 - (_3047 * _3047)) * (1.0 - (_3046 * _3046))));
                        float _3055 = _3054 * _3054;
                        float _3056 = _3055 * _3055;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3059 = _3038 + _3003;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3067 = dot(vec3(_587, _590, _593), vec3(_3036, _3037, _3038));
                        float _4411 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3071 = dot(vec3(_587, _590, _593), vec3(_3063 * _3057, _3063 * _3058, _3063 * _3059));
                        float _4422 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3078 = ((_3074 * _3074) * (_3056 + (-1.0))) + 1.0;
                        float _3079 = _3014 * _3055;
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3004) + _3080;
                        float _4433 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3085 = 1.0 - _3055;
                        float _3095 = (0.5 / (((_3084 * ((_3070 * _3085) + _3055)) + 9.9999999392252902907785028219223e-09) + (((_3084 * _3085) + _3055) * _3070))) * _3084;
                        float _4444 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3106 = (((_3056 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3078 * _3078) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2858 = (_3025 * _2973.x) + _2931;
                        _2859 = (_3025 * _2973.y) + _2932;
                        _2860 = (_3025 * _2973.z) + _2933;
                        _2855 = (_3106 * _2990.x) + _2928;
                        _2856 = (_3106 * _2990.y) + _2929;
                        _2857 = (_3106 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_68_pred = _2857;
                    frontier_phi_68_pred_1 = _2860;
                    frontier_phi_68_pred_2 = _2859;
                    frontier_phi_68_pred_3 = _2858;
                    frontier_phi_68_pred_4 = _2856;
                    frontier_phi_68_pred_5 = _2855;
                }
                _2628 = frontier_phi_68_pred;
                _2634 = frontier_phi_68_pred_1;
                _2632 = frontier_phi_68_pred_2;
                _2630 = frontier_phi_68_pred_3;
                _2626 = frontier_phi_68_pred_4;
                _2624 = frontier_phi_68_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2624;
                    _2784 = _2626;
                    _2785 = _2628;
                    _2786 = _2630;
                    _2787 = _2632;
                    _2788 = _2634;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
        }
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.z;
        uint _2640 = (_2638 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2640) & _2476) == 0u)
        {
            _2751 = _2623;
            _2753 = _2625;
            _2755 = _2627;
            _2757 = _2629;
            _2759 = _2631;
            _2761 = _2633;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
            float _2777 = _2776 * _2430;
            float _2778 = _2776 * _2431;
            float _2779 = _2776 * _2432;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2640 < ((_2638 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2911 = _2623;
                float _2912 = _2625;
                float _2913 = _2627;
                float _2914 = _2629;
                float _2915 = _2631;
                float _2916 = _2633;
                uint _2917 = _2640;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2927)
                    {
                        frontier_phi_79_pred = _2916;
                        frontier_phi_79_pred_1 = _2915;
                        frontier_phi_79_pred_2 = _2914;
                        frontier_phi_79_pred_3 = _2913;
                        frontier_phi_79_pred_4 = _2912;
                        frontier_phi_79_pred_5 = _2911;
                    }
                    else
                    {
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        uint _3139 = _2926;
                        uint _3140;
                        vec4 _3165;
                        float _3166;
                        vec4 _3181;
                        vec3 _3193;
                        vec4 _3209;
                        vec4 _3225;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3150 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3139));
                            _3140 = (_3139 + 4294967295u) & _3139;
                            uint _3152 = _3150 * 40u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3166 = _3165.w;
                            uint _3168 = (_3150 * 40u) + 4u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3150 * 40u) + 8u;
                            _3193 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x));
                            uint _3196 = (_3150 * 40u) + 16u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3212 = (_3150 * 40u) + 20u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3228 = (_3150 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3150 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_2432, _3260.z, fma(_2431, _3260.y, _3260.x * _2430)) + _3260.w;
                            _3273 = !((fma(_2432, _3241.z, fma(_2431, _3241.y, _3241.x * _2430)) + _3241.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3165.x - _2430;
                                float _3301 = _3165.y - _2431;
                                float _3302 = _3165.z - _2432;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3166 * _3166));
                                float _4455 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3318 = sqrt(_3303) * _3181.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_587, _590, _593))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_2432, _3209.z, fma(_2431, _3209.y, _3209.x * _2430)) + _3209.w) / _3272;
                                float _3332 = (fma(_2432, _3225.z, fma(_2431, _3225.y, _3225.x * _2430)) + _3225.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4471 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _711;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2777;
                                float _3362 = _3308 - _2778;
                                float _3363 = _3309 - _2779;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4482 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3375 = dot(vec3(_587, _590, _593), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4493 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_587, _590, _593), vec3(_3307, _3308, _3309))) + _3384;
                                float _4504 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4515 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3338 * _3181.z;
                                frontier_phi_85_pred_1 = _3338 * _3181.y;
                                frontier_phi_85_pred_2 = _3338 * _3181.x;
                                frontier_phi_85_pred_3 = _3412 * _3193.z;
                                frontier_phi_85_pred_4 = _3412 * _3193.y;
                                frontier_phi_85_pred_5 = _3412 * _3193.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3421 = frontier_phi_85_pred;
                            _3420 = frontier_phi_85_pred_1;
                            _3419 = frontier_phi_85_pred_2;
                            _3418 = frontier_phi_85_pred_3;
                            _3417 = frontier_phi_85_pred_4;
                            _3416 = frontier_phi_85_pred_5;
                            _3123 = _3419 + _3136;
                            _3124 = _3420 + _3137;
                            _3125 = _3421 + _3138;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            if (_3140 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3140;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3125;
                        frontier_phi_79_pred_1 = _3124;
                        frontier_phi_79_pred_2 = _3123;
                        frontier_phi_79_pred_3 = _3122;
                        frontier_phi_79_pred_4 = _3121;
                        frontier_phi_79_pred_5 = _3120;
                    }
                    _2762 = frontier_phi_79_pred;
                    _2760 = frontier_phi_79_pred_1;
                    _2758 = frontier_phi_79_pred_2;
                    _2756 = frontier_phi_79_pred_3;
                    _2754 = frontier_phi_79_pred_4;
                    _2752 = frontier_phi_79_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2752;
                        _2912 = _2754;
                        _2913 = _2756;
                        _2914 = _2758;
                        _2915 = _2760;
                        _2916 = _2762;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2758;
                frontier_phi_60_61_ladder_1 = _2762;
                frontier_phi_60_61_ladder_2 = _2760;
                frontier_phi_60_61_ladder_3 = _2756;
                frontier_phi_60_61_ladder_4 = _2754;
                frontier_phi_60_61_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_60_61_ladder = _2629;
                frontier_phi_60_61_ladder_1 = _2633;
                frontier_phi_60_61_ladder_2 = _2631;
                frontier_phi_60_61_ladder_3 = _2627;
                frontier_phi_60_61_ladder_4 = _2625;
                frontier_phi_60_61_ladder_5 = _2623;
            }
            _2751 = frontier_phi_60_61_ladder_5;
            _2753 = frontier_phi_60_61_ladder_4;
            _2755 = frontier_phi_60_61_ladder_3;
            _2757 = frontier_phi_60_61_ladder;
            _2759 = frontier_phi_60_61_ladder_2;
            _2761 = frontier_phi_60_61_ladder_1;
        }
        float _2766 = isnan(1.0) ? _690 : (isnan(_690) ? 1.0 : min(_690, 1.0));
        _2488 = (_2766 * _2757) + _1922;
        _2490 = (_2766 * _2759) + _1924;
        _2492 = (_2766 * _2761) + _1926;
        _2494 = ((_2751 * _676) * _2766) + _2270;
        _2496 = ((_2753 * _678) * _2766) + _2272;
        _2498 = ((_2755 * _679) * _2766) + _2274;
    }
    else
    {
        _2488 = _1922;
        _2490 = _1924;
        _2492 = _1926;
        _2494 = _2270;
        _2496 = _2272;
        _2498 = _2274;
    }
    uint _2504 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _2510 = cbInstanceData._m0[_2504].x * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[9u].x) * _444.x) + (((cbMtdParam._m0[11u].x * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _414));
    float _2511 = cbInstanceData._m0[_2504].y * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[9u].y) * _444.y) + (((cbMtdParam._m0[11u].y * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _414));
    float _2512 = cbInstanceData._m0[_2504].z * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[9u].z) * _444.z) + (((cbMtdParam._m0[11u].z * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _414));
    float _4531 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4542 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4553 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4564 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2518 = 0.959999978542327880859375 - (_649 * 0.959999978542327880859375);
    float _2526 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2488 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _690));
    float _2527 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2490 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _690));
    float _2528 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2492 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _690));
    float _2532 = _2518 - (exp2(log2(1.0 - _705) * 5.0) * _2518);
    float _2544 = ((_2526 + ((_2494 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1536)) * cbPerFrame._m0[3u].x)) + _2510) + ((((cbSceneParam._m0[72u].w * _485.x) * _2532) - _2526) * _515);
    float _2547 = ((_2511 + ((_2496 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1536)) * cbPerFrame._m0[3u].x)) + _2527) + ((((cbSceneParam._m0[72u].w * _485.y) * _2532) - _2527) * _515);
    float _2550 = ((_2512 + ((_2498 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1536)) * cbPerFrame._m0[3u].x)) + _2528) + ((((cbSceneParam._m0[72u].w * _485.z) * _2532) - _2528) * _515);
    float _2551 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2552 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2553 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2559 = cbMtdParam._m0[2u].x * _2510;
    float _2560 = cbMtdParam._m0[2u].y * _2511;
    float _2561 = cbMtdParam._m0[2u].z * _2512;
    float _4590 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2563 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2568 = cbInstanceData._m0[_619 + 6u].w * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)));
    float _2573 = _562 / cbSceneParam._m0[86u].x;
    float _2574 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2588 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2590 = _2588.x;
    float _2591 = _2588.y;
    float _2592 = _2588.z;
    float _2593 = _2588.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2648 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2649 = _2648 / _544;
        float _2660 = _2649 * _290;
        float _2661 = _291 * _2649;
        float _2662 = (-0.0) - _2661;
        float _2663 = _2649 * _292;
        float _2665 = (cbSceneParam._m0[77u].w * _2662) / _2648;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2661;
        float _2673 = sqrt(((_2660 * _2660) + (_2661 * _2661)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2648)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2662 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2814 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2868 = ((abs(_2673 / _2662) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2683 * _2823) - exp2(_2683 * _2824)) * _2812))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2593);
        _2685 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2590;
        _2687 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2591;
        _2689 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2592;
        _2691 = _2879 * _2593;
    }
    else
    {
        _2685 = _2590;
        _2687 = _2591;
        _2689 = _2592;
        _2691 = _2593;
    }
    bool _2906;
    vec4 _2700;
    vec4 _2722;
    float _2724;
    float _2728;
    float _2729;
    float _2730;
    float _2733;
    float _2736;
    float _2739;
    float _2740;
    bool _2750;
    for (;;)
    {
        _2700 = cbMatDynParam._m0[0u];
        float _2702 = roundEven(_2700.y);
        bool _2703 = _2702 == 3.0;
        float _2704 = log2(_2691);
        float _2708 = exp2(_2704 * cbSceneParam._m0[78u].x);
        float _2709 = exp2(_2704 * cbSceneParam._m0[78u].y);
        float _2710 = exp2(_2704 * cbSceneParam._m0[78u].z);
        float _2711 = _2708 * _2551;
        float _2712 = _2709 * _2552;
        float _2713 = _2710 * _2553;
        float _2720 = _551 + (-0.5);
        _2722 = cbMtdParam._m0[1u];
        _2724 = _2722.y * _2720;
        float _2727 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2728 = _2727 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2685)));
        _2729 = _2727 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2687)));
        _2730 = _2727 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2689)));
        _2733 = ((_2559 * _2563) * _2708) * _2727;
        _2736 = ((_2560 * _2563) * _2709) * _2727;
        _2739 = ((_2561 * _2563) * _2710) * _2727;
        _2740 = _2720 * 0.999000012874603271484375;
        _2750 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2750)
        {
            if ((cbInstanceData._m0[_619 + 7u].x + _2740) < 0.5)
            {
                _2906 = true;
                break;
            }
        }
        uint _2847 = _620 + uint(_2700.w);
        if ((cbInstanceData._m0[_2847].w < 1.0) && ((cbInstanceData._m0[_2847].w + _2740) < 0.5))
        {
            _2906 = true;
            break;
        }
        if ((_2724 + _316) < _2722.x)
        {
            _2906 = true;
            break;
        }
        _2906 = false;
        break;
    }
    float _3111;
    if (_2906)
    {
        discard_state = true;
        _3111 = 0.0;
    }
    else
    {
        _3111 = _2568;
    }
    SV_Target.x = _2728;
    SV_Target.y = _2729;
    SV_Target.z = _2730;
    SV_Target.w = _3111;
    SV_Target_1.x = _2733;
    SV_Target_1.y = _2736;
    SV_Target_1.z = _2739;
    SV_Target_1.w = _2568;
    discard_exit();
}


