#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_Wep_01_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    vec4 _306 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _306.w;
    float _313 = _306.x * cbMtdParam._m0[10u].x;
    float _314 = _306.y * cbMtdParam._m0[10u].y;
    float _315 = _306.z * cbMtdParam._m0[10u].z;
    vec4 _331 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _334 = _331.x + cbMtdParam._m0[12u].w;
    vec4 _350 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _358 = (_350.x * 2.0) + (-1.0);
    float _360 = (_350.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3460 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _367 = sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))));
    float _370 = fma(_367, _229, fma(_360, _221 * TANGENT.x, (_207 * _199) * _358));
    float _373 = fma(_367, _230, fma(_360, _221 * TANGENT.y, (_207 * _200) * _358));
    float _376 = fma(_367, _231, fma(_360, _221 * TANGENT.z, (_207 * _201) * _358));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _381 = _380 * _370;
    float _382 = _380 * _373;
    float _383 = _380 * _376;
    float _384 = _350.z + cbMtdParam._m0[13u].x;
    float _396 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _397 = _396 * _286;
    float _398 = _396 * _287;
    float _399 = _396 * _288;
    float _403 = dot(vec4(_397, _398, _399, 0.0), vec4(_381, _382, _383, 0.0)) - cbMtdParam._m0[13u].y;
    float _3471 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _410 = exp2(log2(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _440 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _468 = (_459 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _381);
    float _469 = (_460 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _382);
    float _476 = isnan(cbInstanceData._m0[8u].x) ? _468 : (isnan(_468) ? cbInstanceData._m0[8u].x : max(_468, cbInstanceData._m0[8u].x));
    float _477 = isnan(cbInstanceData._m0[8u].y) ? _469 : (isnan(_469) ? cbInstanceData._m0[8u].y : max(_469, cbInstanceData._m0[8u].y));
    vec4 _481 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _476 : (isnan(_476) ? cbInstanceData._m0[8u].z : min(_476, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _477 : (isnan(_477) ? cbInstanceData._m0[8u].w : min(_477, cbInstanceData._m0[8u].w))));
    vec4 _506 = texture(sampler2D(C_Camouflage_test_Wep_01_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _509 = _506.x + cbMtdParam._m0[12u].x;
    float _510 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _511 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
    float _515 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _516 = _515 * _381;
    float _517 = _515 * _382;
    float _518 = _515 * _383;
    float _3517 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _519 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _520 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3550 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3561 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3572 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _524 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _542 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _544 = _542.w;
    float _565 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _568 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _571 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    vec4 _573 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _584 = (((_573.y - _520) + (_573.w * _520)) * cbMtdParam._m0[3u].x) + _520;
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _598 = _597 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3583 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    vec4 _611 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _616 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _627 = (((_616.x - _524) + (_616.w * _524)) * cbMtdParam._m0[3u].x) + _524;
    float _640 = (cbMtdParam._m0[3u].x * (((_608 * _544) - _608) + _611.x)) + _608;
    float _641 = (cbMtdParam._m0[3u].x * (((_609 * _544) - _609) + _611.y)) + _609;
    float _642 = (cbMtdParam._m0[3u].x * (((_610 * _544) - _610) + _611.z)) + _610;
    float _643 = 1.0 - _627;
    float _644 = _643 * _640;
    float _645 = _643 * _641;
    float _646 = _643 * _642;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _627;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _627;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _627;
    float _654 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    float _657 = _653 + 0.039999999105930328369140625;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _668 = _665.x * TEXCOORD_8;
    float _669 = dot(vec3(_516, _517, _518), vec3(_397, _398, _399));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _516) - _397;
    float _677 = (_672 * _517) - _398;
    float _678 = (_672 * _518) - _399;
    float _682 = abs(dot(vec3(_397, _398, _399), vec3(_516, _517, _518)));
    float _3616 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _689 = sqrt(_584);
    float _701 = exp2((_689 * 5.0) * log2(1.0 - (_683 * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _707 = (1.0 - _701) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _708 = _701 * _689;
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _775 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _779 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _804 = _736 + _516;
        float _805 = _740 + _517;
        float _806 = _744 + _518;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_516, _517, _518), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3664 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_516, _517, _518), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3697 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_516, _517, _518), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3730 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1091 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1095 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1118 = _736 + _516;
        float _1119 = _740 + _517;
        float _1120 = _744 + _518;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_516, _517, _518), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3793 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_516, _517, _518), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3826 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_516, _517, _518), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3859 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _676 * 0.5;
    float _1425 = _677 * 0.5;
    float _1426 = _678 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _584);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1555 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1558 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1586 = frontier_phi_16_14_ladder;
        }
        float _1813;
        if (_1555 > 0.0)
        {
            _1813 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1813 = frontier_phi_25_21_ladder;
        }
        float _2070;
        if (_1558 > 0.0)
        {
            _2070 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2070 = frontier_phi_37_32_ladder;
        }
        float _2072 = isnan(_1813) ? _1586 : (isnan(_1586) ? _1813 : min(_1586, _1813));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1552) + _1541;
        float _2078 = (_2073 * _1555) + _1545;
        float _2079 = (_2073 * _1558) + _1549;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2082 = (-1.0) - _2080;
        float _2084 = _2080 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2079 > _2084) || ((_2079 < _2082) || ((_2078 > _2084) || ((_2078 < _2082) || ((_2077 < _2082) || (_2077 > _2084))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2079, cbModelParam._m0[9u].z, fma(_2078, cbModelParam._m0[9u].y, _2077 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2079, cbModelParam._m0[10u].z, fma(_2078, cbModelParam._m0[10u].y, _2077 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2079, cbModelParam._m0[11u].z, fma(_2078, cbModelParam._m0[11u].y, _2077 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_15_37_ladder = _2207.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2207.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2207.x * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_15_37_ladder_2;
        _1576 = frontier_phi_15_37_ladder_1;
        _1578 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1493);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _584);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1654 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1657 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1818;
        if (_1651 > 0.0)
        {
            _1818 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1818 = frontier_phi_27_23_ladder;
        }
        float _2097;
        if (_1654 > 0.0)
        {
            _2097 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2097 = frontier_phi_39_34_ladder;
        }
        float _2310;
        if (_1657 > 0.0)
        {
            _2310 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2310 = frontier_phi_48_45_ladder;
        }
        float _2312 = isnan(_2097) ? _1818 : (isnan(_1818) ? _2097 : min(_1818, _2097));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1651) + _1640;
        float _2318 = (_2313 * _1654) + _1644;
        float _2319 = (_2313 * _1657) + _1648;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2320;
        float _2323 = _2320 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2319 > _2323) || ((_2319 < _2321) || ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 < _2321) || (_2317 > _2323))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2319, cbModelParam._m0[17u].z, fma(_2318, cbModelParam._m0[17u].y, _2317 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2319, cbModelParam._m0[18u].z, fma(_2318, cbModelParam._m0[18u].y, _2317 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2319, cbModelParam._m0[19u].z, fma(_2318, cbModelParam._m0[19u].y, _2317 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_24_48_ladder = _2564.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2564.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2564.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_24_48_ladder_2;
        _1678 = frontier_phi_24_48_ladder_1;
        _1680 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1583);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1693 = (((_707 * _654) + _708) * _668) * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1695 = (((_707 * _656) + _708) * _668) * ((cbModelParam._m0[1u].w * (_1678 - _1576)) + _1576);
    float _1697 = (((_707 * _657) + _708) * _668) * ((cbModelParam._m0[1u].w * (_1680 - _1578)) + _1578);
    float _1700 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    vec4 _1714 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_459, _460));
    float _1716 = _1714.w;
    float _1728 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1716);
    float _1729 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1716);
    float _1730 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1716);
    uvec4 _1734 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _1736 = _1734.x * 14u;
    uint _1737 = _1736 + 13u;
    float _1744 = _668 + (-1.0);
    float _1749 = (cbLight._m0[_1737].x * _1744) + 1.0;
    float _1750 = (cbLight._m0[_1737].y * _1744) + 1.0;
    float _1751 = (cbLight._m0[_1737].z * _1744) + 1.0;
    float _1752 = (cbLight._m0[_1737].w * _1744) + 1.0;
    uint _1753 = _1736 + 5u;
    float _1759 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1763 = _1736 + 4u;
    float _1772 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1776 = _1736 | 1u;
    float _1787 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_516, _517, _518));
    float _1790 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_516, _517, _518));
    float _3995 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _4006 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1795 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1797 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1804 = ((cbLight._m0[_1753].x * _1759) * _1797) + (((cbLight._m0[_1763].x * _1728) * _1772) * _1795);
    float _1805 = ((_1759 * cbLight._m0[_1753].y) * _1797) + (((cbLight._m0[_1763].y * _1729) * _1772) * _1795);
    float _1806 = ((_1759 * cbLight._m0[_1753].z) * _1797) + (((cbLight._m0[_1763].z * _1730) * _1772) * _1795);
    uvec4 _1810 = floatBitsToUint(cbLight._m0[_1736 + 12u]);
    bool _1812 = _1810.x == 0u;
    float _1823;
    float _1825;
    float _1827;
    if (_1812)
    {
        _1823 = _1804;
        _1825 = _1805;
        _1827 = _1806;
    }
    else
    {
        uint _1831 = _1736 + 6u;
        float _1847 = (dot(vec3(cbLight._m0[_1736 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _4017 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1850 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _1823 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1804;
        _1825 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1805;
        _1827 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1806;
    }
    bool _1830 = _1810.y == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1830)
    {
        _1868 = _1823;
        _1870 = _1825;
        _1872 = _1827;
    }
    else
    {
        uint _2041 = _1736 + 7u;
        float _2057 = (dot(vec3(cbLight._m0[_1736 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4033 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2060 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1868 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _1823;
        _1870 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _1825;
        _1872 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _1827;
    }
    uint _1875 = _1736 + 8u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _584) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1736].x + _397;
    float _1891 = cbLight._m0[_1736].y + _398;
    float _1892 = cbLight._m0[_1736].z + _399;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1736].xyz));
    float _4049 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1904 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1905 = dot(vec3(_516, _517, _518), vec3(_1897, _1898, _1899));
    float _4071 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1897, _1898, _1899));
    float _4082 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1889 * _1889;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1925 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
    float _1926 = 0.959999978542327880859375 - _651;
    float _1928 = 0.959999978542327880859375 - _652;
    float _1929 = 0.959999978542327880859375 - _653;
    float _1936 = 1.0 - _1889;
    float _1947 = (0.5 / (((_1904 * ((_1903 * _1936) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _1936) + _1889) * _1903))) * _1903;
    float _4093 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    uint _1963 = _1736 + 9u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _584) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1776].x + _397;
    float _1977 = cbLight._m0[_1776].y + _398;
    float _1978 = cbLight._m0[_1776].z + _399;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1776].xyz));
    float _4104 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1990 = dot(vec3(_516, _517, _518), vec3(_1983, _1984, _1985));
    float _4115 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1983, _1984, _1985));
    float _4126 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1998 = _1975 * _1975;
    float _2002 = ((_1993 * _1993) * (_1998 + (-1.0))) + 1.0;
    float _2009 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
    float _2016 = 1.0 - _1975;
    float _2026 = (0.5 / (((_1904 * ((_1989 * _2016) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2016) + _1975) * _1989))) * _1989;
    float _4137 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1998 / ((_2002 * _2002) * 3.141590118408203125));
    float _2038 = (((((_2009 * _1926) + _654) * cbLight._m0[_1963].x) * _2028) * _1759) + ((((cbLight._m0[_1875].x * _1728) * ((_1925 * _1926) + _654)) * _1949) * _1772);
    float _2039 = (((((_2009 * _1928) + _656) * cbLight._m0[_1963].y) * _2028) * _1759) + ((((cbLight._m0[_1875].y * _1729) * ((_1925 * _1928) + _656)) * _1949) * _1772);
    float _2040 = (((((_2009 * _1929) + _657) * cbLight._m0[_1963].z) * _2028) * _1759) + ((((cbLight._m0[_1875].z * _1730) * ((_1925 * _1929) + _657)) * _1949) * _1772);
    float _2102;
    float _2104;
    float _2106;
    if (_1812)
    {
        _2102 = _2038;
        _2104 = _2039;
        _2106 = _2040;
    }
    else
    {
        uint _2108 = _1736 + 2u;
        uint _2112 = _1736 + 10u;
        float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _584) * 0.949999988079071044921875);
        float _2127 = _2126 * _2126;
        float _2128 = cbLight._m0[_2108].x + _397;
        float _2129 = cbLight._m0[_2108].y + _398;
        float _2130 = cbLight._m0[_2108].z + _399;
        float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
        float _2135 = _2134 * _2128;
        float _2136 = _2134 * _2129;
        float _2137 = _2134 * _2130;
        float _2138 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2108].xyz));
        float _4148 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2142 = dot(vec3(_516, _517, _518), vec3(_2135, _2136, _2137));
        float _4159 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2146 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2135, _2136, _2137));
        float _4170 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2150 = _2127 * _2127;
        float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
        float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2168 = 1.0 - _2127;
        float _2178 = (0.5 / (((_1904 * ((_2141 * _2168) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2168) + _2127) * _2141))) * _2141;
        float _4181 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _2102 = (((((_2161 * _1926) + _654) * cbLight._m0[_2112].x) * _2180) * _2181) + _2038;
        _2104 = (((((_2161 * _1928) + _656) * cbLight._m0[_2112].y) * _2180) * _2181) + _2039;
        _2106 = (((((_2161 * _1929) + _657) * cbLight._m0[_2112].z) * _2180) * _2181) + _2040;
    }
    float _2216;
    float _2218;
    float _2220;
    if (_1830)
    {
        _2216 = _2102;
        _2218 = _2104;
        _2220 = _2106;
    }
    else
    {
        uint _2227 = _1736 + 3u;
        uint _2231 = _1736 + 11u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _584) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _397;
        float _2248 = cbLight._m0[_2227].y + _398;
        float _2249 = cbLight._m0[_2227].z + _399;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2227].xyz));
        float _4197 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2261 = dot(vec3(_516, _517, _518), vec3(_2254, _2255, _2256));
        float _4208 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4219 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
        float _2287 = 1.0 - _2246;
        float _2297 = (0.5 / (((_1904 * ((_2260 * _2287) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2287) + _2246) * _2260))) * _2260;
        float _4230 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2216 = (((((_2280 * _1926) + _654) * cbLight._m0[_2231].x) * _2299) * _2300) + _2102;
        _2218 = (((((_2280 * _1928) + _656) * cbLight._m0[_2231].y) * _2299) * _2300) + _2104;
        _2220 = (((((_2280 * _1929) + _657) * cbLight._m0[_2231].z) * _2299) * _2300) + _2106;
    }
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_1734.y == 0u)
    {
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2375;
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2375;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2375;
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.x;
        uint _2402 = uint((float(_2390.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2391))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2391)));
        float _2412 = (log2(_2378 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2413 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        uint _2416 = uint(isnan(14.0) ? _2413 : (isnan(_2413) ? 14.0 : min(_2413, 14.0)));
        uvec4 _2421 = texelFetch(g_lightClusterGridBuffer, int(((_2416 << 2u) + (_2402 << 6u)) >> 2u));
        uint _2422 = _2421.x;
        uint _2423 = _2390.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2423 >> 4u) & 15u)) + 4294967295u) & _2422) == 0u) || ((_2423 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            uint _2727 = 0u;
            uint _2736;
            bool _2737;
            for (;;)
            {
                _2736 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                _2737 = _2736 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2737)
                {
                    frontier_phi_63_pred = _2726;
                    frontier_phi_63_pred_1 = _2725;
                    frontier_phi_63_pred_2 = _2724;
                    frontier_phi_63_pred_3 = _2723;
                    frontier_phi_63_pred_4 = _2722;
                    frontier_phi_63_pred_5 = _2721;
                }
                else
                {
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    uint _2851;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2736;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    for (;;)
                    {
                        uint _2855 = uint(findLSB(_2851)) + (_2727 << 5u);
                        uint _2852 = (_2851 + 4294967295u) & _2851;
                        uint _2857 = _2855 * 48u;
                        vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 3u)).x));
                        uint _2877 = (_2855 * 48u) + 4u;
                        vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2896 = (_2855 * 48u) + 8u;
                        vec3 _2907 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x));
                        float _2911 = _2871.x - _2376;
                        float _2912 = _2871.y - _2377;
                        float _2913 = _2871.z - _2378;
                        float _2914 = dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913));
                        float _2917 = inversesqrt(_2914);
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2921 = dot(vec3(_565, _568, _571), vec3(_2918, _2919, _2920));
                        float _2926 = 1.0 - (_2914 * _2871.w);
                        float _4256 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2928 = sqrt(_2914) * _2890.w;
                        float _2931 = 1.39999997615814208984375 / (_2928 + 1.39999997615814208984375);
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2921) + _2932;
                        float _2938 = _2928 * _2928;
                        float _2942 = ((isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))) * _2927) / ((_2938 * 0.699999988079071044921875) + 1.0);
                        float _2946 = (-0.0) - _2376;
                        float _2947 = (-0.0) - _2377;
                        float _2948 = (-0.0) - _2378;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2953 = _2952 * _2946;
                        float _2954 = _2952 * _2947;
                        float _2955 = _2952 * _2948;
                        float _2963 = exp2(log2(1.0 / ((_2938 * 3.5) + 5.0)) * 0.25);
                        float _2964 = 1.0 - _689;
                        float _2971 = sqrt(1.0 - ((1.0 - (_2964 * _2964)) * (1.0 - (_2963 * _2963))));
                        float _2972 = _2971 * _2971;
                        float _2973 = _2972 * _2972;
                        float _2974 = _2953 + _2918;
                        float _2975 = _2954 + _2919;
                        float _2976 = _2955 + _2920;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2984 = dot(vec3(_565, _568, _571), vec3(_2953, _2954, _2955));
                        float _4272 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2988 = dot(vec3(_565, _568, _571), vec3(_2980 * _2974, _2980 * _2975, _2980 * _2976));
                        float _4283 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2991 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2995 = ((_2991 * _2991) * (_2973 + (-1.0))) + 1.0;
                        float _2996 = _2931 * _2972;
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2921) + _2997;
                        float _4294 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3001 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3002 = 1.0 - _2972;
                        float _3012 = (0.5 / (((_3001 * ((_2987 * _3002) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_3001 * _3002) + _2972) * _2987))) * _3001;
                        float _4305 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3023 = (((_2973 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_2995 * _2995) * ((_2938 * 2.1991131305694580078125) + 3.141590118408203125))) * _2927;
                        _2780 = (_2942 * _2890.x) + _2848;
                        _2781 = (_2942 * _2890.y) + _2849;
                        _2782 = (_2942 * _2890.z) + _2850;
                        _2777 = (_3023 * _2907.x) + _2845;
                        _2778 = (_3023 * _2907.y) + _2846;
                        _2779 = (_3023 * _2907.z) + _2847;
                        if (_2852 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2852;
                        }
                    }
                    frontier_phi_63_pred = _2782;
                    frontier_phi_63_pred_1 = _2781;
                    frontier_phi_63_pred_2 = _2780;
                    frontier_phi_63_pred_3 = _2779;
                    frontier_phi_63_pred_4 = _2778;
                    frontier_phi_63_pred_5 = _2777;
                }
                _2580 = frontier_phi_63_pred;
                _2578 = frontier_phi_63_pred_1;
                _2576 = frontier_phi_63_pred_2;
                _2574 = frontier_phi_63_pred_3;
                _2572 = frontier_phi_63_pred_4;
                _2570 = frontier_phi_63_pred_5;
                uint _2728 = _2727 + 1u;
                if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2721 = _2570;
                    _2722 = _2572;
                    _2723 = _2574;
                    _2724 = _2576;
                    _2725 = _2578;
                    _2726 = _2580;
                    _2727 = _2728;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((4294967295u << _2586) & _2422) == 0u)
        {
            _2689 = _2569;
            _2691 = _2571;
            _2693 = _2573;
            _2695 = _2575;
            _2697 = _2577;
            _2699 = _2579;
        }
        else
        {
            float _2714 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
            float _2715 = _2714 * _2376;
            float _2716 = _2714 * _2377;
            float _2717 = _2714 * _2378;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2828 = _2569;
                float _2829 = _2571;
                float _2830 = _2573;
                float _2831 = _2575;
                float _2832 = _2577;
                float _2833 = _2579;
                uint _2834 = _2586;
                uint _2843;
                bool _2844;
                for (;;)
                {
                    _2843 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                    _2844 = _2843 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2844)
                    {
                        frontier_phi_69_pred = _2833;
                        frontier_phi_69_pred_1 = _2832;
                        frontier_phi_69_pred_2 = _2831;
                        frontier_phi_69_pred_3 = _2830;
                        frontier_phi_69_pred_4 = _2829;
                        frontier_phi_69_pred_5 = _2828;
                    }
                    else
                    {
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        uint _3047 = _2843;
                        uint _3048;
                        vec4 _3073;
                        float _3074;
                        vec4 _3089;
                        vec3 _3101;
                        vec4 _3117;
                        vec4 _3133;
                        float _3180;
                        bool _3181;
                        for (;;)
                        {
                            uint _3058 = ((_2834 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3047));
                            _3048 = (_3047 + 4294967295u) & _3047;
                            uint _3060 = _3058 * 40u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            _3074 = _3073.w;
                            uint _3076 = (_3058 * 40u) + 4u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3058 * 40u) + 8u;
                            _3101 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x));
                            uint _3104 = (_3058 * 40u) + 16u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3120 = (_3058 * 40u) + 20u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3136 = (_3058 * 40u) + 24u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3155 = (_3058 * 40u) + 28u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3180 = fma(_2378, _3168.z, fma(_2377, _3168.y, _3168.x * _2376)) + _3168.w;
                            _3181 = !((fma(_2378, _3149.z, fma(_2377, _3149.y, _3149.x * _2376)) + _3149.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3181)
                            {
                                float _3208 = _3073.x - _2376;
                                float _3209 = _3073.y - _2377;
                                float _3210 = _3073.z - _2378;
                                float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                                float _3214 = inversesqrt(_3211);
                                float _3215 = _3214 * _3208;
                                float _3216 = _3214 * _3209;
                                float _3217 = _3214 * _3210;
                                float _3221 = 1.0 - (_3211 / (_3074 * _3074));
                                float _4316 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3226 = sqrt(_3211) * _3089.w;
                                float _3228 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                                float _3229 = _3228 * _3228;
                                float _3232 = ((1.0 - _3229) * dot(vec3(_3215, _3216, _3217), vec3(_565, _568, _571))) + _3229;
                                float _3235 = _3226 * _3226;
                                float _3239 = (fma(_2378, _3117.z, fma(_2377, _3117.y, _3117.x * _2376)) + _3117.w) / _3180;
                                float _3240 = (fma(_2378, _3133.z, fma(_2377, _3133.y, _3133.x * _2376)) + _3133.w) / _3180;
                                float _3244 = 1.0 - dot(vec2(_3239, _3240), vec2(_3239, _3240));
                                float _4332 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3246 = _3245 * (((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3222) / ((_3235 * 0.699999988079071044921875) + 1.0));
                                float _3258 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                                float _3259 = 1.0 - _689;
                                float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                                float _3267 = _3266 * _3266;
                                float _3268 = _3267 * _3267;
                                float _3269 = _3215 - _2715;
                                float _3270 = _3216 - _2716;
                                float _3271 = _3217 - _2717;
                                float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                                float _3279 = dot(vec3(_565, _568, _571), vec3((-0.0) - _2715, (-0.0) - _2716, (-0.0) - _2717));
                                float _4343 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3283 = dot(vec3(_565, _568, _571), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                                float _4354 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                                float _3291 = _3228 * _3267;
                                float _3292 = _3291 * _3291;
                                float _3298 = ((1.0 - _3292) * dot(vec3(_565, _568, _571), vec3(_3215, _3216, _3217))) + _3292;
                                float _4365 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3300 = 1.0 - _3267;
                                float _3310 = (0.5 / (((_3299 * ((_3282 * _3300) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3267) * _3282))) * _3299;
                                float _4376 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3320 = (_3245 * _3222) * (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3290 * _3290) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3246 * _3089.z;
                                frontier_phi_75_pred_1 = _3246 * _3089.y;
                                frontier_phi_75_pred_2 = _3246 * _3089.x;
                                frontier_phi_75_pred_3 = _3320 * _3101.z;
                                frontier_phi_75_pred_4 = _3320 * _3101.y;
                                frontier_phi_75_pred_5 = _3320 * _3101.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_75_pred;
                            _3328 = frontier_phi_75_pred_1;
                            _3327 = frontier_phi_75_pred_2;
                            _3326 = frontier_phi_75_pred_3;
                            _3325 = frontier_phi_75_pred_4;
                            _3324 = frontier_phi_75_pred_5;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            if (_3048 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3048;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3033;
                        frontier_phi_69_pred_1 = _3032;
                        frontier_phi_69_pred_2 = _3031;
                        frontier_phi_69_pred_3 = _3030;
                        frontier_phi_69_pred_4 = _3029;
                        frontier_phi_69_pred_5 = _3028;
                    }
                    _2700 = frontier_phi_69_pred;
                    _2698 = frontier_phi_69_pred_1;
                    _2696 = frontier_phi_69_pred_2;
                    _2694 = frontier_phi_69_pred_3;
                    _2692 = frontier_phi_69_pred_4;
                    _2690 = frontier_phi_69_pred_5;
                    uint _2835 = _2834 + 1u;
                    if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2828 = _2690;
                        _2829 = _2692;
                        _2830 = _2694;
                        _2831 = _2696;
                        _2832 = _2698;
                        _2833 = _2700;
                        _2834 = _2835;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2700;
                frontier_phi_57_58_ladder_1 = _2698;
                frontier_phi_57_58_ladder_2 = _2696;
                frontier_phi_57_58_ladder_3 = _2694;
                frontier_phi_57_58_ladder_4 = _2692;
                frontier_phi_57_58_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_57_58_ladder = _2579;
                frontier_phi_57_58_ladder_1 = _2577;
                frontier_phi_57_58_ladder_2 = _2575;
                frontier_phi_57_58_ladder_3 = _2573;
                frontier_phi_57_58_ladder_4 = _2571;
                frontier_phi_57_58_ladder_5 = _2569;
            }
            _2689 = frontier_phi_57_58_ladder_5;
            _2691 = frontier_phi_57_58_ladder_4;
            _2693 = frontier_phi_57_58_ladder_3;
            _2695 = frontier_phi_57_58_ladder_2;
            _2697 = frontier_phi_57_58_ladder_1;
            _2699 = frontier_phi_57_58_ladder;
        }
        float _2704 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2434 = (_2704 * _2695) + _1868;
        _2436 = (_2704 * _2697) + _1870;
        _2438 = (_2704 * _2699) + _1872;
        _2440 = ((_2689 * _654) * _2704) + _2216;
        _2442 = ((_2691 * _656) * _2704) + _2218;
        _2444 = ((_2693 * _657) * _2704) + _2220;
    }
    else
    {
        _2434 = _1868;
        _2436 = _1870;
        _2438 = _1872;
        _2440 = _2216;
        _2442 = _2218;
        _2444 = _2220;
    }
    uint _2450 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _2456 = cbInstanceData._m0[_2450].x * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[9u].x) * _440.x) + (((cbMtdParam._m0[11u].x * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _410));
    float _2457 = cbInstanceData._m0[_2450].y * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[9u].y) * _440.y) + (((cbMtdParam._m0[11u].y * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _410));
    float _2458 = cbInstanceData._m0[_2450].z * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[9u].z) * _440.z) + (((cbMtdParam._m0[11u].z * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _410));
    float _4392 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4403 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4414 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4425 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _2464 = 0.959999978542327880859375 - (_627 * 0.959999978542327880859375);
    float _2472 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2434 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _668));
    float _2473 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2436 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _668));
    float _2474 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2438 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _668));
    float _2478 = _2464 - (exp2(log2(1.0 - _683) * 5.0) * _2464);
    float _2490 = ((_2472 + ((_2440 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + _2456) + ((((cbSceneParam._m0[72u].w * _481.x) * _2478) - _2472) * _511);
    float _2493 = ((_2457 + ((_2442 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + _2473) + ((((cbSceneParam._m0[72u].w * _481.y) * _2478) - _2473) * _511);
    float _2496 = ((_2458 + ((_2444 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + _2474) + ((((cbSceneParam._m0[72u].w * _481.z) * _2478) - _2474) * _511);
    float _4451 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2509 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2514 = cbInstanceData._m0[_597 + 6u].w * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)));
    float _2519 = _459 / cbSceneParam._m0[86u].x;
    float _2520 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2534 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2536 = _2534.x;
    float _2537 = _2534.y;
    float _2538 = _2534.z;
    float _2539 = _2534.w;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2595 = _2594 / _540;
        float _2606 = _2595 * _286;
        float _2607 = _287 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2609 = _2595 * _288;
        float _2611 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2612 = _2611 + cbSceneParam._m0[79u].w;
        float _2613 = cbSceneParam._m0[79u].w - _2607;
        float _2619 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2609 * _2609));
        float _2622 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2619;
        float _2627 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2629 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2790;
        if (abs((_2608 - _2611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2790 = ((((_2612 > 0.0) ? exp2(_2627 * _2612) : (2.0 - exp2(_2629 * _2612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2622;
        }
        else
        {
            float _2750 = 1.0 / cbSceneParam._m0[80u].x;
            float _2751 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : max(_2612, _2613));
            float _2752 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : min(_2612, _2613));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            _2790 = ((abs(_2619 / _2608) * cbSceneParam._m0[80u].y) * ((((_2761 - _2762) * 2.0) - ((exp2(_2627 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)))) - exp2(_2627 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))))) * _2750)) - ((exp2(_2629 * _2761) - exp2(_2629 * _2762)) * _2750))) + (_2622 * cbSceneParam._m0[80u].z);
        }
        vec4 _2792 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, 1.0), 0.0);
        float _2801 = exp2((_2790 * (-1.44269502162933349609375)) * (1.0 - _2792.w));
        float _2802 = log2(_2801);
        float _2818 = log2(_2539);
        _2631 = (exp2(_2818 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].x)) * _2792.x) / cbSceneParam._m0[78u].x)) + _2536;
        _2633 = (exp2(_2818 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].y)) * _2792.y) / cbSceneParam._m0[78u].y)) + _2537;
        _2635 = (exp2(_2818 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].z)) * _2792.z) / cbSceneParam._m0[78u].z)) + _2538;
        _2637 = _2801 * _2539;
    }
    else
    {
        _2631 = _2536;
        _2633 = _2537;
        _2635 = _2538;
        _2637 = _2539;
    }
    float _2648 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2649 = _2648 == 3.0;
    float _2650 = log2(_2637);
    float _2654 = exp2(_2650 * cbSceneParam._m0[78u].x);
    float _2655 = exp2(_2650 * cbSceneParam._m0[78u].y);
    float _2656 = exp2(_2650 * cbSceneParam._m0[78u].z);
    float _2657 = _2654 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)));
    float _2658 = _2655 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0)));
    float _2659 = _2656 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0)));
    float _2668 = (_2648 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2668 * (_2649 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.y = _2668 * (_2649 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.z = _2668 * (_2649 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.w = _2514;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2456) * _2509) * _2654) * _2668;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2457) * _2509) * _2655) * _2668;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2458) * _2509) * _2656) * _2668;
    SV_Target_1.w = _2514;
}


