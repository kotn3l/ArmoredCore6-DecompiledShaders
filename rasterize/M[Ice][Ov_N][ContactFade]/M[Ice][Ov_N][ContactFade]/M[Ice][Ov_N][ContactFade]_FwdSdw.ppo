#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _292 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _299 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _303 = dot(vec4(_292 * _272, _292 * _273, _292 * _274, 0.0), vec4(_299 * _208, _299 * _209, _299 * _210, 0.0));
    float _3871 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _311 = exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3882 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _319 = (_312 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _320 = (_312 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _321 = (_312 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _343 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_351, _353), vec2(_351, _353));
    float _3893 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))));
    float _362 = fma(_359, _208, fma(_353, _215, _351 * _201));
    float _365 = fma(_359, _209, fma(_353, _216, _351 * _202));
    float _368 = fma(_359, _210, fma(_353, _217, _351 * _203));
    float _372 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _383 = cbMtdParam._m0[13u].z + dot(vec4(_372 * _362, _372 * _365, _372 * _368, 0.0), vec4(cbMtdParam._m0[14u].zw, cbMtdParam._m0[15u].x, 0.0));
    float _3904 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * TEXCOORD_3.x;
    float _3915 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _398 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _417 = (((cbMtdParam._m0[9u].x * _398.x) - _319) * _386) + _319;
    float _418 = (((cbMtdParam._m0[9u].y * _398.y) - _320) * _386) + _320;
    float _419 = (((cbMtdParam._m0[9u].z * _398.z) - _321) * _386) + _321;
    vec4 _429 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _431 = _429.x;
    bool _438 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _455 = ((_438 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _431)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _431))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3926 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _457 = 1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)));
    float _3937 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _464 = 1.0 - ((_458 * _458) * (3.0 - (_458 * 2.0)));
    float _473 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].x) * _386) + cbMtdParam._m0[12u].x;
    float _477 = abs(_208);
    float _478 = abs(_209);
    float _479 = abs(_210);
    float _480 = _477 * _477;
    float _481 = _478 * _478;
    float _482 = _479 * _479;
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _515 = _508 * 0.0500000007450580596923828125;
    float _526 = (cbTextureTilingScale._m0[4u].x * (_504 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _529 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_526, (cbTextureTilingScale._m0[4u].y * _515) + cbTextureTilingScale._m0[4u].w));
    float _536 = (cbTextureTilingScale._m0[4u].y * (_512 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _537 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_526, _536));
    vec4 _547 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _515) + cbTextureTilingScale._m0[4u].z, _536));
    vec4 _574 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _593 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _599 = (_593.x * 2.0) + (-1.0);
    float _600 = (_593.y * 2.0) + (-1.0);
    float _3948 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _601 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _605 = (_601 * _601) * (3.0 - (_601 * 2.0));
    float _615 = (((((((_537.x * _481) + (_529.x * _482)) + (_547.x * _480)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _351) + (((_605 * (((_574.x * 2.0) + (-1.0)) - _599)) + _599) * cbMtdParam._m0[12u].y);
    float _616 = (((((((_537.y * _481) + (_529.y * _482)) + (_547.y * _480)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _353) + (((_605 * (((_574.y * 2.0) + (-1.0)) - _600)) + _600) * cbMtdParam._m0[12u].y);
    float _619 = cbMtdParam._m0[14u].x + _386;
    float _3959 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _624 = fma(_359, _208, fma(_616, _215, _615 * _201));
    float _627 = fma(_359, _209, fma(_616, _216, _615 * _202));
    float _630 = fma(_359, _210, fma(_616, _217, _615 * _203));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3970 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3981 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _639 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _4003 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _4014 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _647 = _438 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _666 = cbSceneParam._m0[71u].x - (_504 / _657);
    float _667 = cbSceneParam._m0[71u].y - (_508 / _657);
    float _668 = cbSceneParam._m0[71u].z - (_512 / _657);
    float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
    float _673 = _666 * _672;
    float _674 = _667 * _672;
    float _675 = _668 * _672;
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _705 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _708 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _723 = (_721 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_723].z;
    float _4025 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _746 = _743.x * TEXCOORD_3.w;
    float _747 = dot(vec3(_635, _636, _637), vec3(_673, _674, _675));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _635) - _673;
    float _755 = (_750 * _636) - _674;
    float _756 = (_750 * _637) - _675;
    float _760 = abs(dot(vec3(_673, _674, _675), vec3(_635, _636, _637)));
    float _4058 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _769 = 10.0 / (_647 + 10.0);
    float _770 = sqrt(_639);
    float _781 = exp2((_770 * 5.0) * log2(1.0 - (_761 * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _848 = fma(_821, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813));
        float _852 = fma(_821, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813));
        float _856 = fma(_821, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813));
        float _881 = _813 + _635;
        float _882 = _817 + _636;
        float _883 = _821 + _637;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _848;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _852;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _856;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_848 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_852 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_856 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_635, _636, _637), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _4106 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_635, _636, _637), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _4139 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_635, _636, _637), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4172 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_821, cbModelParam._m0[30u].z, fma(_817, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _813));
        float _1168 = fma(_821, cbModelParam._m0[31u].z, fma(_817, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _813));
        float _1172 = fma(_821, cbModelParam._m0[32u].z, fma(_817, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _813));
        float _1195 = _813 + _635;
        float _1196 = _817 + _636;
        float _1197 = _821 + _637;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_635, _636, _637), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4235 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_635, _636, _637), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4268 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_635, _636, _637), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4301 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1136)) + _1136;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1137)) + _1137;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _754 * 0.5;
    float _1502 = _755 * 0.5;
    float _1503 = _756 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_821, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_821, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_821, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1631 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1634 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1662 = frontier_phi_14_12_ladder;
        }
        float _1887;
        if (_1631 > 0.0)
        {
            _1887 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1887 = frontier_phi_23_19_ladder;
        }
        float _2182;
        if (_1634 > 0.0)
        {
            _2182 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2182 = frontier_phi_35_30_ladder;
        }
        float _2184 = isnan(_1887) ? _1662 : (isnan(_1662) ? _1887 : min(_1662, _1887));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1628) + _1617;
        float _2190 = (_2185 * _1631) + _1621;
        float _2191 = (_2185 * _1634) + _1625;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2192;
        float _2196 = _2192 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 > _2196) || ((_2190 < _2194) || ((_2189 < _2194) || (_2189 > _2196))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2336 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_13_35_ladder = _2336.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2336.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2336.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_13_35_ladder_2;
        _1652 = frontier_phi_13_35_ladder_1;
        _1654 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1570);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_821, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_821, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_821, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1730 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1733 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1892;
        if (_1727 > 0.0)
        {
            _1892 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1892 = frontier_phi_25_21_ladder;
        }
        float _2209;
        if (_1730 > 0.0)
        {
            _2209 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2209 = frontier_phi_37_32_ladder;
        }
        float _2536;
        if (_1733 > 0.0)
        {
            _2536 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2536 = frontier_phi_47_44_ladder;
        }
        float _2538 = isnan(_2209) ? _1892 : (isnan(_1892) ? _2209 : min(_1892, _2209));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _1727) + _1716;
        float _2544 = (_2539 * _1730) + _1720;
        float _2545 = (_2539 * _1733) + _1724;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2546;
        float _2549 = _2546 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2545 > _2549) || ((_2545 < _2547) || ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 < _2547) || (_2543 > _2549))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2545, cbModelParam._m0[17u].z, fma(_2544, cbModelParam._m0[17u].y, _2543 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2545, cbModelParam._m0[18u].z, fma(_2544, cbModelParam._m0[18u].y, _2543 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2545, cbModelParam._m0[19u].z, fma(_2544, cbModelParam._m0[19u].y, _2543 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_22_47_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_22_47_ladder_2;
        _1754 = frontier_phi_22_47_ladder_1;
        _1756 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1659);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1768 = ((((1.0 - _781) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_781 * _770)) * _746;
    float _1769 = _1768 * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1770 = _1768 * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1771 = _1768 * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    float _1791 = _680 / cbSceneParam._m0[86u].x;
    float _1799 = (cbSceneParam._m0[88u].y * (1.0 - _639)) + cbSceneParam._m0[88u].z;
    float _4427 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1801 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 5.0;
    float _1806 = (_769 * cbMtdParam._m0[13u].x) * dot(vec3(_635, _636, _637), vec3(1.0, 0.0, 0.0));
    vec4 _1816 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1806 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1806 + _1791) * cbSceneParam._m0[86u].x, _681), _1801).w) + _1791) * cbSceneParam._m0[86u].x, _681), _1801);
    float _1832 = 1.0 - _1816.w;
    float _1866 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1879 = _1866 / _1878;
    float _1880 = _1870 / _1878;
    float _1881 = _1874 / _1878;
    float _2028;
    float _2029;
    float _2030;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1908 = ((uint(_1881 > cbSceneParam._m0[59u].y) + uint(_1881 > cbSceneParam._m0[59u].x)) + uint(_1881 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1909 = _1908 + 43u;
        uint _1917 = _1908 + 44u;
        uint _1925 = _1908 + 45u;
        uint _1933 = _1908 + 46u;
        float _1944 = fma(_1878, cbSceneParam._m0[_1909].w, fma(_1874, cbSceneParam._m0[_1909].z, fma(_1870, cbSceneParam._m0[_1909].y, _1866 * cbSceneParam._m0[_1909].x)));
        float _1948 = fma(_1878, cbSceneParam._m0[_1917].w, fma(_1874, cbSceneParam._m0[_1917].z, fma(_1870, cbSceneParam._m0[_1917].y, _1866 * cbSceneParam._m0[_1917].x)));
        float _1956 = fma(_1878, cbSceneParam._m0[_1933].w, fma(_1874, cbSceneParam._m0[_1933].z, fma(_1870, cbSceneParam._m0[_1933].y, _1866 * cbSceneParam._m0[_1933].x)));
        float _1961 = cbSceneParam._m0[33u].z * _1956;
        float _1963 = cbSceneParam._m0[33u].w * _1956;
        float _1966 = fma(_1878, cbSceneParam._m0[_1925].w, fma(_1874, cbSceneParam._m0[_1925].z, fma(_1870, cbSceneParam._m0[_1925].y, _1866 * cbSceneParam._m0[_1925].x))) / _1956;
        float _2014 = (cbSceneParam._m0[33u].x - sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881))) * cbSceneParam._m0[33u].y;
        float _4438 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2021 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 + _1944) / _1956, (_1963 + _1948) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1963 + _1944) / _1956, (_1948 - _1961) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 - _1961) / _1956, (_1948 - _1963) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 - _1963) / _1956, (_1961 + _1948) / _1956), _1966), 0.0)).x), vec4(0.25)));
        _2028 = 1.0 - (_2021 * cbSceneParam._m0[34u].x);
        _2029 = 1.0 - (_2021 * cbSceneParam._m0[34u].y);
        _2030 = 1.0 - (_2021 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2028 = 1.0;
        _2029 = 1.0;
        _2030 = 1.0;
    }
    float _2094;
    float _2096;
    float _2098;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2082 = fma(_1878, cbSceneParam._m0[63u].w, fma(_1874, cbSceneParam._m0[63u].z, fma(_1870, cbSceneParam._m0[63u].y, _1866 * cbSceneParam._m0[63u].x)));
        float _2083 = fma(_1878, cbSceneParam._m0[60u].w, fma(_1874, cbSceneParam._m0[60u].z, fma(_1870, cbSceneParam._m0[60u].y, _1866 * cbSceneParam._m0[60u].x))) / _2082;
        float _2084 = fma(_1878, cbSceneParam._m0[61u].w, fma(_1874, cbSceneParam._m0[61u].z, fma(_1870, cbSceneParam._m0[61u].y, _1866 * cbSceneParam._m0[61u].x))) / _2082;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2083 >= cbSceneParam._m0[64u].x) && (_2084 >= cbSceneParam._m0[64u].y)) && (_2083 <= cbSceneParam._m0[64u].z)) && (_2084 <= cbSceneParam._m0[64u].w))
        {
            float _2222 = fma(_1878, cbSceneParam._m0[62u].w, fma(_1874, cbSceneParam._m0[62u].z, fma(_1870, cbSceneParam._m0[62u].y, _1866 * cbSceneParam._m0[62u].x))) / _2082;
            float _2226 = isnan(cbSceneParam._m0[41u].w) ? _2222 : (isnan(_2222) ? cbSceneParam._m0[41u].w : max(_2222, cbSceneParam._m0[41u].w));
            float _2269 = (cbSceneParam._m0[33u].x - sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881))) * cbSceneParam._m0[33u].y;
            float _4454 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
            float _2276 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2083, cbSceneParam._m0[33u].w + _2084), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2083, _2084 - cbSceneParam._m0[33u].z), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2083 - cbSceneParam._m0[33u].z, _2084 - cbSceneParam._m0[33u].w), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2083 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2084), _2226), 0.0)).x), vec4(0.25)));
            float _2280 = 1.0 - (_2276 * cbSceneParam._m0[34u].x);
            float _2281 = 1.0 - (_2276 * cbSceneParam._m0[34u].y);
            float _2282 = 1.0 - (_2276 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2282) ? _2030 : (isnan(_2030) ? _2282 : min(_2030, _2282));
            frontier_phi_34_33_ladder_1 = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
            frontier_phi_34_33_ladder_2 = isnan(_2280) ? _2028 : (isnan(_2028) ? _2280 : min(_2028, _2280));
        }
        else
        {
            frontier_phi_34_33_ladder = _2030;
            frontier_phi_34_33_ladder_1 = _2029;
            frontier_phi_34_33_ladder_2 = _2028;
        }
        _2094 = frontier_phi_34_33_ladder_2;
        _2096 = frontier_phi_34_33_ladder_1;
        _2098 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2094 = _2028;
        _2096 = _2029;
        _2098 = _2030;
    }
    uvec4 _2103 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _2105 = _2103.x * 14u;
    uint _2106 = _2105 + 13u;
    float _2113 = _746 + (-1.0);
    float _2118 = (cbLight._m0[_2106].x * _2113) + 1.0;
    float _2119 = (cbLight._m0[_2106].y * _2113) + 1.0;
    float _2120 = (cbLight._m0[_2106].z * _2113) + 1.0;
    float _2121 = (cbLight._m0[_2106].w * _2113) + 1.0;
    uint _2122 = _2105 + 5u;
    float _2128 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2132 = _2105 + 4u;
    float _2141 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2145 = _2105 | 1u;
    float _2156 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_635, _636, _637));
    float _2159 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_635, _636, _637));
    float _4490 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _4501 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2164 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2166 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2173 = ((cbLight._m0[_2122].x * _2128) * _2166) + (((cbLight._m0[_2132].x * _2094) * _2141) * _2164);
    float _2174 = ((_2128 * cbLight._m0[_2122].y) * _2166) + (((cbLight._m0[_2132].y * _2096) * _2141) * _2164);
    float _2175 = ((_2128 * cbLight._m0[_2122].z) * _2166) + (((cbLight._m0[_2132].z * _2098) * _2141) * _2164);
    uvec4 _2179 = floatBitsToUint(cbLight._m0[_2105 + 12u]);
    bool _2181 = _2179.x == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2181)
    {
        _2283 = _2173;
        _2285 = _2174;
        _2287 = _2175;
    }
    else
    {
        uint _2291 = _2105 + 6u;
        float _2307 = (dot(vec3(cbLight._m0[_2105 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4512 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2310 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2283 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2173;
        _2285 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2174;
        _2287 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2175;
    }
    bool _2290 = _2179.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2290)
    {
        _2345 = _2283;
        _2347 = _2285;
        _2349 = _2287;
    }
    else
    {
        uint _2507 = _2105 + 7u;
        float _2523 = (dot(vec3(cbLight._m0[_2105 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2524 = _2523 * _2523;
        float _4528 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2525 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2526 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2345 = (((cbLight._m0[_2507].x * 0.3183098733425140380859375) * _2525) * _2526) + _2283;
        _2347 = (((cbLight._m0[_2507].y * 0.3183098733425140380859375) * _2525) * _2526) + _2285;
        _2349 = (((cbLight._m0[_2507].z * 0.3183098733425140380859375) * _2525) * _2526) + _2287;
    }
    uint _2352 = _2105 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _639) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2105].x + _673;
    float _2368 = cbLight._m0[_2105].y + _674;
    float _2369 = cbLight._m0[_2105].z + _675;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2105].xyz));
    float _4544 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _4555 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2381 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2382 = dot(vec3(_635, _636, _637), vec3(_2374, _2375, _2376));
    float _4566 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2374, _2375, _2376));
    float _4577 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2406 = 1.0 - _2366;
    float _2417 = (0.5 / (((_2381 * ((_2380 * _2406) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2406) + _2366) * _2380))) * _2380;
    float _4588 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2433 = _2105 + 9u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _639) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2145].x + _673;
    float _2447 = cbLight._m0[_2145].y + _674;
    float _2448 = cbLight._m0[_2145].z + _675;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2145].xyz));
    float _4599 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2460 = dot(vec3(_635, _636, _637), vec3(_2453, _2454, _2455));
    float _4610 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2453, _2454, _2455));
    float _4621 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2445 * _2445;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2482 = 1.0 - _2445;
    float _2492 = (0.5 / (((_2381 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2482) + _2445) * _2459))) * _2459;
    float _4632 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    float _2504 = (((_2481 * cbLight._m0[_2433].x) * _2494) * _2128) + ((((cbLight._m0[_2352].x * _2094) * _2405) * _2419) * _2141);
    float _2505 = (((_2481 * cbLight._m0[_2433].y) * _2494) * _2128) + ((((cbLight._m0[_2352].y * _2096) * _2405) * _2419) * _2141);
    float _2506 = (((_2481 * cbLight._m0[_2433].z) * _2494) * _2128) + ((((cbLight._m0[_2352].z * _2098) * _2405) * _2419) * _2141);
    float _2562;
    float _2564;
    float _2566;
    if (_2181)
    {
        _2562 = _2504;
        _2564 = _2505;
        _2566 = _2506;
    }
    else
    {
        uint _2568 = _2105 + 2u;
        uint _2572 = _2105 + 10u;
        float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _639) * 0.949999988079071044921875);
        float _2587 = _2586 * _2586;
        float _2588 = cbLight._m0[_2568].x + _673;
        float _2589 = cbLight._m0[_2568].y + _674;
        float _2590 = cbLight._m0[_2568].z + _675;
        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
        float _2595 = _2594 * _2588;
        float _2596 = _2594 * _2589;
        float _2597 = _2594 * _2590;
        float _2598 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2568].xyz));
        float _4643 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2602 = dot(vec3(_635, _636, _637), vec3(_2595, _2596, _2597));
        float _4654 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2606 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2595, _2596, _2597));
        float _4665 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2610 = _2587 * _2587;
        float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
        float _2623 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2624 = 1.0 - _2587;
        float _2634 = (0.5 / (((_2381 * ((_2601 * _2624) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2624) + _2587) * _2601))) * _2601;
        float _4676 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2562 = (((_2623 * cbLight._m0[_2572].x) * _2636) * _2637) + _2504;
        _2564 = (((_2623 * cbLight._m0[_2572].y) * _2636) * _2637) + _2505;
        _2566 = (((_2623 * cbLight._m0[_2572].z) * _2636) * _2637) + _2506;
    }
    float _2668;
    float _2670;
    float _2672;
    if (_2290)
    {
        _2668 = _2562;
        _2670 = _2564;
        _2672 = _2566;
    }
    else
    {
        uint _2679 = _2105 + 3u;
        uint _2683 = _2105 + 11u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _639) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _673;
        float _2700 = cbLight._m0[_2679].y + _674;
        float _2701 = cbLight._m0[_2679].z + _675;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2679].xyz));
        float _4692 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2713 = dot(vec3(_635, _636, _637), vec3(_2706, _2707, _2708));
        float _4703 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4714 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2734 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2735 = 1.0 - _2698;
        float _2745 = (0.5 / (((_2381 * ((_2712 * _2735) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2735) + _2698) * _2712))) * _2712;
        float _4725 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2668 = (((_2734 * cbLight._m0[_2683].x) * _2747) * _2748) + _2562;
        _2670 = (((_2734 * cbLight._m0[_2683].y) * _2747) * _2748) + _2564;
        _2672 = (((_2734 * cbLight._m0[_2683].z) * _2747) * _2748) + _2566;
    }
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_2103.y == 0u)
    {
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.x;
        uint _2781 = uint((float(_2769.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2770))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2770)));
        float _2791 = (log2(_1881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2792 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        uint _2795 = uint(isnan(14.0) ? _2792 : (isnan(_2792) ? 14.0 : min(_2792, 14.0)));
        uvec4 _2800 = texelFetch(g_lightClusterGridBuffer, int(((_2795 << 2u) + (_2781 << 6u)) >> 2u));
        uint _2801 = _2800.x;
        uint _2802 = _2769.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2802 >> 4u) & 15u)) + 4294967295u) & _2801) == 0u) || ((_2802 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3143)
                {
                    frontier_phi_66_pred = _3132;
                    frontier_phi_66_pred_1 = _3131;
                    frontier_phi_66_pred_2 = _3130;
                    frontier_phi_66_pred_3 = _3129;
                    frontier_phi_66_pred_4 = _3128;
                    frontier_phi_66_pred_5 = _3127;
                }
                else
                {
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    uint _3257;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3142;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    for (;;)
                    {
                        uint _3261 = uint(findLSB(_3257)) + (_3133 << 5u);
                        uint _3258 = (_3257 + 4294967295u) & _3257;
                        uint _3263 = _3261 * 48u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3283 = (_3261 * 48u) + 4u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3302 = (_3261 * 48u) + 8u;
                        vec3 _3313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x));
                        float _3317 = _3277.x - _1879;
                        float _3318 = _3277.y - _1880;
                        float _3319 = _3277.z - _1881;
                        float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                        float _3323 = inversesqrt(_3320);
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3327 = dot(vec3(_702, _705, _708), vec3(_3324, _3325, _3326));
                        float _3332 = 1.0 - (_3320 * _3277.w);
                        float _4751 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3334 = sqrt(_3320) * _3296.w;
                        float _3337 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3327) + _3338;
                        float _3344 = _3334 * _3334;
                        float _3348 = ((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3333) / ((_3344 * 0.699999988079071044921875) + 1.0);
                        float _3352 = (-0.0) - _1879;
                        float _3353 = (-0.0) - _1880;
                        float _3354 = (-0.0) - _1881;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3368 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _770;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3359 + _3324;
                        float _3380 = _3360 + _3325;
                        float _3381 = _3361 + _3326;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_702, _705, _708), vec3(_3359, _3360, _3361));
                        float _4767 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3393 = dot(vec3(_702, _705, _708), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4778 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3337 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3327) + _3402;
                        float _4789 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4800 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) / ((_3400 * _3400) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125))) * _3333;
                        _3186 = (_3348 * _3296.x) + _3254;
                        _3187 = (_3348 * _3296.y) + _3255;
                        _3188 = (_3348 * _3296.z) + _3256;
                        _3183 = (_3428 * _3313.x) + _3251;
                        _3184 = (_3428 * _3313.y) + _3252;
                        _3185 = (_3428 * _3313.z) + _3253;
                        if (_3258 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3258;
                        }
                    }
                    frontier_phi_66_pred = _3188;
                    frontier_phi_66_pred_1 = _3187;
                    frontier_phi_66_pred_2 = _3186;
                    frontier_phi_66_pred_3 = _3185;
                    frontier_phi_66_pred_4 = _3184;
                    frontier_phi_66_pred_5 = _3183;
                }
                _2962 = frontier_phi_66_pred;
                _2960 = frontier_phi_66_pred_1;
                _2958 = frontier_phi_66_pred_2;
                _2956 = frontier_phi_66_pred_3;
                _2954 = frontier_phi_66_pred_4;
                _2952 = frontier_phi_66_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2952;
                    _3128 = _2954;
                    _3129 = _2956;
                    _3130 = _2958;
                    _3131 = _2960;
                    _3132 = _2962;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2968) & _2801) == 0u)
        {
            _3095 = _2951;
            _3097 = _2953;
            _3099 = _2955;
            _3101 = _2957;
            _3103 = _2959;
            _3105 = _2961;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
            float _3121 = _3120 * _1879;
            float _3122 = _3120 * _1880;
            float _3123 = _3120 * _1881;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3234 = _2951;
                float _3235 = _2953;
                float _3236 = _2955;
                float _3237 = _2957;
                float _3238 = _2959;
                float _3239 = _2961;
                uint _3240 = _2968;
                uint _3249;
                bool _3250;
                for (;;)
                {
                    _3249 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                    _3250 = _3249 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3250)
                    {
                        frontier_phi_72_pred = _3239;
                        frontier_phi_72_pred_1 = _3238;
                        frontier_phi_72_pred_2 = _3237;
                        frontier_phi_72_pred_3 = _3236;
                        frontier_phi_72_pred_4 = _3235;
                        frontier_phi_72_pred_5 = _3234;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3446 = _3234;
                        float _3447 = _3235;
                        float _3448 = _3236;
                        float _3449 = _3237;
                        float _3450 = _3238;
                        float _3451 = _3239;
                        uint _3452 = _3249;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3537;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3463 = ((_3240 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3524 = (_3463 * 40u) + 20u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3540 = (_3463 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3463 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_1881, _3572.z, fma(_1880, _3572.y, _3572.x * _1879)) + _3572.w;
                            _3585 = !((fma(_1881, _3553.z, fma(_1880, _3553.y, _3553.x * _1879)) + _3553.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3478.x - _1879;
                                float _3613 = _3478.y - _1880;
                                float _3614 = _3478.z - _1881;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3479 * _3479));
                                float _4811 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3630 = sqrt(_3615) * _3494.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_702, _705, _708))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_1881, _3521.z, fma(_1880, _3521.y, _3521.x * _1879)) + _3521.w) / _3584;
                                float _3644 = (fma(_1881, _3537.z, fma(_1880, _3537.y, _3537.x * _1879)) + _3537.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4827 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _770;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3121;
                                float _3674 = _3620 - _3122;
                                float _3675 = _3621 - _3123;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_702, _705, _708), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4838 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3687 = dot(vec3(_702, _705, _708), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4849 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_702, _705, _708), vec3(_3619, _3620, _3621))) + _3696;
                                float _4860 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4871 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3650 * _3494.y;
                                frontier_phi_78_pred_1 = _3650 * _3494.x;
                                frontier_phi_78_pred_2 = _3724 * _3506.z;
                                frontier_phi_78_pred_3 = _3724 * _3506.y;
                                frontier_phi_78_pred_4 = _3724 * _3506.x;
                                frontier_phi_78_pred_5 = _3650 * _3494.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3732 = frontier_phi_78_pred;
                            _3731 = frontier_phi_78_pred_1;
                            _3730 = frontier_phi_78_pred_2;
                            _3729 = frontier_phi_78_pred_3;
                            _3728 = frontier_phi_78_pred_4;
                            _3733 = frontier_phi_78_pred_5;
                            _3436 = _3731 + _3449;
                            _3437 = _3732 + _3450;
                            _3438 = _3733 + _3451;
                            _3433 = _3728 + _3446;
                            _3434 = _3729 + _3447;
                            _3435 = _3730 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3438;
                        frontier_phi_72_pred_1 = _3437;
                        frontier_phi_72_pred_2 = _3436;
                        frontier_phi_72_pred_3 = _3435;
                        frontier_phi_72_pred_4 = _3434;
                        frontier_phi_72_pred_5 = _3433;
                    }
                    _3106 = frontier_phi_72_pred;
                    _3104 = frontier_phi_72_pred_1;
                    _3102 = frontier_phi_72_pred_2;
                    _3100 = frontier_phi_72_pred_3;
                    _3098 = frontier_phi_72_pred_4;
                    _3096 = frontier_phi_72_pred_5;
                    uint _3241 = _3240 + 1u;
                    if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3234 = _3096;
                        _3235 = _3098;
                        _3236 = _3100;
                        _3237 = _3102;
                        _3238 = _3104;
                        _3239 = _3106;
                        _3240 = _3241;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3106;
                frontier_phi_60_61_ladder_1 = _3104;
                frontier_phi_60_61_ladder_2 = _3100;
                frontier_phi_60_61_ladder_3 = _3098;
                frontier_phi_60_61_ladder_4 = _3096;
                frontier_phi_60_61_ladder_5 = _3102;
            }
            else
            {
                frontier_phi_60_61_ladder = _2961;
                frontier_phi_60_61_ladder_1 = _2959;
                frontier_phi_60_61_ladder_2 = _2955;
                frontier_phi_60_61_ladder_3 = _2953;
                frontier_phi_60_61_ladder_4 = _2951;
                frontier_phi_60_61_ladder_5 = _2957;
            }
            _3095 = frontier_phi_60_61_ladder_4;
            _3097 = frontier_phi_60_61_ladder_3;
            _3099 = frontier_phi_60_61_ladder_2;
            _3101 = frontier_phi_60_61_ladder_5;
            _3103 = frontier_phi_60_61_ladder_1;
            _3105 = frontier_phi_60_61_ladder;
        }
        float _3110 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2814 = (_3110 * _3101) + _2345;
        _2816 = (_3110 * _3103) + _2347;
        _2818 = (_3110 * _3105) + _2349;
        _2820 = ((_3095 * 0.039999999105930328369140625) * _3110) + _2668;
        _2822 = ((_3097 * 0.039999999105930328369140625) * _3110) + _2670;
        _2824 = ((_3099 * 0.039999999105930328369140625) * _3110) + _2672;
    }
    else
    {
        _2814 = _2345;
        _2816 = _2347;
        _2818 = _2349;
        _2820 = _2668;
        _2822 = _2670;
        _2824 = _2672;
    }
    float _2838 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2839 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2840 = cbSceneParam._m0[86u].x * (_1791 + ((_769 * cbMtdParam._m0[13u].w) * dot(vec3(_635, _636, _637), vec3(_201, _202, _203))));
    float _2841 = isnan(_2838) ? _2840 : (isnan(_2840) ? _2838 : min(_2840, _2838));
    float _2842 = isnan(_2839) ? _681 : (isnan(_681) ? _2839 : min(_681, _2839));
    vec4 _2844 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2841, _2842), 0.0);
    float _2846 = _2844.x;
    bool _2866 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2846)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2846))) > _647;
    vec4 _2870 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2866 ? _2841 : _680, _2866 ? _2842 : _681));
    float _4897 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4908 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4919 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _2894 = 0.959999978542327880859375 - (exp2(log2(1.0 - _761) * 5.0) * 0.959999978542327880859375);
    float _2896 = (_2870.x * _2894) * cbSceneParam._m0[72u].w;
    float _2898 = (_2870.y * _2894) * cbSceneParam._m0[72u].w;
    float _2900 = (_2870.z * _2894) * cbSceneParam._m0[72u].w;
    float _2922 = _680 / cbSceneParam._m0[86u].x;
    float _2923 = _681 / cbSceneParam._m0[86u].y;
    vec4 _2937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, (log2((isnan(cbSceneParam._m0[77u].w) ? _647 : (isnan(_647) ? cbSceneParam._m0[77u].w : min(_647, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2939 = _2937.x;
    float _2940 = _2937.y;
    float _2941 = _2937.z;
    float _2942 = _2937.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_647 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_647) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _647 : min(cbSceneParam._m0[80u].w, _647));
        float _2977 = _2976 / _647;
        float _2988 = _2977 * _666;
        float _2989 = _667 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2991 = _2977 * _668;
        float _2993 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2989;
        float _3001 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3196;
        if (abs((_2990 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3196 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3158 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3196 = ((abs(_3001 / _2990) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3011 * _3167) - exp2(_3011 * _3168)) * _3156))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3198 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, 1.0), 0.0);
        float _3207 = exp2((_3196 * (-1.44269502162933349609375)) * (1.0 - _3198.w));
        float _3208 = log2(_3207);
        float _3224 = log2(_2942);
        _3013 = (exp2(_3224 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].x)) * _3198.x) / cbSceneParam._m0[78u].x)) + _2939;
        _3015 = (exp2(_3224 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].y)) * _3198.y) / cbSceneParam._m0[78u].y)) + _2940;
        _3017 = (exp2(_3224 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].z)) * _3198.z) / cbSceneParam._m0[78u].z)) + _2941;
        _3019 = _3207 * _2942;
    }
    else
    {
        _3013 = _2939;
        _3015 = _2940;
        _3017 = _2941;
        _3019 = _2942;
    }
    bool _3031 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3032 = log2(_3019);
    float _3039 = exp2(_3032 * cbSceneParam._m0[78u].x) * ((_2896 + (((((_1768 * _1816.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1559) * _1832)) + _2820) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2814 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _746))) - _2896) * _620));
    float _3040 = exp2(_3032 * cbSceneParam._m0[78u].y) * ((_2898 + (((((_1768 * _1816.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1559) * _1832)) + _2822) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2816 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _746))) - _2898) * _620));
    float _3041 = exp2(_3032 * cbSceneParam._m0[78u].z) * ((_2900 + (((((_1768 * _1816.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1559) * _1832)) + _2824) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2818 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _746))) - _2900) * _620));
    vec4 _3049 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_680, _681));
    float _3051 = _3049.x;
    float _3072 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3051)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3051))) - _647) * 3.0;
    float _4970 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
    float _3074 = (cbInstanceData._m0[_721 + 6u].w * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)));
    float _3083 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3083 * (_3031 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3013)));
    SV_Target.y = _3083 * (_3031 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3015)));
    SV_Target.z = _3083 * (_3031 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3017)));
    SV_Target.w = _3074;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3074;
}


