#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _103 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _104 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _105 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _111 = inversesqrt(dot(vec3(_103, _104, _105), vec3(_103, _104, _105)));
    float _118 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _119 = _118 * NORMAL.x;
    float _120 = _118 * NORMAL.y;
    float _121 = _118 * NORMAL.z;
    float _125 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _151 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _159 = (_151.x * 2.0) + (-1.0);
    float _161 = (_151.y * 2.0) + (-1.0);
    float _162 = dot(vec2(_159, _161), vec2(_159, _161));
    float _754 = isnan(0.0) ? _162 : (isnan(_162) ? 0.0 : max(_162, 0.0));
    float _168 = sqrt(1.0 - (isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0))));
    float _171 = fma(_168, _119, fma(_161, _125 * TANGENT.x, (_111 * _103) * _159));
    float _174 = fma(_168, _120, fma(_161, _125 * TANGENT.y, (_111 * _104) * _159));
    float _177 = fma(_168, _121, fma(_161, _125 * TANGENT.z, (_111 * _105) * _159));
    float _181 = inversesqrt(dot(vec3(_171, _174, _177), vec3(_171, _174, _177)));
    float _192 = cbMtdParam._m0[13u].z + dot(vec4(_181 * _171, _181 * _174, _181 * _177, 0.0), vec4(cbMtdParam._m0[14u].zw, cbMtdParam._m0[15u].x, 0.0));
    float _765 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _194 = (isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0))) * TEXCOORD_3.x;
    float _776 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _203 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0)))) + cbMtdParam._m0[12u].x;
    float _787 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _204 = isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0));
    float _218 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _219 = POSITION_1.x / POSITION_1.w;
    float _220 = POSITION_1.y / POSITION_1.w;
    float _224 = (_219 * 0.5) + 0.5;
    float _225 = 0.5 - (_220 * 0.5);
    float _231;
    float _233;
    float _235;
    float _237;
    if (_204 < cbPerScene._m0[22u].z)
    {
        _231 = 0.0;
        _233 = 0.0;
        _235 = 0.0;
        _237 = 0.0;
    }
    else
    {
        float _243 = 1.0 / _218;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _243))
        {
            float _269 = fma(_121, cbPerScene._m0[8u].z, fma(_120, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _119));
            float _272 = fma(_121, cbPerScene._m0[9u].z, fma(_120, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _119));
            float _275 = fma(_121, cbPerScene._m0[10u].z, fma(_120, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _119));
            float _282 = (_218 * _219) * cbPerScene._m0[28u].x;
            float _284 = (_218 * _220) * cbPerScene._m0[28u].y;
            float _288 = inversesqrt(dot(vec3(_282, _284, _218), vec3(_282, _284, _218)));
            float _289 = _282 * _288;
            float _290 = _284 * _288;
            float _291 = _288 * _218;
            float _295 = dot(vec3(_289, _290, _291), vec3(_269, _272, _275)) * 2.0;
            float _299 = _289 - (_295 * _269);
            float _300 = _290 - (_295 * _272);
            float _301 = _291 - (_295 * _275);
            float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
            float _308 = _301 * _305;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_308 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _320 = abs(dot(vec3((-0.0) - _289, (-0.0) - _290, (-0.0) - _291), vec3(_269, _272, _275)));
                float _798 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
                float _331 = (((_204 * _204) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _340 = (cbPerScene._m0[29u].x * (1.0 - _204)) + cbPerScene._m0[29u].y;
                float _809 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
                float _349 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_331 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _352 = _308 - cbPerScene._m0[16u].x;
                    float _820 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
                    float _353 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
                    float _354 = _353 * _353;
                    float _356 = (_331 - cbPerScene._m0[22u].x) * 10.0;
                    float _831 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
                    float _358 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
                    float _359 = isnan(_358) ? _354 : (isnan(_354) ? _358 : min(_354, _358));
                    float _363 = (cbPerScene._m0[21u].x - _218) * cbPerScene._m0[21u].z;
                    float _847 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
                    float _364 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
                    float _365 = isnan(_364) ? _359 : (isnan(_359) ? _364 : min(_359, _364));
                    float _366 = (_299 * _305) + _282;
                    float _367 = (_300 * _305) + _284;
                    float _368 = _308 + _218;
                    float _401 = fma(_368, cbPerScene._m0[7u].z, fma(_367, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _366)) + cbPerScene._m0[7u].w;
                    float _405 = ((fma(_368, cbPerScene._m0[4u].z, fma(_367, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _366)) + cbPerScene._m0[4u].w) / _401) - _224;
                    float _406 = ((fma(_368, cbPerScene._m0[5u].z, fma(_367, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _366)) + cbPerScene._m0[5u].w) / _401) - _225;
                    float _413 = cbPerScene._m0[18u].x * _405;
                    float _414 = cbPerScene._m0[18u].y * _406;
                    float _419 = sqrt((_413 * _413) + (_414 * _414)) + 9.9999997473787516355514526367188e-06;
                    float _424 = (_405 / _419) * _349;
                    float _425 = (_406 / _419) * _349;
                    float _426 = (((1.0 / _368) - _243) / _419) * _349;
                    float _455 = abs(float(_424 > 0.0) - _224) / (abs(_424) + 1.0000000116860974230803549289703e-07);
                    float _456 = abs(float(_425 > 0.0) - _225) / (abs(_425) + 1.0000000116860974230803549289703e-07);
                    float _458 = (abs(((_426 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _243) / (abs(_426) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _459 = isnan(_456) ? _455 : (isnan(_455) ? _456 : min(_455, _456));
                    float _460 = isnan(_458) ? _459 : (isnan(_459) ? _458 : min(_459, _458));
                    uint _463 = uint(int(isnan(cbPerScene._m0[23u].y) ? _460 : (isnan(_460) ? cbPerScene._m0[23u].y : min(_460, cbPerScene._m0[23u].y))));
                    float _238;
                    float _468;
                    float _470;
                    float _472;
                    if (int(_463) > int(0u))
                    {
                        float _465 = _426 + _243;
                        float _466 = _425 + _225;
                        float _467 = _424 + _224;
                        float _469;
                        float _471;
                        float _473;
                        float _474;
                        uint _485;
                        float _487;
                        float _489;
                        float _491;
                        float _493;
                        float _495;
                        float _497;
                        float _499;
                        uint _501;
                        float _503;
                        float _505;
                        float _507;
                        float _480 = 0.0;
                        float _481 = 0.0;
                        float _482 = 0.0;
                        float _483 = 0.0;
                        uint _484 = 0u;
                        float _486 = _243;
                        float _488 = _467;
                        float _490 = _466;
                        float _492 = _465;
                        float _494 = _224;
                        float _496 = _225;
                        float _498 = _243;
                        uint _500 = 1u;
                        float _502 = 0.0;
                        float _504 = 0.0;
                        float _506 = 0.0;
                        float _518;
                        float _525;
                        float _526;
                        float _527;
                        float _528;
                        float _529;
                        float _530;
                        uint _531;
                        float _532;
                        bool _538;
                        for (;;)
                        {
                            _518 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _488, cbSceneParam._m0[86u].y * _490), 0.0).x;
                            bool _524 = _484 == (_463 + 4294967295u);
                            _525 = _524 ? _502 : _488;
                            _526 = _524 ? _504 : _490;
                            _527 = _524 ? _506 : _492;
                            _528 = _524 ? _502 : _494;
                            _529 = _524 ? _504 : _496;
                            _530 = _524 ? _506 : _498;
                            _531 = _524 ? 1u : _500;
                            _532 = _524 ? (-1.0) : (_492 - _518);
                            _538 = (_531 != 0u) && ((_532 <= 0.0) && ((_524 ? (-1.0) : (_518 - (_486 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_538)
                            {
                                uint _548 = uint(int(log2(_349) + 0.999000012874603271484375));
                                float _559;
                                float _561;
                                float _563;
                                float _565;
                                float _567;
                                float _569;
                                float _571;
                                if (int(_548) > int(0u))
                                {
                                    uint _669;
                                    float _671;
                                    float _672;
                                    float _673;
                                    float _674;
                                    float _675;
                                    float _676;
                                    float _677;
                                    _669 = 0u;
                                    _671 = _525;
                                    _672 = _526;
                                    _673 = _527;
                                    _674 = _528;
                                    _675 = _529;
                                    _676 = _530;
                                    _677 = _518;
                                    float _560;
                                    float _562;
                                    float _564;
                                    float _566;
                                    float _568;
                                    float _570;
                                    float _572;
                                    for (;;)
                                    {
                                        float _681 = (_674 + _671) * 0.5;
                                        float _682 = (_675 + _672) * 0.5;
                                        float _683 = (_676 + _673) * 0.5;
                                        vec4 _691 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _681, cbSceneParam._m0[86u].y * _682), 0.0);
                                        float _693 = _691.x;
                                        bool _695 = (_683 - _693) < 0.0;
                                        _560 = _695 ? _681 : _671;
                                        _562 = _695 ? _682 : _672;
                                        _564 = _695 ? _683 : _673;
                                        _566 = _695 ? _674 : _681;
                                        _568 = _695 ? _675 : _682;
                                        _570 = _695 ? _676 : _683;
                                        _572 = _695 ? _693 : _677;
                                        uint _670 = _669 + 1u;
                                        if (_670 == _548)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _669 = _670;
                                            _671 = _560;
                                            _672 = _562;
                                            _673 = _564;
                                            _674 = _566;
                                            _675 = _568;
                                            _676 = _570;
                                            _677 = _572;
                                        }
                                    }
                                    _559 = _560;
                                    _561 = _562;
                                    _563 = _564;
                                    _565 = _566;
                                    _567 = _568;
                                    _569 = _570;
                                    _571 = _572;
                                }
                                else
                                {
                                    _559 = _525;
                                    _561 = _526;
                                    _563 = _527;
                                    _565 = _528;
                                    _567 = _529;
                                    _569 = _530;
                                    _571 = _518;
                                }
                                float _581 = cbPerScene._m0[28u].x * ((_559 * 2.0) + (-1.0));
                                float _582 = cbPerScene._m0[28u].y * (1.0 - (_561 * 2.0));
                                float _614 = fma(_571, cbPerScene._m0[27u].w, fma(_582, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _581) + cbPerScene._m0[27u].z);
                                float _615 = fma(_571, cbPerScene._m0[24u].w, fma(_582, cbPerScene._m0[24u].y, _581 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _614;
                                float _616 = fma(_571, cbPerScene._m0[25u].w, fma(_582, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _581) + cbPerScene._m0[25u].z) / _614;
                                vec4 _625 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _615, cbSceneParam._m0[87u].w * _616), 0.0);
                                float _630 = isnan(_365) ? 1.0 : (isnan(1.0) ? _365 : min(1.0, _365));
                                float _631 = 0.5 - _615;
                                float _632 = 0.5 - _616;
                                float _633 = _631 * 2.0;
                                float _634 = _632 * 2.0;
                                float _635 = _633 * _633;
                                float _636 = _634 * _634;
                                float _883 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
                                float _894 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
                                float _645 = inversesqrt(dot(vec2(_424, _425), vec2(_424, _425)));
                                float _651 = inversesqrt(dot(vec2(_633, _634), vec2(_633, _634)));
                                float _657 = dot(vec2((_631 * (-2.0)) * _651, (_632 * (-2.0)) * _651), vec2(_645 * _424, _645 * _425));
                                float _905 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
                                float _664 = ((1.0 - (isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0)))) * (1.0 - (isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0))))) * (4.0 - ((isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0))) * 2.0));
                                float _916 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
                                float _665 = isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0));
                                float _666 = _665 * _665;
                                frontier_phi_14_pred = _506;
                                frontier_phi_14_pred_1 = _504;
                                frontier_phi_14_pred_2 = _502;
                                frontier_phi_14_pred_3 = _531;
                                frontier_phi_14_pred_4 = _569;
                                frontier_phi_14_pred_5 = _567;
                                frontier_phi_14_pred_6 = _565;
                                frontier_phi_14_pred_7 = _563;
                                frontier_phi_14_pred_8 = _561;
                                frontier_phi_14_pred_9 = _559;
                                frontier_phi_14_pred_10 = _486;
                                frontier_phi_14_pred_11 = isnan(_666) ? _630 : (isnan(_630) ? _666 : min(_630, _666));
                                frontier_phi_14_pred_12 = _625.z;
                                frontier_phi_14_pred_13 = _625.y;
                                frontier_phi_14_pred_14 = _625.x;
                                frontier_phi_14_pred_15 = _463;
                            }
                            else
                            {
                                bool _550 = _532 > 0.0;
                                frontier_phi_14_pred = _550 ? _527 : _506;
                                frontier_phi_14_pred_1 = _550 ? _526 : _504;
                                frontier_phi_14_pred_2 = _550 ? _525 : _502;
                                frontier_phi_14_pred_3 = uint(_550);
                                frontier_phi_14_pred_4 = _527;
                                frontier_phi_14_pred_5 = _526;
                                frontier_phi_14_pred_6 = _525;
                                frontier_phi_14_pred_7 = _527 + _426;
                                frontier_phi_14_pred_8 = _526 + _425;
                                frontier_phi_14_pred_9 = _525 + _424;
                                frontier_phi_14_pred_10 = _518;
                                frontier_phi_14_pred_11 = _483;
                                frontier_phi_14_pred_12 = _482;
                                frontier_phi_14_pred_13 = _481;
                                frontier_phi_14_pred_14 = _480;
                                frontier_phi_14_pred_15 = _484 + 1u;
                            }
                            _507 = frontier_phi_14_pred;
                            _505 = frontier_phi_14_pred_1;
                            _503 = frontier_phi_14_pred_2;
                            _501 = frontier_phi_14_pred_3;
                            _499 = frontier_phi_14_pred_4;
                            _497 = frontier_phi_14_pred_5;
                            _495 = frontier_phi_14_pred_6;
                            _493 = frontier_phi_14_pred_7;
                            _491 = frontier_phi_14_pred_8;
                            _489 = frontier_phi_14_pred_9;
                            _487 = frontier_phi_14_pred_10;
                            _474 = frontier_phi_14_pred_11;
                            _473 = frontier_phi_14_pred_12;
                            _471 = frontier_phi_14_pred_13;
                            _469 = frontier_phi_14_pred_14;
                            _485 = frontier_phi_14_pred_15;
                            if (int(_485) < int(_463))
                            {
                                _480 = _469;
                                _481 = _471;
                                _482 = _473;
                                _483 = _474;
                                _484 = _485;
                                _486 = _487;
                                _488 = _489;
                                _490 = _491;
                                _492 = _493;
                                _494 = _495;
                                _496 = _497;
                                _498 = _499;
                                _500 = _501;
                                _502 = _503;
                                _504 = _505;
                                _506 = _507;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _468 = _469;
                        _470 = _471;
                        _472 = _473;
                        _238 = _474;
                    }
                    else
                    {
                        _468 = 0.0;
                        _470 = 0.0;
                        _472 = 0.0;
                        _238 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_468) || isnan(_470)) || isnan(_472))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_238 * _468) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _238;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_238 * _472) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_238 * _470) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _231 = frontier_phi_1_2_ladder;
        _233 = frontier_phi_1_2_ladder_3;
        _235 = frontier_phi_1_2_ladder_2;
        _237 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _231;
    SV_Target.y = _233;
    SV_Target.z = _235;
    SV_Target.w = _237;
}


