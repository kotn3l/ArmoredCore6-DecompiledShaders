#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _116 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _117 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _118 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _124 = inversesqrt(dot(vec3(_116, _117, _118), vec3(_116, _117, _118)));
    float _131 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _132 = _131 * NORMAL.x;
    float _133 = _131 * NORMAL.y;
    float _134 = _131 * NORMAL.z;
    float _138 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _164 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _172 = (_164.x * 2.0) + (-1.0);
    float _174 = (_164.y * 2.0) + (-1.0);
    float _175 = dot(vec2(_172, _174), vec2(_172, _174));
    float _877 = isnan(0.0) ? _175 : (isnan(_175) ? 0.0 : max(_175, 0.0));
    float _181 = sqrt(1.0 - (isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0))));
    float _184 = fma(_181, _132, fma(_174, _138 * TANGENT.x, (_124 * _116) * _172));
    float _187 = fma(_181, _133, fma(_174, _138 * TANGENT.y, (_124 * _117) * _172));
    float _190 = fma(_181, _134, fma(_174, _138 * TANGENT.z, (_124 * _118) * _172));
    float _194 = inversesqrt(dot(vec3(_184, _187, _190), vec3(_184, _187, _190)));
    float _205 = cbMtdParam._m0[13u].z + dot(vec4(_194 * _184, _194 * _187, _194 * _190, 0.0), vec4(cbMtdParam._m0[14u].zw, cbMtdParam._m0[15u].x, 0.0));
    float _888 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _207 = (isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0))) * TEXCOORD_3.x;
    float _899 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _216 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0)))) + cbMtdParam._m0[12u].x;
    float _910 = isnan(0.0) ? _216 : (isnan(_216) ? 0.0 : max(_216, 0.0));
    float _217 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
    float _231 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _275 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _285 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _275);
    float _286 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _275);
    float _287 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _275);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _318 = sqrt(((_285 * _285) + (_286 * _286)) + (_287 * _287));
        float _325 = (cbMatDynParam._m0[5u].x * _318) + cbMatDynParam._m0[5u].y;
        float _921 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
        float _326 = isnan(1.0) ? _921 : (isnan(_921) ? 1.0 : min(_921, 1.0));
        float _330 = (cbMatDynParam._m0[5u].z * _318) + cbMatDynParam._m0[5u].w;
        float _932 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0))) - _326)) + _326) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _297 = POSITION_1.x / POSITION_1.w;
    float _298 = POSITION_1.y / POSITION_1.w;
    float _302 = (_297 * 0.5) + 0.5;
    float _303 = 0.5 - (_298 * 0.5);
    float _343;
    float _345;
    float _347;
    float _349;
    if (_217 < cbPerScene._m0[22u].z)
    {
        _343 = 0.0;
        _345 = 0.0;
        _347 = 0.0;
        _349 = 0.0;
    }
    else
    {
        float _355 = 1.0 / _231;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _355))
        {
            float _381 = fma(_134, cbPerScene._m0[8u].z, fma(_133, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _132));
            float _384 = fma(_134, cbPerScene._m0[9u].z, fma(_133, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _132));
            float _387 = fma(_134, cbPerScene._m0[10u].z, fma(_133, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _132));
            float _394 = (_297 * _231) * cbPerScene._m0[28u].x;
            float _396 = (_298 * _231) * cbPerScene._m0[28u].y;
            float _400 = inversesqrt(dot(vec3(_394, _396, _231), vec3(_394, _396, _231)));
            float _401 = _394 * _400;
            float _402 = _396 * _400;
            float _403 = _400 * _231;
            float _407 = dot(vec3(_401, _402, _403), vec3(_381, _384, _387)) * 2.0;
            float _411 = _401 - (_407 * _381);
            float _412 = _402 - (_407 * _384);
            float _413 = _403 - (_407 * _387);
            float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
            float _420 = _413 * _417;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_420 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _432 = abs(dot(vec3((-0.0) - _401, (-0.0) - _402, (-0.0) - _403), vec3(_381, _384, _387)));
                float _943 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
                float _443 = (((_217 * _217) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _452 = (cbPerScene._m0[29u].x * (1.0 - _217)) + cbPerScene._m0[29u].y;
                float _954 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
                float _461 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _954 : (isnan(_954) ? 1.0 : min(_954, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_443 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _464 = _420 - cbPerScene._m0[16u].x;
                    float _965 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
                    float _465 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
                    float _466 = _465 * _465;
                    float _468 = (_443 - cbPerScene._m0[22u].x) * 10.0;
                    float _976 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
                    float _470 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
                    float _471 = isnan(_470) ? _466 : (isnan(_466) ? _470 : min(_466, _470));
                    float _475 = (cbPerScene._m0[21u].x - _231) * cbPerScene._m0[21u].z;
                    float _992 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
                    float _476 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
                    float _477 = isnan(_476) ? _471 : (isnan(_471) ? _476 : min(_471, _476));
                    float _478 = (_411 * _417) + _394;
                    float _479 = (_412 * _417) + _396;
                    float _480 = _420 + _231;
                    float _512 = fma(_480, cbPerScene._m0[7u].z, fma(_479, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _478)) + cbPerScene._m0[7u].w;
                    float _516 = ((fma(_480, cbPerScene._m0[4u].z, fma(_479, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _478)) + cbPerScene._m0[4u].w) / _512) - _302;
                    float _517 = ((fma(_480, cbPerScene._m0[5u].z, fma(_479, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _478)) + cbPerScene._m0[5u].w) / _512) - _303;
                    float _524 = cbPerScene._m0[18u].x * _516;
                    float _525 = cbPerScene._m0[18u].y * _517;
                    float _530 = sqrt((_524 * _524) + (_525 * _525)) + 9.9999997473787516355514526367188e-06;
                    float _535 = (_516 / _530) * _461;
                    float _536 = (_517 / _530) * _461;
                    float _537 = (((1.0 / _480) - _355) / _530) * _461;
                    float _566 = abs(float(_535 > 0.0) - _302) / (abs(_535) + 1.0000000116860974230803549289703e-07);
                    float _567 = abs(float(_536 > 0.0) - _303) / (abs(_536) + 1.0000000116860974230803549289703e-07);
                    float _569 = (abs(((_537 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _355) / (abs(_537) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _570 = isnan(_567) ? _566 : (isnan(_566) ? _567 : min(_566, _567));
                    float _571 = isnan(_569) ? _570 : (isnan(_570) ? _569 : min(_570, _569));
                    uint _574 = uint(int(isnan(cbPerScene._m0[23u].y) ? _571 : (isnan(_571) ? cbPerScene._m0[23u].y : min(_571, cbPerScene._m0[23u].y))));
                    float _350;
                    float _579;
                    float _581;
                    float _583;
                    if (int(_574) > int(0u))
                    {
                        float _576 = _537 + _355;
                        float _577 = _536 + _303;
                        float _578 = _535 + _302;
                        float _580;
                        float _582;
                        float _584;
                        float _585;
                        uint _596;
                        float _598;
                        float _600;
                        float _602;
                        float _604;
                        float _606;
                        float _608;
                        float _610;
                        uint _612;
                        float _614;
                        float _616;
                        float _618;
                        float _591 = 0.0;
                        float _592 = 0.0;
                        float _593 = 0.0;
                        float _594 = 0.0;
                        uint _595 = 0u;
                        float _597 = _355;
                        float _599 = _578;
                        float _601 = _577;
                        float _603 = _576;
                        float _605 = _302;
                        float _607 = _303;
                        float _609 = _355;
                        uint _611 = 1u;
                        float _613 = 0.0;
                        float _615 = 0.0;
                        float _617 = 0.0;
                        float _629;
                        float _636;
                        float _637;
                        float _638;
                        float _639;
                        float _640;
                        float _641;
                        uint _642;
                        float _643;
                        bool _649;
                        for (;;)
                        {
                            _629 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _601), 0.0).x;
                            bool _635 = _595 == (_574 + 4294967295u);
                            _636 = _635 ? _613 : _599;
                            _637 = _635 ? _615 : _601;
                            _638 = _635 ? _617 : _603;
                            _639 = _635 ? _613 : _605;
                            _640 = _635 ? _615 : _607;
                            _641 = _635 ? _617 : _609;
                            _642 = _635 ? 1u : _611;
                            _643 = _635 ? (-1.0) : (_603 - _629);
                            _649 = (_642 != 0u) && ((_643 <= 0.0) && ((_635 ? (-1.0) : (_629 - (_597 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_649)
                            {
                                uint _659 = uint(int(log2(_461) + 0.999000012874603271484375));
                                float _670;
                                float _672;
                                float _674;
                                float _676;
                                float _678;
                                float _680;
                                float _682;
                                if (int(_659) > int(0u))
                                {
                                    uint _780;
                                    float _782;
                                    float _783;
                                    float _784;
                                    float _785;
                                    float _786;
                                    float _787;
                                    float _788;
                                    _780 = 0u;
                                    _782 = _636;
                                    _783 = _637;
                                    _784 = _638;
                                    _785 = _639;
                                    _786 = _640;
                                    _787 = _641;
                                    _788 = _629;
                                    float _671;
                                    float _673;
                                    float _675;
                                    float _677;
                                    float _679;
                                    float _681;
                                    float _683;
                                    for (;;)
                                    {
                                        float _792 = (_785 + _782) * 0.5;
                                        float _793 = (_786 + _783) * 0.5;
                                        float _794 = (_787 + _784) * 0.5;
                                        vec4 _802 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793), 0.0);
                                        float _804 = _802.x;
                                        bool _806 = (_794 - _804) < 0.0;
                                        _671 = _806 ? _792 : _782;
                                        _673 = _806 ? _793 : _783;
                                        _675 = _806 ? _794 : _784;
                                        _677 = _806 ? _785 : _792;
                                        _679 = _806 ? _786 : _793;
                                        _681 = _806 ? _787 : _794;
                                        _683 = _806 ? _804 : _788;
                                        uint _781 = _780 + 1u;
                                        if (_781 == _659)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _780 = _781;
                                            _782 = _671;
                                            _783 = _673;
                                            _784 = _675;
                                            _785 = _677;
                                            _786 = _679;
                                            _787 = _681;
                                            _788 = _683;
                                        }
                                    }
                                    _670 = _671;
                                    _672 = _673;
                                    _674 = _675;
                                    _676 = _677;
                                    _678 = _679;
                                    _680 = _681;
                                    _682 = _683;
                                }
                                else
                                {
                                    _670 = _636;
                                    _672 = _637;
                                    _674 = _638;
                                    _676 = _639;
                                    _678 = _640;
                                    _680 = _641;
                                    _682 = _629;
                                }
                                float _692 = cbPerScene._m0[28u].x * ((_670 * 2.0) + (-1.0));
                                float _693 = cbPerScene._m0[28u].y * (1.0 - (_672 * 2.0));
                                float _725 = fma(_682, cbPerScene._m0[27u].w, fma(_693, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _692) + cbPerScene._m0[27u].z);
                                float _726 = fma(_682, cbPerScene._m0[24u].w, fma(_693, cbPerScene._m0[24u].y, _692 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _725;
                                float _727 = fma(_682, cbPerScene._m0[25u].w, fma(_693, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _692) + cbPerScene._m0[25u].z) / _725;
                                vec4 _736 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _726, cbSceneParam._m0[87u].w * _727), 0.0);
                                float _741 = isnan(_477) ? 1.0 : (isnan(1.0) ? _477 : min(1.0, _477));
                                float _742 = 0.5 - _726;
                                float _743 = 0.5 - _727;
                                float _744 = _742 * 2.0;
                                float _745 = _743 * 2.0;
                                float _746 = _744 * _744;
                                float _747 = _745 * _745;
                                float _1028 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
                                float _1039 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
                                float _756 = inversesqrt(dot(vec2(_535, _536), vec2(_535, _536)));
                                float _762 = inversesqrt(dot(vec2(_744, _745), vec2(_744, _745)));
                                float _768 = dot(vec2((_742 * (-2.0)) * _762, (_743 * (-2.0)) * _762), vec2(_756 * _535, _756 * _536));
                                float _1050 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
                                float _775 = ((1.0 - (isnan(1.0) ? _1039 : (isnan(_1039) ? 1.0 : min(_1039, 1.0)))) * (1.0 - (isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0))))) * (4.0 - ((isnan(1.0) ? _1050 : (isnan(_1050) ? 1.0 : min(_1050, 1.0))) * 2.0));
                                float _1061 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
                                float _776 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
                                float _777 = _776 * _776;
                                frontier_phi_17_pred = _617;
                                frontier_phi_17_pred_1 = _615;
                                frontier_phi_17_pred_2 = _613;
                                frontier_phi_17_pred_3 = _642;
                                frontier_phi_17_pred_4 = _680;
                                frontier_phi_17_pred_5 = _678;
                                frontier_phi_17_pred_6 = _676;
                                frontier_phi_17_pred_7 = _674;
                                frontier_phi_17_pred_8 = _672;
                                frontier_phi_17_pred_9 = _670;
                                frontier_phi_17_pred_10 = _597;
                                frontier_phi_17_pred_11 = isnan(_777) ? _741 : (isnan(_741) ? _777 : min(_741, _777));
                                frontier_phi_17_pred_12 = _736.z;
                                frontier_phi_17_pred_13 = _736.y;
                                frontier_phi_17_pred_14 = _736.x;
                                frontier_phi_17_pred_15 = _574;
                            }
                            else
                            {
                                bool _661 = _643 > 0.0;
                                frontier_phi_17_pred = _661 ? _638 : _617;
                                frontier_phi_17_pred_1 = _661 ? _637 : _615;
                                frontier_phi_17_pred_2 = _661 ? _636 : _613;
                                frontier_phi_17_pred_3 = uint(_661);
                                frontier_phi_17_pred_4 = _638;
                                frontier_phi_17_pred_5 = _637;
                                frontier_phi_17_pred_6 = _636;
                                frontier_phi_17_pred_7 = _638 + _537;
                                frontier_phi_17_pred_8 = _637 + _536;
                                frontier_phi_17_pred_9 = _636 + _535;
                                frontier_phi_17_pred_10 = _629;
                                frontier_phi_17_pred_11 = _594;
                                frontier_phi_17_pred_12 = _593;
                                frontier_phi_17_pred_13 = _592;
                                frontier_phi_17_pred_14 = _591;
                                frontier_phi_17_pred_15 = _595 + 1u;
                            }
                            _618 = frontier_phi_17_pred;
                            _616 = frontier_phi_17_pred_1;
                            _614 = frontier_phi_17_pred_2;
                            _612 = frontier_phi_17_pred_3;
                            _610 = frontier_phi_17_pred_4;
                            _608 = frontier_phi_17_pred_5;
                            _606 = frontier_phi_17_pred_6;
                            _604 = frontier_phi_17_pred_7;
                            _602 = frontier_phi_17_pred_8;
                            _600 = frontier_phi_17_pred_9;
                            _598 = frontier_phi_17_pred_10;
                            _585 = frontier_phi_17_pred_11;
                            _584 = frontier_phi_17_pred_12;
                            _582 = frontier_phi_17_pred_13;
                            _580 = frontier_phi_17_pred_14;
                            _596 = frontier_phi_17_pred_15;
                            if (int(_596) < int(_574))
                            {
                                _591 = _580;
                                _592 = _582;
                                _593 = _584;
                                _594 = _585;
                                _595 = _596;
                                _597 = _598;
                                _599 = _600;
                                _601 = _602;
                                _603 = _604;
                                _605 = _606;
                                _607 = _608;
                                _609 = _610;
                                _611 = _612;
                                _613 = _614;
                                _615 = _616;
                                _617 = _618;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _579 = _580;
                        _581 = _582;
                        _583 = _584;
                        _350 = _585;
                    }
                    else
                    {
                        _579 = 0.0;
                        _581 = 0.0;
                        _583 = 0.0;
                        _350 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_579) || isnan(_581)) || isnan(_583))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_350 * _579) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _350;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_350 * _583) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_350 * _581) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _343 = frontier_phi_3_4_ladder;
        _345 = frontier_phi_3_4_ladder_3;
        _347 = frontier_phi_3_4_ladder_2;
        _349 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _343;
    SV_Target.y = _345;
    SV_Target.z = _347;
    SV_Target.w = _349;
    discard_exit();
}


