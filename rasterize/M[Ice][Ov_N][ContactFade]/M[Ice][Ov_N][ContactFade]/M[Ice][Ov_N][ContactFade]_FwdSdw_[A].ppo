#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1169;
float _3970;
float _3971;
float _3972;
float _3973;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _296 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _303 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _307 = dot(vec4(_296 * _276, _296 * _277, _296 * _278, 0.0), vec4(_303 * _212, _303 * _213, _303 * _214, 0.0));
    float _3982 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _315 = exp2(log2(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3993 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _323 = (_316 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _324 = (_316 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _325 = (_316 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _347 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _355 = (_347.x * 2.0) + (-1.0);
    float _357 = (_347.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_355, _357), vec2(_355, _357));
    float _4004 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _363 = sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))));
    float _366 = fma(_363, _212, fma(_357, _219, _355 * _205));
    float _369 = fma(_363, _213, fma(_357, _220, _355 * _206));
    float _372 = fma(_363, _214, fma(_357, _221, _355 * _207));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _387 = cbMtdParam._m0[13u].z + dot(vec4(_376 * _366, _376 * _369, _376 * _372, 0.0), vec4(cbMtdParam._m0[14u].zw, cbMtdParam._m0[15u].x, 0.0));
    float _4015 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_3.x;
    float _4026 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    vec4 _402 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _421 = (((cbMtdParam._m0[9u].x * _402.x) - _323) * _390) + _323;
    float _422 = (((cbMtdParam._m0[9u].y * _402.y) - _324) * _390) + _324;
    float _423 = (((cbMtdParam._m0[9u].z * _402.z) - _325) * _390) + _325;
    vec4 _433 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _435 = _433.x;
    bool _442 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _459 = ((_442 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _435)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _435))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _4037 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = 1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)));
    float _4048 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _468 = 1.0 - ((_462 * _462) * (3.0 - (_462 * 2.0)));
    float _477 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].x) * _390) + cbMtdParam._m0[12u].x;
    float _481 = abs(_212);
    float _482 = abs(_213);
    float _483 = abs(_214);
    float _484 = _481 * _481;
    float _485 = _482 * _482;
    float _486 = _483 * _483;
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _519 = _512 * 0.0500000007450580596923828125;
    float _530 = (cbTextureTilingScale._m0[4u].x * (_508 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _533 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_530, (cbTextureTilingScale._m0[4u].y * _519) + cbTextureTilingScale._m0[4u].w));
    float _540 = (cbTextureTilingScale._m0[4u].y * (_516 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _541 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_530, _540));
    vec4 _551 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _519) + cbTextureTilingScale._m0[4u].z, _540));
    vec4 _578 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _597 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _603 = (_597.x * 2.0) + (-1.0);
    float _604 = (_597.y * 2.0) + (-1.0);
    float _4059 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _605 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _609 = (_605 * _605) * (3.0 - (_605 * 2.0));
    float _619 = (((((((_541.x * _485) + (_533.x * _486)) + (_551.x * _484)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _355) + (((_609 * (((_578.x * 2.0) + (-1.0)) - _603)) + _603) * cbMtdParam._m0[12u].y);
    float _620 = (((((((_541.y * _485) + (_533.y * _486)) + (_551.y * _484)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _357) + (((_609 * (((_578.y * 2.0) + (-1.0)) - _604)) + _604) * cbMtdParam._m0[12u].y);
    float _623 = cbMtdParam._m0[14u].x + _390;
    float _4070 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _628 = fma(_363, _212, fma(_620, _219, _619 * _205));
    float _631 = fma(_363, _213, fma(_620, _220, _619 * _206));
    float _634 = fma(_363, _214, fma(_620, _221, _619 * _207));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    float _639 = _638 * _628;
    float _640 = _638 * _631;
    float _641 = _638 * _634;
    float _4081 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4092 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _643 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _4114 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _4125 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _651 = _442 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (_508 / _661);
    float _671 = cbSceneParam._m0[71u].y - (_512 / _661);
    float _672 = cbSceneParam._m0[71u].z - (_516 / _661);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    vec4 _684 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _686 = _684.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _848 = sqrt(((_670 * _670) + (_671 * _671)) + (_672 * _672));
        float _854 = (cbMatDynParam._m0[5u].x * _848) + cbMatDynParam._m0[5u].y;
        float _4136 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _859 = (cbMatDynParam._m0[5u].z * _848) + cbMatDynParam._m0[5u].w;
        float _4147 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) - _855)) + _855) < ((_686 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _718 = fma(_641, cbSceneParam._m0[5u].z, fma(_640, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _639));
    float _721 = fma(_641, cbSceneParam._m0[6u].z, fma(_640, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _639));
    float _724 = fma(_641, cbSceneParam._m0[7u].z, fma(_640, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _639));
    uint _737 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = _737 + 9u;
    uint _739 = _738 + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_739].z;
    float _4158 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _762 = _759.x * TEXCOORD_3.w;
    float _763 = dot(vec3(_639, _640, _641), vec3(_677, _678, _679));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _639) - _677;
    float _771 = (_766 * _640) - _678;
    float _772 = (_766 * _641) - _679;
    float _776 = abs(dot(vec3(_677, _678, _679), vec3(_639, _640, _641)));
    float _4191 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _785 = 10.0 / (_651 + 10.0);
    float _786 = sqrt(_643);
    float _797 = exp2((_786 * 5.0) * log2(1.0 - (_777 * 0.999000012874603271484375))) / (4.0 - (_786 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _897 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _901 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _926 = _829 + _639;
        float _927 = _833 + _640;
        float _928 = _837 + _641;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _893;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _897;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _901;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_639, _640, _641), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _4239 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_639, _640, _641), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _4272 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_639, _640, _641), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4305 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1216 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1220 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1243 = _829 + _639;
        float _1244 = _833 + _640;
        float _1245 = _837 + _641;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_639, _640, _641), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4368 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_639, _640, _641), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4401 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_639, _640, _641), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4434 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = _1169;
        _1491 = _1169;
        _1492 = _1169;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1182)) + _1182;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _770 * 0.5;
    float _1550 = _771 * 0.5;
    float _1551 = _772 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1679 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1682 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1710 = frontier_phi_17_15_ladder;
        }
        float _1935;
        if (_1679 > 0.0)
        {
            _1935 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1935 = frontier_phi_26_22_ladder;
        }
        float _2230;
        if (_1682 > 0.0)
        {
            _2230 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2230 = frontier_phi_38_33_ladder;
        }
        float _2232 = isnan(_1935) ? _1710 : (isnan(_1710) ? _1935 : min(_1710, _1935));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1676) + _1665;
        float _2238 = (_2233 * _1679) + _1669;
        float _2239 = (_2233 * _1682) + _1673;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_16_38_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_16_38_ladder_2;
        _1700 = frontier_phi_16_38_ladder_1;
        _1702 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1778 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1781 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1940;
        if (_1775 > 0.0)
        {
            _1940 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1940 = frontier_phi_28_24_ladder;
        }
        float _2257;
        if (_1778 > 0.0)
        {
            _2257 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2257 = frontier_phi_40_35_ladder;
        }
        float _2584;
        if (_1781 > 0.0)
        {
            _2584 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2584 = frontier_phi_50_47_ladder;
        }
        float _2586 = isnan(_2257) ? _1940 : (isnan(_1940) ? _2257 : min(_1940, _2257));
        float _2587 = isnan(_2584) ? _2586 : (isnan(_2586) ? _2584 : min(_2586, _2584));
        float _2591 = (_2587 * _1775) + _1764;
        float _2592 = (_2587 * _1778) + _1768;
        float _2593 = (_2587 * _1781) + _1772;
        float _2594 = _2587 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2594;
        float _2597 = _2594 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2593 > _2597) || ((_2593 < _2595) || ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 < _2595) || (_2591 > _2597))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2593, cbModelParam._m0[17u].z, fma(_2592, cbModelParam._m0[17u].y, _2591 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2593, cbModelParam._m0[18u].z, fma(_2592, cbModelParam._m0[18u].y, _2591 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2593, cbModelParam._m0[19u].z, fma(_2592, cbModelParam._m0[19u].y, _2591 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_25_50_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_25_50_ladder_2;
        _1802 = frontier_phi_25_50_ladder_1;
        _1804 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1707);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1816 = ((((1.0 - _797) * ((_786 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _786)) * _762;
    float _1817 = _1816 * ((cbModelParam._m0[1u].w * (_1800 - _1698)) + _1698);
    float _1818 = _1816 * ((cbModelParam._m0[1u].w * (_1802 - _1700)) + _1700);
    float _1819 = _1816 * ((cbModelParam._m0[1u].w * (_1804 - _1702)) + _1702);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    float _1839 = _697 / cbSceneParam._m0[86u].x;
    float _1847 = (cbSceneParam._m0[88u].y * (1.0 - _643)) + cbSceneParam._m0[88u].z;
    float _4560 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 5.0;
    float _1854 = (_785 * cbMtdParam._m0[13u].x) * dot(vec3(_639, _640, _641), vec3(1.0, 0.0, 0.0));
    vec4 _1864 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1854 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1854 + _1839) * cbSceneParam._m0[86u].x, _698), _1849).w) + _1839) * cbSceneParam._m0[86u].x, _698), _1849);
    float _1880 = 1.0 - _1864.w;
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1927 = _1914 / _1926;
    float _1928 = _1918 / _1926;
    float _1929 = _1922 / _1926;
    float _2076;
    float _2077;
    float _2078;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1956 = ((uint(_1929 > cbSceneParam._m0[59u].y) + uint(_1929 > cbSceneParam._m0[59u].x)) + uint(_1929 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1957 = _1956 + 43u;
        uint _1965 = _1956 + 44u;
        uint _1973 = _1956 + 45u;
        uint _1981 = _1956 + 46u;
        float _1992 = fma(_1926, cbSceneParam._m0[_1957].w, fma(_1922, cbSceneParam._m0[_1957].z, fma(_1918, cbSceneParam._m0[_1957].y, _1914 * cbSceneParam._m0[_1957].x)));
        float _1996 = fma(_1926, cbSceneParam._m0[_1965].w, fma(_1922, cbSceneParam._m0[_1965].z, fma(_1918, cbSceneParam._m0[_1965].y, _1914 * cbSceneParam._m0[_1965].x)));
        float _2004 = fma(_1926, cbSceneParam._m0[_1981].w, fma(_1922, cbSceneParam._m0[_1981].z, fma(_1918, cbSceneParam._m0[_1981].y, _1914 * cbSceneParam._m0[_1981].x)));
        float _2009 = cbSceneParam._m0[33u].z * _2004;
        float _2011 = cbSceneParam._m0[33u].w * _2004;
        float _2014 = fma(_1926, cbSceneParam._m0[_1973].w, fma(_1922, cbSceneParam._m0[_1973].z, fma(_1918, cbSceneParam._m0[_1973].y, _1914 * cbSceneParam._m0[_1973].x))) / _2004;
        float _2062 = (cbSceneParam._m0[33u].x - sqrt(((_1928 * _1928) + (_1927 * _1927)) + (_1929 * _1929))) * cbSceneParam._m0[33u].y;
        float _4571 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2069 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 + _1992) / _2004, (_2011 + _1996) / _2004), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 + _1992) / _2004, (_1996 - _2009) / _2004), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 - _2009) / _2004, (_1996 - _2011) / _2004), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 - _2011) / _2004, (_2009 + _1996) / _2004), _2014), 0.0)).x), vec4(0.25)));
        _2076 = 1.0 - (_2069 * cbSceneParam._m0[34u].x);
        _2077 = 1.0 - (_2069 * cbSceneParam._m0[34u].y);
        _2078 = 1.0 - (_2069 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2076 = 1.0;
        _2077 = 1.0;
        _2078 = 1.0;
    }
    float _2142;
    float _2144;
    float _2146;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2130 = fma(_1926, cbSceneParam._m0[63u].w, fma(_1922, cbSceneParam._m0[63u].z, fma(_1918, cbSceneParam._m0[63u].y, _1914 * cbSceneParam._m0[63u].x)));
        float _2131 = fma(_1926, cbSceneParam._m0[60u].w, fma(_1922, cbSceneParam._m0[60u].z, fma(_1918, cbSceneParam._m0[60u].y, _1914 * cbSceneParam._m0[60u].x))) / _2130;
        float _2132 = fma(_1926, cbSceneParam._m0[61u].w, fma(_1922, cbSceneParam._m0[61u].z, fma(_1918, cbSceneParam._m0[61u].y, _1914 * cbSceneParam._m0[61u].x))) / _2130;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2131 >= cbSceneParam._m0[64u].x) && (_2132 >= cbSceneParam._m0[64u].y)) && (_2131 <= cbSceneParam._m0[64u].z)) && (_2132 <= cbSceneParam._m0[64u].w))
        {
            float _2270 = fma(_1926, cbSceneParam._m0[62u].w, fma(_1922, cbSceneParam._m0[62u].z, fma(_1918, cbSceneParam._m0[62u].y, _1914 * cbSceneParam._m0[62u].x))) / _2130;
            float _2274 = isnan(cbSceneParam._m0[41u].w) ? _2270 : (isnan(_2270) ? cbSceneParam._m0[41u].w : max(_2270, cbSceneParam._m0[41u].w));
            float _2317 = (cbSceneParam._m0[33u].x - sqrt(((_1928 * _1928) + (_1927 * _1927)) + (_1929 * _1929))) * cbSceneParam._m0[33u].y;
            float _4587 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
            float _2324 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2131, cbSceneParam._m0[33u].w + _2132), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2131, _2132 - cbSceneParam._m0[33u].z), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2131 - cbSceneParam._m0[33u].z, _2132 - cbSceneParam._m0[33u].w), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2131 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2132), _2274), 0.0)).x), vec4(0.25)));
            float _2328 = 1.0 - (_2324 * cbSceneParam._m0[34u].x);
            float _2329 = 1.0 - (_2324 * cbSceneParam._m0[34u].y);
            float _2330 = 1.0 - (_2324 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
            frontier_phi_37_36_ladder_1 = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
            frontier_phi_37_36_ladder_2 = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
        }
        else
        {
            frontier_phi_37_36_ladder = _2078;
            frontier_phi_37_36_ladder_1 = _2077;
            frontier_phi_37_36_ladder_2 = _2076;
        }
        _2142 = frontier_phi_37_36_ladder_2;
        _2144 = frontier_phi_37_36_ladder_1;
        _2146 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2142 = _2076;
        _2144 = _2077;
        _2146 = _2078;
    }
    uvec4 _2151 = floatBitsToUint(cbInstanceData._m0[_737 + 5u]);
    uint _2153 = _2151.x * 14u;
    uint _2154 = _2153 + 13u;
    float _2161 = _762 + (-1.0);
    float _2166 = (cbLight._m0[_2154].x * _2161) + 1.0;
    float _2167 = (cbLight._m0[_2154].y * _2161) + 1.0;
    float _2168 = (cbLight._m0[_2154].z * _2161) + 1.0;
    float _2169 = (cbLight._m0[_2154].w * _2161) + 1.0;
    uint _2170 = _2153 + 5u;
    float _2176 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2180 = _2153 + 4u;
    float _2189 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2193 = _2153 | 1u;
    float _2204 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_639, _640, _641));
    float _2207 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_639, _640, _641));
    float _4623 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _4634 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2212 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * 0.3183098733425140380859375;
    float _2214 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * 0.3183098733425140380859375;
    float _2221 = ((cbLight._m0[_2170].x * _2176) * _2214) + (((cbLight._m0[_2180].x * _2142) * _2189) * _2212);
    float _2222 = ((_2176 * cbLight._m0[_2170].y) * _2214) + (((cbLight._m0[_2180].y * _2144) * _2189) * _2212);
    float _2223 = ((_2176 * cbLight._m0[_2170].z) * _2214) + (((cbLight._m0[_2180].z * _2146) * _2189) * _2212);
    uvec4 _2227 = floatBitsToUint(cbLight._m0[_2153 + 12u]);
    bool _2229 = _2227.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2229)
    {
        _2331 = _2221;
        _2333 = _2222;
        _2335 = _2223;
    }
    else
    {
        uint _2339 = _2153 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2153 + 2u].xyz), vec3(_639, _640, _641)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4645 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2358 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2221;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2222;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2223;
    }
    bool _2338 = _2227.y == 0u;
    float _2393;
    float _2395;
    float _2397;
    if (_2338)
    {
        _2393 = _2331;
        _2395 = _2333;
        _2397 = _2335;
    }
    else
    {
        uint _2555 = _2153 + 7u;
        float _2571 = (dot(vec3(cbLight._m0[_2153 + 3u].xyz), vec3(_639, _640, _641)) * 0.5) + 0.5;
        float _2572 = _2571 * _2571;
        float _4661 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2573 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2574 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2393 = (((cbLight._m0[_2555].x * 0.3183098733425140380859375) * _2573) * _2574) + _2331;
        _2395 = (((cbLight._m0[_2555].y * 0.3183098733425140380859375) * _2573) * _2574) + _2333;
        _2397 = (((cbLight._m0[_2555].z * 0.3183098733425140380859375) * _2573) * _2574) + _2335;
    }
    uint _2400 = _2153 + 8u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _643) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2153].x + _677;
    float _2416 = cbLight._m0[_2153].y + _678;
    float _2417 = cbLight._m0[_2153].z + _679;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2153].xyz));
    float _4677 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _4688 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _2429 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2430 = dot(vec3(_639, _640, _641), vec3(_2422, _2423, _2424));
    float _4699 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2434 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2422, _2423, _2424));
    float _4710 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2438 = _2414 * _2414;
    float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
    float _2453 = (exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2454 = 1.0 - _2414;
    float _2465 = (0.5 / (((_2429 * ((_2428 * _2454) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2454) + _2414) * _2428))) * _2428;
    float _4721 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
    uint _2481 = _2153 + 9u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _643) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2193].x + _677;
    float _2495 = cbLight._m0[_2193].y + _678;
    float _2496 = cbLight._m0[_2193].z + _679;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2193].xyz));
    float _4732 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2508 = dot(vec3(_639, _640, _641), vec3(_2501, _2502, _2503));
    float _4743 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2512 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2501, _2502, _2503));
    float _4754 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2516 = _2493 * _2493;
    float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
    float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2530 = 1.0 - _2493;
    float _2540 = (0.5 / (((_2429 * ((_2507 * _2530) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2530) + _2493) * _2507))) * _2507;
    float _4765 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2542 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
    float _2552 = (((_2529 * cbLight._m0[_2481].x) * _2542) * _2176) + ((((cbLight._m0[_2400].x * _2142) * _2453) * _2467) * _2189);
    float _2553 = (((_2529 * cbLight._m0[_2481].y) * _2542) * _2176) + ((((cbLight._m0[_2400].y * _2144) * _2453) * _2467) * _2189);
    float _2554 = (((_2529 * cbLight._m0[_2481].z) * _2542) * _2176) + ((((cbLight._m0[_2400].z * _2146) * _2453) * _2467) * _2189);
    float _2610;
    float _2612;
    float _2614;
    if (_2229)
    {
        _2610 = _2552;
        _2612 = _2553;
        _2614 = _2554;
    }
    else
    {
        uint _2616 = _2153 + 2u;
        uint _2620 = _2153 + 10u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _643) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _677;
        float _2637 = cbLight._m0[_2616].y + _678;
        float _2638 = cbLight._m0[_2616].z + _679;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2616].xyz));
        float _4776 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2650 = dot(vec3(_639, _640, _641), vec3(_2643, _2644, _2645));
        float _4787 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4798 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2671 = (exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2672 = 1.0 - _2635;
        float _2682 = (0.5 / (((_2429 * ((_2649 * _2672) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2672) + _2635) * _2649))) * _2649;
        float _4809 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2610 = (((_2671 * cbLight._m0[_2620].x) * _2684) * _2685) + _2552;
        _2612 = (((_2671 * cbLight._m0[_2620].y) * _2684) * _2685) + _2553;
        _2614 = (((_2671 * cbLight._m0[_2620].z) * _2684) * _2685) + _2554;
    }
    float _2716;
    float _2718;
    float _2720;
    if (_2338)
    {
        _2716 = _2610;
        _2718 = _2612;
        _2720 = _2614;
    }
    else
    {
        uint _2727 = _2153 + 3u;
        uint _2731 = _2153 + 11u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _643) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _677;
        float _2748 = cbLight._m0[_2727].y + _678;
        float _2749 = cbLight._m0[_2727].z + _679;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2727].xyz));
        float _4825 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2761 = dot(vec3(_639, _640, _641), vec3(_2754, _2755, _2756));
        float _4836 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4847 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2782 = (exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2783 = 1.0 - _2746;
        float _2793 = (0.5 / (((_2429 * ((_2760 * _2783) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2783) + _2746) * _2760))) * _2760;
        float _4858 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2716 = (((_2782 * cbLight._m0[_2731].x) * _2795) * _2796) + _2610;
        _2718 = (((_2782 * cbLight._m0[_2731].y) * _2795) * _2796) + _2612;
        _2720 = (((_2782 * cbLight._m0[_2731].z) * _2795) * _2796) + _2614;
    }
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_2151.y == 0u)
    {
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.x;
        uint _2829 = uint((float(_2817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2818))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2818)));
        float _2839 = (log2(_1929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        uint _2843 = uint(isnan(14.0) ? _2840 : (isnan(_2840) ? 14.0 : min(_2840, 14.0)));
        uvec4 _2848 = texelFetch(g_lightClusterGridBuffer, int(((_2843 << 2u) + (_2829 << 6u)) >> 2u));
        uint _2849 = _2848.x;
        uint _2850 = _2817.z;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((((1u << ((_2850 >> 4u) & 15u)) + 4294967295u) & _2849) == 0u) || ((_2850 & 240u) == 0u))
        {
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
        }
        else
        {
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            uint _3189 = 0u;
            uint _3198;
            bool _3199;
            for (;;)
            {
                _3198 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                _3199 = _3198 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3199)
                {
                    frontier_phi_71_pred = _3188;
                    frontier_phi_71_pred_1 = _3187;
                    frontier_phi_71_pred_2 = _3186;
                    frontier_phi_71_pred_3 = _3185;
                    frontier_phi_71_pred_4 = _3184;
                    frontier_phi_71_pred_5 = _3183;
                }
                else
                {
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    uint _3334;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3198;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    for (;;)
                    {
                        uint _3338 = uint(findLSB(_3334)) + (_3189 << 5u);
                        uint _3335 = (_3334 + 4294967295u) & _3334;
                        uint _3340 = _3338 * 48u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3360 = (_3338 * 48u) + 4u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 3u)).x));
                        uint _3379 = (_3338 * 48u) + 8u;
                        vec3 _3390 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x));
                        float _3394 = _3354.x - _1927;
                        float _3395 = _3354.y - _1928;
                        float _3396 = _3354.z - _1929;
                        float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                        float _3400 = inversesqrt(_3397);
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3404 = dot(vec3(_718, _721, _724), vec3(_3401, _3402, _3403));
                        float _3409 = 1.0 - (_3397 * _3354.w);
                        float _4884 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3411 = sqrt(_3397) * _3373.w;
                        float _3414 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                        float _3415 = _3414 * _3414;
                        float _3418 = ((1.0 - _3415) * _3404) + _3415;
                        float _3421 = _3411 * _3411;
                        float _3425 = ((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3410) / ((_3421 * 0.699999988079071044921875) + 1.0);
                        float _3429 = (-0.0) - _1927;
                        float _3430 = (-0.0) - _1928;
                        float _3431 = (-0.0) - _1929;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3436 = _3435 * _3429;
                        float _3437 = _3435 * _3430;
                        float _3438 = _3435 * _3431;
                        float _3445 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                        float _3446 = 1.0 - _786;
                        float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                        float _3454 = _3453 * _3453;
                        float _3455 = _3454 * _3454;
                        float _3456 = _3436 + _3401;
                        float _3457 = _3437 + _3402;
                        float _3458 = _3438 + _3403;
                        float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                        float _3466 = dot(vec3(_718, _721, _724), vec3(_3436, _3437, _3438));
                        float _4900 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3470 = dot(vec3(_718, _721, _724), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                        float _4911 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3473 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                        float _3478 = _3414 * _3454;
                        float _3479 = _3478 * _3478;
                        float _3482 = ((1.0 - _3479) * _3404) + _3479;
                        float _4922 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3483 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3484 = 1.0 - _3454;
                        float _3494 = (0.5 / (((_3483 * ((_3469 * _3484) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3483 * _3484) + _3454) * _3469))) * _3483;
                        float _4933 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3505 = (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) / ((_3477 * _3477) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125))) * _3410;
                        _3258 = (_3425 * _3373.x) + _3331;
                        _3259 = (_3425 * _3373.y) + _3332;
                        _3260 = (_3425 * _3373.z) + _3333;
                        _3255 = (_3505 * _3390.x) + _3328;
                        _3256 = (_3505 * _3390.y) + _3329;
                        _3257 = (_3505 * _3390.z) + _3330;
                        if (_3335 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3335;
                        }
                    }
                    frontier_phi_71_pred = _3260;
                    frontier_phi_71_pred_1 = _3259;
                    frontier_phi_71_pred_2 = _3258;
                    frontier_phi_71_pred_3 = _3257;
                    frontier_phi_71_pred_4 = _3256;
                    frontier_phi_71_pred_5 = _3255;
                }
                _3010 = frontier_phi_71_pred;
                _3008 = frontier_phi_71_pred_1;
                _3006 = frontier_phi_71_pred_2;
                _3004 = frontier_phi_71_pred_3;
                _3002 = frontier_phi_71_pred_4;
                _3000 = frontier_phi_71_pred_5;
                uint _3190 = _3189 + 1u;
                if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3183 = _3000;
                    _3184 = _3002;
                    _3185 = _3004;
                    _3186 = _3006;
                    _3187 = _3008;
                    _3188 = _3010;
                    _3189 = _3190;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
        }
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.z;
        uint _3016 = (_3014 >> 8u) & 15u;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        if (((4294967295u << _3016) & _2849) == 0u)
        {
            _3151 = _2999;
            _3153 = _3001;
            _3155 = _3003;
            _3157 = _3005;
            _3159 = _3007;
            _3161 = _3009;
        }
        else
        {
            float _3176 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
            float _3177 = _3176 * _1927;
            float _3178 = _3176 * _1928;
            float _3179 = _3176 * _1929;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3016 < ((_3014 >> 12u) & 15u))
            {
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3311 = _2999;
                float _3312 = _3001;
                float _3313 = _3003;
                float _3314 = _3005;
                float _3315 = _3007;
                float _3316 = _3009;
                uint _3317 = _3016;
                uint _3326;
                bool _3327;
                for (;;)
                {
                    _3326 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3317 << 2u)) >> 2u)).x;
                    _3327 = _3326 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3327)
                    {
                        frontier_phi_82_pred = _3316;
                        frontier_phi_82_pred_1 = _3315;
                        frontier_phi_82_pred_2 = _3314;
                        frontier_phi_82_pred_3 = _3313;
                        frontier_phi_82_pred_4 = _3312;
                        frontier_phi_82_pred_5 = _3311;
                    }
                    else
                    {
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3532 = _3311;
                        float _3533 = _3312;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        float _3537 = _3316;
                        uint _3538 = _3326;
                        uint _3539;
                        vec4 _3564;
                        float _3565;
                        vec4 _3580;
                        vec3 _3592;
                        vec4 _3607;
                        vec4 _3623;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3549 = ((_3317 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3538));
                            _3539 = (_3538 + 4294967295u) & _3538;
                            uint _3551 = _3549 * 40u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3565 = _3564.w;
                            uint _3567 = (_3549 * 40u) + 4u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3549 * 40u) + 8u;
                            _3592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x));
                            uint _3594 = (_3549 * 40u) + 16u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3610 = (_3549 * 40u) + 20u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3626 = (_3549 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3549 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_1929, _3658.z, fma(_1928, _3658.y, _3658.x * _1927)) + _3658.w;
                            _3671 = !((fma(_1929, _3639.z, fma(_1928, _3639.y, _3639.x * _1927)) + _3639.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3564.x - _1927;
                                float _3699 = _3564.y - _1928;
                                float _3700 = _3564.z - _1929;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3565 * _3565));
                                float _4944 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3716 = sqrt(_3701) * _3580.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_718, _721, _724))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_1929, _3607.z, fma(_1928, _3607.y, _3607.x * _1927)) + _3607.w) / _3670;
                                float _3730 = (fma(_1929, _3623.z, fma(_1928, _3623.y, _3623.x * _1927)) + _3623.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4960 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _786;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3177;
                                float _3760 = _3706 - _3178;
                                float _3761 = _3707 - _3179;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_718, _721, _724), vec3((-0.0) - _3177, (-0.0) - _3178, (-0.0) - _3179));
                                float _4971 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3773 = dot(vec3(_718, _721, _724), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4982 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_718, _721, _724), vec3(_3705, _3706, _3707))) + _3782;
                                float _4993 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _5004 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3736 * _3580.z;
                                frontier_phi_88_pred_1 = _3736 * _3580.y;
                                frontier_phi_88_pred_2 = _3736 * _3580.x;
                                frontier_phi_88_pred_3 = _3810 * _3592.z;
                                frontier_phi_88_pred_4 = _3810 * _3592.y;
                                frontier_phi_88_pred_5 = _3810 * _3592.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_88_pred;
                            _3818 = frontier_phi_88_pred_1;
                            _3817 = frontier_phi_88_pred_2;
                            _3816 = frontier_phi_88_pred_3;
                            _3815 = frontier_phi_88_pred_4;
                            _3814 = frontier_phi_88_pred_5;
                            _3522 = _3817 + _3535;
                            _3523 = _3818 + _3536;
                            _3524 = _3819 + _3537;
                            _3519 = _3814 + _3532;
                            _3520 = _3815 + _3533;
                            _3521 = _3816 + _3534;
                            if (_3539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3539;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3524;
                        frontier_phi_82_pred_1 = _3523;
                        frontier_phi_82_pred_2 = _3522;
                        frontier_phi_82_pred_3 = _3521;
                        frontier_phi_82_pred_4 = _3520;
                        frontier_phi_82_pred_5 = _3519;
                    }
                    _3162 = frontier_phi_82_pred;
                    _3160 = frontier_phi_82_pred_1;
                    _3158 = frontier_phi_82_pred_2;
                    _3156 = frontier_phi_82_pred_3;
                    _3154 = frontier_phi_82_pred_4;
                    _3152 = frontier_phi_82_pred_5;
                    uint _3318 = _3317 + 1u;
                    if (_3318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3311 = _3152;
                        _3312 = _3154;
                        _3313 = _3156;
                        _3314 = _3158;
                        _3315 = _3160;
                        _3316 = _3162;
                        _3317 = _3318;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3158;
                frontier_phi_63_64_ladder_1 = _3162;
                frontier_phi_63_64_ladder_2 = _3160;
                frontier_phi_63_64_ladder_3 = _3156;
                frontier_phi_63_64_ladder_4 = _3154;
                frontier_phi_63_64_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_63_64_ladder = _3005;
                frontier_phi_63_64_ladder_1 = _3009;
                frontier_phi_63_64_ladder_2 = _3007;
                frontier_phi_63_64_ladder_3 = _3003;
                frontier_phi_63_64_ladder_4 = _3001;
                frontier_phi_63_64_ladder_5 = _2999;
            }
            _3151 = frontier_phi_63_64_ladder_5;
            _3153 = frontier_phi_63_64_ladder_4;
            _3155 = frontier_phi_63_64_ladder_3;
            _3157 = frontier_phi_63_64_ladder;
            _3159 = frontier_phi_63_64_ladder_2;
            _3161 = frontier_phi_63_64_ladder_1;
        }
        float _3166 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2862 = (_3166 * _3157) + _2393;
        _2864 = (_3166 * _3159) + _2395;
        _2866 = (_3166 * _3161) + _2397;
        _2868 = ((_3151 * 0.039999999105930328369140625) * _3166) + _2716;
        _2870 = ((_3153 * 0.039999999105930328369140625) * _3166) + _2718;
        _2872 = ((_3155 * 0.039999999105930328369140625) * _3166) + _2720;
    }
    else
    {
        _2862 = _2393;
        _2864 = _2395;
        _2866 = _2397;
        _2868 = _2716;
        _2870 = _2718;
        _2872 = _2720;
    }
    float _2886 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2887 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2888 = cbSceneParam._m0[86u].x * (_1839 + ((_785 * cbMtdParam._m0[13u].w) * dot(vec3(_639, _640, _641), vec3(_205, _206, _207))));
    float _2889 = isnan(_2886) ? _2888 : (isnan(_2888) ? _2886 : min(_2888, _2886));
    float _2890 = isnan(_2887) ? _698 : (isnan(_698) ? _2887 : min(_698, _2887));
    vec4 _2892 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2889, _2890), 0.0);
    float _2894 = _2892.x;
    bool _2914 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2894)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2894))) > _651;
    vec4 _2918 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2914 ? _2889 : _697, _2914 ? _2890 : _698));
    float _5030 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _5041 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _5052 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2942 = 0.959999978542327880859375 - (exp2(log2(1.0 - _777) * 5.0) * 0.959999978542327880859375);
    float _2944 = (_2918.x * _2942) * cbSceneParam._m0[72u].w;
    float _2946 = (_2918.y * _2942) * cbSceneParam._m0[72u].w;
    float _2948 = (_2918.z * _2942) * cbSceneParam._m0[72u].w;
    float _2956 = (_2944 + (((((_1816 * _1864.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1607) * _1880)) + _2868) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2862 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _762))) - _2944) * _624);
    float _2958 = (_2946 + (((((_1816 * _1864.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1607) * _1880)) + _2870) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2864 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _762))) - _2946) * _624);
    float _2960 = (_2948 + (((((_1816 * _1864.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1607) * _1880)) + _2872) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_2866 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _762))) - _2948) * _624);
    float _2965 = cbInstanceData._m0[_737 + 6u].w * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)));
    float _2970 = _697 / cbSceneParam._m0[86u].x;
    float _2971 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2985 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, (log2((isnan(cbSceneParam._m0[77u].w) ? _651 : (isnan(_651) ? cbSceneParam._m0[77u].w : min(_651, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2987 = _2985.x;
    float _2988 = _2985.y;
    float _2989 = _2985.z;
    float _2990 = _2985.w;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_651 > cbSceneParam._m0[78u].w)
    {
        float _3024 = isnan(_651) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _651 : min(cbSceneParam._m0[80u].w, _651));
        float _3025 = _3024 / _651;
        float _3036 = _3025 * _670;
        float _3037 = _671 * _3025;
        float _3038 = (-0.0) - _3037;
        float _3039 = _3025 * _672;
        float _3041 = (cbSceneParam._m0[77u].w * _3038) / _3024;
        float _3042 = _3041 + cbSceneParam._m0[79u].w;
        float _3043 = cbSceneParam._m0[79u].w - _3037;
        float _3049 = sqrt(((_3036 * _3036) + (_3037 * _3037)) + (_3039 * _3039));
        float _3052 = (1.0 - (cbSceneParam._m0[77u].w / _3024)) * _3049;
        float _3057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3268;
        if (abs((_3038 - _3041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3268 = ((((_3042 > 0.0) ? exp2(_3057 * _3042) : (2.0 - exp2(_3059 * _3042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3052;
        }
        else
        {
            float _3212 = 1.0 / cbSceneParam._m0[80u].x;
            float _3213 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : max(_3042, _3043));
            float _3214 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : min(_3042, _3043));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            _3268 = ((abs(_3049 / _3038) * cbSceneParam._m0[80u].y) * ((((_3223 - _3224) * 2.0) - ((exp2(_3057 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0)))) - exp2(_3057 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))))) * _3212)) - ((exp2(_3059 * _3223) - exp2(_3059 * _3224)) * _3212))) + (_3052 * cbSceneParam._m0[80u].z);
        }
        vec4 _3270 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, 1.0), 0.0);
        float _3279 = exp2((_3268 * (-1.44269502162933349609375)) * (1.0 - _3270.w));
        float _3280 = log2(_3279);
        float _3296 = log2(_2990);
        _3061 = (exp2(_3296 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].x)) * _3270.x) / cbSceneParam._m0[78u].x)) + _2987;
        _3063 = (exp2(_3296 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].y)) * _3270.y) / cbSceneParam._m0[78u].y)) + _2988;
        _3065 = (exp2(_3296 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].z)) * _3270.z) / cbSceneParam._m0[78u].z)) + _2989;
        _3067 = _3279 * _2990;
    }
    else
    {
        _3061 = _2987;
        _3063 = _2988;
        _3065 = _2989;
        _3067 = _2990;
    }
    bool _3306;
    float _3122;
    vec4 _3125;
    float _3127;
    vec4 _3129;
    float _3137;
    float _3138;
    float _3139;
    float _3140;
    bool _3150;
    for (;;)
    {
        bool _3079 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3080 = log2(_3067);
        float _3087 = exp2(_3080 * cbSceneParam._m0[78u].x) * _2956;
        float _3088 = exp2(_3080 * cbSceneParam._m0[78u].y) * _2958;
        float _3089 = exp2(_3080 * cbSceneParam._m0[78u].z) * _2960;
        vec4 _3097 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_697, _698));
        float _3099 = _3097.x;
        float _3120 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3099)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3099))) - _651) * 3.0;
        float _5103 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
        _3122 = _2965 * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)));
        float _3123 = _686 + (-0.5);
        _3125 = cbMtdParam._m0[1u];
        _3127 = _3125.y * _3123;
        _3129 = cbMatDynParam._m0[0u];
        float _3136 = (roundEven(_3129.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3137 = _3136 * (_3079 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3061)));
        _3138 = _3136 * (_3079 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3063)));
        _3139 = _3136 * (_3079 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3065)));
        _3140 = _3123 * 0.999000012874603271484375;
        _3150 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3150)
        {
            if ((cbInstanceData._m0[_737 + 7u].x + _3140) < 0.5)
            {
                _3306 = true;
                break;
            }
        }
        uint _3247 = _738 + uint(_3129.w);
        if ((cbInstanceData._m0[_3247].w < 1.0) && ((cbInstanceData._m0[_3247].w + _3140) < 0.5))
        {
            _3306 = true;
            break;
        }
        if ((_3127 + _468) < _3125.x)
        {
            _3306 = true;
            break;
        }
        _3306 = false;
        break;
    }
    float _3510;
    if (_3306)
    {
        discard_state = true;
        _3510 = 0.0;
    }
    else
    {
        _3510 = _3122;
    }
    SV_Target.x = _3137;
    SV_Target.y = _3138;
    SV_Target.z = _3139;
    SV_Target.w = _3510;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3122;
    discard_exit();
}


