#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1167;
float _3715;
float _3716;
float _3717;
float _3718;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _294 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _301 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _305 = dot(vec4(_294 * _274, _294 * _275, _294 * _276, 0.0), vec4(_301 * _210, _301 * _211, _301 * _212, 0.0));
    float _3727 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _313 = exp2(log2(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3738 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _321 = (_314 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _322 = (_314 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _323 = (_314 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _345 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_353, _355), vec2(_353, _355));
    float _3749 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    float _364 = fma(_361, _210, fma(_355, _217, _353 * _203));
    float _367 = fma(_361, _211, fma(_355, _218, _353 * _204));
    float _370 = fma(_361, _212, fma(_355, _219, _353 * _205));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _385 = cbMtdParam._m0[13u].z + dot(vec4(_374 * _364, _374 * _367, _374 * _370, 0.0), vec4(cbMtdParam._m0[14u].zw, cbMtdParam._m0[15u].x, 0.0));
    float _3760 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * TEXCOORD_3.x;
    float _3771 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    vec4 _400 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _419 = (((cbMtdParam._m0[9u].x * _400.x) - _321) * _388) + _321;
    float _420 = (((cbMtdParam._m0[9u].y * _400.y) - _322) * _388) + _322;
    float _421 = (((cbMtdParam._m0[9u].z * _400.z) - _323) * _388) + _323;
    vec4 _431 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _433 = _431.x;
    bool _440 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _457 = ((_440 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _433)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _433))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3782 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _459 = 1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)));
    float _3793 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _466 = 1.0 - ((_460 * _460) * (3.0 - (_460 * 2.0)));
    float _475 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].x) * _388) + cbMtdParam._m0[12u].x;
    float _479 = abs(_210);
    float _480 = abs(_211);
    float _481 = abs(_212);
    float _482 = _479 * _479;
    float _483 = _480 * _480;
    float _484 = _481 * _481;
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _517 = _510 * 0.0500000007450580596923828125;
    float _528 = (cbTextureTilingScale._m0[4u].x * (_506 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _531 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_528, (cbTextureTilingScale._m0[4u].y * _517) + cbTextureTilingScale._m0[4u].w));
    float _538 = (cbTextureTilingScale._m0[4u].y * (_514 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _539 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_528, _538));
    vec4 _549 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _517) + cbTextureTilingScale._m0[4u].z, _538));
    vec4 _576 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _595 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _601 = (_595.x * 2.0) + (-1.0);
    float _602 = (_595.y * 2.0) + (-1.0);
    float _3804 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _603 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _607 = (_603 * _603) * (3.0 - (_603 * 2.0));
    float _617 = (((((((_539.x * _483) + (_531.x * _484)) + (_549.x * _482)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _353) + (((_607 * (((_576.x * 2.0) + (-1.0)) - _601)) + _601) * cbMtdParam._m0[12u].y);
    float _618 = (((((((_539.y * _483) + (_531.y * _484)) + (_549.y * _482)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _355) + (((_607 * (((_576.y * 2.0) + (-1.0)) - _602)) + _602) * cbMtdParam._m0[12u].y);
    float _621 = cbMtdParam._m0[14u].x + _388;
    float _3815 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _626 = fma(_361, _210, fma(_618, _217, _617 * _203));
    float _629 = fma(_361, _211, fma(_618, _218, _617 * _204));
    float _632 = fma(_361, _212, fma(_618, _219, _617 * _205));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3826 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3837 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _641 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3859 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3870 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _649 = _440 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _668 = cbSceneParam._m0[71u].x - (_506 / _659);
    float _669 = cbSceneParam._m0[71u].y - (_510 / _659);
    float _670 = cbSceneParam._m0[71u].z - (_514 / _659);
    float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
    float _675 = _668 * _674;
    float _676 = _669 * _674;
    float _677 = _670 * _674;
    vec4 _682 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _684 = _682.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _846 = sqrt(((_668 * _668) + (_669 * _669)) + (_670 * _670));
        float _852 = (cbMatDynParam._m0[5u].x * _846) + cbMatDynParam._m0[5u].y;
        float _3881 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _857 = (cbMatDynParam._m0[5u].z * _846) + cbMatDynParam._m0[5u].w;
        float _3892 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) - _853)) + _853) < ((_684 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _716 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _719 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _722 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _735 = uint(roundEven(NORMAL.w)) * 13u;
    uint _736 = _735 + 9u;
    uint _737 = _736 + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3903 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _760 = _757.x * TEXCOORD_3.w;
    float _761 = dot(vec3(_637, _638, _639), vec3(_675, _676, _677));
    float _764 = _761 * 2.0;
    float _768 = (_764 * _637) - _675;
    float _769 = (_764 * _638) - _676;
    float _770 = (_764 * _639) - _677;
    float _774 = abs(dot(vec3(_675, _676, _677), vec3(_637, _638, _639)));
    float _3936 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _783 = 10.0 / (_649 + 10.0);
    float _784 = sqrt(_641);
    float _795 = exp2((_784 * 5.0) * log2(1.0 - (_775 * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _895 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _899 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _924 = _827 + _637;
        float _925 = _831 + _638;
        float _926 = _835 + _639;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_637, _638, _639), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3984 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_637, _638, _639), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4017 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_637, _638, _639), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4050 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1214 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1218 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1241 = _827 + _637;
        float _1242 = _831 + _638;
        float _1243 = _835 + _639;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_637, _638, _639), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4113 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_637, _638, _639), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4146 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_637, _638, _639), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4179 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = _1167;
        _1489 = _1167;
        _1490 = _1167;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1179)) + _1179;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1180)) + _1180;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _768 * 0.5;
    float _1548 = _769 * 0.5;
    float _1549 = _770 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_770, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768));
        float _1677 = fma(_770, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768));
        float _1680 = fma(_770, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1708 = frontier_phi_17_15_ladder;
        }
        float _1985;
        if (_1677 > 0.0)
        {
            _1985 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1985 = frontier_phi_26_22_ladder;
        }
        float _2231;
        if (_1680 > 0.0)
        {
            _2231 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2231 = frontier_phi_38_33_ladder;
        }
        float _2233 = isnan(_1985) ? _1708 : (isnan(_1708) ? _1985 : min(_1708, _1985));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1674) + _1663;
        float _2239 = (_2234 * _1677) + _1667;
        float _2240 = (_2234 * _1680) + _1671;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_16_38_ladder = _2364.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2364.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2364.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_16_38_ladder_2;
        _1698 = frontier_phi_16_38_ladder_1;
        _1700 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_768, _769, _770), _1616);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_770, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768));
        float _1776 = fma(_770, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768));
        float _1779 = fma(_770, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768));
        float _1990;
        if (_1773 > 0.0)
        {
            _1990 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1990 = frontier_phi_28_24_ladder;
        }
        float _2258;
        if (_1776 > 0.0)
        {
            _2258 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2258 = frontier_phi_40_35_ladder;
        }
        float _2463;
        if (_1779 > 0.0)
        {
            _2463 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2463 = frontier_phi_49_46_ladder;
        }
        float _2465 = isnan(_2258) ? _1990 : (isnan(_1990) ? _2258 : min(_1990, _2258));
        float _2466 = isnan(_2463) ? _2465 : (isnan(_2465) ? _2463 : min(_2465, _2463));
        float _2470 = (_2466 * _1773) + _1762;
        float _2471 = (_2466 * _1776) + _1766;
        float _2472 = (_2466 * _1779) + _1770;
        float _2473 = _2466 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2473;
        float _2476 = _2473 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2472 > _2476) || ((_2472 < _2474) || ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 < _2474) || (_2470 > _2476))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2472, cbModelParam._m0[17u].z, fma(_2471, cbModelParam._m0[17u].y, _2470 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2472, cbModelParam._m0[18u].z, fma(_2471, cbModelParam._m0[18u].y, _2470 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2472, cbModelParam._m0[19u].z, fma(_2471, cbModelParam._m0[19u].y, _2470 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_25_49_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_25_49_ladder_2;
        _1800 = frontier_phi_25_49_ladder_1;
        _1802 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_768, _769, _770), _1705);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1814 = ((((1.0 - _795) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _784)) * _760;
    float _1815 = _1814 * ((cbModelParam._m0[1u].w * (_1798 - _1696)) + _1696);
    float _1816 = _1814 * ((cbModelParam._m0[1u].w * (_1800 - _1698)) + _1698);
    float _1817 = _1814 * ((cbModelParam._m0[1u].w * (_1802 - _1700)) + _1700);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    float _1837 = _695 / cbSceneParam._m0[86u].x;
    float _1845 = (cbSceneParam._m0[88u].y * (1.0 - _641)) + cbSceneParam._m0[88u].z;
    float _4305 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 5.0;
    float _1852 = (_783 * cbMtdParam._m0[13u].x) * dot(vec3(_637, _638, _639), vec3(1.0, 0.0, 0.0));
    vec4 _1862 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1852 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1852 + _1837) * cbSceneParam._m0[86u].x, _696), _1847).w) + _1837) * cbSceneParam._m0[86u].x, _696), _1847);
    float _1878 = 1.0 - _1862.w;
    vec4 _1886 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_695, _696));
    float _1888 = _1886.w;
    float _1900 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1888);
    float _1901 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1888);
    float _1902 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1888);
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_735 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1916 = _760 + (-1.0);
    float _1921 = (cbLight._m0[_1909].x * _1916) + 1.0;
    float _1922 = (cbLight._m0[_1909].y * _1916) + 1.0;
    float _1923 = (cbLight._m0[_1909].z * _1916) + 1.0;
    float _1924 = (cbLight._m0[_1909].w * _1916) + 1.0;
    uint _1925 = _1908 + 5u;
    float _1931 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1935 = _1908 + 4u;
    float _1944 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1948 = _1908 | 1u;
    float _1959 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_637, _638, _639));
    float _1962 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_637, _638, _639));
    float _4326 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _4337 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1967 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _1969 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _1976 = ((cbLight._m0[_1925].x * _1931) * _1969) + (((cbLight._m0[_1935].x * _1900) * _1944) * _1967);
    float _1977 = ((_1931 * cbLight._m0[_1925].y) * _1969) + (((cbLight._m0[_1935].y * _1901) * _1944) * _1967);
    float _1978 = ((_1931 * cbLight._m0[_1925].z) * _1969) + (((cbLight._m0[_1935].z * _1902) * _1944) * _1967);
    uvec4 _1982 = floatBitsToUint(cbLight._m0[_1908 + 12u]);
    bool _1984 = _1982.x == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1984)
    {
        _1995 = _1976;
        _1997 = _1977;
        _1999 = _1978;
    }
    else
    {
        uint _2003 = _1908 + 6u;
        float _2019 = (dot(vec3(cbLight._m0[_1908 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2020 = _2019 * _2019;
        float _4348 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2021 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2022 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _1995 = (((cbLight._m0[_2003].x * 0.3183098733425140380859375) * _2021) * _2022) + _1976;
        _1997 = (((cbLight._m0[_2003].y * 0.3183098733425140380859375) * _2021) * _2022) + _1977;
        _1999 = (((cbLight._m0[_2003].z * 0.3183098733425140380859375) * _2021) * _2022) + _1978;
    }
    bool _2002 = _1982.y == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2002)
    {
        _2040 = _1995;
        _2042 = _1997;
        _2044 = _1999;
    }
    else
    {
        uint _2202 = _1908 + 7u;
        float _2218 = (dot(vec3(cbLight._m0[_1908 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4364 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2221 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2040 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _1995;
        _2042 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _1997;
        _2044 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _1999;
    }
    uint _2047 = _1908 + 8u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _641) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1908].x + _675;
    float _2063 = cbLight._m0[_1908].y + _676;
    float _2064 = cbLight._m0[_1908].z + _677;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1908].xyz));
    float _4380 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _2076 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2077 = dot(vec3(_637, _638, _639), vec3(_2069, _2070, _2071));
    float _4402 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2069, _2070, _2071));
    float _4413 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2061 * _2061;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2100 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2101 = 1.0 - _2061;
    float _2112 = (0.5 / (((_2076 * ((_2075 * _2101) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2101) + _2061) * _2075))) * _2075;
    float _4424 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    uint _2128 = _1908 + 9u;
    float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _641) * 0.949999988079071044921875);
    float _2140 = _2139 * _2139;
    float _2141 = cbLight._m0[_1948].x + _675;
    float _2142 = cbLight._m0[_1948].y + _676;
    float _2143 = cbLight._m0[_1948].z + _677;
    float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
    float _2148 = _2147 * _2141;
    float _2149 = _2147 * _2142;
    float _2150 = _2147 * _2143;
    float _2151 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1948].xyz));
    float _4435 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2155 = dot(vec3(_637, _638, _639), vec3(_2148, _2149, _2150));
    float _4446 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2148, _2149, _2150));
    float _4457 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2140 * _2140;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2177 = 1.0 - _2140;
    float _2187 = (0.5 / (((_2076 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2177) + _2140) * _2154))) * _2154;
    float _4468 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    float _2199 = (((_2176 * cbLight._m0[_2128].x) * _2189) * _1931) + ((((cbLight._m0[_2047].x * _1900) * _2100) * _2114) * _1944);
    float _2200 = (((_2176 * cbLight._m0[_2128].y) * _2189) * _1931) + ((((cbLight._m0[_2047].y * _1901) * _2100) * _2114) * _1944);
    float _2201 = (((_2176 * cbLight._m0[_2128].z) * _2189) * _1931) + ((((cbLight._m0[_2047].z * _1902) * _2100) * _2114) * _1944);
    float _2263;
    float _2265;
    float _2267;
    if (_1984)
    {
        _2263 = _2199;
        _2265 = _2200;
        _2267 = _2201;
    }
    else
    {
        uint _2269 = _1908 + 2u;
        uint _2273 = _1908 + 10u;
        float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _641) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2269].x + _675;
        float _2290 = cbLight._m0[_2269].y + _676;
        float _2291 = cbLight._m0[_2269].z + _677;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2269].xyz));
        float _4479 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2303 = dot(vec3(_637, _638, _639), vec3(_2296, _2297, _2298));
        float _4490 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2296, _2297, _2298));
        float _4501 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2324 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2325 = 1.0 - _2288;
        float _2335 = (0.5 / (((_2076 * ((_2302 * _2325) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2325) + _2288) * _2302))) * _2302;
        float _4512 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2337 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2338 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2263 = (((_2324 * cbLight._m0[_2273].x) * _2337) * _2338) + _2199;
        _2265 = (((_2324 * cbLight._m0[_2273].y) * _2337) * _2338) + _2200;
        _2267 = (((_2324 * cbLight._m0[_2273].z) * _2337) * _2338) + _2201;
    }
    float _2373;
    float _2375;
    float _2377;
    if (_2002)
    {
        _2373 = _2263;
        _2375 = _2265;
        _2377 = _2267;
    }
    else
    {
        uint _2384 = _1908 + 3u;
        uint _2388 = _1908 + 11u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _641) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _675;
        float _2405 = cbLight._m0[_2384].y + _676;
        float _2406 = cbLight._m0[_2384].z + _677;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2384].xyz));
        float _4528 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2418 = dot(vec3(_637, _638, _639), vec3(_2411, _2412, _2413));
        float _4539 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4550 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2440 = 1.0 - _2403;
        float _2450 = (0.5 / (((_2076 * ((_2417 * _2440) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2440) + _2403) * _2417))) * _2417;
        float _4561 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2452 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2453 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2373 = (((_2439 * cbLight._m0[_2388].x) * _2452) * _2453) + _2263;
        _2375 = (((_2439 * cbLight._m0[_2388].y) * _2452) * _2453) + _2265;
        _2377 = (((_2439 * cbLight._m0[_2388].z) * _2452) * _2453) + _2267;
    }
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    if (_1906.y == 0u)
    {
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2528;
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2528;
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2528;
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.x;
        uint _2555 = uint((float(_2543.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2544))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2544)));
        float _2565 = (log2(_2531 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2566 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        uint _2569 = uint(isnan(14.0) ? _2566 : (isnan(_2566) ? 14.0 : min(_2566, 14.0)));
        uvec4 _2574 = texelFetch(g_lightClusterGridBuffer, int(((_2569 << 2u) + (_2555 << 6u)) >> 2u));
        uint _2575 = _2574.x;
        uint _2576 = _2543.z;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((((1u << ((_2576 >> 4u) & 15u)) + 4294967295u) & _2575) == 0u) || ((_2576 & 240u) == 0u))
        {
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
        }
        else
        {
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            uint _2942 = 0u;
            uint _2951;
            bool _2952;
            for (;;)
            {
                _2951 = texelFetch(g_lightClassification, int((((_2569 << 5u) + (_2555 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                _2952 = _2951 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2952)
                {
                    frontier_phi_66_pred = _2936;
                    frontier_phi_66_pred_1 = _2941;
                    frontier_phi_66_pred_2 = _2940;
                    frontier_phi_66_pred_3 = _2939;
                    frontier_phi_66_pred_4 = _2938;
                    frontier_phi_66_pred_5 = _2937;
                }
                else
                {
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    uint _3087;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2951;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3091 = uint(findLSB(_3087)) + (_2942 << 5u);
                        uint _3088 = (_3087 + 4294967295u) & _3087;
                        uint _3093 = _3091 * 48u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3113 = (_3091 * 48u) + 4u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3132 = (_3091 * 48u) + 8u;
                        vec3 _3143 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x));
                        float _3147 = _3107.x - _2529;
                        float _3148 = _3107.y - _2530;
                        float _3149 = _3107.z - _2531;
                        float _3150 = dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149));
                        float _3153 = inversesqrt(_3150);
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3157 = dot(vec3(_716, _719, _722), vec3(_3154, _3155, _3156));
                        float _3162 = 1.0 - (_3150 * _3107.w);
                        float _4587 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3164 = sqrt(_3150) * _3126.w;
                        float _3167 = 1.39999997615814208984375 / (_3164 + 1.39999997615814208984375);
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3157) + _3168;
                        float _3174 = _3164 * _3164;
                        float _3178 = ((isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))) * _3163) / ((_3174 * 0.699999988079071044921875) + 1.0);
                        float _3182 = (-0.0) - _2529;
                        float _3183 = (-0.0) - _2530;
                        float _3184 = (-0.0) - _2531;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3199 = exp2(log2(1.0 / ((_3174 * 3.5) + 5.0)) * 0.25);
                        float _3200 = 1.0 - _784;
                        float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                        float _3208 = _3207 * _3207;
                        float _3209 = _3208 * _3208;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                        float _3220 = dot(vec3(_716, _719, _722), vec3(_3189, _3190, _3191));
                        float _4603 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3224 = dot(vec3(_716, _719, _722), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                        float _4614 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                        float _3232 = _3167 * _3208;
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3157) + _3233;
                        float _4625 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3238 = 1.0 - _3208;
                        float _3248 = (0.5 / (((_3237 * ((_3223 * _3238) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3208) * _3223))) * _3237;
                        float _4636 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3259 = (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3231 * _3231) * ((_3174 * 2.1991131305694580078125) + 3.141590118408203125))) * _3163;
                        _3011 = (_3178 * _3126.x) + _3084;
                        _3012 = (_3178 * _3126.y) + _3085;
                        _3013 = (_3178 * _3126.z) + _3086;
                        _3008 = (_3259 * _3143.x) + _3081;
                        _3009 = (_3259 * _3143.y) + _3082;
                        _3010 = (_3259 * _3143.z) + _3083;
                        if (_3088 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3088;
                        }
                    }
                    frontier_phi_66_pred = _3008;
                    frontier_phi_66_pred_1 = _3013;
                    frontier_phi_66_pred_2 = _3012;
                    frontier_phi_66_pred_3 = _3011;
                    frontier_phi_66_pred_4 = _3010;
                    frontier_phi_66_pred_5 = _3009;
                }
                _2753 = frontier_phi_66_pred;
                _2763 = frontier_phi_66_pred_1;
                _2761 = frontier_phi_66_pred_2;
                _2759 = frontier_phi_66_pred_3;
                _2757 = frontier_phi_66_pred_4;
                _2755 = frontier_phi_66_pred_5;
                uint _2943 = _2942 + 1u;
                if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2936 = _2753;
                    _2937 = _2755;
                    _2938 = _2757;
                    _2939 = _2759;
                    _2940 = _2761;
                    _2941 = _2763;
                    _2942 = _2943;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
        }
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.z;
        uint _2769 = (_2767 >> 8u) & 15u;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((4294967295u << _2769) & _2575) == 0u)
        {
            _2904 = _2752;
            _2906 = _2754;
            _2908 = _2756;
            _2910 = _2758;
            _2912 = _2760;
            _2914 = _2762;
        }
        else
        {
            float _2929 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
            float _2930 = _2929 * _2529;
            float _2931 = _2929 * _2530;
            float _2932 = _2929 * _2531;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2769 < ((_2767 >> 12u) & 15u))
            {
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _3064 = _2752;
                float _3065 = _2754;
                float _3066 = _2756;
                float _3067 = _2758;
                float _3068 = _2760;
                float _3069 = _2762;
                uint _3070 = _2769;
                uint _3079;
                bool _3080;
                for (;;)
                {
                    _3079 = texelFetch(g_lightClassification, int((((_2569 << 5u) + (_2555 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                    _3080 = _3079 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3080)
                    {
                        frontier_phi_77_pred = _3069;
                        frontier_phi_77_pred_1 = _3068;
                        frontier_phi_77_pred_2 = _3067;
                        frontier_phi_77_pred_3 = _3066;
                        frontier_phi_77_pred_4 = _3065;
                        frontier_phi_77_pred_5 = _3064;
                    }
                    else
                    {
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        uint _3292 = _3079;
                        uint _3293;
                        vec4 _3318;
                        float _3319;
                        vec4 _3334;
                        vec3 _3346;
                        vec4 _3361;
                        vec4 _3377;
                        float _3424;
                        bool _3425;
                        for (;;)
                        {
                            uint _3303 = ((_3070 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3292));
                            _3293 = (_3292 + 4294967295u) & _3292;
                            uint _3305 = _3303 * 40u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            _3319 = _3318.w;
                            uint _3321 = (_3303 * 40u) + 4u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3303 * 40u) + 8u;
                            _3346 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x));
                            uint _3348 = (_3303 * 40u) + 16u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3364 = (_3303 * 40u) + 20u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3380 = (_3303 * 40u) + 24u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3399 = (_3303 * 40u) + 28u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3424 = fma(_2531, _3412.z, fma(_2530, _3412.y, _3412.x * _2529)) + _3412.w;
                            _3425 = !((fma(_2531, _3393.z, fma(_2530, _3393.y, _3393.x * _2529)) + _3393.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3425)
                            {
                                float _3452 = _3318.x - _2529;
                                float _3453 = _3318.y - _2530;
                                float _3454 = _3318.z - _2531;
                                float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                                float _3458 = inversesqrt(_3455);
                                float _3459 = _3458 * _3452;
                                float _3460 = _3458 * _3453;
                                float _3461 = _3458 * _3454;
                                float _3465 = 1.0 - (_3455 / (_3319 * _3319));
                                float _4647 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3470 = sqrt(_3455) * _3334.w;
                                float _3472 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                                float _3473 = _3472 * _3472;
                                float _3476 = ((1.0 - _3473) * dot(vec3(_3459, _3460, _3461), vec3(_716, _719, _722))) + _3473;
                                float _3479 = _3470 * _3470;
                                float _3483 = (fma(_2531, _3361.z, fma(_2530, _3361.y, _3361.x * _2529)) + _3361.w) / _3424;
                                float _3484 = (fma(_2531, _3377.z, fma(_2530, _3377.y, _3377.x * _2529)) + _3377.w) / _3424;
                                float _3488 = 1.0 - dot(vec2(_3483, _3484), vec2(_3483, _3484));
                                float _4663 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3490 = _3489 * (((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3466) / ((_3479 * 0.699999988079071044921875) + 1.0));
                                float _3502 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                                float _3503 = 1.0 - _784;
                                float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                                float _3511 = _3510 * _3510;
                                float _3512 = _3511 * _3511;
                                float _3513 = _3459 - _2930;
                                float _3514 = _3460 - _2931;
                                float _3515 = _3461 - _2932;
                                float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                                float _3523 = dot(vec3(_716, _719, _722), vec3((-0.0) - _2930, (-0.0) - _2931, (-0.0) - _2932));
                                float _4674 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3527 = dot(vec3(_716, _719, _722), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                                float _4685 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                                float _3535 = _3472 * _3511;
                                float _3536 = _3535 * _3535;
                                float _3542 = ((1.0 - _3536) * dot(vec3(_716, _719, _722), vec3(_3459, _3460, _3461))) + _3536;
                                float _4696 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3544 = 1.0 - _3511;
                                float _3554 = (0.5 / (((_3543 * ((_3526 * _3544) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3511) * _3526))) * _3543;
                                float _4707 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3564 = (_3489 * _3466) * (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3534 * _3534) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3490 * _3334.y;
                                frontier_phi_83_pred_1 = _3490 * _3334.x;
                                frontier_phi_83_pred_2 = _3564 * _3346.z;
                                frontier_phi_83_pred_3 = _3564 * _3346.y;
                                frontier_phi_83_pred_4 = _3564 * _3346.x;
                                frontier_phi_83_pred_5 = _3490 * _3334.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3572 = frontier_phi_83_pred;
                            _3571 = frontier_phi_83_pred_1;
                            _3570 = frontier_phi_83_pred_2;
                            _3569 = frontier_phi_83_pred_3;
                            _3568 = frontier_phi_83_pred_4;
                            _3573 = frontier_phi_83_pred_5;
                            _3276 = _3571 + _3289;
                            _3277 = _3572 + _3290;
                            _3278 = _3573 + _3291;
                            _3273 = _3568 + _3286;
                            _3274 = _3569 + _3287;
                            _3275 = _3570 + _3288;
                            if (_3293 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3293;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3278;
                        frontier_phi_77_pred_1 = _3277;
                        frontier_phi_77_pred_2 = _3276;
                        frontier_phi_77_pred_3 = _3275;
                        frontier_phi_77_pred_4 = _3274;
                        frontier_phi_77_pred_5 = _3273;
                    }
                    _2915 = frontier_phi_77_pred;
                    _2913 = frontier_phi_77_pred_1;
                    _2911 = frontier_phi_77_pred_2;
                    _2909 = frontier_phi_77_pred_3;
                    _2907 = frontier_phi_77_pred_4;
                    _2905 = frontier_phi_77_pred_5;
                    uint _3071 = _3070 + 1u;
                    if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3064 = _2905;
                        _3065 = _2907;
                        _3066 = _2909;
                        _3067 = _2911;
                        _3068 = _2913;
                        _3069 = _2915;
                        _3070 = _3071;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2909;
                frontier_phi_58_59_ladder_1 = _2915;
                frontier_phi_58_59_ladder_2 = _2913;
                frontier_phi_58_59_ladder_3 = _2911;
                frontier_phi_58_59_ladder_4 = _2907;
                frontier_phi_58_59_ladder_5 = _2905;
            }
            else
            {
                frontier_phi_58_59_ladder = _2756;
                frontier_phi_58_59_ladder_1 = _2762;
                frontier_phi_58_59_ladder_2 = _2760;
                frontier_phi_58_59_ladder_3 = _2758;
                frontier_phi_58_59_ladder_4 = _2754;
                frontier_phi_58_59_ladder_5 = _2752;
            }
            _2904 = frontier_phi_58_59_ladder_5;
            _2906 = frontier_phi_58_59_ladder_4;
            _2908 = frontier_phi_58_59_ladder;
            _2910 = frontier_phi_58_59_ladder_3;
            _2912 = frontier_phi_58_59_ladder_2;
            _2914 = frontier_phi_58_59_ladder_1;
        }
        float _2919 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2588 = (_2919 * _2910) + _2040;
        _2590 = (_2919 * _2912) + _2042;
        _2592 = (_2919 * _2914) + _2044;
        _2594 = ((_2904 * 0.039999999105930328369140625) * _2919) + _2373;
        _2596 = ((_2906 * 0.039999999105930328369140625) * _2919) + _2375;
        _2598 = ((_2908 * 0.039999999105930328369140625) * _2919) + _2377;
    }
    else
    {
        _2588 = _2040;
        _2590 = _2042;
        _2592 = _2044;
        _2594 = _2373;
        _2596 = _2375;
        _2598 = _2377;
    }
    float _2618 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2619 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2620 = cbSceneParam._m0[86u].x * ((_695 / cbSceneParam._m0[86u].x) + ((_783 * cbMtdParam._m0[13u].w) * dot(vec3(_637, _638, _639), vec3(_203, _204, _205))));
    float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
    float _2622 = isnan(_2619) ? _696 : (isnan(_696) ? _2619 : min(_696, _2619));
    vec4 _2624 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2621, _2622), 0.0);
    float _2626 = _2624.x;
    bool _2646 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2626)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2626))) > _649;
    vec4 _2650 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2646 ? _2621 : _695, _2646 ? _2622 : _696));
    float _4733 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4744 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4755 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _2674 = 0.959999978542327880859375 - (exp2(log2(1.0 - _775) * 5.0) * 0.959999978542327880859375);
    float _2676 = (_2650.x * _2674) * cbSceneParam._m0[72u].w;
    float _2678 = (_2650.y * _2674) * cbSceneParam._m0[72u].w;
    float _2680 = (_2650.z * _2674) * cbSceneParam._m0[72u].w;
    float _2688 = (_2676 + (((((_1814 * _1862.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1605) * _1878)) + _2594) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2588 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _760))) - _2676) * _622);
    float _2690 = (_2678 + (((((_1814 * _1862.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1605) * _1878)) + _2596) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2590 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _760))) - _2678) * _622);
    float _2692 = (_2680 + (((((_1814 * _1862.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1605) * _1878)) + _2598) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2592 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _760))) - _2680) * _622);
    float _2697 = cbInstanceData._m0[_735 + 6u].w * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)));
    float _2702 = _695 / cbSceneParam._m0[86u].x;
    float _2703 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2717 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, (log2((isnan(cbSceneParam._m0[77u].w) ? _649 : (isnan(_649) ? cbSceneParam._m0[77u].w : min(_649, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2719 = _2717.x;
    float _2720 = _2717.y;
    float _2721 = _2717.z;
    float _2722 = _2717.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_649 > cbSceneParam._m0[78u].w)
    {
        float _2777 = isnan(_649) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _649 : min(cbSceneParam._m0[80u].w, _649));
        float _2778 = _2777 / _649;
        float _2789 = _2778 * _668;
        float _2790 = _669 * _2778;
        float _2791 = (-0.0) - _2790;
        float _2792 = _2778 * _670;
        float _2794 = (cbSceneParam._m0[77u].w * _2791) / _2777;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2790;
        float _2802 = sqrt(((_2789 * _2789) + (_2790 * _2790)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2777)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2791 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2965 = 1.0 / cbSceneParam._m0[80u].x;
            float _2966 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2967 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            _3021 = ((abs(_2802 / _2791) * cbSceneParam._m0[80u].y) * ((((_2976 - _2977) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))))) * _2965)) - ((exp2(_2812 * _2976) - exp2(_2812 * _2977)) * _2965))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2722);
        _2814 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2719;
        _2816 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2720;
        _2818 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2721;
        _2820 = _3032 * _2722;
    }
    else
    {
        _2814 = _2719;
        _2816 = _2720;
        _2818 = _2721;
        _2820 = _2722;
    }
    bool _3059;
    float _2875;
    vec4 _2878;
    float _2880;
    vec4 _2882;
    float _2890;
    float _2891;
    float _2892;
    float _2893;
    bool _2903;
    for (;;)
    {
        bool _2832 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2833 = log2(_2820);
        float _2840 = exp2(_2833 * cbSceneParam._m0[78u].x) * _2688;
        float _2841 = exp2(_2833 * cbSceneParam._m0[78u].y) * _2690;
        float _2842 = exp2(_2833 * cbSceneParam._m0[78u].z) * _2692;
        vec4 _2850 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_695, _696));
        float _2852 = _2850.x;
        float _2873 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2852)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2852))) - _649) * 3.0;
        float _4806 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        _2875 = _2697 * (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)));
        float _2876 = _684 + (-0.5);
        _2878 = cbMtdParam._m0[1u];
        _2880 = _2878.y * _2876;
        _2882 = cbMatDynParam._m0[0u];
        float _2889 = (roundEven(_2882.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2890 = _2889 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2814)));
        _2891 = _2889 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2816)));
        _2892 = _2889 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2818)));
        _2893 = _2876 * 0.999000012874603271484375;
        _2903 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2903)
        {
            if ((cbInstanceData._m0[_735 + 7u].x + _2893) < 0.5)
            {
                _3059 = true;
                break;
            }
        }
        uint _3000 = _736 + uint(_2882.w);
        if ((cbInstanceData._m0[_3000].w < 1.0) && ((cbInstanceData._m0[_3000].w + _2893) < 0.5))
        {
            _3059 = true;
            break;
        }
        if ((_2880 + _466) < _2878.x)
        {
            _3059 = true;
            break;
        }
        _3059 = false;
        break;
    }
    float _3264;
    if (_3059)
    {
        discard_state = true;
        _3264 = 0.0;
    }
    else
    {
        _3264 = _2875;
    }
    SV_Target.x = _2890;
    SV_Target.y = _2891;
    SV_Target.z = _2892;
    SV_Target.w = _3264;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2875;
    discard_exit();
}


