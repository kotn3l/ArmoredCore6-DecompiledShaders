#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1165;
float _3683;
float _3684;
float _3685;
float _3686;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _292 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _299 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _303 = dot(vec4(_292 * _272, _292 * _273, _292 * _274, 0.0), vec4(_299 * _208, _299 * _209, _299 * _210, 0.0));
    float _3695 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _311 = exp2(log2(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3706 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _319 = (_312 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _320 = (_312 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _321 = (_312 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _343 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_351, _353), vec2(_351, _353));
    float _3717 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _362 = fma(_359, _208, fma(_353, _215, _351 * _201));
    float _365 = fma(_359, _209, fma(_353, _216, _351 * _202));
    float _368 = fma(_359, _210, fma(_353, _217, _351 * _203));
    float _372 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _383 = cbMtdParam._m0[13u].z + dot(vec4(_372 * _362, _372 * _365, _372 * _368, 0.0), vec4(cbMtdParam._m0[14u].zw, cbMtdParam._m0[15u].x, 0.0));
    float _3728 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * TEXCOORD_3.x;
    float _3739 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    vec4 _398 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _417 = (((cbMtdParam._m0[9u].x * _398.x) - _319) * _386) + _319;
    float _418 = (((cbMtdParam._m0[9u].y * _398.y) - _320) * _386) + _320;
    float _419 = (((cbMtdParam._m0[9u].z * _398.z) - _321) * _386) + _321;
    vec4 _429 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _431 = _429.x;
    bool _438 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _455 = ((_438 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _431)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _431))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3750 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _457 = 1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)));
    float _3761 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _464 = 1.0 - ((_458 * _458) * (3.0 - (_458 * 2.0)));
    float _473 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].x) * _386) + cbMtdParam._m0[12u].x;
    float _477 = abs(_208);
    float _478 = abs(_209);
    float _479 = abs(_210);
    float _480 = _477 * _477;
    float _481 = _478 * _478;
    float _482 = _479 * _479;
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _515 = _508 * 0.0500000007450580596923828125;
    float _526 = (cbTextureTilingScale._m0[4u].x * (_504 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _529 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_526, (cbTextureTilingScale._m0[4u].y * _515) + cbTextureTilingScale._m0[4u].w));
    float _536 = (cbTextureTilingScale._m0[4u].y * (_512 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _537 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2(_526, _536));
    vec4 _547 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _515) + cbTextureTilingScale._m0[4u].z, _536));
    vec4 _574 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _593 = texture(sampler2D(M_Ice_Ov_N_ContactFade_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _599 = (_593.x * 2.0) + (-1.0);
    float _600 = (_593.y * 2.0) + (-1.0);
    float _3772 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _601 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _605 = (_601 * _601) * (3.0 - (_601 * 2.0));
    float _615 = (((((((_537.x * _481) + (_529.x * _482)) + (_547.x * _480)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _351) + (((_605 * (((_574.x * 2.0) + (-1.0)) - _599)) + _599) * cbMtdParam._m0[12u].y);
    float _616 = (((((((_537.y * _481) + (_529.y * _482)) + (_547.y * _480)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y) + _353) + (((_605 * (((_574.y * 2.0) + (-1.0)) - _600)) + _600) * cbMtdParam._m0[12u].y);
    float _619 = cbMtdParam._m0[14u].x + _386;
    float _3783 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _624 = fma(_359, _208, fma(_616, _215, _615 * _201));
    float _627 = fma(_359, _209, fma(_616, _216, _615 * _202));
    float _630 = fma(_359, _210, fma(_616, _217, _615 * _203));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3794 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3805 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _639 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3827 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3838 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _647 = _438 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _666 = cbSceneParam._m0[71u].x - (_504 / _657);
    float _667 = cbSceneParam._m0[71u].y - (_508 / _657);
    float _668 = cbSceneParam._m0[71u].z - (_512 / _657);
    float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
    float _673 = _666 * _672;
    float _674 = _667 * _672;
    float _675 = _668 * _672;
    vec4 _680 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _682 = _680.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _844 = sqrt(((_666 * _666) + (_667 * _667)) + (_668 * _668));
        float _850 = (cbMatDynParam._m0[5u].x * _844) + cbMatDynParam._m0[5u].y;
        float _3849 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _855 = (cbMatDynParam._m0[5u].z * _844) + cbMatDynParam._m0[5u].w;
        float _3860 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) - _851)) + _851) < ((_682 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _717 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _720 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _733 = uint(roundEven(NORMAL.w)) * 13u;
    uint _734 = _733 + 9u;
    uint _735 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3871 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _758 = _755.x * TEXCOORD_3.w;
    float _759 = dot(vec3(_635, _636, _637), vec3(_673, _674, _675));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _635) - _673;
    float _767 = (_762 * _636) - _674;
    float _768 = (_762 * _637) - _675;
    float _772 = abs(dot(vec3(_673, _674, _675), vec3(_635, _636, _637)));
    float _3904 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _781 = 10.0 / (_647 + 10.0);
    float _782 = sqrt(_639);
    float _793 = exp2((_782 * 5.0) * log2(1.0 - (_773 * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _889 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _893 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _897 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _922 = _825 + _635;
        float _923 = _829 + _636;
        float _924 = _833 + _637;
        float _934 = fma(_924, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922)) - _889;
        float _935 = fma(_924, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922)) - _893;
        float _936 = fma(_924, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922)) - _897;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_889 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_893 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[34u].z) + ((((((_897 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _992 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_958.x + (-0.5));
        float _994 = _992 * (_958.y + (-0.5));
        float _995 = _992 * (_958.z + (-0.5));
        float _1002 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_965.x + (-0.5));
        float _1004 = _1002 * (_965.y + (-0.5));
        float _1005 = _1002 * (_965.z + (-0.5));
        float _1012 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_972.x + (-0.5));
        float _1014 = _1012 * (_972.y + (-0.5));
        float _1015 = _1012 * (_972.z + (-0.5));
        float _1022 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_979.x + (-0.5));
        float _1024 = _1022 * (_979.y + (-0.5));
        float _1025 = _1022 * (_979.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1046 = (dot(vec3(_635, _636, _637), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1056 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3952 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1058 + 1.0))) + _1063) * _1026;
        float _1073 = _994 * 0.5;
        float _1074 = _1004 * 0.5;
        float _1075 = _1014 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_635, _636, _637), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3985 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1100 + 1.0))) + _1105) * _1027;
        float _1115 = _995 * 0.5;
        float _1116 = _1005 * 0.5;
        float _1117 = _1015 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_635, _636, _637), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _4018 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1142 + 1.0))) + _1147) * _1028;
        _1164 = _995;
        _1166 = _994;
        _1167 = _993;
        _1168 = _1005;
        _1169 = _1004;
        _1170 = _1003;
        _1171 = _1015;
        _1172 = _1014;
        _1173 = _1013;
        _1174 = _1028;
        _1175 = _1027;
        _1176 = _1026;
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1212 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1216 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1239 = _825 + _635;
        float _1240 = _829 + _636;
        float _1241 = _833 + _637;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_635, _636, _637), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4081 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_635, _636, _637), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4114 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_635, _636, _637), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4147 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1165;
        _1478 = _1165;
        _1479 = _1165;
        _1480 = _1165;
        _1481 = _1165;
        _1482 = _1165;
        _1483 = _1165;
        _1484 = _1165;
        _1485 = _1165;
        _1486 = _1165;
        _1487 = _1165;
        _1488 = _1165;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1177)) + _1177;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1178)) + _1178;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1179)) + _1179;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _766 * 0.5;
    float _1546 = _767 * 0.5;
    float _1547 = _768 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1661 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1665 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1669 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1672 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1675 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1678 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1706;
        if (_1672 > 0.0)
        {
            _1706 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1706 = frontier_phi_17_15_ladder;
        }
        float _1962;
        if (_1675 > 0.0)
        {
            _1962 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1962 = frontier_phi_26_22_ladder;
        }
        float _2205;
        if (_1678 > 0.0)
        {
            _2205 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2205 = frontier_phi_38_33_ladder;
        }
        float _2207 = isnan(_1962) ? _1706 : (isnan(_1706) ? _1962 : min(_1706, _1962));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1672) + _1661;
        float _2213 = (_2208 * _1675) + _1665;
        float _2214 = (_2208 * _1678) + _1669;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_16_38_ladder = _2338.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2338.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2338.x * cbModelParam._m0[1u].y;
        }
        _1694 = frontier_phi_16_38_ladder_2;
        _1696 = frontier_phi_16_38_ladder_1;
        _1698 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1614);
        _1694 = _1682.x * cbModelParam._m0[1u].y;
        _1696 = _1682.y * cbModelParam._m0[1u].y;
        _1698 = _1682.z * cbModelParam._m0[1u].y;
    }
    float _1702 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1702 : min(cbModelParam._m0[25u].w, _1702));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1774 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1777 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1967;
        if (_1771 > 0.0)
        {
            _1967 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1967 = frontier_phi_28_24_ladder;
        }
        float _2232;
        if (_1774 > 0.0)
        {
            _2232 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2232 = frontier_phi_40_35_ladder;
        }
        float _2437;
        if (_1777 > 0.0)
        {
            _2437 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2437 = frontier_phi_49_46_ladder;
        }
        float _2439 = isnan(_2232) ? _1967 : (isnan(_1967) ? _2232 : min(_1967, _2232));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1771) + _1760;
        float _2445 = (_2440 * _1774) + _1764;
        float _2446 = (_2440 * _1777) + _1768;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1703);
            frontier_phi_25_49_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_25_49_ladder_2;
        _1798 = frontier_phi_25_49_ladder_1;
        _1800 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1703);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _793) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_793 * _782)) * _758;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1694)) + _1694);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1696)) + _1696);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1698)) + _1698);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    float _1835 = _693 / cbSceneParam._m0[86u].x;
    float _1843 = (cbSceneParam._m0[88u].y * (1.0 - _639)) + cbSceneParam._m0[88u].z;
    float _4273 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 5.0;
    float _1850 = (_781 * cbMtdParam._m0[13u].x) * dot(vec3(_635, _636, _637), vec3(1.0, 0.0, 0.0));
    vec4 _1860 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1850 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1850 + _1835) * cbSceneParam._m0[86u].x, _694), _1845).w) + _1835) * cbSceneParam._m0[86u].x, _694), _1845);
    float _1876 = 1.0 - _1860.w;
    uvec4 _1886 = floatBitsToUint(cbInstanceData._m0[_733 + 5u]);
    uint _1888 = _1886.x * 14u;
    uint _1889 = _1888 + 13u;
    float _1896 = _758 + (-1.0);
    float _1901 = (cbLight._m0[_1889].x * _1896) + 1.0;
    float _1902 = (cbLight._m0[_1889].y * _1896) + 1.0;
    float _1903 = (cbLight._m0[_1889].z * _1896) + 1.0;
    float _1904 = (cbLight._m0[_1889].w * _1896) + 1.0;
    uint _1905 = _1888 + 5u;
    float _1911 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1915 = _1888 + 4u;
    float _1921 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1925 = _1888 | 1u;
    float _1936 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_635, _636, _637));
    float _1939 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_635, _636, _637));
    float _4294 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _4305 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1944 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _1946 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _1953 = ((cbLight._m0[_1905].x * _1911) * _1946) + ((cbLight._m0[_1915].x * _1921) * _1944);
    float _1954 = ((_1911 * cbLight._m0[_1905].y) * _1946) + ((_1921 * cbLight._m0[_1915].y) * _1944);
    float _1955 = ((_1911 * cbLight._m0[_1905].z) * _1946) + ((_1921 * cbLight._m0[_1915].z) * _1944);
    uvec4 _1959 = floatBitsToUint(cbLight._m0[_1888 + 12u]);
    bool _1961 = _1959.x == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1961)
    {
        _1972 = _1953;
        _1974 = _1954;
        _1976 = _1955;
    }
    else
    {
        uint _1980 = _1888 + 6u;
        float _1996 = (dot(vec3(cbLight._m0[_1888 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _4316 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1999 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _1972 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1953;
        _1974 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1954;
        _1976 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1955;
    }
    bool _1979 = _1959.y == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_1979)
    {
        _2017 = _1972;
        _2019 = _1974;
        _2021 = _1976;
    }
    else
    {
        uint _2176 = _1888 + 7u;
        float _2192 = (dot(vec3(cbLight._m0[_1888 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4332 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2195 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2017 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _1972;
        _2019 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _1974;
        _2021 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _1976;
    }
    uint _2024 = _1888 + 8u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _639) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1888].x + _673;
    float _2040 = cbLight._m0[_1888].y + _674;
    float _2041 = cbLight._m0[_1888].z + _675;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1888].xyz));
    float _4348 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2053 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2054 = dot(vec3(_635, _636, _637), vec3(_2046, _2047, _2048));
    float _4370 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2046, _2047, _2048));
    float _4381 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2038 * _2038;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2078 = 1.0 - _2038;
    float _2089 = (0.5 / (((_2053 * ((_2052 * _2078) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2078) + _2038) * _2052))) * _2052;
    float _4392 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2091 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    uint _2102 = _1888 + 9u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _639) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1925].x + _673;
    float _2116 = cbLight._m0[_1925].y + _674;
    float _2117 = cbLight._m0[_1925].z + _675;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1925].xyz));
    float _4403 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2129 = dot(vec3(_635, _636, _637), vec3(_2122, _2123, _2124));
    float _4414 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2122, _2123, _2124));
    float _4425 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2114 * _2114;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2151 = 1.0 - _2114;
    float _2161 = (0.5 / (((_2053 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2151) + _2114) * _2128))) * _2128;
    float _4436 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    float _2173 = (((_2150 * cbLight._m0[_2102].x) * _2163) * _1911) + (((_2077 * cbLight._m0[_2024].x) * _2091) * _1921);
    float _2174 = (((_2150 * cbLight._m0[_2102].y) * _2163) * _1911) + (((_2077 * cbLight._m0[_2024].y) * _2091) * _1921);
    float _2175 = (((_2150 * cbLight._m0[_2102].z) * _2163) * _1911) + (((_2077 * cbLight._m0[_2024].z) * _2091) * _1921);
    float _2237;
    float _2239;
    float _2241;
    if (_1961)
    {
        _2237 = _2173;
        _2239 = _2174;
        _2241 = _2175;
    }
    else
    {
        uint _2243 = _1888 + 2u;
        uint _2247 = _1888 + 10u;
        float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _639) * 0.949999988079071044921875);
        float _2262 = _2261 * _2261;
        float _2263 = cbLight._m0[_2243].x + _673;
        float _2264 = cbLight._m0[_2243].y + _674;
        float _2265 = cbLight._m0[_2243].z + _675;
        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
        float _2270 = _2269 * _2263;
        float _2271 = _2269 * _2264;
        float _2272 = _2269 * _2265;
        float _2273 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2243].xyz));
        float _4447 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2277 = dot(vec3(_635, _636, _637), vec3(_2270, _2271, _2272));
        float _4458 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2281 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2270, _2271, _2272));
        float _4469 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2285 = _2262 * _2262;
        float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
        float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2299 = 1.0 - _2262;
        float _2309 = (0.5 / (((_2053 * ((_2276 * _2299) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2299) + _2262) * _2276))) * _2276;
        float _4480 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2237 = (((_2298 * cbLight._m0[_2247].x) * _2311) * _2312) + _2173;
        _2239 = (((_2298 * cbLight._m0[_2247].y) * _2311) * _2312) + _2174;
        _2241 = (((_2298 * cbLight._m0[_2247].z) * _2311) * _2312) + _2175;
    }
    float _2347;
    float _2349;
    float _2351;
    if (_1979)
    {
        _2347 = _2237;
        _2349 = _2239;
        _2351 = _2241;
    }
    else
    {
        uint _2358 = _1888 + 3u;
        uint _2362 = _1888 + 11u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _639) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _673;
        float _2379 = cbLight._m0[_2358].y + _674;
        float _2380 = cbLight._m0[_2358].z + _675;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2358].xyz));
        float _4496 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2392 = dot(vec3(_635, _636, _637), vec3(_2385, _2386, _2387));
        float _4507 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4518 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2413 = (exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2414 = 1.0 - _2377;
        float _2424 = (0.5 / (((_2053 * ((_2391 * _2414) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2414) + _2377) * _2391))) * _2391;
        float _4529 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2347 = (((_2413 * cbLight._m0[_2362].x) * _2426) * _2427) + _2237;
        _2349 = (((_2413 * cbLight._m0[_2362].y) * _2426) * _2427) + _2239;
        _2351 = (((_2413 * cbLight._m0[_2362].z) * _2426) * _2427) + _2241;
    }
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_1886.y == 0u)
    {
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2502;
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2502;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2502;
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2518)));
        float _2539 = (log2(_2505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
        }
        else
        {
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            uint _2910 = 0u;
            uint _2919;
            bool _2920;
            for (;;)
            {
                _2919 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                _2920 = _2919 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2920)
                {
                    frontier_phi_66_pred = _2904;
                    frontier_phi_66_pred_1 = _2909;
                    frontier_phi_66_pred_2 = _2908;
                    frontier_phi_66_pred_3 = _2907;
                    frontier_phi_66_pred_4 = _2906;
                    frontier_phi_66_pred_5 = _2905;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2919;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2910 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _2503;
                        float _3116 = _3075.y - _2504;
                        float _3117 = _3075.z - _2505;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_714, _717, _720), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4555 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _2503;
                        float _3151 = (-0.0) - _2504;
                        float _3152 = (-0.0) - _2505;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3167 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3168 = 1.0 - _782;
                        float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                        float _3176 = _3175 * _3175;
                        float _3177 = _3176 * _3176;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3188 = dot(vec3(_714, _717, _720), vec3(_3157, _3158, _3159));
                        float _4571 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3192 = dot(vec3(_714, _717, _720), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                        float _4582 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                        float _3200 = _3135 * _3176;
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3125) + _3201;
                        float _4593 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3206 = 1.0 - _3176;
                        float _3216 = (0.5 / (((_3205 * ((_3191 * _3206) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3176) * _3191))) * _3205;
                        float _4604 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3227 = (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3199 * _3199) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2979 = (_3146 * _3094.x) + _3052;
                        _2980 = (_3146 * _3094.y) + _3053;
                        _2981 = (_3146 * _3094.z) + _3054;
                        _2976 = (_3227 * _3111.x) + _3049;
                        _2977 = (_3227 * _3111.y) + _3050;
                        _2978 = (_3227 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_66_pred = _2976;
                    frontier_phi_66_pred_1 = _2981;
                    frontier_phi_66_pred_2 = _2980;
                    frontier_phi_66_pred_3 = _2979;
                    frontier_phi_66_pred_4 = _2978;
                    frontier_phi_66_pred_5 = _2977;
                }
                _2721 = frontier_phi_66_pred;
                _2731 = frontier_phi_66_pred_1;
                _2729 = frontier_phi_66_pred_2;
                _2727 = frontier_phi_66_pred_3;
                _2725 = frontier_phi_66_pred_4;
                _2723 = frontier_phi_66_pred_5;
                uint _2911 = _2910 + 1u;
                if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2904 = _2721;
                    _2905 = _2723;
                    _2906 = _2725;
                    _2907 = _2727;
                    _2908 = _2729;
                    _2909 = _2731;
                    _2910 = _2911;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
        }
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.z;
        uint _2737 = (_2735 >> 8u) & 15u;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((4294967295u << _2737) & _2549) == 0u)
        {
            _2872 = _2720;
            _2874 = _2722;
            _2876 = _2724;
            _2878 = _2726;
            _2880 = _2728;
            _2882 = _2730;
        }
        else
        {
            float _2897 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
            float _2898 = _2897 * _2503;
            float _2899 = _2897 * _2504;
            float _2900 = _2897 * _2505;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2737 < ((_2735 >> 12u) & 15u))
            {
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _3032 = _2720;
                float _3033 = _2722;
                float _3034 = _2724;
                float _3035 = _2726;
                float _3036 = _2728;
                float _3037 = _2730;
                uint _3038 = _2737;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3048)
                    {
                        frontier_phi_77_pred = _3037;
                        frontier_phi_77_pred_1 = _3036;
                        frontier_phi_77_pred_2 = _3035;
                        frontier_phi_77_pred_3 = _3034;
                        frontier_phi_77_pred_4 = _3033;
                        frontier_phi_77_pred_5 = _3032;
                    }
                    else
                    {
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        uint _3260 = _3047;
                        uint _3261;
                        vec4 _3286;
                        float _3287;
                        vec4 _3302;
                        vec3 _3314;
                        vec4 _3329;
                        vec4 _3345;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3271 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3260));
                            _3261 = (_3260 + 4294967295u) & _3260;
                            uint _3273 = _3271 * 40u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3287 = _3286.w;
                            uint _3289 = (_3271 * 40u) + 4u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3271 * 40u) + 8u;
                            _3314 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x));
                            uint _3316 = (_3271 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3271 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3271 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3271 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_2505, _3380.z, fma(_2504, _3380.y, _3380.x * _2503)) + _3380.w;
                            _3393 = !((fma(_2505, _3361.z, fma(_2504, _3361.y, _3361.x * _2503)) + _3361.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3286.x - _2503;
                                float _3421 = _3286.y - _2504;
                                float _3422 = _3286.z - _2505;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3287 * _3287));
                                float _4615 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3438 = sqrt(_3423) * _3302.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_714, _717, _720))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_2505, _3329.z, fma(_2504, _3329.y, _3329.x * _2503)) + _3329.w) / _3392;
                                float _3452 = (fma(_2505, _3345.z, fma(_2504, _3345.y, _3345.x * _2503)) + _3345.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4631 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _782;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2898;
                                float _3482 = _3428 - _2899;
                                float _3483 = _3429 - _2900;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_714, _717, _720), vec3((-0.0) - _2898, (-0.0) - _2899, (-0.0) - _2900));
                                float _4642 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3495 = dot(vec3(_714, _717, _720), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4653 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_714, _717, _720), vec3(_3427, _3428, _3429))) + _3504;
                                float _4664 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4675 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3458 * _3302.y;
                                frontier_phi_83_pred_1 = _3458 * _3302.x;
                                frontier_phi_83_pred_2 = _3532 * _3314.z;
                                frontier_phi_83_pred_3 = _3532 * _3314.y;
                                frontier_phi_83_pred_4 = _3532 * _3314.x;
                                frontier_phi_83_pred_5 = _3458 * _3302.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3540 = frontier_phi_83_pred;
                            _3539 = frontier_phi_83_pred_1;
                            _3538 = frontier_phi_83_pred_2;
                            _3537 = frontier_phi_83_pred_3;
                            _3536 = frontier_phi_83_pred_4;
                            _3541 = frontier_phi_83_pred_5;
                            _3244 = _3539 + _3257;
                            _3245 = _3540 + _3258;
                            _3246 = _3541 + _3259;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            _3243 = _3538 + _3256;
                            if (_3261 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3261;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3246;
                        frontier_phi_77_pred_1 = _3245;
                        frontier_phi_77_pred_2 = _3244;
                        frontier_phi_77_pred_3 = _3243;
                        frontier_phi_77_pred_4 = _3242;
                        frontier_phi_77_pred_5 = _3241;
                    }
                    _2883 = frontier_phi_77_pred;
                    _2881 = frontier_phi_77_pred_1;
                    _2879 = frontier_phi_77_pred_2;
                    _2877 = frontier_phi_77_pred_3;
                    _2875 = frontier_phi_77_pred_4;
                    _2873 = frontier_phi_77_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2873;
                        _3033 = _2875;
                        _3034 = _2877;
                        _3035 = _2879;
                        _3036 = _2881;
                        _3037 = _2883;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2877;
                frontier_phi_58_59_ladder_1 = _2883;
                frontier_phi_58_59_ladder_2 = _2881;
                frontier_phi_58_59_ladder_3 = _2879;
                frontier_phi_58_59_ladder_4 = _2875;
                frontier_phi_58_59_ladder_5 = _2873;
            }
            else
            {
                frontier_phi_58_59_ladder = _2724;
                frontier_phi_58_59_ladder_1 = _2730;
                frontier_phi_58_59_ladder_2 = _2728;
                frontier_phi_58_59_ladder_3 = _2726;
                frontier_phi_58_59_ladder_4 = _2722;
                frontier_phi_58_59_ladder_5 = _2720;
            }
            _2872 = frontier_phi_58_59_ladder_5;
            _2874 = frontier_phi_58_59_ladder_4;
            _2876 = frontier_phi_58_59_ladder;
            _2878 = frontier_phi_58_59_ladder_3;
            _2880 = frontier_phi_58_59_ladder_2;
            _2882 = frontier_phi_58_59_ladder_1;
        }
        float _2887 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2562 = (_2887 * _2878) + _2017;
        _2564 = (_2887 * _2880) + _2019;
        _2566 = (_2887 * _2882) + _2021;
        _2568 = ((_2872 * 0.039999999105930328369140625) * _2887) + _2347;
        _2570 = ((_2874 * 0.039999999105930328369140625) * _2887) + _2349;
        _2572 = ((_2876 * 0.039999999105930328369140625) * _2887) + _2351;
    }
    else
    {
        _2562 = _2017;
        _2564 = _2019;
        _2566 = _2021;
        _2568 = _2347;
        _2570 = _2349;
        _2572 = _2351;
    }
    float _2586 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2587 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2588 = cbSceneParam._m0[86u].x * (_1835 + ((_781 * cbMtdParam._m0[13u].w) * dot(vec3(_635, _636, _637), vec3(_201, _202, _203))));
    float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
    float _2590 = isnan(_2587) ? _694 : (isnan(_694) ? _2587 : min(_694, _2587));
    vec4 _2592 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2589, _2590), 0.0);
    float _2594 = _2592.x;
    bool _2614 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2594)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2594))) > _647;
    vec4 _2618 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2614 ? _2589 : _693, _2614 ? _2590 : _694));
    float _4701 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4712 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4723 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2642 = 0.959999978542327880859375 - (exp2(log2(1.0 - _773) * 5.0) * 0.959999978542327880859375);
    float _2644 = (_2618.x * _2642) * cbSceneParam._m0[72u].w;
    float _2646 = (_2618.y * _2642) * cbSceneParam._m0[72u].w;
    float _2648 = (_2618.z * _2642) * cbSceneParam._m0[72u].w;
    float _2656 = (_2644 + (((((_1812 * _1860.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1603) * _1876)) + _2568) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2562 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _758))) - _2644) * _620);
    float _2658 = (_2646 + (((((_1812 * _1860.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1603) * _1876)) + _2570) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2564 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _758))) - _2646) * _620);
    float _2660 = (_2648 + (((((_1812 * _1860.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1603) * _1876)) + _2572) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2566 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _758))) - _2648) * _620);
    float _2665 = cbInstanceData._m0[_733 + 6u].w * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)));
    float _2670 = _693 / cbSceneParam._m0[86u].x;
    float _2671 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2685 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, (log2((isnan(cbSceneParam._m0[77u].w) ? _647 : (isnan(_647) ? cbSceneParam._m0[77u].w : min(_647, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2687 = _2685.x;
    float _2688 = _2685.y;
    float _2689 = _2685.z;
    float _2690 = _2685.w;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_647 > cbSceneParam._m0[78u].w)
    {
        float _2745 = isnan(_647) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _647 : min(cbSceneParam._m0[80u].w, _647));
        float _2746 = _2745 / _647;
        float _2757 = _2746 * _666;
        float _2758 = _667 * _2746;
        float _2759 = (-0.0) - _2758;
        float _2760 = _2746 * _668;
        float _2762 = (cbSceneParam._m0[77u].w * _2759) / _2745;
        float _2763 = _2762 + cbSceneParam._m0[79u].w;
        float _2764 = cbSceneParam._m0[79u].w - _2758;
        float _2770 = sqrt(((_2757 * _2757) + (_2758 * _2758)) + (_2760 * _2760));
        float _2773 = (1.0 - (cbSceneParam._m0[77u].w / _2745)) * _2770;
        float _2778 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2780 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2989;
        if (abs((_2759 - _2762) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2989 = ((((_2763 > 0.0) ? exp2(_2778 * _2763) : (2.0 - exp2(_2780 * _2763))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2773;
        }
        else
        {
            float _2933 = 1.0 / cbSceneParam._m0[80u].x;
            float _2934 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : max(_2763, _2764));
            float _2935 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : min(_2763, _2764));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            _2989 = ((abs(_2770 / _2759) * cbSceneParam._m0[80u].y) * ((((_2944 - _2945) * 2.0) - ((exp2(_2778 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0)))) - exp2(_2778 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))))) * _2933)) - ((exp2(_2780 * _2944) - exp2(_2780 * _2945)) * _2933))) + (_2773 * cbSceneParam._m0[80u].z);
        }
        vec4 _2991 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, 1.0), 0.0);
        float _3000 = exp2((_2989 * (-1.44269502162933349609375)) * (1.0 - _2991.w));
        float _3001 = log2(_3000);
        float _3017 = log2(_2690);
        _2782 = (exp2(_3017 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].x)) * _2991.x) / cbSceneParam._m0[78u].x)) + _2687;
        _2784 = (exp2(_3017 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].y)) * _2991.y) / cbSceneParam._m0[78u].y)) + _2688;
        _2786 = (exp2(_3017 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].z)) * _2991.z) / cbSceneParam._m0[78u].z)) + _2689;
        _2788 = _3000 * _2690;
    }
    else
    {
        _2782 = _2687;
        _2784 = _2688;
        _2786 = _2689;
        _2788 = _2690;
    }
    bool _3027;
    float _2843;
    vec4 _2846;
    float _2848;
    vec4 _2850;
    float _2858;
    float _2859;
    float _2860;
    float _2861;
    bool _2871;
    for (;;)
    {
        bool _2800 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2801 = log2(_2788);
        float _2808 = exp2(_2801 * cbSceneParam._m0[78u].x) * _2656;
        float _2809 = exp2(_2801 * cbSceneParam._m0[78u].y) * _2658;
        float _2810 = exp2(_2801 * cbSceneParam._m0[78u].z) * _2660;
        vec4 _2818 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_693, _694));
        float _2820 = _2818.x;
        float _2841 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2820)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2820))) - _647) * 3.0;
        float _4774 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        _2843 = _2665 * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)));
        float _2844 = _682 + (-0.5);
        _2846 = cbMtdParam._m0[1u];
        _2848 = _2846.y * _2844;
        _2850 = cbMatDynParam._m0[0u];
        float _2857 = (roundEven(_2850.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2858 = _2857 * (_2800 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2782)));
        _2859 = _2857 * (_2800 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2784)));
        _2860 = _2857 * (_2800 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2786)));
        _2861 = _2844 * 0.999000012874603271484375;
        _2871 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2871)
        {
            if ((cbInstanceData._m0[_733 + 7u].x + _2861) < 0.5)
            {
                _3027 = true;
                break;
            }
        }
        uint _2968 = _734 + uint(_2850.w);
        if ((cbInstanceData._m0[_2968].w < 1.0) && ((cbInstanceData._m0[_2968].w + _2861) < 0.5))
        {
            _3027 = true;
            break;
        }
        if ((_2848 + _464) < _2846.x)
        {
            _3027 = true;
            break;
        }
        _3027 = false;
        break;
    }
    float _3232;
    if (_3027)
    {
        discard_state = true;
        _3232 = 0.0;
    }
    else
    {
        _3232 = _2843;
    }
    SV_Target.x = _2858;
    SV_Target.y = _2859;
    SV_Target.z = _2860;
    SV_Target.w = _3232;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2843;
    discard_exit();
}


