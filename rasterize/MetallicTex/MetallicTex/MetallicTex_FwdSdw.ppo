#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicTex_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicTex_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D MetallicTex_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _850;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(MetallicTex_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _237 = _230.w * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(MetallicTex_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _249.x;
    vec4 _263 = texture(sampler2D(MetallicTex_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3472 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))));
    float _283 = fma(_280, _214, fma(_273, _206 * TANGENT.x, (_192 * _184) * _271));
    float _286 = fma(_280, _215, fma(_273, _206 * TANGENT.y, (_192 * _185) * _271));
    float _289 = fma(_280, _216, fma(_273, _206 * TANGENT.z, (_192 * _186) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _300 = inversesqrt(dot(vec3(_294, _295, _296), vec3(_294, _295, _296)));
    float _301 = _300 * _294;
    float _302 = _300 * _295;
    float _303 = _300 * _296;
    float _3483 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _304 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _305 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3516 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3527 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3538 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _309 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _418 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _421 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _437 = (_434 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3549 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _449 = 1.0 - _309;
    float _450 = _446 * _449;
    float _451 = _447 * _449;
    float _452 = _448 * _449;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _309;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _309;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _309;
    float _460 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _475 = _472.x * TEXCOORD_1.w;
    float _476 = dot(vec3(_301, _302, _303), vec3(_385, _386, _387));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _301) - _385;
    float _484 = (_479 * _302) - _386;
    float _485 = (_479 * _303) - _387;
    float _489 = abs(dot(vec3(_385, _386, _387), vec3(_301, _302, _303)));
    float _3582 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_305);
    float _504 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _510 = (1.0 - _504) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _511 = _504 * _491;
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _578 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _582 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _607 = _539 + _301;
        float _608 = _543 + _302;
        float _609 = _547 + _303;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_301, _302, _303), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3630 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_301, _302, _303), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3663 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_301, _302, _303), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3696 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _894 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _898 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _921 = _539 + _301;
        float _922 = _543 + _302;
        float _923 = _547 + _303;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_301, _302, _303), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3759 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_301, _302, _303), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3792 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_301, _302, _303), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3825 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _850;
        _1160 = _850;
        _1161 = _850;
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = _485 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_849, _853, _856, _859));
        float _1247 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_851, _854, _857, _860));
        float _1251 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_852, _855, _858, _861));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1296 = isnan(_1295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1295 : min(cbModelParam._m0[25u].z, _1295));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1345 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1349 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1353 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1356 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1359 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1362 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1390;
        if (_1356 > 0.0)
        {
            _1390 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1390 = frontier_phi_16_14_ladder;
        }
        float _1566;
        if (_1359 > 0.0)
        {
            _1566 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1566 = frontier_phi_25_21_ladder;
        }
        float _1862;
        if (_1362 > 0.0)
        {
            _1862 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1862 = frontier_phi_37_32_ladder;
        }
        float _1864 = isnan(_1566) ? _1390 : (isnan(_1390) ? _1566 : min(_1390, _1566));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1356) + _1345;
        float _1870 = (_1865 * _1359) + _1349;
        float _1871 = (_1865 * _1362) + _1353;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_15_37_ladder = _2016.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2016.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2016.z * cbModelParam._m0[1u].y;
        }
        _1378 = frontier_phi_15_37_ladder_1;
        _1380 = frontier_phi_15_37_ladder;
        _1382 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1296);
        _1378 = _1366.x * cbModelParam._m0[1u].y;
        _1380 = _1366.y * cbModelParam._m0[1u].y;
        _1382 = _1366.z * cbModelParam._m0[1u].y;
    }
    float _1386 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1386 : min(cbModelParam._m0[25u].w, _1386));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1458 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1461 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1571;
        if (_1455 > 0.0)
        {
            _1571 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1571 = frontier_phi_27_23_ladder;
        }
        float _1889;
        if (_1458 > 0.0)
        {
            _1889 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1889 = frontier_phi_39_34_ladder;
        }
        float _2227;
        if (_1461 > 0.0)
        {
            _2227 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2227 = frontier_phi_49_46_ladder;
        }
        float _2229 = isnan(_1889) ? _1571 : (isnan(_1571) ? _1889 : min(_1571, _1889));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1455) + _1444;
        float _2235 = (_2230 * _1458) + _1448;
        float _2236 = (_2230 * _1461) + _1452;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2237;
        float _2240 = _2237 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2236 > _2240) || ((_2236 < _2238) || ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 < _2238) || (_2234 > _2240))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2236, cbModelParam._m0[17u].z, fma(_2235, cbModelParam._m0[17u].y, _2234 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2236, cbModelParam._m0[18u].z, fma(_2235, cbModelParam._m0[18u].y, _2234 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2236, cbModelParam._m0[19u].z, fma(_2235, cbModelParam._m0[19u].y, _2234 * cbModelParam._m0[19u].x))), _1387);
            frontier_phi_24_49_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_24_49_ladder_2;
        _1482 = frontier_phi_24_49_ladder_1;
        _1484 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1387);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1497 = (((_510 * _460) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_510 * _462) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1501 = (((_510 * _463) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1504 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1497 * cbSceneParam._m0[91u].x));
    float _1545 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1549 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1558 = _1545 / _1557;
    float _1559 = _1549 / _1557;
    float _1560 = _1553 / _1557;
    float _1707;
    float _1708;
    float _1709;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1587 = ((uint(_1560 > cbSceneParam._m0[59u].y) + uint(_1560 > cbSceneParam._m0[59u].x)) + uint(_1560 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1588 = _1587 + 43u;
        uint _1596 = _1587 + 44u;
        uint _1604 = _1587 + 45u;
        uint _1612 = _1587 + 46u;
        float _1623 = fma(_1557, cbSceneParam._m0[_1588].w, fma(_1553, cbSceneParam._m0[_1588].z, fma(_1549, cbSceneParam._m0[_1588].y, _1545 * cbSceneParam._m0[_1588].x)));
        float _1627 = fma(_1557, cbSceneParam._m0[_1596].w, fma(_1553, cbSceneParam._m0[_1596].z, fma(_1549, cbSceneParam._m0[_1596].y, _1545 * cbSceneParam._m0[_1596].x)));
        float _1635 = fma(_1557, cbSceneParam._m0[_1612].w, fma(_1553, cbSceneParam._m0[_1612].z, fma(_1549, cbSceneParam._m0[_1612].y, _1545 * cbSceneParam._m0[_1612].x)));
        float _1640 = cbSceneParam._m0[33u].z * _1635;
        float _1642 = cbSceneParam._m0[33u].w * _1635;
        float _1645 = fma(_1557, cbSceneParam._m0[_1604].w, fma(_1553, cbSceneParam._m0[_1604].z, fma(_1549, cbSceneParam._m0[_1604].y, _1545 * cbSceneParam._m0[_1604].x))) / _1635;
        float _1693 = (cbSceneParam._m0[33u].x - sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560))) * cbSceneParam._m0[33u].y;
        float _3951 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1700 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1623) / _1635, (_1642 + _1627) / _1635), _1645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 + _1623) / _1635, (_1627 - _1640) / _1635), _1645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1623 - _1640) / _1635, (_1627 - _1642) / _1635), _1645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1623 - _1642) / _1635, (_1640 + _1627) / _1635), _1645), 0.0)).x), vec4(0.25)));
        _1707 = 1.0 - (_1700 * cbSceneParam._m0[34u].x);
        _1708 = 1.0 - (_1700 * cbSceneParam._m0[34u].y);
        _1709 = 1.0 - (_1700 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1707 = 1.0;
        _1708 = 1.0;
        _1709 = 1.0;
    }
    float _1773;
    float _1775;
    float _1777;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1761 = fma(_1557, cbSceneParam._m0[63u].w, fma(_1553, cbSceneParam._m0[63u].z, fma(_1549, cbSceneParam._m0[63u].y, _1545 * cbSceneParam._m0[63u].x)));
        float _1762 = fma(_1557, cbSceneParam._m0[60u].w, fma(_1553, cbSceneParam._m0[60u].z, fma(_1549, cbSceneParam._m0[60u].y, _1545 * cbSceneParam._m0[60u].x))) / _1761;
        float _1763 = fma(_1557, cbSceneParam._m0[61u].w, fma(_1553, cbSceneParam._m0[61u].z, fma(_1549, cbSceneParam._m0[61u].y, _1545 * cbSceneParam._m0[61u].x))) / _1761;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1762 >= cbSceneParam._m0[64u].x) && (_1763 >= cbSceneParam._m0[64u].y)) && (_1762 <= cbSceneParam._m0[64u].z)) && (_1763 <= cbSceneParam._m0[64u].w))
        {
            float _1902 = fma(_1557, cbSceneParam._m0[62u].w, fma(_1553, cbSceneParam._m0[62u].z, fma(_1549, cbSceneParam._m0[62u].y, _1545 * cbSceneParam._m0[62u].x))) / _1761;
            float _1906 = isnan(cbSceneParam._m0[41u].w) ? _1902 : (isnan(_1902) ? cbSceneParam._m0[41u].w : max(_1902, cbSceneParam._m0[41u].w));
            float _1949 = (cbSceneParam._m0[33u].x - sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560))) * cbSceneParam._m0[33u].y;
            float _3967 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
            float _1956 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1762, cbSceneParam._m0[33u].w + _1763), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1762, _1763 - cbSceneParam._m0[33u].z), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1762 - cbSceneParam._m0[33u].z, _1763 - cbSceneParam._m0[33u].w), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1762 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1763), _1906), 0.0)).x), vec4(0.25)));
            float _1960 = 1.0 - (_1956 * cbSceneParam._m0[34u].x);
            float _1961 = 1.0 - (_1956 * cbSceneParam._m0[34u].y);
            float _1962 = 1.0 - (_1956 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1961) ? _1708 : (isnan(_1708) ? _1961 : min(_1708, _1961));
            frontier_phi_36_35_ladder_1 = isnan(_1962) ? _1709 : (isnan(_1709) ? _1962 : min(_1709, _1962));
            frontier_phi_36_35_ladder_2 = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
        }
        else
        {
            frontier_phi_36_35_ladder = _1708;
            frontier_phi_36_35_ladder_1 = _1709;
            frontier_phi_36_35_ladder_2 = _1707;
        }
        _1773 = frontier_phi_36_35_ladder_2;
        _1775 = frontier_phi_36_35_ladder;
        _1777 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1773 = _1707;
        _1775 = _1708;
        _1777 = _1709;
    }
    uvec4 _1782 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1784 = _1782.x * 14u;
    uint _1785 = _1784 + 13u;
    float _1792 = _475 + (-1.0);
    float _1797 = (cbLight._m0[_1785].x * _1792) + 1.0;
    float _1798 = (cbLight._m0[_1785].y * _1792) + 1.0;
    float _1799 = (cbLight._m0[_1785].z * _1792) + 1.0;
    float _1800 = (cbLight._m0[_1785].w * _1792) + 1.0;
    uint _1801 = _1784 + 5u;
    float _1807 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1811 = _1784 + 4u;
    float _1821 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1825 = _1784 | 1u;
    float _1836 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_301, _302, _303));
    float _1839 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_301, _302, _303));
    float _4003 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _4014 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1844 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1846 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1853 = ((cbLight._m0[_1801].x * _1807) * _1846) + (((cbLight._m0[_1811].x * _1773) * _1821) * _1844);
    float _1854 = ((_1807 * cbLight._m0[_1801].y) * _1846) + (((cbLight._m0[_1811].y * _1775) * _1821) * _1844);
    float _1855 = ((_1807 * cbLight._m0[_1801].z) * _1846) + (((cbLight._m0[_1811].z * _1777) * _1821) * _1844);
    uvec4 _1859 = floatBitsToUint(cbLight._m0[_1784 + 12u]);
    bool _1861 = _1859.x == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1861)
    {
        _1963 = _1853;
        _1965 = _1854;
        _1967 = _1855;
    }
    else
    {
        uint _1971 = _1784 + 6u;
        float _1987 = (dot(vec3(cbLight._m0[_1784 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1988 = _1987 * _1987;
        float _4025 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1990 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1963 = (((cbLight._m0[_1971].x * 0.3183098733425140380859375) * _1989) * _1990) + _1853;
        _1965 = (((cbLight._m0[_1971].y * 0.3183098733425140380859375) * _1989) * _1990) + _1854;
        _1967 = (((cbLight._m0[_1971].z * 0.3183098733425140380859375) * _1989) * _1990) + _1855;
    }
    bool _1970 = _1859.y == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1970)
    {
        _2025 = _1963;
        _2027 = _1965;
        _2029 = _1967;
    }
    else
    {
        uint _2198 = _1784 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1784 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4041 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2217 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2025 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1963;
        _2027 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1965;
        _2029 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1967;
    }
    uint _2032 = _1784 + 8u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _305) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1784].x + _385;
    float _2048 = cbLight._m0[_1784].y + _386;
    float _2049 = cbLight._m0[_1784].z + _387;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1784].xyz));
    float _4057 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2061 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2062 = dot(vec3(_301, _302, _303), vec3(_2054, _2055, _2056));
    float _4079 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_2054, _2055, _2056));
    float _4090 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2046 * _2046;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
    float _2083 = 0.959999978542327880859375 - _457;
    float _2085 = 0.959999978542327880859375 - _458;
    float _2086 = 0.959999978542327880859375 - _459;
    float _2093 = 1.0 - _2046;
    float _2104 = (0.5 / (((_2061 * ((_2060 * _2093) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2093) + _2046) * _2060))) * _2060;
    float _4101 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    uint _2120 = _1784 + 9u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _305) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1825].x + _385;
    float _2134 = cbLight._m0[_1825].y + _386;
    float _2135 = cbLight._m0[_1825].z + _387;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1825].xyz));
    float _4112 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2147 = dot(vec3(_301, _302, _303), vec3(_2140, _2141, _2142));
    float _4123 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2140, _2141, _2142));
    float _4134 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2132 * _2132;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _2173 = 1.0 - _2132;
    float _2183 = (0.5 / (((_2061 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2173) + _2132) * _2146))) * _2146;
    float _4145 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    float _2195 = (((((_2166 * _2083) + _460) * cbLight._m0[_2120].x) * _2185) * _1807) + ((((cbLight._m0[_2032].x * _1773) * ((_2082 * _2083) + _460)) * _2106) * _1821);
    float _2196 = (((((_2166 * _2085) + _462) * cbLight._m0[_2120].y) * _2185) * _1807) + ((((cbLight._m0[_2032].y * _1775) * ((_2082 * _2085) + _462)) * _2106) * _1821);
    float _2197 = (((((_2166 * _2086) + _463) * cbLight._m0[_2120].z) * _2185) * _1807) + ((((cbLight._m0[_2032].z * _1777) * ((_2082 * _2086) + _463)) * _2106) * _1821);
    float _2253;
    float _2255;
    float _2257;
    if (_1861)
    {
        _2253 = _2195;
        _2255 = _2196;
        _2257 = _2197;
    }
    else
    {
        uint _2259 = _1784 + 2u;
        uint _2263 = _1784 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _305) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _385;
        float _2280 = cbLight._m0[_2259].y + _386;
        float _2281 = cbLight._m0[_2259].z + _387;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2259].xyz));
        float _4156 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2293 = dot(vec3(_301, _302, _303), vec3(_2286, _2287, _2288));
        float _4167 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4178 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
        float _2319 = 1.0 - _2278;
        float _2329 = (0.5 / (((_2061 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2319) + _2278) * _2292))) * _2292;
        float _4189 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2253 = (((((_2312 * _2083) + _460) * cbLight._m0[_2263].x) * _2331) * _2332) + _2195;
        _2255 = (((((_2312 * _2085) + _462) * cbLight._m0[_2263].y) * _2331) * _2332) + _2196;
        _2257 = (((((_2312 * _2086) + _463) * cbLight._m0[_2263].z) * _2331) * _2332) + _2197;
    }
    float _2363;
    float _2365;
    float _2367;
    if (_1970)
    {
        _2363 = _2253;
        _2365 = _2255;
        _2367 = _2257;
    }
    else
    {
        uint _2374 = _1784 + 3u;
        uint _2378 = _1784 + 11u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _305) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _385;
        float _2395 = cbLight._m0[_2374].y + _386;
        float _2396 = cbLight._m0[_2374].z + _387;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2374].xyz));
        float _4205 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2408 = dot(vec3(_301, _302, _303), vec3(_2401, _2402, _2403));
        float _4216 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4227 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2061 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2434) + _2393) * _2407))) * _2407;
        float _4238 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2363 = (((((_2427 * _2083) + _460) * cbLight._m0[_2378].x) * _2446) * _2447) + _2253;
        _2365 = (((((_2427 * _2085) + _462) * cbLight._m0[_2378].y) * _2446) * _2447) + _2255;
        _2367 = (((((_2427 * _2086) + _463) * cbLight._m0[_2378].z) * _2446) * _2447) + _2257;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1782.y == 0u)
    {
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2469)));
        float _2490 = (log2(_1560 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2741)
                {
                    frontier_phi_68_pred = _2730;
                    frontier_phi_68_pred_1 = _2729;
                    frontier_phi_68_pred_2 = _2728;
                    frontier_phi_68_pred_3 = _2726;
                    frontier_phi_68_pred_4 = _2725;
                    frontier_phi_68_pred_5 = _2727;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _1558;
                        float _2916 = _2875.y - _1559;
                        float _2917 = _2875.z - _1560;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_415, _418, _421), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4264 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _1558;
                        float _2951 = (-0.0) - _1559;
                        float _2952 = (-0.0) - _1560;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2966 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _491;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2957 + _2922;
                        float _2978 = _2958 + _2923;
                        float _2979 = _2959 + _2924;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_415, _418, _421), vec3(_2957, _2958, _2959));
                        float _4280 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2991 = dot(vec3(_415, _418, _421), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4291 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2935 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2925) + _3000;
                        float _4302 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4313 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_2998 * _2998) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3026 * _2911.x) + _2849;
                        _2782 = (_3026 * _2911.y) + _2850;
                        _2783 = (_3026 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_68_pred = _2786;
                    frontier_phi_68_pred_1 = _2785;
                    frontier_phi_68_pred_2 = _2784;
                    frontier_phi_68_pred_3 = _2782;
                    frontier_phi_68_pred_4 = _2781;
                    frontier_phi_68_pred_5 = _2783;
                }
                _2592 = frontier_phi_68_pred;
                _2590 = frontier_phi_68_pred_1;
                _2588 = frontier_phi_68_pred_2;
                _2584 = frontier_phi_68_pred_3;
                _2582 = frontier_phi_68_pred_4;
                _2586 = frontier_phi_68_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2582;
                    _2726 = _2584;
                    _2727 = _2586;
                    _2728 = _2588;
                    _2729 = _2590;
                    _2730 = _2592;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2598) & _2500) == 0u)
        {
            _2693 = _2581;
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
            float _2719 = _2718 * _1558;
            float _2720 = _2718 * _1559;
            float _2721 = _2718 * _1560;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2581;
                float _2833 = _2583;
                float _2834 = _2585;
                float _2835 = _2587;
                float _2836 = _2589;
                float _2837 = _2591;
                uint _2838 = _2598;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2848)
                    {
                        frontier_phi_74_pred = _2834;
                        frontier_phi_74_pred_1 = _2833;
                        frontier_phi_74_pred_2 = _2832;
                        frontier_phi_74_pred_3 = _2837;
                        frontier_phi_74_pred_4 = _2836;
                        frontier_phi_74_pred_5 = _2835;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        uint _3050 = _2847;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3061 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3061 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3061 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3061 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_1560, _3171.z, fma(_1559, _3171.y, _3171.x * _1558)) + _3171.w;
                            _3184 = !((fma(_1560, _3152.z, fma(_1559, _3152.y, _3152.x * _1558)) + _3152.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3076.x - _1558;
                                float _3212 = _3076.y - _1559;
                                float _3213 = _3076.z - _1560;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3077 * _3077));
                                float _4324 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3229 = sqrt(_3214) * _3092.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_415, _418, _421))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_1560, _3120.z, fma(_1559, _3120.y, _3120.x * _1558)) + _3120.w) / _3183;
                                float _3243 = (fma(_1560, _3136.z, fma(_1559, _3136.y, _3136.x * _1558)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4340 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _491;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3274 = _3220 - _2721;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4351 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3286 = dot(vec3(_415, _418, _421), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4362 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_415, _418, _421), vec3(_3218, _3219, _3220))) + _3295;
                                float _4373 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4384 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3323 * _3104.z;
                                frontier_phi_80_pred_1 = _3323 * _3104.y;
                                frontier_phi_80_pred_2 = _3323 * _3104.x;
                                frontier_phi_80_pred_3 = _3249 * _3092.z;
                                frontier_phi_80_pred_4 = _3249 * _3092.y;
                                frontier_phi_80_pred_5 = _3249 * _3092.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_80_pred;
                            _3328 = frontier_phi_80_pred_1;
                            _3327 = frontier_phi_80_pred_2;
                            _3332 = frontier_phi_80_pred_3;
                            _3331 = frontier_phi_80_pred_4;
                            _3330 = frontier_phi_80_pred_5;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3033;
                        frontier_phi_74_pred_1 = _3032;
                        frontier_phi_74_pred_2 = _3031;
                        frontier_phi_74_pred_3 = _3036;
                        frontier_phi_74_pred_4 = _3035;
                        frontier_phi_74_pred_5 = _3034;
                    }
                    _2698 = frontier_phi_74_pred;
                    _2696 = frontier_phi_74_pred_1;
                    _2694 = frontier_phi_74_pred_2;
                    _2704 = frontier_phi_74_pred_3;
                    _2702 = frontier_phi_74_pred_4;
                    _2700 = frontier_phi_74_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2702;
                frontier_phi_62_63_ladder_1 = _2700;
                frontier_phi_62_63_ladder_2 = _2698;
                frontier_phi_62_63_ladder_3 = _2704;
                frontier_phi_62_63_ladder_4 = _2696;
                frontier_phi_62_63_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_62_63_ladder = _2589;
                frontier_phi_62_63_ladder_1 = _2587;
                frontier_phi_62_63_ladder_2 = _2585;
                frontier_phi_62_63_ladder_3 = _2591;
                frontier_phi_62_63_ladder_4 = _2583;
                frontier_phi_62_63_ladder_5 = _2581;
            }
            _2693 = frontier_phi_62_63_ladder_5;
            _2695 = frontier_phi_62_63_ladder_4;
            _2697 = frontier_phi_62_63_ladder_2;
            _2699 = frontier_phi_62_63_ladder_1;
            _2701 = frontier_phi_62_63_ladder;
            _2703 = frontier_phi_62_63_ladder_3;
        }
        float _2708 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2512 = (_2708 * _2699) + _2025;
        _2514 = (_2708 * _2701) + _2027;
        _2516 = (_2708 * _2703) + _2029;
        _2518 = ((_2693 * _460) * _2708) + _2363;
        _2520 = ((_2695 * _462) * _2708) + _2365;
        _2522 = ((_2697 * _463) * _2708) + _2367;
    }
    else
    {
        _2512 = _2025;
        _2514 = _2027;
        _2516 = _2029;
        _2518 = _2363;
        _2520 = _2365;
        _2522 = _2367;
    }
    float _4400 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4411 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4422 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4433 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _2547 = cbInstanceData._m0[_434 + 6u].w * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)));
    float _2552 = _393 / cbSceneParam._m0[86u].x;
    float _2553 = _394 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2607 = _2606 / _325;
        float _2618 = _2607 * _378;
        float _2619 = _379 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2621 = _2607 * _380;
        float _2623 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2619;
        float _2631 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2620 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2756 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2631 / _2620) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2641 * _2765) - exp2(_2641 * _2766)) * _2754))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2572);
        _2643 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2645 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2647 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2649 = _2805 * _2572;
    }
    else
    {
        _2643 = _2569;
        _2645 = _2570;
        _2647 = _2571;
        _2649 = _2572;
    }
    float _2661 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2662 = _2661 == 3.0;
    float _2663 = log2(_2649);
    float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2512 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _475))) + ((_2518 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2514 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _475))) + ((_2520 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2516 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _475))) + ((_2522 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2681 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2681 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.y = _2681 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.z = _2681 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.w = _2547;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2547;
}


