#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicTex_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicTex_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D MetallicTex_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _893;
float _3310;
float _3311;
float _3312;
float _3313;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(MetallicTex_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _238 = _232.w;
    float _239 = _238 * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(MetallicTex_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _251.x;
    vec4 _265 = texture(sampler2D(MetallicTex_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3322 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))));
    float _285 = fma(_282, _216, fma(_275, _208 * TANGENT.x, (_194 * _186) * _273));
    float _288 = fma(_282, _217, fma(_275, _208 * TANGENT.y, (_194 * _187) * _273));
    float _291 = fma(_282, _218, fma(_275, _208 * TANGENT.z, (_194 * _188) * _273));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _302 = inversesqrt(dot(vec3(_296, _297, _298), vec3(_296, _297, _298)));
    float _303 = _302 * _296;
    float _304 = _302 * _297;
    float _305 = _302 * _298;
    float _3333 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _306 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _307 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3366 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3377 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3388 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _311 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _572 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _578 = (cbMatDynParam._m0[5u].x * _572) + cbMatDynParam._m0[5u].y;
        float _3399 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _579 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _583 = (cbMatDynParam._m0[5u].z * _572) + cbMatDynParam._m0[5u].w;
        float _3410 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) - _579)) + _579) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _432 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _435 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3421 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _463 = 1.0 - _311;
    float _464 = _460 * _463;
    float _465 = _461 * _463;
    float _466 = _462 * _463;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _311;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _311;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _311;
    float _474 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _489 = _486.x * TEXCOORD_1.w;
    float _490 = dot(vec3(_303, _304, _305), vec3(_387, _388, _389));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _303) - _387;
    float _498 = (_493 * _304) - _388;
    float _499 = (_493 * _305) - _389;
    float _503 = abs(dot(vec3(_387, _388, _389), vec3(_303, _304, _305)));
    float _3454 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_307);
    float _518 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _524 = (1.0 - _518) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _525 = _518 * _505;
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _621 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _625 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _650 = _553 + _303;
        float _651 = _557 + _304;
        float _652 = _561 + _305;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_303, _304, _305), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3502 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_303, _304, _305), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3535 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_303, _304, _305), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3568 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _940 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _944 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _967 = _553 + _303;
        float _968 = _557 + _304;
        float _969 = _561 + _305;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_303, _304, _305), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3631 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_303, _304, _305), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3664 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_303, _304, _305), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3697 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = _893;
        _1215 = _893;
        _1216 = _893;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _497 * 0.5;
    float _1274 = _498 * 0.5;
    float _1275 = _499 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_892, _896, _899, _902));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_894, _897, _900, _903));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1405 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1408 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1436 = frontier_phi_19_17_ladder;
        }
        float _1665;
        if (_1405 > 0.0)
        {
            _1665 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1665 = frontier_phi_28_24_ladder;
        }
        float _1922;
        if (_1408 > 0.0)
        {
            _1922 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1922 = frontier_phi_40_35_ladder;
        }
        float _1924 = isnan(_1665) ? _1436 : (isnan(_1436) ? _1665 : min(_1436, _1665));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1402) + _1391;
        float _1930 = (_1925 * _1405) + _1395;
        float _1931 = (_1925 * _1408) + _1399;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_18_40_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_18_40_ladder_2;
        _1426 = frontier_phi_18_40_ladder_1;
        _1428 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1504 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1507 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1670;
        if (_1501 > 0.0)
        {
            _1670 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1670 = frontier_phi_30_26_ladder;
        }
        float _1949;
        if (_1504 > 0.0)
        {
            _1949 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1949 = frontier_phi_42_37_ladder;
        }
        float _2162;
        if (_1507 > 0.0)
        {
            _2162 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2162 = frontier_phi_51_48_ladder;
        }
        float _2164 = isnan(_1949) ? _1670 : (isnan(_1670) ? _1949 : min(_1670, _1949));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1501) + _1490;
        float _2170 = (_2165 * _1504) + _1494;
        float _2171 = (_2165 * _1507) + _1498;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2172;
        float _2175 = _2172 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2171 > _2175) || ((_2171 < _2173) || ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 < _2173) || (_2169 > _2175))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2171, cbModelParam._m0[17u].z, fma(_2170, cbModelParam._m0[17u].y, _2169 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2171, cbModelParam._m0[18u].z, fma(_2170, cbModelParam._m0[18u].y, _2169 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2171, cbModelParam._m0[19u].z, fma(_2170, cbModelParam._m0[19u].y, _2169 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_27_51_ladder = _2371.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2371.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2371.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_27_51_ladder_2;
        _1528 = frontier_phi_27_51_ladder_1;
        _1530 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1543 = (((_524 * _474) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_524 * _476) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_524 * _477) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    vec4 _1564 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_408, _409));
    float _1566 = _1564.w;
    float _1578 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1566);
    float _1579 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1566);
    float _1580 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1566);
    uvec4 _1584 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1586 = _1584.x * 14u;
    uint _1587 = _1586 + 13u;
    float _1594 = _489 + (-1.0);
    float _1599 = (cbLight._m0[_1587].x * _1594) + 1.0;
    float _1600 = (cbLight._m0[_1587].y * _1594) + 1.0;
    float _1601 = (cbLight._m0[_1587].z * _1594) + 1.0;
    float _1602 = (cbLight._m0[_1587].w * _1594) + 1.0;
    uint _1603 = _1586 + 5u;
    float _1609 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1613 = _1586 + 4u;
    float _1623 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1627 = _1586 | 1u;
    float _1638 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_303, _304, _305));
    float _1641 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_303, _304, _305));
    float _3833 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _3844 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1646 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1648 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.3183098733425140380859375;
    float _1655 = ((cbLight._m0[_1603].x * _1609) * _1648) + (((cbLight._m0[_1613].x * _1578) * _1623) * _1646);
    float _1656 = ((_1609 * cbLight._m0[_1603].y) * _1648) + (((cbLight._m0[_1613].y * _1579) * _1623) * _1646);
    float _1657 = ((_1609 * cbLight._m0[_1603].z) * _1648) + (((cbLight._m0[_1613].z * _1580) * _1623) * _1646);
    uvec4 _1662 = floatBitsToUint(cbLight._m0[_1586 + 12u]);
    bool _1664 = _1662.x == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1664)
    {
        _1675 = _1655;
        _1677 = _1656;
        _1679 = _1657;
    }
    else
    {
        uint _1683 = _1586 + 6u;
        float _1699 = (dot(vec3(cbLight._m0[_1586 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3855 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1702 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1675 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1655;
        _1677 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1656;
        _1679 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1657;
    }
    bool _1682 = _1662.y == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1682)
    {
        _1720 = _1675;
        _1722 = _1677;
        _1724 = _1679;
    }
    else
    {
        uint _1893 = _1586 + 7u;
        float _1909 = (dot(vec3(cbLight._m0[_1586 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _3871 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1912 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1720 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1675;
        _1722 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1677;
        _1724 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1679;
    }
    uint _1727 = _1586 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1586].w)) * _307) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1586].x + _387;
    float _1743 = cbLight._m0[_1586].y + _388;
    float _1744 = cbLight._m0[_1586].z + _389;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1586].xyz));
    float _3887 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _1756 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1757 = dot(vec3(_303, _304, _305), vec3(_1749, _1750, _1751));
    float _3909 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1749, _1750, _1751));
    float _3920 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1777 = exp2(log2(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * 5.0);
    float _1778 = 0.959999978542327880859375 - _471;
    float _1780 = 0.959999978542327880859375 - _472;
    float _1781 = 0.959999978542327880859375 - _473;
    float _1788 = 1.0 - _1741;
    float _1799 = (0.5 / (((_1756 * ((_1755 * _1788) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1788) + _1741) * _1755))) * _1755;
    float _3931 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1801 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1815 = _1586 + 9u;
    float _1826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _307) * 0.949999988079071044921875);
    float _1827 = _1826 * _1826;
    float _1828 = cbLight._m0[_1627].x + _387;
    float _1829 = cbLight._m0[_1627].y + _388;
    float _1830 = cbLight._m0[_1627].z + _389;
    float _1834 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
    float _1835 = _1834 * _1828;
    float _1836 = _1834 * _1829;
    float _1837 = _1834 * _1830;
    float _1838 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1627].xyz));
    float _3942 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1842 = dot(vec3(_303, _304, _305), vec3(_1835, _1836, _1837));
    float _3953 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1846 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1835, _1836, _1837));
    float _3964 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1850 = _1827 * _1827;
    float _1854 = ((_1845 * _1845) * (_1850 + (-1.0))) + 1.0;
    float _1861 = exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0);
    float _1868 = 1.0 - _1827;
    float _1878 = (0.5 / (((_1756 * ((_1841 * _1868) + _1827)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1868) + _1827) * _1841))) * _1841;
    float _3975 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1850 / ((_1854 * _1854) * 3.141590118408203125));
    float _1890 = (((((_1861 * _1778) + _474) * cbLight._m0[_1815].x) * _1880) * _1609) + ((((cbLight._m0[_1727].x * _1578) * ((_1777 * _1778) + _474)) * _1801) * _1623);
    float _1891 = (((((_1861 * _1780) + _476) * cbLight._m0[_1815].y) * _1880) * _1609) + ((((cbLight._m0[_1727].y * _1579) * ((_1777 * _1780) + _476)) * _1801) * _1623);
    float _1892 = (((((_1861 * _1781) + _477) * cbLight._m0[_1815].z) * _1880) * _1609) + ((((cbLight._m0[_1727].z * _1580) * ((_1777 * _1781) + _477)) * _1801) * _1623);
    float _1954;
    float _1956;
    float _1958;
    if (_1664)
    {
        _1954 = _1890;
        _1956 = _1891;
        _1958 = _1892;
    }
    else
    {
        uint _1960 = _1586 + 2u;
        uint _1964 = _1586 + 10u;
        float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _307) * 0.949999988079071044921875);
        float _1979 = _1978 * _1978;
        float _1980 = cbLight._m0[_1960].x + _387;
        float _1981 = cbLight._m0[_1960].y + _388;
        float _1982 = cbLight._m0[_1960].z + _389;
        float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
        float _1987 = _1986 * _1980;
        float _1988 = _1986 * _1981;
        float _1989 = _1986 * _1982;
        float _1990 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1960].xyz));
        float _3986 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1993 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1994 = dot(vec3(_303, _304, _305), vec3(_1987, _1988, _1989));
        float _3997 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1997 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1998 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_1987, _1988, _1989));
        float _4008 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2002 = _1979 * _1979;
        float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
        float _2013 = exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0);
        float _2020 = 1.0 - _1979;
        float _2030 = (0.5 / (((_1756 * ((_1993 * _2020) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2020) + _1979) * _1993))) * _1993;
        float _4019 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2032 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
        float _2033 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1954 = (((((_2013 * _1778) + _474) * cbLight._m0[_1964].x) * _2032) * _2033) + _1890;
        _1956 = (((((_2013 * _1780) + _476) * cbLight._m0[_1964].y) * _2032) * _2033) + _1891;
        _1958 = (((((_2013 * _1781) + _477) * cbLight._m0[_1964].z) * _2032) * _2033) + _1892;
    }
    float _2068;
    float _2070;
    float _2072;
    if (_1682)
    {
        _2068 = _1954;
        _2070 = _1956;
        _2072 = _1958;
    }
    else
    {
        uint _2079 = _1586 + 3u;
        uint _2083 = _1586 + 11u;
        float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _307) * 0.949999988079071044921875);
        float _2098 = _2097 * _2097;
        float _2099 = cbLight._m0[_2079].x + _387;
        float _2100 = cbLight._m0[_2079].y + _388;
        float _2101 = cbLight._m0[_2079].z + _389;
        float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
        float _2106 = _2105 * _2099;
        float _2107 = _2105 * _2100;
        float _2108 = _2105 * _2101;
        float _2109 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2079].xyz));
        float _4035 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2113 = dot(vec3(_303, _304, _305), vec3(_2106, _2107, _2108));
        float _4046 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2117 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2106, _2107, _2108));
        float _4057 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2098 * _2098;
        float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
        float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
        float _2139 = 1.0 - _2098;
        float _2149 = (0.5 / (((_1756 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2139) + _2098) * _2112))) * _2112;
        float _4068 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2151 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
        float _2152 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _2068 = (((((_2132 * _1778) + _474) * cbLight._m0[_2083].x) * _2151) * _2152) + _1954;
        _2070 = (((((_2132 * _1780) + _476) * cbLight._m0[_2083].y) * _2151) * _2152) + _1956;
        _2072 = (((((_2132 * _1781) + _477) * cbLight._m0[_2083].z) * _2151) * _2152) + _1958;
    }
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1584.y == 0u)
    {
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2227;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2227;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2227;
        uvec4 _2242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2243 = _2242.x;
        uint _2254 = uint((float(_2242.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2243))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2243)));
        float _2264 = (log2(_2230 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2265 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        uint _2268 = uint(isnan(14.0) ? _2265 : (isnan(_2265) ? 14.0 : min(_2265, 14.0)));
        uvec4 _2273 = texelFetch(g_lightClusterGridBuffer, int(((_2268 << 2u) + (_2254 << 6u)) >> 2u));
        uint _2274 = _2273.x;
        uint _2275 = _2242.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2275 >> 4u) & 15u)) + 4294967295u) & _2274) == 0u) || ((_2275 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2544)
                {
                    frontier_phi_68_pred = _2530;
                    frontier_phi_68_pred_1 = _2533;
                    frontier_phi_68_pred_2 = _2532;
                    frontier_phi_68_pred_3 = _2531;
                    frontier_phi_68_pred_4 = _2529;
                    frontier_phi_68_pred_5 = _2528;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2543;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2534 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2228;
                        float _2740 = _2699.y - _2229;
                        float _2741 = _2699.z - _2230;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_429, _432, _435), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4094 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2228;
                        float _2775 = (-0.0) - _2229;
                        float _2776 = (-0.0) - _2230;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _505;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_429, _432, _435), vec3(_2781, _2782, _2783));
                        float _4110 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2816 = dot(vec3(_429, _432, _435), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4121 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4132 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4143 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2603 = (_2770 * _2718.x) + _2676;
                        _2604 = (_2770 * _2718.y) + _2677;
                        _2605 = (_2770 * _2718.z) + _2678;
                        _2600 = (_2851 * _2735.x) + _2673;
                        _2601 = (_2851 * _2735.y) + _2674;
                        _2602 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_68_pred = _2602;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2603;
                    frontier_phi_68_pred_4 = _2601;
                    frontier_phi_68_pred_5 = _2600;
                }
                _2381 = frontier_phi_68_pred;
                _2387 = frontier_phi_68_pred_1;
                _2385 = frontier_phi_68_pred_2;
                _2383 = frontier_phi_68_pred_3;
                _2379 = frontier_phi_68_pred_4;
                _2377 = frontier_phi_68_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2377;
                    _2529 = _2379;
                    _2530 = _2381;
                    _2531 = _2383;
                    _2532 = _2385;
                    _2533 = _2387;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2393) & _2274) == 0u)
        {
            _2496 = _2376;
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
            _2504 = _2384;
            _2506 = _2386;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
            float _2522 = _2521 * _2228;
            float _2523 = _2521 * _2229;
            float _2524 = _2521 * _2230;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2656 = _2376;
                float _2657 = _2378;
                float _2658 = _2380;
                float _2659 = _2382;
                float _2660 = _2384;
                float _2661 = _2386;
                uint _2662 = _2393;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2672)
                    {
                        frontier_phi_79_pred = _2661;
                        frontier_phi_79_pred_1 = _2660;
                        frontier_phi_79_pred_2 = _2659;
                        frontier_phi_79_pred_3 = _2658;
                        frontier_phi_79_pred_4 = _2657;
                        frontier_phi_79_pred_5 = _2656;
                    }
                    else
                    {
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        uint _2884 = _2671;
                        uint _2885;
                        vec4 _2910;
                        float _2911;
                        vec4 _2926;
                        vec3 _2938;
                        vec4 _2954;
                        vec4 _2970;
                        float _3017;
                        bool _3018;
                        for (;;)
                        {
                            uint _2895 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2884));
                            _2885 = (_2884 + 4294967295u) & _2884;
                            uint _2897 = _2895 * 40u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2911 = _2910.w;
                            uint _2913 = (_2895 * 40u) + 4u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2895 * 40u) + 8u;
                            _2938 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x));
                            uint _2941 = (_2895 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2895 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2895 * 40u) + 24u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2992 = (_2895 * 40u) + 28u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3017 = fma(_2230, _3005.z, fma(_2229, _3005.y, _3005.x * _2228)) + _3005.w;
                            _3018 = !((fma(_2230, _2986.z, fma(_2229, _2986.y, _2986.x * _2228)) + _2986.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3018)
                            {
                                float _3045 = _2910.x - _2228;
                                float _3046 = _2910.y - _2229;
                                float _3047 = _2910.z - _2230;
                                float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                                float _3051 = inversesqrt(_3048);
                                float _3052 = _3051 * _3045;
                                float _3053 = _3051 * _3046;
                                float _3054 = _3051 * _3047;
                                float _3058 = 1.0 - (_3048 / (_2911 * _2911));
                                float _4154 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3063 = sqrt(_3048) * _2926.w;
                                float _3065 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                                float _3066 = _3065 * _3065;
                                float _3069 = ((1.0 - _3066) * dot(vec3(_3052, _3053, _3054), vec3(_429, _432, _435))) + _3066;
                                float _3072 = _3063 * _3063;
                                float _3076 = (fma(_2230, _2954.z, fma(_2229, _2954.y, _2954.x * _2228)) + _2954.w) / _3017;
                                float _3077 = (fma(_2230, _2970.z, fma(_2229, _2970.y, _2970.x * _2228)) + _2970.w) / _3017;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4170 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3059) / ((_3072 * 0.699999988079071044921875) + 1.0));
                                float _3095 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                                float _3096 = 1.0 - _505;
                                float _3103 = sqrt(1.0 - ((1.0 - (_3096 * _3096)) * (1.0 - (_3095 * _3095))));
                                float _3104 = _3103 * _3103;
                                float _3105 = _3104 * _3104;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                                float _3116 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4181 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3119 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3120 = dot(vec3(_429, _432, _435), vec3(_3112 * _3106, _3112 * _3107, _3112 * _3108));
                                float _4192 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3127 = ((_3123 * _3123) * (_3105 + (-1.0))) + 1.0;
                                float _3128 = _3065 * _3104;
                                float _3129 = _3128 * _3128;
                                float _3135 = ((1.0 - _3129) * dot(vec3(_429, _432, _435), vec3(_3052, _3053, _3054))) + _3129;
                                float _4203 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3137 = 1.0 - _3104;
                                float _3147 = (0.5 / (((_3136 * ((_3119 * _3137) + _3104)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3104) * _3119))) * _3136;
                                float _4214 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3157 = (_3082 * _3059) * (((_3105 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_3127 * _3127) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3083 * _2926.z;
                                frontier_phi_85_pred_1 = _3083 * _2926.y;
                                frontier_phi_85_pred_2 = _3083 * _2926.x;
                                frontier_phi_85_pred_3 = _3157 * _2938.z;
                                frontier_phi_85_pred_4 = _3157 * _2938.y;
                                frontier_phi_85_pred_5 = _3157 * _2938.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3166 = frontier_phi_85_pred;
                            _3165 = frontier_phi_85_pred_1;
                            _3164 = frontier_phi_85_pred_2;
                            _3163 = frontier_phi_85_pred_3;
                            _3162 = frontier_phi_85_pred_4;
                            _3161 = frontier_phi_85_pred_5;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            if (_2885 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2885;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2870;
                        frontier_phi_79_pred_1 = _2869;
                        frontier_phi_79_pred_2 = _2868;
                        frontier_phi_79_pred_3 = _2867;
                        frontier_phi_79_pred_4 = _2866;
                        frontier_phi_79_pred_5 = _2865;
                    }
                    _2507 = frontier_phi_79_pred;
                    _2505 = frontier_phi_79_pred_1;
                    _2503 = frontier_phi_79_pred_2;
                    _2501 = frontier_phi_79_pred_3;
                    _2499 = frontier_phi_79_pred_4;
                    _2497 = frontier_phi_79_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2497;
                        _2657 = _2499;
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2503;
                frontier_phi_60_61_ladder_1 = _2507;
                frontier_phi_60_61_ladder_2 = _2505;
                frontier_phi_60_61_ladder_3 = _2501;
                frontier_phi_60_61_ladder_4 = _2499;
                frontier_phi_60_61_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_60_61_ladder = _2382;
                frontier_phi_60_61_ladder_1 = _2386;
                frontier_phi_60_61_ladder_2 = _2384;
                frontier_phi_60_61_ladder_3 = _2380;
                frontier_phi_60_61_ladder_4 = _2378;
                frontier_phi_60_61_ladder_5 = _2376;
            }
            _2496 = frontier_phi_60_61_ladder_5;
            _2498 = frontier_phi_60_61_ladder_4;
            _2500 = frontier_phi_60_61_ladder_3;
            _2502 = frontier_phi_60_61_ladder;
            _2504 = frontier_phi_60_61_ladder_2;
            _2506 = frontier_phi_60_61_ladder_1;
        }
        float _2511 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2286 = (_2511 * _2502) + _1720;
        _2288 = (_2511 * _2504) + _1722;
        _2290 = (_2511 * _2506) + _1724;
        _2292 = ((_2496 * _474) * _2511) + _2068;
        _2294 = ((_2498 * _476) * _2511) + _2070;
        _2296 = ((_2500 * _477) * _2511) + _2072;
    }
    else
    {
        _2286 = _1720;
        _2288 = _1722;
        _2290 = _1724;
        _2292 = _2068;
        _2294 = _2070;
        _2296 = _2072;
    }
    float _4230 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4241 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4252 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4263 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _2314 = ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2286 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _489))) + ((_2292 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2288 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _489))) + ((_2294 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2290 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _489))) + ((_2296 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2321 = cbInstanceData._m0[_448 + 6u].w * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)));
    float _2326 = _408 / cbSceneParam._m0[86u].x;
    float _2327 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2343 = _2341.x;
    float _2344 = _2341.y;
    float _2345 = _2341.z;
    float _2346 = _2341.w;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2401 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2402 = _2401 / _327;
        float _2413 = _2402 * _380;
        float _2414 = _381 * _2402;
        float _2415 = (-0.0) - _2414;
        float _2416 = _2402 * _382;
        float _2418 = (cbSceneParam._m0[77u].w * _2415) / _2401;
        float _2419 = _2418 + cbSceneParam._m0[79u].w;
        float _2420 = cbSceneParam._m0[79u].w - _2414;
        float _2426 = sqrt(((_2413 * _2413) + (_2414 * _2414)) + (_2416 * _2416));
        float _2429 = (1.0 - (cbSceneParam._m0[77u].w / _2401)) * _2426;
        float _2434 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2436 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2415 - _2418) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2419 > 0.0) ? exp2(_2434 * _2419) : (2.0 - exp2(_2436 * _2419))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2429;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : max(_2419, _2420));
            float _2559 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : min(_2419, _2420));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2613 = ((abs(_2426 / _2415) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2434 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2434 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2436 * _2568) - exp2(_2436 * _2569)) * _2557))) + (_2429 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2346);
        _2438 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2343;
        _2440 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2344;
        _2442 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2345;
        _2444 = _2624 * _2346;
    }
    else
    {
        _2438 = _2343;
        _2440 = _2344;
        _2442 = _2345;
        _2444 = _2346;
    }
    bool _2651;
    vec4 _2454;
    vec4 _2476;
    float _2478;
    float _2482;
    float _2483;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2454 = cbMatDynParam._m0[0u];
        float _2456 = roundEven(_2454.y);
        bool _2457 = _2456 == 3.0;
        float _2458 = log2(_2444);
        float _2465 = exp2(_2458 * cbSceneParam._m0[78u].x) * _2314;
        float _2466 = exp2(_2458 * cbSceneParam._m0[78u].y) * _2315;
        float _2467 = exp2(_2458 * cbSceneParam._m0[78u].z) * _2316;
        float _2474 = _396 + (-0.5);
        _2476 = cbMtdParam._m0[1u];
        _2478 = _2476.y * _2474;
        float _2481 = (_2456 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2482 = _2481 * (_2457 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2438)));
        _2483 = _2481 * (_2457 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
        _2484 = _2481 * (_2457 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
        _2485 = _2474 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2485) < 0.5)
            {
                _2651 = true;
                break;
            }
        }
        uint _2592 = _450 + uint(_2454.w);
        if ((cbInstanceData._m0[_2592].w < 1.0) && ((cbInstanceData._m0[_2592].w + _2485) < 0.5))
        {
            _2651 = true;
            break;
        }
        if ((_2478 + _238) < _2476.x)
        {
            _2651 = true;
            break;
        }
        _2651 = false;
        break;
    }
    float _2856;
    if (_2651)
    {
        discard_state = true;
        _2856 = 0.0;
    }
    else
    {
        _2856 = _2321;
    }
    SV_Target.x = _2482;
    SV_Target.y = _2483;
    SV_Target.z = _2484;
    SV_Target.w = _2856;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2321;
    discard_exit();
}


