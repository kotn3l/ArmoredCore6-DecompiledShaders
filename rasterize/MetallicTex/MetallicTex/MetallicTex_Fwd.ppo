#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicTex_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicTex_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D MetallicTex_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(MetallicTex_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _226.x;
    float _230 = _226.y;
    float _231 = _226.z;
    float _233 = _226.w * TEXCOORD_1.z;
    vec4 _245 = texture(sampler2D(MetallicTex_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _245.x;
    vec4 _259 = texture(sampler2D(MetallicTex_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _263 = _259.z;
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3185 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))));
    float _279 = fma(_276, _210, fma(_269, _202 * TANGENT.x, (_188 * _180) * _267));
    float _282 = fma(_276, _211, fma(_269, _202 * TANGENT.y, (_188 * _181) * _267));
    float _285 = fma(_276, _212, fma(_269, _202 * TANGENT.z, (_188 * _182) * _267));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _296 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _297 = _296 * _290;
    float _298 = _296 * _291;
    float _299 = _296 * _292;
    float _3196 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _300 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _301 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    float _3218 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3229 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3240 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3251 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _305 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _414 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _417 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = (_430 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3262 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _445 = 1.0 - _305;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _305;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _305;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _471 = _468.x * TEXCOORD_1.w;
    float _472 = dot(vec3(_297, _298, _299), vec3(_381, _382, _383));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _297) - _381;
    float _480 = (_475 * _298) - _382;
    float _481 = (_475 * _299) - _383;
    float _485 = abs(dot(vec3(_381, _382, _383), vec3(_297, _298, _299)));
    float _3295 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_301);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _297;
        float _604 = _539 + _298;
        float _605 = _543 + _299;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_297, _298, _299), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3343 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_297, _298, _299), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3376 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_297, _298, _299), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3409 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _297;
        float _918 = _539 + _298;
        float _919 = _543 + _299;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_297, _298, _299), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3472 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_297, _298, _299), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3505 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_297, _298, _299), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3538 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1355 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1358 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1386;
        if (_1352 > 0.0)
        {
            _1386 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1386 = frontier_phi_16_14_ladder;
        }
        float _1594;
        if (_1355 > 0.0)
        {
            _1594 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1594 = frontier_phi_25_21_ladder;
        }
        float _1848;
        if (_1358 > 0.0)
        {
            _1848 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1848 = frontier_phi_37_32_ladder;
        }
        float _1850 = isnan(_1594) ? _1386 : (isnan(_1386) ? _1594 : min(_1386, _1594));
        float _1851 = isnan(_1848) ? _1850 : (isnan(_1850) ? _1848 : min(_1850, _1848));
        float _1855 = (_1851 * _1352) + _1341;
        float _1856 = (_1851 * _1355) + _1345;
        float _1857 = (_1851 * _1358) + _1349;
        float _1858 = _1851 * 9.9999997473787516355514526367188e-05;
        float _1860 = (-1.0) - _1858;
        float _1862 = _1858 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1857 > _1862) || ((_1857 < _1860) || ((_1856 > _1862) || ((_1856 < _1860) || ((_1855 < _1860) || (_1855 > _1862))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1857, cbModelParam._m0[9u].z, fma(_1856, cbModelParam._m0[9u].y, _1855 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1857, cbModelParam._m0[10u].z, fma(_1856, cbModelParam._m0[10u].y, _1855 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1857, cbModelParam._m0[11u].z, fma(_1856, cbModelParam._m0[11u].y, _1855 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_15_37_ladder = _1985.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1985.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1985.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_15_37_ladder_2;
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1382 : min(cbModelParam._m0[25u].w, _1382));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1454 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1457 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1599;
        if (_1451 > 0.0)
        {
            _1599 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1599 = frontier_phi_27_23_ladder;
        }
        float _1875;
        if (_1454 > 0.0)
        {
            _1875 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1875 = frontier_phi_39_34_ladder;
        }
        float _2088;
        if (_1457 > 0.0)
        {
            _2088 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2088 = frontier_phi_48_45_ladder;
        }
        float _2090 = isnan(_1875) ? _1599 : (isnan(_1599) ? _1875 : min(_1599, _1875));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1451) + _1440;
        float _2096 = (_2091 * _1454) + _1444;
        float _2097 = (_2091 * _1457) + _1448;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2098;
        float _2101 = _2098 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2097 > _2101) || ((_2097 < _2099) || ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 < _2099) || (_2095 > _2101))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2097, cbModelParam._m0[17u].z, fma(_2096, cbModelParam._m0[17u].y, _2095 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2097, cbModelParam._m0[18u].z, fma(_2096, cbModelParam._m0[18u].y, _2095 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2097, cbModelParam._m0[19u].z, fma(_2096, cbModelParam._m0[19u].y, _2095 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_24_48_ladder = _2297.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2297.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2297.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_24_48_ladder_2;
        _1478 = frontier_phi_24_48_ladder_1;
        _1480 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1493 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1500 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    uvec4 _1516 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1518 = _1516.x * 14u;
    uint _1519 = _1518 + 13u;
    float _1526 = _471 + (-1.0);
    float _1531 = (cbLight._m0[_1519].x * _1526) + 1.0;
    float _1532 = (cbLight._m0[_1519].y * _1526) + 1.0;
    float _1533 = (cbLight._m0[_1519].z * _1526) + 1.0;
    float _1534 = (cbLight._m0[_1519].w * _1526) + 1.0;
    uint _1535 = _1518 + 5u;
    float _1541 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1545 = _1518 + 4u;
    float _1552 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
    uint _1556 = _1518 | 1u;
    float _1567 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_297, _298, _299));
    float _1570 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_297, _298, _299));
    float _3674 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _3685 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1575 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.3183098733425140380859375;
    float _1577 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.3183098733425140380859375;
    float _1584 = ((cbLight._m0[_1535].x * _1541) * _1577) + ((cbLight._m0[_1545].x * _1552) * _1575);
    float _1585 = ((_1541 * cbLight._m0[_1535].y) * _1577) + ((_1552 * cbLight._m0[_1545].y) * _1575);
    float _1586 = ((_1541 * cbLight._m0[_1535].z) * _1577) + ((_1552 * cbLight._m0[_1545].z) * _1575);
    uvec4 _1591 = floatBitsToUint(cbLight._m0[_1518 + 12u]);
    bool _1593 = _1591.x == 0u;
    float _1604;
    float _1606;
    float _1608;
    if (_1593)
    {
        _1604 = _1584;
        _1606 = _1585;
        _1608 = _1586;
    }
    else
    {
        uint _1612 = _1518 + 6u;
        float _1628 = (dot(vec3(cbLight._m0[_1518 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1629 = _1628 * _1628;
        float _3696 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1631 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1604 = (((cbLight._m0[_1612].x * 0.3183098733425140380859375) * _1630) * _1631) + _1584;
        _1606 = (((cbLight._m0[_1612].y * 0.3183098733425140380859375) * _1630) * _1631) + _1585;
        _1608 = (((cbLight._m0[_1612].z * 0.3183098733425140380859375) * _1630) * _1631) + _1586;
    }
    bool _1611 = _1591.y == 0u;
    float _1649;
    float _1651;
    float _1653;
    if (_1611)
    {
        _1649 = _1604;
        _1651 = _1606;
        _1653 = _1608;
    }
    else
    {
        uint _1819 = _1518 + 7u;
        float _1835 = (dot(vec3(cbLight._m0[_1518 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1836 = _1835 * _1835;
        float _3712 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1838 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1649 = (((cbLight._m0[_1819].x * 0.3183098733425140380859375) * _1837) * _1838) + _1604;
        _1651 = (((cbLight._m0[_1819].y * 0.3183098733425140380859375) * _1837) * _1838) + _1606;
        _1653 = (((cbLight._m0[_1819].z * 0.3183098733425140380859375) * _1837) * _1838) + _1608;
    }
    uint _1656 = _1518 + 8u;
    float _1669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1518].w)) * _301) * 0.949999988079071044921875);
    float _1670 = _1669 * _1669;
    float _1671 = cbLight._m0[_1518].x + _381;
    float _1672 = cbLight._m0[_1518].y + _382;
    float _1673 = cbLight._m0[_1518].z + _383;
    float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
    float _1678 = _1677 * _1671;
    float _1679 = _1677 * _1672;
    float _1680 = _1677 * _1673;
    float _1681 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1518].xyz));
    float _3728 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1685 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1686 = dot(vec3(_297, _298, _299), vec3(_1678, _1679, _1680));
    float _3750 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1689 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _1690 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_1678, _1679, _1680));
    float _3761 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1694 = _1670 * _1670;
    float _1698 = ((_1689 * _1689) * (_1694 + (-1.0))) + 1.0;
    float _1706 = exp2(log2(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * 5.0);
    float _1707 = 0.959999978542327880859375 - _453;
    float _1709 = 0.959999978542327880859375 - _454;
    float _1710 = 0.959999978542327880859375 - _455;
    float _1717 = 1.0 - _1670;
    float _1728 = (0.5 / (((_1685 * ((_1684 * _1717) + _1670)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _1717) + _1670) * _1684))) * _1684;
    float _3772 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1730 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1694 / ((_1698 * _1698) * 3.141590118408203125));
    uint _1741 = _1518 + 9u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1556].w)) * _301) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1556].x + _381;
    float _1755 = cbLight._m0[_1556].y + _382;
    float _1756 = cbLight._m0[_1556].z + _383;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1556].xyz));
    float _3783 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1768 = dot(vec3(_297, _298, _299), vec3(_1761, _1762, _1763));
    float _3794 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1772 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_1761, _1762, _1763));
    float _3805 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1776 = _1753 * _1753;
    float _1780 = ((_1771 * _1771) * (_1776 + (-1.0))) + 1.0;
    float _1787 = exp2(log2(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * 5.0);
    float _1794 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1685 * ((_1767 * _1794) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _1794) + _1753) * _1767))) * _1767;
    float _3816 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1776 / ((_1780 * _1780) * 3.141590118408203125));
    float _1816 = (((((_1787 * _1707) + _456) * cbLight._m0[_1741].x) * _1806) * _1541) + (((((_1706 * _1707) + _456) * cbLight._m0[_1656].x) * _1730) * _1552);
    float _1817 = (((((_1787 * _1709) + _458) * cbLight._m0[_1741].y) * _1806) * _1541) + (((((_1706 * _1709) + _458) * cbLight._m0[_1656].y) * _1730) * _1552);
    float _1818 = (((((_1787 * _1710) + _459) * cbLight._m0[_1741].z) * _1806) * _1541) + (((((_1706 * _1710) + _459) * cbLight._m0[_1656].z) * _1730) * _1552);
    float _1880;
    float _1882;
    float _1884;
    if (_1593)
    {
        _1880 = _1816;
        _1882 = _1817;
        _1884 = _1818;
    }
    else
    {
        uint _1886 = _1518 + 2u;
        uint _1890 = _1518 + 10u;
        float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _301) * 0.949999988079071044921875);
        float _1905 = _1904 * _1904;
        float _1906 = cbLight._m0[_1886].x + _381;
        float _1907 = cbLight._m0[_1886].y + _382;
        float _1908 = cbLight._m0[_1886].z + _383;
        float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
        float _1913 = _1912 * _1906;
        float _1914 = _1912 * _1907;
        float _1915 = _1912 * _1908;
        float _1916 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1886].xyz));
        float _3827 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1919 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1920 = dot(vec3(_297, _298, _299), vec3(_1913, _1914, _1915));
        float _3838 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1923 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1924 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_1913, _1914, _1915));
        float _3849 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1928 = _1905 * _1905;
        float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
        float _1939 = exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * 5.0);
        float _1946 = 1.0 - _1905;
        float _1956 = (0.5 / (((_1685 * ((_1919 * _1946) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _1946) + _1905) * _1919))) * _1919;
        float _3860 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1958 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
        float _1959 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1880 = (((((_1939 * _1707) + _456) * cbLight._m0[_1890].x) * _1958) * _1959) + _1816;
        _1882 = (((((_1939 * _1709) + _458) * cbLight._m0[_1890].y) * _1958) * _1959) + _1817;
        _1884 = (((((_1939 * _1710) + _459) * cbLight._m0[_1890].z) * _1958) * _1959) + _1818;
    }
    float _1994;
    float _1996;
    float _1998;
    if (_1611)
    {
        _1994 = _1880;
        _1996 = _1882;
        _1998 = _1884;
    }
    else
    {
        uint _2005 = _1518 + 3u;
        uint _2009 = _1518 + 11u;
        float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _301) * 0.949999988079071044921875);
        float _2024 = _2023 * _2023;
        float _2025 = cbLight._m0[_2005].x + _381;
        float _2026 = cbLight._m0[_2005].y + _382;
        float _2027 = cbLight._m0[_2005].z + _383;
        float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
        float _2032 = _2031 * _2025;
        float _2033 = _2031 * _2026;
        float _2034 = _2031 * _2027;
        float _2035 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2005].xyz));
        float _3876 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _2039 = dot(vec3(_297, _298, _299), vec3(_2032, _2033, _2034));
        float _3887 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _2043 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2032, _2033, _2034));
        float _3898 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2047 = _2024 * _2024;
        float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
        float _2058 = exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0);
        float _2065 = 1.0 - _2024;
        float _2075 = (0.5 / (((_1685 * ((_2038 * _2065) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _2065) + _2024) * _2038))) * _2038;
        float _3909 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1994 = (((((_2058 * _1707) + _456) * cbLight._m0[_2009].x) * _2077) * _2078) + _1880;
        _1996 = (((((_2058 * _1709) + _458) * cbLight._m0[_2009].y) * _2077) * _2078) + _1882;
        _1998 = (((((_2058 * _1710) + _459) * cbLight._m0[_2009].z) * _2077) * _2078) + _1884;
    }
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_1516.y == 0u)
    {
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2153;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2153;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2153;
        uvec4 _2168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2169 = _2168.x;
        uint _2180 = uint((float(_2168.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2169))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2169)));
        float _2190 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2191 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        uint _2194 = uint(isnan(14.0) ? _2191 : (isnan(_2191) ? 14.0 : min(_2191, 14.0)));
        uvec4 _2199 = texelFetch(g_lightClusterGridBuffer, int(((_2194 << 2u) + (_2180 << 6u)) >> 2u));
        uint _2200 = _2199.x;
        uint _2201 = _2168.z;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        if (((((1u << ((_2201 >> 4u) & 15u)) + 4294967295u) & _2200) == 0u) || ((_2201 & 240u) == 0u))
        {
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
        }
        else
        {
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2462)
                {
                    frontier_phi_63_pred = _2451;
                    frontier_phi_63_pred_1 = _2450;
                    frontier_phi_63_pred_2 = _2449;
                    frontier_phi_63_pred_3 = _2448;
                    frontier_phi_63_pred_4 = _2447;
                    frontier_phi_63_pred_5 = _2446;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _2154;
                        float _2637 = _2596.y - _2155;
                        float _2638 = _2596.z - _2156;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2646 = dot(vec3(_411, _414, _417), vec3(_2643, _2644, _2645));
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3935 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * _2646) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _2154;
                        float _2672 = (-0.0) - _2155;
                        float _2673 = (-0.0) - _2156;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2688 = exp2(log2(1.0 / ((_2663 * 3.5) + 5.0)) * 0.25);
                        float _2689 = 1.0 - _487;
                        float _2696 = sqrt(1.0 - ((1.0 - (_2689 * _2689)) * (1.0 - (_2688 * _2688))));
                        float _2697 = _2696 * _2696;
                        float _2698 = _2697 * _2697;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2709 = dot(vec3(_411, _414, _417), vec3(_2678, _2679, _2680));
                        float _3951 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2713 = dot(vec3(_411, _414, _417), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701));
                        float _3962 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2720 = ((_2716 * _2716) * (_2698 + (-1.0))) + 1.0;
                        float _2721 = _2656 * _2697;
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2646) + _2722;
                        float _3973 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2726 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2727 = 1.0 - _2697;
                        float _2737 = (0.5 / (((_2726 * ((_2712 * _2727) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2727) + _2697) * _2712))) * _2726;
                        float _3984 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2748 = (((_2698 * 3.1415927410125732421875) * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) / ((_2720 * _2720) * ((_2663 * 2.1991131305694580078125) + 3.141590118408203125))) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2748 * _2632.x) + _2570;
                        _2503 = (_2748 * _2632.y) + _2571;
                        _2504 = (_2748 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_63_pred = _2507;
                    frontier_phi_63_pred_1 = _2506;
                    frontier_phi_63_pred_2 = _2505;
                    frontier_phi_63_pred_3 = _2504;
                    frontier_phi_63_pred_4 = _2503;
                    frontier_phi_63_pred_5 = _2502;
                }
                _2313 = frontier_phi_63_pred;
                _2311 = frontier_phi_63_pred_1;
                _2309 = frontier_phi_63_pred_2;
                _2307 = frontier_phi_63_pred_3;
                _2305 = frontier_phi_63_pred_4;
                _2303 = frontier_phi_63_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2303;
                    _2447 = _2305;
                    _2448 = _2307;
                    _2449 = _2309;
                    _2450 = _2311;
                    _2451 = _2313;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
        }
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.z;
        uint _2319 = (_2317 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2319) & _2200) == 0u)
        {
            _2414 = _2302;
            _2416 = _2304;
            _2418 = _2306;
            _2420 = _2308;
            _2422 = _2310;
            _2424 = _2312;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _2440 = _2439 * _2154;
            float _2441 = _2439 * _2155;
            float _2442 = _2439 * _2156;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2319 < ((_2317 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2553 = _2302;
                float _2554 = _2304;
                float _2555 = _2306;
                float _2556 = _2308;
                float _2557 = _2310;
                float _2558 = _2312;
                uint _2559 = _2319;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2569)
                    {
                        frontier_phi_69_pred = _2558;
                        frontier_phi_69_pred_1 = _2557;
                        frontier_phi_69_pred_2 = _2556;
                        frontier_phi_69_pred_3 = _2555;
                        frontier_phi_69_pred_4 = _2554;
                        frontier_phi_69_pred_5 = _2553;
                    }
                    else
                    {
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        uint _2772 = _2568;
                        uint _2773;
                        vec4 _2798;
                        float _2799;
                        vec4 _2814;
                        vec3 _2826;
                        vec4 _2842;
                        vec4 _2858;
                        float _2905;
                        bool _2906;
                        for (;;)
                        {
                            uint _2783 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2772));
                            _2773 = (_2772 + 4294967295u) & _2772;
                            uint _2785 = _2783 * 40u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            _2799 = _2798.w;
                            uint _2801 = (_2783 * 40u) + 4u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2783 * 40u) + 8u;
                            _2826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x));
                            uint _2829 = (_2783 * 40u) + 16u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2845 = (_2783 * 40u) + 20u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2783 * 40u) + 24u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2880 = (_2783 * 40u) + 28u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2905 = fma(_2156, _2893.z, fma(_2155, _2893.y, _2893.x * _2154)) + _2893.w;
                            _2906 = !((fma(_2156, _2874.z, fma(_2155, _2874.y, _2874.x * _2154)) + _2874.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2906)
                            {
                                float _2933 = _2798.x - _2154;
                                float _2934 = _2798.y - _2155;
                                float _2935 = _2798.z - _2156;
                                float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                                float _2939 = inversesqrt(_2936);
                                float _2940 = _2939 * _2933;
                                float _2941 = _2939 * _2934;
                                float _2942 = _2939 * _2935;
                                float _2946 = 1.0 - (_2936 / (_2799 * _2799));
                                float _3995 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2947 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                                float _2951 = sqrt(_2936) * _2814.w;
                                float _2953 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                                float _2954 = _2953 * _2953;
                                float _2957 = ((1.0 - _2954) * dot(vec3(_2940, _2941, _2942), vec3(_411, _414, _417))) + _2954;
                                float _2960 = _2951 * _2951;
                                float _2964 = (fma(_2156, _2842.z, fma(_2155, _2842.y, _2842.x * _2154)) + _2842.w) / _2905;
                                float _2965 = (fma(_2156, _2858.z, fma(_2155, _2858.y, _2858.x * _2154)) + _2858.w) / _2905;
                                float _2969 = 1.0 - dot(vec2(_2964, _2965), vec2(_2964, _2965));
                                float _4011 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _2971 = _2970 * (((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2947) / ((_2960 * 0.699999988079071044921875) + 1.0));
                                float _2983 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                                float _2984 = 1.0 - _487;
                                float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                                float _2992 = _2991 * _2991;
                                float _2993 = _2992 * _2992;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2996 = _2942 - _2442;
                                float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                                float _3004 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _4022 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _3008 = dot(vec3(_411, _414, _417), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                                float _4033 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                                float _3016 = _2953 * _2992;
                                float _3017 = _3016 * _3016;
                                float _3023 = ((1.0 - _3017) * dot(vec3(_411, _414, _417), vec3(_2940, _2941, _2942))) + _3017;
                                float _4044 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3025 = 1.0 - _2992;
                                float _3035 = (0.5 / (((_3024 * ((_3007 * _3025) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2992) * _3007))) * _3024;
                                float _4055 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3045 = (_2970 * _2947) * (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) / ((_3015 * _3015) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2971 * _2814.z;
                                frontier_phi_75_pred_1 = _2971 * _2814.y;
                                frontier_phi_75_pred_2 = _2971 * _2814.x;
                                frontier_phi_75_pred_3 = _3045 * _2826.z;
                                frontier_phi_75_pred_4 = _3045 * _2826.y;
                                frontier_phi_75_pred_5 = _3045 * _2826.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3054 = frontier_phi_75_pred;
                            _3053 = frontier_phi_75_pred_1;
                            _3052 = frontier_phi_75_pred_2;
                            _3051 = frontier_phi_75_pred_3;
                            _3050 = frontier_phi_75_pred_4;
                            _3049 = frontier_phi_75_pred_5;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            if (_2773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2773;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2758;
                        frontier_phi_69_pred_1 = _2757;
                        frontier_phi_69_pred_2 = _2756;
                        frontier_phi_69_pred_3 = _2755;
                        frontier_phi_69_pred_4 = _2754;
                        frontier_phi_69_pred_5 = _2753;
                    }
                    _2425 = frontier_phi_69_pred;
                    _2423 = frontier_phi_69_pred_1;
                    _2421 = frontier_phi_69_pred_2;
                    _2419 = frontier_phi_69_pred_3;
                    _2417 = frontier_phi_69_pred_4;
                    _2415 = frontier_phi_69_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2415;
                        _2554 = _2417;
                        _2555 = _2419;
                        _2556 = _2421;
                        _2557 = _2423;
                        _2558 = _2425;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2425;
                frontier_phi_57_58_ladder_1 = _2423;
                frontier_phi_57_58_ladder_2 = _2421;
                frontier_phi_57_58_ladder_3 = _2419;
                frontier_phi_57_58_ladder_4 = _2417;
                frontier_phi_57_58_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_57_58_ladder = _2312;
                frontier_phi_57_58_ladder_1 = _2310;
                frontier_phi_57_58_ladder_2 = _2308;
                frontier_phi_57_58_ladder_3 = _2306;
                frontier_phi_57_58_ladder_4 = _2304;
                frontier_phi_57_58_ladder_5 = _2302;
            }
            _2414 = frontier_phi_57_58_ladder_5;
            _2416 = frontier_phi_57_58_ladder_4;
            _2418 = frontier_phi_57_58_ladder_3;
            _2420 = frontier_phi_57_58_ladder_2;
            _2422 = frontier_phi_57_58_ladder_1;
            _2424 = frontier_phi_57_58_ladder;
        }
        float _2429 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2212 = (_2429 * _2420) + _1649;
        _2214 = (_2429 * _2422) + _1651;
        _2216 = (_2429 * _2424) + _1653;
        _2218 = ((_2414 * _456) * _2429) + _1994;
        _2220 = ((_2416 * _458) * _2429) + _1996;
        _2222 = ((_2418 * _459) * _2429) + _1998;
    }
    else
    {
        _2212 = _1649;
        _2214 = _1651;
        _2216 = _1653;
        _2218 = _1994;
        _2220 = _1996;
        _2222 = _1998;
    }
    float _4071 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4082 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4093 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4104 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _2247 = cbInstanceData._m0[_430 + 6u].w * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)));
    float _2252 = _389 / cbSceneParam._m0[86u].x;
    float _2253 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2267 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2269 = _2267.x;
    float _2270 = _2267.y;
    float _2271 = _2267.z;
    float _2272 = _2267.w;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2327 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2328 = _2327 / _321;
        float _2339 = _2328 * _374;
        float _2340 = _375 * _2328;
        float _2341 = (-0.0) - _2340;
        float _2342 = _2328 * _376;
        float _2344 = (cbSceneParam._m0[77u].w * _2341) / _2327;
        float _2345 = _2344 + cbSceneParam._m0[79u].w;
        float _2346 = cbSceneParam._m0[79u].w - _2340;
        float _2352 = sqrt(((_2339 * _2339) + (_2340 * _2340)) + (_2342 * _2342));
        float _2355 = (1.0 - (cbSceneParam._m0[77u].w / _2327)) * _2352;
        float _2360 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2362 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2341 - _2344) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2345 > 0.0) ? exp2(_2360 * _2345) : (2.0 - exp2(_2362 * _2345))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2355;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : max(_2345, _2346));
            float _2477 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : min(_2345, _2346));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2352 / _2341) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2360 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2360 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2362 * _2486) - exp2(_2362 * _2487)) * _2475))) + (_2355 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2272);
        _2364 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2269;
        _2366 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2270;
        _2368 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2271;
        _2370 = _2526 * _2272;
    }
    else
    {
        _2364 = _2269;
        _2366 = _2270;
        _2368 = _2271;
        _2370 = _2272;
    }
    float _2382 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2383 = _2382 == 3.0;
    float _2384 = log2(_2370);
    float _2391 = exp2(_2384 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2212 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _471))) + ((_2218 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2392 = exp2(_2384 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2214 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _471))) + ((_2220 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2393 = exp2(_2384 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2216 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _471))) + ((_2222 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2402 = (_2382 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2402 * (_2383 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2364)));
    SV_Target.y = _2402 * (_2383 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.z = _2402 * (_2383 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.w = _2247;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2247;
}


