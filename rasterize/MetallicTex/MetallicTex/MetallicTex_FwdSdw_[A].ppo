#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicTex_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicTex_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D MetallicTex_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _895;
float _3571;
float _3572;
float _3573;
float _3574;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(MetallicTex_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _234.x;
    float _238 = _234.y;
    float _239 = _234.z;
    float _240 = _234.w;
    float _241 = _240 * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(MetallicTex_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _253.x;
    vec4 _267 = texture(sampler2D(MetallicTex_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3583 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))));
    float _287 = fma(_284, _218, fma(_277, _210 * TANGENT.x, (_196 * _188) * _275));
    float _290 = fma(_284, _219, fma(_277, _210 * TANGENT.y, (_196 * _189) * _275));
    float _293 = fma(_284, _220, fma(_277, _210 * TANGENT.z, (_196 * _190) * _275));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _304 * _298;
    float _306 = _304 * _299;
    float _307 = _304 * _300;
    float _3594 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _308 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _309 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3627 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3638 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3649 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _313 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _329 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _372 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _382 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _372);
    float _383 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _372);
    float _384 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _372);
    float _388 = inversesqrt(dot(vec3(_382, _383, _384), vec3(_382, _383, _384)));
    float _389 = _382 * _388;
    float _390 = _383 * _388;
    float _391 = _384 * _388;
    vec4 _396 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _398 = _396.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _574 = sqrt(((_382 * _382) + (_383 * _383)) + (_384 * _384));
        float _580 = (cbMatDynParam._m0[5u].x * _574) + cbMatDynParam._m0[5u].y;
        float _3660 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _581 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _585 = (cbMatDynParam._m0[5u].z * _574) + cbMatDynParam._m0[5u].w;
        float _3671 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) - _581)) + _581) < ((_398 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _431 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _434 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _437 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _450 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = _450 + 9u;
    uint _453 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _459 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_453].x;
    float _460 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_453].y;
    float _461 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_453].z;
    float _3682 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _465 = 1.0 - _313;
    float _466 = _462 * _465;
    float _467 = _463 * _465;
    float _468 = _464 * _465;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _313;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _313;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _313;
    float _476 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    vec4 _488 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _491 = _488.x * TEXCOORD_1.w;
    float _492 = dot(vec3(_305, _306, _307), vec3(_389, _390, _391));
    float _495 = _492 * 2.0;
    float _499 = (_495 * _305) - _389;
    float _500 = (_495 * _306) - _390;
    float _501 = (_495 * _307) - _391;
    float _505 = abs(dot(vec3(_389, _390, _391), vec3(_305, _306, _307)));
    float _3715 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = sqrt(_309);
    float _520 = exp2((_507 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_507 * 3.0));
    float _526 = (1.0 - _520) * ((_507 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _527 = _520 * _507;
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _894;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_563, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555));
        float _623 = fma(_563, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555));
        float _627 = fma(_563, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555));
        float _652 = _555 + _305;
        float _653 = _559 + _306;
        float _654 = _563 + _307;
        float _664 = fma(_654, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652)) - _619;
        float _665 = fma(_654, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652)) - _623;
        float _666 = fma(_654, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652)) - _627;
        float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
        float _683 = ((_670 * _664) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_670 * _665) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_670 * _666) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_688.x + (-0.5));
        float _724 = _722 * (_688.y + (-0.5));
        float _725 = _722 * (_688.z + (-0.5));
        float _732 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_695.x + (-0.5));
        float _734 = _732 * (_695.y + (-0.5));
        float _735 = _732 * (_695.z + (-0.5));
        float _742 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_702.x + (-0.5));
        float _744 = _742 * (_702.y + (-0.5));
        float _745 = _742 * (_702.z + (-0.5));
        float _752 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_709.x + (-0.5));
        float _754 = _752 * (_709.y + (-0.5));
        float _755 = _752 * (_709.z + (-0.5));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = _723 * 0.5;
        float _760 = _733 * 0.5;
        float _761 = _743 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_305, _306, _307), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3763 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_788 + 1.0))) + _793) * _756;
        float _803 = _724 * 0.5;
        float _804 = _734 * 0.5;
        float _805 = _744 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_305, _306, _307), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3796 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_830 + 1.0))) + _835) * _757;
        float _845 = _725 * 0.5;
        float _846 = _735 * 0.5;
        float _847 = _745 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_305, _306, _307), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3829 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_872 + 1.0))) + _877) * _758;
        _894 = _725;
        _896 = _724;
        _897 = _723;
        _898 = _735;
        _899 = _734;
        _900 = _733;
        _901 = _745;
        _902 = _744;
        _903 = _743;
        _904 = _758;
        _905 = _757;
        _906 = _756;
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
    }
    else
    {
        _894 = _895;
        _896 = _895;
        _897 = _895;
        _898 = _895;
        _899 = _895;
        _900 = _895;
        _901 = _895;
        _902 = _895;
        _903 = _895;
        _904 = _895;
        _905 = _895;
        _906 = _895;
        _907 = 0.0;
        _908 = 0.0;
        _909 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_563, cbModelParam._m0[30u].z, fma(_559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _555));
        float _942 = fma(_563, cbModelParam._m0[31u].z, fma(_559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _555));
        float _946 = fma(_563, cbModelParam._m0[32u].z, fma(_559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _555));
        float _969 = _555 + _305;
        float _970 = _559 + _306;
        float _971 = _563 + _307;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_305, _306, _307), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3892 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_305, _306, _307), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3925 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_305, _306, _307), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3958 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _895;
        _1208 = _895;
        _1209 = _895;
        _1210 = _895;
        _1211 = _895;
        _1212 = _895;
        _1213 = _895;
        _1214 = _895;
        _1215 = _895;
        _1216 = _895;
        _1217 = _895;
        _1218 = _895;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _499 * 0.5;
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_894, _898, _901, _904));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_896, _899, _902, _905));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _900, _903, _906));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_563, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_563, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_563, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1407 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1410 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1438 = frontier_phi_19_17_ladder;
        }
        float _1614;
        if (_1407 > 0.0)
        {
            _1614 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1614 = frontier_phi_28_24_ladder;
        }
        float _1910;
        if (_1410 > 0.0)
        {
            _1910 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1910 = frontier_phi_40_35_ladder;
        }
        float _1912 = isnan(_1614) ? _1438 : (isnan(_1438) ? _1614 : min(_1438, _1614));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1404) + _1393;
        float _1918 = (_1913 * _1407) + _1397;
        float _1919 = (_1913 * _1410) + _1401;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_18_40_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_18_40_ladder_2;
        _1428 = frontier_phi_18_40_ladder_1;
        _1430 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_563, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_563, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_563, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1506 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1509 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1619;
        if (_1503 > 0.0)
        {
            _1619 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1619 = frontier_phi_30_26_ladder;
        }
        float _1937;
        if (_1506 > 0.0)
        {
            _1937 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1937 = frontier_phi_42_37_ladder;
        }
        float _2275;
        if (_1509 > 0.0)
        {
            _2275 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2275 = frontier_phi_52_49_ladder;
        }
        float _2277 = isnan(_1937) ? _1619 : (isnan(_1619) ? _1937 : min(_1619, _1937));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1503) + _1492;
        float _2283 = (_2278 * _1506) + _1496;
        float _2284 = (_2278 * _1509) + _1500;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2285;
        float _2288 = _2285 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2284 > _2288) || ((_2284 < _2286) || ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 < _2286) || (_2282 > _2288))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2284, cbModelParam._m0[17u].z, fma(_2283, cbModelParam._m0[17u].y, _2282 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2284, cbModelParam._m0[18u].z, fma(_2283, cbModelParam._m0[18u].y, _2282 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2284, cbModelParam._m0[19u].z, fma(_2283, cbModelParam._m0[19u].y, _2282 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_27_52_ladder = _2406.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2406.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2406.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_27_52_ladder_2;
        _1530 = frontier_phi_27_52_ladder_1;
        _1532 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1545 = (((_526 * _476) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_526 * _478) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_526 * _479) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    float _1593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1601 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1606 = _1593 / _1605;
    float _1607 = _1597 / _1605;
    float _1608 = _1601 / _1605;
    float _1755;
    float _1756;
    float _1757;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1635 = ((uint(_1608 > cbSceneParam._m0[59u].y) + uint(_1608 > cbSceneParam._m0[59u].x)) + uint(_1608 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1636 = _1635 + 43u;
        uint _1644 = _1635 + 44u;
        uint _1652 = _1635 + 45u;
        uint _1660 = _1635 + 46u;
        float _1671 = fma(_1605, cbSceneParam._m0[_1636].w, fma(_1601, cbSceneParam._m0[_1636].z, fma(_1597, cbSceneParam._m0[_1636].y, _1593 * cbSceneParam._m0[_1636].x)));
        float _1675 = fma(_1605, cbSceneParam._m0[_1644].w, fma(_1601, cbSceneParam._m0[_1644].z, fma(_1597, cbSceneParam._m0[_1644].y, _1593 * cbSceneParam._m0[_1644].x)));
        float _1683 = fma(_1605, cbSceneParam._m0[_1660].w, fma(_1601, cbSceneParam._m0[_1660].z, fma(_1597, cbSceneParam._m0[_1660].y, _1593 * cbSceneParam._m0[_1660].x)));
        float _1688 = cbSceneParam._m0[33u].z * _1683;
        float _1690 = cbSceneParam._m0[33u].w * _1683;
        float _1693 = fma(_1605, cbSceneParam._m0[_1652].w, fma(_1601, cbSceneParam._m0[_1652].z, fma(_1597, cbSceneParam._m0[_1652].y, _1593 * cbSceneParam._m0[_1652].x))) / _1683;
        float _1741 = (cbSceneParam._m0[33u].x - sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608))) * cbSceneParam._m0[33u].y;
        float _4084 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1748 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1688 + _1671) / _1683, (_1690 + _1675) / _1683), _1693), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 + _1671) / _1683, (_1675 - _1688) / _1683), _1693), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1671 - _1688) / _1683, (_1675 - _1690) / _1683), _1693), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1671 - _1690) / _1683, (_1688 + _1675) / _1683), _1693), 0.0)).x), vec4(0.25)));
        _1755 = 1.0 - (_1748 * cbSceneParam._m0[34u].x);
        _1756 = 1.0 - (_1748 * cbSceneParam._m0[34u].y);
        _1757 = 1.0 - (_1748 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1755 = 1.0;
        _1756 = 1.0;
        _1757 = 1.0;
    }
    float _1821;
    float _1823;
    float _1825;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1809 = fma(_1605, cbSceneParam._m0[63u].w, fma(_1601, cbSceneParam._m0[63u].z, fma(_1597, cbSceneParam._m0[63u].y, _1593 * cbSceneParam._m0[63u].x)));
        float _1810 = fma(_1605, cbSceneParam._m0[60u].w, fma(_1601, cbSceneParam._m0[60u].z, fma(_1597, cbSceneParam._m0[60u].y, _1593 * cbSceneParam._m0[60u].x))) / _1809;
        float _1811 = fma(_1605, cbSceneParam._m0[61u].w, fma(_1601, cbSceneParam._m0[61u].z, fma(_1597, cbSceneParam._m0[61u].y, _1593 * cbSceneParam._m0[61u].x))) / _1809;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1810 >= cbSceneParam._m0[64u].x) && (_1811 >= cbSceneParam._m0[64u].y)) && (_1810 <= cbSceneParam._m0[64u].z)) && (_1811 <= cbSceneParam._m0[64u].w))
        {
            float _1950 = fma(_1605, cbSceneParam._m0[62u].w, fma(_1601, cbSceneParam._m0[62u].z, fma(_1597, cbSceneParam._m0[62u].y, _1593 * cbSceneParam._m0[62u].x))) / _1809;
            float _1954 = isnan(cbSceneParam._m0[41u].w) ? _1950 : (isnan(_1950) ? cbSceneParam._m0[41u].w : max(_1950, cbSceneParam._m0[41u].w));
            float _1997 = (cbSceneParam._m0[33u].x - sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608))) * cbSceneParam._m0[33u].y;
            float _4100 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
            float _2004 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1810, cbSceneParam._m0[33u].w + _1811), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1810, _1811 - cbSceneParam._m0[33u].z), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1810 - cbSceneParam._m0[33u].z, _1811 - cbSceneParam._m0[33u].w), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1810 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1811), _1954), 0.0)).x), vec4(0.25)));
            float _2008 = 1.0 - (_2004 * cbSceneParam._m0[34u].x);
            float _2009 = 1.0 - (_2004 * cbSceneParam._m0[34u].y);
            float _2010 = 1.0 - (_2004 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2009) ? _1756 : (isnan(_1756) ? _2009 : min(_1756, _2009));
            frontier_phi_39_38_ladder_1 = isnan(_2008) ? _1755 : (isnan(_1755) ? _2008 : min(_1755, _2008));
            frontier_phi_39_38_ladder_2 = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
        }
        else
        {
            frontier_phi_39_38_ladder = _1756;
            frontier_phi_39_38_ladder_1 = _1755;
            frontier_phi_39_38_ladder_2 = _1757;
        }
        _1821 = frontier_phi_39_38_ladder_1;
        _1823 = frontier_phi_39_38_ladder;
        _1825 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1821 = _1755;
        _1823 = _1756;
        _1825 = _1757;
    }
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_450 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _491 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1869 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1873 = _1832 | 1u;
    float _1884 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_305, _306, _307));
    float _1887 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_305, _306, _307));
    float _4136 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _4147 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1892 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1894 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1901 = ((cbLight._m0[_1849].x * _1855) * _1894) + (((cbLight._m0[_1859].x * _1821) * _1869) * _1892);
    float _1902 = ((_1855 * cbLight._m0[_1849].y) * _1894) + (((cbLight._m0[_1859].y * _1823) * _1869) * _1892);
    float _1903 = ((_1855 * cbLight._m0[_1849].z) * _1894) + (((cbLight._m0[_1859].z * _1825) * _1869) * _1892);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1909)
    {
        _2011 = _1901;
        _2013 = _1902;
        _2015 = _1903;
    }
    else
    {
        uint _2019 = _1832 + 6u;
        float _2035 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _4158 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2038 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2011 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1901;
        _2013 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1902;
        _2015 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1903;
    }
    bool _2018 = _1907.y == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2018)
    {
        _2073 = _2011;
        _2075 = _2013;
        _2077 = _2015;
    }
    else
    {
        uint _2246 = _1832 + 7u;
        float _2262 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4174 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2265 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2073 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2011;
        _2075 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2013;
        _2077 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2015;
    }
    uint _2080 = _1832 + 8u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _309) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_1832].x + _389;
    float _2096 = cbLight._m0[_1832].y + _390;
    float _2097 = cbLight._m0[_1832].z + _391;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1832].xyz));
    float _4190 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _2109 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2110 = dot(vec3(_305, _306, _307), vec3(_2102, _2103, _2104));
    float _4212 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_2102, _2103, _2104));
    float _4223 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2094 * _2094;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2131 = 0.959999978542327880859375 - _473;
    float _2133 = 0.959999978542327880859375 - _474;
    float _2134 = 0.959999978542327880859375 - _475;
    float _2141 = 1.0 - _2094;
    float _2152 = (0.5 / (((_2109 * ((_2108 * _2141) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2141) + _2094) * _2108))) * _2108;
    float _4234 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2154 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    uint _2168 = _1832 + 9u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _309) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_1873].x + _389;
    float _2182 = cbLight._m0[_1873].y + _390;
    float _2183 = cbLight._m0[_1873].z + _391;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1873].xyz));
    float _4245 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2195 = dot(vec3(_305, _306, _307), vec3(_2188, _2189, _2190));
    float _4256 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2188, _2189, _2190));
    float _4267 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2180 * _2180;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2221 = 1.0 - _2180;
    float _2231 = (0.5 / (((_2109 * ((_2194 * _2221) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2221) + _2180) * _2194))) * _2194;
    float _4278 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    float _2243 = (((((_2214 * _2131) + _476) * cbLight._m0[_2168].x) * _2233) * _1855) + ((((cbLight._m0[_2080].x * _1821) * ((_2130 * _2131) + _476)) * _2154) * _1869);
    float _2244 = (((((_2214 * _2133) + _478) * cbLight._m0[_2168].y) * _2233) * _1855) + ((((cbLight._m0[_2080].y * _1823) * ((_2130 * _2133) + _478)) * _2154) * _1869);
    float _2245 = (((((_2214 * _2134) + _479) * cbLight._m0[_2168].z) * _2233) * _1855) + ((((cbLight._m0[_2080].z * _1825) * ((_2130 * _2134) + _479)) * _2154) * _1869);
    float _2301;
    float _2303;
    float _2305;
    if (_1909)
    {
        _2301 = _2243;
        _2303 = _2244;
        _2305 = _2245;
    }
    else
    {
        uint _2307 = _1832 + 2u;
        uint _2311 = _1832 + 10u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _309) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _389;
        float _2328 = cbLight._m0[_2307].y + _390;
        float _2329 = cbLight._m0[_2307].z + _391;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2307].xyz));
        float _4289 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2341 = dot(vec3(_305, _306, _307), vec3(_2334, _2335, _2336));
        float _4300 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4311 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2367 = 1.0 - _2326;
        float _2377 = (0.5 / (((_2109 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2367) + _2326) * _2340))) * _2340;
        float _4322 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2301 = (((((_2360 * _2131) + _476) * cbLight._m0[_2311].x) * _2379) * _2380) + _2243;
        _2303 = (((((_2360 * _2133) + _478) * cbLight._m0[_2311].y) * _2379) * _2380) + _2244;
        _2305 = (((((_2360 * _2134) + _479) * cbLight._m0[_2311].z) * _2379) * _2380) + _2245;
    }
    float _2411;
    float _2413;
    float _2415;
    if (_2018)
    {
        _2411 = _2301;
        _2413 = _2303;
        _2415 = _2305;
    }
    else
    {
        uint _2422 = _1832 + 3u;
        uint _2426 = _1832 + 11u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _309) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _389;
        float _2443 = cbLight._m0[_2422].y + _390;
        float _2444 = cbLight._m0[_2422].z + _391;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2422].xyz));
        float _4338 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2456 = dot(vec3(_305, _306, _307), vec3(_2449, _2450, _2451));
        float _4349 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4360 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2482 = 1.0 - _2441;
        float _2492 = (0.5 / (((_2109 * ((_2455 * _2482) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2482) + _2441) * _2455))) * _2455;
        float _4371 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2411 = (((((_2475 * _2131) + _476) * cbLight._m0[_2426].x) * _2494) * _2495) + _2301;
        _2413 = (((((_2475 * _2133) + _478) * cbLight._m0[_2426].y) * _2494) * _2495) + _2303;
        _2415 = (((((_2475 * _2134) + _479) * cbLight._m0[_2426].z) * _2494) * _2495) + _2305;
    }
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_1830.y == 0u)
    {
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.x;
        uint _2528 = uint((float(_2516.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2517))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2517)));
        float _2538 = (log2(_1608 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2539 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        uint _2542 = uint(isnan(14.0) ? _2539 : (isnan(_2539) ? 14.0 : min(_2539, 14.0)));
        uvec4 _2547 = texelFetch(g_lightClusterGridBuffer, int(((_2542 << 2u) + (_2528 << 6u)) >> 2u));
        uint _2548 = _2547.x;
        uint _2549 = _2516.z;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((((1u << ((_2549 >> 4u) & 15u)) + 4294967295u) & _2548) == 0u) || ((_2549 & 240u) == 0u))
        {
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
        }
        else
        {
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2797)
                {
                    frontier_phi_73_pred = _2786;
                    frontier_phi_73_pred_1 = _2785;
                    frontier_phi_73_pred_2 = _2784;
                    frontier_phi_73_pred_3 = _2783;
                    frontier_phi_73_pred_4 = _2782;
                    frontier_phi_73_pred_5 = _2781;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2796;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2787 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _1606;
                        float _2993 = _2952.y - _1607;
                        float _2994 = _2952.z - _1608;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_431, _434, _437), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4397 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _1606;
                        float _3028 = (-0.0) - _1607;
                        float _3029 = (-0.0) - _1608;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3043 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _507;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3056 = _3036 + _3001;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_431, _434, _437), vec3(_3034, _3035, _3036));
                        float _4413 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3068 = dot(vec3(_431, _434, _437), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4424 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3012 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3002) + _3077;
                        float _4435 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4446 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3075 * _3075) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2856 = (_3023 * _2971.x) + _2929;
                        _2857 = (_3023 * _2971.y) + _2930;
                        _2858 = (_3023 * _2971.z) + _2931;
                        _2853 = (_3103 * _2988.x) + _2926;
                        _2854 = (_3103 * _2988.y) + _2927;
                        _2855 = (_3103 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_73_pred = _2858;
                    frontier_phi_73_pred_1 = _2857;
                    frontier_phi_73_pred_2 = _2856;
                    frontier_phi_73_pred_3 = _2855;
                    frontier_phi_73_pred_4 = _2854;
                    frontier_phi_73_pred_5 = _2853;
                }
                _2640 = frontier_phi_73_pred;
                _2638 = frontier_phi_73_pred_1;
                _2636 = frontier_phi_73_pred_2;
                _2634 = frontier_phi_73_pred_3;
                _2632 = frontier_phi_73_pred_4;
                _2630 = frontier_phi_73_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2630;
                    _2782 = _2632;
                    _2783 = _2634;
                    _2784 = _2636;
                    _2785 = _2638;
                    _2786 = _2640;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
        }
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.z;
        uint _2646 = (_2644 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2646) & _2548) == 0u)
        {
            _2749 = _2629;
            _2751 = _2631;
            _2753 = _2633;
            _2755 = _2635;
            _2757 = _2637;
            _2759 = _2639;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
            float _2775 = _2774 * _1606;
            float _2776 = _2774 * _1607;
            float _2777 = _2774 * _1608;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2646 < ((_2644 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2909 = _2629;
                float _2910 = _2631;
                float _2911 = _2633;
                float _2912 = _2635;
                float _2913 = _2637;
                float _2914 = _2639;
                uint _2915 = _2646;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2925)
                    {
                        frontier_phi_84_pred = _2913;
                        frontier_phi_84_pred_1 = _2912;
                        frontier_phi_84_pred_2 = _2911;
                        frontier_phi_84_pred_3 = _2910;
                        frontier_phi_84_pred_4 = _2909;
                        frontier_phi_84_pred_5 = _2914;
                    }
                    else
                    {
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3130 = _2909;
                        float _3131 = _2910;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        uint _3136 = _2924;
                        uint _3137;
                        vec4 _3162;
                        float _3163;
                        vec4 _3178;
                        vec3 _3190;
                        vec4 _3206;
                        vec4 _3222;
                        float _3269;
                        bool _3270;
                        for (;;)
                        {
                            uint _3147 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3136));
                            _3137 = (_3136 + 4294967295u) & _3136;
                            uint _3149 = _3147 * 40u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3163 = _3162.w;
                            uint _3165 = (_3147 * 40u) + 4u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3147 * 40u) + 8u;
                            _3190 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x));
                            uint _3193 = (_3147 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3209 = (_3147 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3225 = (_3147 * 40u) + 24u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3244 = (_3147 * 40u) + 28u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            _3269 = fma(_1608, _3257.z, fma(_1607, _3257.y, _3257.x * _1606)) + _3257.w;
                            _3270 = !((fma(_1608, _3238.z, fma(_1607, _3238.y, _3238.x * _1606)) + _3238.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3270)
                            {
                                float _3297 = _3162.x - _1606;
                                float _3298 = _3162.y - _1607;
                                float _3299 = _3162.z - _1608;
                                float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                                float _3303 = inversesqrt(_3300);
                                float _3304 = _3303 * _3297;
                                float _3305 = _3303 * _3298;
                                float _3306 = _3303 * _3299;
                                float _3310 = 1.0 - (_3300 / (_3163 * _3163));
                                float _4457 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3315 = sqrt(_3300) * _3178.w;
                                float _3317 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                                float _3318 = _3317 * _3317;
                                float _3321 = ((1.0 - _3318) * dot(vec3(_3304, _3305, _3306), vec3(_431, _434, _437))) + _3318;
                                float _3324 = _3315 * _3315;
                                float _3328 = (fma(_1608, _3206.z, fma(_1607, _3206.y, _3206.x * _1606)) + _3206.w) / _3269;
                                float _3329 = (fma(_1608, _3222.z, fma(_1607, _3222.y, _3222.x * _1606)) + _3222.w) / _3269;
                                float _3333 = 1.0 - dot(vec2(_3328, _3329), vec2(_3328, _3329));
                                float _4473 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3335 = _3334 * (((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3311) / ((_3324 * 0.699999988079071044921875) + 1.0));
                                float _3347 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                                float _3348 = 1.0 - _507;
                                float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                                float _3356 = _3355 * _3355;
                                float _3357 = _3356 * _3356;
                                float _3358 = _3304 - _2775;
                                float _3359 = _3305 - _2776;
                                float _3360 = _3306 - _2777;
                                float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                                float _3368 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4484 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3372 = dot(vec3(_431, _434, _437), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                                float _4495 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                                float _3380 = _3317 * _3356;
                                float _3381 = _3380 * _3380;
                                float _3387 = ((1.0 - _3381) * dot(vec3(_431, _434, _437), vec3(_3304, _3305, _3306))) + _3381;
                                float _4506 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3389 = 1.0 - _3356;
                                float _3399 = (0.5 / (((_3388 * ((_3371 * _3389) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3356) * _3371))) * _3388;
                                float _4517 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3409 = (_3334 * _3311) * (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3379 * _3379) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3335 * _3178.y;
                                frontier_phi_90_pred_1 = _3335 * _3178.x;
                                frontier_phi_90_pred_2 = _3409 * _3190.z;
                                frontier_phi_90_pred_3 = _3409 * _3190.y;
                                frontier_phi_90_pred_4 = _3409 * _3190.x;
                                frontier_phi_90_pred_5 = _3335 * _3178.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_90_pred;
                            _3416 = frontier_phi_90_pred_1;
                            _3415 = frontier_phi_90_pred_2;
                            _3414 = frontier_phi_90_pred_3;
                            _3413 = frontier_phi_90_pred_4;
                            _3418 = frontier_phi_90_pred_5;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3117 = _3413 + _3130;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            if (_3137 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3137;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3121;
                        frontier_phi_84_pred_1 = _3120;
                        frontier_phi_84_pred_2 = _3119;
                        frontier_phi_84_pred_3 = _3118;
                        frontier_phi_84_pred_4 = _3117;
                        frontier_phi_84_pred_5 = _3122;
                    }
                    _2758 = frontier_phi_84_pred;
                    _2756 = frontier_phi_84_pred_1;
                    _2754 = frontier_phi_84_pred_2;
                    _2752 = frontier_phi_84_pred_3;
                    _2750 = frontier_phi_84_pred_4;
                    _2760 = frontier_phi_84_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2750;
                        _2910 = _2752;
                        _2911 = _2754;
                        _2912 = _2756;
                        _2913 = _2758;
                        _2914 = _2760;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2760;
                frontier_phi_65_66_ladder_1 = _2756;
                frontier_phi_65_66_ladder_2 = _2758;
                frontier_phi_65_66_ladder_3 = _2752;
                frontier_phi_65_66_ladder_4 = _2750;
                frontier_phi_65_66_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_65_66_ladder = _2639;
                frontier_phi_65_66_ladder_1 = _2635;
                frontier_phi_65_66_ladder_2 = _2637;
                frontier_phi_65_66_ladder_3 = _2631;
                frontier_phi_65_66_ladder_4 = _2629;
                frontier_phi_65_66_ladder_5 = _2633;
            }
            _2749 = frontier_phi_65_66_ladder_4;
            _2751 = frontier_phi_65_66_ladder_3;
            _2753 = frontier_phi_65_66_ladder_5;
            _2755 = frontier_phi_65_66_ladder_1;
            _2757 = frontier_phi_65_66_ladder_2;
            _2759 = frontier_phi_65_66_ladder;
        }
        float _2764 = isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0));
        _2560 = (_2764 * _2755) + _2073;
        _2562 = (_2764 * _2757) + _2075;
        _2564 = (_2764 * _2759) + _2077;
        _2566 = ((_2749 * _476) * _2764) + _2411;
        _2568 = ((_2751 * _478) * _2764) + _2413;
        _2570 = ((_2753 * _479) * _2764) + _2415;
    }
    else
    {
        _2560 = _2073;
        _2562 = _2075;
        _2564 = _2077;
        _2566 = _2411;
        _2568 = _2413;
        _2570 = _2415;
    }
    float _4533 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4544 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4555 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4566 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _2588 = ((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2560 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _491))) + ((_2566 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2562 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _491))) + ((_2568 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2564 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _491))) + ((_2570 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2595 = cbInstanceData._m0[_450 + 6u].w * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)));
    float _2600 = _410 / cbSceneParam._m0[86u].x;
    float _2601 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2615 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, (log2((isnan(cbSceneParam._m0[77u].w) ? _329 : (isnan(_329) ? cbSceneParam._m0[77u].w : min(_329, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2617 = _2615.x;
    float _2618 = _2615.y;
    float _2619 = _2615.z;
    float _2620 = _2615.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_329 > cbSceneParam._m0[78u].w)
    {
        float _2654 = isnan(_329) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _329 : min(cbSceneParam._m0[80u].w, _329));
        float _2655 = _2654 / _329;
        float _2666 = _2655 * _382;
        float _2667 = _383 * _2655;
        float _2668 = (-0.0) - _2667;
        float _2669 = _2655 * _384;
        float _2671 = (cbSceneParam._m0[77u].w * _2668) / _2654;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2667;
        float _2679 = sqrt(((_2666 * _2666) + (_2667 * _2667)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2654)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2668 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2812 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2866 = ((abs(_2679 / _2668) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2689 * _2821) - exp2(_2689 * _2822)) * _2810))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2620);
        _2691 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2617;
        _2693 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2618;
        _2695 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2619;
        _2697 = _2877 * _2620;
    }
    else
    {
        _2691 = _2617;
        _2693 = _2618;
        _2695 = _2619;
        _2697 = _2620;
    }
    bool _2904;
    vec4 _2707;
    vec4 _2729;
    float _2731;
    float _2735;
    float _2736;
    float _2737;
    float _2738;
    bool _2748;
    for (;;)
    {
        _2707 = cbMatDynParam._m0[0u];
        float _2709 = roundEven(_2707.y);
        bool _2710 = _2709 == 3.0;
        float _2711 = log2(_2697);
        float _2718 = exp2(_2711 * cbSceneParam._m0[78u].x) * _2588;
        float _2719 = exp2(_2711 * cbSceneParam._m0[78u].y) * _2589;
        float _2720 = exp2(_2711 * cbSceneParam._m0[78u].z) * _2590;
        float _2727 = _398 + (-0.5);
        _2729 = cbMtdParam._m0[1u];
        _2731 = _2729.y * _2727;
        float _2734 = (_2709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2735 = _2734 * (_2710 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2691)));
        _2736 = _2734 * (_2710 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2693)));
        _2737 = _2734 * (_2710 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2695)));
        _2738 = _2727 * 0.999000012874603271484375;
        _2748 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2748)
        {
            if ((cbInstanceData._m0[_450 + 7u].x + _2738) < 0.5)
            {
                _2904 = true;
                break;
            }
        }
        uint _2845 = _452 + uint(_2707.w);
        if ((cbInstanceData._m0[_2845].w < 1.0) && ((cbInstanceData._m0[_2845].w + _2738) < 0.5))
        {
            _2904 = true;
            break;
        }
        if ((_2731 + _240) < _2729.x)
        {
            _2904 = true;
            break;
        }
        _2904 = false;
        break;
    }
    float _3108;
    if (_2904)
    {
        discard_state = true;
        _3108 = 0.0;
    }
    else
    {
        _3108 = _2595;
    }
    SV_Target.x = _2735;
    SV_Target.y = _2736;
    SV_Target.z = _2737;
    SV_Target.w = _3108;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2595;
    discard_exit();
}


