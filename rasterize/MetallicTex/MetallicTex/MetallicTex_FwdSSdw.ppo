#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicTex_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicTex_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D MetallicTex_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(MetallicTex_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _235 = _228.w * TEXCOORD_1.z;
    vec4 _247 = texture(sampler2D(MetallicTex_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _247.x;
    vec4 _261 = texture(sampler2D(MetallicTex_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3211 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))));
    float _281 = fma(_278, _212, fma(_271, _204 * TANGENT.x, (_190 * _182) * _269));
    float _284 = fma(_278, _213, fma(_271, _204 * TANGENT.y, (_190 * _183) * _269));
    float _287 = fma(_278, _214, fma(_271, _204 * TANGENT.z, (_190 * _184) * _269));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _298 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _299 = _298 * _292;
    float _300 = _298 * _293;
    float _301 = _298 * _294;
    float _3222 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _302 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _303 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _3244 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3255 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3266 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3277 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _307 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _416 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _419 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = (_432 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3288 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _447 = 1.0 - _307;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _307;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _307;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _473 = _470.x * TEXCOORD_1.w;
    float _474 = dot(vec3(_299, _300, _301), vec3(_383, _384, _385));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _299) - _383;
    float _482 = (_477 * _300) - _384;
    float _483 = (_477 * _301) - _385;
    float _487 = abs(dot(vec3(_383, _384, _385), vec3(_299, _300, _301)));
    float _3321 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_303);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _299;
        float _606 = _541 + _300;
        float _607 = _545 + _301;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_299, _300, _301), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3369 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_299, _300, _301), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3402 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_299, _300, _301), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3435 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _299;
        float _920 = _541 + _300;
        float _921 = _545 + _301;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_299, _300, _301), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3498 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_299, _300, _301), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3531 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_299, _300, _301), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3564 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1357 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1360 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1388 = frontier_phi_16_14_ladder;
        }
        float _1617;
        if (_1357 > 0.0)
        {
            _1617 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1617 = frontier_phi_25_21_ladder;
        }
        float _1874;
        if (_1360 > 0.0)
        {
            _1874 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1874 = frontier_phi_37_32_ladder;
        }
        float _1876 = isnan(_1617) ? _1388 : (isnan(_1388) ? _1617 : min(_1388, _1617));
        float _1877 = isnan(_1874) ? _1876 : (isnan(_1876) ? _1874 : min(_1876, _1874));
        float _1881 = (_1877 * _1354) + _1343;
        float _1882 = (_1877 * _1357) + _1347;
        float _1883 = (_1877 * _1360) + _1351;
        float _1884 = _1877 * 9.9999997473787516355514526367188e-05;
        float _1886 = (-1.0) - _1884;
        float _1888 = _1884 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1883 > _1888) || ((_1883 < _1886) || ((_1882 > _1888) || ((_1882 < _1886) || ((_1881 < _1886) || (_1881 > _1888))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1883, cbModelParam._m0[9u].z, fma(_1882, cbModelParam._m0[9u].y, _1881 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1883, cbModelParam._m0[10u].z, fma(_1882, cbModelParam._m0[10u].y, _1881 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1883, cbModelParam._m0[11u].z, fma(_1882, cbModelParam._m0[11u].y, _1881 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_15_37_ladder = _2011.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2011.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2011.x * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_15_37_ladder_2;
        _1378 = frontier_phi_15_37_ladder_1;
        _1380 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1456 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1459 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1622;
        if (_1453 > 0.0)
        {
            _1622 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1622 = frontier_phi_27_23_ladder;
        }
        float _1901;
        if (_1456 > 0.0)
        {
            _1901 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1901 = frontier_phi_39_34_ladder;
        }
        float _2114;
        if (_1459 > 0.0)
        {
            _2114 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2114 = frontier_phi_48_45_ladder;
        }
        float _2116 = isnan(_1901) ? _1622 : (isnan(_1622) ? _1901 : min(_1622, _1901));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1453) + _1442;
        float _2122 = (_2117 * _1456) + _1446;
        float _2123 = (_2117 * _1459) + _1450;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2124;
        float _2127 = _2124 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2123 > _2127) || ((_2123 < _2125) || ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 < _2125) || (_2121 > _2127))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2123, cbModelParam._m0[17u].z, fma(_2122, cbModelParam._m0[17u].y, _2121 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2123, cbModelParam._m0[18u].z, fma(_2122, cbModelParam._m0[18u].y, _2121 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2123, cbModelParam._m0[19u].z, fma(_2122, cbModelParam._m0[19u].y, _2121 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_24_48_ladder = _2323.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2323.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2323.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_24_48_ladder_2;
        _1480 = frontier_phi_24_48_ladder_1;
        _1482 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1495 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    vec4 _1516 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_391, _392));
    float _1518 = _1516.w;
    float _1530 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1518);
    float _1531 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1518);
    float _1532 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1518);
    uvec4 _1536 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1538 = _1536.x * 14u;
    uint _1539 = _1538 + 13u;
    float _1546 = _473 + (-1.0);
    float _1551 = (cbLight._m0[_1539].x * _1546) + 1.0;
    float _1552 = (cbLight._m0[_1539].y * _1546) + 1.0;
    float _1553 = (cbLight._m0[_1539].z * _1546) + 1.0;
    float _1554 = (cbLight._m0[_1539].w * _1546) + 1.0;
    uint _1555 = _1538 + 5u;
    float _1561 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1565 = _1538 + 4u;
    float _1575 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1579 = _1538 | 1u;
    float _1590 = dot(vec3(cbLight._m0[_1538].xyz), vec3(_299, _300, _301));
    float _1593 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_299, _300, _301));
    float _3700 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _3711 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1598 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.3183098733425140380859375;
    float _1600 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1607 = ((cbLight._m0[_1555].x * _1561) * _1600) + (((cbLight._m0[_1565].x * _1530) * _1575) * _1598);
    float _1608 = ((_1561 * cbLight._m0[_1555].y) * _1600) + (((cbLight._m0[_1565].y * _1531) * _1575) * _1598);
    float _1609 = ((_1561 * cbLight._m0[_1555].z) * _1600) + (((cbLight._m0[_1565].z * _1532) * _1575) * _1598);
    uvec4 _1614 = floatBitsToUint(cbLight._m0[_1538 + 12u]);
    bool _1616 = _1614.x == 0u;
    float _1627;
    float _1629;
    float _1631;
    if (_1616)
    {
        _1627 = _1607;
        _1629 = _1608;
        _1631 = _1609;
    }
    else
    {
        uint _1635 = _1538 + 6u;
        float _1651 = (dot(vec3(cbLight._m0[_1538 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1652 = _1651 * _1651;
        float _3722 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1654 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1627 = (((cbLight._m0[_1635].x * 0.3183098733425140380859375) * _1653) * _1654) + _1607;
        _1629 = (((cbLight._m0[_1635].y * 0.3183098733425140380859375) * _1653) * _1654) + _1608;
        _1631 = (((cbLight._m0[_1635].z * 0.3183098733425140380859375) * _1653) * _1654) + _1609;
    }
    bool _1634 = _1614.y == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1634)
    {
        _1672 = _1627;
        _1674 = _1629;
        _1676 = _1631;
    }
    else
    {
        uint _1845 = _1538 + 7u;
        float _1861 = (dot(vec3(cbLight._m0[_1538 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _3738 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1864 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1672 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1627;
        _1674 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1629;
        _1676 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1631;
    }
    uint _1679 = _1538 + 8u;
    float _1692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1538].w)) * _303) * 0.949999988079071044921875);
    float _1693 = _1692 * _1692;
    float _1694 = cbLight._m0[_1538].x + _383;
    float _1695 = cbLight._m0[_1538].y + _384;
    float _1696 = cbLight._m0[_1538].z + _385;
    float _1700 = inversesqrt(dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696)));
    float _1701 = _1700 * _1694;
    float _1702 = _1700 * _1695;
    float _1703 = _1700 * _1696;
    float _1704 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1538].xyz));
    float _3754 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1708 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _1709 = dot(vec3(_299, _300, _301), vec3(_1701, _1702, _1703));
    float _3776 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1538].xyz), vec3(_1701, _1702, _1703));
    float _3787 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1717 = _1693 * _1693;
    float _1721 = ((_1712 * _1712) * (_1717 + (-1.0))) + 1.0;
    float _1729 = exp2(log2(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * 5.0);
    float _1730 = 0.959999978542327880859375 - _455;
    float _1732 = 0.959999978542327880859375 - _456;
    float _1733 = 0.959999978542327880859375 - _457;
    float _1740 = 1.0 - _1693;
    float _1751 = (0.5 / (((_1708 * ((_1707 * _1740) + _1693)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1740) + _1693) * _1707))) * _1707;
    float _3798 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1753 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1717 / ((_1721 * _1721) * 3.141590118408203125));
    uint _1767 = _1538 + 9u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _303) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1579].x + _383;
    float _1781 = cbLight._m0[_1579].y + _384;
    float _1782 = cbLight._m0[_1579].z + _385;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1579].xyz));
    float _3809 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1794 = dot(vec3(_299, _300, _301), vec3(_1787, _1788, _1789));
    float _3820 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1787, _1788, _1789));
    float _3831 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1779 * _1779;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1813 = exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0);
    float _1820 = 1.0 - _1779;
    float _1830 = (0.5 / (((_1708 * ((_1793 * _1820) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1820) + _1779) * _1793))) * _1793;
    float _3842 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1832 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    float _1842 = (((((_1813 * _1730) + _458) * cbLight._m0[_1767].x) * _1832) * _1561) + ((((cbLight._m0[_1679].x * _1530) * ((_1729 * _1730) + _458)) * _1753) * _1575);
    float _1843 = (((((_1813 * _1732) + _460) * cbLight._m0[_1767].y) * _1832) * _1561) + ((((cbLight._m0[_1679].y * _1531) * ((_1729 * _1732) + _460)) * _1753) * _1575);
    float _1844 = (((((_1813 * _1733) + _461) * cbLight._m0[_1767].z) * _1832) * _1561) + ((((cbLight._m0[_1679].z * _1532) * ((_1729 * _1733) + _461)) * _1753) * _1575);
    float _1906;
    float _1908;
    float _1910;
    if (_1616)
    {
        _1906 = _1842;
        _1908 = _1843;
        _1910 = _1844;
    }
    else
    {
        uint _1912 = _1538 + 2u;
        uint _1916 = _1538 + 10u;
        float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _303) * 0.949999988079071044921875);
        float _1931 = _1930 * _1930;
        float _1932 = cbLight._m0[_1912].x + _383;
        float _1933 = cbLight._m0[_1912].y + _384;
        float _1934 = cbLight._m0[_1912].z + _385;
        float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
        float _1939 = _1938 * _1932;
        float _1940 = _1938 * _1933;
        float _1941 = _1938 * _1934;
        float _1942 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1912].xyz));
        float _3853 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1945 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1946 = dot(vec3(_299, _300, _301), vec3(_1939, _1940, _1941));
        float _3864 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1949 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1950 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_1939, _1940, _1941));
        float _3875 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1954 = _1931 * _1931;
        float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
        float _1965 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
        float _1972 = 1.0 - _1931;
        float _1982 = (0.5 / (((_1708 * ((_1945 * _1972) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1972) + _1931) * _1945))) * _1945;
        float _3886 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1984 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
        float _1985 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1906 = (((((_1965 * _1730) + _458) * cbLight._m0[_1916].x) * _1984) * _1985) + _1842;
        _1908 = (((((_1965 * _1732) + _460) * cbLight._m0[_1916].y) * _1984) * _1985) + _1843;
        _1910 = (((((_1965 * _1733) + _461) * cbLight._m0[_1916].z) * _1984) * _1985) + _1844;
    }
    float _2020;
    float _2022;
    float _2024;
    if (_1634)
    {
        _2020 = _1906;
        _2022 = _1908;
        _2024 = _1910;
    }
    else
    {
        uint _2031 = _1538 + 3u;
        uint _2035 = _1538 + 11u;
        float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _303) * 0.949999988079071044921875);
        float _2050 = _2049 * _2049;
        float _2051 = cbLight._m0[_2031].x + _383;
        float _2052 = cbLight._m0[_2031].y + _384;
        float _2053 = cbLight._m0[_2031].z + _385;
        float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
        float _2058 = _2057 * _2051;
        float _2059 = _2057 * _2052;
        float _2060 = _2057 * _2053;
        float _2061 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2031].xyz));
        float _3902 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2065 = dot(vec3(_299, _300, _301), vec3(_2058, _2059, _2060));
        float _3913 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2069 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2058, _2059, _2060));
        float _3924 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2073 = _2050 * _2050;
        float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
        float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0);
        float _2091 = 1.0 - _2050;
        float _2101 = (0.5 / (((_1708 * ((_2064 * _2091) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _2091) + _2050) * _2064))) * _2064;
        float _3935 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2103 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
        float _2104 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _2020 = (((((_2084 * _1730) + _458) * cbLight._m0[_2035].x) * _2103) * _2104) + _1906;
        _2022 = (((((_2084 * _1732) + _460) * cbLight._m0[_2035].y) * _2103) * _2104) + _1908;
        _2024 = (((((_2084 * _1733) + _461) * cbLight._m0[_2035].z) * _2103) * _2104) + _1910;
    }
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    if (_1536.y == 0u)
    {
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2179;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2179;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2179;
        uvec4 _2194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2195 = _2194.x;
        uint _2206 = uint((float(_2194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2195))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2195)));
        float _2216 = (log2(_2182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2217 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        uint _2220 = uint(isnan(14.0) ? _2217 : (isnan(_2217) ? 14.0 : min(_2217, 14.0)));
        uvec4 _2225 = texelFetch(g_lightClusterGridBuffer, int(((_2220 << 2u) + (_2206 << 6u)) >> 2u));
        uint _2226 = _2225.x;
        uint _2227 = _2194.z;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((((1u << ((_2227 >> 4u) & 15u)) + 4294967295u) & _2226) == 0u) || ((_2227 & 240u) == 0u))
        {
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
        }
        else
        {
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2488)
                {
                    frontier_phi_63_pred = _2477;
                    frontier_phi_63_pred_1 = _2476;
                    frontier_phi_63_pred_2 = _2475;
                    frontier_phi_63_pred_3 = _2474;
                    frontier_phi_63_pred_4 = _2473;
                    frontier_phi_63_pred_5 = _2472;
                }
                else
                {
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    uint _2602;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2487;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2606 = uint(findLSB(_2602)) + (_2478 << 5u);
                        uint _2603 = (_2602 + 4294967295u) & _2602;
                        uint _2608 = _2606 * 48u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2628 = (_2606 * 48u) + 4u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2647 = (_2606 * 48u) + 8u;
                        vec3 _2658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x));
                        float _2662 = _2622.x - _2180;
                        float _2663 = _2622.y - _2181;
                        float _2664 = _2622.z - _2182;
                        float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                        float _2668 = inversesqrt(_2665);
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2672 = dot(vec3(_413, _416, _419), vec3(_2669, _2670, _2671));
                        float _2677 = 1.0 - (_2665 * _2622.w);
                        float _3961 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2678 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2679 = sqrt(_2665) * _2641.w;
                        float _2682 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2672) + _2683;
                        float _2689 = _2679 * _2679;
                        float _2693 = ((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2678) / ((_2689 * 0.699999988079071044921875) + 1.0);
                        float _2697 = (-0.0) - _2180;
                        float _2698 = (-0.0) - _2181;
                        float _2699 = (-0.0) - _2182;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2704 = _2703 * _2697;
                        float _2705 = _2703 * _2698;
                        float _2706 = _2703 * _2699;
                        float _2714 = exp2(log2(1.0 / ((_2689 * 3.5) + 5.0)) * 0.25);
                        float _2715 = 1.0 - _489;
                        float _2722 = sqrt(1.0 - ((1.0 - (_2715 * _2715)) * (1.0 - (_2714 * _2714))));
                        float _2723 = _2722 * _2722;
                        float _2724 = _2723 * _2723;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2727 = _2706 + _2671;
                        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
                        float _2735 = dot(vec3(_413, _416, _419), vec3(_2704, _2705, _2706));
                        float _3977 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2739 = dot(vec3(_413, _416, _419), vec3(_2731 * _2725, _2731 * _2726, _2731 * _2727));
                        float _3988 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2742 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2746 = ((_2742 * _2742) * (_2724 + (-1.0))) + 1.0;
                        float _2747 = _2682 * _2723;
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2672) + _2748;
                        float _3999 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2753 = 1.0 - _2723;
                        float _2763 = (0.5 / (((_2752 * ((_2738 * _2753) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2752 * _2753) + _2723) * _2738))) * _2752;
                        float _4010 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2774 = (((_2724 * 3.1415927410125732421875) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) / ((_2746 * _2746) * ((_2689 * 2.1991131305694580078125) + 3.141590118408203125))) * _2678;
                        _2531 = (_2693 * _2641.x) + _2599;
                        _2532 = (_2693 * _2641.y) + _2600;
                        _2533 = (_2693 * _2641.z) + _2601;
                        _2528 = (_2774 * _2658.x) + _2596;
                        _2529 = (_2774 * _2658.y) + _2597;
                        _2530 = (_2774 * _2658.z) + _2598;
                        if (_2603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2603;
                        }
                    }
                    frontier_phi_63_pred = _2533;
                    frontier_phi_63_pred_1 = _2532;
                    frontier_phi_63_pred_2 = _2531;
                    frontier_phi_63_pred_3 = _2530;
                    frontier_phi_63_pred_4 = _2529;
                    frontier_phi_63_pred_5 = _2528;
                }
                _2339 = frontier_phi_63_pred;
                _2337 = frontier_phi_63_pred_1;
                _2335 = frontier_phi_63_pred_2;
                _2333 = frontier_phi_63_pred_3;
                _2331 = frontier_phi_63_pred_4;
                _2329 = frontier_phi_63_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2329;
                    _2473 = _2331;
                    _2474 = _2333;
                    _2475 = _2335;
                    _2476 = _2337;
                    _2477 = _2339;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
        }
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.z;
        uint _2345 = (_2343 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2345) & _2226) == 0u)
        {
            _2440 = _2328;
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
            float _2466 = _2465 * _2180;
            float _2467 = _2465 * _2181;
            float _2468 = _2465 * _2182;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2345 < ((_2343 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2579 = _2328;
                float _2580 = _2330;
                float _2581 = _2332;
                float _2582 = _2334;
                float _2583 = _2336;
                float _2584 = _2338;
                uint _2585 = _2345;
                uint _2594;
                bool _2595;
                for (;;)
                {
                    _2594 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                    _2595 = _2594 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2595)
                    {
                        frontier_phi_69_pred = _2584;
                        frontier_phi_69_pred_1 = _2583;
                        frontier_phi_69_pred_2 = _2582;
                        frontier_phi_69_pred_3 = _2581;
                        frontier_phi_69_pred_4 = _2580;
                        frontier_phi_69_pred_5 = _2579;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        uint _2798 = _2594;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2868;
                        vec4 _2884;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2809 = ((_2585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2855 = (_2809 * 40u) + 16u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2809 * 40u) + 20u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2809 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2809 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2182, _2919.z, fma(_2181, _2919.y, _2919.x * _2180)) + _2919.w;
                            _2932 = !((fma(_2182, _2900.z, fma(_2181, _2900.y, _2900.x * _2180)) + _2900.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2824.x - _2180;
                                float _2960 = _2824.y - _2181;
                                float _2961 = _2824.z - _2182;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2825 * _2825));
                                float _4021 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _2977 = sqrt(_2962) * _2840.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_413, _416, _419))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2182, _2868.z, fma(_2181, _2868.y, _2868.x * _2180)) + _2868.w) / _2931;
                                float _2991 = (fma(_2182, _2884.z, fma(_2181, _2884.y, _2884.x * _2180)) + _2884.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _4037 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _489;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3022 = _2968 - _2468;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4048 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3034 = dot(vec3(_413, _416, _419), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _4059 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_413, _416, _419), vec3(_2966, _2967, _2968))) + _3043;
                                float _4070 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _4081 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2997 * _2840.z;
                                frontier_phi_75_pred_1 = _2997 * _2840.y;
                                frontier_phi_75_pred_2 = _2997 * _2840.x;
                                frontier_phi_75_pred_3 = _3071 * _2852.z;
                                frontier_phi_75_pred_4 = _3071 * _2852.y;
                                frontier_phi_75_pred_5 = _3071 * _2852.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3080 = frontier_phi_75_pred;
                            _3079 = frontier_phi_75_pred_1;
                            _3078 = frontier_phi_75_pred_2;
                            _3077 = frontier_phi_75_pred_3;
                            _3076 = frontier_phi_75_pred_4;
                            _3075 = frontier_phi_75_pred_5;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2784;
                        frontier_phi_69_pred_1 = _2783;
                        frontier_phi_69_pred_2 = _2782;
                        frontier_phi_69_pred_3 = _2781;
                        frontier_phi_69_pred_4 = _2780;
                        frontier_phi_69_pred_5 = _2779;
                    }
                    _2451 = frontier_phi_69_pred;
                    _2449 = frontier_phi_69_pred_1;
                    _2447 = frontier_phi_69_pred_2;
                    _2445 = frontier_phi_69_pred_3;
                    _2443 = frontier_phi_69_pred_4;
                    _2441 = frontier_phi_69_pred_5;
                    uint _2586 = _2585 + 1u;
                    if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2579 = _2441;
                        _2580 = _2443;
                        _2581 = _2445;
                        _2582 = _2447;
                        _2583 = _2449;
                        _2584 = _2451;
                        _2585 = _2586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2451;
                frontier_phi_57_58_ladder_1 = _2449;
                frontier_phi_57_58_ladder_2 = _2447;
                frontier_phi_57_58_ladder_3 = _2445;
                frontier_phi_57_58_ladder_4 = _2443;
                frontier_phi_57_58_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_57_58_ladder = _2338;
                frontier_phi_57_58_ladder_1 = _2336;
                frontier_phi_57_58_ladder_2 = _2334;
                frontier_phi_57_58_ladder_3 = _2332;
                frontier_phi_57_58_ladder_4 = _2330;
                frontier_phi_57_58_ladder_5 = _2328;
            }
            _2440 = frontier_phi_57_58_ladder_5;
            _2442 = frontier_phi_57_58_ladder_4;
            _2444 = frontier_phi_57_58_ladder_3;
            _2446 = frontier_phi_57_58_ladder_2;
            _2448 = frontier_phi_57_58_ladder_1;
            _2450 = frontier_phi_57_58_ladder;
        }
        float _2455 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2238 = (_2455 * _2446) + _1672;
        _2240 = (_2455 * _2448) + _1674;
        _2242 = (_2455 * _2450) + _1676;
        _2244 = ((_2440 * _458) * _2455) + _2020;
        _2246 = ((_2442 * _460) * _2455) + _2022;
        _2248 = ((_2444 * _461) * _2455) + _2024;
    }
    else
    {
        _2238 = _1672;
        _2240 = _1674;
        _2242 = _1676;
        _2244 = _2020;
        _2246 = _2022;
        _2248 = _2024;
    }
    float _4097 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4108 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4119 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4130 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2273 = cbInstanceData._m0[_432 + 6u].w * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)));
    float _2278 = _391 / cbSceneParam._m0[86u].x;
    float _2279 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2293 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2295 = _2293.x;
    float _2296 = _2293.y;
    float _2297 = _2293.z;
    float _2298 = _2293.w;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2353 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2354 = _2353 / _323;
        float _2365 = _2354 * _376;
        float _2366 = _377 * _2354;
        float _2367 = (-0.0) - _2366;
        float _2368 = _2354 * _378;
        float _2370 = (cbSceneParam._m0[77u].w * _2367) / _2353;
        float _2371 = _2370 + cbSceneParam._m0[79u].w;
        float _2372 = cbSceneParam._m0[79u].w - _2366;
        float _2378 = sqrt(((_2365 * _2365) + (_2366 * _2366)) + (_2368 * _2368));
        float _2381 = (1.0 - (cbSceneParam._m0[77u].w / _2353)) * _2378;
        float _2386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2541;
        if (abs((_2367 - _2370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2541 = ((((_2371 > 0.0) ? exp2(_2386 * _2371) : (2.0 - exp2(_2388 * _2371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2381;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : max(_2371, _2372));
            float _2503 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : min(_2371, _2372));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2541 = ((abs(_2378 / _2367) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2386 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2386 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2388 * _2512) - exp2(_2388 * _2513)) * _2501))) + (_2381 * cbSceneParam._m0[80u].z);
        }
        vec4 _2543 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, 1.0), 0.0);
        float _2552 = exp2((_2541 * (-1.44269502162933349609375)) * (1.0 - _2543.w));
        float _2553 = log2(_2552);
        float _2569 = log2(_2298);
        _2390 = (exp2(_2569 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].x)) * _2543.x) / cbSceneParam._m0[78u].x)) + _2295;
        _2392 = (exp2(_2569 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].y)) * _2543.y) / cbSceneParam._m0[78u].y)) + _2296;
        _2394 = (exp2(_2569 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].z)) * _2543.z) / cbSceneParam._m0[78u].z)) + _2297;
        _2396 = _2552 * _2298;
    }
    else
    {
        _2390 = _2295;
        _2392 = _2296;
        _2394 = _2297;
        _2396 = _2298;
    }
    float _2408 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2409 = _2408 == 3.0;
    float _2410 = log2(_2396);
    float _2417 = exp2(_2410 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2238 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _473))) + ((_2244 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2410 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2240 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _473))) + ((_2246 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2419 = exp2(_2410 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2242 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _473))) + ((_2248 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2428 = (_2408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2428 * (_2409 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.y = _2428 * (_2409 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.z = _2428 * (_2409 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.w = _2273;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2273;
}


