#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec2 TEXCOORD;
layout(location = 8) in vec4 TEXCOORD_1;
layout(location = 9) in vec4 TEXCOORD_2;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out vec4 TEXCOORD_4;
layout(location = 6) out vec4 TEXCOORD_9;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_4.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _194 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _206 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _207 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _208 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _218 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _220 = texelFetch(g_InstanceIndexBuffer, int(_218));
    uint _221 = _220.x;
    precise float _222 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _227 = isnan(_222) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _222 : max(0.001000000047497451305389404296875, _222));
    precise float _229 = BLENDWEIGHT.x / _227;
    precise float _230 = BLENDWEIGHT.y / _227;
    precise float _231 = BLENDWEIGHT.z / _227;
    precise float _232 = BLENDWEIGHT.w / _227;
    uint _234 = _221 * 13u;
    uvec4 _239 = floatBitsToUint(cbInstanceData._m0[_234 + 4u]);
    uint _240 = _239.x;
    uint _242 = (_240 + uint(float(BLENDINDICES.x))) * 3u;
    uint _249 = _242 + 1u;
    uint _256 = _242 + 2u;
    precise float _263 = _229 * cbObjMatrix._m0[_242].x;
    precise float _264 = _229 * cbObjMatrix._m0[_249].x;
    precise float _265 = _229 * cbObjMatrix._m0[_256].x;
    precise float _266 = _229 * cbObjMatrix._m0[_242].y;
    precise float _267 = _229 * cbObjMatrix._m0[_249].y;
    precise float _268 = _229 * cbObjMatrix._m0[_256].y;
    precise float _269 = _229 * cbObjMatrix._m0[_242].z;
    precise float _270 = _229 * cbObjMatrix._m0[_249].z;
    precise float _271 = _229 * cbObjMatrix._m0[_256].z;
    precise float _272 = _229 * cbObjMatrix._m0[_242].w;
    precise float _273 = _229 * cbObjMatrix._m0[_249].w;
    precise float _274 = _229 * cbObjMatrix._m0[_256].w;
    uint _277 = (_240 + uint(float(BLENDINDICES.y))) * 3u;
    uint _284 = _277 + 1u;
    uint _291 = _277 + 2u;
    precise float _298 = _230 * cbObjMatrix._m0[_277].x;
    precise float _299 = _230 * cbObjMatrix._m0[_284].x;
    precise float _300 = _230 * cbObjMatrix._m0[_291].x;
    precise float _301 = _230 * cbObjMatrix._m0[_277].y;
    precise float _302 = _230 * cbObjMatrix._m0[_284].y;
    precise float _303 = _230 * cbObjMatrix._m0[_291].y;
    precise float _304 = _230 * cbObjMatrix._m0[_277].z;
    precise float _305 = _230 * cbObjMatrix._m0[_284].z;
    precise float _306 = _230 * cbObjMatrix._m0[_291].z;
    precise float _307 = _230 * cbObjMatrix._m0[_277].w;
    precise float _308 = _230 * cbObjMatrix._m0[_284].w;
    precise float _309 = _230 * cbObjMatrix._m0[_291].w;
    precise float _310 = _263 + _298;
    precise float _311 = _264 + _299;
    precise float _312 = _265 + _300;
    precise float _313 = _266 + _301;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    uint _324 = (_240 + uint(float(BLENDINDICES.z))) * 3u;
    uint _331 = _324 + 1u;
    uint _338 = _324 + 2u;
    precise float _345 = _231 * cbObjMatrix._m0[_324].x;
    precise float _346 = _231 * cbObjMatrix._m0[_331].x;
    precise float _347 = _231 * cbObjMatrix._m0[_338].x;
    precise float _348 = _231 * cbObjMatrix._m0[_324].y;
    precise float _349 = _231 * cbObjMatrix._m0[_331].y;
    precise float _350 = _231 * cbObjMatrix._m0[_338].y;
    precise float _351 = _231 * cbObjMatrix._m0[_324].z;
    precise float _352 = _231 * cbObjMatrix._m0[_331].z;
    precise float _353 = _231 * cbObjMatrix._m0[_338].z;
    precise float _354 = _231 * cbObjMatrix._m0[_324].w;
    precise float _355 = _231 * cbObjMatrix._m0[_331].w;
    precise float _356 = _231 * cbObjMatrix._m0[_338].w;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    precise float _359 = _312 + _347;
    precise float _360 = _313 + _348;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    uint _371 = (_240 + uint(float(BLENDINDICES.w))) * 3u;
    uint _378 = _371 + 1u;
    uint _385 = _371 + 2u;
    precise float _392 = _232 * cbObjMatrix._m0[_371].x;
    precise float _393 = _232 * cbObjMatrix._m0[_378].x;
    precise float _394 = _232 * cbObjMatrix._m0[_385].x;
    precise float _395 = _232 * cbObjMatrix._m0[_371].y;
    precise float _396 = _232 * cbObjMatrix._m0[_378].y;
    precise float _397 = _232 * cbObjMatrix._m0[_385].y;
    precise float _398 = _232 * cbObjMatrix._m0[_371].z;
    precise float _399 = _232 * cbObjMatrix._m0[_378].z;
    precise float _400 = _232 * cbObjMatrix._m0[_385].z;
    precise float _401 = _232 * cbObjMatrix._m0[_371].w;
    precise float _402 = _232 * cbObjMatrix._m0[_378].w;
    precise float _403 = _232 * cbObjMatrix._m0[_385].w;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = POSITION.x * _404;
    precise float _417 = POSITION.y * _407;
    precise float _418 = _417 + _416;
    precise float _419 = POSITION.z * _410;
    precise float _420 = _419 + _418;
    precise float _421 = 1.0 * _413;
    precise float _422 = _421 + _420;
    precise float _423 = POSITION.x * _405;
    precise float _424 = POSITION.y * _408;
    precise float _425 = _424 + _423;
    precise float _426 = POSITION.z * _411;
    precise float _427 = _426 + _425;
    precise float _428 = 1.0 * _414;
    precise float _429 = _428 + _427;
    precise float _430 = POSITION.x * _406;
    precise float _431 = POSITION.y * _409;
    precise float _432 = _431 + _430;
    precise float _433 = POSITION.z * _412;
    precise float _434 = _433 + _432;
    precise float _435 = 1.0 * _415;
    precise float _436 = _435 + _434;
    precise float _461 = _422 - cbSceneParam._m0[3u].x;
    precise float _462 = _429 - cbSceneParam._m0[3u].y;
    precise float _463 = _436 - cbSceneParam._m0[3u].z;
    precise float _491 = _461 * cbSceneParam._m0[24u].x;
    precise float _492 = _462 * cbSceneParam._m0[24u].y;
    precise float _493 = _492 + _491;
    precise float _494 = _463 * cbSceneParam._m0[24u].z;
    precise float _495 = _494 + _493;
    precise float _496 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _497 = _496 + _495;
    precise float _498 = _461 * cbSceneParam._m0[25u].x;
    precise float _499 = _462 * cbSceneParam._m0[25u].y;
    precise float _500 = _499 + _498;
    precise float _501 = _463 * cbSceneParam._m0[25u].z;
    precise float _502 = _501 + _500;
    precise float _503 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _504 = _503 + _502;
    precise float _505 = _461 * cbSceneParam._m0[26u].x;
    precise float _506 = _462 * cbSceneParam._m0[26u].y;
    precise float _507 = _506 + _505;
    precise float _508 = _463 * cbSceneParam._m0[26u].z;
    precise float _509 = _508 + _507;
    precise float _510 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _511 = _510 + _509;
    precise float _512 = _461 * cbSceneParam._m0[27u].x;
    precise float _513 = _462 * cbSceneParam._m0[27u].y;
    precise float _514 = _513 + _512;
    precise float _515 = _463 * cbSceneParam._m0[27u].z;
    precise float _516 = _515 + _514;
    precise float _517 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _518 = _517 + _516;
    gl_Position.x = _497;
    gl_Position.y = _504;
    gl_Position.z = _511;
    gl_Position.w = _518;
    POSITION_1.x = _497;
    POSITION_1.y = _504;
    POSITION_1.z = _511;
    POSITION_1.w = _518;
    NORMAL_1.x = fma(_197, _410, fma(_196, _407, _404 * _194));
    NORMAL_1.y = fma(_197, _411, fma(_196, _408, _405 * _194));
    NORMAL_1.z = fma(_197, _412, fma(_196, _409, _406 * _194));
    NORMAL_1.w = float(_221);
    TANGENT_1.x = fma(_208, _410, fma(_207, _407, _404 * _206));
    TANGENT_1.y = fma(_208, _411, fma(_207, _408, _405 * _206));
    TANGENT_1.z = fma(_208, _412, fma(_207, _409, _406 * _206));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_3.x = COLOR.x;
    TEXCOORD_3.y = COLOR.y;
    TEXCOORD_3.z = COLOR.z;
    TEXCOORD_3.w = COLOR.w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_4.z = TEXCOORD_1.x;
    TEXCOORD_4.w = TEXCOORD_1.y;
    TEXCOORD_9.x = TEXCOORD_2.x;
    TEXCOORD_9.y = TEXCOORD_2.y;
    TEXCOORD_9.z = TEXCOORD_2.z;
    TEXCOORD_9.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_497, _504, _511, _518), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_497, _504, _511, _518), vec4(cbInstanceData._m0[_234 + 3u]));
}


