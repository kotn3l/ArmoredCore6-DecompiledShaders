#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1246;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _248.z;
    float _254 = _248.w;
    float _260 = exp2(log2(_253 * 22.0) * 260.0);
    float _261 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _261 : (isnan(_261) ? 1.0 : min(_261, 1.0));
    float _268 = exp2(log2(1.0 - _254) * 10.19999980926513671875);
    vec4 _281 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _306 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = cbMtdParam._m0[9u].x * _306.x;
    float _318 = cbMtdParam._m0[9u].y * _306.y;
    float _319 = cbMtdParam._m0[9u].z * _306.z;
    float _326 = (((cbMtdParam._m0[10u].x * _281.x) - _317) * _268) + _317;
    float _327 = (((cbMtdParam._m0[10u].y * _281.y) - _318) * _268) + _318;
    float _328 = (((cbMtdParam._m0[10u].z * _281.z) - _319) * _268) + _319;
    float _332 = exp2(log2(_254) * 10.0);
    vec4 _344 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _378 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _383 = _378.w;
    vec4 _403 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _414 = cbMtdParam._m0[12u].x * _403.x;
    float _415 = cbMtdParam._m0[12u].y * _403.y;
    float _416 = cbMtdParam._m0[12u].z * _403.z;
    float _423 = ((((((((cbMtdParam._m0[11u].x * _344.x) - _326) * _332) + _326) * 4.55000019073486328125) * _378.x) - _414) * _262) + _414;
    float _424 = ((((((((cbMtdParam._m0[11u].y * _344.y) - _327) * _332) + _327) * 4.55000019073486328125) * _378.y) - _415) * _262) + _415;
    float _425 = ((((((((cbMtdParam._m0[11u].z * _344.z) - _328) * _332) + _328) * 4.55000019073486328125) * _378.z) - _416) * _262) + _416;
    vec4 _442 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _464 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _470 = cbMtdParam._m0[13u].x + _464.z;
    float _473 = (((cbMtdParam._m0[13u].y + _442.z) - _470) * _268) + _470;
    vec4 _486 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _510 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _516 = cbMtdParam._m0[13u].z + _510.z;
    float _519 = ((((_253 * 2.0) * ((((_486.z - _473) + cbMtdParam._m0[14u].y) * _332) + _473)) - _516) * _262) + _516;
    float _530 = ((_442.x - _466) * _268) + _466;
    float _531 = ((_442.y - _467) * _268) + _467;
    float _546 = (((((((_486.x - _530) * _332) + _530) - _512) * _262) + _512) * 2.0) + (-1.0);
    float _547 = (((((((_486.y - _531) * _332) + _531) - _513) * _262) + _513) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3587 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))));
    float _556 = _546 + (cbMtdParam._m0[13u].w * ((_248.x * 2.0) + (-1.0)));
    float _557 = _547 + (cbMtdParam._m0[13u].w * ((_248.y * 2.0) + (-1.0)));
    float _560 = fma(_553, _232, fma(_557, _224 * TANGENT.x, (_210 * _202) * _556));
    float _563 = fma(_553, _233, fma(_557, _224 * TANGENT.y, (_210 * _203) * _556));
    float _566 = fma(_553, _234, fma(_557, _224 * TANGENT.z, (_210 * _204) * _556));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    float _571 = _570 * _560;
    float _572 = _570 * _563;
    float _573 = _570 * _566;
    float _3598 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _574 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _575 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _576 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _577 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _578 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _579 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _663 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _665 = _663.w;
    float _683 = fma(_573, cbSceneParam._m0[5u].z, fma(_572, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _571));
    float _686 = fma(_573, cbSceneParam._m0[6u].z, fma(_572, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _571));
    float _689 = fma(_573, cbSceneParam._m0[7u].z, fma(_572, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _571));
    vec4 _691 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _693 = _691.x;
    float _705 = (((_691.y - _575) + (_691.w * _575)) * cbMtdParam._m0[3u].x) + _575;
    float _722 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_693 * _693)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _730 = (((cbMatDynParam._m0[15u].x - _579) * cbMatDynParam._m0[15u].w) * _722) + _579;
    float _739 = ((_722 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _705)) + _705;
    uint _763 = uint(roundEven(NORMAL.w)) * 13u;
    uint _765 = (_763 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * _576) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * _577) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * _578) * cbInstanceData._m0[_765].z;
    float _3664 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    vec4 _777 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _782 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _793 = (((_782.x - _730) + (_782.w * _730)) * cbMtdParam._m0[3u].x) + _730;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _665) - _774) + _777.x)) + _774;
    float _807 = (cbMtdParam._m0[3u].x * (((_775 * _665) - _775) + _777.y)) + _775;
    float _808 = (cbMtdParam._m0[3u].x * (((_776 * _665) - _776) + _777.z)) + _776;
    vec4 _809 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _822 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_730 * (_576 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_730 * (_577 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_730 * (_578 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _809.z;
    float _826 = _822 * cbMatDynParam._m0[13u].w;
    float _836 = (_826 * (cbMatDynParam._m0[13u].x - _806)) + _806;
    float _837 = (_826 * (cbMatDynParam._m0[13u].y - _807)) + _807;
    float _838 = (_826 * (cbMatDynParam._m0[13u].z - _808)) + _808;
    float _846 = ((_822 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _793)) + _793;
    float _847 = 1.0 - _846;
    float _848 = _847 * _836;
    float _849 = _847 * _837;
    float _850 = _847 * _838;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _846;
    float _855 = (_837 + (-0.039999999105930328369140625)) * _846;
    float _856 = (_838 + (-0.039999999105930328369140625)) * _846;
    float _857 = _854 + 0.039999999105930328369140625;
    float _858 = _855 + 0.039999999105930328369140625;
    float _859 = _856 + 0.039999999105930328369140625;
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _871 = _868.x * TEXCOORD_4;
    float _872 = dot(vec3(_571, _572, _573), vec3(_652, _653, _654));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _571) - _652;
    float _880 = (_875 * _572) - _653;
    float _881 = (_875 * _573) - _654;
    float _885 = abs(dot(vec3(_652, _653, _654), vec3(_571, _572, _573)));
    float _3697 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _887 = sqrt(_739);
    float _900 = exp2((_887 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_887 * 3.0));
    float _906 = (1.0 - _900) * ((_887 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _907 = _900 * _887;
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_943, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935));
        float _974 = fma(_943, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935));
        float _978 = fma(_943, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935));
        float _1003 = _935 + _571;
        float _1004 = _939 + _572;
        float _1005 = _943 + _573;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _970;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _974;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _978;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_571, _572, _573), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3745 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_571, _572, _573), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3778 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_571, _572, _573), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3811 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_943, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935));
        float _1290 = fma(_943, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935));
        float _1294 = fma(_943, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935));
        float _1317 = _935 + _571;
        float _1318 = _939 + _572;
        float _1319 = _943 + _573;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_571, _572, _573), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3874 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_571, _572, _573), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3907 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_571, _572, _573), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _3940 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1246;
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = _1246;
        _1566 = _1246;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _879 * 0.5;
    float _1624 = _880 * 0.5;
    float _1625 = _881 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1663;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1674;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1665 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1678 = (_1674 * cbModelParam._m0[1u].x) + (_1663 * (1.0 - cbModelParam._m0[1u].x));
    float _1688 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1688 : min(cbModelParam._m0[25u].z, _1688));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1736 = fma(_943, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935)) + cbModelParam._m0[13u].w;
        float _1740 = fma(_943, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935)) + cbModelParam._m0[14u].w;
        float _1744 = fma(_943, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935)) + cbModelParam._m0[15u].w;
        float _1747 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1750 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1753 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1781;
        if (_1747 > 0.0)
        {
            _1781 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1781 = frontier_phi_16_14_ladder;
        }
        float _1987;
        if (_1750 > 0.0)
        {
            _1987 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1987 = frontier_phi_25_21_ladder;
        }
        float _2241;
        if (_1753 > 0.0)
        {
            _2241 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2241 = frontier_phi_37_32_ladder;
        }
        float _2243 = isnan(_1987) ? _1781 : (isnan(_1781) ? _1987 : min(_1781, _1987));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1747) + _1736;
        float _2249 = (_2244 * _1750) + _1740;
        float _2250 = (_2244 * _1753) + _1744;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2251;
        float _2255 = _2251 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 > _2255) || ((_2249 < _2253) || ((_2248 < _2253) || (_2248 > _2255))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2250, cbModelParam._m0[9u].z, fma(_2249, cbModelParam._m0[9u].y, _2248 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2250, cbModelParam._m0[10u].z, fma(_2249, cbModelParam._m0[10u].y, _2248 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2250, cbModelParam._m0[11u].z, fma(_2249, cbModelParam._m0[11u].y, _2248 * cbModelParam._m0[11u].x))), _1689);
            frontier_phi_15_37_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1769 = frontier_phi_15_37_ladder_2;
        _1771 = frontier_phi_15_37_ladder_1;
        _1773 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1689);
        _1769 = _1757.x * cbModelParam._m0[1u].y;
        _1771 = _1757.y * cbModelParam._m0[1u].y;
        _1773 = _1757.z * cbModelParam._m0[1u].y;
    }
    float _1777 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1777 : min(cbModelParam._m0[25u].w, _1777));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1835 = fma(_943, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935)) + cbModelParam._m0[21u].w;
        float _1839 = fma(_943, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935)) + cbModelParam._m0[22u].w;
        float _1843 = fma(_943, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935)) + cbModelParam._m0[23u].w;
        float _1846 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1849 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1852 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _1992;
        if (_1846 > 0.0)
        {
            _1992 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1992 = frontier_phi_27_23_ladder;
        }
        float _2268;
        if (_1849 > 0.0)
        {
            _2268 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2268 = frontier_phi_39_34_ladder;
        }
        float _2481;
        if (_1852 > 0.0)
        {
            _2481 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2481 = frontier_phi_48_45_ladder;
        }
        float _2483 = isnan(_2268) ? _1992 : (isnan(_1992) ? _2268 : min(_1992, _2268));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1846) + _1835;
        float _2489 = (_2484 * _1849) + _1839;
        float _2490 = (_2484 * _1852) + _1843;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2491;
        float _2494 = _2491 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2490 > _2494) || ((_2490 < _2492) || ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 < _2492) || (_2488 > _2494))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2490, cbModelParam._m0[17u].z, fma(_2489, cbModelParam._m0[17u].y, _2488 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2490, cbModelParam._m0[18u].z, fma(_2489, cbModelParam._m0[18u].y, _2488 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2490, cbModelParam._m0[19u].z, fma(_2489, cbModelParam._m0[19u].y, _2488 * cbModelParam._m0[19u].x))), _1778);
            frontier_phi_24_48_ladder = _2690.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2690.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2690.x * cbModelParam._m0[1u].z;
        }
        _1871 = frontier_phi_24_48_ladder_2;
        _1873 = frontier_phi_24_48_ladder_1;
        _1875 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1778);
        _1871 = _1855.x * cbModelParam._m0[1u].z;
        _1873 = _1855.y * cbModelParam._m0[1u].z;
        _1875 = _1855.z * cbModelParam._m0[1u].z;
    }
    float _1888 = (((_906 * _857) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1871 - _1769)) + _1769);
    float _1890 = (((_906 * _858) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1873 - _1771)) + _1771);
    float _1892 = (((_906 * _859) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1875 - _1773)) + _1773);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1888 * cbSceneParam._m0[91u].x));
    uvec4 _1911 = floatBitsToUint(cbInstanceData._m0[_763 + 5u]);
    uint _1913 = _1911.x * 14u;
    uint _1914 = _1913 + 13u;
    float _1921 = _871 + (-1.0);
    float _1926 = (cbLight._m0[_1914].x * _1921) + 1.0;
    float _1927 = (cbLight._m0[_1914].y * _1921) + 1.0;
    float _1928 = (cbLight._m0[_1914].z * _1921) + 1.0;
    float _1929 = (cbLight._m0[_1914].w * _1921) + 1.0;
    uint _1930 = _1913 + 5u;
    float _1936 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1940 = _1913 + 4u;
    float _1946 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1950 = _1913 | 1u;
    float _1961 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_571, _572, _573));
    float _1964 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_571, _572, _573));
    float _4076 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _4087 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1969 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1971 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1978 = ((cbLight._m0[_1930].x * _1936) * _1971) + ((cbLight._m0[_1940].x * _1946) * _1969);
    float _1979 = ((_1936 * cbLight._m0[_1930].y) * _1971) + ((_1946 * cbLight._m0[_1940].y) * _1969);
    float _1980 = ((_1936 * cbLight._m0[_1930].z) * _1971) + ((_1946 * cbLight._m0[_1940].z) * _1969);
    uvec4 _1984 = floatBitsToUint(cbLight._m0[_1913 + 12u]);
    bool _1986 = _1984.x == 0u;
    float _1997;
    float _1999;
    float _2001;
    if (_1986)
    {
        _1997 = _1978;
        _1999 = _1979;
        _2001 = _1980;
    }
    else
    {
        uint _2005 = _1913 + 6u;
        float _2021 = (dot(vec3(cbLight._m0[_1913 + 2u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _4098 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2024 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _1997 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1978;
        _1999 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1979;
        _2001 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1980;
    }
    bool _2004 = _1984.y == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2004)
    {
        _2042 = _1997;
        _2044 = _1999;
        _2046 = _2001;
    }
    else
    {
        uint _2212 = _1913 + 7u;
        float _2228 = (dot(vec3(cbLight._m0[_1913 + 3u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4114 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2231 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2042 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _1997;
        _2044 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _1999;
        _2046 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2001;
    }
    uint _2049 = _1913 + 8u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _739) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1913].x + _652;
    float _2065 = cbLight._m0[_1913].y + _653;
    float _2066 = cbLight._m0[_1913].z + _654;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1913].xyz));
    float _4130 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2078 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2079 = dot(vec3(_571, _572, _573), vec3(_2071, _2072, _2073));
    float _4152 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2071, _2072, _2073));
    float _4163 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2063 * _2063;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _2100 = 0.959999978542327880859375 - _854;
    float _2102 = 0.959999978542327880859375 - _855;
    float _2103 = 0.959999978542327880859375 - _856;
    float _2110 = 1.0 - _2063;
    float _2121 = (0.5 / (((_2078 * ((_2077 * _2110) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2110) + _2063) * _2077))) * _2077;
    float _4174 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    uint _2134 = _1913 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _739) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1950].x + _652;
    float _2148 = cbLight._m0[_1950].y + _653;
    float _2149 = cbLight._m0[_1950].z + _654;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1950].xyz));
    float _4185 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2161 = dot(vec3(_571, _572, _573), vec3(_2154, _2155, _2156));
    float _4196 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2154, _2155, _2156));
    float _4207 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
    float _2187 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2078 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2187) + _2146) * _2160))) * _2160;
    float _4218 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2209 = (((((_2180 * _2100) + _857) * cbLight._m0[_2134].x) * _2199) * _1936) + (((((_2099 * _2100) + _857) * cbLight._m0[_2049].x) * _2123) * _1946);
    float _2210 = (((((_2180 * _2102) + _858) * cbLight._m0[_2134].y) * _2199) * _1936) + (((((_2099 * _2102) + _858) * cbLight._m0[_2049].y) * _2123) * _1946);
    float _2211 = (((((_2180 * _2103) + _859) * cbLight._m0[_2134].z) * _2199) * _1936) + (((((_2099 * _2103) + _859) * cbLight._m0[_2049].z) * _2123) * _1946);
    float _2273;
    float _2275;
    float _2277;
    if (_1986)
    {
        _2273 = _2209;
        _2275 = _2210;
        _2277 = _2211;
    }
    else
    {
        uint _2279 = _1913 + 2u;
        uint _2283 = _1913 + 10u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _739) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _652;
        float _2300 = cbLight._m0[_2279].y + _653;
        float _2301 = cbLight._m0[_2279].z + _654;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2279].xyz));
        float _4229 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2313 = dot(vec3(_571, _572, _573), vec3(_2306, _2307, _2308));
        float _4240 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4251 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0);
        float _2339 = 1.0 - _2298;
        float _2349 = (0.5 / (((_2078 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2339) + _2298) * _2312))) * _2312;
        float _4262 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2273 = (((((_2332 * _2100) + _857) * cbLight._m0[_2283].x) * _2351) * _2352) + _2209;
        _2275 = (((((_2332 * _2102) + _858) * cbLight._m0[_2283].y) * _2351) * _2352) + _2210;
        _2277 = (((((_2332 * _2103) + _859) * cbLight._m0[_2283].z) * _2351) * _2352) + _2211;
    }
    float _2387;
    float _2389;
    float _2391;
    if (_2004)
    {
        _2387 = _2273;
        _2389 = _2275;
        _2391 = _2277;
    }
    else
    {
        uint _2398 = _1913 + 3u;
        uint _2402 = _1913 + 11u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _739) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _652;
        float _2419 = cbLight._m0[_2398].y + _653;
        float _2420 = cbLight._m0[_2398].z + _654;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2398].xyz));
        float _4278 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2432 = dot(vec3(_571, _572, _573), vec3(_2425, _2426, _2427));
        float _4289 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4300 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
        float _2458 = 1.0 - _2417;
        float _2468 = (0.5 / (((_2078 * ((_2431 * _2458) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2458) + _2417) * _2431))) * _2431;
        float _4311 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2387 = (((((_2451 * _2100) + _857) * cbLight._m0[_2402].x) * _2470) * _2471) + _2273;
        _2389 = (((((_2451 * _2102) + _858) * cbLight._m0[_2402].y) * _2470) * _2471) + _2275;
        _2391 = (((((_2451 * _2103) + _859) * cbLight._m0[_2402].z) * _2470) * _2471) + _2277;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1911.y == 0u)
    {
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2546;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2546;
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2546;
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.x;
        uint _2573 = uint((float(_2561.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2562))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2562)));
        float _2583 = (log2(_2549 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2584 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        uint _2587 = uint(isnan(14.0) ? _2584 : (isnan(_2584) ? 14.0 : min(_2584, 14.0)));
        uvec4 _2592 = texelFetch(g_lightClusterGridBuffer, int(((_2587 << 2u) + (_2573 << 6u)) >> 2u));
        uint _2593 = _2592.x;
        uint _2594 = _2561.z;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((((1u << ((_2594 >> 4u) & 15u)) + 4294967295u) & _2593) == 0u) || ((_2594 & 240u) == 0u))
        {
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
        }
        else
        {
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            uint _2845 = 0u;
            uint _2854;
            bool _2855;
            for (;;)
            {
                _2854 = texelFetch(g_lightClassification, int((((_2587 << 5u) + (_2573 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                _2855 = _2854 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2855)
                {
                    frontier_phi_63_pred = _2844;
                    frontier_phi_63_pred_1 = _2843;
                    frontier_phi_63_pred_2 = _2842;
                    frontier_phi_63_pred_3 = _2841;
                    frontier_phi_63_pred_4 = _2840;
                    frontier_phi_63_pred_5 = _2839;
                }
                else
                {
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    uint _2969;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2854;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    for (;;)
                    {
                        uint _2973 = uint(findLSB(_2969)) + (_2845 << 5u);
                        uint _2970 = (_2969 + 4294967295u) & _2969;
                        uint _2975 = _2973 * 48u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2995 = (_2973 * 48u) + 4u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3014 = (_2973 * 48u) + 8u;
                        vec3 _3025 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x));
                        float _3029 = _2989.x - _2547;
                        float _3030 = _2989.y - _2548;
                        float _3031 = _2989.z - _2549;
                        float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                        float _3035 = inversesqrt(_3032);
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3039 = dot(vec3(_683, _686, _689), vec3(_3036, _3037, _3038));
                        float _3044 = 1.0 - (_3032 * _2989.w);
                        float _4337 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3046 = sqrt(_3032) * _3008.w;
                        float _3049 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _3039) + _3050;
                        float _3056 = _3046 * _3046;
                        float _3060 = ((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3045) / ((_3056 * 0.699999988079071044921875) + 1.0);
                        float _3064 = (-0.0) - _2547;
                        float _3065 = (-0.0) - _2548;
                        float _3066 = (-0.0) - _2549;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3081 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                        float _3082 = 1.0 - _887;
                        float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                        float _3090 = _3089 * _3089;
                        float _3091 = _3090 * _3090;
                        float _3092 = _3071 + _3036;
                        float _3093 = _3072 + _3037;
                        float _3094 = _3073 + _3038;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3102 = dot(vec3(_683, _686, _689), vec3(_3071, _3072, _3073));
                        float _4353 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3106 = dot(vec3(_683, _686, _689), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                        float _4364 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                        float _3114 = _3049 * _3090;
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3039) + _3115;
                        float _4375 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3119 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3120 = 1.0 - _3090;
                        float _3130 = (0.5 / (((_3119 * ((_3105 * _3120) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3090) * _3105))) * _3119;
                        float _4386 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3141 = (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3113 * _3113) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125))) * _3045;
                        _2898 = (_3060 * _3008.x) + _2966;
                        _2899 = (_3060 * _3008.y) + _2967;
                        _2900 = (_3060 * _3008.z) + _2968;
                        _2895 = (_3141 * _3025.x) + _2963;
                        _2896 = (_3141 * _3025.y) + _2964;
                        _2897 = (_3141 * _3025.z) + _2965;
                        if (_2970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2970;
                        }
                    }
                    frontier_phi_63_pred = _2900;
                    frontier_phi_63_pred_1 = _2899;
                    frontier_phi_63_pred_2 = _2898;
                    frontier_phi_63_pred_3 = _2897;
                    frontier_phi_63_pred_4 = _2896;
                    frontier_phi_63_pred_5 = _2895;
                }
                _2706 = frontier_phi_63_pred;
                _2704 = frontier_phi_63_pred_1;
                _2702 = frontier_phi_63_pred_2;
                _2700 = frontier_phi_63_pred_3;
                _2698 = frontier_phi_63_pred_4;
                _2696 = frontier_phi_63_pred_5;
                uint _2846 = _2845 + 1u;
                if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2839 = _2696;
                    _2840 = _2698;
                    _2841 = _2700;
                    _2842 = _2702;
                    _2843 = _2704;
                    _2844 = _2706;
                    _2845 = _2846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
        }
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.z;
        uint _2712 = (_2710 >> 8u) & 15u;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((4294967295u << _2712) & _2593) == 0u)
        {
            _2807 = _2695;
            _2809 = _2697;
            _2811 = _2699;
            _2813 = _2701;
            _2815 = _2703;
            _2817 = _2705;
        }
        else
        {
            float _2832 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
            float _2833 = _2832 * _2547;
            float _2834 = _2832 * _2548;
            float _2835 = _2832 * _2549;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2712 < ((_2710 >> 12u) & 15u))
            {
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2946 = _2695;
                float _2947 = _2697;
                float _2948 = _2699;
                float _2949 = _2701;
                float _2950 = _2703;
                float _2951 = _2705;
                uint _2952 = _2712;
                uint _2961;
                bool _2962;
                for (;;)
                {
                    _2961 = texelFetch(g_lightClassification, int((((_2587 << 5u) + (_2573 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                    _2962 = _2961 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2962)
                    {
                        frontier_phi_69_pred = _2951;
                        frontier_phi_69_pred_1 = _2950;
                        frontier_phi_69_pred_2 = _2949;
                        frontier_phi_69_pred_3 = _2948;
                        frontier_phi_69_pred_4 = _2947;
                        frontier_phi_69_pred_5 = _2946;
                    }
                    else
                    {
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        float _3163 = _2950;
                        float _3164 = _2951;
                        uint _3165 = _2961;
                        uint _3166;
                        vec4 _3191;
                        float _3192;
                        vec4 _3207;
                        vec3 _3219;
                        vec4 _3234;
                        vec4 _3250;
                        float _3297;
                        bool _3298;
                        for (;;)
                        {
                            uint _3176 = ((_2952 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3165));
                            _3166 = (_3165 + 4294967295u) & _3165;
                            uint _3178 = _3176 * 40u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3192 = _3191.w;
                            uint _3194 = (_3176 * 40u) + 4u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3176 * 40u) + 8u;
                            _3219 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x));
                            uint _3221 = (_3176 * 40u) + 16u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3237 = (_3176 * 40u) + 20u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3253 = (_3176 * 40u) + 24u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3272 = (_3176 * 40u) + 28u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3297 = fma(_2549, _3285.z, fma(_2548, _3285.y, _3285.x * _2547)) + _3285.w;
                            _3298 = !((fma(_2549, _3266.z, fma(_2548, _3266.y, _3266.x * _2547)) + _3266.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3298)
                            {
                                float _3325 = _3191.x - _2547;
                                float _3326 = _3191.y - _2548;
                                float _3327 = _3191.z - _2549;
                                float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                                float _3331 = inversesqrt(_3328);
                                float _3332 = _3331 * _3325;
                                float _3333 = _3331 * _3326;
                                float _3334 = _3331 * _3327;
                                float _3338 = 1.0 - (_3328 / (_3192 * _3192));
                                float _4397 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3343 = sqrt(_3328) * _3207.w;
                                float _3345 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                                float _3346 = _3345 * _3345;
                                float _3349 = ((1.0 - _3346) * dot(vec3(_3332, _3333, _3334), vec3(_683, _686, _689))) + _3346;
                                float _3352 = _3343 * _3343;
                                float _3356 = (fma(_2549, _3234.z, fma(_2548, _3234.y, _3234.x * _2547)) + _3234.w) / _3297;
                                float _3357 = (fma(_2549, _3250.z, fma(_2548, _3250.y, _3250.x * _2547)) + _3250.w) / _3297;
                                float _3361 = 1.0 - dot(vec2(_3356, _3357), vec2(_3356, _3357));
                                float _4413 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3363 = _3362 * (((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3339) / ((_3352 * 0.699999988079071044921875) + 1.0));
                                float _3375 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                                float _3376 = 1.0 - _887;
                                float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                                float _3384 = _3383 * _3383;
                                float _3385 = _3384 * _3384;
                                float _3386 = _3332 - _2833;
                                float _3387 = _3333 - _2834;
                                float _3388 = _3334 - _2835;
                                float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                                float _3396 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2833, (-0.0) - _2834, (-0.0) - _2835));
                                float _4424 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3400 = dot(vec3(_683, _686, _689), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                                float _4435 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                                float _3408 = _3345 * _3384;
                                float _3409 = _3408 * _3408;
                                float _3415 = ((1.0 - _3409) * dot(vec3(_683, _686, _689), vec3(_3332, _3333, _3334))) + _3409;
                                float _4446 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3417 = 1.0 - _3384;
                                float _3427 = (0.5 / (((_3416 * ((_3399 * _3417) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3384) * _3399))) * _3416;
                                float _4457 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3437 = (_3362 * _3339) * (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3407 * _3407) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3363 * _3207.z;
                                frontier_phi_75_pred_1 = _3363 * _3207.y;
                                frontier_phi_75_pred_2 = _3363 * _3207.x;
                                frontier_phi_75_pred_3 = _3437 * _3219.z;
                                frontier_phi_75_pred_4 = _3437 * _3219.y;
                                frontier_phi_75_pred_5 = _3437 * _3219.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_75_pred;
                            _3445 = frontier_phi_75_pred_1;
                            _3444 = frontier_phi_75_pred_2;
                            _3443 = frontier_phi_75_pred_3;
                            _3442 = frontier_phi_75_pred_4;
                            _3441 = frontier_phi_75_pred_5;
                            _3149 = _3444 + _3162;
                            _3150 = _3445 + _3163;
                            _3151 = _3446 + _3164;
                            _3146 = _3441 + _3159;
                            _3147 = _3442 + _3160;
                            _3148 = _3443 + _3161;
                            if (_3166 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3166;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3151;
                        frontier_phi_69_pred_1 = _3150;
                        frontier_phi_69_pred_2 = _3149;
                        frontier_phi_69_pred_3 = _3148;
                        frontier_phi_69_pred_4 = _3147;
                        frontier_phi_69_pred_5 = _3146;
                    }
                    _2818 = frontier_phi_69_pred;
                    _2816 = frontier_phi_69_pred_1;
                    _2814 = frontier_phi_69_pred_2;
                    _2812 = frontier_phi_69_pred_3;
                    _2810 = frontier_phi_69_pred_4;
                    _2808 = frontier_phi_69_pred_5;
                    uint _2953 = _2952 + 1u;
                    if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2946 = _2808;
                        _2947 = _2810;
                        _2948 = _2812;
                        _2949 = _2814;
                        _2950 = _2816;
                        _2951 = _2818;
                        _2952 = _2953;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2818;
                frontier_phi_57_58_ladder_1 = _2816;
                frontier_phi_57_58_ladder_2 = _2814;
                frontier_phi_57_58_ladder_3 = _2812;
                frontier_phi_57_58_ladder_4 = _2810;
                frontier_phi_57_58_ladder_5 = _2808;
            }
            else
            {
                frontier_phi_57_58_ladder = _2705;
                frontier_phi_57_58_ladder_1 = _2703;
                frontier_phi_57_58_ladder_2 = _2701;
                frontier_phi_57_58_ladder_3 = _2699;
                frontier_phi_57_58_ladder_4 = _2697;
                frontier_phi_57_58_ladder_5 = _2695;
            }
            _2807 = frontier_phi_57_58_ladder_5;
            _2809 = frontier_phi_57_58_ladder_4;
            _2811 = frontier_phi_57_58_ladder_3;
            _2813 = frontier_phi_57_58_ladder_2;
            _2815 = frontier_phi_57_58_ladder_1;
            _2817 = frontier_phi_57_58_ladder;
        }
        float _2822 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2605 = (_2822 * _2813) + _2042;
        _2607 = (_2822 * _2815) + _2044;
        _2609 = (_2822 * _2817) + _2046;
        _2611 = ((_2807 * _857) * _2822) + _2387;
        _2613 = ((_2809 * _858) * _2822) + _2389;
        _2615 = ((_2811 * _859) * _2822) + _2391;
    }
    else
    {
        _2605 = _2042;
        _2607 = _2044;
        _2609 = _2046;
        _2611 = _2387;
        _2613 = _2389;
        _2615 = _2391;
    }
    float _4473 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4484 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4495 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4506 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2640 = cbInstanceData._m0[_763 + 6u].w * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)));
    float _2645 = _660 / cbSceneParam._m0[86u].x;
    float _2646 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2660 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2645, _2646, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2662 = _2660.x;
    float _2663 = _2660.y;
    float _2664 = _2660.z;
    float _2665 = _2660.w;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2720 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2721 = _2720 / _595;
        float _2732 = _2721 * _645;
        float _2733 = _646 * _2721;
        float _2734 = (-0.0) - _2733;
        float _2735 = _2721 * _647;
        float _2737 = (cbSceneParam._m0[77u].w * _2734) / _2720;
        float _2738 = _2737 + cbSceneParam._m0[79u].w;
        float _2739 = cbSceneParam._m0[79u].w - _2733;
        float _2745 = sqrt(((_2732 * _2732) + (_2733 * _2733)) + (_2735 * _2735));
        float _2748 = (1.0 - (cbSceneParam._m0[77u].w / _2720)) * _2745;
        float _2753 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2755 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2908;
        if (abs((_2734 - _2737) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2908 = ((((_2738 > 0.0) ? exp2(_2753 * _2738) : (2.0 - exp2(_2755 * _2738))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2748;
        }
        else
        {
            float _2868 = 1.0 / cbSceneParam._m0[80u].x;
            float _2869 = isnan(_2739) ? _2738 : (isnan(_2738) ? _2739 : max(_2738, _2739));
            float _2870 = isnan(_2739) ? _2738 : (isnan(_2738) ? _2739 : min(_2738, _2739));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            float _2880 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : min(_2870, 0.0));
            _2908 = ((abs(_2745 / _2734) * cbSceneParam._m0[80u].y) * ((((_2879 - _2880) * 2.0) - ((exp2(_2753 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0)))) - exp2(_2753 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))))) * _2868)) - ((exp2(_2755 * _2879) - exp2(_2755 * _2880)) * _2868))) + (_2748 * cbSceneParam._m0[80u].z);
        }
        vec4 _2910 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2645, _2646, 1.0), 0.0);
        float _2919 = exp2((_2908 * (-1.44269502162933349609375)) * (1.0 - _2910.w));
        float _2920 = log2(_2919);
        float _2936 = log2(_2665);
        _2757 = (exp2(_2936 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].x)) * _2910.x) / cbSceneParam._m0[78u].x)) + _2662;
        _2759 = (exp2(_2936 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].y)) * _2910.y) / cbSceneParam._m0[78u].y)) + _2663;
        _2761 = (exp2(_2936 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].z)) * _2910.z) / cbSceneParam._m0[78u].z)) + _2664;
        _2763 = _2919 * _2665;
    }
    else
    {
        _2757 = _2662;
        _2759 = _2663;
        _2761 = _2664;
        _2763 = _2665;
    }
    float _2775 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2776 = _2775 == 3.0;
    float _2777 = log2(_2763);
    float _2784 = exp2(_2777 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2605 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _871))) + ((_2611 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2785 = exp2(_2777 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2607 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _871))) + ((_2613 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2786 = exp2(_2777 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2609 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _871))) + ((_2615 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2795 = (_2775 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2795 * (_2776 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.y = _2795 * (_2776 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2759)));
    SV_Target.z = _2795 * (_2776 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2761)));
    SV_Target.w = _2640;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2640;
}


