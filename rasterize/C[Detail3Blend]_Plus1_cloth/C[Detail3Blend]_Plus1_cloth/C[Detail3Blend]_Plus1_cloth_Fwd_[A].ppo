#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3676;
float _3677;
float _3678;
float _3679;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _252.z;
    float _258 = _252.w;
    float _264 = exp2(log2(_257 * 22.0) * 260.0);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    float _272 = exp2(log2(1.0 - _258) * 10.19999980926513671875);
    vec4 _285 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _310 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = cbMtdParam._m0[9u].x * _310.x;
    float _322 = cbMtdParam._m0[9u].y * _310.y;
    float _323 = cbMtdParam._m0[9u].z * _310.z;
    float _330 = (((cbMtdParam._m0[10u].x * _285.x) - _321) * _272) + _321;
    float _331 = (((cbMtdParam._m0[10u].y * _285.y) - _322) * _272) + _322;
    float _332 = (((cbMtdParam._m0[10u].z * _285.z) - _323) * _272) + _323;
    float _336 = exp2(log2(_258) * 10.0);
    vec4 _348 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _382 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _387 = _382.w;
    vec4 _407 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _418 = cbMtdParam._m0[12u].x * _407.x;
    float _419 = cbMtdParam._m0[12u].y * _407.y;
    float _420 = cbMtdParam._m0[12u].z * _407.z;
    float _427 = ((((((((cbMtdParam._m0[11u].x * _348.x) - _330) * _336) + _330) * 4.55000019073486328125) * _382.x) - _418) * _266) + _418;
    float _428 = ((((((((cbMtdParam._m0[11u].y * _348.y) - _331) * _336) + _331) * 4.55000019073486328125) * _382.y) - _419) * _266) + _419;
    float _429 = ((((((((cbMtdParam._m0[11u].z * _348.z) - _332) * _336) + _332) * 4.55000019073486328125) * _382.z) - _420) * _266) + _420;
    vec4 _446 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _468 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _474 = cbMtdParam._m0[13u].x + _468.z;
    float _477 = (((cbMtdParam._m0[13u].y + _446.z) - _474) * _272) + _474;
    vec4 _490 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _514 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _520 = cbMtdParam._m0[13u].z + _514.z;
    float _523 = ((((_257 * 2.0) * ((((_490.z - _477) + cbMtdParam._m0[14u].y) * _336) + _477)) - _520) * _266) + _520;
    float _534 = ((_446.x - _470) * _272) + _470;
    float _535 = ((_446.y - _471) * _272) + _471;
    float _550 = (((((((_490.x - _534) * _336) + _534) - _516) * _266) + _516) * 2.0) + (-1.0);
    float _551 = (((((((_490.y - _535) * _336) + _535) - _517) * _266) + _517) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3698 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))));
    float _560 = _550 + (cbMtdParam._m0[13u].w * ((_252.x * 2.0) + (-1.0)));
    float _561 = _551 + (cbMtdParam._m0[13u].w * ((_252.y * 2.0) + (-1.0)));
    float _564 = fma(_557, _236, fma(_561, _228 * TANGENT.x, (_214 * _206) * _560));
    float _567 = fma(_557, _237, fma(_561, _228 * TANGENT.y, (_214 * _207) * _560));
    float _570 = fma(_557, _238, fma(_561, _228 * TANGENT.z, (_214 * _208) * _560));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3709 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _578 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _579 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _580 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _581 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _582 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _583 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    vec4 _663 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _665 = _663.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _970 = sqrt(((_649 * _649) + (_650 * _650)) + (_651 * _651));
        float _976 = (cbMatDynParam._m0[5u].x * _970) + cbMatDynParam._m0[5u].y;
        float _3775 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _981 = (cbMatDynParam._m0[5u].z * _970) + cbMatDynParam._m0[5u].w;
        float _3786 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) - _977)) + _977) < ((_665 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _679 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _681 = _679.w;
    float _699 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _702 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _705 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    vec4 _707 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _709 = _707.x;
    float _721 = (((_707.y - _579) + (_707.w * _579)) * cbMtdParam._m0[3u].x) + _579;
    float _738 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_709 * _709)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _746 = (((cbMatDynParam._m0[15u].x - _583) * cbMatDynParam._m0[15u].w) * _738) + _583;
    float _755 = ((_738 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _721)) + _721;
    uint _779 = uint(roundEven(NORMAL.w)) * 13u;
    uint _780 = _779 + 9u;
    uint _781 = _780 + uint(cbMatDynParam._m0[0u].w);
    float _787 = (cbMtdParam._m0[0u].x * _580) * cbInstanceData._m0[_781].x;
    float _788 = (cbMtdParam._m0[0u].y * _581) * cbInstanceData._m0[_781].y;
    float _789 = (cbMtdParam._m0[0u].z * _582) * cbInstanceData._m0[_781].z;
    float _3797 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    vec4 _793 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _798 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _809 = (((_798.x - _746) + (_798.w * _746)) * cbMtdParam._m0[3u].x) + _746;
    float _822 = (cbMtdParam._m0[3u].x * (((_790 * _681) - _790) + _793.x)) + _790;
    float _823 = (cbMtdParam._m0[3u].x * (((_791 * _681) - _791) + _793.y)) + _791;
    float _824 = (cbMtdParam._m0[3u].x * (((_792 * _681) - _792) + _793.z)) + _792;
    vec4 _825 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _838 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_746 * (_580 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_746 * (_581 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_746 * (_582 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _825.z;
    float _842 = _838 * cbMatDynParam._m0[13u].w;
    float _852 = (_842 * (cbMatDynParam._m0[13u].x - _822)) + _822;
    float _853 = (_842 * (cbMatDynParam._m0[13u].y - _823)) + _823;
    float _854 = (_842 * (cbMatDynParam._m0[13u].z - _824)) + _824;
    float _862 = ((_838 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _809)) + _809;
    float _863 = 1.0 - _862;
    float _864 = _863 * _852;
    float _865 = _863 * _853;
    float _866 = _863 * _854;
    float _870 = (_852 + (-0.039999999105930328369140625)) * _862;
    float _871 = (_853 + (-0.039999999105930328369140625)) * _862;
    float _872 = (_854 + (-0.039999999105930328369140625)) * _862;
    float _873 = _870 + 0.039999999105930328369140625;
    float _874 = _871 + 0.039999999105930328369140625;
    float _875 = _872 + 0.039999999105930328369140625;
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _887 = _884.x * TEXCOORD_4;
    float _888 = dot(vec3(_575, _576, _577), vec3(_656, _657, _658));
    float _891 = _888 * 2.0;
    float _895 = (_891 * _575) - _656;
    float _896 = (_891 * _576) - _657;
    float _897 = (_891 * _577) - _658;
    float _901 = abs(dot(vec3(_656, _657, _658), vec3(_575, _576, _577)));
    float _3830 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _903 = sqrt(_755);
    float _916 = exp2((_903 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_903 * 3.0));
    float _922 = (1.0 - _916) * ((_903 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _923 = _916 * _903;
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _1019 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _1023 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1048 = _951 + _575;
        float _1049 = _955 + _576;
        float _1050 = _959 + _577;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_575, _576, _577), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3878 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_575, _576, _577), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3911 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_575, _576, _577), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3944 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1338 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1342 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1365 = _951 + _575;
        float _1366 = _955 + _576;
        float _1367 = _959 + _577;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_575, _576, _577), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4007 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_575, _576, _577), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4040 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_575, _576, _577), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4073 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = _1291;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _895 * 0.5;
    float _1672 = _896 * 0.5;
    float _1673 = _897 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1711;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1722;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1713 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1726 = (_1722 * cbModelParam._m0[1u].x) + (_1711 * (1.0 - cbModelParam._m0[1u].x));
    float _1736 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _755);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1736 : min(cbModelParam._m0[25u].z, _1736));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1784 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1788 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1792 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1795 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1798 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1801 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1829;
        if (_1795 > 0.0)
        {
            _1829 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1829 = frontier_phi_19_17_ladder;
        }
        float _2035;
        if (_1798 > 0.0)
        {
            _2035 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2035 = frontier_phi_28_24_ladder;
        }
        float _2289;
        if (_1801 > 0.0)
        {
            _2289 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2289 = frontier_phi_40_35_ladder;
        }
        float _2291 = isnan(_2035) ? _1829 : (isnan(_1829) ? _2035 : min(_1829, _2035));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1795) + _1784;
        float _2297 = (_2292 * _1798) + _1788;
        float _2298 = (_2292 * _1801) + _1792;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1737);
            frontier_phi_18_40_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1817 = frontier_phi_18_40_ladder_2;
        _1819 = frontier_phi_18_40_ladder_1;
        _1821 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1737);
        _1817 = _1805.x * cbModelParam._m0[1u].y;
        _1819 = _1805.y * cbModelParam._m0[1u].y;
        _1821 = _1805.z * cbModelParam._m0[1u].y;
    }
    float _1825 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _755);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1825 : min(cbModelParam._m0[25u].w, _1825));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1897 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1900 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _2040;
        if (_1894 > 0.0)
        {
            _2040 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2040 = frontier_phi_30_26_ladder;
        }
        float _2316;
        if (_1897 > 0.0)
        {
            _2316 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2316 = frontier_phi_42_37_ladder;
        }
        float _2529;
        if (_1900 > 0.0)
        {
            _2529 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2529 = frontier_phi_51_48_ladder;
        }
        float _2531 = isnan(_2316) ? _2040 : (isnan(_2040) ? _2316 : min(_2040, _2316));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _1894) + _1883;
        float _2537 = (_2532 * _1897) + _1887;
        float _2538 = (_2532 * _1900) + _1891;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2539;
        float _2542 = _2539 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2538 > _2542) || ((_2538 < _2540) || ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 < _2540) || (_2536 > _2542))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2538, cbModelParam._m0[17u].z, fma(_2537, cbModelParam._m0[17u].y, _2536 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2538, cbModelParam._m0[18u].z, fma(_2537, cbModelParam._m0[18u].y, _2536 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2538, cbModelParam._m0[19u].z, fma(_2537, cbModelParam._m0[19u].y, _2536 * cbModelParam._m0[19u].x))), _1826);
            frontier_phi_27_51_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_27_51_ladder_2;
        _1921 = frontier_phi_27_51_ladder_1;
        _1923 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1826);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1936 = (((_922 * _873) + _923) * _887) * ((cbModelParam._m0[1u].w * (_1919 - _1817)) + _1817);
    float _1938 = (((_922 * _874) + _923) * _887) * ((cbModelParam._m0[1u].w * (_1921 - _1819)) + _1819);
    float _1940 = (((_922 * _875) + _923) * _887) * ((cbModelParam._m0[1u].w * (_1923 - _1821)) + _1821);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    uvec4 _1959 = floatBitsToUint(cbInstanceData._m0[_779 + 5u]);
    uint _1961 = _1959.x * 14u;
    uint _1962 = _1961 + 13u;
    float _1969 = _887 + (-1.0);
    float _1974 = (cbLight._m0[_1962].x * _1969) + 1.0;
    float _1975 = (cbLight._m0[_1962].y * _1969) + 1.0;
    float _1976 = (cbLight._m0[_1962].z * _1969) + 1.0;
    float _1977 = (cbLight._m0[_1962].w * _1969) + 1.0;
    uint _1978 = _1961 + 5u;
    float _1984 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1988 = _1961 + 4u;
    float _1994 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1998 = _1961 | 1u;
    float _2009 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_575, _576, _577));
    float _2012 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_575, _576, _577));
    float _4209 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _4220 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2017 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _2019 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2026 = ((cbLight._m0[_1978].x * _1984) * _2019) + ((cbLight._m0[_1988].x * _1994) * _2017);
    float _2027 = ((_1984 * cbLight._m0[_1978].y) * _2019) + ((_1994 * cbLight._m0[_1988].y) * _2017);
    float _2028 = ((_1984 * cbLight._m0[_1978].z) * _2019) + ((_1994 * cbLight._m0[_1988].z) * _2017);
    uvec4 _2032 = floatBitsToUint(cbLight._m0[_1961 + 12u]);
    bool _2034 = _2032.x == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_2034)
    {
        _2045 = _2026;
        _2047 = _2027;
        _2049 = _2028;
    }
    else
    {
        uint _2053 = _1961 + 6u;
        float _2069 = (dot(vec3(cbLight._m0[_1961 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _4231 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2072 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2045 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _2026;
        _2047 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _2027;
        _2049 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _2028;
    }
    bool _2052 = _2032.y == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2052)
    {
        _2090 = _2045;
        _2092 = _2047;
        _2094 = _2049;
    }
    else
    {
        uint _2260 = _1961 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1961 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4247 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2279 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2090 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2045;
        _2092 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2047;
        _2094 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2049;
    }
    uint _2097 = _1961 + 8u;
    float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _755) * 0.949999988079071044921875);
    float _2111 = _2110 * _2110;
    float _2112 = cbLight._m0[_1961].x + _656;
    float _2113 = cbLight._m0[_1961].y + _657;
    float _2114 = cbLight._m0[_1961].z + _658;
    float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
    float _2119 = _2118 * _2112;
    float _2120 = _2118 * _2113;
    float _2121 = _2118 * _2114;
    float _2122 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1961].xyz));
    float _4263 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2126 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2127 = dot(vec3(_575, _576, _577), vec3(_2119, _2120, _2121));
    float _4285 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2119, _2120, _2121));
    float _4296 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2111 * _2111;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2148 = 0.959999978542327880859375 - _870;
    float _2150 = 0.959999978542327880859375 - _871;
    float _2151 = 0.959999978542327880859375 - _872;
    float _2158 = 1.0 - _2111;
    float _2169 = (0.5 / (((_2126 * ((_2125 * _2158) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2158) + _2111) * _2125))) * _2125;
    float _4307 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    uint _2182 = _1961 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _755) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1998].x + _656;
    float _2196 = cbLight._m0[_1998].y + _657;
    float _2197 = cbLight._m0[_1998].z + _658;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1998].xyz));
    float _4318 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2209 = dot(vec3(_575, _576, _577), vec3(_2202, _2203, _2204));
    float _4329 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2202, _2203, _2204));
    float _4340 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2126 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2235) + _2194) * _2208))) * _2208;
    float _4351 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2148) + _873) * cbLight._m0[_2182].x) * _2247) * _1984) + (((((_2147 * _2148) + _873) * cbLight._m0[_2097].x) * _2171) * _1994);
    float _2258 = (((((_2228 * _2150) + _874) * cbLight._m0[_2182].y) * _2247) * _1984) + (((((_2147 * _2150) + _874) * cbLight._m0[_2097].y) * _2171) * _1994);
    float _2259 = (((((_2228 * _2151) + _875) * cbLight._m0[_2182].z) * _2247) * _1984) + (((((_2147 * _2151) + _875) * cbLight._m0[_2097].z) * _2171) * _1994);
    float _2321;
    float _2323;
    float _2325;
    if (_2034)
    {
        _2321 = _2257;
        _2323 = _2258;
        _2325 = _2259;
    }
    else
    {
        uint _2327 = _1961 + 2u;
        uint _2331 = _1961 + 10u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _755) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _656;
        float _2348 = cbLight._m0[_2327].y + _657;
        float _2349 = cbLight._m0[_2327].z + _658;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2327].xyz));
        float _4362 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2361 = dot(vec3(_575, _576, _577), vec3(_2354, _2355, _2356));
        float _4373 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4384 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2387 = 1.0 - _2346;
        float _2397 = (0.5 / (((_2126 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2387) + _2346) * _2360))) * _2360;
        float _4395 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2321 = (((((_2380 * _2148) + _873) * cbLight._m0[_2331].x) * _2399) * _2400) + _2257;
        _2323 = (((((_2380 * _2150) + _874) * cbLight._m0[_2331].y) * _2399) * _2400) + _2258;
        _2325 = (((((_2380 * _2151) + _875) * cbLight._m0[_2331].z) * _2399) * _2400) + _2259;
    }
    float _2435;
    float _2437;
    float _2439;
    if (_2052)
    {
        _2435 = _2321;
        _2437 = _2323;
        _2439 = _2325;
    }
    else
    {
        uint _2446 = _1961 + 3u;
        uint _2450 = _1961 + 11u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _755) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _656;
        float _2467 = cbLight._m0[_2446].y + _657;
        float _2468 = cbLight._m0[_2446].z + _658;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2446].xyz));
        float _4411 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2480 = dot(vec3(_575, _576, _577), vec3(_2473, _2474, _2475));
        float _4422 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4433 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2499 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2506 = 1.0 - _2465;
        float _2516 = (0.5 / (((_2126 * ((_2479 * _2506) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2506) + _2465) * _2479))) * _2479;
        float _4444 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2435 = (((((_2499 * _2148) + _873) * cbLight._m0[_2450].x) * _2518) * _2519) + _2321;
        _2437 = (((((_2499 * _2150) + _874) * cbLight._m0[_2450].y) * _2518) * _2519) + _2323;
        _2439 = (((((_2499 * _2151) + _875) * cbLight._m0[_2450].z) * _2518) * _2519) + _2325;
    }
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_1959.y == 0u)
    {
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2594;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2594;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2594;
        uvec4 _2609 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2610 = _2609.x;
        uint _2621 = uint((float(_2609.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2610))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2610)));
        float _2631 = (log2(_2597 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2632 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        uint _2635 = uint(isnan(14.0) ? _2632 : (isnan(_2632) ? 14.0 : min(_2632, 14.0)));
        uvec4 _2640 = texelFetch(g_lightClusterGridBuffer, int(((_2635 << 2u) + (_2621 << 6u)) >> 2u));
        uint _2641 = _2640.x;
        uint _2642 = _2609.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2642 >> 4u) & 15u)) + 4294967295u) & _2641) == 0u) || ((_2642 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            uint _2901 = 0u;
            uint _2910;
            bool _2911;
            for (;;)
            {
                _2910 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_2901 << 2u)) >> 2u)).x;
                _2911 = _2910 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2911)
                {
                    frontier_phi_68_pred = _2897;
                    frontier_phi_68_pred_1 = _2900;
                    frontier_phi_68_pred_2 = _2899;
                    frontier_phi_68_pred_3 = _2898;
                    frontier_phi_68_pred_4 = _2896;
                    frontier_phi_68_pred_5 = _2895;
                }
                else
                {
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    uint _3046;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2910;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3050 = uint(findLSB(_3046)) + (_2901 << 5u);
                        uint _3047 = (_3046 + 4294967295u) & _3046;
                        uint _3052 = _3050 * 48u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3072 = (_3050 * 48u) + 4u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3091 = (_3050 * 48u) + 8u;
                        vec3 _3102 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x));
                        float _3106 = _3066.x - _2595;
                        float _3107 = _3066.y - _2596;
                        float _3108 = _3066.z - _2597;
                        float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                        float _3112 = inversesqrt(_3109);
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3116 = dot(vec3(_699, _702, _705), vec3(_3113, _3114, _3115));
                        float _3121 = 1.0 - (_3109 * _3066.w);
                        float _4470 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3123 = sqrt(_3109) * _3085.w;
                        float _3126 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3116) + _3127;
                        float _3133 = _3123 * _3123;
                        float _3137 = ((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3122) / ((_3133 * 0.699999988079071044921875) + 1.0);
                        float _3141 = (-0.0) - _2595;
                        float _3142 = (-0.0) - _2596;
                        float _3143 = (-0.0) - _2597;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3158 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                        float _3159 = 1.0 - _903;
                        float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                        float _3167 = _3166 * _3166;
                        float _3168 = _3167 * _3167;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3179 = dot(vec3(_699, _702, _705), vec3(_3148, _3149, _3150));
                        float _4486 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3183 = dot(vec3(_699, _702, _705), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                        float _4497 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                        float _3191 = _3126 * _3167;
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3116) + _3192;
                        float _4508 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3197 = 1.0 - _3167;
                        float _3207 = (0.5 / (((_3196 * ((_3182 * _3197) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3167) * _3182))) * _3196;
                        float _4519 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3218 = (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3190 * _3190) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125))) * _3122;
                        _2970 = (_3137 * _3085.x) + _3043;
                        _2971 = (_3137 * _3085.y) + _3044;
                        _2972 = (_3137 * _3085.z) + _3045;
                        _2967 = (_3218 * _3102.x) + _3040;
                        _2968 = (_3218 * _3102.y) + _3041;
                        _2969 = (_3218 * _3102.z) + _3042;
                        if (_3047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _3047;
                        }
                    }
                    frontier_phi_68_pred = _2969;
                    frontier_phi_68_pred_1 = _2972;
                    frontier_phi_68_pred_2 = _2971;
                    frontier_phi_68_pred_3 = _2970;
                    frontier_phi_68_pred_4 = _2968;
                    frontier_phi_68_pred_5 = _2967;
                }
                _2748 = frontier_phi_68_pred;
                _2754 = frontier_phi_68_pred_1;
                _2752 = frontier_phi_68_pred_2;
                _2750 = frontier_phi_68_pred_3;
                _2746 = frontier_phi_68_pred_4;
                _2744 = frontier_phi_68_pred_5;
                uint _2902 = _2901 + 1u;
                if (_2902 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2895 = _2744;
                    _2896 = _2746;
                    _2897 = _2748;
                    _2898 = _2750;
                    _2899 = _2752;
                    _2900 = _2754;
                    _2901 = _2902;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((4294967295u << _2760) & _2641) == 0u)
        {
            _2863 = _2743;
            _2865 = _2745;
            _2867 = _2747;
            _2869 = _2749;
            _2871 = _2751;
            _2873 = _2753;
        }
        else
        {
            float _2888 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
            float _2889 = _2888 * _2595;
            float _2890 = _2888 * _2596;
            float _2891 = _2888 * _2597;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _3023 = _2743;
                float _3024 = _2745;
                float _3025 = _2747;
                float _3026 = _2749;
                float _3027 = _2751;
                float _3028 = _2753;
                uint _3029 = _2760;
                uint _3038;
                bool _3039;
                for (;;)
                {
                    _3038 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                    _3039 = _3038 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3039)
                    {
                        frontier_phi_79_pred = _3028;
                        frontier_phi_79_pred_1 = _3027;
                        frontier_phi_79_pred_2 = _3026;
                        frontier_phi_79_pred_3 = _3025;
                        frontier_phi_79_pred_4 = _3024;
                        frontier_phi_79_pred_5 = _3023;
                    }
                    else
                    {
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        uint _3251 = _3038;
                        uint _3252;
                        vec4 _3277;
                        float _3278;
                        vec4 _3293;
                        vec3 _3305;
                        vec4 _3320;
                        vec4 _3336;
                        float _3383;
                        bool _3384;
                        for (;;)
                        {
                            uint _3262 = ((_3029 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3251));
                            _3252 = (_3251 + 4294967295u) & _3251;
                            uint _3264 = _3262 * 40u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3278 = _3277.w;
                            uint _3280 = (_3262 * 40u) + 4u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3262 * 40u) + 8u;
                            _3305 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x));
                            uint _3307 = (_3262 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3323 = (_3262 * 40u) + 20u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3339 = (_3262 * 40u) + 24u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3358 = (_3262 * 40u) + 28u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3383 = fma(_2597, _3371.z, fma(_2596, _3371.y, _3371.x * _2595)) + _3371.w;
                            _3384 = !((fma(_2597, _3352.z, fma(_2596, _3352.y, _3352.x * _2595)) + _3352.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3384)
                            {
                                float _3411 = _3277.x - _2595;
                                float _3412 = _3277.y - _2596;
                                float _3413 = _3277.z - _2597;
                                float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                                float _3417 = inversesqrt(_3414);
                                float _3418 = _3417 * _3411;
                                float _3419 = _3417 * _3412;
                                float _3420 = _3417 * _3413;
                                float _3424 = 1.0 - (_3414 / (_3278 * _3278));
                                float _4530 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3429 = sqrt(_3414) * _3293.w;
                                float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                                float _3432 = _3431 * _3431;
                                float _3435 = ((1.0 - _3432) * dot(vec3(_3418, _3419, _3420), vec3(_699, _702, _705))) + _3432;
                                float _3438 = _3429 * _3429;
                                float _3442 = (fma(_2597, _3320.z, fma(_2596, _3320.y, _3320.x * _2595)) + _3320.w) / _3383;
                                float _3443 = (fma(_2597, _3336.z, fma(_2596, _3336.y, _3336.x * _2595)) + _3336.w) / _3383;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4546 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3425) / ((_3438 * 0.699999988079071044921875) + 1.0));
                                float _3461 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                                float _3462 = 1.0 - _903;
                                float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                                float _3470 = _3469 * _3469;
                                float _3471 = _3470 * _3470;
                                float _3472 = _3418 - _2889;
                                float _3473 = _3419 - _2890;
                                float _3474 = _3420 - _2891;
                                float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                                float _3482 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2889, (-0.0) - _2890, (-0.0) - _2891));
                                float _4557 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3486 = dot(vec3(_699, _702, _705), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                                float _4568 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                                float _3494 = _3431 * _3470;
                                float _3495 = _3494 * _3494;
                                float _3501 = ((1.0 - _3495) * dot(vec3(_699, _702, _705), vec3(_3418, _3419, _3420))) + _3495;
                                float _4579 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3503 = 1.0 - _3470;
                                float _3513 = (0.5 / (((_3502 * ((_3485 * _3503) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3470) * _3485))) * _3502;
                                float _4590 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3523 = (_3448 * _3425) * (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3493 * _3493) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3449 * _3293.z;
                                frontier_phi_85_pred_1 = _3449 * _3293.y;
                                frontier_phi_85_pred_2 = _3449 * _3293.x;
                                frontier_phi_85_pred_3 = _3523 * _3305.z;
                                frontier_phi_85_pred_4 = _3523 * _3305.y;
                                frontier_phi_85_pred_5 = _3523 * _3305.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_85_pred;
                            _3531 = frontier_phi_85_pred_1;
                            _3530 = frontier_phi_85_pred_2;
                            _3529 = frontier_phi_85_pred_3;
                            _3528 = frontier_phi_85_pred_4;
                            _3527 = frontier_phi_85_pred_5;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            _3234 = _3529 + _3247;
                            if (_3252 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3252;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3237;
                        frontier_phi_79_pred_1 = _3236;
                        frontier_phi_79_pred_2 = _3235;
                        frontier_phi_79_pred_3 = _3234;
                        frontier_phi_79_pred_4 = _3233;
                        frontier_phi_79_pred_5 = _3232;
                    }
                    _2874 = frontier_phi_79_pred;
                    _2872 = frontier_phi_79_pred_1;
                    _2870 = frontier_phi_79_pred_2;
                    _2868 = frontier_phi_79_pred_3;
                    _2866 = frontier_phi_79_pred_4;
                    _2864 = frontier_phi_79_pred_5;
                    uint _3030 = _3029 + 1u;
                    if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3023 = _2864;
                        _3024 = _2866;
                        _3025 = _2868;
                        _3026 = _2870;
                        _3027 = _2872;
                        _3028 = _2874;
                        _3029 = _3030;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2870;
                frontier_phi_60_61_ladder_1 = _2874;
                frontier_phi_60_61_ladder_2 = _2872;
                frontier_phi_60_61_ladder_3 = _2868;
                frontier_phi_60_61_ladder_4 = _2866;
                frontier_phi_60_61_ladder_5 = _2864;
            }
            else
            {
                frontier_phi_60_61_ladder = _2749;
                frontier_phi_60_61_ladder_1 = _2753;
                frontier_phi_60_61_ladder_2 = _2751;
                frontier_phi_60_61_ladder_3 = _2747;
                frontier_phi_60_61_ladder_4 = _2745;
                frontier_phi_60_61_ladder_5 = _2743;
            }
            _2863 = frontier_phi_60_61_ladder_5;
            _2865 = frontier_phi_60_61_ladder_4;
            _2867 = frontier_phi_60_61_ladder_3;
            _2869 = frontier_phi_60_61_ladder;
            _2871 = frontier_phi_60_61_ladder_2;
            _2873 = frontier_phi_60_61_ladder_1;
        }
        float _2878 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
        _2653 = (_2878 * _2869) + _2090;
        _2655 = (_2878 * _2871) + _2092;
        _2657 = (_2878 * _2873) + _2094;
        _2659 = ((_2863 * _873) * _2878) + _2435;
        _2661 = ((_2865 * _874) * _2878) + _2437;
        _2663 = ((_2867 * _875) * _2878) + _2439;
    }
    else
    {
        _2653 = _2090;
        _2655 = _2092;
        _2657 = _2094;
        _2659 = _2435;
        _2661 = _2437;
        _2663 = _2439;
    }
    float _4606 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4617 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4628 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4639 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2681 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2653 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _887))) + ((_2659 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1726)) * cbPerFrame._m0[3u].x);
    float _2682 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2655 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _887))) + ((_2661 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1726)) * cbPerFrame._m0[3u].x);
    float _2683 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2657 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _887))) + ((_2663 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1726)) * cbPerFrame._m0[3u].x);
    float _2688 = cbInstanceData._m0[_779 + 6u].w * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)));
    float _2693 = _676 / cbSceneParam._m0[86u].x;
    float _2694 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2769 = _2768 / _599;
        float _2780 = _2769 * _649;
        float _2781 = _650 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2783 = _2769 * _651;
        float _2785 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2781;
        float _2793 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2782 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2924 = 1.0 / cbSceneParam._m0[80u].x;
            float _2925 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2926 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            _2980 = ((abs(_2793 / _2782) * cbSceneParam._m0[80u].y) * ((((_2935 - _2936) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))))) * _2924)) - ((exp2(_2803 * _2935) - exp2(_2803 * _2936)) * _2924))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2713);
        _2805 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2807 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2809 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2811 = _2991 * _2713;
    }
    else
    {
        _2805 = _2710;
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
    }
    bool _3018;
    vec4 _2821;
    vec4 _2843;
    float _2845;
    float _2849;
    float _2850;
    float _2851;
    float _2852;
    bool _2862;
    for (;;)
    {
        _2821 = cbMatDynParam._m0[0u];
        float _2823 = roundEven(_2821.y);
        bool _2824 = _2823 == 3.0;
        float _2825 = log2(_2811);
        float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * _2681;
        float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * _2682;
        float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * _2683;
        float _2841 = _665 + (-0.5);
        _2843 = cbMtdParam._m0[1u];
        _2845 = _2843.y * _2841;
        float _2848 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2849 = _2848 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
        _2850 = _2848 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
        _2851 = _2848 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
        _2852 = _2841 * 0.999000012874603271484375;
        _2862 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2862)
        {
            if ((cbInstanceData._m0[_779 + 7u].x + _2852) < 0.5)
            {
                _3018 = true;
                break;
            }
        }
        uint _2959 = _780 + uint(_2821.w);
        if ((cbInstanceData._m0[_2959].w < 1.0) && ((cbInstanceData._m0[_2959].w + _2852) < 0.5))
        {
            _3018 = true;
            break;
        }
        if ((_2845 + _387) < _2843.x)
        {
            _3018 = true;
            break;
        }
        _3018 = false;
        break;
    }
    float _3223;
    if (_3018)
    {
        discard_state = true;
        _3223 = 0.0;
    }
    else
    {
        _3223 = _2688;
    }
    SV_Target.x = _2849;
    SV_Target.y = _2850;
    SV_Target.z = _2851;
    SV_Target.w = _3223;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2688;
    discard_exit();
}


