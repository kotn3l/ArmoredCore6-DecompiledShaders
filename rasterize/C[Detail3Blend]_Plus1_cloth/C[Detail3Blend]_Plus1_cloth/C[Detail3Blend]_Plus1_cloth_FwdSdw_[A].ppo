#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1295;
float _3963;
float _3964;
float _3965;
float _3966;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _256.z;
    float _262 = _256.w;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    float _276 = exp2(log2(1.0 - _262) * 10.19999980926513671875);
    vec4 _289 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _314 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _325 = cbMtdParam._m0[9u].x * _314.x;
    float _326 = cbMtdParam._m0[9u].y * _314.y;
    float _327 = cbMtdParam._m0[9u].z * _314.z;
    float _334 = (((cbMtdParam._m0[10u].x * _289.x) - _325) * _276) + _325;
    float _335 = (((cbMtdParam._m0[10u].y * _289.y) - _326) * _276) + _326;
    float _336 = (((cbMtdParam._m0[10u].z * _289.z) - _327) * _276) + _327;
    float _340 = exp2(log2(_262) * 10.0);
    vec4 _352 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _386 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _391 = _386.w;
    vec4 _411 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _422 = cbMtdParam._m0[12u].x * _411.x;
    float _423 = cbMtdParam._m0[12u].y * _411.y;
    float _424 = cbMtdParam._m0[12u].z * _411.z;
    float _431 = ((((((((cbMtdParam._m0[11u].x * _352.x) - _334) * _340) + _334) * 4.55000019073486328125) * _386.x) - _422) * _270) + _422;
    float _432 = ((((((((cbMtdParam._m0[11u].y * _352.y) - _335) * _340) + _335) * 4.55000019073486328125) * _386.y) - _423) * _270) + _423;
    float _433 = ((((((((cbMtdParam._m0[11u].z * _352.z) - _336) * _340) + _336) * 4.55000019073486328125) * _386.z) - _424) * _270) + _424;
    vec4 _450 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _472 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _478 = cbMtdParam._m0[13u].x + _472.z;
    float _481 = (((cbMtdParam._m0[13u].y + _450.z) - _478) * _276) + _478;
    vec4 _494 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _518 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _524 = cbMtdParam._m0[13u].z + _518.z;
    float _527 = ((((_261 * 2.0) * ((((_494.z - _481) + cbMtdParam._m0[14u].y) * _340) + _481)) - _524) * _270) + _524;
    float _538 = ((_450.x - _474) * _276) + _474;
    float _539 = ((_450.y - _475) * _276) + _475;
    float _554 = (((((((_494.x - _538) * _340) + _538) - _520) * _270) + _520) * 2.0) + (-1.0);
    float _555 = (((((((_494.y - _539) * _340) + _539) - _521) * _270) + _521) * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3985 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    float _564 = _554 + (cbMtdParam._m0[13u].w * ((_256.x * 2.0) + (-1.0)));
    float _565 = _555 + (cbMtdParam._m0[13u].w * ((_256.y * 2.0) + (-1.0)));
    float _568 = fma(_561, _240, fma(_565, _232 * TANGENT.x, (_218 * _210) * _564));
    float _571 = fma(_561, _241, fma(_565, _232 * TANGENT.y, (_218 * _211) * _564));
    float _574 = fma(_561, _242, fma(_565, _232 * TANGENT.z, (_218 * _212) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3996 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _582 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _583 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _584 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _585 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _586 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _587 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    vec4 _667 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _669 = _667.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _974 = sqrt(((_653 * _653) + (_654 * _654)) + (_655 * _655));
        float _980 = (cbMatDynParam._m0[5u].x * _974) + cbMatDynParam._m0[5u].y;
        float _4062 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _985 = (cbMatDynParam._m0[5u].z * _974) + cbMatDynParam._m0[5u].w;
        float _4073 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) - _981)) + _981) < ((_669 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _683 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _685 = _683.w;
    float _703 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _706 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _709 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _711 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _713 = _711.x;
    float _725 = (((_711.y - _583) + (_711.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    float _742 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_713 * _713)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _750 = (((cbMatDynParam._m0[15u].x - _587) * cbMatDynParam._m0[15u].w) * _742) + _587;
    float _759 = ((_742 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _725)) + _725;
    uint _783 = uint(roundEven(NORMAL.w)) * 13u;
    uint _784 = _783 + 9u;
    uint _785 = _784 + uint(cbMatDynParam._m0[0u].w);
    float _791 = (cbMtdParam._m0[0u].x * _584) * cbInstanceData._m0[_785].x;
    float _792 = (cbMtdParam._m0[0u].y * _585) * cbInstanceData._m0[_785].y;
    float _793 = (cbMtdParam._m0[0u].z * _586) * cbInstanceData._m0[_785].z;
    float _4084 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    vec4 _797 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _802 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _813 = (((_802.x - _750) + (_802.w * _750)) * cbMtdParam._m0[3u].x) + _750;
    float _826 = (cbMtdParam._m0[3u].x * (((_794 * _685) - _794) + _797.x)) + _794;
    float _827 = (cbMtdParam._m0[3u].x * (((_795 * _685) - _795) + _797.y)) + _795;
    float _828 = (cbMtdParam._m0[3u].x * (((_796 * _685) - _796) + _797.z)) + _796;
    vec4 _829 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _842 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_750 * (_584 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_750 * (_585 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_750 * (_586 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _829.z;
    float _846 = _842 * cbMatDynParam._m0[13u].w;
    float _856 = (_846 * (cbMatDynParam._m0[13u].x - _826)) + _826;
    float _857 = (_846 * (cbMatDynParam._m0[13u].y - _827)) + _827;
    float _858 = (_846 * (cbMatDynParam._m0[13u].z - _828)) + _828;
    float _866 = ((_842 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _813)) + _813;
    float _867 = 1.0 - _866;
    float _868 = _867 * _856;
    float _869 = _867 * _857;
    float _870 = _867 * _858;
    float _874 = (_856 + (-0.039999999105930328369140625)) * _866;
    float _875 = (_857 + (-0.039999999105930328369140625)) * _866;
    float _876 = (_858 + (-0.039999999105930328369140625)) * _866;
    float _877 = _874 + 0.039999999105930328369140625;
    float _878 = _875 + 0.039999999105930328369140625;
    float _879 = _876 + 0.039999999105930328369140625;
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _891 = _888.x * TEXCOORD_4;
    float _892 = dot(vec3(_579, _580, _581), vec3(_660, _661, _662));
    float _895 = _892 * 2.0;
    float _899 = (_895 * _579) - _660;
    float _900 = (_895 * _580) - _661;
    float _901 = (_895 * _581) - _662;
    float _905 = abs(dot(vec3(_660, _661, _662), vec3(_579, _580, _581)));
    float _4117 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _907 = sqrt(_759);
    float _920 = exp2((_907 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_907 * 3.0));
    float _926 = (1.0 - _920) * ((_907 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _927 = _920 * _907;
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _1023 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _1027 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1052 = _955 + _579;
        float _1053 = _959 + _580;
        float _1054 = _963 + _581;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_579, _580, _581), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4165 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_579, _580, _581), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4198 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_579, _580, _581), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4231 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1342 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1346 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1369 = _955 + _579;
        float _1370 = _959 + _580;
        float _1371 = _963 + _581;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_579, _580, _581), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4294 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_579, _580, _581), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4327 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_579, _580, _581), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4360 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = _1295;
        _1615 = _1295;
        _1616 = _1295;
        _1617 = _1295;
        _1618 = _1295;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1308)) + _1308;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1309)) + _1309;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _899 * 0.5;
    float _1676 = _900 * 0.5;
    float _1677 = _901 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1715;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1726;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1717 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1730 = (_1726 * cbModelParam._m0[1u].x) + (_1715 * (1.0 - cbModelParam._m0[1u].x));
    float _1740 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1740 : min(cbModelParam._m0[25u].z, _1740));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_901, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899));
        float _1802 = fma(_901, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899));
        float _1805 = fma(_901, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1833 = frontier_phi_19_17_ladder;
        }
        float _2008;
        if (_1802 > 0.0)
        {
            _2008 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2008 = frontier_phi_28_24_ladder;
        }
        float _2303;
        if (_1805 > 0.0)
        {
            _2303 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2303 = frontier_phi_40_35_ladder;
        }
        float _2305 = isnan(_2008) ? _1833 : (isnan(_1833) ? _2008 : min(_1833, _2008));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1799) + _1788;
        float _2311 = (_2306 * _1802) + _1792;
        float _2312 = (_2306 * _1805) + _1796;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2315 = (-1.0) - _2313;
        float _2317 = _2313 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2312 > _2317) || ((_2312 < _2315) || ((_2311 > _2317) || ((_2311 < _2315) || ((_2310 < _2315) || (_2310 > _2317))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2312, cbModelParam._m0[9u].z, fma(_2311, cbModelParam._m0[9u].y, _2310 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2312, cbModelParam._m0[10u].z, fma(_2311, cbModelParam._m0[10u].y, _2310 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2312, cbModelParam._m0[11u].z, fma(_2311, cbModelParam._m0[11u].y, _2310 * cbModelParam._m0[11u].x))), _1741);
            frontier_phi_18_40_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_18_40_ladder_2;
        _1823 = frontier_phi_18_40_ladder_1;
        _1825 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_899, _900, _901), _1741);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_901, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899));
        float _1901 = fma(_901, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899));
        float _1904 = fma(_901, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899));
        float _2013;
        if (_1898 > 0.0)
        {
            _2013 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2013 = frontier_phi_30_26_ladder;
        }
        float _2330;
        if (_1901 > 0.0)
        {
            _2330 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2330 = frontier_phi_42_37_ladder;
        }
        float _2668;
        if (_1904 > 0.0)
        {
            _2668 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2668 = frontier_phi_52_49_ladder;
        }
        float _2670 = isnan(_2330) ? _2013 : (isnan(_2013) ? _2330 : min(_2013, _2330));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1898) + _1887;
        float _2676 = (_2671 * _1901) + _1891;
        float _2677 = (_2671 * _1904) + _1895;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_27_52_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_27_52_ladder_2;
        _1925 = frontier_phi_27_52_ladder_1;
        _1927 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_899, _900, _901), _1830);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_926 * _877) + _927) * _891) * ((cbModelParam._m0[1u].w * (_1923 - _1821)) + _1821);
    float _1942 = (((_926 * _878) + _927) * _891) * ((cbModelParam._m0[1u].w * (_1925 - _1823)) + _1823);
    float _1944 = (((_926 * _879) + _927) * _891) * ((cbModelParam._m0[1u].w * (_1927 - _1825)) + _1825);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2000 = _1987 / _1999;
    float _2001 = _1991 / _1999;
    float _2002 = _1995 / _1999;
    float _2149;
    float _2150;
    float _2151;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2029 = ((uint(_2002 > cbSceneParam._m0[59u].y) + uint(_2002 > cbSceneParam._m0[59u].x)) + uint(_2002 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2030 = _2029 + 43u;
        uint _2038 = _2029 + 44u;
        uint _2046 = _2029 + 45u;
        uint _2054 = _2029 + 46u;
        float _2065 = fma(_1999, cbSceneParam._m0[_2030].w, fma(_1995, cbSceneParam._m0[_2030].z, fma(_1991, cbSceneParam._m0[_2030].y, _1987 * cbSceneParam._m0[_2030].x)));
        float _2069 = fma(_1999, cbSceneParam._m0[_2038].w, fma(_1995, cbSceneParam._m0[_2038].z, fma(_1991, cbSceneParam._m0[_2038].y, _1987 * cbSceneParam._m0[_2038].x)));
        float _2077 = fma(_1999, cbSceneParam._m0[_2054].w, fma(_1995, cbSceneParam._m0[_2054].z, fma(_1991, cbSceneParam._m0[_2054].y, _1987 * cbSceneParam._m0[_2054].x)));
        float _2082 = cbSceneParam._m0[33u].z * _2077;
        float _2084 = cbSceneParam._m0[33u].w * _2077;
        float _2087 = fma(_1999, cbSceneParam._m0[_2046].w, fma(_1995, cbSceneParam._m0[_2046].z, fma(_1991, cbSceneParam._m0[_2046].y, _1987 * cbSceneParam._m0[_2046].x))) / _2077;
        float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
        float _4486 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2142 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 + _2065) / _2077, (_2084 + _2069) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2065) / _2077, (_2069 - _2082) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2082) / _2077, (_2069 - _2084) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2084) / _2077, (_2082 + _2069) / _2077), _2087), 0.0)).x), vec4(0.25)));
        _2149 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
        _2150 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
        _2151 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2149 = 1.0;
        _2150 = 1.0;
        _2151 = 1.0;
    }
    float _2215;
    float _2217;
    float _2219;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2203 = fma(_1999, cbSceneParam._m0[63u].w, fma(_1995, cbSceneParam._m0[63u].z, fma(_1991, cbSceneParam._m0[63u].y, _1987 * cbSceneParam._m0[63u].x)));
        float _2204 = fma(_1999, cbSceneParam._m0[60u].w, fma(_1995, cbSceneParam._m0[60u].z, fma(_1991, cbSceneParam._m0[60u].y, _1987 * cbSceneParam._m0[60u].x))) / _2203;
        float _2205 = fma(_1999, cbSceneParam._m0[61u].w, fma(_1995, cbSceneParam._m0[61u].z, fma(_1991, cbSceneParam._m0[61u].y, _1987 * cbSceneParam._m0[61u].x))) / _2203;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2204 >= cbSceneParam._m0[64u].x) && (_2205 >= cbSceneParam._m0[64u].y)) && (_2204 <= cbSceneParam._m0[64u].z)) && (_2205 <= cbSceneParam._m0[64u].w))
        {
            float _2343 = fma(_1999, cbSceneParam._m0[62u].w, fma(_1995, cbSceneParam._m0[62u].z, fma(_1991, cbSceneParam._m0[62u].y, _1987 * cbSceneParam._m0[62u].x))) / _2203;
            float _2347 = isnan(cbSceneParam._m0[41u].w) ? _2343 : (isnan(_2343) ? cbSceneParam._m0[41u].w : max(_2343, cbSceneParam._m0[41u].w));
            float _2390 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
            float _4502 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
            float _2397 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2204, cbSceneParam._m0[33u].w + _2205), _2347), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2204, _2205 - cbSceneParam._m0[33u].z), _2347), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].z, _2205 - cbSceneParam._m0[33u].w), _2347), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2205), _2347), 0.0)).x), vec4(0.25)));
            float _2401 = 1.0 - (_2397 * cbSceneParam._m0[34u].x);
            float _2402 = 1.0 - (_2397 * cbSceneParam._m0[34u].y);
            float _2403 = 1.0 - (_2397 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
            frontier_phi_39_38_ladder_1 = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
            frontier_phi_39_38_ladder_2 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
        }
        else
        {
            frontier_phi_39_38_ladder = _2150;
            frontier_phi_39_38_ladder_1 = _2149;
            frontier_phi_39_38_ladder_2 = _2151;
        }
        _2215 = frontier_phi_39_38_ladder_1;
        _2217 = frontier_phi_39_38_ladder;
        _2219 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2215 = _2149;
        _2217 = _2150;
        _2219 = _2151;
    }
    uvec4 _2224 = floatBitsToUint(cbInstanceData._m0[_783 + 5u]);
    uint _2226 = _2224.x * 14u;
    uint _2227 = _2226 + 13u;
    float _2234 = _891 + (-1.0);
    float _2239 = (cbLight._m0[_2227].x * _2234) + 1.0;
    float _2240 = (cbLight._m0[_2227].y * _2234) + 1.0;
    float _2241 = (cbLight._m0[_2227].z * _2234) + 1.0;
    float _2242 = (cbLight._m0[_2227].w * _2234) + 1.0;
    uint _2243 = _2226 + 5u;
    float _2249 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2253 = _2226 + 4u;
    float _2262 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2266 = _2226 | 1u;
    float _2277 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_579, _580, _581));
    float _2280 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_579, _580, _581));
    float _4538 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _4549 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2285 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2287 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2294 = ((cbLight._m0[_2243].x * _2249) * _2287) + (((cbLight._m0[_2253].x * _2215) * _2262) * _2285);
    float _2295 = ((_2249 * cbLight._m0[_2243].y) * _2287) + (((cbLight._m0[_2253].y * _2217) * _2262) * _2285);
    float _2296 = ((_2249 * cbLight._m0[_2243].z) * _2287) + (((cbLight._m0[_2253].z * _2219) * _2262) * _2285);
    uvec4 _2300 = floatBitsToUint(cbLight._m0[_2226 + 12u]);
    bool _2302 = _2300.x == 0u;
    float _2404;
    float _2406;
    float _2408;
    if (_2302)
    {
        _2404 = _2294;
        _2406 = _2295;
        _2408 = _2296;
    }
    else
    {
        uint _2412 = _2226 + 6u;
        float _2428 = (dot(vec3(cbLight._m0[_2226 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4560 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2431 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2404 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2294;
        _2406 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2295;
        _2408 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2296;
    }
    bool _2411 = _2300.y == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2411)
    {
        _2466 = _2404;
        _2468 = _2406;
        _2470 = _2408;
    }
    else
    {
        uint _2639 = _2226 + 7u;
        float _2655 = (dot(vec3(cbLight._m0[_2226 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2656 = _2655 * _2655;
        float _4576 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2657 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2658 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2466 = (((cbLight._m0[_2639].x * 0.3183098733425140380859375) * _2657) * _2658) + _2404;
        _2468 = (((cbLight._m0[_2639].y * 0.3183098733425140380859375) * _2657) * _2658) + _2406;
        _2470 = (((cbLight._m0[_2639].z * 0.3183098733425140380859375) * _2657) * _2658) + _2408;
    }
    uint _2473 = _2226 + 8u;
    float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _759) * 0.949999988079071044921875);
    float _2487 = _2486 * _2486;
    float _2488 = cbLight._m0[_2226].x + _660;
    float _2489 = cbLight._m0[_2226].y + _661;
    float _2490 = cbLight._m0[_2226].z + _662;
    float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
    float _2495 = _2494 * _2488;
    float _2496 = _2494 * _2489;
    float _2497 = _2494 * _2490;
    float _2498 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2226].xyz));
    float _4592 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _2502 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2503 = dot(vec3(_579, _580, _581), vec3(_2495, _2496, _2497));
    float _4614 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2507 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2495, _2496, _2497));
    float _4625 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2511 = _2487 * _2487;
    float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
    float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2524 = 0.959999978542327880859375 - _874;
    float _2526 = 0.959999978542327880859375 - _875;
    float _2527 = 0.959999978542327880859375 - _876;
    float _2534 = 1.0 - _2487;
    float _2545 = (0.5 / (((_2502 * ((_2501 * _2534) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2534) + _2487) * _2501))) * _2501;
    float _4636 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2547 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
    uint _2561 = _2226 + 9u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _759) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2266].x + _660;
    float _2575 = cbLight._m0[_2266].y + _661;
    float _2576 = cbLight._m0[_2266].z + _662;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2266].xyz));
    float _4647 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2588 = dot(vec3(_579, _580, _581), vec3(_2581, _2582, _2583));
    float _4658 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2581, _2582, _2583));
    float _4669 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2573 * _2573;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2614 = 1.0 - _2573;
    float _2624 = (0.5 / (((_2502 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2614) + _2573) * _2587))) * _2587;
    float _4680 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    float _2636 = (((((_2607 * _2524) + _877) * cbLight._m0[_2561].x) * _2626) * _2249) + ((((cbLight._m0[_2473].x * _2215) * ((_2523 * _2524) + _877)) * _2547) * _2262);
    float _2637 = (((((_2607 * _2526) + _878) * cbLight._m0[_2561].y) * _2626) * _2249) + ((((cbLight._m0[_2473].y * _2217) * ((_2523 * _2526) + _878)) * _2547) * _2262);
    float _2638 = (((((_2607 * _2527) + _879) * cbLight._m0[_2561].z) * _2626) * _2249) + ((((cbLight._m0[_2473].z * _2219) * ((_2523 * _2527) + _879)) * _2547) * _2262);
    float _2694;
    float _2696;
    float _2698;
    if (_2302)
    {
        _2694 = _2636;
        _2696 = _2637;
        _2698 = _2638;
    }
    else
    {
        uint _2700 = _2226 + 2u;
        uint _2704 = _2226 + 10u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _759) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _660;
        float _2721 = cbLight._m0[_2700].y + _661;
        float _2722 = cbLight._m0[_2700].z + _662;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2700].xyz));
        float _4691 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2734 = dot(vec3(_579, _580, _581), vec3(_2727, _2728, _2729));
        float _4702 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4713 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2753 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2760 = 1.0 - _2719;
        float _2770 = (0.5 / (((_2502 * ((_2733 * _2760) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2760) + _2719) * _2733))) * _2733;
        float _4724 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2772 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2773 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2694 = (((((_2753 * _2524) + _877) * cbLight._m0[_2704].x) * _2772) * _2773) + _2636;
        _2696 = (((((_2753 * _2526) + _878) * cbLight._m0[_2704].y) * _2772) * _2773) + _2637;
        _2698 = (((((_2753 * _2527) + _879) * cbLight._m0[_2704].z) * _2772) * _2773) + _2638;
    }
    float _2804;
    float _2806;
    float _2808;
    if (_2411)
    {
        _2804 = _2694;
        _2806 = _2696;
        _2808 = _2698;
    }
    else
    {
        uint _2815 = _2226 + 3u;
        uint _2819 = _2226 + 11u;
        float _2833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2815].w)) * _759) * 0.949999988079071044921875);
        float _2834 = _2833 * _2833;
        float _2835 = cbLight._m0[_2815].x + _660;
        float _2836 = cbLight._m0[_2815].y + _661;
        float _2837 = cbLight._m0[_2815].z + _662;
        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
        float _2842 = _2841 * _2835;
        float _2843 = _2841 * _2836;
        float _2844 = _2841 * _2837;
        float _2845 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2815].xyz));
        float _4740 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2849 = dot(vec3(_579, _580, _581), vec3(_2842, _2843, _2844));
        float _4751 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2853 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_2842, _2843, _2844));
        float _4762 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2857 = _2834 * _2834;
        float _2861 = ((_2852 * _2852) * (_2857 + (-1.0))) + 1.0;
        float _2868 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2875 = 1.0 - _2834;
        float _2885 = (0.5 / (((_2502 * ((_2848 * _2875) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2875) + _2834) * _2848))) * _2848;
        float _4773 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2887 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2857 / ((_2861 * _2861) * 3.141590118408203125));
        float _2888 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2804 = (((((_2868 * _2524) + _877) * cbLight._m0[_2819].x) * _2887) * _2888) + _2694;
        _2806 = (((((_2868 * _2526) + _878) * cbLight._m0[_2819].y) * _2887) * _2888) + _2696;
        _2808 = (((((_2868 * _2527) + _879) * cbLight._m0[_2819].z) * _2887) * _2888) + _2698;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2224.y == 0u)
    {
        uvec4 _2909 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2910 = _2909.x;
        uint _2921 = uint((float(_2909.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2910))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2910)));
        float _2931 = (log2(_2002 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2932 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        uint _2935 = uint(isnan(14.0) ? _2932 : (isnan(_2932) ? 14.0 : min(_2932, 14.0)));
        uvec4 _2940 = texelFetch(g_lightClusterGridBuffer, int(((_2935 << 2u) + (_2921 << 6u)) >> 2u));
        uint _2941 = _2940.x;
        uint _2942 = _2909.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2942 >> 4u) & 15u)) + 4294967295u) & _2941) == 0u) || ((_2942 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            uint _3180 = 0u;
            uint _3189;
            bool _3190;
            for (;;)
            {
                _3189 = texelFetch(g_lightClassification, int((((_2935 << 5u) + (_2921 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                _3190 = _3189 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3190)
                {
                    frontier_phi_73_pred = _3179;
                    frontier_phi_73_pred_1 = _3178;
                    frontier_phi_73_pred_2 = _3177;
                    frontier_phi_73_pred_3 = _3176;
                    frontier_phi_73_pred_4 = _3175;
                    frontier_phi_73_pred_5 = _3174;
                }
                else
                {
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    uint _3325;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3189;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    for (;;)
                    {
                        uint _3329 = uint(findLSB(_3325)) + (_3180 << 5u);
                        uint _3326 = (_3325 + 4294967295u) & _3325;
                        uint _3331 = _3329 * 48u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3351 = (_3329 * 48u) + 4u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3370 = (_3329 * 48u) + 8u;
                        vec3 _3381 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x));
                        float _3385 = _3345.x - _2000;
                        float _3386 = _3345.y - _2001;
                        float _3387 = _3345.z - _2002;
                        float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                        float _3391 = inversesqrt(_3388);
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3395 = dot(vec3(_703, _706, _709), vec3(_3392, _3393, _3394));
                        float _3400 = 1.0 - (_3388 * _3345.w);
                        float _4799 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3402 = sqrt(_3388) * _3364.w;
                        float _3405 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3395) + _3406;
                        float _3412 = _3402 * _3402;
                        float _3416 = ((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3401) / ((_3412 * 0.699999988079071044921875) + 1.0);
                        float _3420 = (-0.0) - _2000;
                        float _3421 = (-0.0) - _2001;
                        float _3422 = (-0.0) - _2002;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3436 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _907;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_703, _706, _709), vec3(_3427, _3428, _3429));
                        float _4815 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3461 = dot(vec3(_703, _706, _709), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4826 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3405 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3395) + _3470;
                        float _4837 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4848 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3468 * _3468) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125))) * _3401;
                        _3249 = (_3416 * _3364.x) + _3322;
                        _3250 = (_3416 * _3364.y) + _3323;
                        _3251 = (_3416 * _3364.z) + _3324;
                        _3246 = (_3496 * _3381.x) + _3319;
                        _3247 = (_3496 * _3381.y) + _3320;
                        _3248 = (_3496 * _3381.z) + _3321;
                        if (_3326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3326;
                        }
                    }
                    frontier_phi_73_pred = _3251;
                    frontier_phi_73_pred_1 = _3250;
                    frontier_phi_73_pred_2 = _3249;
                    frontier_phi_73_pred_3 = _3248;
                    frontier_phi_73_pred_4 = _3247;
                    frontier_phi_73_pred_5 = _3246;
                }
                _3033 = frontier_phi_73_pred;
                _3031 = frontier_phi_73_pred_1;
                _3029 = frontier_phi_73_pred_2;
                _3027 = frontier_phi_73_pred_3;
                _3025 = frontier_phi_73_pred_4;
                _3023 = frontier_phi_73_pred_5;
                uint _3181 = _3180 + 1u;
                if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3174 = _3023;
                    _3175 = _3025;
                    _3176 = _3027;
                    _3177 = _3029;
                    _3178 = _3031;
                    _3179 = _3033;
                    _3180 = _3181;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((4294967295u << _3039) & _2941) == 0u)
        {
            _3142 = _3022;
            _3144 = _3024;
            _3146 = _3026;
            _3148 = _3028;
            _3150 = _3030;
            _3152 = _3032;
        }
        else
        {
            float _3167 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
            float _3168 = _3167 * _2000;
            float _3169 = _3167 * _2001;
            float _3170 = _3167 * _2002;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3302 = _3022;
                float _3303 = _3024;
                float _3304 = _3026;
                float _3305 = _3028;
                float _3306 = _3030;
                float _3307 = _3032;
                uint _3308 = _3039;
                uint _3317;
                bool _3318;
                for (;;)
                {
                    _3317 = texelFetch(g_lightClassification, int((((_2935 << 5u) + (_2921 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                    _3318 = _3317 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3318)
                    {
                        frontier_phi_84_pred = _3306;
                        frontier_phi_84_pred_1 = _3305;
                        frontier_phi_84_pred_2 = _3304;
                        frontier_phi_84_pred_3 = _3303;
                        frontier_phi_84_pred_4 = _3302;
                        frontier_phi_84_pred_5 = _3307;
                    }
                    else
                    {
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        uint _3529 = _3317;
                        uint _3530;
                        vec4 _3555;
                        float _3556;
                        vec4 _3571;
                        vec3 _3583;
                        vec4 _3598;
                        vec4 _3614;
                        float _3661;
                        bool _3662;
                        for (;;)
                        {
                            uint _3540 = ((_3308 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3529));
                            _3530 = (_3529 + 4294967295u) & _3529;
                            uint _3542 = _3540 * 40u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3556 = _3555.w;
                            uint _3558 = (_3540 * 40u) + 4u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3540 * 40u) + 8u;
                            _3583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x));
                            uint _3585 = (_3540 * 40u) + 16u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3601 = (_3540 * 40u) + 20u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3617 = (_3540 * 40u) + 24u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3636 = (_3540 * 40u) + 28u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3661 = fma(_2002, _3649.z, fma(_2001, _3649.y, _3649.x * _2000)) + _3649.w;
                            _3662 = !((fma(_2002, _3630.z, fma(_2001, _3630.y, _3630.x * _2000)) + _3630.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3662)
                            {
                                float _3689 = _3555.x - _2000;
                                float _3690 = _3555.y - _2001;
                                float _3691 = _3555.z - _2002;
                                float _3692 = dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691));
                                float _3695 = inversesqrt(_3692);
                                float _3696 = _3695 * _3689;
                                float _3697 = _3695 * _3690;
                                float _3698 = _3695 * _3691;
                                float _3702 = 1.0 - (_3692 / (_3556 * _3556));
                                float _4859 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3707 = sqrt(_3692) * _3571.w;
                                float _3709 = 1.39999997615814208984375 / (_3707 + 1.39999997615814208984375);
                                float _3710 = _3709 * _3709;
                                float _3713 = ((1.0 - _3710) * dot(vec3(_3696, _3697, _3698), vec3(_703, _706, _709))) + _3710;
                                float _3716 = _3707 * _3707;
                                float _3720 = (fma(_2002, _3598.z, fma(_2001, _3598.y, _3598.x * _2000)) + _3598.w) / _3661;
                                float _3721 = (fma(_2002, _3614.z, fma(_2001, _3614.y, _3614.x * _2000)) + _3614.w) / _3661;
                                float _3725 = 1.0 - dot(vec2(_3720, _3721), vec2(_3720, _3721));
                                float _4875 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3727 = _3726 * (((isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0))) * _3703) / ((_3716 * 0.699999988079071044921875) + 1.0));
                                float _3739 = exp2(log2(1.0 / ((_3716 * 3.5) + 5.0)) * 0.25);
                                float _3740 = 1.0 - _907;
                                float _3747 = sqrt(1.0 - ((1.0 - (_3740 * _3740)) * (1.0 - (_3739 * _3739))));
                                float _3748 = _3747 * _3747;
                                float _3749 = _3748 * _3748;
                                float _3750 = _3696 - _3168;
                                float _3751 = _3697 - _3169;
                                float _3752 = _3698 - _3170;
                                float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                                float _3760 = dot(vec3(_703, _706, _709), vec3((-0.0) - _3168, (-0.0) - _3169, (-0.0) - _3170));
                                float _4886 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3764 = dot(vec3(_703, _706, _709), vec3(_3756 * _3750, _3756 * _3751, _3756 * _3752));
                                float _4897 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3771 = ((_3767 * _3767) * (_3749 + (-1.0))) + 1.0;
                                float _3772 = _3709 * _3748;
                                float _3773 = _3772 * _3772;
                                float _3779 = ((1.0 - _3773) * dot(vec3(_703, _706, _709), vec3(_3696, _3697, _3698))) + _3773;
                                float _4908 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3781 = 1.0 - _3748;
                                float _3791 = (0.5 / (((_3780 * ((_3763 * _3781) + _3748)) + 9.9999999392252902907785028219223e-09) + (((_3780 * _3781) + _3748) * _3763))) * _3780;
                                float _4919 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3801 = (_3726 * _3703) * (((_3749 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3771 * _3771) * ((_3716 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3727 * _3571.y;
                                frontier_phi_90_pred_1 = _3727 * _3571.x;
                                frontier_phi_90_pred_2 = _3801 * _3583.z;
                                frontier_phi_90_pred_3 = _3801 * _3583.y;
                                frontier_phi_90_pred_4 = _3801 * _3583.x;
                                frontier_phi_90_pred_5 = _3727 * _3571.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3809 = frontier_phi_90_pred;
                            _3808 = frontier_phi_90_pred_1;
                            _3807 = frontier_phi_90_pred_2;
                            _3806 = frontier_phi_90_pred_3;
                            _3805 = frontier_phi_90_pred_4;
                            _3810 = frontier_phi_90_pred_5;
                            _3513 = _3808 + _3526;
                            _3514 = _3809 + _3527;
                            _3515 = _3810 + _3528;
                            _3510 = _3805 + _3523;
                            _3511 = _3806 + _3524;
                            _3512 = _3807 + _3525;
                            if (_3530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3530;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3514;
                        frontier_phi_84_pred_1 = _3513;
                        frontier_phi_84_pred_2 = _3512;
                        frontier_phi_84_pred_3 = _3511;
                        frontier_phi_84_pred_4 = _3510;
                        frontier_phi_84_pred_5 = _3515;
                    }
                    _3151 = frontier_phi_84_pred;
                    _3149 = frontier_phi_84_pred_1;
                    _3147 = frontier_phi_84_pred_2;
                    _3145 = frontier_phi_84_pred_3;
                    _3143 = frontier_phi_84_pred_4;
                    _3153 = frontier_phi_84_pred_5;
                    uint _3309 = _3308 + 1u;
                    if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3302 = _3143;
                        _3303 = _3145;
                        _3304 = _3147;
                        _3305 = _3149;
                        _3306 = _3151;
                        _3307 = _3153;
                        _3308 = _3309;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3153;
                frontier_phi_65_66_ladder_1 = _3149;
                frontier_phi_65_66_ladder_2 = _3151;
                frontier_phi_65_66_ladder_3 = _3145;
                frontier_phi_65_66_ladder_4 = _3143;
                frontier_phi_65_66_ladder_5 = _3147;
            }
            else
            {
                frontier_phi_65_66_ladder = _3032;
                frontier_phi_65_66_ladder_1 = _3028;
                frontier_phi_65_66_ladder_2 = _3030;
                frontier_phi_65_66_ladder_3 = _3024;
                frontier_phi_65_66_ladder_4 = _3022;
                frontier_phi_65_66_ladder_5 = _3026;
            }
            _3142 = frontier_phi_65_66_ladder_4;
            _3144 = frontier_phi_65_66_ladder_3;
            _3146 = frontier_phi_65_66_ladder_5;
            _3148 = frontier_phi_65_66_ladder_1;
            _3150 = frontier_phi_65_66_ladder_2;
            _3152 = frontier_phi_65_66_ladder;
        }
        float _3157 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
        _2953 = (_3157 * _3148) + _2466;
        _2955 = (_3157 * _3150) + _2468;
        _2957 = (_3157 * _3152) + _2470;
        _2959 = ((_3142 * _877) * _3157) + _2804;
        _2961 = ((_3144 * _878) * _3157) + _2806;
        _2963 = ((_3146 * _879) * _3157) + _2808;
    }
    else
    {
        _2953 = _2466;
        _2955 = _2468;
        _2957 = _2470;
        _2959 = _2804;
        _2961 = _2806;
        _2963 = _2808;
    }
    float _4935 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4946 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4957 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4968 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2981 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2953 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _891))) + ((_2959 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1730)) * cbPerFrame._m0[3u].x);
    float _2982 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2955 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _891))) + ((_2961 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1730)) * cbPerFrame._m0[3u].x);
    float _2983 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2957 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _891))) + ((_2963 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1730)) * cbPerFrame._m0[3u].x);
    float _2988 = cbInstanceData._m0[_783 + 6u].w * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)));
    float _2993 = _680 / cbSceneParam._m0[86u].x;
    float _2994 = _681 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _3048 = _3047 / _603;
        float _3059 = _3048 * _653;
        float _3060 = _654 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3062 = _3048 * _655;
        float _3064 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3065 = _3064 + cbSceneParam._m0[79u].w;
        float _3066 = cbSceneParam._m0[79u].w - _3060;
        float _3072 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3062 * _3062));
        float _3075 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3072;
        float _3080 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3082 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3259;
        if (abs((_3061 - _3064) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3259 = ((((_3065 > 0.0) ? exp2(_3080 * _3065) : (2.0 - exp2(_3082 * _3065))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3075;
        }
        else
        {
            float _3203 = 1.0 / cbSceneParam._m0[80u].x;
            float _3204 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : max(_3065, _3066));
            float _3205 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : min(_3065, _3066));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            _3259 = ((abs(_3072 / _3061) * cbSceneParam._m0[80u].y) * ((((_3214 - _3215) * 2.0) - ((exp2(_3080 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0)))) - exp2(_3080 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))))) * _3203)) - ((exp2(_3082 * _3214) - exp2(_3082 * _3215)) * _3203))) + (_3075 * cbSceneParam._m0[80u].z);
        }
        vec4 _3261 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3270 = exp2((_3259 * (-1.44269502162933349609375)) * (1.0 - _3261.w));
        float _3271 = log2(_3270);
        float _3287 = log2(_3013);
        _3084 = (exp2(_3287 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].x)) * _3261.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3086 = (exp2(_3287 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].y)) * _3261.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3088 = (exp2(_3287 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].z)) * _3261.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3090 = _3270 * _3013;
    }
    else
    {
        _3084 = _3010;
        _3086 = _3011;
        _3088 = _3012;
        _3090 = _3013;
    }
    bool _3297;
    vec4 _3100;
    vec4 _3122;
    float _3124;
    float _3128;
    float _3129;
    float _3130;
    float _3131;
    bool _3141;
    for (;;)
    {
        _3100 = cbMatDynParam._m0[0u];
        float _3102 = roundEven(_3100.y);
        bool _3103 = _3102 == 3.0;
        float _3104 = log2(_3090);
        float _3111 = exp2(_3104 * cbSceneParam._m0[78u].x) * _2981;
        float _3112 = exp2(_3104 * cbSceneParam._m0[78u].y) * _2982;
        float _3113 = exp2(_3104 * cbSceneParam._m0[78u].z) * _2983;
        float _3120 = _669 + (-0.5);
        _3122 = cbMtdParam._m0[1u];
        _3124 = _3122.y * _3120;
        float _3127 = (_3102 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3128 = _3127 * (_3103 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3084)));
        _3129 = _3127 * (_3103 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3086)));
        _3130 = _3127 * (_3103 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3088)));
        _3131 = _3120 * 0.999000012874603271484375;
        _3141 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3141)
        {
            if ((cbInstanceData._m0[_783 + 7u].x + _3131) < 0.5)
            {
                _3297 = true;
                break;
            }
        }
        uint _3238 = _784 + uint(_3100.w);
        if ((cbInstanceData._m0[_3238].w < 1.0) && ((cbInstanceData._m0[_3238].w + _3131) < 0.5))
        {
            _3297 = true;
            break;
        }
        if ((_3124 + _391) < _3122.x)
        {
            _3297 = true;
            break;
        }
        _3297 = false;
        break;
    }
    float _3501;
    if (_3297)
    {
        discard_state = true;
        _3501 = 0.0;
    }
    else
    {
        _3501 = _2988;
    }
    SV_Target.x = _3128;
    SV_Target.y = _3129;
    SV_Target.z = _3130;
    SV_Target.w = _3501;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2988;
    discard_exit();
}


