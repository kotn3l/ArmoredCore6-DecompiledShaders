#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _962;
float _3331;
float _3332;
float _3333;
float _3334;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3343 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))));
    float _259 = fma(_256, _217, fma(_249, _210, _247 * _196));
    float _262 = fma(_256, _218, fma(_249, _211, _247 * _197));
    float _265 = fma(_256, _219, fma(_249, _212, _247 * _198));
    float _274 = exp2(log2(inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265))) * _262) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3354 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    vec4 _287 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _303.x;
    float _306 = _303.y;
    float _307 = _303.z;
    float _314 = ((_287.x - _305) * _275) + _305;
    float _315 = ((_287.y - _306) * _275) + _306;
    float _316 = ((_287.z - _307) * _275) + _307;
    vec4 _328 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _335 = (_328.x * 2.0) + (-1.0);
    float _336 = (_328.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_335, _336), vec2(_335, _336));
    float _3365 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _345 = ((_328.z - _243) * _275) + _243;
    float _354 = ((sqrt(1.0 - (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) - _256) * _275) + _256;
    vec4 _368 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _378 = (((_335 - _247) * _275) + _247) + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _379 = (((_336 - _249) * _275) + _249) + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _382 = fma(_354, _217, fma(_379, _210, _378 * _196));
    float _385 = fma(_354, _218, fma(_379, _211, _378 * _197));
    float _388 = fma(_354, _219, fma(_379, _212, _378 * _198));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3376 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _396 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3398 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3409 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _467 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _457);
    float _468 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _457);
    float _469 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _457);
    float _473 = inversesqrt(dot(vec3(_467, _468, _469), vec3(_467, _468, _469)));
    float _474 = _467 * _473;
    float _475 = _468 * _473;
    float _476 = _469 * _473;
    vec4 _481 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _483 = _481.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _641 = sqrt(((_467 * _467) + (_468 * _468)) + (_469 * _469));
        float _647 = (cbMatDynParam._m0[5u].x * _641) + cbMatDynParam._m0[5u].y;
        float _3420 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _652 = (cbMatDynParam._m0[5u].z * _641) + cbMatDynParam._m0[5u].w;
        float _3431 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) - _648)) + _648) < ((_483 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _516 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _519 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _522 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _535 = uint(roundEven(NORMAL.w)) * 13u;
    uint _537 = _535 + 9u;
    uint _538 = _537 + uint(cbMatDynParam._m0[0u].w);
    float _544 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_538].x;
    float _545 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_538].y;
    float _546 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_538].z;
    float _3442 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    vec4 _558 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _561 = _558.x * TEXCOORD.z;
    float _562 = dot(vec3(_393, _394, _395), vec3(_474, _475, _476));
    float _565 = _562 * 2.0;
    float _569 = (_565 * _393) - _474;
    float _570 = (_565 * _394) - _475;
    float _571 = (_565 * _395) - _476;
    float _575 = abs(dot(vec3(_474, _475, _476), vec3(_393, _394, _395)));
    float _3475 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _577 = sqrt(_396);
    float _590 = exp2((_577 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_577 * 3.0));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _961;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _686 = fma(_630, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622));
        float _690 = fma(_630, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622));
        float _694 = fma(_630, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622));
        float _719 = _622 + _393;
        float _720 = _626 + _394;
        float _721 = _630 + _395;
        float _731 = fma(_721, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719)) - _686;
        float _732 = fma(_721, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719)) - _690;
        float _733 = fma(_721, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719)) - _694;
        float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
        float _750 = ((_737 * _731) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_686 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_737 * _732) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_690 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _752 = ((_737 * _733) / cbModelParam._m0[34u].z) + ((((((_694 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        float _789 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_755.x + (-0.5));
        float _791 = _789 * (_755.y + (-0.5));
        float _792 = _789 * (_755.z + (-0.5));
        float _799 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_762.x + (-0.5));
        float _801 = _799 * (_762.y + (-0.5));
        float _802 = _799 * (_762.z + (-0.5));
        float _809 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_769.x + (-0.5));
        float _811 = _809 * (_769.y + (-0.5));
        float _812 = _809 * (_769.z + (-0.5));
        float _819 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_776.x + (-0.5));
        float _821 = _819 * (_776.y + (-0.5));
        float _822 = _819 * (_776.z + (-0.5));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = _790 * 0.5;
        float _827 = _800 * 0.5;
        float _828 = _810 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _843 = (dot(vec3(_393, _394, _395), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _853 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3523 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_855 + 1.0))) + _860) * _823;
        float _870 = _791 * 0.5;
        float _871 = _801 * 0.5;
        float _872 = _811 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_393, _394, _395), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3556 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_897 + 1.0))) + _902) * _824;
        float _912 = _792 * 0.5;
        float _913 = _802 * 0.5;
        float _914 = _812 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_393, _394, _395), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3589 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_939 + 1.0))) + _944) * _825;
        _961 = _792;
        _963 = _791;
        _964 = _790;
        _965 = _802;
        _966 = _801;
        _967 = _800;
        _968 = _812;
        _969 = _811;
        _970 = _810;
        _971 = _825;
        _972 = _824;
        _973 = _823;
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
    }
    else
    {
        _961 = _962;
        _963 = _962;
        _964 = _962;
        _965 = _962;
        _966 = _962;
        _967 = _962;
        _968 = _962;
        _969 = _962;
        _970 = _962;
        _971 = _962;
        _972 = _962;
        _973 = _962;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1005 = fma(_630, cbModelParam._m0[30u].z, fma(_626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _622));
        float _1009 = fma(_630, cbModelParam._m0[31u].z, fma(_626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _622));
        float _1013 = fma(_630, cbModelParam._m0[32u].z, fma(_626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _622));
        float _1036 = _622 + _393;
        float _1037 = _626 + _394;
        float _1038 = _630 + _395;
        float _1048 = fma(_1038, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036)) - _1005;
        float _1049 = fma(_1038, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036)) - _1009;
        float _1050 = fma(_1038, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036)) - _1013;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1005 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1009 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[35u].z) + ((((((_1013 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1104 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1071.x + (-0.5));
        float _1106 = _1104 * (_1071.y + (-0.5));
        float _1107 = _1104 * (_1071.z + (-0.5));
        float _1114 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1078.x + (-0.5));
        float _1116 = _1114 * (_1078.y + (-0.5));
        float _1117 = _1114 * (_1078.z + (-0.5));
        float _1124 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1085.x + (-0.5));
        float _1126 = _1124 * (_1085.y + (-0.5));
        float _1127 = _1124 * (_1085.z + (-0.5));
        float _1134 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1092.x + (-0.5));
        float _1136 = _1134 * (_1092.y + (-0.5));
        float _1137 = _1134 * (_1092.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_393, _394, _395), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3652 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1168 + 1.0))) + _1173) * _1138;
        float _1183 = _1106 * 0.5;
        float _1184 = _1116 * 0.5;
        float _1185 = _1126 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_393, _394, _395), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3685 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1210 + 1.0))) + _1215) * _1139;
        float _1225 = _1107 * 0.5;
        float _1226 = _1117 * 0.5;
        float _1227 = _1127 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_393, _394, _395), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3718 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1252 + 1.0))) + _1257) * _1140;
        _1274 = _1107;
        _1275 = _1106;
        _1276 = _1105;
        _1277 = _1117;
        _1278 = _1116;
        _1279 = _1115;
        _1280 = _1127;
        _1281 = _1126;
        _1282 = _1125;
        _1283 = _1140;
        _1284 = _1139;
        _1285 = _1138;
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _962;
        _1275 = _962;
        _1276 = _962;
        _1277 = _962;
        _1278 = _962;
        _1279 = _962;
        _1280 = _962;
        _1281 = _962;
        _1282 = _962;
        _1283 = _962;
        _1284 = _962;
        _1285 = _962;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _974)) + _974;
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _975)) + _975;
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _976)) + _976;
    float _1321 = fma(_1300, cbSceneParam._m0[89u].z, fma(_1299, cbSceneParam._m0[89u].y, _1298 * cbSceneParam._m0[89u].x));
    float _1324 = fma(_1300, cbSceneParam._m0[90u].z, fma(_1299, cbSceneParam._m0[90u].y, _1298 * cbSceneParam._m0[90u].x));
    float _1327 = fma(_1300, cbSceneParam._m0[91u].z, fma(_1299, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1298));
    float _1342 = _569 * 0.5;
    float _1343 = _570 * 0.5;
    float _1344 = _571 * 0.5;
    float _1345 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1348 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1351 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1385;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1358 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_961, _965, _968, _971));
        float _1362 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_963, _966, _969, _972));
        float _1366 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_964, _967, _970, _973));
        float _1373 = dot(vec4(cbModelParam._m0[39u]), vec4(_1342, _1343, _1344, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1396;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1387 = dot(vec4(cbModelParam._m0[40u]), vec4(_1342, _1343, _1344, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1387) ? 0.0 : (isnan(0.0) ? _1387 : max(0.0, _1387))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1400 = (_1396 * cbModelParam._m0[1u].x) + (_1385 * (1.0 - cbModelParam._m0[1u].x));
    float _1410 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1411 = isnan(_1410) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1410 : min(cbModelParam._m0[25u].z, _1410));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1460 = fma(_630, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622)) + cbModelParam._m0[13u].w;
        float _1464 = fma(_630, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622)) + cbModelParam._m0[14u].w;
        float _1468 = fma(_630, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622)) + cbModelParam._m0[15u].w;
        float _1471 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1474 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1477 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1505;
        if (_1471 > 0.0)
        {
            _1505 = abs((1.0 - _1460) / _1471);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1460 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1505 = frontier_phi_19_17_ladder;
        }
        float _1710;
        if (_1474 > 0.0)
        {
            _1710 = abs((1.0 - _1464) / _1474);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1464 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1710 = frontier_phi_28_24_ladder;
        }
        float _1953;
        if (_1477 > 0.0)
        {
            _1953 = abs((1.0 - _1468) / _1477);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1468 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1953 = frontier_phi_40_35_ladder;
        }
        float _1955 = isnan(_1710) ? _1505 : (isnan(_1505) ? _1710 : min(_1505, _1710));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1471) + _1460;
        float _1961 = (_1956 * _1474) + _1464;
        float _1962 = (_1956 * _1477) + _1468;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1411);
            frontier_phi_18_40_ladder = _2086.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2086.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2086.x * cbModelParam._m0[1u].y;
        }
        _1493 = frontier_phi_18_40_ladder_2;
        _1495 = frontier_phi_18_40_ladder_1;
        _1497 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _1411);
        _1493 = _1481.x * cbModelParam._m0[1u].y;
        _1495 = _1481.y * cbModelParam._m0[1u].y;
        _1497 = _1481.z * cbModelParam._m0[1u].y;
    }
    float _1501 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1501 : min(cbModelParam._m0[25u].w, _1501));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1559 = fma(_630, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622)) + cbModelParam._m0[21u].w;
        float _1563 = fma(_630, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622)) + cbModelParam._m0[22u].w;
        float _1567 = fma(_630, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622)) + cbModelParam._m0[23u].w;
        float _1570 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1573 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1576 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1715;
        if (_1570 > 0.0)
        {
            _1715 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1715 = frontier_phi_30_26_ladder;
        }
        float _1980;
        if (_1573 > 0.0)
        {
            _1980 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1980 = frontier_phi_42_37_ladder;
        }
        float _2185;
        if (_1576 > 0.0)
        {
            _2185 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2185 = frontier_phi_51_48_ladder;
        }
        float _2187 = isnan(_1980) ? _1715 : (isnan(_1715) ? _1980 : min(_1715, _1980));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1570) + _1559;
        float _2193 = (_2188 * _1573) + _1563;
        float _2194 = (_2188 * _1576) + _1567;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2195;
        float _2198 = _2195 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2194 > _2198) || ((_2194 < _2196) || ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 < _2196) || (_2192 > _2198))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2194, cbModelParam._m0[17u].z, fma(_2193, cbModelParam._m0[17u].y, _2192 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2194, cbModelParam._m0[18u].z, fma(_2193, cbModelParam._m0[18u].y, _2192 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2194, cbModelParam._m0[19u].z, fma(_2193, cbModelParam._m0[19u].y, _2192 * cbModelParam._m0[19u].x))), _1502);
            frontier_phi_27_51_ladder = _2392.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2392.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2392.x * cbModelParam._m0[1u].z;
        }
        _1595 = frontier_phi_27_51_ladder_2;
        _1597 = frontier_phi_27_51_ladder_1;
        _1599 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1502);
        _1595 = _1579.x * cbModelParam._m0[1u].z;
        _1597 = _1579.y * cbModelParam._m0[1u].z;
        _1599 = _1579.z * cbModelParam._m0[1u].z;
    }
    float _1611 = ((((1.0 - _590) * ((_577 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_590 * _577)) * _561;
    float _1612 = _1611 * ((cbModelParam._m0[1u].w * (_1595 - _1493)) + _1493);
    float _1613 = _1611 * ((cbModelParam._m0[1u].w * (_1597 - _1495)) + _1495);
    float _1614 = _1611 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1617 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, _1612 * cbSceneParam._m0[91u].x));
    uvec4 _1633 = floatBitsToUint(cbInstanceData._m0[_535 + 5u]);
    uint _1635 = _1633.x * 14u;
    uint _1636 = _1635 + 13u;
    float _1643 = _561 + (-1.0);
    float _1648 = (cbLight._m0[_1636].x * _1643) + 1.0;
    float _1649 = (cbLight._m0[_1636].y * _1643) + 1.0;
    float _1650 = (cbLight._m0[_1636].z * _1643) + 1.0;
    float _1651 = (cbLight._m0[_1636].w * _1643) + 1.0;
    uint _1652 = _1635 + 5u;
    float _1658 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1662 = _1635 + 4u;
    float _1668 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1672 = _1635 | 1u;
    float _1683 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_393, _394, _395));
    float _1686 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_393, _394, _395));
    float _3854 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _3865 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1691 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.3183098733425140380859375;
    float _1693 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.3183098733425140380859375;
    float _1700 = ((cbLight._m0[_1652].x * _1658) * _1693) + ((cbLight._m0[_1662].x * _1668) * _1691);
    float _1701 = ((_1658 * cbLight._m0[_1652].y) * _1693) + ((_1668 * cbLight._m0[_1662].y) * _1691);
    float _1702 = ((_1658 * cbLight._m0[_1652].z) * _1693) + ((_1668 * cbLight._m0[_1662].z) * _1691);
    uvec4 _1707 = floatBitsToUint(cbLight._m0[_1635 + 12u]);
    bool _1709 = _1707.x == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1709)
    {
        _1720 = _1700;
        _1722 = _1701;
        _1724 = _1702;
    }
    else
    {
        uint _1728 = _1635 + 6u;
        float _1744 = (dot(vec3(cbLight._m0[_1635 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1745 = _1744 * _1744;
        float _3876 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1747 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1720 = (((cbLight._m0[_1728].x * 0.3183098733425140380859375) * _1746) * _1747) + _1700;
        _1722 = (((cbLight._m0[_1728].y * 0.3183098733425140380859375) * _1746) * _1747) + _1701;
        _1724 = (((cbLight._m0[_1728].z * 0.3183098733425140380859375) * _1746) * _1747) + _1702;
    }
    bool _1727 = _1707.y == 0u;
    float _1765;
    float _1767;
    float _1769;
    if (_1727)
    {
        _1765 = _1720;
        _1767 = _1722;
        _1769 = _1724;
    }
    else
    {
        uint _1924 = _1635 + 7u;
        float _1940 = (dot(vec3(cbLight._m0[_1635 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _3892 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1943 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1765 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1720;
        _1767 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1722;
        _1769 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1724;
    }
    uint _1772 = _1635 + 8u;
    float _1785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1635].w)) * _396) * 0.949999988079071044921875);
    float _1786 = _1785 * _1785;
    float _1787 = cbLight._m0[_1635].x + _474;
    float _1788 = cbLight._m0[_1635].y + _475;
    float _1789 = cbLight._m0[_1635].z + _476;
    float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
    float _1794 = _1793 * _1787;
    float _1795 = _1793 * _1788;
    float _1796 = _1793 * _1789;
    float _1797 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1635].xyz));
    float _3908 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _1801 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1802 = dot(vec3(_393, _394, _395), vec3(_1794, _1795, _1796));
    float _3930 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1806 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_1794, _1795, _1796));
    float _3941 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1810 = _1786 * _1786;
    float _1814 = ((_1805 * _1805) * (_1810 + (-1.0))) + 1.0;
    float _1825 = (exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1826 = 1.0 - _1786;
    float _1837 = (0.5 / (((_1801 * ((_1800 * _1826) + _1786)) + 9.9999999392252902907785028219223e-09) + (((_1801 * _1826) + _1786) * _1800))) * _1800;
    float _3952 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1810 / ((_1814 * _1814) * 3.141590118408203125));
    uint _1850 = _1635 + 9u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1672].w)) * _396) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1672].x + _474;
    float _1864 = cbLight._m0[_1672].y + _475;
    float _1865 = cbLight._m0[_1672].z + _476;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1672].xyz));
    float _3963 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1877 = dot(vec3(_393, _394, _395), vec3(_1870, _1871, _1872));
    float _3974 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1870, _1871, _1872));
    float _3985 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1862 * _1862;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1898 = (exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1899 = 1.0 - _1862;
    float _1909 = (0.5 / (((_1801 * ((_1876 * _1899) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1801 * _1899) + _1862) * _1876))) * _1876;
    float _3996 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    float _1921 = (((_1898 * cbLight._m0[_1850].x) * _1911) * _1658) + (((_1825 * cbLight._m0[_1772].x) * _1839) * _1668);
    float _1922 = (((_1898 * cbLight._m0[_1850].y) * _1911) * _1658) + (((_1825 * cbLight._m0[_1772].y) * _1839) * _1668);
    float _1923 = (((_1898 * cbLight._m0[_1850].z) * _1911) * _1658) + (((_1825 * cbLight._m0[_1772].z) * _1839) * _1668);
    float _1985;
    float _1987;
    float _1989;
    if (_1709)
    {
        _1985 = _1921;
        _1987 = _1922;
        _1989 = _1923;
    }
    else
    {
        uint _1991 = _1635 + 2u;
        uint _1995 = _1635 + 10u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _396) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _474;
        float _2012 = cbLight._m0[_1991].y + _475;
        float _2013 = cbLight._m0[_1991].z + _476;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1991].xyz));
        float _4007 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2025 = dot(vec3(_393, _394, _395), vec3(_2018, _2019, _2020));
        float _4018 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _4029 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2047 = 1.0 - _2010;
        float _2057 = (0.5 / (((_1801 * ((_2024 * _2047) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1801 * _2047) + _2010) * _2024))) * _2024;
        float _4040 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1985 = (((_2046 * cbLight._m0[_1995].x) * _2059) * _2060) + _1921;
        _1987 = (((_2046 * cbLight._m0[_1995].y) * _2059) * _2060) + _1922;
        _1989 = (((_2046 * cbLight._m0[_1995].z) * _2059) * _2060) + _1923;
    }
    float _2095;
    float _2097;
    float _2099;
    if (_1727)
    {
        _2095 = _1985;
        _2097 = _1987;
        _2099 = _1989;
    }
    else
    {
        uint _2106 = _1635 + 3u;
        uint _2110 = _1635 + 11u;
        float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _396) * 0.949999988079071044921875);
        float _2125 = _2124 * _2124;
        float _2126 = cbLight._m0[_2106].x + _474;
        float _2127 = cbLight._m0[_2106].y + _475;
        float _2128 = cbLight._m0[_2106].z + _476;
        float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
        float _2133 = _2132 * _2126;
        float _2134 = _2132 * _2127;
        float _2135 = _2132 * _2128;
        float _2136 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2106].xyz));
        float _4056 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2140 = dot(vec3(_393, _394, _395), vec3(_2133, _2134, _2135));
        float _4067 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2133, _2134, _2135));
        float _4078 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2148 = _2125 * _2125;
        float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
        float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2162 = 1.0 - _2125;
        float _2172 = (0.5 / (((_1801 * ((_2139 * _2162) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_1801 * _2162) + _2125) * _2139))) * _2139;
        float _4089 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2174 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
        float _2175 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _2095 = (((_2161 * cbLight._m0[_2110].x) * _2174) * _2175) + _1985;
        _2097 = (((_2161 * cbLight._m0[_2110].y) * _2174) * _2175) + _1987;
        _2099 = (((_2161 * cbLight._m0[_2110].z) * _2174) * _2175) + _1989;
    }
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    if (_1633.y == 0u)
    {
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2250;
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2250;
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2250;
        uvec4 _2265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2266 = _2265.x;
        uint _2277 = uint((float(_2265.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _2266))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _2266)));
        float _2287 = (log2(_2253 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        uint _2291 = uint(isnan(14.0) ? _2288 : (isnan(_2288) ? 14.0 : min(_2288, 14.0)));
        uvec4 _2296 = texelFetch(g_lightClusterGridBuffer, int(((_2291 << 2u) + (_2277 << 6u)) >> 2u));
        uint _2297 = _2296.x;
        uint _2298 = _2265.z;
        float _2397;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        if (((((1u << ((_2298 >> 4u) & 15u)) + 4294967295u) & _2297) == 0u) || ((_2298 & 240u) == 0u))
        {
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
        }
        else
        {
            float _2398;
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2565)
                {
                    frontier_phi_68_pred = _2551;
                    frontier_phi_68_pred_1 = _2554;
                    frontier_phi_68_pred_2 = _2553;
                    frontier_phi_68_pred_3 = _2552;
                    frontier_phi_68_pred_4 = _2550;
                    frontier_phi_68_pred_5 = _2549;
                }
                else
                {
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    uint _2700;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2564;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    for (;;)
                    {
                        uint _2704 = uint(findLSB(_2700)) + (_2555 << 5u);
                        uint _2701 = (_2700 + 4294967295u) & _2700;
                        uint _2706 = _2704 * 48u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2726 = (_2704 * 48u) + 4u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2745 = (_2704 * 48u) + 8u;
                        vec3 _2756 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x));
                        float _2760 = _2720.x - _2251;
                        float _2761 = _2720.y - _2252;
                        float _2762 = _2720.z - _2253;
                        float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                        float _2766 = inversesqrt(_2763);
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2770 = dot(vec3(_516, _519, _522), vec3(_2767, _2768, _2769));
                        float _2775 = 1.0 - (_2763 * _2720.w);
                        float _4115 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2777 = sqrt(_2763) * _2739.w;
                        float _2780 = 1.39999997615814208984375 / (_2777 + 1.39999997615814208984375);
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2770) + _2781;
                        float _2787 = _2777 * _2777;
                        float _2791 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2776) / ((_2787 * 0.699999988079071044921875) + 1.0);
                        float _2795 = (-0.0) - _2251;
                        float _2796 = (-0.0) - _2252;
                        float _2797 = (-0.0) - _2253;
                        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2812 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                        float _2813 = 1.0 - _577;
                        float _2820 = sqrt(1.0 - ((1.0 - (_2813 * _2813)) * (1.0 - (_2812 * _2812))));
                        float _2821 = _2820 * _2820;
                        float _2822 = _2821 * _2821;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2825 = _2804 + _2769;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2833 = dot(vec3(_516, _519, _522), vec3(_2802, _2803, _2804));
                        float _4131 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2837 = dot(vec3(_516, _519, _522), vec3(_2829 * _2823, _2829 * _2824, _2829 * _2825));
                        float _4142 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2844 = ((_2840 * _2840) * (_2822 + (-1.0))) + 1.0;
                        float _2845 = _2780 * _2821;
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2770) + _2846;
                        float _4153 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2851 = 1.0 - _2821;
                        float _2861 = (0.5 / (((_2850 * ((_2836 * _2851) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2850 * _2851) + _2821) * _2836))) * _2850;
                        float _4164 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2872 = (((_2822 * 3.1415927410125732421875) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) / ((_2844 * _2844) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125))) * _2776;
                        _2624 = (_2791 * _2739.x) + _2697;
                        _2625 = (_2791 * _2739.y) + _2698;
                        _2626 = (_2791 * _2739.z) + _2699;
                        _2621 = (_2872 * _2756.x) + _2694;
                        _2622 = (_2872 * _2756.y) + _2695;
                        _2623 = (_2872 * _2756.z) + _2696;
                        if (_2701 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2694 = _2621;
                            _2695 = _2622;
                            _2696 = _2623;
                            _2697 = _2624;
                            _2698 = _2625;
                            _2699 = _2626;
                            _2700 = _2701;
                        }
                    }
                    frontier_phi_68_pred = _2623;
                    frontier_phi_68_pred_1 = _2626;
                    frontier_phi_68_pred_2 = _2625;
                    frontier_phi_68_pred_3 = _2624;
                    frontier_phi_68_pred_4 = _2622;
                    frontier_phi_68_pred_5 = _2621;
                }
                _2402 = frontier_phi_68_pred;
                _2408 = frontier_phi_68_pred_1;
                _2406 = frontier_phi_68_pred_2;
                _2404 = frontier_phi_68_pred_3;
                _2400 = frontier_phi_68_pred_4;
                _2398 = frontier_phi_68_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2398;
                    _2550 = _2400;
                    _2551 = _2402;
                    _2552 = _2404;
                    _2553 = _2406;
                    _2554 = _2408;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
        }
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.z;
        uint _2414 = (_2412 >> 8u) & 15u;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((4294967295u << _2414) & _2297) == 0u)
        {
            _2517 = _2397;
            _2519 = _2399;
            _2521 = _2401;
            _2523 = _2403;
            _2525 = _2405;
            _2527 = _2407;
        }
        else
        {
            float _2542 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
            float _2543 = _2542 * _2251;
            float _2544 = _2542 * _2252;
            float _2545 = _2542 * _2253;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2414 < ((_2412 >> 12u) & 15u))
            {
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2677 = _2397;
                float _2678 = _2399;
                float _2679 = _2401;
                float _2680 = _2403;
                float _2681 = _2405;
                float _2682 = _2407;
                uint _2683 = _2414;
                uint _2692;
                bool _2693;
                for (;;)
                {
                    _2692 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                    _2693 = _2692 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2693)
                    {
                        frontier_phi_79_pred = _2682;
                        frontier_phi_79_pred_1 = _2681;
                        frontier_phi_79_pred_2 = _2680;
                        frontier_phi_79_pred_3 = _2679;
                        frontier_phi_79_pred_4 = _2678;
                        frontier_phi_79_pred_5 = _2677;
                    }
                    else
                    {
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _2899 = _2677;
                        float _2900 = _2678;
                        float _2901 = _2679;
                        float _2902 = _2680;
                        float _2903 = _2681;
                        float _2904 = _2682;
                        uint _2905 = _2692;
                        uint _2906;
                        vec4 _2931;
                        float _2932;
                        vec4 _2947;
                        vec3 _2959;
                        vec4 _2975;
                        vec4 _2991;
                        float _3038;
                        bool _3039;
                        for (;;)
                        {
                            uint _2916 = ((_2683 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2905));
                            _2906 = (_2905 + 4294967295u) & _2905;
                            uint _2918 = _2916 * 40u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            _2932 = _2931.w;
                            uint _2934 = (_2916 * 40u) + 4u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2949 = (_2916 * 40u) + 8u;
                            _2959 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x));
                            uint _2962 = (_2916 * 40u) + 16u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2978 = (_2916 * 40u) + 20u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2994 = (_2916 * 40u) + 24u;
                            vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3013 = (_2916 * 40u) + 28u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3038 = fma(_2253, _3026.z, fma(_2252, _3026.y, _3026.x * _2251)) + _3026.w;
                            _3039 = !((fma(_2253, _3007.z, fma(_2252, _3007.y, _3007.x * _2251)) + _3007.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3039)
                            {
                                float _3066 = _2931.x - _2251;
                                float _3067 = _2931.y - _2252;
                                float _3068 = _2931.z - _2253;
                                float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                                float _3072 = inversesqrt(_3069);
                                float _3073 = _3072 * _3066;
                                float _3074 = _3072 * _3067;
                                float _3075 = _3072 * _3068;
                                float _3079 = 1.0 - (_3069 / (_2932 * _2932));
                                float _4175 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3084 = sqrt(_3069) * _2947.w;
                                float _3086 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                                float _3087 = _3086 * _3086;
                                float _3090 = ((1.0 - _3087) * dot(vec3(_3073, _3074, _3075), vec3(_516, _519, _522))) + _3087;
                                float _3093 = _3084 * _3084;
                                float _3097 = (fma(_2253, _2975.z, fma(_2252, _2975.y, _2975.x * _2251)) + _2975.w) / _3038;
                                float _3098 = (fma(_2253, _2991.z, fma(_2252, _2991.y, _2991.x * _2251)) + _2991.w) / _3038;
                                float _3102 = 1.0 - dot(vec2(_3097, _3098), vec2(_3097, _3098));
                                float _4191 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3104 = _3103 * (((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3080) / ((_3093 * 0.699999988079071044921875) + 1.0));
                                float _3116 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                                float _3117 = 1.0 - _577;
                                float _3124 = sqrt(1.0 - ((1.0 - (_3117 * _3117)) * (1.0 - (_3116 * _3116))));
                                float _3125 = _3124 * _3124;
                                float _3126 = _3125 * _3125;
                                float _3127 = _3073 - _2543;
                                float _3128 = _3074 - _2544;
                                float _3129 = _3075 - _2545;
                                float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                                float _3137 = dot(vec3(_516, _519, _522), vec3((-0.0) - _2543, (-0.0) - _2544, (-0.0) - _2545));
                                float _4202 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3140 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3141 = dot(vec3(_516, _519, _522), vec3(_3133 * _3127, _3133 * _3128, _3133 * _3129));
                                float _4213 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3148 = ((_3144 * _3144) * (_3126 + (-1.0))) + 1.0;
                                float _3149 = _3086 * _3125;
                                float _3150 = _3149 * _3149;
                                float _3156 = ((1.0 - _3150) * dot(vec3(_516, _519, _522), vec3(_3073, _3074, _3075))) + _3150;
                                float _4224 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3158 = 1.0 - _3125;
                                float _3168 = (0.5 / (((_3157 * ((_3140 * _3158) + _3125)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3125) * _3140))) * _3157;
                                float _4235 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3178 = (_3103 * _3080) * (((_3126 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_3148 * _3148) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3104 * _2947.z;
                                frontier_phi_85_pred_1 = _3104 * _2947.y;
                                frontier_phi_85_pred_2 = _3104 * _2947.x;
                                frontier_phi_85_pred_3 = _3178 * _2959.z;
                                frontier_phi_85_pred_4 = _3178 * _2959.y;
                                frontier_phi_85_pred_5 = _3178 * _2959.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3187 = frontier_phi_85_pred;
                            _3186 = frontier_phi_85_pred_1;
                            _3185 = frontier_phi_85_pred_2;
                            _3184 = frontier_phi_85_pred_3;
                            _3183 = frontier_phi_85_pred_4;
                            _3182 = frontier_phi_85_pred_5;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            if (_2906 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2906;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2891;
                        frontier_phi_79_pred_1 = _2890;
                        frontier_phi_79_pred_2 = _2889;
                        frontier_phi_79_pred_3 = _2888;
                        frontier_phi_79_pred_4 = _2887;
                        frontier_phi_79_pred_5 = _2886;
                    }
                    _2528 = frontier_phi_79_pred;
                    _2526 = frontier_phi_79_pred_1;
                    _2524 = frontier_phi_79_pred_2;
                    _2522 = frontier_phi_79_pred_3;
                    _2520 = frontier_phi_79_pred_4;
                    _2518 = frontier_phi_79_pred_5;
                    uint _2684 = _2683 + 1u;
                    if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2677 = _2518;
                        _2678 = _2520;
                        _2679 = _2522;
                        _2680 = _2524;
                        _2681 = _2526;
                        _2682 = _2528;
                        _2683 = _2684;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2524;
                frontier_phi_60_61_ladder_1 = _2528;
                frontier_phi_60_61_ladder_2 = _2526;
                frontier_phi_60_61_ladder_3 = _2522;
                frontier_phi_60_61_ladder_4 = _2520;
                frontier_phi_60_61_ladder_5 = _2518;
            }
            else
            {
                frontier_phi_60_61_ladder = _2403;
                frontier_phi_60_61_ladder_1 = _2407;
                frontier_phi_60_61_ladder_2 = _2405;
                frontier_phi_60_61_ladder_3 = _2401;
                frontier_phi_60_61_ladder_4 = _2399;
                frontier_phi_60_61_ladder_5 = _2397;
            }
            _2517 = frontier_phi_60_61_ladder_5;
            _2519 = frontier_phi_60_61_ladder_4;
            _2521 = frontier_phi_60_61_ladder_3;
            _2523 = frontier_phi_60_61_ladder;
            _2525 = frontier_phi_60_61_ladder_2;
            _2527 = frontier_phi_60_61_ladder_1;
        }
        float _2532 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
        _2309 = (_2532 * _2523) + _1765;
        _2311 = (_2532 * _2525) + _1767;
        _2313 = (_2532 * _2527) + _1769;
        _2315 = ((_2517 * 0.039999999105930328369140625) * _2532) + _2095;
        _2317 = ((_2519 * 0.039999999105930328369140625) * _2532) + _2097;
        _2319 = ((_2521 * 0.039999999105930328369140625) * _2532) + _2099;
    }
    else
    {
        _2309 = _1765;
        _2311 = _1767;
        _2313 = _1769;
        _2315 = _2095;
        _2317 = _2097;
        _2319 = _2099;
    }
    float _4251 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4262 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4273 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _2336 = ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2309 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _561))) + ((_2315 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1400)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2311 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _561))) + ((_2317 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1400)) * cbPerFrame._m0[3u].x);
    float _2338 = ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2313 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _561))) + ((_2319 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1400)) * cbPerFrame._m0[3u].x);
    uint _2339 = _535 + 6u;
    float _2347 = _495 / cbSceneParam._m0[86u].x;
    float _2348 = _496 / cbSceneParam._m0[86u].y;
    vec4 _2362 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2364 = _2362.x;
    float _2365 = _2362.y;
    float _2366 = _2362.z;
    float _2367 = _2362.w;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2422 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2423 = _2422 / _415;
        float _2434 = _2423 * _467;
        float _2435 = _468 * _2423;
        float _2436 = (-0.0) - _2435;
        float _2437 = _2423 * _469;
        float _2439 = (cbSceneParam._m0[77u].w * _2436) / _2422;
        float _2440 = _2439 + cbSceneParam._m0[79u].w;
        float _2441 = cbSceneParam._m0[79u].w - _2435;
        float _2447 = sqrt(((_2434 * _2434) + (_2435 * _2435)) + (_2437 * _2437));
        float _2450 = (1.0 - (cbSceneParam._m0[77u].w / _2422)) * _2447;
        float _2455 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2457 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2634;
        if (abs((_2436 - _2439) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2634 = ((((_2440 > 0.0) ? exp2(_2455 * _2440) : (2.0 - exp2(_2457 * _2440))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2450;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : max(_2440, _2441));
            float _2580 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : min(_2440, _2441));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2634 = ((abs(_2447 / _2436) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2455 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2455 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2457 * _2589) - exp2(_2457 * _2590)) * _2578))) + (_2450 * cbSceneParam._m0[80u].z);
        }
        vec4 _2636 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, 1.0), 0.0);
        float _2645 = exp2((_2634 * (-1.44269502162933349609375)) * (1.0 - _2636.w));
        float _2646 = log2(_2645);
        float _2662 = log2(_2367);
        _2459 = (exp2(_2662 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].x)) * _2636.x) / cbSceneParam._m0[78u].x)) + _2364;
        _2461 = (exp2(_2662 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].y)) * _2636.y) / cbSceneParam._m0[78u].y)) + _2365;
        _2463 = (exp2(_2662 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].z)) * _2636.z) / cbSceneParam._m0[78u].z)) + _2366;
        _2465 = _2645 * _2367;
    }
    else
    {
        _2459 = _2364;
        _2461 = _2365;
        _2463 = _2366;
        _2465 = _2367;
    }
    bool _2672;
    vec4 _2475;
    vec4 _2497;
    float _2499;
    float _2503;
    float _2504;
    float _2505;
    float _2506;
    bool _2516;
    for (;;)
    {
        _2475 = cbMatDynParam._m0[0u];
        float _2477 = roundEven(_2475.y);
        bool _2478 = _2477 == 3.0;
        float _2479 = log2(_2465);
        float _2486 = exp2(_2479 * cbSceneParam._m0[78u].x) * _2336;
        float _2487 = exp2(_2479 * cbSceneParam._m0[78u].y) * _2337;
        float _2488 = exp2(_2479 * cbSceneParam._m0[78u].z) * _2338;
        float _2495 = _483 + (-0.5);
        _2497 = cbMtdParam._m0[1u];
        _2499 = _2497.y * _2495;
        float _2502 = (_2477 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2503 = _2502 * (_2478 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2459)));
        _2504 = _2502 * (_2478 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2461)));
        _2505 = _2502 * (_2478 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2463)));
        _2506 = _2495 * 0.999000012874603271484375;
        _2516 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2516)
        {
            if ((cbInstanceData._m0[_535 + 7u].x + _2506) < 0.5)
            {
                _2672 = true;
                break;
            }
        }
        uint _2613 = _537 + uint(_2475.w);
        if ((cbInstanceData._m0[_2613].w < 1.0) && ((cbInstanceData._m0[_2613].w + _2506) < 0.5))
        {
            _2672 = true;
            break;
        }
        if ((_2499 + 1.0) < _2497.x)
        {
            _2672 = true;
            break;
        }
        _2672 = false;
        break;
    }
    float _2877;
    if (_2672)
    {
        discard_state = true;
        _2877 = 0.0;
    }
    else
    {
        _2877 = cbInstanceData._m0[_2339].w;
    }
    SV_Target.x = _2503;
    SV_Target.y = _2504;
    SV_Target.z = _2505;
    SV_Target.w = _2877;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2339].w;
    discard_exit();
}


