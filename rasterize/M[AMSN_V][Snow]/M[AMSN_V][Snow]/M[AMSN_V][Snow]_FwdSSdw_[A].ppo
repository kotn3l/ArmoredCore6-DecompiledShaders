#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _964;
float _3357;
float _3358;
float _3359;
float _3360;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _240.z;
    float _249 = (_240.x * 2.0) + (-1.0);
    float _251 = (_240.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3369 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))));
    float _261 = fma(_258, _219, fma(_251, _212, _249 * _198));
    float _264 = fma(_258, _220, fma(_251, _213, _249 * _199));
    float _267 = fma(_258, _221, fma(_251, _214, _249 * _200));
    float _276 = exp2(log2(inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267))) * _264) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3380 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _277 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    vec4 _289 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _305.x;
    float _308 = _305.y;
    float _309 = _305.z;
    float _316 = ((_289.x - _307) * _277) + _307;
    float _317 = ((_289.y - _308) * _277) + _308;
    float _318 = ((_289.z - _309) * _277) + _309;
    vec4 _330 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _337 = (_330.x * 2.0) + (-1.0);
    float _338 = (_330.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3391 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _347 = ((_330.z - _245) * _277) + _245;
    float _356 = ((sqrt(1.0 - (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) - _258) * _277) + _258;
    vec4 _370 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _380 = (((_337 - _249) * _277) + _249) + (((_370.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _381 = (((_338 - _251) * _277) + _251) + (((_370.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _384 = fma(_356, _219, fma(_381, _212, _380 * _198));
    float _387 = fma(_356, _220, fma(_381, _213, _380 * _199));
    float _390 = fma(_356, _221, fma(_381, _214, _380 * _200));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _3402 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _398 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3424 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3435 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _417 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _469 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _459);
    float _470 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _459);
    float _471 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _459);
    float _475 = inversesqrt(dot(vec3(_469, _470, _471), vec3(_469, _470, _471)));
    float _476 = _469 * _475;
    float _477 = _470 * _475;
    float _478 = _471 * _475;
    vec4 _483 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _485 = _483.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _643 = sqrt(((_469 * _469) + (_470 * _470)) + (_471 * _471));
        float _649 = (cbMatDynParam._m0[5u].x * _643) + cbMatDynParam._m0[5u].y;
        float _3446 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _650 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _654 = (cbMatDynParam._m0[5u].z * _643) + cbMatDynParam._m0[5u].w;
        float _3457 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) - _650)) + _650) < ((_485 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _497 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _498 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _518 = fma(_397, cbSceneParam._m0[5u].z, fma(_396, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _395));
    float _521 = fma(_397, cbSceneParam._m0[6u].z, fma(_396, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _395));
    float _524 = fma(_397, cbSceneParam._m0[7u].z, fma(_396, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _395));
    uint _537 = uint(roundEven(NORMAL.w)) * 13u;
    uint _539 = _537 + 9u;
    uint _540 = _539 + uint(cbMatDynParam._m0[0u].w);
    float _546 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_540].x;
    float _547 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) * cbInstanceData._m0[_540].y;
    float _548 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * cbInstanceData._m0[_540].z;
    float _3468 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _497, cbSceneParam._m0[86u].y * _498));
    float _563 = _560.x * TEXCOORD.z;
    float _564 = dot(vec3(_395, _396, _397), vec3(_476, _477, _478));
    float _567 = _564 * 2.0;
    float _571 = (_567 * _395) - _476;
    float _572 = (_567 * _396) - _477;
    float _573 = (_567 * _397) - _478;
    float _577 = abs(dot(vec3(_476, _477, _478), vec3(_395, _396, _397)));
    float _3501 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _579 = sqrt(_398);
    float _592 = exp2((_579 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_579 * 3.0));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _963;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _688 = fma(_632, cbModelParam._m0[26u].z, fma(_628, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624));
        float _692 = fma(_632, cbModelParam._m0[27u].z, fma(_628, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624));
        float _696 = fma(_632, cbModelParam._m0[28u].z, fma(_628, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624));
        float _721 = _624 + _395;
        float _722 = _628 + _396;
        float _723 = _632 + _397;
        float _733 = fma(_723, cbModelParam._m0[26u].z, fma(_722, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721)) - _688;
        float _734 = fma(_723, cbModelParam._m0[27u].z, fma(_722, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721)) - _692;
        float _735 = fma(_723, cbModelParam._m0[28u].z, fma(_722, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721)) - _696;
        float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
        float _752 = ((_739 * _733) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_688 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _753 = ((_739 * _734) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_692 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _754 = ((_739 * _735) / cbModelParam._m0[34u].z) + ((((((_696 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        float _791 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_757.x + (-0.5));
        float _793 = _791 * (_757.y + (-0.5));
        float _794 = _791 * (_757.z + (-0.5));
        float _801 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_764.x + (-0.5));
        float _803 = _801 * (_764.y + (-0.5));
        float _804 = _801 * (_764.z + (-0.5));
        float _811 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_771.x + (-0.5));
        float _813 = _811 * (_771.y + (-0.5));
        float _814 = _811 * (_771.z + (-0.5));
        float _821 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_778.x + (-0.5));
        float _823 = _821 * (_778.y + (-0.5));
        float _824 = _821 * (_778.z + (-0.5));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = _792 * 0.5;
        float _829 = _802 * 0.5;
        float _830 = _812 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _845 = (dot(vec3(_395, _396, _397), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _855 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3549 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_857 + 1.0))) + _862) * _825;
        float _872 = _793 * 0.5;
        float _873 = _803 * 0.5;
        float _874 = _813 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_395, _396, _397), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3582 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_899 + 1.0))) + _904) * _826;
        float _914 = _794 * 0.5;
        float _915 = _804 * 0.5;
        float _916 = _814 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_395, _396, _397), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3615 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_941 + 1.0))) + _946) * _827;
        _963 = _794;
        _965 = _793;
        _966 = _792;
        _967 = _804;
        _968 = _803;
        _969 = _802;
        _970 = _814;
        _971 = _813;
        _972 = _812;
        _973 = _827;
        _974 = _826;
        _975 = _825;
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
    }
    else
    {
        _963 = _964;
        _965 = _964;
        _966 = _964;
        _967 = _964;
        _968 = _964;
        _969 = _964;
        _970 = _964;
        _971 = _964;
        _972 = _964;
        _973 = _964;
        _974 = _964;
        _975 = _964;
        _976 = 0.0;
        _977 = 0.0;
        _978 = 0.0;
    }
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1007 = fma(_632, cbModelParam._m0[30u].z, fma(_628, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _624));
        float _1011 = fma(_632, cbModelParam._m0[31u].z, fma(_628, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _624));
        float _1015 = fma(_632, cbModelParam._m0[32u].z, fma(_628, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _624));
        float _1038 = _624 + _395;
        float _1039 = _628 + _396;
        float _1040 = _632 + _397;
        float _1050 = fma(_1040, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038)) - _1007;
        float _1051 = fma(_1040, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038)) - _1011;
        float _1052 = fma(_1040, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038)) - _1015;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1007 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1011 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[35u].z) + ((((((_1015 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1106 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1073.x + (-0.5));
        float _1108 = _1106 * (_1073.y + (-0.5));
        float _1109 = _1106 * (_1073.z + (-0.5));
        float _1116 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1080.x + (-0.5));
        float _1118 = _1116 * (_1080.y + (-0.5));
        float _1119 = _1116 * (_1080.z + (-0.5));
        float _1126 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1087.x + (-0.5));
        float _1128 = _1126 * (_1087.y + (-0.5));
        float _1129 = _1126 * (_1087.z + (-0.5));
        float _1136 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1094.x + (-0.5));
        float _1138 = _1136 * (_1094.y + (-0.5));
        float _1139 = _1136 * (_1094.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_395, _396, _397), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3678 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1170 + 1.0))) + _1175) * _1140;
        float _1185 = _1108 * 0.5;
        float _1186 = _1118 * 0.5;
        float _1187 = _1128 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_395, _396, _397), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3711 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1212 + 1.0))) + _1217) * _1141;
        float _1227 = _1109 * 0.5;
        float _1228 = _1119 * 0.5;
        float _1229 = _1129 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_395, _396, _397), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3744 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1254 + 1.0))) + _1259) * _1142;
        _1276 = _1109;
        _1277 = _1108;
        _1278 = _1107;
        _1279 = _1119;
        _1280 = _1118;
        _1281 = _1117;
        _1282 = _1129;
        _1283 = _1128;
        _1284 = _1127;
        _1285 = _1142;
        _1286 = _1141;
        _1287 = _1140;
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _964;
        _1277 = _964;
        _1278 = _964;
        _1279 = _964;
        _1280 = _964;
        _1281 = _964;
        _1282 = _964;
        _1283 = _964;
        _1284 = _964;
        _1285 = _964;
        _1286 = _964;
        _1287 = _964;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _976)) + _976;
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _977)) + _977;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1323 = fma(_1302, cbSceneParam._m0[89u].z, fma(_1301, cbSceneParam._m0[89u].y, _1300 * cbSceneParam._m0[89u].x));
    float _1326 = fma(_1302, cbSceneParam._m0[90u].z, fma(_1301, cbSceneParam._m0[90u].y, _1300 * cbSceneParam._m0[90u].x));
    float _1329 = fma(_1302, cbSceneParam._m0[91u].z, fma(_1301, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1300));
    float _1344 = _571 * 0.5;
    float _1345 = _572 * 0.5;
    float _1346 = _573 * 0.5;
    float _1347 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1350 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1353 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1387;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1360 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_963, _967, _970, _973));
        float _1364 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_965, _968, _971, _974));
        float _1368 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_966, _969, _972, _975));
        float _1375 = dot(vec4(cbModelParam._m0[39u]), vec4(_1344, _1345, _1346, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1375) ? 0.0 : (isnan(0.0) ? _1375 : max(0.0, _1375))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1398;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1389 = dot(vec4(cbModelParam._m0[40u]), vec4(_1344, _1345, _1346, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1389) ? 0.0 : (isnan(0.0) ? _1389 : max(0.0, _1389))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1402 = (_1398 * cbModelParam._m0[1u].x) + (_1387 * (1.0 - cbModelParam._m0[1u].x));
    float _1412 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _398);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1412 : min(cbModelParam._m0[25u].z, _1412));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1462 = fma(_632, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624)) + cbModelParam._m0[13u].w;
        float _1466 = fma(_632, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624)) + cbModelParam._m0[14u].w;
        float _1470 = fma(_632, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624)) + cbModelParam._m0[15u].w;
        float _1473 = fma(_573, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571));
        float _1476 = fma(_573, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571));
        float _1479 = fma(_573, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571));
        float _1507;
        if (_1473 > 0.0)
        {
            _1507 = abs((1.0 - _1462) / _1473);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1462 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1507 = frontier_phi_19_17_ladder;
        }
        float _1733;
        if (_1476 > 0.0)
        {
            _1733 = abs((1.0 - _1466) / _1476);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1466 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1733 = frontier_phi_28_24_ladder;
        }
        float _1979;
        if (_1479 > 0.0)
        {
            _1979 = abs((1.0 - _1470) / _1479);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1470 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1979 = frontier_phi_40_35_ladder;
        }
        float _1981 = isnan(_1733) ? _1507 : (isnan(_1507) ? _1733 : min(_1507, _1733));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1473) + _1462;
        float _1987 = (_1982 * _1476) + _1466;
        float _1988 = (_1982 * _1479) + _1470;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1989;
        float _1993 = _1989 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 > _1993) || ((_1987 < _1991) || ((_1986 < _1991) || (_1986 > _1993))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1988, cbModelParam._m0[9u].z, fma(_1987, cbModelParam._m0[9u].y, _1986 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1988, cbModelParam._m0[10u].z, fma(_1987, cbModelParam._m0[10u].y, _1986 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1988, cbModelParam._m0[11u].z, fma(_1987, cbModelParam._m0[11u].y, _1986 * cbModelParam._m0[11u].x))), _1413);
            frontier_phi_18_40_ladder = _2112.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2112.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2112.x * cbModelParam._m0[1u].y;
        }
        _1495 = frontier_phi_18_40_ladder_2;
        _1497 = frontier_phi_18_40_ladder_1;
        _1499 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_571, _572, _573), _1413);
        _1495 = _1483.x * cbModelParam._m0[1u].y;
        _1497 = _1483.y * cbModelParam._m0[1u].y;
        _1499 = _1483.z * cbModelParam._m0[1u].y;
    }
    float _1503 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _398);
    float _1504 = isnan(_1503) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1503 : min(cbModelParam._m0[25u].w, _1503));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1561 = fma(_632, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624)) + cbModelParam._m0[21u].w;
        float _1565 = fma(_632, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624)) + cbModelParam._m0[22u].w;
        float _1569 = fma(_632, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624)) + cbModelParam._m0[23u].w;
        float _1572 = fma(_573, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571));
        float _1575 = fma(_573, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571));
        float _1578 = fma(_573, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571));
        float _1738;
        if (_1572 > 0.0)
        {
            _1738 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1738 = frontier_phi_30_26_ladder;
        }
        float _2006;
        if (_1575 > 0.0)
        {
            _2006 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2006 = frontier_phi_42_37_ladder;
        }
        float _2211;
        if (_1578 > 0.0)
        {
            _2211 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2211 = frontier_phi_51_48_ladder;
        }
        float _2213 = isnan(_2006) ? _1738 : (isnan(_1738) ? _2006 : min(_1738, _2006));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1572) + _1561;
        float _2219 = (_2214 * _1575) + _1565;
        float _2220 = (_2214 * _1578) + _1569;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2220, cbModelParam._m0[17u].z, fma(_2219, cbModelParam._m0[17u].y, _2218 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2220, cbModelParam._m0[18u].z, fma(_2219, cbModelParam._m0[18u].y, _2218 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2220, cbModelParam._m0[19u].z, fma(_2219, cbModelParam._m0[19u].y, _2218 * cbModelParam._m0[19u].x))), _1504);
            frontier_phi_27_51_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1597 = frontier_phi_27_51_ladder_2;
        _1599 = frontier_phi_27_51_ladder_1;
        _1601 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_571, _572, _573), _1504);
        _1597 = _1581.x * cbModelParam._m0[1u].z;
        _1599 = _1581.y * cbModelParam._m0[1u].z;
        _1601 = _1581.z * cbModelParam._m0[1u].z;
    }
    float _1613 = ((((1.0 - _592) * ((_579 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_592 * _579)) * _563;
    float _1614 = _1613 * ((cbModelParam._m0[1u].w * (_1597 - _1495)) + _1495);
    float _1615 = _1613 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1616 = _1613 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1619 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, _1614 * cbSceneParam._m0[91u].x));
    vec4 _1633 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_497, _498));
    float _1635 = _1633.w;
    float _1647 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1635);
    float _1648 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1635);
    float _1649 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1635);
    uvec4 _1653 = floatBitsToUint(cbInstanceData._m0[_537 + 5u]);
    uint _1655 = _1653.x * 14u;
    uint _1656 = _1655 + 13u;
    float _1663 = _563 + (-1.0);
    float _1668 = (cbLight._m0[_1656].x * _1663) + 1.0;
    float _1669 = (cbLight._m0[_1656].y * _1663) + 1.0;
    float _1670 = (cbLight._m0[_1656].z * _1663) + 1.0;
    float _1671 = (cbLight._m0[_1656].w * _1663) + 1.0;
    uint _1672 = _1655 + 5u;
    float _1678 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
    uint _1682 = _1655 + 4u;
    float _1691 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
    uint _1695 = _1655 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_395, _396, _397));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_395, _396, _397));
    float _3880 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3891 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1672].x * _1678) * _1716) + (((cbLight._m0[_1682].x * _1647) * _1691) * _1714);
    float _1724 = ((_1678 * cbLight._m0[_1672].y) * _1716) + (((cbLight._m0[_1682].y * _1648) * _1691) * _1714);
    float _1725 = ((_1678 * cbLight._m0[_1672].z) * _1716) + (((cbLight._m0[_1682].z * _1649) * _1691) * _1714);
    uvec4 _1730 = floatBitsToUint(cbLight._m0[_1655 + 12u]);
    bool _1732 = _1730.x == 0u;
    float _1743;
    float _1745;
    float _1747;
    if (_1732)
    {
        _1743 = _1723;
        _1745 = _1724;
        _1747 = _1725;
    }
    else
    {
        uint _1751 = _1655 + 6u;
        float _1767 = (dot(vec3(cbLight._m0[_1655 + 2u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1768 = _1767 * _1767;
        float _3902 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1770 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _1743 = (((cbLight._m0[_1751].x * 0.3183098733425140380859375) * _1769) * _1770) + _1723;
        _1745 = (((cbLight._m0[_1751].y * 0.3183098733425140380859375) * _1769) * _1770) + _1724;
        _1747 = (((cbLight._m0[_1751].z * 0.3183098733425140380859375) * _1769) * _1770) + _1725;
    }
    bool _1750 = _1730.y == 0u;
    float _1788;
    float _1790;
    float _1792;
    if (_1750)
    {
        _1788 = _1743;
        _1790 = _1745;
        _1792 = _1747;
    }
    else
    {
        uint _1950 = _1655 + 7u;
        float _1966 = (dot(vec3(cbLight._m0[_1655 + 3u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1967 = _1966 * _1966;
        float _3918 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1969 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _1788 = (((cbLight._m0[_1950].x * 0.3183098733425140380859375) * _1968) * _1969) + _1743;
        _1790 = (((cbLight._m0[_1950].y * 0.3183098733425140380859375) * _1968) * _1969) + _1745;
        _1792 = (((cbLight._m0[_1950].z * 0.3183098733425140380859375) * _1968) * _1969) + _1747;
    }
    uint _1795 = _1655 + 8u;
    float _1808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1655].w)) * _398) * 0.949999988079071044921875);
    float _1809 = _1808 * _1808;
    float _1810 = cbLight._m0[_1655].x + _476;
    float _1811 = cbLight._m0[_1655].y + _477;
    float _1812 = cbLight._m0[_1655].z + _478;
    float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
    float _1817 = _1816 * _1810;
    float _1818 = _1816 * _1811;
    float _1819 = _1816 * _1812;
    float _1820 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1655].xyz));
    float _3934 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _1824 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1825 = dot(vec3(_395, _396, _397), vec3(_1817, _1818, _1819));
    float _3956 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1817, _1818, _1819));
    float _3967 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1809 * _1809;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1848 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1849 = 1.0 - _1809;
    float _1860 = (0.5 / (((_1824 * ((_1823 * _1849) + _1809)) + 9.9999999392252902907785028219223e-09) + (((_1824 * _1849) + _1809) * _1823))) * _1823;
    float _3978 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    uint _1876 = _1655 + 9u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _398) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1695].x + _476;
    float _1890 = cbLight._m0[_1695].y + _477;
    float _1891 = cbLight._m0[_1695].z + _478;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1695].xyz));
    float _3989 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1903 = dot(vec3(_395, _396, _397), vec3(_1896, _1897, _1898));
    float _4000 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1896, _1897, _1898));
    float _4011 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1888 * _1888;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1888;
    float _1935 = (0.5 / (((_1824 * ((_1902 * _1925) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1824 * _1925) + _1888) * _1902))) * _1902;
    float _4022 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    float _1947 = (((_1924 * cbLight._m0[_1876].x) * _1937) * _1678) + ((((cbLight._m0[_1795].x * _1647) * _1848) * _1862) * _1691);
    float _1948 = (((_1924 * cbLight._m0[_1876].y) * _1937) * _1678) + ((((cbLight._m0[_1795].y * _1648) * _1848) * _1862) * _1691);
    float _1949 = (((_1924 * cbLight._m0[_1876].z) * _1937) * _1678) + ((((cbLight._m0[_1795].z * _1649) * _1848) * _1862) * _1691);
    float _2011;
    float _2013;
    float _2015;
    if (_1732)
    {
        _2011 = _1947;
        _2013 = _1948;
        _2015 = _1949;
    }
    else
    {
        uint _2017 = _1655 + 2u;
        uint _2021 = _1655 + 10u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _398) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _476;
        float _2038 = cbLight._m0[_2017].y + _477;
        float _2039 = cbLight._m0[_2017].z + _478;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2017].xyz));
        float _4033 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2051 = dot(vec3(_395, _396, _397), vec3(_2044, _2045, _2046));
        float _4044 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _4055 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2073 = 1.0 - _2036;
        float _2083 = (0.5 / (((_1824 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1824 * _2073) + _2036) * _2050))) * _2050;
        float _4066 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _2011 = (((_2072 * cbLight._m0[_2021].x) * _2085) * _2086) + _1947;
        _2013 = (((_2072 * cbLight._m0[_2021].y) * _2085) * _2086) + _1948;
        _2015 = (((_2072 * cbLight._m0[_2021].z) * _2085) * _2086) + _1949;
    }
    float _2121;
    float _2123;
    float _2125;
    if (_1750)
    {
        _2121 = _2011;
        _2123 = _2013;
        _2125 = _2015;
    }
    else
    {
        uint _2132 = _1655 + 3u;
        uint _2136 = _1655 + 11u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _398) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _476;
        float _2153 = cbLight._m0[_2132].y + _477;
        float _2154 = cbLight._m0[_2132].z + _478;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2132].xyz));
        float _4082 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2166 = dot(vec3(_395, _396, _397), vec3(_2159, _2160, _2161));
        float _4093 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4104 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2187 = (exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2188 = 1.0 - _2151;
        float _2198 = (0.5 / (((_1824 * ((_2165 * _2188) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1824 * _2188) + _2151) * _2165))) * _2165;
        float _4115 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _2121 = (((_2187 * cbLight._m0[_2136].x) * _2200) * _2201) + _2011;
        _2123 = (((_2187 * cbLight._m0[_2136].y) * _2200) * _2201) + _2013;
        _2125 = (((_2187 * cbLight._m0[_2136].z) * _2200) * _2201) + _2015;
    }
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1653.y == 0u)
    {
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2276;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2276;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2276;
        uvec4 _2291 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2292 = _2291.x;
        uint _2303 = uint((float(_2291.y) * floor(float(uint(cbSceneParam._m0[85u].y * _498) / _2292))) + floor(float(uint(cbSceneParam._m0[85u].x * _497) / _2292)));
        float _2313 = (log2(_2279 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2314 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        uint _2317 = uint(isnan(14.0) ? _2314 : (isnan(_2314) ? 14.0 : min(_2314, 14.0)));
        uvec4 _2322 = texelFetch(g_lightClusterGridBuffer, int(((_2317 << 2u) + (_2303 << 6u)) >> 2u));
        uint _2323 = _2322.x;
        uint _2324 = _2291.z;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        if (((((1u << ((_2324 >> 4u) & 15u)) + 4294967295u) & _2323) == 0u) || ((_2324 & 240u) == 0u))
        {
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
        }
        else
        {
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2591)
                {
                    frontier_phi_68_pred = _2577;
                    frontier_phi_68_pred_1 = _2580;
                    frontier_phi_68_pred_2 = _2579;
                    frontier_phi_68_pred_3 = _2578;
                    frontier_phi_68_pred_4 = _2576;
                    frontier_phi_68_pred_5 = _2575;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2590;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2581 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _2277;
                        float _2787 = _2746.y - _2278;
                        float _2788 = _2746.z - _2279;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_518, _521, _524), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _4141 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2796) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _2277;
                        float _2822 = (-0.0) - _2278;
                        float _2823 = (-0.0) - _2279;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2838 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2839 = 1.0 - _579;
                        float _2846 = sqrt(1.0 - ((1.0 - (_2839 * _2839)) * (1.0 - (_2838 * _2838))));
                        float _2847 = _2846 * _2846;
                        float _2848 = _2847 * _2847;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2851 = _2830 + _2795;
                        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
                        float _2859 = dot(vec3(_518, _521, _524), vec3(_2828, _2829, _2830));
                        float _4157 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2863 = dot(vec3(_518, _521, _524), vec3(_2855 * _2849, _2855 * _2850, _2855 * _2851));
                        float _4168 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2870 = ((_2866 * _2866) * (_2848 + (-1.0))) + 1.0;
                        float _2871 = _2806 * _2847;
                        float _2872 = _2871 * _2871;
                        float _2875 = ((1.0 - _2872) * _2796) + _2872;
                        float _4179 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2877 = 1.0 - _2847;
                        float _2887 = (0.5 / (((_2876 * ((_2862 * _2877) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2876 * _2877) + _2847) * _2862))) * _2876;
                        float _4190 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2898 = (((_2848 * 3.1415927410125732421875) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) / ((_2870 * _2870) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2650 = (_2817 * _2765.x) + _2723;
                        _2651 = (_2817 * _2765.y) + _2724;
                        _2652 = (_2817 * _2765.z) + _2725;
                        _2647 = (_2898 * _2782.x) + _2720;
                        _2648 = (_2898 * _2782.y) + _2721;
                        _2649 = (_2898 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_68_pred = _2649;
                    frontier_phi_68_pred_1 = _2652;
                    frontier_phi_68_pred_2 = _2651;
                    frontier_phi_68_pred_3 = _2650;
                    frontier_phi_68_pred_4 = _2648;
                    frontier_phi_68_pred_5 = _2647;
                }
                _2428 = frontier_phi_68_pred;
                _2434 = frontier_phi_68_pred_1;
                _2432 = frontier_phi_68_pred_2;
                _2430 = frontier_phi_68_pred_3;
                _2426 = frontier_phi_68_pred_4;
                _2424 = frontier_phi_68_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2424;
                    _2576 = _2426;
                    _2577 = _2428;
                    _2578 = _2430;
                    _2579 = _2432;
                    _2580 = _2434;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
        }
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.z;
        uint _2440 = (_2438 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2440) & _2323) == 0u)
        {
            _2543 = _2423;
            _2545 = _2425;
            _2547 = _2427;
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
            float _2569 = _2568 * _2277;
            float _2570 = _2568 * _2278;
            float _2571 = _2568 * _2279;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2440 < ((_2438 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2703 = _2423;
                float _2704 = _2425;
                float _2705 = _2427;
                float _2706 = _2429;
                float _2707 = _2431;
                float _2708 = _2433;
                uint _2709 = _2440;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2719)
                    {
                        frontier_phi_79_pred = _2708;
                        frontier_phi_79_pred_1 = _2707;
                        frontier_phi_79_pred_2 = _2706;
                        frontier_phi_79_pred_3 = _2705;
                        frontier_phi_79_pred_4 = _2704;
                        frontier_phi_79_pred_5 = _2703;
                    }
                    else
                    {
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        uint _2931 = _2718;
                        uint _2932;
                        vec4 _2957;
                        float _2958;
                        vec4 _2973;
                        vec3 _2985;
                        vec4 _3001;
                        vec4 _3017;
                        float _3064;
                        bool _3065;
                        for (;;)
                        {
                            uint _2942 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2931));
                            _2932 = (_2931 + 4294967295u) & _2931;
                            uint _2944 = _2942 * 40u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            _2958 = _2957.w;
                            uint _2960 = (_2942 * 40u) + 4u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2975 = (_2942 * 40u) + 8u;
                            _2985 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x));
                            uint _2988 = (_2942 * 40u) + 16u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3004 = (_2942 * 40u) + 20u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3020 = (_2942 * 40u) + 24u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3039 = (_2942 * 40u) + 28u;
                            vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3064 = fma(_2279, _3052.z, fma(_2278, _3052.y, _3052.x * _2277)) + _3052.w;
                            _3065 = !((fma(_2279, _3033.z, fma(_2278, _3033.y, _3033.x * _2277)) + _3033.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3065)
                            {
                                float _3092 = _2957.x - _2277;
                                float _3093 = _2957.y - _2278;
                                float _3094 = _2957.z - _2279;
                                float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                                float _3098 = inversesqrt(_3095);
                                float _3099 = _3098 * _3092;
                                float _3100 = _3098 * _3093;
                                float _3101 = _3098 * _3094;
                                float _3105 = 1.0 - (_3095 / (_2958 * _2958));
                                float _4201 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3110 = sqrt(_3095) * _2973.w;
                                float _3112 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                                float _3113 = _3112 * _3112;
                                float _3116 = ((1.0 - _3113) * dot(vec3(_3099, _3100, _3101), vec3(_518, _521, _524))) + _3113;
                                float _3119 = _3110 * _3110;
                                float _3123 = (fma(_2279, _3001.z, fma(_2278, _3001.y, _3001.x * _2277)) + _3001.w) / _3064;
                                float _3124 = (fma(_2279, _3017.z, fma(_2278, _3017.y, _3017.x * _2277)) + _3017.w) / _3064;
                                float _3128 = 1.0 - dot(vec2(_3123, _3124), vec2(_3123, _3124));
                                float _4217 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3130 = _3129 * (((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3106) / ((_3119 * 0.699999988079071044921875) + 1.0));
                                float _3142 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                                float _3143 = 1.0 - _579;
                                float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                                float _3151 = _3150 * _3150;
                                float _3152 = _3151 * _3151;
                                float _3153 = _3099 - _2569;
                                float _3154 = _3100 - _2570;
                                float _3155 = _3101 - _2571;
                                float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                                float _3163 = dot(vec3(_518, _521, _524), vec3((-0.0) - _2569, (-0.0) - _2570, (-0.0) - _2571));
                                float _4228 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3167 = dot(vec3(_518, _521, _524), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                                float _4239 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                                float _3175 = _3112 * _3151;
                                float _3176 = _3175 * _3175;
                                float _3182 = ((1.0 - _3176) * dot(vec3(_518, _521, _524), vec3(_3099, _3100, _3101))) + _3176;
                                float _4250 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3184 = 1.0 - _3151;
                                float _3194 = (0.5 / (((_3183 * ((_3166 * _3184) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3151) * _3166))) * _3183;
                                float _4261 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3204 = (_3129 * _3106) * (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) / ((_3174 * _3174) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3130 * _2973.z;
                                frontier_phi_85_pred_1 = _3130 * _2973.y;
                                frontier_phi_85_pred_2 = _3130 * _2973.x;
                                frontier_phi_85_pred_3 = _3204 * _2985.z;
                                frontier_phi_85_pred_4 = _3204 * _2985.y;
                                frontier_phi_85_pred_5 = _3204 * _2985.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3213 = frontier_phi_85_pred;
                            _3212 = frontier_phi_85_pred_1;
                            _3211 = frontier_phi_85_pred_2;
                            _3210 = frontier_phi_85_pred_3;
                            _3209 = frontier_phi_85_pred_4;
                            _3208 = frontier_phi_85_pred_5;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            if (_2932 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2932;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2917;
                        frontier_phi_79_pred_1 = _2916;
                        frontier_phi_79_pred_2 = _2915;
                        frontier_phi_79_pred_3 = _2914;
                        frontier_phi_79_pred_4 = _2913;
                        frontier_phi_79_pred_5 = _2912;
                    }
                    _2554 = frontier_phi_79_pred;
                    _2552 = frontier_phi_79_pred_1;
                    _2550 = frontier_phi_79_pred_2;
                    _2548 = frontier_phi_79_pred_3;
                    _2546 = frontier_phi_79_pred_4;
                    _2544 = frontier_phi_79_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2544;
                        _2704 = _2546;
                        _2705 = _2548;
                        _2706 = _2550;
                        _2707 = _2552;
                        _2708 = _2554;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2550;
                frontier_phi_60_61_ladder_1 = _2554;
                frontier_phi_60_61_ladder_2 = _2552;
                frontier_phi_60_61_ladder_3 = _2548;
                frontier_phi_60_61_ladder_4 = _2546;
                frontier_phi_60_61_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_60_61_ladder = _2429;
                frontier_phi_60_61_ladder_1 = _2433;
                frontier_phi_60_61_ladder_2 = _2431;
                frontier_phi_60_61_ladder_3 = _2427;
                frontier_phi_60_61_ladder_4 = _2425;
                frontier_phi_60_61_ladder_5 = _2423;
            }
            _2543 = frontier_phi_60_61_ladder_5;
            _2545 = frontier_phi_60_61_ladder_4;
            _2547 = frontier_phi_60_61_ladder_3;
            _2549 = frontier_phi_60_61_ladder;
            _2551 = frontier_phi_60_61_ladder_2;
            _2553 = frontier_phi_60_61_ladder_1;
        }
        float _2558 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _2335 = (_2558 * _2549) + _1788;
        _2337 = (_2558 * _2551) + _1790;
        _2339 = (_2558 * _2553) + _1792;
        _2341 = ((_2543 * 0.039999999105930328369140625) * _2558) + _2121;
        _2343 = ((_2545 * 0.039999999105930328369140625) * _2558) + _2123;
        _2345 = ((_2547 * 0.039999999105930328369140625) * _2558) + _2125;
    }
    else
    {
        _2335 = _1788;
        _2337 = _1790;
        _2339 = _1792;
        _2341 = _2121;
        _2343 = _2123;
        _2345 = _2125;
    }
    float _4277 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4288 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4299 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2362 = ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2335 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _563))) + ((_2341 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1402)) * cbPerFrame._m0[3u].x);
    float _2363 = ((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2337 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _563))) + ((_2343 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1402)) * cbPerFrame._m0[3u].x);
    float _2364 = ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2339 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _563))) + ((_2345 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1402)) * cbPerFrame._m0[3u].x);
    uint _2365 = _537 + 6u;
    float _2373 = _497 / cbSceneParam._m0[86u].x;
    float _2374 = _498 / cbSceneParam._m0[86u].y;
    vec4 _2388 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, (log2((isnan(cbSceneParam._m0[77u].w) ? _417 : (isnan(_417) ? cbSceneParam._m0[77u].w : min(_417, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2390 = _2388.x;
    float _2391 = _2388.y;
    float _2392 = _2388.z;
    float _2393 = _2388.w;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_417 > cbSceneParam._m0[78u].w)
    {
        float _2448 = isnan(_417) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _417 : min(cbSceneParam._m0[80u].w, _417));
        float _2449 = _2448 / _417;
        float _2460 = _2449 * _469;
        float _2461 = _470 * _2449;
        float _2462 = (-0.0) - _2461;
        float _2463 = _2449 * _471;
        float _2465 = (cbSceneParam._m0[77u].w * _2462) / _2448;
        float _2466 = _2465 + cbSceneParam._m0[79u].w;
        float _2467 = cbSceneParam._m0[79u].w - _2461;
        float _2473 = sqrt(((_2460 * _2460) + (_2461 * _2461)) + (_2463 * _2463));
        float _2476 = (1.0 - (cbSceneParam._m0[77u].w / _2448)) * _2473;
        float _2481 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2483 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2660;
        if (abs((_2462 - _2465) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2660 = ((((_2466 > 0.0) ? exp2(_2481 * _2466) : (2.0 - exp2(_2483 * _2466))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2476;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : max(_2466, _2467));
            float _2606 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : min(_2466, _2467));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2660 = ((abs(_2473 / _2462) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2481 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2481 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2483 * _2615) - exp2(_2483 * _2616)) * _2604))) + (_2476 * cbSceneParam._m0[80u].z);
        }
        vec4 _2662 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, 1.0), 0.0);
        float _2671 = exp2((_2660 * (-1.44269502162933349609375)) * (1.0 - _2662.w));
        float _2672 = log2(_2671);
        float _2688 = log2(_2393);
        _2485 = (exp2(_2688 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].x)) * _2662.x) / cbSceneParam._m0[78u].x)) + _2390;
        _2487 = (exp2(_2688 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].y)) * _2662.y) / cbSceneParam._m0[78u].y)) + _2391;
        _2489 = (exp2(_2688 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].z)) * _2662.z) / cbSceneParam._m0[78u].z)) + _2392;
        _2491 = _2671 * _2393;
    }
    else
    {
        _2485 = _2390;
        _2487 = _2391;
        _2489 = _2392;
        _2491 = _2393;
    }
    bool _2698;
    vec4 _2501;
    vec4 _2523;
    float _2525;
    float _2529;
    float _2530;
    float _2531;
    float _2532;
    bool _2542;
    for (;;)
    {
        _2501 = cbMatDynParam._m0[0u];
        float _2503 = roundEven(_2501.y);
        bool _2504 = _2503 == 3.0;
        float _2505 = log2(_2491);
        float _2512 = exp2(_2505 * cbSceneParam._m0[78u].x) * _2362;
        float _2513 = exp2(_2505 * cbSceneParam._m0[78u].y) * _2363;
        float _2514 = exp2(_2505 * cbSceneParam._m0[78u].z) * _2364;
        float _2521 = _485 + (-0.5);
        _2523 = cbMtdParam._m0[1u];
        _2525 = _2523.y * _2521;
        float _2528 = (_2503 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2529 = _2528 * (_2504 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2485)));
        _2530 = _2528 * (_2504 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2487)));
        _2531 = _2528 * (_2504 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2489)));
        _2532 = _2521 * 0.999000012874603271484375;
        _2542 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2542)
        {
            if ((cbInstanceData._m0[_537 + 7u].x + _2532) < 0.5)
            {
                _2698 = true;
                break;
            }
        }
        uint _2639 = _539 + uint(_2501.w);
        if ((cbInstanceData._m0[_2639].w < 1.0) && ((cbInstanceData._m0[_2639].w + _2532) < 0.5))
        {
            _2698 = true;
            break;
        }
        if ((_2525 + 1.0) < _2523.x)
        {
            _2698 = true;
            break;
        }
        _2698 = false;
        break;
    }
    float _2903;
    if (_2698)
    {
        discard_state = true;
        _2903 = 0.0;
    }
    else
    {
        _2903 = cbInstanceData._m0[_2365].w;
    }
    SV_Target.x = _2529;
    SV_Target.y = _2530;
    SV_Target.z = _2531;
    SV_Target.w = _2903;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2365].w;
    discard_exit();
}


