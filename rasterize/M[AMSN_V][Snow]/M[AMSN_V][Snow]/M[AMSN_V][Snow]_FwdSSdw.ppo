#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _919;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3258 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))));
    float _257 = fma(_254, _215, fma(_247, _208, _245 * _194));
    float _260 = fma(_254, _216, fma(_247, _209, _245 * _195));
    float _263 = fma(_254, _217, fma(_247, _210, _245 * _196));
    float _272 = exp2(log2(inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263))) * _260) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3269 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _273 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    vec4 _285 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _301 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _303 = _301.x;
    float _304 = _301.y;
    float _305 = _301.z;
    float _312 = ((_285.x - _303) * _273) + _303;
    float _313 = ((_285.y - _304) * _273) + _304;
    float _314 = ((_285.z - _305) * _273) + _305;
    vec4 _326 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _333 = (_326.x * 2.0) + (-1.0);
    float _334 = (_326.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_333, _334), vec2(_333, _334));
    float _3280 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _343 = ((_326.z - _241) * _273) + _241;
    float _352 = ((sqrt(1.0 - (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) - _254) * _273) + _254;
    vec4 _366 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _376 = (((_333 - _245) * _273) + _245) + (((_366.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _377 = (((_334 - _247) * _273) + _247) + (((_366.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _380 = fma(_352, _215, fma(_377, _208, _376 * _194));
    float _383 = fma(_352, _216, fma(_377, _209, _376 * _195));
    float _386 = fma(_352, _217, fma(_377, _210, _376 * _196));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    float _391 = _390 * _380;
    float _392 = _390 * _383;
    float _393 = _390 * _386;
    float _3291 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _394 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3313 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3324 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _413 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    float _480 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _481 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _502 = fma(_393, cbSceneParam._m0[5u].z, fma(_392, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _391));
    float _505 = fma(_393, cbSceneParam._m0[6u].z, fma(_392, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _391));
    float _508 = fma(_393, cbSceneParam._m0[7u].z, fma(_392, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _391));
    uint _521 = uint(roundEven(NORMAL.w)) * 13u;
    uint _524 = (_521 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _530 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_524].x;
    float _531 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_524].y;
    float _532 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_524].z;
    float _3335 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    vec4 _544 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _480, cbSceneParam._m0[86u].y * _481));
    float _547 = _544.x * TEXCOORD.z;
    float _548 = dot(vec3(_391, _392, _393), vec3(_472, _473, _474));
    float _551 = _548 * 2.0;
    float _555 = (_551 * _391) - _472;
    float _556 = (_551 * _392) - _473;
    float _557 = (_551 * _393) - _474;
    float _561 = abs(dot(vec3(_472, _473, _474), vec3(_391, _392, _393)));
    float _3368 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _563 = sqrt(_394);
    float _576 = exp2((_563 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_563 * 3.0));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _918;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _643 = fma(_616, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608));
        float _647 = fma(_616, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608));
        float _651 = fma(_616, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608));
        float _676 = _608 + _391;
        float _677 = _612 + _392;
        float _678 = _616 + _393;
        float _688 = fma(_678, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676)) - _643;
        float _689 = fma(_678, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676)) - _647;
        float _690 = fma(_678, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676)) - _651;
        float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
        float _707 = ((_694 * _688) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_643 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_694 * _689) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_647 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_694 * _690) / cbModelParam._m0[34u].z) + ((((((_651 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        float _746 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_712.x + (-0.5));
        float _748 = _746 * (_712.y + (-0.5));
        float _749 = _746 * (_712.z + (-0.5));
        float _756 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_719.x + (-0.5));
        float _758 = _756 * (_719.y + (-0.5));
        float _759 = _756 * (_719.z + (-0.5));
        float _766 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_726.x + (-0.5));
        float _768 = _766 * (_726.y + (-0.5));
        float _769 = _766 * (_726.z + (-0.5));
        float _776 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_733.x + (-0.5));
        float _778 = _776 * (_733.y + (-0.5));
        float _779 = _776 * (_733.z + (-0.5));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = _747 * 0.5;
        float _784 = _757 * 0.5;
        float _785 = _767 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _800 = (dot(vec3(_391, _392, _393), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _810 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3416 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_812 + 1.0))) + _817) * _780;
        float _827 = _748 * 0.5;
        float _828 = _758 * 0.5;
        float _829 = _768 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_391, _392, _393), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3449 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_854 + 1.0))) + _859) * _781;
        float _869 = _749 * 0.5;
        float _870 = _759 * 0.5;
        float _871 = _769 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_391, _392, _393), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3482 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_896 + 1.0))) + _901) * _782;
        _918 = _749;
        _920 = _748;
        _921 = _747;
        _922 = _759;
        _923 = _758;
        _924 = _757;
        _925 = _769;
        _926 = _768;
        _927 = _767;
        _928 = _782;
        _929 = _781;
        _930 = _780;
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
    }
    else
    {
        _918 = _919;
        _920 = _919;
        _921 = _919;
        _922 = _919;
        _923 = _919;
        _924 = _919;
        _925 = _919;
        _926 = _919;
        _927 = _919;
        _928 = _919;
        _929 = _919;
        _930 = _919;
        _931 = 0.0;
        _932 = 0.0;
        _933 = 0.0;
    }
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _959 = fma(_616, cbModelParam._m0[30u].z, fma(_612, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _608));
        float _963 = fma(_616, cbModelParam._m0[31u].z, fma(_612, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _608));
        float _967 = fma(_616, cbModelParam._m0[32u].z, fma(_612, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _608));
        float _990 = _608 + _391;
        float _991 = _612 + _392;
        float _992 = _616 + _393;
        float _1002 = fma(_992, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990)) - _959;
        float _1003 = fma(_992, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990)) - _963;
        float _1004 = fma(_992, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990)) - _967;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_959 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_963 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[35u].z) + ((((((_967 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1058 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1025.x + (-0.5));
        float _1060 = _1058 * (_1025.y + (-0.5));
        float _1061 = _1058 * (_1025.z + (-0.5));
        float _1068 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1032.x + (-0.5));
        float _1070 = _1068 * (_1032.y + (-0.5));
        float _1071 = _1068 * (_1032.z + (-0.5));
        float _1078 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1039.x + (-0.5));
        float _1080 = _1078 * (_1039.y + (-0.5));
        float _1081 = _1078 * (_1039.z + (-0.5));
        float _1088 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1046.x + (-0.5));
        float _1090 = _1088 * (_1046.y + (-0.5));
        float _1091 = _1088 * (_1046.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_391, _392, _393), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3545 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1122 + 1.0))) + _1127) * _1092;
        float _1137 = _1060 * 0.5;
        float _1138 = _1070 * 0.5;
        float _1139 = _1080 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_391, _392, _393), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3578 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1164 + 1.0))) + _1169) * _1093;
        float _1179 = _1061 * 0.5;
        float _1180 = _1071 * 0.5;
        float _1181 = _1081 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_391, _392, _393), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3611 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1206 + 1.0))) + _1211) * _1094;
        _1228 = _1061;
        _1229 = _1060;
        _1230 = _1059;
        _1231 = _1071;
        _1232 = _1070;
        _1233 = _1069;
        _1234 = _1081;
        _1235 = _1080;
        _1236 = _1079;
        _1237 = _1094;
        _1238 = _1093;
        _1239 = _1092;
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _919;
        _1229 = _919;
        _1230 = _919;
        _1231 = _919;
        _1232 = _919;
        _1233 = _919;
        _1234 = _919;
        _1235 = _919;
        _1236 = _919;
        _1237 = _919;
        _1238 = _919;
        _1239 = _919;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _931)) + _931;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _932)) + _932;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1275 = fma(_1254, cbSceneParam._m0[89u].z, fma(_1253, cbSceneParam._m0[89u].y, _1252 * cbSceneParam._m0[89u].x));
    float _1278 = fma(_1254, cbSceneParam._m0[90u].z, fma(_1253, cbSceneParam._m0[90u].y, _1252 * cbSceneParam._m0[90u].x));
    float _1281 = fma(_1254, cbSceneParam._m0[91u].z, fma(_1253, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1252));
    float _1296 = _555 * 0.5;
    float _1297 = _556 * 0.5;
    float _1298 = _557 * 0.5;
    float _1299 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1302 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1305 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1339;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1312 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_918, _922, _925, _928));
        float _1316 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_920, _923, _926, _929));
        float _1320 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_921, _924, _927, _930));
        float _1327 = dot(vec4(cbModelParam._m0[39u]), vec4(_1296, _1297, _1298, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1350;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1341 = dot(vec4(cbModelParam._m0[40u]), vec4(_1296, _1297, _1298, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1354 = (_1350 * cbModelParam._m0[1u].x) + (_1339 * (1.0 - cbModelParam._m0[1u].x));
    float _1364 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _394);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1364 : min(cbModelParam._m0[25u].z, _1364));
    float _1447;
    float _1449;
    float _1451;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1414 = fma(_616, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608)) + cbModelParam._m0[13u].w;
        float _1418 = fma(_616, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608)) + cbModelParam._m0[14u].w;
        float _1422 = fma(_616, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608)) + cbModelParam._m0[15u].w;
        float _1425 = fma(_557, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555));
        float _1428 = fma(_557, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555));
        float _1431 = fma(_557, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555));
        float _1459;
        if (_1425 > 0.0)
        {
            _1459 = abs((1.0 - _1414) / _1425);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1414 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1459 = frontier_phi_16_14_ladder;
        }
        float _1685;
        if (_1428 > 0.0)
        {
            _1685 = abs((1.0 - _1418) / _1428);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1418 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1685 = frontier_phi_25_21_ladder;
        }
        float _1931;
        if (_1431 > 0.0)
        {
            _1931 = abs((1.0 - _1422) / _1431);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1422 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1931 = frontier_phi_37_32_ladder;
        }
        float _1933 = isnan(_1685) ? _1459 : (isnan(_1459) ? _1685 : min(_1459, _1685));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1425) + _1414;
        float _1939 = (_1934 * _1428) + _1418;
        float _1940 = (_1934 * _1431) + _1422;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1941;
        float _1945 = _1941 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 > _1945) || ((_1939 < _1943) || ((_1938 < _1943) || (_1938 > _1945))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1940, cbModelParam._m0[9u].z, fma(_1939, cbModelParam._m0[9u].y, _1938 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1940, cbModelParam._m0[10u].z, fma(_1939, cbModelParam._m0[10u].y, _1938 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1940, cbModelParam._m0[11u].z, fma(_1939, cbModelParam._m0[11u].y, _1938 * cbModelParam._m0[11u].x))), _1365);
            frontier_phi_15_37_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1447 = frontier_phi_15_37_ladder_2;
        _1449 = frontier_phi_15_37_ladder_1;
        _1451 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_555, _556, _557), _1365);
        _1447 = _1435.x * cbModelParam._m0[1u].y;
        _1449 = _1435.y * cbModelParam._m0[1u].y;
        _1451 = _1435.z * cbModelParam._m0[1u].y;
    }
    float _1455 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _394);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1455 : min(cbModelParam._m0[25u].w, _1455));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1513 = fma(_616, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608)) + cbModelParam._m0[21u].w;
        float _1517 = fma(_616, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608)) + cbModelParam._m0[22u].w;
        float _1521 = fma(_616, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608)) + cbModelParam._m0[23u].w;
        float _1524 = fma(_557, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555));
        float _1527 = fma(_557, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555));
        float _1530 = fma(_557, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555));
        float _1690;
        if (_1524 > 0.0)
        {
            _1690 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1690 = frontier_phi_27_23_ladder;
        }
        float _1958;
        if (_1527 > 0.0)
        {
            _1958 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1958 = frontier_phi_39_34_ladder;
        }
        float _2163;
        if (_1530 > 0.0)
        {
            _2163 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2163 = frontier_phi_48_45_ladder;
        }
        float _2165 = isnan(_1958) ? _1690 : (isnan(_1690) ? _1958 : min(_1690, _1958));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1524) + _1513;
        float _2171 = (_2166 * _1527) + _1517;
        float _2172 = (_2166 * _1530) + _1521;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1456);
            frontier_phi_24_48_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1549 = frontier_phi_24_48_ladder_2;
        _1551 = frontier_phi_24_48_ladder_1;
        _1553 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_555, _556, _557), _1456);
        _1549 = _1533.x * cbModelParam._m0[1u].z;
        _1551 = _1533.y * cbModelParam._m0[1u].z;
        _1553 = _1533.z * cbModelParam._m0[1u].z;
    }
    float _1565 = ((((1.0 - _576) * ((_563 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_576 * _563)) * _547;
    float _1566 = _1565 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1567 = _1565 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1568 = _1565 * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1571 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, _1566 * cbSceneParam._m0[91u].x));
    vec4 _1585 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_480, _481));
    float _1587 = _1585.w;
    float _1599 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1587);
    float _1600 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1587);
    float _1601 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1587);
    uvec4 _1605 = floatBitsToUint(cbInstanceData._m0[_521 + 5u]);
    uint _1607 = _1605.x * 14u;
    uint _1608 = _1607 + 13u;
    float _1615 = _547 + (-1.0);
    float _1620 = (cbLight._m0[_1608].x * _1615) + 1.0;
    float _1621 = (cbLight._m0[_1608].y * _1615) + 1.0;
    float _1622 = (cbLight._m0[_1608].z * _1615) + 1.0;
    float _1623 = (cbLight._m0[_1608].w * _1615) + 1.0;
    uint _1624 = _1607 + 5u;
    float _1630 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
    uint _1634 = _1607 + 4u;
    float _1643 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
    uint _1647 = _1607 | 1u;
    float _1658 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_391, _392, _393));
    float _1661 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_391, _392, _393));
    float _3747 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _3758 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1666 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1668 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1675 = ((cbLight._m0[_1624].x * _1630) * _1668) + (((cbLight._m0[_1634].x * _1599) * _1643) * _1666);
    float _1676 = ((_1630 * cbLight._m0[_1624].y) * _1668) + (((cbLight._m0[_1634].y * _1600) * _1643) * _1666);
    float _1677 = ((_1630 * cbLight._m0[_1624].z) * _1668) + (((cbLight._m0[_1634].z * _1601) * _1643) * _1666);
    uvec4 _1682 = floatBitsToUint(cbLight._m0[_1607 + 12u]);
    bool _1684 = _1682.x == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1684)
    {
        _1695 = _1675;
        _1697 = _1676;
        _1699 = _1677;
    }
    else
    {
        uint _1703 = _1607 + 6u;
        float _1719 = (dot(vec3(cbLight._m0[_1607 + 2u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1720 = _1719 * _1719;
        float _3769 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1722 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1695 = (((cbLight._m0[_1703].x * 0.3183098733425140380859375) * _1721) * _1722) + _1675;
        _1697 = (((cbLight._m0[_1703].y * 0.3183098733425140380859375) * _1721) * _1722) + _1676;
        _1699 = (((cbLight._m0[_1703].z * 0.3183098733425140380859375) * _1721) * _1722) + _1677;
    }
    bool _1702 = _1682.y == 0u;
    float _1740;
    float _1742;
    float _1744;
    if (_1702)
    {
        _1740 = _1695;
        _1742 = _1697;
        _1744 = _1699;
    }
    else
    {
        uint _1902 = _1607 + 7u;
        float _1918 = (dot(vec3(cbLight._m0[_1607 + 3u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3785 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1921 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1740 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1695;
        _1742 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1697;
        _1744 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1699;
    }
    uint _1747 = _1607 + 8u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _394) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1607].x + _472;
    float _1763 = cbLight._m0[_1607].y + _473;
    float _1764 = cbLight._m0[_1607].z + _474;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1607].xyz));
    float _3801 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _1776 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1777 = dot(vec3(_391, _392, _393), vec3(_1769, _1770, _1771));
    float _3823 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1769, _1770, _1771));
    float _3834 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1761 * _1761;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1801 = 1.0 - _1761;
    float _1812 = (0.5 / (((_1776 * ((_1775 * _1801) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1801) + _1761) * _1775))) * _1775;
    float _3845 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    uint _1828 = _1607 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _394) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1647].x + _472;
    float _1842 = cbLight._m0[_1647].y + _473;
    float _1843 = cbLight._m0[_1647].z + _474;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1647].xyz));
    float _3856 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1855 = dot(vec3(_391, _392, _393), vec3(_1848, _1849, _1850));
    float _3867 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1848, _1849, _1850));
    float _3878 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1840;
    float _1887 = (0.5 / (((_1776 * ((_1854 * _1877) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1877) + _1840) * _1854))) * _1854;
    float _3889 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1899 = (((_1876 * cbLight._m0[_1828].x) * _1889) * _1630) + ((((cbLight._m0[_1747].x * _1599) * _1800) * _1814) * _1643);
    float _1900 = (((_1876 * cbLight._m0[_1828].y) * _1889) * _1630) + ((((cbLight._m0[_1747].y * _1600) * _1800) * _1814) * _1643);
    float _1901 = (((_1876 * cbLight._m0[_1828].z) * _1889) * _1630) + ((((cbLight._m0[_1747].z * _1601) * _1800) * _1814) * _1643);
    float _1963;
    float _1965;
    float _1967;
    if (_1684)
    {
        _1963 = _1899;
        _1965 = _1900;
        _1967 = _1901;
    }
    else
    {
        uint _1969 = _1607 + 2u;
        uint _1973 = _1607 + 10u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _394) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _472;
        float _1990 = cbLight._m0[_1969].y + _473;
        float _1991 = cbLight._m0[_1969].z + _474;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1969].xyz));
        float _3900 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2003 = dot(vec3(_391, _392, _393), vec3(_1996, _1997, _1998));
        float _3911 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _3922 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2025 = 1.0 - _1988;
        float _2035 = (0.5 / (((_1776 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2025) + _1988) * _2002))) * _2002;
        float _3933 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1963 = (((_2024 * cbLight._m0[_1973].x) * _2037) * _2038) + _1899;
        _1965 = (((_2024 * cbLight._m0[_1973].y) * _2037) * _2038) + _1900;
        _1967 = (((_2024 * cbLight._m0[_1973].z) * _2037) * _2038) + _1901;
    }
    float _2073;
    float _2075;
    float _2077;
    if (_1702)
    {
        _2073 = _1963;
        _2075 = _1965;
        _2077 = _1967;
    }
    else
    {
        uint _2084 = _1607 + 3u;
        uint _2088 = _1607 + 11u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _394) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _472;
        float _2105 = cbLight._m0[_2084].y + _473;
        float _2106 = cbLight._m0[_2084].z + _474;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_2084].xyz));
        float _3949 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2118 = dot(vec3(_391, _392, _393), vec3(_2111, _2112, _2113));
        float _3960 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _3971 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2140 = 1.0 - _2103;
        float _2150 = (0.5 / (((_1776 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2140) + _2103) * _2117))) * _2117;
        float _3982 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _2073 = (((_2139 * cbLight._m0[_2088].x) * _2152) * _2153) + _1963;
        _2075 = (((_2139 * cbLight._m0[_2088].y) * _2152) * _2153) + _1965;
        _2077 = (((_2139 * cbLight._m0[_2088].z) * _2152) * _2153) + _1967;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1605.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _481) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _480) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
        }
        else
        {
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            uint _2525 = 0u;
            uint _2534;
            bool _2535;
            for (;;)
            {
                _2534 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2525 << 2u)) >> 2u)).x;
                _2535 = _2534 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2535)
                {
                    frontier_phi_63_pred = _2524;
                    frontier_phi_63_pred_1 = _2523;
                    frontier_phi_63_pred_2 = _2522;
                    frontier_phi_63_pred_3 = _2521;
                    frontier_phi_63_pred_4 = _2520;
                    frontier_phi_63_pred_5 = _2519;
                }
                else
                {
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    uint _2649;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2534;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    for (;;)
                    {
                        uint _2653 = uint(findLSB(_2649)) + (_2525 << 5u);
                        uint _2650 = (_2649 + 4294967295u) & _2649;
                        uint _2655 = _2653 * 48u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2675 = (_2653 * 48u) + 4u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2694 = (_2653 * 48u) + 8u;
                        vec3 _2705 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x));
                        float _2709 = _2669.x - _2229;
                        float _2710 = _2669.y - _2230;
                        float _2711 = _2669.z - _2231;
                        float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                        float _2715 = inversesqrt(_2712);
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2719 = dot(vec3(_502, _505, _508), vec3(_2716, _2717, _2718));
                        float _2724 = 1.0 - (_2712 * _2669.w);
                        float _4008 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2726 = sqrt(_2712) * _2688.w;
                        float _2729 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2719) + _2730;
                        float _2736 = _2726 * _2726;
                        float _2740 = ((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2725) / ((_2736 * 0.699999988079071044921875) + 1.0);
                        float _2744 = (-0.0) - _2229;
                        float _2745 = (-0.0) - _2230;
                        float _2746 = (-0.0) - _2231;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2761 = exp2(log2(1.0 / ((_2736 * 3.5) + 5.0)) * 0.25);
                        float _2762 = 1.0 - _563;
                        float _2769 = sqrt(1.0 - ((1.0 - (_2762 * _2762)) * (1.0 - (_2761 * _2761))));
                        float _2770 = _2769 * _2769;
                        float _2771 = _2770 * _2770;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2774 = _2753 + _2718;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2782 = dot(vec3(_502, _505, _508), vec3(_2751, _2752, _2753));
                        float _4024 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2786 = dot(vec3(_502, _505, _508), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774));
                        float _4035 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2793 = ((_2789 * _2789) * (_2771 + (-1.0))) + 1.0;
                        float _2794 = _2729 * _2770;
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2719) + _2795;
                        float _4046 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2800 = 1.0 - _2770;
                        float _2810 = (0.5 / (((_2799 * ((_2785 * _2800) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2799 * _2800) + _2770) * _2785))) * _2799;
                        float _4057 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2821 = (((_2771 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_2793 * _2793) * ((_2736 * 2.1991131305694580078125) + 3.141590118408203125))) * _2725;
                        _2578 = (_2740 * _2688.x) + _2646;
                        _2579 = (_2740 * _2688.y) + _2647;
                        _2580 = (_2740 * _2688.z) + _2648;
                        _2575 = (_2821 * _2705.x) + _2643;
                        _2576 = (_2821 * _2705.y) + _2644;
                        _2577 = (_2821 * _2705.z) + _2645;
                        if (_2650 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2650;
                        }
                    }
                    frontier_phi_63_pred = _2580;
                    frontier_phi_63_pred_1 = _2579;
                    frontier_phi_63_pred_2 = _2578;
                    frontier_phi_63_pred_3 = _2577;
                    frontier_phi_63_pred_4 = _2576;
                    frontier_phi_63_pred_5 = _2575;
                }
                _2386 = frontier_phi_63_pred;
                _2384 = frontier_phi_63_pred_1;
                _2382 = frontier_phi_63_pred_2;
                _2380 = frontier_phi_63_pred_3;
                _2378 = frontier_phi_63_pred_4;
                _2376 = frontier_phi_63_pred_5;
                uint _2526 = _2525 + 1u;
                if (_2526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2519 = _2376;
                    _2520 = _2378;
                    _2521 = _2380;
                    _2522 = _2382;
                    _2523 = _2384;
                    _2524 = _2386;
                    _2525 = _2526;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
        }
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.z;
        uint _2392 = (_2390 >> 8u) & 15u;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((4294967295u << _2392) & _2275) == 0u)
        {
            _2487 = _2375;
            _2489 = _2377;
            _2491 = _2379;
            _2493 = _2381;
            _2495 = _2383;
            _2497 = _2385;
        }
        else
        {
            float _2512 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2513 = _2512 * _2229;
            float _2514 = _2512 * _2230;
            float _2515 = _2512 * _2231;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2392 < ((_2390 >> 12u) & 15u))
            {
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2626 = _2375;
                float _2627 = _2377;
                float _2628 = _2379;
                float _2629 = _2381;
                float _2630 = _2383;
                float _2631 = _2385;
                uint _2632 = _2392;
                uint _2641;
                bool _2642;
                for (;;)
                {
                    _2641 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                    _2642 = _2641 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2642)
                    {
                        frontier_phi_69_pred = _2631;
                        frontier_phi_69_pred_1 = _2630;
                        frontier_phi_69_pred_2 = _2629;
                        frontier_phi_69_pred_3 = _2628;
                        frontier_phi_69_pred_4 = _2627;
                        frontier_phi_69_pred_5 = _2626;
                    }
                    else
                    {
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        uint _2845 = _2641;
                        uint _2846;
                        vec4 _2871;
                        float _2872;
                        vec4 _2887;
                        vec3 _2899;
                        vec4 _2915;
                        vec4 _2931;
                        float _2978;
                        bool _2979;
                        for (;;)
                        {
                            uint _2856 = ((_2632 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2845));
                            _2846 = (_2845 + 4294967295u) & _2845;
                            uint _2858 = _2856 * 40u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            _2872 = _2871.w;
                            uint _2874 = (_2856 * 40u) + 4u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2889 = (_2856 * 40u) + 8u;
                            _2899 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x));
                            uint _2902 = (_2856 * 40u) + 16u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2856 * 40u) + 20u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2934 = (_2856 * 40u) + 24u;
                            vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2953 = (_2856 * 40u) + 28u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2978 = fma(_2231, _2966.z, fma(_2230, _2966.y, _2966.x * _2229)) + _2966.w;
                            _2979 = !((fma(_2231, _2947.z, fma(_2230, _2947.y, _2947.x * _2229)) + _2947.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2979)
                            {
                                float _3006 = _2871.x - _2229;
                                float _3007 = _2871.y - _2230;
                                float _3008 = _2871.z - _2231;
                                float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                                float _3012 = inversesqrt(_3009);
                                float _3013 = _3012 * _3006;
                                float _3014 = _3012 * _3007;
                                float _3015 = _3012 * _3008;
                                float _3019 = 1.0 - (_3009 / (_2872 * _2872));
                                float _4068 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3024 = sqrt(_3009) * _2887.w;
                                float _3026 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                                float _3027 = _3026 * _3026;
                                float _3030 = ((1.0 - _3027) * dot(vec3(_3013, _3014, _3015), vec3(_502, _505, _508))) + _3027;
                                float _3033 = _3024 * _3024;
                                float _3037 = (fma(_2231, _2915.z, fma(_2230, _2915.y, _2915.x * _2229)) + _2915.w) / _2978;
                                float _3038 = (fma(_2231, _2931.z, fma(_2230, _2931.y, _2931.x * _2229)) + _2931.w) / _2978;
                                float _3042 = 1.0 - dot(vec2(_3037, _3038), vec2(_3037, _3038));
                                float _4084 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3044 = _3043 * (((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3020) / ((_3033 * 0.699999988079071044921875) + 1.0));
                                float _3056 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                                float _3057 = 1.0 - _563;
                                float _3064 = sqrt(1.0 - ((1.0 - (_3057 * _3057)) * (1.0 - (_3056 * _3056))));
                                float _3065 = _3064 * _3064;
                                float _3066 = _3065 * _3065;
                                float _3067 = _3013 - _2513;
                                float _3068 = _3014 - _2514;
                                float _3069 = _3015 - _2515;
                                float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                                float _3077 = dot(vec3(_502, _505, _508), vec3((-0.0) - _2513, (-0.0) - _2514, (-0.0) - _2515));
                                float _4095 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3081 = dot(vec3(_502, _505, _508), vec3(_3073 * _3067, _3073 * _3068, _3073 * _3069));
                                float _4106 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3088 = ((_3084 * _3084) * (_3066 + (-1.0))) + 1.0;
                                float _3089 = _3026 * _3065;
                                float _3090 = _3089 * _3089;
                                float _3096 = ((1.0 - _3090) * dot(vec3(_502, _505, _508), vec3(_3013, _3014, _3015))) + _3090;
                                float _4117 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3098 = 1.0 - _3065;
                                float _3108 = (0.5 / (((_3097 * ((_3080 * _3098) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3065) * _3080))) * _3097;
                                float _4128 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3118 = (_3043 * _3020) * (((_3066 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_3088 * _3088) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3044 * _2887.z;
                                frontier_phi_75_pred_1 = _3044 * _2887.y;
                                frontier_phi_75_pred_2 = _3044 * _2887.x;
                                frontier_phi_75_pred_3 = _3118 * _2899.z;
                                frontier_phi_75_pred_4 = _3118 * _2899.y;
                                frontier_phi_75_pred_5 = _3118 * _2899.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3127 = frontier_phi_75_pred;
                            _3126 = frontier_phi_75_pred_1;
                            _3125 = frontier_phi_75_pred_2;
                            _3124 = frontier_phi_75_pred_3;
                            _3123 = frontier_phi_75_pred_4;
                            _3122 = frontier_phi_75_pred_5;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            if (_2846 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2846;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2831;
                        frontier_phi_69_pred_1 = _2830;
                        frontier_phi_69_pred_2 = _2829;
                        frontier_phi_69_pred_3 = _2828;
                        frontier_phi_69_pred_4 = _2827;
                        frontier_phi_69_pred_5 = _2826;
                    }
                    _2498 = frontier_phi_69_pred;
                    _2496 = frontier_phi_69_pred_1;
                    _2494 = frontier_phi_69_pred_2;
                    _2492 = frontier_phi_69_pred_3;
                    _2490 = frontier_phi_69_pred_4;
                    _2488 = frontier_phi_69_pred_5;
                    uint _2633 = _2632 + 1u;
                    if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2626 = _2488;
                        _2627 = _2490;
                        _2628 = _2492;
                        _2629 = _2494;
                        _2630 = _2496;
                        _2631 = _2498;
                        _2632 = _2633;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2498;
                frontier_phi_57_58_ladder_1 = _2496;
                frontier_phi_57_58_ladder_2 = _2494;
                frontier_phi_57_58_ladder_3 = _2492;
                frontier_phi_57_58_ladder_4 = _2490;
                frontier_phi_57_58_ladder_5 = _2488;
            }
            else
            {
                frontier_phi_57_58_ladder = _2385;
                frontier_phi_57_58_ladder_1 = _2383;
                frontier_phi_57_58_ladder_2 = _2381;
                frontier_phi_57_58_ladder_3 = _2379;
                frontier_phi_57_58_ladder_4 = _2377;
                frontier_phi_57_58_ladder_5 = _2375;
            }
            _2487 = frontier_phi_57_58_ladder_5;
            _2489 = frontier_phi_57_58_ladder_4;
            _2491 = frontier_phi_57_58_ladder_3;
            _2493 = frontier_phi_57_58_ladder_2;
            _2495 = frontier_phi_57_58_ladder_1;
            _2497 = frontier_phi_57_58_ladder;
        }
        float _2502 = isnan(1.0) ? _547 : (isnan(_547) ? 1.0 : min(_547, 1.0));
        _2287 = (_2502 * _2493) + _1740;
        _2289 = (_2502 * _2495) + _1742;
        _2291 = (_2502 * _2497) + _1744;
        _2293 = ((_2487 * 0.039999999105930328369140625) * _2502) + _2073;
        _2295 = ((_2489 * 0.039999999105930328369140625) * _2502) + _2075;
        _2297 = ((_2491 * 0.039999999105930328369140625) * _2502) + _2077;
    }
    else
    {
        _2287 = _1740;
        _2289 = _1742;
        _2291 = _1744;
        _2293 = _2073;
        _2295 = _2075;
        _2297 = _2077;
    }
    float _4144 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4155 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4166 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    uint _2317 = _521 + 6u;
    float _2325 = _480 / cbSceneParam._m0[86u].x;
    float _2326 = _481 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _413 : (isnan(_413) ? cbSceneParam._m0[77u].w : min(_413, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_413 > cbSceneParam._m0[78u].w)
    {
        float _2400 = isnan(_413) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _413 : min(cbSceneParam._m0[80u].w, _413));
        float _2401 = _2400 / _413;
        float _2412 = _2401 * _465;
        float _2413 = _466 * _2401;
        float _2414 = (-0.0) - _2413;
        float _2415 = _2401 * _467;
        float _2417 = (cbSceneParam._m0[77u].w * _2414) / _2400;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2413;
        float _2425 = sqrt(((_2412 * _2412) + (_2413 * _2413)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2400)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2588;
        if (abs((_2414 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2588 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2548 = 1.0 / cbSceneParam._m0[80u].x;
            float _2549 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2550 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            _2588 = ((abs(_2425 / _2414) * cbSceneParam._m0[80u].y) * ((((_2559 - _2560) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))))) * _2548)) - ((exp2(_2435 * _2559) - exp2(_2435 * _2560)) * _2548))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2590 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2599 = exp2((_2588 * (-1.44269502162933349609375)) * (1.0 - _2590.w));
        float _2600 = log2(_2599);
        float _2616 = log2(_2345);
        _2437 = (exp2(_2616 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].x)) * _2590.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2439 = (exp2(_2616 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].y)) * _2590.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2441 = (exp2(_2616 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].z)) * _2590.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2443 = _2599 * _2345;
    }
    else
    {
        _2437 = _2342;
        _2439 = _2343;
        _2441 = _2344;
        _2443 = _2345;
    }
    float _2455 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2456 = _2455 == 3.0;
    float _2457 = log2(_2443);
    float _2464 = exp2(_2457 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2287 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _547))) + ((_2293 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1354)) * cbPerFrame._m0[3u].x));
    float _2465 = exp2(_2457 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2289 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _547))) + ((_2295 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1354)) * cbPerFrame._m0[3u].x));
    float _2466 = exp2(_2457 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2291 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _547))) + ((_2297 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1354)) * cbPerFrame._m0[3u].x));
    float _2475 = (_2455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2475 * (_2456 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.y = _2475 * (_2456 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.z = _2475 * (_2456 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.w = cbInstanceData._m0[_2317].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2317].w;
}


