#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _917;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3232 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))));
    float _255 = fma(_252, _213, fma(_245, _206, _243 * _192));
    float _258 = fma(_252, _214, fma(_245, _207, _243 * _193));
    float _261 = fma(_252, _215, fma(_245, _208, _243 * _194));
    float _270 = exp2(log2(inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261))) * _258) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3243 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _271 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    vec4 _283 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _299 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _301 = _299.x;
    float _302 = _299.y;
    float _303 = _299.z;
    float _310 = ((_283.x - _301) * _271) + _301;
    float _311 = ((_283.y - _302) * _271) + _302;
    float _312 = ((_283.z - _303) * _271) + _303;
    vec4 _324 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _331 = (_324.x * 2.0) + (-1.0);
    float _332 = (_324.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_331, _332), vec2(_331, _332));
    float _3254 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _341 = ((_324.z - _239) * _271) + _239;
    float _350 = ((sqrt(1.0 - (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0)))) - _252) * _271) + _252;
    vec4 _364 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _374 = (((_331 - _243) * _271) + _243) + (((_364.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _375 = (((_332 - _245) * _271) + _245) + (((_364.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _378 = fma(_350, _213, fma(_375, _206, _374 * _192));
    float _381 = fma(_350, _214, fma(_375, _207, _374 * _193));
    float _384 = fma(_350, _215, fma(_375, _208, _374 * _194));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3265 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _392 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3287 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3298 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    float _478 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _479 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _500 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _503 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _506 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _522 = (_519 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _528 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_522].x;
    float _529 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_522].y;
    float _530 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_522].z;
    float _3309 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    vec4 _542 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _478, cbSceneParam._m0[86u].y * _479));
    float _545 = _542.x * TEXCOORD.z;
    float _546 = dot(vec3(_389, _390, _391), vec3(_470, _471, _472));
    float _549 = _546 * 2.0;
    float _553 = (_549 * _389) - _470;
    float _554 = (_549 * _390) - _471;
    float _555 = (_549 * _391) - _472;
    float _559 = abs(dot(vec3(_470, _471, _472), vec3(_389, _390, _391)));
    float _3342 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _561 = sqrt(_392);
    float _574 = exp2((_561 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_561 * 3.0));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _916;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _641 = fma(_614, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606));
        float _645 = fma(_614, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606));
        float _649 = fma(_614, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606));
        float _674 = _606 + _389;
        float _675 = _610 + _390;
        float _676 = _614 + _391;
        float _686 = fma(_676, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674)) - _641;
        float _687 = fma(_676, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674)) - _645;
        float _688 = fma(_676, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674)) - _649;
        float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
        float _705 = ((_692 * _686) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_641 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_692 * _687) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_645 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_692 * _688) / cbModelParam._m0[34u].z) + ((((((_649 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        float _744 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_710.x + (-0.5));
        float _746 = _744 * (_710.y + (-0.5));
        float _747 = _744 * (_710.z + (-0.5));
        float _754 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_717.x + (-0.5));
        float _756 = _754 * (_717.y + (-0.5));
        float _757 = _754 * (_717.z + (-0.5));
        float _764 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_724.x + (-0.5));
        float _766 = _764 * (_724.y + (-0.5));
        float _767 = _764 * (_724.z + (-0.5));
        float _774 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_731.x + (-0.5));
        float _776 = _774 * (_731.y + (-0.5));
        float _777 = _774 * (_731.z + (-0.5));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = _745 * 0.5;
        float _782 = _755 * 0.5;
        float _783 = _765 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _798 = (dot(vec3(_389, _390, _391), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _808 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3390 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_810 + 1.0))) + _815) * _778;
        float _825 = _746 * 0.5;
        float _826 = _756 * 0.5;
        float _827 = _766 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_389, _390, _391), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3423 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_852 + 1.0))) + _857) * _779;
        float _867 = _747 * 0.5;
        float _868 = _757 * 0.5;
        float _869 = _767 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_389, _390, _391), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3456 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_894 + 1.0))) + _899) * _780;
        _916 = _747;
        _918 = _746;
        _919 = _745;
        _920 = _757;
        _921 = _756;
        _922 = _755;
        _923 = _767;
        _924 = _766;
        _925 = _765;
        _926 = _780;
        _927 = _779;
        _928 = _778;
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
    }
    else
    {
        _916 = _917;
        _918 = _917;
        _919 = _917;
        _920 = _917;
        _921 = _917;
        _922 = _917;
        _923 = _917;
        _924 = _917;
        _925 = _917;
        _926 = _917;
        _927 = _917;
        _928 = _917;
        _929 = 0.0;
        _930 = 0.0;
        _931 = 0.0;
    }
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _957 = fma(_614, cbModelParam._m0[30u].z, fma(_610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _606));
        float _961 = fma(_614, cbModelParam._m0[31u].z, fma(_610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _606));
        float _965 = fma(_614, cbModelParam._m0[32u].z, fma(_610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _606));
        float _988 = _606 + _389;
        float _989 = _610 + _390;
        float _990 = _614 + _391;
        float _1000 = fma(_990, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988)) - _957;
        float _1001 = fma(_990, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988)) - _961;
        float _1002 = fma(_990, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988)) - _965;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_957 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_961 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[35u].z) + ((((((_965 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1056 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1023.x + (-0.5));
        float _1058 = _1056 * (_1023.y + (-0.5));
        float _1059 = _1056 * (_1023.z + (-0.5));
        float _1066 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1030.x + (-0.5));
        float _1068 = _1066 * (_1030.y + (-0.5));
        float _1069 = _1066 * (_1030.z + (-0.5));
        float _1076 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1037.x + (-0.5));
        float _1078 = _1076 * (_1037.y + (-0.5));
        float _1079 = _1076 * (_1037.z + (-0.5));
        float _1086 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1044.x + (-0.5));
        float _1088 = _1086 * (_1044.y + (-0.5));
        float _1089 = _1086 * (_1044.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_389, _390, _391), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3519 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1120 + 1.0))) + _1125) * _1090;
        float _1135 = _1058 * 0.5;
        float _1136 = _1068 * 0.5;
        float _1137 = _1078 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_389, _390, _391), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3552 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1162 + 1.0))) + _1167) * _1091;
        float _1177 = _1059 * 0.5;
        float _1178 = _1069 * 0.5;
        float _1179 = _1079 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_389, _390, _391), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3585 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1204 + 1.0))) + _1209) * _1092;
        _1226 = _1059;
        _1227 = _1058;
        _1228 = _1057;
        _1229 = _1069;
        _1230 = _1068;
        _1231 = _1067;
        _1232 = _1079;
        _1233 = _1078;
        _1234 = _1077;
        _1235 = _1092;
        _1236 = _1091;
        _1237 = _1090;
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _917;
        _1227 = _917;
        _1228 = _917;
        _1229 = _917;
        _1230 = _917;
        _1231 = _917;
        _1232 = _917;
        _1233 = _917;
        _1234 = _917;
        _1235 = _917;
        _1236 = _917;
        _1237 = _917;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _929)) + _929;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _930)) + _930;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _931)) + _931;
    float _1273 = fma(_1252, cbSceneParam._m0[89u].z, fma(_1251, cbSceneParam._m0[89u].y, _1250 * cbSceneParam._m0[89u].x));
    float _1276 = fma(_1252, cbSceneParam._m0[90u].z, fma(_1251, cbSceneParam._m0[90u].y, _1250 * cbSceneParam._m0[90u].x));
    float _1279 = fma(_1252, cbSceneParam._m0[91u].z, fma(_1251, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1250));
    float _1294 = _553 * 0.5;
    float _1295 = _554 * 0.5;
    float _1296 = _555 * 0.5;
    float _1297 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1300 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1303 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1337;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1310 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_916, _920, _923, _926));
        float _1314 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_918, _921, _924, _927));
        float _1318 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_919, _922, _925, _928));
        float _1325 = dot(vec4(cbModelParam._m0[39u]), vec4(_1294, _1295, _1296, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1348;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1339 = dot(vec4(cbModelParam._m0[40u]), vec4(_1294, _1295, _1296, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1352 = (_1348 * cbModelParam._m0[1u].x) + (_1337 * (1.0 - cbModelParam._m0[1u].x));
    float _1362 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1362 : min(cbModelParam._m0[25u].z, _1362));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1412 = fma(_614, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606)) + cbModelParam._m0[13u].w;
        float _1416 = fma(_614, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606)) + cbModelParam._m0[14u].w;
        float _1420 = fma(_614, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606)) + cbModelParam._m0[15u].w;
        float _1423 = fma(_555, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553));
        float _1426 = fma(_555, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553));
        float _1429 = fma(_555, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553));
        float _1457;
        if (_1423 > 0.0)
        {
            _1457 = abs((1.0 - _1412) / _1423);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1412 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1457 = frontier_phi_16_14_ladder;
        }
        float _1662;
        if (_1426 > 0.0)
        {
            _1662 = abs((1.0 - _1416) / _1426);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1416 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1662 = frontier_phi_25_21_ladder;
        }
        float _1905;
        if (_1429 > 0.0)
        {
            _1905 = abs((1.0 - _1420) / _1429);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1420 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1905 = frontier_phi_37_32_ladder;
        }
        float _1907 = isnan(_1662) ? _1457 : (isnan(_1457) ? _1662 : min(_1457, _1662));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1423) + _1412;
        float _1913 = (_1908 * _1426) + _1416;
        float _1914 = (_1908 * _1429) + _1420;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1363);
            frontier_phi_15_37_ladder = _2038.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2038.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2038.x * cbModelParam._m0[1u].y;
        }
        _1445 = frontier_phi_15_37_ladder_2;
        _1447 = frontier_phi_15_37_ladder_1;
        _1449 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_553, _554, _555), _1363);
        _1445 = _1433.x * cbModelParam._m0[1u].y;
        _1447 = _1433.y * cbModelParam._m0[1u].y;
        _1449 = _1433.z * cbModelParam._m0[1u].y;
    }
    float _1453 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1453 : min(cbModelParam._m0[25u].w, _1453));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1511 = fma(_614, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606)) + cbModelParam._m0[21u].w;
        float _1515 = fma(_614, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606)) + cbModelParam._m0[22u].w;
        float _1519 = fma(_614, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606)) + cbModelParam._m0[23u].w;
        float _1522 = fma(_555, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553));
        float _1525 = fma(_555, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553));
        float _1528 = fma(_555, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553));
        float _1667;
        if (_1522 > 0.0)
        {
            _1667 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1667 = frontier_phi_27_23_ladder;
        }
        float _1932;
        if (_1525 > 0.0)
        {
            _1932 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1932 = frontier_phi_39_34_ladder;
        }
        float _2137;
        if (_1528 > 0.0)
        {
            _2137 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2137 = frontier_phi_48_45_ladder;
        }
        float _2139 = isnan(_1932) ? _1667 : (isnan(_1667) ? _1932 : min(_1667, _1932));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1522) + _1511;
        float _2145 = (_2140 * _1525) + _1515;
        float _2146 = (_2140 * _1528) + _1519;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2147;
        float _2150 = _2147 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2146 > _2150) || ((_2146 < _2148) || ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 < _2148) || (_2144 > _2150))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2146, cbModelParam._m0[17u].z, fma(_2145, cbModelParam._m0[17u].y, _2144 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2146, cbModelParam._m0[18u].z, fma(_2145, cbModelParam._m0[18u].y, _2144 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2146, cbModelParam._m0[19u].z, fma(_2145, cbModelParam._m0[19u].y, _2144 * cbModelParam._m0[19u].x))), _1454);
            frontier_phi_24_48_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1547 = frontier_phi_24_48_ladder_2;
        _1549 = frontier_phi_24_48_ladder_1;
        _1551 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_553, _554, _555), _1454);
        _1547 = _1531.x * cbModelParam._m0[1u].z;
        _1549 = _1531.y * cbModelParam._m0[1u].z;
        _1551 = _1531.z * cbModelParam._m0[1u].z;
    }
    float _1563 = ((((1.0 - _574) * ((_561 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_574 * _561)) * _545;
    float _1564 = _1563 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1565 = _1563 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1566 = _1563 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, _1564 * cbSceneParam._m0[91u].x));
    uvec4 _1585 = floatBitsToUint(cbInstanceData._m0[_519 + 5u]);
    uint _1587 = _1585.x * 14u;
    uint _1588 = _1587 + 13u;
    float _1595 = _545 + (-1.0);
    float _1600 = (cbLight._m0[_1588].x * _1595) + 1.0;
    float _1601 = (cbLight._m0[_1588].y * _1595) + 1.0;
    float _1602 = (cbLight._m0[_1588].z * _1595) + 1.0;
    float _1603 = (cbLight._m0[_1588].w * _1595) + 1.0;
    uint _1604 = _1587 + 5u;
    float _1610 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1614 = _1587 + 4u;
    float _1620 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1624 = _1587 | 1u;
    float _1635 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_389, _390, _391));
    float _1638 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_389, _390, _391));
    float _3721 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _3732 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1643 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.3183098733425140380859375;
    float _1645 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.3183098733425140380859375;
    float _1652 = ((cbLight._m0[_1604].x * _1610) * _1645) + ((cbLight._m0[_1614].x * _1620) * _1643);
    float _1653 = ((_1610 * cbLight._m0[_1604].y) * _1645) + ((_1620 * cbLight._m0[_1614].y) * _1643);
    float _1654 = ((_1610 * cbLight._m0[_1604].z) * _1645) + ((_1620 * cbLight._m0[_1614].z) * _1643);
    uvec4 _1659 = floatBitsToUint(cbLight._m0[_1587 + 12u]);
    bool _1661 = _1659.x == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1661)
    {
        _1672 = _1652;
        _1674 = _1653;
        _1676 = _1654;
    }
    else
    {
        uint _1680 = _1587 + 6u;
        float _1696 = (dot(vec3(cbLight._m0[_1587 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1697 = _1696 * _1696;
        float _3743 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1699 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1672 = (((cbLight._m0[_1680].x * 0.3183098733425140380859375) * _1698) * _1699) + _1652;
        _1674 = (((cbLight._m0[_1680].y * 0.3183098733425140380859375) * _1698) * _1699) + _1653;
        _1676 = (((cbLight._m0[_1680].z * 0.3183098733425140380859375) * _1698) * _1699) + _1654;
    }
    bool _1679 = _1659.y == 0u;
    float _1717;
    float _1719;
    float _1721;
    if (_1679)
    {
        _1717 = _1672;
        _1719 = _1674;
        _1721 = _1676;
    }
    else
    {
        uint _1876 = _1587 + 7u;
        float _1892 = (dot(vec3(cbLight._m0[_1587 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3759 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1895 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1717 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1672;
        _1719 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1674;
        _1721 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1676;
    }
    uint _1724 = _1587 + 8u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1587].w)) * _392) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1587].x + _470;
    float _1740 = cbLight._m0[_1587].y + _471;
    float _1741 = cbLight._m0[_1587].z + _472;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1587].xyz));
    float _3775 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _1753 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1754 = dot(vec3(_389, _390, _391), vec3(_1746, _1747, _1748));
    float _3797 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1746, _1747, _1748));
    float _3808 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1738 * _1738;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1777 = (exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1778 = 1.0 - _1738;
    float _1789 = (0.5 / (((_1753 * ((_1752 * _1778) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1778) + _1738) * _1752))) * _1752;
    float _3819 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    uint _1802 = _1587 + 9u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _392) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1624].x + _470;
    float _1816 = cbLight._m0[_1624].y + _471;
    float _1817 = cbLight._m0[_1624].z + _472;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1624].xyz));
    float _3830 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1829 = dot(vec3(_389, _390, _391), vec3(_1822, _1823, _1824));
    float _3841 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1822, _1823, _1824));
    float _3852 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1814 * _1814;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1814;
    float _1861 = (0.5 / (((_1753 * ((_1828 * _1851) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1851) + _1814) * _1828))) * _1828;
    float _3863 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    float _1873 = (((_1850 * cbLight._m0[_1802].x) * _1863) * _1610) + (((_1777 * cbLight._m0[_1724].x) * _1791) * _1620);
    float _1874 = (((_1850 * cbLight._m0[_1802].y) * _1863) * _1610) + (((_1777 * cbLight._m0[_1724].y) * _1791) * _1620);
    float _1875 = (((_1850 * cbLight._m0[_1802].z) * _1863) * _1610) + (((_1777 * cbLight._m0[_1724].z) * _1791) * _1620);
    float _1937;
    float _1939;
    float _1941;
    if (_1661)
    {
        _1937 = _1873;
        _1939 = _1874;
        _1941 = _1875;
    }
    else
    {
        uint _1943 = _1587 + 2u;
        uint _1947 = _1587 + 10u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _392) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _470;
        float _1964 = cbLight._m0[_1943].y + _471;
        float _1965 = cbLight._m0[_1943].z + _472;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1943].xyz));
        float _3874 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1977 = dot(vec3(_389, _390, _391), vec3(_1970, _1971, _1972));
        float _3885 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _3896 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1999 = 1.0 - _1962;
        float _2009 = (0.5 / (((_1753 * ((_1976 * _1999) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1999) + _1962) * _1976))) * _1976;
        float _3907 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2011 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2012 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1937 = (((_1998 * cbLight._m0[_1947].x) * _2011) * _2012) + _1873;
        _1939 = (((_1998 * cbLight._m0[_1947].y) * _2011) * _2012) + _1874;
        _1941 = (((_1998 * cbLight._m0[_1947].z) * _2011) * _2012) + _1875;
    }
    float _2047;
    float _2049;
    float _2051;
    if (_1679)
    {
        _2047 = _1937;
        _2049 = _1939;
        _2051 = _1941;
    }
    else
    {
        uint _2058 = _1587 + 3u;
        uint _2062 = _1587 + 11u;
        float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _392) * 0.949999988079071044921875);
        float _2077 = _2076 * _2076;
        float _2078 = cbLight._m0[_2058].x + _470;
        float _2079 = cbLight._m0[_2058].y + _471;
        float _2080 = cbLight._m0[_2058].z + _472;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2085 = _2084 * _2078;
        float _2086 = _2084 * _2079;
        float _2087 = _2084 * _2080;
        float _2088 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2058].xyz));
        float _3923 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2092 = dot(vec3(_389, _390, _391), vec3(_2085, _2086, _2087));
        float _3934 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2085, _2086, _2087));
        float _3945 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2100 = _2077 * _2077;
        float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
        float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2114 = 1.0 - _2077;
        float _2124 = (0.5 / (((_1753 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2114) + _2077) * _2091))) * _2091;
        float _3956 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2126 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
        float _2127 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _2047 = (((_2113 * cbLight._m0[_2062].x) * _2126) * _2127) + _1937;
        _2049 = (((_2113 * cbLight._m0[_2062].y) * _2126) * _2127) + _1939;
        _2051 = (((_2113 * cbLight._m0[_2062].z) * _2126) * _2127) + _1941;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1585.y == 0u)
    {
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2202;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2202;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2202;
        uvec4 _2217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2218 = _2217.x;
        uint _2229 = uint((float(_2217.y) * floor(float(uint(cbSceneParam._m0[85u].y * _479) / _2218))) + floor(float(uint(cbSceneParam._m0[85u].x * _478) / _2218)));
        float _2239 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        uint _2243 = uint(isnan(14.0) ? _2240 : (isnan(_2240) ? 14.0 : min(_2240, 14.0)));
        uvec4 _2248 = texelFetch(g_lightClusterGridBuffer, int(((_2243 << 2u) + (_2229 << 6u)) >> 2u));
        uint _2249 = _2248.x;
        uint _2250 = _2217.z;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        if (((((1u << ((_2250 >> 4u) & 15u)) + 4294967295u) & _2249) == 0u) || ((_2250 & 240u) == 0u))
        {
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
        }
        else
        {
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            uint _2499 = 0u;
            uint _2508;
            bool _2509;
            for (;;)
            {
                _2508 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2499 << 2u)) >> 2u)).x;
                _2509 = _2508 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2509)
                {
                    frontier_phi_63_pred = _2498;
                    frontier_phi_63_pred_1 = _2497;
                    frontier_phi_63_pred_2 = _2496;
                    frontier_phi_63_pred_3 = _2495;
                    frontier_phi_63_pred_4 = _2494;
                    frontier_phi_63_pred_5 = _2493;
                }
                else
                {
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    uint _2623;
                    _2617 = _2493;
                    _2618 = _2494;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2508;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    for (;;)
                    {
                        uint _2627 = uint(findLSB(_2623)) + (_2499 << 5u);
                        uint _2624 = (_2623 + 4294967295u) & _2623;
                        uint _2629 = _2627 * 48u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 3u)).x));
                        uint _2649 = (_2627 * 48u) + 4u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2668 = (_2627 * 48u) + 8u;
                        vec3 _2679 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x));
                        float _2683 = _2643.x - _2203;
                        float _2684 = _2643.y - _2204;
                        float _2685 = _2643.z - _2205;
                        float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                        float _2689 = inversesqrt(_2686);
                        float _2690 = _2689 * _2683;
                        float _2691 = _2689 * _2684;
                        float _2692 = _2689 * _2685;
                        float _2693 = dot(vec3(_500, _503, _506), vec3(_2690, _2691, _2692));
                        float _2698 = 1.0 - (_2686 * _2643.w);
                        float _3982 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2699 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2700 = sqrt(_2686) * _2662.w;
                        float _2703 = 1.39999997615814208984375 / (_2700 + 1.39999997615814208984375);
                        float _2704 = _2703 * _2703;
                        float _2707 = ((1.0 - _2704) * _2693) + _2704;
                        float _2710 = _2700 * _2700;
                        float _2714 = ((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2699) / ((_2710 * 0.699999988079071044921875) + 1.0);
                        float _2718 = (-0.0) - _2203;
                        float _2719 = (-0.0) - _2204;
                        float _2720 = (-0.0) - _2205;
                        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2735 = exp2(log2(1.0 / ((_2710 * 3.5) + 5.0)) * 0.25);
                        float _2736 = 1.0 - _561;
                        float _2743 = sqrt(1.0 - ((1.0 - (_2736 * _2736)) * (1.0 - (_2735 * _2735))));
                        float _2744 = _2743 * _2743;
                        float _2745 = _2744 * _2744;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2748 = _2727 + _2692;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2756 = dot(vec3(_500, _503, _506), vec3(_2725, _2726, _2727));
                        float _3998 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2759 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2760 = dot(vec3(_500, _503, _506), vec3(_2752 * _2746, _2752 * _2747, _2752 * _2748));
                        float _4009 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2767 = ((_2763 * _2763) * (_2745 + (-1.0))) + 1.0;
                        float _2768 = _2703 * _2744;
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2693) + _2769;
                        float _4020 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2774 = 1.0 - _2744;
                        float _2784 = (0.5 / (((_2773 * ((_2759 * _2774) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2773 * _2774) + _2744) * _2759))) * _2773;
                        float _4031 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2795 = (((_2745 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_2767 * _2767) * ((_2710 * 2.1991131305694580078125) + 3.141590118408203125))) * _2699;
                        _2552 = (_2714 * _2662.x) + _2620;
                        _2553 = (_2714 * _2662.y) + _2621;
                        _2554 = (_2714 * _2662.z) + _2622;
                        _2549 = (_2795 * _2679.x) + _2617;
                        _2550 = (_2795 * _2679.y) + _2618;
                        _2551 = (_2795 * _2679.z) + _2619;
                        if (_2624 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2617 = _2549;
                            _2618 = _2550;
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2624;
                        }
                    }
                    frontier_phi_63_pred = _2554;
                    frontier_phi_63_pred_1 = _2553;
                    frontier_phi_63_pred_2 = _2552;
                    frontier_phi_63_pred_3 = _2551;
                    frontier_phi_63_pred_4 = _2550;
                    frontier_phi_63_pred_5 = _2549;
                }
                _2360 = frontier_phi_63_pred;
                _2358 = frontier_phi_63_pred_1;
                _2356 = frontier_phi_63_pred_2;
                _2354 = frontier_phi_63_pred_3;
                _2352 = frontier_phi_63_pred_4;
                _2350 = frontier_phi_63_pred_5;
                uint _2500 = _2499 + 1u;
                if (_2500 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2493 = _2350;
                    _2494 = _2352;
                    _2495 = _2354;
                    _2496 = _2356;
                    _2497 = _2358;
                    _2498 = _2360;
                    _2499 = _2500;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
        }
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.z;
        uint _2366 = (_2364 >> 8u) & 15u;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        if (((4294967295u << _2366) & _2249) == 0u)
        {
            _2461 = _2349;
            _2463 = _2351;
            _2465 = _2353;
            _2467 = _2355;
            _2469 = _2357;
            _2471 = _2359;
        }
        else
        {
            float _2486 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _2487 = _2486 * _2203;
            float _2488 = _2486 * _2204;
            float _2489 = _2486 * _2205;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2366 < ((_2364 >> 12u) & 15u))
            {
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2600 = _2349;
                float _2601 = _2351;
                float _2602 = _2353;
                float _2603 = _2355;
                float _2604 = _2357;
                float _2605 = _2359;
                uint _2606 = _2366;
                uint _2615;
                bool _2616;
                for (;;)
                {
                    _2615 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                    _2616 = _2615 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2616)
                    {
                        frontier_phi_69_pred = _2605;
                        frontier_phi_69_pred_1 = _2604;
                        frontier_phi_69_pred_2 = _2603;
                        frontier_phi_69_pred_3 = _2602;
                        frontier_phi_69_pred_4 = _2601;
                        frontier_phi_69_pred_5 = _2600;
                    }
                    else
                    {
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _2813 = _2600;
                        float _2814 = _2601;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        uint _2819 = _2615;
                        uint _2820;
                        vec4 _2845;
                        float _2846;
                        vec4 _2861;
                        vec3 _2873;
                        vec4 _2889;
                        vec4 _2905;
                        float _2952;
                        bool _2953;
                        for (;;)
                        {
                            uint _2830 = ((_2606 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2819));
                            _2820 = (_2819 + 4294967295u) & _2819;
                            uint _2832 = _2830 * 40u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2846 = _2845.w;
                            uint _2848 = (_2830 * 40u) + 4u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2863 = (_2830 * 40u) + 8u;
                            _2873 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x));
                            uint _2876 = (_2830 * 40u) + 16u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2830 * 40u) + 20u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2830 * 40u) + 24u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2927 = (_2830 * 40u) + 28u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2952 = fma(_2205, _2940.z, fma(_2204, _2940.y, _2940.x * _2203)) + _2940.w;
                            _2953 = !((fma(_2205, _2921.z, fma(_2204, _2921.y, _2921.x * _2203)) + _2921.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2953)
                            {
                                float _2980 = _2845.x - _2203;
                                float _2981 = _2845.y - _2204;
                                float _2982 = _2845.z - _2205;
                                float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                                float _2986 = inversesqrt(_2983);
                                float _2987 = _2986 * _2980;
                                float _2988 = _2986 * _2981;
                                float _2989 = _2986 * _2982;
                                float _2993 = 1.0 - (_2983 / (_2846 * _2846));
                                float _4042 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _2998 = sqrt(_2983) * _2861.w;
                                float _3000 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                                float _3001 = _3000 * _3000;
                                float _3004 = ((1.0 - _3001) * dot(vec3(_2987, _2988, _2989), vec3(_500, _503, _506))) + _3001;
                                float _3007 = _2998 * _2998;
                                float _3011 = (fma(_2205, _2889.z, fma(_2204, _2889.y, _2889.x * _2203)) + _2889.w) / _2952;
                                float _3012 = (fma(_2205, _2905.z, fma(_2204, _2905.y, _2905.x * _2203)) + _2905.w) / _2952;
                                float _3016 = 1.0 - dot(vec2(_3011, _3012), vec2(_3011, _3012));
                                float _4058 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3018 = _3017 * (((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2994) / ((_3007 * 0.699999988079071044921875) + 1.0));
                                float _3030 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                                float _3031 = 1.0 - _561;
                                float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                                float _3039 = _3038 * _3038;
                                float _3040 = _3039 * _3039;
                                float _3041 = _2987 - _2487;
                                float _3042 = _2988 - _2488;
                                float _3043 = _2989 - _2489;
                                float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                                float _3051 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2487, (-0.0) - _2488, (-0.0) - _2489));
                                float _4069 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3054 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3055 = dot(vec3(_500, _503, _506), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                                float _4080 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                                float _3063 = _3000 * _3039;
                                float _3064 = _3063 * _3063;
                                float _3070 = ((1.0 - _3064) * dot(vec3(_500, _503, _506), vec3(_2987, _2988, _2989))) + _3064;
                                float _4091 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3072 = 1.0 - _3039;
                                float _3082 = (0.5 / (((_3071 * ((_3054 * _3072) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3039) * _3054))) * _3071;
                                float _4102 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3092 = (_3017 * _2994) * (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) / ((_3062 * _3062) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3018 * _2861.z;
                                frontier_phi_75_pred_1 = _3018 * _2861.y;
                                frontier_phi_75_pred_2 = _3018 * _2861.x;
                                frontier_phi_75_pred_3 = _3092 * _2873.z;
                                frontier_phi_75_pred_4 = _3092 * _2873.y;
                                frontier_phi_75_pred_5 = _3092 * _2873.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3101 = frontier_phi_75_pred;
                            _3100 = frontier_phi_75_pred_1;
                            _3099 = frontier_phi_75_pred_2;
                            _3098 = frontier_phi_75_pred_3;
                            _3097 = frontier_phi_75_pred_4;
                            _3096 = frontier_phi_75_pred_5;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2800 = _3096 + _2813;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            if (_2820 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2820;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2805;
                        frontier_phi_69_pred_1 = _2804;
                        frontier_phi_69_pred_2 = _2803;
                        frontier_phi_69_pred_3 = _2802;
                        frontier_phi_69_pred_4 = _2801;
                        frontier_phi_69_pred_5 = _2800;
                    }
                    _2472 = frontier_phi_69_pred;
                    _2470 = frontier_phi_69_pred_1;
                    _2468 = frontier_phi_69_pred_2;
                    _2466 = frontier_phi_69_pred_3;
                    _2464 = frontier_phi_69_pred_4;
                    _2462 = frontier_phi_69_pred_5;
                    uint _2607 = _2606 + 1u;
                    if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2600 = _2462;
                        _2601 = _2464;
                        _2602 = _2466;
                        _2603 = _2468;
                        _2604 = _2470;
                        _2605 = _2472;
                        _2606 = _2607;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2472;
                frontier_phi_57_58_ladder_1 = _2470;
                frontier_phi_57_58_ladder_2 = _2468;
                frontier_phi_57_58_ladder_3 = _2466;
                frontier_phi_57_58_ladder_4 = _2464;
                frontier_phi_57_58_ladder_5 = _2462;
            }
            else
            {
                frontier_phi_57_58_ladder = _2359;
                frontier_phi_57_58_ladder_1 = _2357;
                frontier_phi_57_58_ladder_2 = _2355;
                frontier_phi_57_58_ladder_3 = _2353;
                frontier_phi_57_58_ladder_4 = _2351;
                frontier_phi_57_58_ladder_5 = _2349;
            }
            _2461 = frontier_phi_57_58_ladder_5;
            _2463 = frontier_phi_57_58_ladder_4;
            _2465 = frontier_phi_57_58_ladder_3;
            _2467 = frontier_phi_57_58_ladder_2;
            _2469 = frontier_phi_57_58_ladder_1;
            _2471 = frontier_phi_57_58_ladder;
        }
        float _2476 = isnan(1.0) ? _545 : (isnan(_545) ? 1.0 : min(_545, 1.0));
        _2261 = (_2476 * _2467) + _1717;
        _2263 = (_2476 * _2469) + _1719;
        _2265 = (_2476 * _2471) + _1721;
        _2267 = ((_2461 * 0.039999999105930328369140625) * _2476) + _2047;
        _2269 = ((_2463 * 0.039999999105930328369140625) * _2476) + _2049;
        _2271 = ((_2465 * 0.039999999105930328369140625) * _2476) + _2051;
    }
    else
    {
        _2261 = _1717;
        _2263 = _1719;
        _2265 = _1721;
        _2267 = _2047;
        _2269 = _2049;
        _2271 = _2051;
    }
    float _4118 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4129 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4140 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    uint _2291 = _519 + 6u;
    float _2299 = _478 / cbSceneParam._m0[86u].x;
    float _2300 = _479 / cbSceneParam._m0[86u].y;
    vec4 _2314 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2316 = _2314.x;
    float _2317 = _2314.y;
    float _2318 = _2314.z;
    float _2319 = _2314.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2374 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2375 = _2374 / _411;
        float _2386 = _2375 * _463;
        float _2387 = _464 * _2375;
        float _2388 = (-0.0) - _2387;
        float _2389 = _2375 * _465;
        float _2391 = (cbSceneParam._m0[77u].w * _2388) / _2374;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2387;
        float _2399 = sqrt(((_2386 * _2386) + (_2387 * _2387)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2374)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2562;
        if (abs((_2388 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2562 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2522 = 1.0 / cbSceneParam._m0[80u].x;
            float _2523 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2524 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2533 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : min(_2523, 0.0));
            float _2534 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : min(_2524, 0.0));
            _2562 = ((abs(_2399 / _2388) * cbSceneParam._m0[80u].y) * ((((_2533 - _2534) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0))))) * _2522)) - ((exp2(_2409 * _2533) - exp2(_2409 * _2534)) * _2522))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2564 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, 1.0), 0.0);
        float _2573 = exp2((_2562 * (-1.44269502162933349609375)) * (1.0 - _2564.w));
        float _2574 = log2(_2573);
        float _2590 = log2(_2319);
        _2411 = (exp2(_2590 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2574 * cbSceneParam._m0[78u].x)) * _2564.x) / cbSceneParam._m0[78u].x)) + _2316;
        _2413 = (exp2(_2590 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2574 * cbSceneParam._m0[78u].y)) * _2564.y) / cbSceneParam._m0[78u].y)) + _2317;
        _2415 = (exp2(_2590 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2574 * cbSceneParam._m0[78u].z)) * _2564.z) / cbSceneParam._m0[78u].z)) + _2318;
        _2417 = _2573 * _2319;
    }
    else
    {
        _2411 = _2316;
        _2413 = _2317;
        _2415 = _2318;
        _2417 = _2319;
    }
    float _2429 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2430 = _2429 == 3.0;
    float _2431 = log2(_2417);
    float _2438 = exp2(_2431 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2261 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _545))) + ((_2267 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1352)) * cbPerFrame._m0[3u].x));
    float _2439 = exp2(_2431 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2263 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _545))) + ((_2269 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1352)) * cbPerFrame._m0[3u].x));
    float _2440 = exp2(_2431 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2265 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _545))) + ((_2271 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1352)) * cbPerFrame._m0[3u].x));
    float _2449 = (_2429 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2449 * (_2430 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.y = _2449 * (_2430 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.z = _2449 * (_2430 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.w = cbInstanceData._m0[_2291].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2291].w;
}


