#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _921;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3519 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _259 = fma(_256, _217, fma(_249, _210, _247 * _196));
    float _262 = fma(_256, _218, fma(_249, _211, _247 * _197));
    float _265 = fma(_256, _219, fma(_249, _212, _247 * _198));
    float _274 = exp2(log2(inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265))) * _262) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3530 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    vec4 _287 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _303.x;
    float _306 = _303.y;
    float _307 = _303.z;
    float _314 = ((_287.x - _305) * _275) + _305;
    float _315 = ((_287.y - _306) * _275) + _306;
    float _316 = ((_287.z - _307) * _275) + _307;
    vec4 _328 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _335 = (_328.x * 2.0) + (-1.0);
    float _336 = (_328.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_335, _336), vec2(_335, _336));
    float _3541 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _345 = ((_328.z - _243) * _275) + _243;
    float _354 = ((sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) - _256) * _275) + _256;
    vec4 _368 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _378 = (((_335 - _247) * _275) + _247) + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _379 = (((_336 - _249) * _275) + _249) + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _382 = fma(_354, _217, fma(_379, _210, _378 * _196));
    float _385 = fma(_354, _218, fma(_379, _211, _378 * _197));
    float _388 = fma(_354, _219, fma(_379, _212, _378 * _198));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3552 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _396 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3574 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3585 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _467 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _457);
    float _468 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _457);
    float _469 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _457);
    float _473 = inversesqrt(dot(vec3(_467, _468, _469), vec3(_467, _468, _469)));
    float _474 = _467 * _473;
    float _475 = _468 * _473;
    float _476 = _469 * _473;
    float _482 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _483 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _504 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _507 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _510 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _523 = uint(roundEven(NORMAL.w)) * 13u;
    uint _526 = (_523 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _532 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_526].x;
    float _533 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_526].y;
    float _534 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_526].z;
    float _3596 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    vec4 _546 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _482, cbSceneParam._m0[86u].y * _483));
    float _549 = _546.x * TEXCOORD.z;
    float _550 = dot(vec3(_393, _394, _395), vec3(_474, _475, _476));
    float _553 = _550 * 2.0;
    float _557 = (_553 * _393) - _474;
    float _558 = (_553 * _394) - _475;
    float _559 = (_553 * _395) - _476;
    float _563 = abs(dot(vec3(_474, _475, _476), vec3(_393, _394, _395)));
    float _3629 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _565 = sqrt(_396);
    float _578 = exp2((_565 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_565 * 3.0));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _920;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _645 = fma(_618, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610));
        float _649 = fma(_618, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610));
        float _653 = fma(_618, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610));
        float _678 = _610 + _393;
        float _679 = _614 + _394;
        float _680 = _618 + _395;
        float _690 = fma(_680, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678)) - _645;
        float _691 = fma(_680, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678)) - _649;
        float _692 = fma(_680, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678)) - _653;
        float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
        float _709 = ((_696 * _690) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_645 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_696 * _691) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_649 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_696 * _692) / cbModelParam._m0[34u].z) + ((((((_653 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        float _748 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_714.x + (-0.5));
        float _750 = _748 * (_714.y + (-0.5));
        float _751 = _748 * (_714.z + (-0.5));
        float _758 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_721.x + (-0.5));
        float _760 = _758 * (_721.y + (-0.5));
        float _761 = _758 * (_721.z + (-0.5));
        float _768 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_728.x + (-0.5));
        float _770 = _768 * (_728.y + (-0.5));
        float _771 = _768 * (_728.z + (-0.5));
        float _778 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_735.x + (-0.5));
        float _780 = _778 * (_735.y + (-0.5));
        float _781 = _778 * (_735.z + (-0.5));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = _749 * 0.5;
        float _786 = _759 * 0.5;
        float _787 = _769 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _802 = (dot(vec3(_393, _394, _395), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _812 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3677 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_814 + 1.0))) + _819) * _782;
        float _829 = _750 * 0.5;
        float _830 = _760 * 0.5;
        float _831 = _770 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_393, _394, _395), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3710 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_856 + 1.0))) + _861) * _783;
        float _871 = _751 * 0.5;
        float _872 = _761 * 0.5;
        float _873 = _771 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_393, _394, _395), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3743 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_898 + 1.0))) + _903) * _784;
        _920 = _751;
        _922 = _750;
        _923 = _749;
        _924 = _761;
        _925 = _760;
        _926 = _759;
        _927 = _771;
        _928 = _770;
        _929 = _769;
        _930 = _784;
        _931 = _783;
        _932 = _782;
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
    }
    else
    {
        _920 = _921;
        _922 = _921;
        _923 = _921;
        _924 = _921;
        _925 = _921;
        _926 = _921;
        _927 = _921;
        _928 = _921;
        _929 = _921;
        _930 = _921;
        _931 = _921;
        _932 = _921;
        _933 = 0.0;
        _934 = 0.0;
        _935 = 0.0;
    }
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _961 = fma(_618, cbModelParam._m0[30u].z, fma(_614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _610));
        float _965 = fma(_618, cbModelParam._m0[31u].z, fma(_614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _610));
        float _969 = fma(_618, cbModelParam._m0[32u].z, fma(_614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _610));
        float _992 = _610 + _393;
        float _993 = _614 + _394;
        float _994 = _618 + _395;
        float _1004 = fma(_994, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992)) - _961;
        float _1005 = fma(_994, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992)) - _965;
        float _1006 = fma(_994, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992)) - _969;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_961 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_965 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[35u].z) + ((((((_969 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1060 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1027.x + (-0.5));
        float _1062 = _1060 * (_1027.y + (-0.5));
        float _1063 = _1060 * (_1027.z + (-0.5));
        float _1070 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1034.x + (-0.5));
        float _1072 = _1070 * (_1034.y + (-0.5));
        float _1073 = _1070 * (_1034.z + (-0.5));
        float _1080 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1041.x + (-0.5));
        float _1082 = _1080 * (_1041.y + (-0.5));
        float _1083 = _1080 * (_1041.z + (-0.5));
        float _1090 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1048.x + (-0.5));
        float _1092 = _1090 * (_1048.y + (-0.5));
        float _1093 = _1090 * (_1048.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_393, _394, _395), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3806 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1124 + 1.0))) + _1129) * _1094;
        float _1139 = _1062 * 0.5;
        float _1140 = _1072 * 0.5;
        float _1141 = _1082 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_393, _394, _395), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3839 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1166 + 1.0))) + _1171) * _1095;
        float _1181 = _1063 * 0.5;
        float _1182 = _1073 * 0.5;
        float _1183 = _1083 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_393, _394, _395), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3872 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1208 + 1.0))) + _1213) * _1096;
        _1230 = _1063;
        _1231 = _1062;
        _1232 = _1061;
        _1233 = _1073;
        _1234 = _1072;
        _1235 = _1071;
        _1236 = _1083;
        _1237 = _1082;
        _1238 = _1081;
        _1239 = _1096;
        _1240 = _1095;
        _1241 = _1094;
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _921;
        _1231 = _921;
        _1232 = _921;
        _1233 = _921;
        _1234 = _921;
        _1235 = _921;
        _1236 = _921;
        _1237 = _921;
        _1238 = _921;
        _1239 = _921;
        _1240 = _921;
        _1241 = _921;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1277 = fma(_1256, cbSceneParam._m0[89u].z, fma(_1255, cbSceneParam._m0[89u].y, _1254 * cbSceneParam._m0[89u].x));
    float _1280 = fma(_1256, cbSceneParam._m0[90u].z, fma(_1255, cbSceneParam._m0[90u].y, _1254 * cbSceneParam._m0[90u].x));
    float _1283 = fma(_1256, cbSceneParam._m0[91u].z, fma(_1255, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1254));
    float _1298 = _557 * 0.5;
    float _1299 = _558 * 0.5;
    float _1300 = _559 * 0.5;
    float _1301 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1304 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1307 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1341;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1314 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_920, _924, _927, _930));
        float _1318 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_922, _925, _928, _931));
        float _1322 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_923, _926, _929, _932));
        float _1329 = dot(vec4(cbModelParam._m0[39u]), vec4(_1298, _1299, _1300, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1352;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1343 = dot(vec4(cbModelParam._m0[40u]), vec4(_1298, _1299, _1300, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1356 = (_1352 * cbModelParam._m0[1u].x) + (_1341 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1416 = fma(_618, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610)) + cbModelParam._m0[13u].w;
        float _1420 = fma(_618, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610)) + cbModelParam._m0[14u].w;
        float _1424 = fma(_618, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610)) + cbModelParam._m0[15u].w;
        float _1427 = fma(_559, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557));
        float _1430 = fma(_559, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557));
        float _1433 = fma(_559, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557));
        float _1461;
        if (_1427 > 0.0)
        {
            _1461 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1461 = frontier_phi_16_14_ladder;
        }
        float _1635;
        if (_1430 > 0.0)
        {
            _1635 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_21_ladder;
        }
        float _1930;
        if (_1433 > 0.0)
        {
            _1930 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1930 = frontier_phi_37_32_ladder;
        }
        float _1932 = isnan(_1635) ? _1461 : (isnan(_1461) ? _1635 : min(_1461, _1635));
        float _1933 = isnan(_1930) ? _1932 : (isnan(_1932) ? _1930 : min(_1932, _1930));
        float _1937 = (_1933 * _1427) + _1416;
        float _1938 = (_1933 * _1430) + _1420;
        float _1939 = (_1933 * _1433) + _1424;
        float _1940 = _1933 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1940;
        float _1944 = _1940 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 > _1944) || ((_1938 < _1942) || ((_1937 < _1942) || (_1937 > _1944))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1939, cbModelParam._m0[9u].z, fma(_1938, cbModelParam._m0[9u].y, _1937 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1939, cbModelParam._m0[10u].z, fma(_1938, cbModelParam._m0[10u].y, _1937 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1939, cbModelParam._m0[11u].z, fma(_1938, cbModelParam._m0[11u].y, _1937 * cbModelParam._m0[11u].x))), _1367);
            frontier_phi_15_37_ladder = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2084.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2084.z * cbModelParam._m0[1u].y;
        }
        _1449 = frontier_phi_15_37_ladder_1;
        _1451 = frontier_phi_15_37_ladder;
        _1453 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_557, _558, _559), _1367);
        _1449 = _1437.x * cbModelParam._m0[1u].y;
        _1451 = _1437.y * cbModelParam._m0[1u].y;
        _1453 = _1437.z * cbModelParam._m0[1u].y;
    }
    float _1457 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1457 : min(cbModelParam._m0[25u].w, _1457));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1515 = fma(_618, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610)) + cbModelParam._m0[21u].w;
        float _1519 = fma(_618, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610)) + cbModelParam._m0[22u].w;
        float _1523 = fma(_618, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610)) + cbModelParam._m0[23u].w;
        float _1526 = fma(_559, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557));
        float _1529 = fma(_559, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557));
        float _1532 = fma(_559, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557));
        float _1640;
        if (_1526 > 0.0)
        {
            _1640 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1640 = frontier_phi_27_23_ladder;
        }
        float _1957;
        if (_1529 > 0.0)
        {
            _1957 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1957 = frontier_phi_39_34_ladder;
        }
        float _2284;
        if (_1532 > 0.0)
        {
            _2284 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2284 = frontier_phi_49_46_ladder;
        }
        float _2286 = isnan(_1957) ? _1640 : (isnan(_1640) ? _1957 : min(_1640, _1957));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1526) + _1515;
        float _2292 = (_2287 * _1529) + _1519;
        float _2293 = (_2287 * _1532) + _1523;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1458);
            frontier_phi_24_49_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1551 = frontier_phi_24_49_ladder_2;
        _1553 = frontier_phi_24_49_ladder_1;
        _1555 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_557, _558, _559), _1458);
        _1551 = _1535.x * cbModelParam._m0[1u].z;
        _1553 = _1535.y * cbModelParam._m0[1u].z;
        _1555 = _1535.z * cbModelParam._m0[1u].z;
    }
    float _1567 = ((((1.0 - _578) * ((_565 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_578 * _565)) * _549;
    float _1568 = _1567 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1569 = _1567 * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1570 = _1567 * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1573 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, _1568 * cbSceneParam._m0[91u].x));
    float _1614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1622 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1627 = _1614 / _1626;
    float _1628 = _1618 / _1626;
    float _1629 = _1622 / _1626;
    float _1776;
    float _1777;
    float _1778;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1656 = ((uint(_1629 > cbSceneParam._m0[59u].y) + uint(_1629 > cbSceneParam._m0[59u].x)) + uint(_1629 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1657 = _1656 + 43u;
        uint _1665 = _1656 + 44u;
        uint _1673 = _1656 + 45u;
        uint _1681 = _1656 + 46u;
        float _1692 = fma(_1626, cbSceneParam._m0[_1657].w, fma(_1622, cbSceneParam._m0[_1657].z, fma(_1618, cbSceneParam._m0[_1657].y, _1614 * cbSceneParam._m0[_1657].x)));
        float _1696 = fma(_1626, cbSceneParam._m0[_1665].w, fma(_1622, cbSceneParam._m0[_1665].z, fma(_1618, cbSceneParam._m0[_1665].y, _1614 * cbSceneParam._m0[_1665].x)));
        float _1704 = fma(_1626, cbSceneParam._m0[_1681].w, fma(_1622, cbSceneParam._m0[_1681].z, fma(_1618, cbSceneParam._m0[_1681].y, _1614 * cbSceneParam._m0[_1681].x)));
        float _1709 = cbSceneParam._m0[33u].z * _1704;
        float _1711 = cbSceneParam._m0[33u].w * _1704;
        float _1714 = fma(_1626, cbSceneParam._m0[_1673].w, fma(_1622, cbSceneParam._m0[_1673].z, fma(_1618, cbSceneParam._m0[_1673].y, _1614 * cbSceneParam._m0[_1673].x))) / _1704;
        float _1762 = (cbSceneParam._m0[33u].x - sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629))) * cbSceneParam._m0[33u].y;
        float _3998 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1769 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 + _1692) / _1704, (_1711 + _1696) / _1704), _1714), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1711 + _1692) / _1704, (_1696 - _1709) / _1704), _1714), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 - _1709) / _1704, (_1696 - _1711) / _1704), _1714), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 - _1711) / _1704, (_1709 + _1696) / _1704), _1714), 0.0)).x), vec4(0.25)));
        _1776 = 1.0 - (_1769 * cbSceneParam._m0[34u].x);
        _1777 = 1.0 - (_1769 * cbSceneParam._m0[34u].y);
        _1778 = 1.0 - (_1769 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1776 = 1.0;
        _1777 = 1.0;
        _1778 = 1.0;
    }
    float _1842;
    float _1844;
    float _1846;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1830 = fma(_1626, cbSceneParam._m0[63u].w, fma(_1622, cbSceneParam._m0[63u].z, fma(_1618, cbSceneParam._m0[63u].y, _1614 * cbSceneParam._m0[63u].x)));
        float _1831 = fma(_1626, cbSceneParam._m0[60u].w, fma(_1622, cbSceneParam._m0[60u].z, fma(_1618, cbSceneParam._m0[60u].y, _1614 * cbSceneParam._m0[60u].x))) / _1830;
        float _1832 = fma(_1626, cbSceneParam._m0[61u].w, fma(_1622, cbSceneParam._m0[61u].z, fma(_1618, cbSceneParam._m0[61u].y, _1614 * cbSceneParam._m0[61u].x))) / _1830;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1831 >= cbSceneParam._m0[64u].x) && (_1832 >= cbSceneParam._m0[64u].y)) && (_1831 <= cbSceneParam._m0[64u].z)) && (_1832 <= cbSceneParam._m0[64u].w))
        {
            float _1970 = fma(_1626, cbSceneParam._m0[62u].w, fma(_1622, cbSceneParam._m0[62u].z, fma(_1618, cbSceneParam._m0[62u].y, _1614 * cbSceneParam._m0[62u].x))) / _1830;
            float _1974 = isnan(cbSceneParam._m0[41u].w) ? _1970 : (isnan(_1970) ? cbSceneParam._m0[41u].w : max(_1970, cbSceneParam._m0[41u].w));
            float _2017 = (cbSceneParam._m0[33u].x - sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629))) * cbSceneParam._m0[33u].y;
            float _4014 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
            float _2024 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1831, cbSceneParam._m0[33u].w + _1832), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1831, _1832 - cbSceneParam._m0[33u].z), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1831 - cbSceneParam._m0[33u].z, _1832 - cbSceneParam._m0[33u].w), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1831 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1832), _1974), 0.0)).x), vec4(0.25)));
            float _2028 = 1.0 - (_2024 * cbSceneParam._m0[34u].x);
            float _2029 = 1.0 - (_2024 * cbSceneParam._m0[34u].y);
            float _2030 = 1.0 - (_2024 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2029) ? _1777 : (isnan(_1777) ? _2029 : min(_1777, _2029));
            frontier_phi_36_35_ladder_1 = isnan(_2030) ? _1778 : (isnan(_1778) ? _2030 : min(_1778, _2030));
            frontier_phi_36_35_ladder_2 = isnan(_2028) ? _1776 : (isnan(_1776) ? _2028 : min(_1776, _2028));
        }
        else
        {
            frontier_phi_36_35_ladder = _1777;
            frontier_phi_36_35_ladder_1 = _1778;
            frontier_phi_36_35_ladder_2 = _1776;
        }
        _1842 = frontier_phi_36_35_ladder_2;
        _1844 = frontier_phi_36_35_ladder;
        _1846 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1842 = _1776;
        _1844 = _1777;
        _1846 = _1778;
    }
    uvec4 _1851 = floatBitsToUint(cbInstanceData._m0[_523 + 5u]);
    uint _1853 = _1851.x * 14u;
    uint _1854 = _1853 + 13u;
    float _1861 = _549 + (-1.0);
    float _1866 = (cbLight._m0[_1854].x * _1861) + 1.0;
    float _1867 = (cbLight._m0[_1854].y * _1861) + 1.0;
    float _1868 = (cbLight._m0[_1854].z * _1861) + 1.0;
    float _1869 = (cbLight._m0[_1854].w * _1861) + 1.0;
    uint _1870 = _1853 + 5u;
    float _1876 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1880 = _1853 + 4u;
    float _1889 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1893 = _1853 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_393, _394, _395));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_393, _394, _395));
    float _4050 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4061 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1870].x * _1876) * _1914) + (((cbLight._m0[_1880].x * _1842) * _1889) * _1912);
    float _1922 = ((_1876 * cbLight._m0[_1870].y) * _1914) + (((cbLight._m0[_1880].y * _1844) * _1889) * _1912);
    float _1923 = ((_1876 * cbLight._m0[_1870].z) * _1914) + (((cbLight._m0[_1880].z * _1846) * _1889) * _1912);
    uvec4 _1927 = floatBitsToUint(cbLight._m0[_1853 + 12u]);
    bool _1929 = _1927.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1929)
    {
        _2031 = _1921;
        _2033 = _1922;
        _2035 = _1923;
    }
    else
    {
        uint _2039 = _1853 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1853 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4072 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2058 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _1921;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _1922;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _1923;
    }
    bool _2038 = _1927.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2038)
    {
        _2093 = _2031;
        _2095 = _2033;
        _2097 = _2035;
    }
    else
    {
        uint _2255 = _1853 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1853 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4088 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2274 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2093 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2031;
        _2095 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2033;
        _2097 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2035;
    }
    uint _2100 = _1853 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _396) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1853].x + _474;
    float _2116 = cbLight._m0[_1853].y + _475;
    float _2117 = cbLight._m0[_1853].z + _476;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1853].xyz));
    float _4104 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2129 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2130 = dot(vec3(_393, _394, _395), vec3(_2122, _2123, _2124));
    float _4126 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2122, _2123, _2124));
    float _4137 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2154 = 1.0 - _2114;
    float _2165 = (0.5 / (((_2129 * ((_2128 * _2154) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2154) + _2114) * _2128))) * _2128;
    float _4148 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2181 = _1853 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _396) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1893].x + _474;
    float _2195 = cbLight._m0[_1893].y + _475;
    float _2196 = cbLight._m0[_1893].z + _476;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1893].xyz));
    float _4159 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2208 = dot(vec3(_393, _394, _395), vec3(_2201, _2202, _2203));
    float _4170 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2201, _2202, _2203));
    float _4181 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2193;
    float _2240 = (0.5 / (((_2129 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2230) + _2193) * _2207))) * _2207;
    float _4192 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2252 = (((_2229 * cbLight._m0[_2181].x) * _2242) * _1876) + ((((cbLight._m0[_2100].x * _1842) * _2153) * _2167) * _1889);
    float _2253 = (((_2229 * cbLight._m0[_2181].y) * _2242) * _1876) + ((((cbLight._m0[_2100].y * _1844) * _2153) * _2167) * _1889);
    float _2254 = (((_2229 * cbLight._m0[_2181].z) * _2242) * _1876) + ((((cbLight._m0[_2100].z * _1846) * _2153) * _2167) * _1889);
    float _2310;
    float _2312;
    float _2314;
    if (_1929)
    {
        _2310 = _2252;
        _2312 = _2253;
        _2314 = _2254;
    }
    else
    {
        uint _2316 = _1853 + 2u;
        uint _2320 = _1853 + 10u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _396) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _474;
        float _2337 = cbLight._m0[_2316].y + _475;
        float _2338 = cbLight._m0[_2316].z + _476;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2316].xyz));
        float _4203 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2350 = dot(vec3(_393, _394, _395), vec3(_2343, _2344, _2345));
        float _4214 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4225 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2371 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2372 = 1.0 - _2335;
        float _2382 = (0.5 / (((_2129 * ((_2349 * _2372) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2372) + _2335) * _2349))) * _2349;
        float _4236 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2384 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2385 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2310 = (((_2371 * cbLight._m0[_2320].x) * _2384) * _2385) + _2252;
        _2312 = (((_2371 * cbLight._m0[_2320].y) * _2384) * _2385) + _2253;
        _2314 = (((_2371 * cbLight._m0[_2320].z) * _2384) * _2385) + _2254;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2038)
    {
        _2416 = _2310;
        _2418 = _2312;
        _2420 = _2314;
    }
    else
    {
        uint _2427 = _1853 + 3u;
        uint _2431 = _1853 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _396) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _474;
        float _2448 = cbLight._m0[_2427].y + _475;
        float _2449 = cbLight._m0[_2427].z + _476;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2427].xyz));
        float _4252 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2461 = dot(vec3(_393, _394, _395), vec3(_2454, _2455, _2456));
        float _4263 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4274 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2129 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2483) + _2446) * _2460))) * _2460;
        float _4285 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2416 = (((_2482 * cbLight._m0[_2431].x) * _2495) * _2496) + _2310;
        _2418 = (((_2482 * cbLight._m0[_2431].y) * _2495) * _2496) + _2312;
        _2420 = (((_2482 * cbLight._m0[_2431].z) * _2495) * _2496) + _2314;
    }
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_1851.y == 0u)
    {
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _483) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _482) / _2518)));
        float _2539 = (log2(_1629 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2788)
                {
                    frontier_phi_68_pred = _2777;
                    frontier_phi_68_pred_1 = _2776;
                    frontier_phi_68_pred_2 = _2775;
                    frontier_phi_68_pred_3 = _2773;
                    frontier_phi_68_pred_4 = _2772;
                    frontier_phi_68_pred_5 = _2774;
                }
                else
                {
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    uint _2902;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2787;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2906 = uint(findLSB(_2902)) + (_2778 << 5u);
                        uint _2903 = (_2902 + 4294967295u) & _2902;
                        uint _2908 = _2906 * 48u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2928 = (_2906 * 48u) + 4u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2947 = (_2906 * 48u) + 8u;
                        vec3 _2958 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x));
                        float _2962 = _2922.x - _1627;
                        float _2963 = _2922.y - _1628;
                        float _2964 = _2922.z - _1629;
                        float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                        float _2968 = inversesqrt(_2965);
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2972 = dot(vec3(_504, _507, _510), vec3(_2969, _2970, _2971));
                        float _2977 = 1.0 - (_2965 * _2922.w);
                        float _4311 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _2979 = sqrt(_2965) * _2941.w;
                        float _2982 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2972) + _2983;
                        float _2989 = _2979 * _2979;
                        float _2993 = ((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2978) / ((_2989 * 0.699999988079071044921875) + 1.0);
                        float _2997 = (-0.0) - _1627;
                        float _2998 = (-0.0) - _1628;
                        float _2999 = (-0.0) - _1629;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3013 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _565;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3004 + _2969;
                        float _3025 = _3005 + _2970;
                        float _3026 = _3006 + _2971;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_504, _507, _510), vec3(_3004, _3005, _3006));
                        float _4327 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3038 = dot(vec3(_504, _507, _510), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _4338 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = _2982 * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _2972) + _3047;
                        float _4349 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _4360 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3045 * _3045) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125))) * _2978;
                        _2831 = (_2993 * _2941.x) + _2899;
                        _2832 = (_2993 * _2941.y) + _2900;
                        _2833 = (_2993 * _2941.z) + _2901;
                        _2828 = (_3073 * _2958.x) + _2896;
                        _2829 = (_3073 * _2958.y) + _2897;
                        _2830 = (_3073 * _2958.z) + _2898;
                        if (_2903 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2903;
                        }
                    }
                    frontier_phi_68_pred = _2833;
                    frontier_phi_68_pred_1 = _2832;
                    frontier_phi_68_pred_2 = _2831;
                    frontier_phi_68_pred_3 = _2829;
                    frontier_phi_68_pred_4 = _2828;
                    frontier_phi_68_pred_5 = _2830;
                }
                _2639 = frontier_phi_68_pred;
                _2637 = frontier_phi_68_pred_1;
                _2635 = frontier_phi_68_pred_2;
                _2631 = frontier_phi_68_pred_3;
                _2629 = frontier_phi_68_pred_4;
                _2633 = frontier_phi_68_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2629;
                    _2773 = _2631;
                    _2774 = _2633;
                    _2775 = _2635;
                    _2776 = _2637;
                    _2777 = _2639;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2645) & _2549) == 0u)
        {
            _2740 = _2628;
            _2742 = _2630;
            _2744 = _2632;
            _2746 = _2634;
            _2748 = _2636;
            _2750 = _2638;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
            float _2766 = _2765 * _1627;
            float _2767 = _2765 * _1628;
            float _2768 = _2765 * _1629;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2879 = _2628;
                float _2880 = _2630;
                float _2881 = _2632;
                float _2882 = _2634;
                float _2883 = _2636;
                float _2884 = _2638;
                uint _2885 = _2645;
                uint _2894;
                bool _2895;
                for (;;)
                {
                    _2894 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                    _2895 = _2894 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2895)
                    {
                        frontier_phi_74_pred = _2881;
                        frontier_phi_74_pred_1 = _2880;
                        frontier_phi_74_pred_2 = _2879;
                        frontier_phi_74_pred_3 = _2884;
                        frontier_phi_74_pred_4 = _2883;
                        frontier_phi_74_pred_5 = _2882;
                    }
                    else
                    {
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3091 = _2879;
                        float _3092 = _2880;
                        float _3093 = _2881;
                        float _3094 = _2882;
                        float _3095 = _2883;
                        float _3096 = _2884;
                        uint _3097 = _2894;
                        uint _3098;
                        vec4 _3123;
                        float _3124;
                        vec4 _3139;
                        vec3 _3151;
                        vec4 _3167;
                        vec4 _3183;
                        float _3230;
                        bool _3231;
                        for (;;)
                        {
                            uint _3108 = ((_2885 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3097));
                            _3098 = (_3097 + 4294967295u) & _3097;
                            uint _3110 = _3108 * 40u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3124 = _3123.w;
                            uint _3126 = (_3108 * 40u) + 4u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3108 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3154 = (_3108 * 40u) + 16u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3170 = (_3108 * 40u) + 20u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3186 = (_3108 * 40u) + 24u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3205 = (_3108 * 40u) + 28u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3230 = fma(_1629, _3218.z, fma(_1628, _3218.y, _3218.x * _1627)) + _3218.w;
                            _3231 = !((fma(_1629, _3199.z, fma(_1628, _3199.y, _3199.x * _1627)) + _3199.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3231)
                            {
                                float _3258 = _3123.x - _1627;
                                float _3259 = _3123.y - _1628;
                                float _3260 = _3123.z - _1629;
                                float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                                float _3264 = inversesqrt(_3261);
                                float _3265 = _3264 * _3258;
                                float _3266 = _3264 * _3259;
                                float _3267 = _3264 * _3260;
                                float _3271 = 1.0 - (_3261 / (_3124 * _3124));
                                float _4371 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3276 = sqrt(_3261) * _3139.w;
                                float _3278 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                                float _3279 = _3278 * _3278;
                                float _3282 = ((1.0 - _3279) * dot(vec3(_3265, _3266, _3267), vec3(_504, _507, _510))) + _3279;
                                float _3285 = _3276 * _3276;
                                float _3289 = (fma(_1629, _3167.z, fma(_1628, _3167.y, _3167.x * _1627)) + _3167.w) / _3230;
                                float _3290 = (fma(_1629, _3183.z, fma(_1628, _3183.y, _3183.x * _1627)) + _3183.w) / _3230;
                                float _3294 = 1.0 - dot(vec2(_3289, _3290), vec2(_3289, _3290));
                                float _4387 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3296 = _3295 * (((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3272) / ((_3285 * 0.699999988079071044921875) + 1.0));
                                float _3308 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                                float _3309 = 1.0 - _565;
                                float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                                float _3317 = _3316 * _3316;
                                float _3318 = _3317 * _3317;
                                float _3319 = _3265 - _2766;
                                float _3320 = _3266 - _2767;
                                float _3321 = _3267 - _2768;
                                float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                                float _3329 = dot(vec3(_504, _507, _510), vec3((-0.0) - _2766, (-0.0) - _2767, (-0.0) - _2768));
                                float _4398 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3333 = dot(vec3(_504, _507, _510), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                                float _4409 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                                float _3341 = _3278 * _3317;
                                float _3342 = _3341 * _3341;
                                float _3348 = ((1.0 - _3342) * dot(vec3(_504, _507, _510), vec3(_3265, _3266, _3267))) + _3342;
                                float _4420 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3350 = 1.0 - _3317;
                                float _3360 = (0.5 / (((_3349 * ((_3332 * _3350) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3317) * _3332))) * _3349;
                                float _4431 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3370 = (_3295 * _3272) * (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) / ((_3340 * _3340) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3370 * _3151.z;
                                frontier_phi_80_pred_1 = _3370 * _3151.y;
                                frontier_phi_80_pred_2 = _3370 * _3151.x;
                                frontier_phi_80_pred_3 = _3296 * _3139.z;
                                frontier_phi_80_pred_4 = _3296 * _3139.y;
                                frontier_phi_80_pred_5 = _3296 * _3139.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_80_pred;
                            _3375 = frontier_phi_80_pred_1;
                            _3374 = frontier_phi_80_pred_2;
                            _3379 = frontier_phi_80_pred_3;
                            _3378 = frontier_phi_80_pred_4;
                            _3377 = frontier_phi_80_pred_5;
                            _3081 = _3377 + _3094;
                            _3082 = _3378 + _3095;
                            _3083 = _3379 + _3096;
                            _3078 = _3374 + _3091;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            if (_3098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3098;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3080;
                        frontier_phi_74_pred_1 = _3079;
                        frontier_phi_74_pred_2 = _3078;
                        frontier_phi_74_pred_3 = _3083;
                        frontier_phi_74_pred_4 = _3082;
                        frontier_phi_74_pred_5 = _3081;
                    }
                    _2745 = frontier_phi_74_pred;
                    _2743 = frontier_phi_74_pred_1;
                    _2741 = frontier_phi_74_pred_2;
                    _2751 = frontier_phi_74_pred_3;
                    _2749 = frontier_phi_74_pred_4;
                    _2747 = frontier_phi_74_pred_5;
                    uint _2886 = _2885 + 1u;
                    if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2879 = _2741;
                        _2880 = _2743;
                        _2881 = _2745;
                        _2882 = _2747;
                        _2883 = _2749;
                        _2884 = _2751;
                        _2885 = _2886;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2749;
                frontier_phi_62_63_ladder_1 = _2747;
                frontier_phi_62_63_ladder_2 = _2745;
                frontier_phi_62_63_ladder_3 = _2751;
                frontier_phi_62_63_ladder_4 = _2743;
                frontier_phi_62_63_ladder_5 = _2741;
            }
            else
            {
                frontier_phi_62_63_ladder = _2636;
                frontier_phi_62_63_ladder_1 = _2634;
                frontier_phi_62_63_ladder_2 = _2632;
                frontier_phi_62_63_ladder_3 = _2638;
                frontier_phi_62_63_ladder_4 = _2630;
                frontier_phi_62_63_ladder_5 = _2628;
            }
            _2740 = frontier_phi_62_63_ladder_5;
            _2742 = frontier_phi_62_63_ladder_4;
            _2744 = frontier_phi_62_63_ladder_2;
            _2746 = frontier_phi_62_63_ladder_1;
            _2748 = frontier_phi_62_63_ladder;
            _2750 = frontier_phi_62_63_ladder_3;
        }
        float _2755 = isnan(1.0) ? _549 : (isnan(_549) ? 1.0 : min(_549, 1.0));
        _2561 = (_2755 * _2746) + _2093;
        _2563 = (_2755 * _2748) + _2095;
        _2565 = (_2755 * _2750) + _2097;
        _2567 = ((_2740 * 0.039999999105930328369140625) * _2755) + _2416;
        _2569 = ((_2742 * 0.039999999105930328369140625) * _2755) + _2418;
        _2571 = ((_2744 * 0.039999999105930328369140625) * _2755) + _2420;
    }
    else
    {
        _2561 = _2093;
        _2563 = _2095;
        _2565 = _2097;
        _2567 = _2416;
        _2569 = _2418;
        _2571 = _2420;
    }
    float _4447 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4458 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4469 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    uint _2591 = _523 + 6u;
    float _2599 = _482 / cbSceneParam._m0[86u].x;
    float _2600 = _483 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2654 = _2653 / _415;
        float _2665 = _2654 * _467;
        float _2666 = _468 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2668 = _2654 * _469;
        float _2670 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2671 = _2670 + cbSceneParam._m0[79u].w;
        float _2672 = cbSceneParam._m0[79u].w - _2666;
        float _2678 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2668 * _2668));
        float _2681 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2678;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2688 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2667 - _2670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2671 > 0.0) ? exp2(_2686 * _2671) : (2.0 - exp2(_2688 * _2671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2681;
        }
        else
        {
            float _2801 = 1.0 / cbSceneParam._m0[80u].x;
            float _2802 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : max(_2671, _2672));
            float _2803 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : min(_2671, _2672));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            _2841 = ((abs(_2678 / _2667) * cbSceneParam._m0[80u].y) * ((((_2812 - _2813) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))))) * _2801)) - ((exp2(_2688 * _2812) - exp2(_2688 * _2813)) * _2801))) + (_2681 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2619);
        _2690 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2692 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2694 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2696 = _2852 * _2619;
    }
    else
    {
        _2690 = _2616;
        _2692 = _2617;
        _2694 = _2618;
        _2696 = _2619;
    }
    float _2708 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2709 = _2708 == 3.0;
    float _2710 = log2(_2696);
    float _2717 = exp2(_2710 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2561 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _549))) + ((_2567 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2718 = exp2(_2710 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2563 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _549))) + ((_2569 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2719 = exp2(_2710 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2565 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _549))) + ((_2571 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2728 = (_2708 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2728 * (_2709 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.y = _2728 * (_2709 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.z = _2728 * (_2709 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.w = cbInstanceData._m0[_2591].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
}


