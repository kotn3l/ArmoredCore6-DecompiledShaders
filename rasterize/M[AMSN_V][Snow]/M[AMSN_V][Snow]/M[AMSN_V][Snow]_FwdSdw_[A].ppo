#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _966;
float _3618;
float _3619;
float _3620;
float _3621;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _242.z;
    float _251 = (_242.x * 2.0) + (-1.0);
    float _253 = (_242.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3630 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))));
    float _263 = fma(_260, _221, fma(_253, _214, _251 * _200));
    float _266 = fma(_260, _222, fma(_253, _215, _251 * _201));
    float _269 = fma(_260, _223, fma(_253, _216, _251 * _202));
    float _278 = exp2(log2(inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269))) * _266) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3641 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    vec4 _291 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _307 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = _307.x;
    float _310 = _307.y;
    float _311 = _307.z;
    float _318 = ((_291.x - _309) * _279) + _309;
    float _319 = ((_291.y - _310) * _279) + _310;
    float _320 = ((_291.z - _311) * _279) + _311;
    vec4 _332 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _339 = (_332.x * 2.0) + (-1.0);
    float _340 = (_332.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_339, _340), vec2(_339, _340));
    float _3652 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _349 = ((_332.z - _247) * _279) + _247;
    float _358 = ((sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) - _260) * _279) + _260;
    vec4 _372 = texture(sampler2D(M_AMSN_V_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _382 = (((_339 - _251) * _279) + _251) + (((_372.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _383 = (((_340 - _253) * _279) + _253) + (((_372.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _386 = fma(_358, _221, fma(_383, _214, _382 * _200));
    float _389 = fma(_358, _222, fma(_383, _215, _382 * _201));
    float _392 = fma(_358, _223, fma(_383, _216, _382 * _202));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _3663 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _400 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3685 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3696 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _471 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _461);
    float _472 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _461);
    float _473 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _461);
    float _477 = inversesqrt(dot(vec3(_471, _472, _473), vec3(_471, _472, _473)));
    float _478 = _471 * _477;
    float _479 = _472 * _477;
    float _480 = _473 * _477;
    vec4 _485 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _487 = _485.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _645 = sqrt(((_471 * _471) + (_472 * _472)) + (_473 * _473));
        float _651 = (cbMatDynParam._m0[5u].x * _645) + cbMatDynParam._m0[5u].y;
        float _3707 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _652 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _656 = (cbMatDynParam._m0[5u].z * _645) + cbMatDynParam._m0[5u].w;
        float _3718 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) - _652)) + _652) < ((_487 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _499 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _500 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _520 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _523 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _526 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _539 = uint(roundEven(NORMAL.w)) * 13u;
    uint _541 = _539 + 9u;
    uint _542 = _541 + uint(cbMatDynParam._m0[0u].w);
    float _548 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_542].x;
    float _549 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_542].y;
    float _550 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_542].z;
    float _3729 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    vec4 _562 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _499, cbSceneParam._m0[86u].y * _500));
    float _565 = _562.x * TEXCOORD.z;
    float _566 = dot(vec3(_397, _398, _399), vec3(_478, _479, _480));
    float _569 = _566 * 2.0;
    float _573 = (_569 * _397) - _478;
    float _574 = (_569 * _398) - _479;
    float _575 = (_569 * _399) - _480;
    float _579 = abs(dot(vec3(_478, _479, _480), vec3(_397, _398, _399)));
    float _3762 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(_400);
    float _594 = exp2((_581 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_581 * 3.0));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = fma(_634, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626));
        float _694 = fma(_634, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626));
        float _698 = fma(_634, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626));
        float _723 = _626 + _397;
        float _724 = _630 + _398;
        float _725 = _634 + _399;
        float _735 = fma(_725, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723)) - _690;
        float _736 = fma(_725, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723)) - _694;
        float _737 = fma(_725, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723)) - _698;
        float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
        float _754 = ((_741 * _735) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_690 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_741 * _736) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_694 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_741 * _737) / cbModelParam._m0[34u].z) + ((((((_698 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(_397, _398, _399), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3810 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_397, _398, _399), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3843 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_397, _398, _399), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3876 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1009 = fma(_634, cbModelParam._m0[30u].z, fma(_630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _626));
        float _1013 = fma(_634, cbModelParam._m0[31u].z, fma(_630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _626));
        float _1017 = fma(_634, cbModelParam._m0[32u].z, fma(_630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _626));
        float _1040 = _626 + _397;
        float _1041 = _630 + _398;
        float _1042 = _634 + _399;
        float _1052 = fma(_1042, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1009 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1013 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[35u].z) + ((((((_1017 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1108 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1075.x + (-0.5));
        float _1110 = _1108 * (_1075.y + (-0.5));
        float _1111 = _1108 * (_1075.z + (-0.5));
        float _1118 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1082.x + (-0.5));
        float _1120 = _1118 * (_1082.y + (-0.5));
        float _1121 = _1118 * (_1082.z + (-0.5));
        float _1128 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1089.x + (-0.5));
        float _1130 = _1128 * (_1089.y + (-0.5));
        float _1131 = _1128 * (_1089.z + (-0.5));
        float _1138 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1096.x + (-0.5));
        float _1140 = _1138 * (_1096.y + (-0.5));
        float _1141 = _1138 * (_1096.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_397, _398, _399), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3939 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1172 + 1.0))) + _1177) * _1142;
        float _1187 = _1110 * 0.5;
        float _1188 = _1120 * 0.5;
        float _1189 = _1130 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_397, _398, _399), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3972 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1214 + 1.0))) + _1219) * _1143;
        float _1229 = _1111 * 0.5;
        float _1230 = _1121 * 0.5;
        float _1231 = _1131 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_397, _398, _399), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4005 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1256 + 1.0))) + _1261) * _1144;
        _1278 = _1111;
        _1279 = _1110;
        _1280 = _1109;
        _1281 = _1121;
        _1282 = _1120;
        _1283 = _1119;
        _1284 = _1131;
        _1285 = _1130;
        _1286 = _1129;
        _1287 = _1144;
        _1288 = _1143;
        _1289 = _1142;
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _966;
        _1279 = _966;
        _1280 = _966;
        _1281 = _966;
        _1282 = _966;
        _1283 = _966;
        _1284 = _966;
        _1285 = _966;
        _1286 = _966;
        _1287 = _966;
        _1288 = _966;
        _1289 = _966;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1325 = fma(_1304, cbSceneParam._m0[89u].z, fma(_1303, cbSceneParam._m0[89u].y, _1302 * cbSceneParam._m0[89u].x));
    float _1328 = fma(_1304, cbSceneParam._m0[90u].z, fma(_1303, cbSceneParam._m0[90u].y, _1302 * cbSceneParam._m0[90u].x));
    float _1331 = fma(_1304, cbSceneParam._m0[91u].z, fma(_1303, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1302));
    float _1346 = _573 * 0.5;
    float _1347 = _574 * 0.5;
    float _1348 = _575 * 0.5;
    float _1349 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1352 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1355 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1389;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1362 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_965, _969, _972, _975));
        float _1366 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_967, _970, _973, _976));
        float _1370 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_968, _971, _974, _977));
        float _1377 = dot(vec4(cbModelParam._m0[39u]), vec4(_1346, _1347, _1348, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1400;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1391 = dot(vec4(cbModelParam._m0[40u]), vec4(_1346, _1347, _1348, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1404 = (_1400 * cbModelParam._m0[1u].x) + (_1389 * (1.0 - cbModelParam._m0[1u].x));
    float _1414 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1414 : min(cbModelParam._m0[25u].z, _1414));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1464 = fma(_634, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626)) + cbModelParam._m0[13u].w;
        float _1468 = fma(_634, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626)) + cbModelParam._m0[14u].w;
        float _1472 = fma(_634, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626)) + cbModelParam._m0[15u].w;
        float _1475 = fma(_575, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573));
        float _1478 = fma(_575, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573));
        float _1481 = fma(_575, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573));
        float _1509;
        if (_1475 > 0.0)
        {
            _1509 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1509 = frontier_phi_19_17_ladder;
        }
        float _1683;
        if (_1478 > 0.0)
        {
            _1683 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1683 = frontier_phi_28_24_ladder;
        }
        float _1978;
        if (_1481 > 0.0)
        {
            _1978 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1978 = frontier_phi_40_35_ladder;
        }
        float _1980 = isnan(_1683) ? _1509 : (isnan(_1509) ? _1683 : min(_1509, _1683));
        float _1981 = isnan(_1978) ? _1980 : (isnan(_1980) ? _1978 : min(_1980, _1978));
        float _1985 = (_1981 * _1475) + _1464;
        float _1986 = (_1981 * _1478) + _1468;
        float _1987 = (_1981 * _1481) + _1472;
        float _1988 = _1981 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1988;
        float _1992 = _1988 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 > _1992) || ((_1986 < _1990) || ((_1985 < _1990) || (_1985 > _1992))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2132 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1987, cbModelParam._m0[9u].z, fma(_1986, cbModelParam._m0[9u].y, _1985 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1987, cbModelParam._m0[10u].z, fma(_1986, cbModelParam._m0[10u].y, _1985 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1987, cbModelParam._m0[11u].z, fma(_1986, cbModelParam._m0[11u].y, _1985 * cbModelParam._m0[11u].x))), _1415);
            frontier_phi_18_40_ladder = _2132.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2132.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2132.x * cbModelParam._m0[1u].y;
        }
        _1497 = frontier_phi_18_40_ladder_2;
        _1499 = frontier_phi_18_40_ladder_1;
        _1501 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_573, _574, _575), _1415);
        _1497 = _1485.x * cbModelParam._m0[1u].y;
        _1499 = _1485.y * cbModelParam._m0[1u].y;
        _1501 = _1485.z * cbModelParam._m0[1u].y;
    }
    float _1505 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1505 : min(cbModelParam._m0[25u].w, _1505));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_634, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_634, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_634, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_575, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573));
        float _1577 = fma(_575, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573));
        float _1580 = fma(_575, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573));
        float _1688;
        if (_1574 > 0.0)
        {
            _1688 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1688 = frontier_phi_30_26_ladder;
        }
        float _2005;
        if (_1577 > 0.0)
        {
            _2005 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2005 = frontier_phi_42_37_ladder;
        }
        float _2332;
        if (_1580 > 0.0)
        {
            _2332 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2332 = frontier_phi_52_49_ladder;
        }
        float _2334 = isnan(_2005) ? _1688 : (isnan(_1688) ? _2005 : min(_1688, _2005));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1574) + _1563;
        float _2340 = (_2335 * _1577) + _1567;
        float _2341 = (_2335 * _1580) + _1571;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1506);
            frontier_phi_27_52_ladder = _2459.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2459.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2459.x * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_27_52_ladder_2;
        _1601 = frontier_phi_27_52_ladder_1;
        _1603 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_573, _574, _575), _1506);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1615 = ((((1.0 - _594) * ((_581 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_594 * _581)) * _565;
    float _1616 = _1615 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1617 = _1615 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1618 = _1615 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1621 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1616 * cbSceneParam._m0[91u].x));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1670 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1675 = _1662 / _1674;
    float _1676 = _1666 / _1674;
    float _1677 = _1670 / _1674;
    float _1824;
    float _1825;
    float _1826;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1704 = ((uint(_1677 > cbSceneParam._m0[59u].y) + uint(_1677 > cbSceneParam._m0[59u].x)) + uint(_1677 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1705 = _1704 + 43u;
        uint _1713 = _1704 + 44u;
        uint _1721 = _1704 + 45u;
        uint _1729 = _1704 + 46u;
        float _1740 = fma(_1674, cbSceneParam._m0[_1705].w, fma(_1670, cbSceneParam._m0[_1705].z, fma(_1666, cbSceneParam._m0[_1705].y, _1662 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1674, cbSceneParam._m0[_1713].w, fma(_1670, cbSceneParam._m0[_1713].z, fma(_1666, cbSceneParam._m0[_1713].y, _1662 * cbSceneParam._m0[_1713].x)));
        float _1752 = fma(_1674, cbSceneParam._m0[_1729].w, fma(_1670, cbSceneParam._m0[_1729].z, fma(_1666, cbSceneParam._m0[_1729].y, _1662 * cbSceneParam._m0[_1729].x)));
        float _1757 = cbSceneParam._m0[33u].z * _1752;
        float _1759 = cbSceneParam._m0[33u].w * _1752;
        float _1762 = fma(_1674, cbSceneParam._m0[_1721].w, fma(_1670, cbSceneParam._m0[_1721].z, fma(_1666, cbSceneParam._m0[_1721].y, _1662 * cbSceneParam._m0[_1721].x))) / _1752;
        float _1810 = (cbSceneParam._m0[33u].x - sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677))) * cbSceneParam._m0[33u].y;
        float _4131 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1817 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 + _1740) / _1752, (_1759 + _1744) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1759 + _1740) / _1752, (_1744 - _1757) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 - _1757) / _1752, (_1744 - _1759) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 - _1759) / _1752, (_1757 + _1744) / _1752), _1762), 0.0)).x), vec4(0.25)));
        _1824 = 1.0 - (_1817 * cbSceneParam._m0[34u].x);
        _1825 = 1.0 - (_1817 * cbSceneParam._m0[34u].y);
        _1826 = 1.0 - (_1817 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1824 = 1.0;
        _1825 = 1.0;
        _1826 = 1.0;
    }
    float _1890;
    float _1892;
    float _1894;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1878 = fma(_1674, cbSceneParam._m0[63u].w, fma(_1670, cbSceneParam._m0[63u].z, fma(_1666, cbSceneParam._m0[63u].y, _1662 * cbSceneParam._m0[63u].x)));
        float _1879 = fma(_1674, cbSceneParam._m0[60u].w, fma(_1670, cbSceneParam._m0[60u].z, fma(_1666, cbSceneParam._m0[60u].y, _1662 * cbSceneParam._m0[60u].x))) / _1878;
        float _1880 = fma(_1674, cbSceneParam._m0[61u].w, fma(_1670, cbSceneParam._m0[61u].z, fma(_1666, cbSceneParam._m0[61u].y, _1662 * cbSceneParam._m0[61u].x))) / _1878;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1879 >= cbSceneParam._m0[64u].x) && (_1880 >= cbSceneParam._m0[64u].y)) && (_1879 <= cbSceneParam._m0[64u].z)) && (_1880 <= cbSceneParam._m0[64u].w))
        {
            float _2018 = fma(_1674, cbSceneParam._m0[62u].w, fma(_1670, cbSceneParam._m0[62u].z, fma(_1666, cbSceneParam._m0[62u].y, _1662 * cbSceneParam._m0[62u].x))) / _1878;
            float _2022 = isnan(cbSceneParam._m0[41u].w) ? _2018 : (isnan(_2018) ? cbSceneParam._m0[41u].w : max(_2018, cbSceneParam._m0[41u].w));
            float _2065 = (cbSceneParam._m0[33u].x - sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677))) * cbSceneParam._m0[33u].y;
            float _4147 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
            float _2072 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1879, cbSceneParam._m0[33u].w + _1880), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1879, _1880 - cbSceneParam._m0[33u].z), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1879 - cbSceneParam._m0[33u].z, _1880 - cbSceneParam._m0[33u].w), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1879 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1880), _2022), 0.0)).x), vec4(0.25)));
            float _2076 = 1.0 - (_2072 * cbSceneParam._m0[34u].x);
            float _2077 = 1.0 - (_2072 * cbSceneParam._m0[34u].y);
            float _2078 = 1.0 - (_2072 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2077) ? _1825 : (isnan(_1825) ? _2077 : min(_1825, _2077));
            frontier_phi_39_38_ladder_1 = isnan(_2076) ? _1824 : (isnan(_1824) ? _2076 : min(_1824, _2076));
            frontier_phi_39_38_ladder_2 = isnan(_2078) ? _1826 : (isnan(_1826) ? _2078 : min(_1826, _2078));
        }
        else
        {
            frontier_phi_39_38_ladder = _1825;
            frontier_phi_39_38_ladder_1 = _1824;
            frontier_phi_39_38_ladder_2 = _1826;
        }
        _1890 = frontier_phi_39_38_ladder_1;
        _1892 = frontier_phi_39_38_ladder;
        _1894 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1890 = _1824;
        _1892 = _1825;
        _1894 = _1826;
    }
    uvec4 _1899 = floatBitsToUint(cbInstanceData._m0[_539 + 5u]);
    uint _1901 = _1899.x * 14u;
    uint _1902 = _1901 + 13u;
    float _1909 = _565 + (-1.0);
    float _1914 = (cbLight._m0[_1902].x * _1909) + 1.0;
    float _1915 = (cbLight._m0[_1902].y * _1909) + 1.0;
    float _1916 = (cbLight._m0[_1902].z * _1909) + 1.0;
    float _1917 = (cbLight._m0[_1902].w * _1909) + 1.0;
    uint _1918 = _1901 + 5u;
    float _1924 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1928 = _1901 + 4u;
    float _1937 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1941 = _1901 | 1u;
    float _1952 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_397, _398, _399));
    float _1955 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_397, _398, _399));
    float _4183 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _4194 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1960 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.3183098733425140380859375;
    float _1962 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _1969 = ((cbLight._m0[_1918].x * _1924) * _1962) + (((cbLight._m0[_1928].x * _1890) * _1937) * _1960);
    float _1970 = ((_1924 * cbLight._m0[_1918].y) * _1962) + (((cbLight._m0[_1928].y * _1892) * _1937) * _1960);
    float _1971 = ((_1924 * cbLight._m0[_1918].z) * _1962) + (((cbLight._m0[_1928].z * _1894) * _1937) * _1960);
    uvec4 _1975 = floatBitsToUint(cbLight._m0[_1901 + 12u]);
    bool _1977 = _1975.x == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_1977)
    {
        _2079 = _1969;
        _2081 = _1970;
        _2083 = _1971;
    }
    else
    {
        uint _2087 = _1901 + 6u;
        float _2103 = (dot(vec3(cbLight._m0[_1901 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2104 = _2103 * _2103;
        float _4205 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2106 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2079 = (((cbLight._m0[_2087].x * 0.3183098733425140380859375) * _2105) * _2106) + _1969;
        _2081 = (((cbLight._m0[_2087].y * 0.3183098733425140380859375) * _2105) * _2106) + _1970;
        _2083 = (((cbLight._m0[_2087].z * 0.3183098733425140380859375) * _2105) * _2106) + _1971;
    }
    bool _2086 = _1975.y == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2086)
    {
        _2141 = _2079;
        _2143 = _2081;
        _2145 = _2083;
    }
    else
    {
        uint _2303 = _1901 + 7u;
        float _2319 = (dot(vec3(cbLight._m0[_1901 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4221 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2322 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2141 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2079;
        _2143 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2081;
        _2145 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2083;
    }
    uint _2148 = _1901 + 8u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _400) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_1901].x + _478;
    float _2164 = cbLight._m0[_1901].y + _479;
    float _2165 = cbLight._m0[_1901].z + _480;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1901].xyz));
    float _4237 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2177 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2178 = dot(vec3(_397, _398, _399), vec3(_2170, _2171, _2172));
    float _4259 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2170, _2171, _2172));
    float _4270 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2162 * _2162;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2202 = 1.0 - _2162;
    float _2213 = (0.5 / (((_2177 * ((_2176 * _2202) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2202) + _2162) * _2176))) * _2176;
    float _4281 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    uint _2229 = _1901 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _400) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_1941].x + _478;
    float _2243 = cbLight._m0[_1941].y + _479;
    float _2244 = cbLight._m0[_1941].z + _480;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1941].xyz));
    float _4292 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2256 = dot(vec3(_397, _398, _399), vec3(_2249, _2250, _2251));
    float _4303 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2249, _2250, _2251));
    float _4314 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2241;
    float _2288 = (0.5 / (((_2177 * ((_2255 * _2278) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2278) + _2241) * _2255))) * _2255;
    float _4325 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2300 = (((_2277 * cbLight._m0[_2229].x) * _2290) * _1924) + ((((cbLight._m0[_2148].x * _1890) * _2201) * _2215) * _1937);
    float _2301 = (((_2277 * cbLight._m0[_2229].y) * _2290) * _1924) + ((((cbLight._m0[_2148].y * _1892) * _2201) * _2215) * _1937);
    float _2302 = (((_2277 * cbLight._m0[_2229].z) * _2290) * _1924) + ((((cbLight._m0[_2148].z * _1894) * _2201) * _2215) * _1937);
    float _2358;
    float _2360;
    float _2362;
    if (_1977)
    {
        _2358 = _2300;
        _2360 = _2301;
        _2362 = _2302;
    }
    else
    {
        uint _2364 = _1901 + 2u;
        uint _2368 = _1901 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _400) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _478;
        float _2385 = cbLight._m0[_2364].y + _479;
        float _2386 = cbLight._m0[_2364].z + _480;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2364].xyz));
        float _4336 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2398 = dot(vec3(_397, _398, _399), vec3(_2391, _2392, _2393));
        float _4347 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4358 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2420 = 1.0 - _2383;
        float _2430 = (0.5 / (((_2177 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2420) + _2383) * _2397))) * _2397;
        float _4369 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2358 = (((_2419 * cbLight._m0[_2368].x) * _2432) * _2433) + _2300;
        _2360 = (((_2419 * cbLight._m0[_2368].y) * _2432) * _2433) + _2301;
        _2362 = (((_2419 * cbLight._m0[_2368].z) * _2432) * _2433) + _2302;
    }
    float _2464;
    float _2466;
    float _2468;
    if (_2086)
    {
        _2464 = _2358;
        _2466 = _2360;
        _2468 = _2362;
    }
    else
    {
        uint _2475 = _1901 + 3u;
        uint _2479 = _1901 + 11u;
        float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _400) * 0.949999988079071044921875);
        float _2494 = _2493 * _2493;
        float _2495 = cbLight._m0[_2475].x + _478;
        float _2496 = cbLight._m0[_2475].y + _479;
        float _2497 = cbLight._m0[_2475].z + _480;
        float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
        float _2502 = _2501 * _2495;
        float _2503 = _2501 * _2496;
        float _2504 = _2501 * _2497;
        float _2505 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2475].xyz));
        float _4385 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2509 = dot(vec3(_397, _398, _399), vec3(_2502, _2503, _2504));
        float _4396 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2513 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2502, _2503, _2504));
        float _4407 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2517 = _2494 * _2494;
        float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
        float _2530 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2531 = 1.0 - _2494;
        float _2541 = (0.5 / (((_2177 * ((_2508 * _2531) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2531) + _2494) * _2508))) * _2508;
        float _4418 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2464 = (((_2530 * cbLight._m0[_2479].x) * _2543) * _2544) + _2358;
        _2466 = (((_2530 * cbLight._m0[_2479].y) * _2543) * _2544) + _2360;
        _2468 = (((_2530 * cbLight._m0[_2479].z) * _2543) * _2544) + _2362;
    }
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_1899.y == 0u)
    {
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _500) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _499) / _2566)));
        float _2587 = (log2(_1677 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
        }
        else
        {
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            uint _2834 = 0u;
            uint _2843;
            bool _2844;
            for (;;)
            {
                _2843 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                _2844 = _2843 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2844)
                {
                    frontier_phi_73_pred = _2833;
                    frontier_phi_73_pred_1 = _2832;
                    frontier_phi_73_pred_2 = _2831;
                    frontier_phi_73_pred_3 = _2830;
                    frontier_phi_73_pred_4 = _2829;
                    frontier_phi_73_pred_5 = _2828;
                }
                else
                {
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    uint _2979;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2843;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    for (;;)
                    {
                        uint _2983 = uint(findLSB(_2979)) + (_2834 << 5u);
                        uint _2980 = (_2979 + 4294967295u) & _2979;
                        uint _2985 = _2983 * 48u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 3u)).x));
                        uint _3005 = (_2983 * 48u) + 4u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3024 = (_2983 * 48u) + 8u;
                        vec3 _3035 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x));
                        float _3039 = _2999.x - _1675;
                        float _3040 = _2999.y - _1676;
                        float _3041 = _2999.z - _1677;
                        float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                        float _3045 = inversesqrt(_3042);
                        float _3046 = _3045 * _3039;
                        float _3047 = _3045 * _3040;
                        float _3048 = _3045 * _3041;
                        float _3049 = dot(vec3(_520, _523, _526), vec3(_3046, _3047, _3048));
                        float _3054 = 1.0 - (_3042 * _2999.w);
                        float _4444 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3056 = sqrt(_3042) * _3018.w;
                        float _3059 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _3049) + _3060;
                        float _3066 = _3056 * _3056;
                        float _3070 = ((isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))) * _3055) / ((_3066 * 0.699999988079071044921875) + 1.0);
                        float _3074 = (-0.0) - _1675;
                        float _3075 = (-0.0) - _1676;
                        float _3076 = (-0.0) - _1677;
                        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3090 = exp2(log2(1.0 / ((_3066 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _581;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3081 + _3046;
                        float _3102 = _3082 + _3047;
                        float _3103 = _3083 + _3048;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_520, _523, _526), vec3(_3081, _3082, _3083));
                        float _4460 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3115 = dot(vec3(_520, _523, _526), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4471 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3059 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3049) + _3124;
                        float _4482 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4493 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3122 * _3122) * ((_3066 * 2.1991131305694580078125) + 3.141590118408203125))) * _3055;
                        _2903 = (_3070 * _3018.x) + _2976;
                        _2904 = (_3070 * _3018.y) + _2977;
                        _2905 = (_3070 * _3018.z) + _2978;
                        _2900 = (_3150 * _3035.x) + _2973;
                        _2901 = (_3150 * _3035.y) + _2974;
                        _2902 = (_3150 * _3035.z) + _2975;
                        if (_2980 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2980;
                        }
                    }
                    frontier_phi_73_pred = _2905;
                    frontier_phi_73_pred_1 = _2904;
                    frontier_phi_73_pred_2 = _2903;
                    frontier_phi_73_pred_3 = _2902;
                    frontier_phi_73_pred_4 = _2901;
                    frontier_phi_73_pred_5 = _2900;
                }
                _2687 = frontier_phi_73_pred;
                _2685 = frontier_phi_73_pred_1;
                _2683 = frontier_phi_73_pred_2;
                _2681 = frontier_phi_73_pred_3;
                _2679 = frontier_phi_73_pred_4;
                _2677 = frontier_phi_73_pred_5;
                uint _2835 = _2834 + 1u;
                if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2828 = _2677;
                    _2829 = _2679;
                    _2830 = _2681;
                    _2831 = _2683;
                    _2832 = _2685;
                    _2833 = _2687;
                    _2834 = _2835;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
        }
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.z;
        uint _2693 = (_2691 >> 8u) & 15u;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((4294967295u << _2693) & _2597) == 0u)
        {
            _2796 = _2676;
            _2798 = _2678;
            _2800 = _2680;
            _2802 = _2682;
            _2804 = _2684;
            _2806 = _2686;
        }
        else
        {
            float _2821 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
            float _2822 = _2821 * _1675;
            float _2823 = _2821 * _1676;
            float _2824 = _2821 * _1677;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2693 < ((_2691 >> 12u) & 15u))
            {
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2956 = _2676;
                float _2957 = _2678;
                float _2958 = _2680;
                float _2959 = _2682;
                float _2960 = _2684;
                float _2961 = _2686;
                uint _2962 = _2693;
                uint _2971;
                bool _2972;
                for (;;)
                {
                    _2971 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                    _2972 = _2971 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2972)
                    {
                        frontier_phi_84_pred = _2960;
                        frontier_phi_84_pred_1 = _2959;
                        frontier_phi_84_pred_2 = _2958;
                        frontier_phi_84_pred_3 = _2957;
                        frontier_phi_84_pred_4 = _2956;
                        frontier_phi_84_pred_5 = _2961;
                    }
                    else
                    {
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3177 = _2956;
                        float _3178 = _2957;
                        float _3179 = _2958;
                        float _3180 = _2959;
                        float _3181 = _2960;
                        float _3182 = _2961;
                        uint _3183 = _2971;
                        uint _3184;
                        vec4 _3209;
                        float _3210;
                        vec4 _3225;
                        vec3 _3237;
                        vec4 _3253;
                        vec4 _3269;
                        float _3316;
                        bool _3317;
                        for (;;)
                        {
                            uint _3194 = ((_2962 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3183));
                            _3184 = (_3183 + 4294967295u) & _3183;
                            uint _3196 = _3194 * 40u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3210 = _3209.w;
                            uint _3212 = (_3194 * 40u) + 4u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3194 * 40u) + 8u;
                            _3237 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x));
                            uint _3240 = (_3194 * 40u) + 16u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3256 = (_3194 * 40u) + 20u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3272 = (_3194 * 40u) + 24u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3291 = (_3194 * 40u) + 28u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3316 = fma(_1677, _3304.z, fma(_1676, _3304.y, _3304.x * _1675)) + _3304.w;
                            _3317 = !((fma(_1677, _3285.z, fma(_1676, _3285.y, _3285.x * _1675)) + _3285.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3317)
                            {
                                float _3344 = _3209.x - _1675;
                                float _3345 = _3209.y - _1676;
                                float _3346 = _3209.z - _1677;
                                float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                                float _3350 = inversesqrt(_3347);
                                float _3351 = _3350 * _3344;
                                float _3352 = _3350 * _3345;
                                float _3353 = _3350 * _3346;
                                float _3357 = 1.0 - (_3347 / (_3210 * _3210));
                                float _4504 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3362 = sqrt(_3347) * _3225.w;
                                float _3364 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                                float _3365 = _3364 * _3364;
                                float _3368 = ((1.0 - _3365) * dot(vec3(_3351, _3352, _3353), vec3(_520, _523, _526))) + _3365;
                                float _3371 = _3362 * _3362;
                                float _3375 = (fma(_1677, _3253.z, fma(_1676, _3253.y, _3253.x * _1675)) + _3253.w) / _3316;
                                float _3376 = (fma(_1677, _3269.z, fma(_1676, _3269.y, _3269.x * _1675)) + _3269.w) / _3316;
                                float _3380 = 1.0 - dot(vec2(_3375, _3376), vec2(_3375, _3376));
                                float _4520 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3382 = _3381 * (((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3358) / ((_3371 * 0.699999988079071044921875) + 1.0));
                                float _3394 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                                float _3395 = 1.0 - _581;
                                float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                                float _3403 = _3402 * _3402;
                                float _3404 = _3403 * _3403;
                                float _3405 = _3351 - _2822;
                                float _3406 = _3352 - _2823;
                                float _3407 = _3353 - _2824;
                                float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                                float _3415 = dot(vec3(_520, _523, _526), vec3((-0.0) - _2822, (-0.0) - _2823, (-0.0) - _2824));
                                float _4531 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3419 = dot(vec3(_520, _523, _526), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                                float _4542 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                                float _3427 = _3364 * _3403;
                                float _3428 = _3427 * _3427;
                                float _3434 = ((1.0 - _3428) * dot(vec3(_520, _523, _526), vec3(_3351, _3352, _3353))) + _3428;
                                float _4553 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3436 = 1.0 - _3403;
                                float _3446 = (0.5 / (((_3435 * ((_3418 * _3436) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3403) * _3418))) * _3435;
                                float _4564 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3456 = (_3381 * _3358) * (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) / ((_3426 * _3426) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3382 * _3225.y;
                                frontier_phi_90_pred_1 = _3382 * _3225.x;
                                frontier_phi_90_pred_2 = _3456 * _3237.z;
                                frontier_phi_90_pred_3 = _3456 * _3237.y;
                                frontier_phi_90_pred_4 = _3456 * _3237.x;
                                frontier_phi_90_pred_5 = _3382 * _3225.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3464 = frontier_phi_90_pred;
                            _3463 = frontier_phi_90_pred_1;
                            _3462 = frontier_phi_90_pred_2;
                            _3461 = frontier_phi_90_pred_3;
                            _3460 = frontier_phi_90_pred_4;
                            _3465 = frontier_phi_90_pred_5;
                            _3167 = _3463 + _3180;
                            _3168 = _3464 + _3181;
                            _3169 = _3465 + _3182;
                            _3164 = _3460 + _3177;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            if (_3184 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3184;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3168;
                        frontier_phi_84_pred_1 = _3167;
                        frontier_phi_84_pred_2 = _3166;
                        frontier_phi_84_pred_3 = _3165;
                        frontier_phi_84_pred_4 = _3164;
                        frontier_phi_84_pred_5 = _3169;
                    }
                    _2805 = frontier_phi_84_pred;
                    _2803 = frontier_phi_84_pred_1;
                    _2801 = frontier_phi_84_pred_2;
                    _2799 = frontier_phi_84_pred_3;
                    _2797 = frontier_phi_84_pred_4;
                    _2807 = frontier_phi_84_pred_5;
                    uint _2963 = _2962 + 1u;
                    if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2956 = _2797;
                        _2957 = _2799;
                        _2958 = _2801;
                        _2959 = _2803;
                        _2960 = _2805;
                        _2961 = _2807;
                        _2962 = _2963;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2807;
                frontier_phi_65_66_ladder_1 = _2803;
                frontier_phi_65_66_ladder_2 = _2805;
                frontier_phi_65_66_ladder_3 = _2799;
                frontier_phi_65_66_ladder_4 = _2797;
                frontier_phi_65_66_ladder_5 = _2801;
            }
            else
            {
                frontier_phi_65_66_ladder = _2686;
                frontier_phi_65_66_ladder_1 = _2682;
                frontier_phi_65_66_ladder_2 = _2684;
                frontier_phi_65_66_ladder_3 = _2678;
                frontier_phi_65_66_ladder_4 = _2676;
                frontier_phi_65_66_ladder_5 = _2680;
            }
            _2796 = frontier_phi_65_66_ladder_4;
            _2798 = frontier_phi_65_66_ladder_3;
            _2800 = frontier_phi_65_66_ladder_5;
            _2802 = frontier_phi_65_66_ladder_1;
            _2804 = frontier_phi_65_66_ladder_2;
            _2806 = frontier_phi_65_66_ladder;
        }
        float _2811 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
        _2609 = (_2811 * _2802) + _2141;
        _2611 = (_2811 * _2804) + _2143;
        _2613 = (_2811 * _2806) + _2145;
        _2615 = ((_2796 * 0.039999999105930328369140625) * _2811) + _2464;
        _2617 = ((_2798 * 0.039999999105930328369140625) * _2811) + _2466;
        _2619 = ((_2800 * 0.039999999105930328369140625) * _2811) + _2468;
    }
    else
    {
        _2609 = _2141;
        _2611 = _2143;
        _2613 = _2145;
        _2615 = _2464;
        _2617 = _2466;
        _2619 = _2468;
    }
    float _4580 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4591 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4602 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _2636 = ((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2609 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _565))) + ((_2615 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    float _2637 = ((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2611 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _565))) + ((_2617 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    float _2638 = ((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2613 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _565))) + ((_2619 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    uint _2639 = _539 + 6u;
    float _2647 = _499 / cbSceneParam._m0[86u].x;
    float _2648 = _500 / cbSceneParam._m0[86u].y;
    vec4 _2662 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2647, _2648, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2664 = _2662.x;
    float _2665 = _2662.y;
    float _2666 = _2662.z;
    float _2667 = _2662.w;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2701 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2702 = _2701 / _419;
        float _2713 = _2702 * _471;
        float _2714 = _472 * _2702;
        float _2715 = (-0.0) - _2714;
        float _2716 = _2702 * _473;
        float _2718 = (cbSceneParam._m0[77u].w * _2715) / _2701;
        float _2719 = _2718 + cbSceneParam._m0[79u].w;
        float _2720 = cbSceneParam._m0[79u].w - _2714;
        float _2726 = sqrt(((_2713 * _2713) + (_2714 * _2714)) + (_2716 * _2716));
        float _2729 = (1.0 - (cbSceneParam._m0[77u].w / _2701)) * _2726;
        float _2734 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2736 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2913;
        if (abs((_2715 - _2718) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2913 = ((((_2719 > 0.0) ? exp2(_2734 * _2719) : (2.0 - exp2(_2736 * _2719))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2729;
        }
        else
        {
            float _2857 = 1.0 / cbSceneParam._m0[80u].x;
            float _2858 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : max(_2719, _2720));
            float _2859 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : min(_2719, _2720));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            _2913 = ((abs(_2726 / _2715) * cbSceneParam._m0[80u].y) * ((((_2868 - _2869) * 2.0) - ((exp2(_2734 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0)))) - exp2(_2734 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))))) * _2857)) - ((exp2(_2736 * _2868) - exp2(_2736 * _2869)) * _2857))) + (_2729 * cbSceneParam._m0[80u].z);
        }
        vec4 _2915 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2647, _2648, 1.0), 0.0);
        float _2924 = exp2((_2913 * (-1.44269502162933349609375)) * (1.0 - _2915.w));
        float _2925 = log2(_2924);
        float _2941 = log2(_2667);
        _2738 = (exp2(_2941 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].x)) * _2915.x) / cbSceneParam._m0[78u].x)) + _2664;
        _2740 = (exp2(_2941 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].y)) * _2915.y) / cbSceneParam._m0[78u].y)) + _2665;
        _2742 = (exp2(_2941 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].z)) * _2915.z) / cbSceneParam._m0[78u].z)) + _2666;
        _2744 = _2924 * _2667;
    }
    else
    {
        _2738 = _2664;
        _2740 = _2665;
        _2742 = _2666;
        _2744 = _2667;
    }
    bool _2951;
    vec4 _2754;
    vec4 _2776;
    float _2778;
    float _2782;
    float _2783;
    float _2784;
    float _2785;
    bool _2795;
    for (;;)
    {
        _2754 = cbMatDynParam._m0[0u];
        float _2756 = roundEven(_2754.y);
        bool _2757 = _2756 == 3.0;
        float _2758 = log2(_2744);
        float _2765 = exp2(_2758 * cbSceneParam._m0[78u].x) * _2636;
        float _2766 = exp2(_2758 * cbSceneParam._m0[78u].y) * _2637;
        float _2767 = exp2(_2758 * cbSceneParam._m0[78u].z) * _2638;
        float _2774 = _487 + (-0.5);
        _2776 = cbMtdParam._m0[1u];
        _2778 = _2776.y * _2774;
        float _2781 = (_2756 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2782 = _2781 * (_2757 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2738)));
        _2783 = _2781 * (_2757 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2740)));
        _2784 = _2781 * (_2757 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2742)));
        _2785 = _2774 * 0.999000012874603271484375;
        _2795 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2795)
        {
            if ((cbInstanceData._m0[_539 + 7u].x + _2785) < 0.5)
            {
                _2951 = true;
                break;
            }
        }
        uint _2892 = _541 + uint(_2754.w);
        if ((cbInstanceData._m0[_2892].w < 1.0) && ((cbInstanceData._m0[_2892].w + _2785) < 0.5))
        {
            _2951 = true;
            break;
        }
        if ((_2778 + 1.0) < _2776.x)
        {
            _2951 = true;
            break;
        }
        _2951 = false;
        break;
    }
    float _3155;
    if (_2951)
    {
        discard_state = true;
        _3155 = 0.0;
    }
    else
    {
        _3155 = cbInstanceData._m0[_2639].w;
    }
    SV_Target.x = _2782;
    SV_Target.y = _2783;
    SV_Target.z = _2784;
    SV_Target.w = _3155;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2639].w;
    discard_exit();
}


