#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3800;
float _3801;
float _3802;
float _3803;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _258);
    float _269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _258);
    float _270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _258);
    vec4 _283 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _289 = _283.w;
    float _295 = cbMtdParam._m0[9u].x * _283.x;
    float _296 = cbMtdParam._m0[9u].y * _283.y;
    float _297 = cbMtdParam._m0[9u].z * _283.z;
    vec4 _309 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _311 = _309.x;
    bool _318 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _335 = ((_318 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _311)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _311))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3812 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _338 = 1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)));
    float _3823 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _347 = _289 - (((_339 * _339) * _289) * (3.0 - (_339 * 2.0)));
    vec4 _359 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _365 = cbMtdParam._m0[10u].x + _359.x;
    vec4 _377 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _381 = _377.z;
    float _384 = (_377.x * 2.0) + (-1.0);
    float _386 = (_377.y * 2.0) + (-1.0);
    float _387 = dot(vec2(_384, _386), vec2(_384, _386));
    float _3834 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _392 = sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))));
    float _395 = fma(_392, _204 * NORMAL.x, fma(_386, _211 * TANGENT.x, (_197 * _190) * _384));
    float _398 = fma(_392, _204 * NORMAL.y, fma(_386, _211 * TANGENT.y, (_197 * _191) * _384));
    float _401 = fma(_392, _204 * NORMAL.z, fma(_386, _211 * TANGENT.z, (_197 * _192) * _384));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3845 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _409 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _410 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _411 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _412 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _413 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _414 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _432 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _433 = _432 * _268;
    float _434 = _432 * _269;
    float _435 = _432 * _270;
    float _442 = abs(exp2(log2(dot(vec3(_406, _407, _408), vec3(_433, _434, _435))) * cbMatDynParam._m0[12u].x));
    float _443 = isnan(0.100000001490116119384765625) ? _442 : (isnan(_442) ? 0.100000001490116119384765625 : max(_442, 0.100000001490116119384765625));
    float _449 = ((isnan(0.699999988079071044921875) ? _443 : (isnan(_443) ? 0.699999988079071044921875 : min(_443, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _472 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3921 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3932 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _480 = dot(vec3(_406, _407, _408), vec3(0.0, -1.0, 0.0));
    float _3943 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _490 = (_483 * _411) * cbMatDynParam._m0[11u].x;
    float _492 = (_483 * _412) * cbMatDynParam._m0[11u].y;
    float _494 = (_483 * _413) * cbMatDynParam._m0[11u].z;
    float _504 = dot(vec3(_433, _434, _435), vec3(_406, _407, _408)) * 2.0;
    float _514 = dot(vec3((-0.0) - (_433 - (_504 * _406)), (-0.0) - (_434 - (_504 * _407)), (-0.0) - (_435 - (_504 * _408))), vec3(0.0, -1.0, 0.0));
    float _3954 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _521 = exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 4.0);
    float _536 = _318 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _585 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _576);
    float _586 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _576);
    float _587 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _576);
    float _591 = inversesqrt(dot(vec3(_585, _586, _587), vec3(_585, _586, _587)));
    float _592 = _585 * _591;
    float _593 = _586 * _591;
    float _594 = _587 * _591;
    vec4 _599 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _601 = _599.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_585 * _585) + (_586 * _586)) + (_587 * _587));
        float _779 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _3965 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _784 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _3976 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) - _780)) + _780) < ((_601 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _612 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _613 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _632 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _635 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _638 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _651 = uint(roundEven(NORMAL.w)) * 13u;
    uint _653 = _651 + 9u;
    uint _654 = _653 + uint(cbMatDynParam._m0[0u].w);
    float _660 = ((cbMatDynParam._m0[9u].x * _411) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_654].x;
    float _661 = ((cbMatDynParam._m0[9u].y * _412) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_654].y;
    float _662 = ((cbMatDynParam._m0[9u].z * _413) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_654].z;
    float _3987 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _666 = 1.0 - _414;
    float _667 = _663 * _666;
    float _668 = _664 * _666;
    float _669 = _665 * _666;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _414;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _414;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _414;
    float _677 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    vec4 _689 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _612, cbSceneParam._m0[86u].y * _613));
    float _692 = _689.x * TEXCOORD.z;
    float _693 = dot(vec3(_406, _407, _408), vec3(_592, _593, _594));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _406) - _592;
    float _701 = (_696 * _407) - _593;
    float _702 = (_696 * _408) - _594;
    float _706 = abs(dot(vec3(_592, _593, _594), vec3(_406, _407, _408)));
    float _4020 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _708 = sqrt(_410);
    float _719 = exp2((_708 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _725 = (1.0 - _719) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _726 = _719 * _708;
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _822 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _826 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _851 = _754 + _406;
        float _852 = _758 + _407;
        float _853 = _762 + _408;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_406, _407, _408), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _4068 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_406, _407, _408), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _4101 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_406, _407, _408), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _4134 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1137 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1141 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1145 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1168 = _754 + _406;
        float _1169 = _758 + _407;
        float _1170 = _762 + _408;
        float _1180 = fma(_1170, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168)) - _1137;
        float _1181 = fma(_1170, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168)) - _1141;
        float _1182 = fma(_1170, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168)) - _1145;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1137 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1141 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[35u].z) + ((((((_1145 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1236 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1203.x + (-0.5));
        float _1238 = _1236 * (_1203.y + (-0.5));
        float _1239 = _1236 * (_1203.z + (-0.5));
        float _1246 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1210.x + (-0.5));
        float _1248 = _1246 * (_1210.y + (-0.5));
        float _1249 = _1246 * (_1210.z + (-0.5));
        float _1256 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1217.x + (-0.5));
        float _1258 = _1256 * (_1217.y + (-0.5));
        float _1259 = _1256 * (_1217.z + (-0.5));
        float _1266 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1224.x + (-0.5));
        float _1268 = _1266 * (_1224.y + (-0.5));
        float _1269 = _1266 * (_1224.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_406, _407, _408), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4197 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1300 + 1.0))) + _1305) * _1270;
        float _1315 = _1238 * 0.5;
        float _1316 = _1248 * 0.5;
        float _1317 = _1258 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_406, _407, _408), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4230 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1342 + 1.0))) + _1347) * _1271;
        float _1357 = _1239 * 0.5;
        float _1358 = _1249 * 0.5;
        float _1359 = _1259 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_406, _407, _408), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4263 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1384 + 1.0))) + _1389) * _1272;
        _1406 = _1239;
        _1407 = _1238;
        _1408 = _1237;
        _1409 = _1249;
        _1410 = _1248;
        _1411 = _1247;
        _1412 = _1259;
        _1413 = _1258;
        _1414 = _1257;
        _1415 = _1272;
        _1416 = _1271;
        _1417 = _1270;
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = _1094;
        _1415 = _1094;
        _1416 = _1094;
        _1417 = _1094;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1453 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1430));
    float _1474 = _700 * 0.5;
    float _1475 = _701 * 0.5;
    float _1476 = _702 * 0.5;
    float _1477 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1480 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1483 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1490 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1494 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1498 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1505 = dot(vec4(cbModelParam._m0[39u]), vec4(_1474, _1475, _1476, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1474, _1475, _1476, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _410);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1592 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1596 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1600 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1603 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1606 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1609 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1637;
        if (_1603 > 0.0)
        {
            _1637 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1637 = frontier_phi_17_15_ladder;
        }
        float _1812;
        if (_1606 > 0.0)
        {
            _1812 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1812 = frontier_phi_26_22_ladder;
        }
        float _2108;
        if (_1609 > 0.0)
        {
            _2108 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2108 = frontier_phi_38_33_ladder;
        }
        float _2110 = isnan(_1812) ? _1637 : (isnan(_1637) ? _1812 : min(_1637, _1812));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1603) + _1592;
        float _2116 = (_2111 * _1606) + _1596;
        float _2117 = (_2111 * _1609) + _1600;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_16_38_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1625 = frontier_phi_16_38_ladder_2;
        _1627 = frontier_phi_16_38_ladder_1;
        _1629 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1543);
        _1625 = _1613.x * cbModelParam._m0[1u].y;
        _1627 = _1613.y * cbModelParam._m0[1u].y;
        _1629 = _1613.z * cbModelParam._m0[1u].y;
    }
    float _1633 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _410);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1633 : min(cbModelParam._m0[25u].w, _1633));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1691 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1695 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1699 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1702 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1705 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1708 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1817;
        if (_1702 > 0.0)
        {
            _1817 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1817 = frontier_phi_28_24_ladder;
        }
        float _2135;
        if (_1705 > 0.0)
        {
            _2135 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2135 = frontier_phi_40_35_ladder;
        }
        float _2473;
        if (_1708 > 0.0)
        {
            _2473 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2473 = frontier_phi_50_47_ladder;
        }
        float _2475 = isnan(_2135) ? _1817 : (isnan(_1817) ? _2135 : min(_1817, _2135));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1702) + _1691;
        float _2481 = (_2476 * _1705) + _1695;
        float _2482 = (_2476 * _1708) + _1699;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1634);
            frontier_phi_25_50_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1727 = frontier_phi_25_50_ladder_2;
        _1729 = frontier_phi_25_50_ladder_1;
        _1731 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1634);
        _1727 = _1711.x * cbModelParam._m0[1u].z;
        _1729 = _1711.y * cbModelParam._m0[1u].z;
        _1731 = _1711.z * cbModelParam._m0[1u].z;
    }
    float _1744 = (((_725 * _677) + _726) * _692) * ((cbModelParam._m0[1u].w * (_1727 - _1625)) + _1625);
    float _1746 = (((_725 * _679) + _726) * _692) * ((cbModelParam._m0[1u].w * (_1729 - _1627)) + _1627);
    float _1748 = (((_725 * _680) + _726) * _692) * ((cbModelParam._m0[1u].w * (_1731 - _1629)) + _1629);
    float _1751 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, _1744 * cbSceneParam._m0[91u].x));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1795 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1804 = _1791 / _1803;
    float _1805 = _1795 / _1803;
    float _1806 = _1799 / _1803;
    float _1953;
    float _1954;
    float _1955;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1833 = ((uint(_1806 > cbSceneParam._m0[59u].y) + uint(_1806 > cbSceneParam._m0[59u].x)) + uint(_1806 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1834 = _1833 + 43u;
        uint _1842 = _1833 + 44u;
        uint _1850 = _1833 + 45u;
        uint _1858 = _1833 + 46u;
        float _1869 = fma(_1803, cbSceneParam._m0[_1834].w, fma(_1799, cbSceneParam._m0[_1834].z, fma(_1795, cbSceneParam._m0[_1834].y, _1791 * cbSceneParam._m0[_1834].x)));
        float _1873 = fma(_1803, cbSceneParam._m0[_1842].w, fma(_1799, cbSceneParam._m0[_1842].z, fma(_1795, cbSceneParam._m0[_1842].y, _1791 * cbSceneParam._m0[_1842].x)));
        float _1881 = fma(_1803, cbSceneParam._m0[_1858].w, fma(_1799, cbSceneParam._m0[_1858].z, fma(_1795, cbSceneParam._m0[_1858].y, _1791 * cbSceneParam._m0[_1858].x)));
        float _1886 = cbSceneParam._m0[33u].z * _1881;
        float _1888 = cbSceneParam._m0[33u].w * _1881;
        float _1891 = fma(_1803, cbSceneParam._m0[_1850].w, fma(_1799, cbSceneParam._m0[_1850].z, fma(_1795, cbSceneParam._m0[_1850].y, _1791 * cbSceneParam._m0[_1850].x))) / _1881;
        float _1939 = (cbSceneParam._m0[33u].x - sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806))) * cbSceneParam._m0[33u].y;
        float _4389 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1946 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 + _1869) / _1881, (_1888 + _1873) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1888 + _1869) / _1881, (_1873 - _1886) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 - _1886) / _1881, (_1873 - _1888) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 - _1888) / _1881, (_1886 + _1873) / _1881), _1891), 0.0)).x), vec4(0.25)));
        _1953 = 1.0 - (_1946 * cbSceneParam._m0[34u].x);
        _1954 = 1.0 - (_1946 * cbSceneParam._m0[34u].y);
        _1955 = 1.0 - (_1946 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1953 = 1.0;
        _1954 = 1.0;
        _1955 = 1.0;
    }
    float _2019;
    float _2021;
    float _2023;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2007 = fma(_1803, cbSceneParam._m0[63u].w, fma(_1799, cbSceneParam._m0[63u].z, fma(_1795, cbSceneParam._m0[63u].y, _1791 * cbSceneParam._m0[63u].x)));
        float _2008 = fma(_1803, cbSceneParam._m0[60u].w, fma(_1799, cbSceneParam._m0[60u].z, fma(_1795, cbSceneParam._m0[60u].y, _1791 * cbSceneParam._m0[60u].x))) / _2007;
        float _2009 = fma(_1803, cbSceneParam._m0[61u].w, fma(_1799, cbSceneParam._m0[61u].z, fma(_1795, cbSceneParam._m0[61u].y, _1791 * cbSceneParam._m0[61u].x))) / _2007;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2008 >= cbSceneParam._m0[64u].x) && (_2009 >= cbSceneParam._m0[64u].y)) && (_2008 <= cbSceneParam._m0[64u].z)) && (_2009 <= cbSceneParam._m0[64u].w))
        {
            float _2148 = fma(_1803, cbSceneParam._m0[62u].w, fma(_1799, cbSceneParam._m0[62u].z, fma(_1795, cbSceneParam._m0[62u].y, _1791 * cbSceneParam._m0[62u].x))) / _2007;
            float _2152 = isnan(cbSceneParam._m0[41u].w) ? _2148 : (isnan(_2148) ? cbSceneParam._m0[41u].w : max(_2148, cbSceneParam._m0[41u].w));
            float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806))) * cbSceneParam._m0[33u].y;
            float _4405 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
            float _2202 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2008, cbSceneParam._m0[33u].w + _2009), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2008, _2009 - cbSceneParam._m0[33u].z), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2008 - cbSceneParam._m0[33u].z, _2009 - cbSceneParam._m0[33u].w), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2008 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2009), _2152), 0.0)).x), vec4(0.25)));
            float _2206 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
            float _2207 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
            float _2208 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2208) ? _1955 : (isnan(_1955) ? _2208 : min(_1955, _2208));
            frontier_phi_37_36_ladder_1 = isnan(_2207) ? _1954 : (isnan(_1954) ? _2207 : min(_1954, _2207));
            frontier_phi_37_36_ladder_2 = isnan(_2206) ? _1953 : (isnan(_1953) ? _2206 : min(_1953, _2206));
        }
        else
        {
            frontier_phi_37_36_ladder = _1955;
            frontier_phi_37_36_ladder_1 = _1954;
            frontier_phi_37_36_ladder_2 = _1953;
        }
        _2019 = frontier_phi_37_36_ladder_2;
        _2021 = frontier_phi_37_36_ladder_1;
        _2023 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2019 = _1953;
        _2021 = _1954;
        _2023 = _1955;
    }
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_651 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _692 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2067 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2071 = _2030 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_406, _407, _408));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_406, _407, _408));
    float _4441 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4452 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2047].x * _2053) * _2092) + (((cbLight._m0[_2057].x * _2019) * _2067) * _2090);
    float _2100 = ((_2053 * cbLight._m0[_2047].y) * _2092) + (((cbLight._m0[_2057].y * _2021) * _2067) * _2090);
    float _2101 = ((_2053 * cbLight._m0[_2047].z) * _2092) + (((cbLight._m0[_2057].z * _2023) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2107)
    {
        _2209 = _2099;
        _2211 = _2100;
        _2213 = _2101;
    }
    else
    {
        uint _2217 = _2030 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4463 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2236 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2099;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2100;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2101;
    }
    bool _2216 = _2105.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2216)
    {
        _2271 = _2209;
        _2273 = _2211;
        _2275 = _2213;
    }
    else
    {
        uint _2444 = _2030 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4479 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2463 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2271 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2209;
        _2273 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2211;
        _2275 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2213;
    }
    uint _2278 = _2030 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _410) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2030].x + _592;
    float _2294 = cbLight._m0[_2030].y + _593;
    float _2295 = cbLight._m0[_2030].z + _594;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2030].xyz));
    float _4495 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _4506 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2307 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2308 = dot(vec3(_406, _407, _408), vec3(_2300, _2301, _2302));
    float _4517 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2300, _2301, _2302));
    float _4528 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
    float _2329 = 0.959999978542327880859375 - _674;
    float _2331 = 0.959999978542327880859375 - _675;
    float _2332 = 0.959999978542327880859375 - _676;
    float _2339 = 1.0 - _2292;
    float _2350 = (0.5 / (((_2307 * ((_2306 * _2339) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2339) + _2292) * _2306))) * _2306;
    float _4539 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2366 = _2030 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _410) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2071].x + _592;
    float _2380 = cbLight._m0[_2071].y + _593;
    float _2381 = cbLight._m0[_2071].z + _594;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2071].xyz));
    float _4550 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2393 = dot(vec3(_406, _407, _408), vec3(_2386, _2387, _2388));
    float _4561 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2386, _2387, _2388));
    float _4572 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2307 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2419) + _2378) * _2392))) * _2392;
    float _4583 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2329) + _677) * cbLight._m0[_2366].x) * _2431) * _2053) + ((((cbLight._m0[_2278].x * _2019) * ((_2328 * _2329) + _677)) * _2352) * _2067);
    float _2442 = (((((_2412 * _2331) + _679) * cbLight._m0[_2366].y) * _2431) * _2053) + ((((cbLight._m0[_2278].y * _2021) * ((_2328 * _2331) + _679)) * _2352) * _2067);
    float _2443 = (((((_2412 * _2332) + _680) * cbLight._m0[_2366].z) * _2431) * _2053) + ((((cbLight._m0[_2278].z * _2023) * ((_2328 * _2332) + _680)) * _2352) * _2067);
    float _2499;
    float _2501;
    float _2503;
    if (_2107)
    {
        _2499 = _2441;
        _2501 = _2442;
        _2503 = _2443;
    }
    else
    {
        uint _2505 = _2030 + 2u;
        uint _2509 = _2030 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _410) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _592;
        float _2526 = cbLight._m0[_2505].y + _593;
        float _2527 = cbLight._m0[_2505].z + _594;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2505].xyz));
        float _4594 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2539 = dot(vec3(_406, _407, _408), vec3(_2532, _2533, _2534));
        float _4605 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4616 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2307 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2565) + _2524) * _2538))) * _2538;
        float _4627 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2499 = (((((_2558 * _2329) + _677) * cbLight._m0[_2509].x) * _2577) * _2578) + _2441;
        _2501 = (((((_2558 * _2331) + _679) * cbLight._m0[_2509].y) * _2577) * _2578) + _2442;
        _2503 = (((((_2558 * _2332) + _680) * cbLight._m0[_2509].z) * _2577) * _2578) + _2443;
    }
    float _2609;
    float _2611;
    float _2613;
    if (_2216)
    {
        _2609 = _2499;
        _2611 = _2501;
        _2613 = _2503;
    }
    else
    {
        uint _2620 = _2030 + 3u;
        uint _2624 = _2030 + 11u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _410) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _592;
        float _2641 = cbLight._m0[_2620].y + _593;
        float _2642 = cbLight._m0[_2620].z + _594;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2620].xyz));
        float _4643 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2654 = dot(vec3(_406, _407, _408), vec3(_2647, _2648, _2649));
        float _4654 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4665 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2307 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2680) + _2639) * _2653))) * _2653;
        float _4676 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2609 = (((((_2673 * _2329) + _677) * cbLight._m0[_2624].x) * _2692) * _2693) + _2499;
        _2611 = (((((_2673 * _2331) + _679) * cbLight._m0[_2624].y) * _2692) * _2693) + _2501;
        _2613 = (((((_2673 * _2332) + _680) * cbLight._m0[_2624].z) * _2692) * _2693) + _2503;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2028.y == 0u)
    {
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _613) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _612) / _2715)));
        float _2736 = (log2(_1806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
        }
        else
        {
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3029)
                {
                    frontier_phi_71_pred = _3018;
                    frontier_phi_71_pred_1 = _3017;
                    frontier_phi_71_pred_2 = _3016;
                    frontier_phi_71_pred_3 = _3015;
                    frontier_phi_71_pred_4 = _3014;
                    frontier_phi_71_pred_5 = _3013;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3028;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3019 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _1804;
                        float _3225 = _3184.y - _1805;
                        float _3226 = _3184.z - _1806;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_632, _635, _638), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4702 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3254 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _1804;
                        float _3259 = (-0.0) - _1805;
                        float _3260 = (-0.0) - _1806;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3274 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3275 = 1.0 - _708;
                        float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                        float _3283 = _3282 * _3282;
                        float _3284 = _3283 * _3283;
                        float _3285 = _3265 + _3231;
                        float _3286 = _3266 + _3232;
                        float _3287 = _3267 + _3233;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3295 = dot(vec3(_632, _635, _638), vec3(_3265, _3266, _3267));
                        float _4718 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3299 = dot(vec3(_632, _635, _638), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                        float _4729 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                        float _3307 = _3244 * _3283;
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3234) + _3308;
                        float _4740 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3313 = 1.0 - _3283;
                        float _3323 = (0.5 / (((_3312 * ((_3298 * _3313) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3283) * _3298))) * _3312;
                        float _4751 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3334 = (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3306 * _3306) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3088 = (_3254 * _3203.x) + _3161;
                        _3089 = (_3254 * _3203.y) + _3162;
                        _3090 = (_3254 * _3203.z) + _3163;
                        _3085 = (_3334 * _3220.x) + _3158;
                        _3086 = (_3334 * _3220.y) + _3159;
                        _3087 = (_3334 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_71_pred = _3090;
                    frontier_phi_71_pred_1 = _3089;
                    frontier_phi_71_pred_2 = _3088;
                    frontier_phi_71_pred_3 = _3087;
                    frontier_phi_71_pred_4 = _3086;
                    frontier_phi_71_pred_5 = _3085;
                }
                _2863 = frontier_phi_71_pred;
                _2861 = frontier_phi_71_pred_1;
                _2859 = frontier_phi_71_pred_2;
                _2857 = frontier_phi_71_pred_3;
                _2855 = frontier_phi_71_pred_4;
                _2853 = frontier_phi_71_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2853;
                    _3014 = _2855;
                    _3015 = _2857;
                    _3016 = _2859;
                    _3017 = _2861;
                    _3018 = _2863;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
        }
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.z;
        uint _2869 = (_2867 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2869) & _2746) == 0u)
        {
            _2981 = _2852;
            _2983 = _2854;
            _2985 = _2856;
            _2987 = _2858;
            _2989 = _2860;
            _2991 = _2862;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
            float _3007 = _3006 * _1804;
            float _3008 = _3006 * _1805;
            float _3009 = _3006 * _1806;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2869 < ((_2867 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3141 = _2852;
                float _3142 = _2854;
                float _3143 = _2856;
                float _3144 = _2858;
                float _3145 = _2860;
                float _3146 = _2862;
                uint _3147 = _2869;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3157)
                    {
                        frontier_phi_82_pred = _3146;
                        frontier_phi_82_pred_1 = _3145;
                        frontier_phi_82_pred_2 = _3144;
                        frontier_phi_82_pred_3 = _3143;
                        frontier_phi_82_pred_4 = _3142;
                        frontier_phi_82_pred_5 = _3141;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3361 = _3141;
                        float _3362 = _3142;
                        float _3363 = _3143;
                        float _3364 = _3144;
                        float _3365 = _3145;
                        float _3366 = _3146;
                        uint _3367 = _3156;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3437;
                        vec4 _3453;
                        float _3500;
                        bool _3501;
                        for (;;)
                        {
                            uint _3378 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3424 = (_3378 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3440 = (_3378 * 40u) + 20u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3456 = (_3378 * 40u) + 24u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3475 = (_3378 * 40u) + 28u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3500 = fma(_1806, _3488.z, fma(_1805, _3488.y, _3488.x * _1804)) + _3488.w;
                            _3501 = !((fma(_1806, _3469.z, fma(_1805, _3469.y, _3469.x * _1804)) + _3469.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3501)
                            {
                                float _3528 = _3393.x - _1804;
                                float _3529 = _3393.y - _1805;
                                float _3530 = _3393.z - _1806;
                                float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                                float _3534 = inversesqrt(_3531);
                                float _3535 = _3534 * _3528;
                                float _3536 = _3534 * _3529;
                                float _3537 = _3534 * _3530;
                                float _3541 = 1.0 - (_3531 / (_3394 * _3394));
                                float _4762 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3546 = sqrt(_3531) * _3409.w;
                                float _3548 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                                float _3549 = _3548 * _3548;
                                float _3552 = ((1.0 - _3549) * dot(vec3(_3535, _3536, _3537), vec3(_632, _635, _638))) + _3549;
                                float _3555 = _3546 * _3546;
                                float _3559 = (fma(_1806, _3437.z, fma(_1805, _3437.y, _3437.x * _1804)) + _3437.w) / _3500;
                                float _3560 = (fma(_1806, _3453.z, fma(_1805, _3453.y, _3453.x * _1804)) + _3453.w) / _3500;
                                float _3564 = 1.0 - dot(vec2(_3559, _3560), vec2(_3559, _3560));
                                float _4778 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3566 = _3565 * (((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3542) / ((_3555 * 0.699999988079071044921875) + 1.0));
                                float _3578 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                                float _3579 = 1.0 - _708;
                                float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                                float _3587 = _3586 * _3586;
                                float _3588 = _3587 * _3587;
                                float _3589 = _3535 - _3007;
                                float _3590 = _3536 - _3008;
                                float _3591 = _3537 - _3009;
                                float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                                float _3599 = dot(vec3(_632, _635, _638), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4789 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3603 = dot(vec3(_632, _635, _638), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                                float _4800 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                                float _3611 = _3548 * _3587;
                                float _3612 = _3611 * _3611;
                                float _3618 = ((1.0 - _3612) * dot(vec3(_632, _635, _638), vec3(_3535, _3536, _3537))) + _3612;
                                float _4811 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3620 = 1.0 - _3587;
                                float _3630 = (0.5 / (((_3619 * ((_3602 * _3620) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3587) * _3602))) * _3619;
                                float _4822 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3640 = (_3565 * _3542) * (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3610 * _3610) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3566 * _3409.z;
                                frontier_phi_88_pred_1 = _3566 * _3409.y;
                                frontier_phi_88_pred_2 = _3566 * _3409.x;
                                frontier_phi_88_pred_3 = _3640 * _3421.z;
                                frontier_phi_88_pred_4 = _3640 * _3421.y;
                                frontier_phi_88_pred_5 = _3640 * _3421.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3649 = frontier_phi_88_pred;
                            _3648 = frontier_phi_88_pred_1;
                            _3647 = frontier_phi_88_pred_2;
                            _3646 = frontier_phi_88_pred_3;
                            _3645 = frontier_phi_88_pred_4;
                            _3644 = frontier_phi_88_pred_5;
                            _3351 = _3647 + _3364;
                            _3352 = _3648 + _3365;
                            _3353 = _3649 + _3366;
                            _3348 = _3644 + _3361;
                            _3349 = _3645 + _3362;
                            _3350 = _3646 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3353;
                        frontier_phi_82_pred_1 = _3352;
                        frontier_phi_82_pred_2 = _3351;
                        frontier_phi_82_pred_3 = _3350;
                        frontier_phi_82_pred_4 = _3349;
                        frontier_phi_82_pred_5 = _3348;
                    }
                    _2992 = frontier_phi_82_pred;
                    _2990 = frontier_phi_82_pred_1;
                    _2988 = frontier_phi_82_pred_2;
                    _2986 = frontier_phi_82_pred_3;
                    _2984 = frontier_phi_82_pred_4;
                    _2982 = frontier_phi_82_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _2982;
                        _3142 = _2984;
                        _3143 = _2986;
                        _3144 = _2988;
                        _3145 = _2990;
                        _3146 = _2992;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2988;
                frontier_phi_63_64_ladder_1 = _2992;
                frontier_phi_63_64_ladder_2 = _2990;
                frontier_phi_63_64_ladder_3 = _2986;
                frontier_phi_63_64_ladder_4 = _2984;
                frontier_phi_63_64_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_63_64_ladder = _2858;
                frontier_phi_63_64_ladder_1 = _2862;
                frontier_phi_63_64_ladder_2 = _2860;
                frontier_phi_63_64_ladder_3 = _2856;
                frontier_phi_63_64_ladder_4 = _2854;
                frontier_phi_63_64_ladder_5 = _2852;
            }
            _2981 = frontier_phi_63_64_ladder_5;
            _2983 = frontier_phi_63_64_ladder_4;
            _2985 = frontier_phi_63_64_ladder_3;
            _2987 = frontier_phi_63_64_ladder;
            _2989 = frontier_phi_63_64_ladder_2;
            _2991 = frontier_phi_63_64_ladder_1;
        }
        float _2996 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2759 = (_2996 * _2987) + _2271;
        _2761 = (_2996 * _2989) + _2273;
        _2763 = (_2996 * _2991) + _2275;
        _2765 = ((_2981 * _677) * _2996) + _2609;
        _2767 = ((_2983 * _679) * _2996) + _2611;
        _2769 = ((_2985 * _680) * _2996) + _2613;
    }
    else
    {
        _2759 = _2271;
        _2761 = _2273;
        _2763 = _2275;
        _2765 = _2609;
        _2767 = _2611;
        _2769 = _2613;
    }
    uint _2775 = _653 + uint(cbMatDynParam._m0[0u].w);
    float _2781 = cbInstanceData._m0[_2775].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _449) + cbMatDynParam._m0[7u].x) + (((_490 - (_490 * _414)) + (cbMatDynParam._m0[11u].x * _521)) * cbMatDynParam._m0[9u].x));
    float _2782 = cbInstanceData._m0[_2775].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _449) + cbMatDynParam._m0[7u].y) + (((_492 - (_492 * _414)) + (cbMatDynParam._m0[11u].y * _521)) * cbMatDynParam._m0[9u].y));
    float _2783 = cbInstanceData._m0[_2775].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _449) + cbMatDynParam._m0[7u].z) + (((_494 - (_494 * _414)) + (cbMatDynParam._m0[11u].z * _521)) * cbMatDynParam._m0[9u].z));
    float _4838 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4849 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4860 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4871 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _2801 = (((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2759 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _692))) + ((_2765 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + _2781;
    float _2803 = (_2782 + ((_2767 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2761 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _692)));
    float _2805 = (_2783 + ((_2769 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2763 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _692)));
    float _2806 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2807 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2808 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2813 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) - _476) * _449) + _476));
    float _2818 = cbInstanceData._m0[_651 + 6u].w * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)));
    float _2823 = _612 / cbSceneParam._m0[86u].x;
    float _2824 = _613 / cbSceneParam._m0[86u].y;
    vec4 _2838 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2840 = _2838.x;
    float _2841 = _2838.y;
    float _2842 = _2838.z;
    float _2843 = _2838.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2877 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2878 = _2877 / _536;
        float _2889 = _2878 * _585;
        float _2890 = _586 * _2878;
        float _2891 = (-0.0) - _2890;
        float _2892 = _2878 * _587;
        float _2894 = (cbSceneParam._m0[77u].w * _2891) / _2877;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2890;
        float _2902 = sqrt(((_2889 * _2889) + (_2890 * _2890)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2877)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2891 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3044 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3098 = ((abs(_2902 / _2891) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2912 * _3053) - exp2(_2912 * _3054)) * _3042))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2843);
        _2914 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2840;
        _2916 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2841;
        _2918 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2842;
        _2920 = _3109 * _2843;
    }
    else
    {
        _2914 = _2840;
        _2916 = _2841;
        _2918 = _2842;
        _2920 = _2843;
    }
    bool _3136;
    vec4 _2930;
    vec4 _2952;
    float _2954;
    float _2958;
    float _2959;
    float _2960;
    float _2963;
    float _2966;
    float _2969;
    float _2970;
    bool _2980;
    for (;;)
    {
        _2930 = cbMatDynParam._m0[0u];
        float _2932 = roundEven(_2930.y);
        bool _2933 = _2932 == 3.0;
        float _2934 = log2(_2920);
        float _2938 = exp2(_2934 * cbSceneParam._m0[78u].x);
        float _2939 = exp2(_2934 * cbSceneParam._m0[78u].y);
        float _2940 = exp2(_2934 * cbSceneParam._m0[78u].z);
        float _2941 = _2938 * _2806;
        float _2942 = _2939 * _2807;
        float _2943 = _2940 * _2808;
        float _2950 = _601 + (-0.5);
        _2952 = cbMtdParam._m0[1u];
        _2954 = _2952.y * _2950;
        float _2957 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2958 = _2957 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
        _2959 = _2957 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
        _2960 = _2957 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
        _2963 = ((_2813 * _2781) * _2938) * _2957;
        _2966 = ((_2813 * _2782) * _2939) * _2957;
        _2969 = ((_2813 * _2783) * _2940) * _2957;
        _2970 = _2950 * 0.999000012874603271484375;
        _2980 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2980)
        {
            if ((cbInstanceData._m0[_651 + 7u].x + _2970) < 0.5)
            {
                _3136 = true;
                break;
            }
        }
        uint _3077 = _653 + uint(_2930.w);
        if ((cbInstanceData._m0[_3077].w < 1.0) && ((cbInstanceData._m0[_3077].w + _2970) < 0.5))
        {
            _3136 = true;
            break;
        }
        if ((_2954 + _347) < _2952.x)
        {
            _3136 = true;
            break;
        }
        _3136 = false;
        break;
    }
    float _3339;
    if (_3136)
    {
        discard_state = true;
        _3339 = 0.0;
    }
    else
    {
        _3339 = _2818;
    }
    SV_Target.x = _2958;
    SV_Target.y = _2959;
    SV_Target.z = _2960;
    SV_Target.w = _3339;
    SV_Target_1.x = _2963;
    SV_Target_1.y = _2966;
    SV_Target_1.z = _2969;
    SV_Target_1.w = _2818;
    discard_exit();
}


