#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _3345;
float _3346;
float _3347;
float _3348;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.w;
    float _239 = cbMtdParam._m0[9u].x * _226.x;
    float _240 = cbMtdParam._m0[9u].y * _226.y;
    float _241 = cbMtdParam._m0[9u].z * _226.z;
    vec4 _254 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _256 = _254.x;
    bool _263 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _280 = ((_263 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _256)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _256))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3357 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _283 = 1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)));
    float _3368 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _284 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _292 = _232 - (((_284 * _284) * _232) * (3.0 - (_284 * 2.0)));
    vec4 _304 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _310 = cbMtdParam._m0[10u].x + _304.x;
    vec4 _322 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _326 = _322.z;
    float _329 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3379 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    float _340 = fma(_337, _202 * NORMAL.x, fma(_331, _209 * TANGENT.x, (_195 * _188) * _329));
    float _343 = fma(_337, _202 * NORMAL.y, fma(_331, _209 * TANGENT.y, (_195 * _189) * _329));
    float _346 = fma(_337, _202 * NORMAL.z, fma(_331, _209 * TANGENT.z, (_195 * _190) * _329));
    float _350 = inversesqrt(dot(vec3(_340, _343, _346), vec3(_340, _343, _346)));
    float _351 = _350 * _340;
    float _352 = _350 * _343;
    float _353 = _350 * _346;
    float _3390 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _354 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _355 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3423 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3434 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3445 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _359 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _364 = _263 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _415 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _405);
    float _416 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _405);
    float _417 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _405);
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _415 * _421;
    float _423 = _416 * _421;
    float _424 = _417 * _421;
    vec4 _429 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _431 = _429.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _605 = sqrt(((_415 * _415) + (_416 * _416)) + (_417 * _417));
        float _611 = (cbMatDynParam._m0[5u].x * _605) + cbMatDynParam._m0[5u].y;
        float _3456 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _616 = (cbMatDynParam._m0[5u].z * _605) + cbMatDynParam._m0[5u].w;
        float _3467 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) - _612)) + _612) < ((_431 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_353, cbSceneParam._m0[5u].z, fma(_352, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _351));
    float _466 = fma(_353, cbSceneParam._m0[6u].z, fma(_352, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _351));
    float _469 = fma(_353, cbSceneParam._m0[7u].z, fma(_352, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _351));
    uint _482 = uint(roundEven(NORMAL.w)) * 13u;
    uint _484 = _482 + 9u;
    uint _485 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_485].x;
    float _492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_485].y;
    float _493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_485].z;
    float _3478 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _497 = 1.0 - _359;
    float _498 = _494 * _497;
    float _499 = _495 * _497;
    float _500 = _496 * _497;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _359;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _359;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _359;
    float _508 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    float _511 = _507 + 0.039999999105930328369140625;
    vec4 _520 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _442, cbSceneParam._m0[86u].y * _443));
    float _523 = _520.x * TEXCOORD.z;
    float _524 = dot(vec3(_351, _352, _353), vec3(_422, _423, _424));
    float _527 = _524 * 2.0;
    float _531 = (_527 * _351) - _422;
    float _532 = (_527 * _352) - _423;
    float _533 = (_527 * _353) - _424;
    float _537 = abs(dot(vec3(_422, _423, _424), vec3(_351, _352, _353)));
    float _3511 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _539 = sqrt(_355);
    float _551 = exp2((_539 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_539 * 3.0));
    float _557 = (1.0 - _551) * ((_539 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _558 = _551 * _539;
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _654 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _658 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _683 = _586 + _351;
        float _684 = _590 + _352;
        float _685 = _594 + _353;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_351, _352, _353), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3559 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_351, _352, _353), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3592 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_351, _352, _353), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3625 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _973 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _977 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _1000 = _586 + _351;
        float _1001 = _590 + _352;
        float _1002 = _594 + _353;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_351, _352, _353), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3688 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_351, _352, _353), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3721 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_351, _352, _353), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3754 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = _926;
        _1248 = _926;
        _1249 = _926;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _531 * 0.5;
    float _1307 = _532 * 0.5;
    float _1308 = _533 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_925, _929, _932, _935));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_927, _930, _933, _936));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _931, _934, _937));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_533, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531));
        float _1438 = fma(_533, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531));
        float _1441 = fma(_533, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531));
        float _1469;
        if (_1435 > 0.0)
        {
            _1469 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1469 = frontier_phi_17_15_ladder;
        }
        float _1698;
        if (_1438 > 0.0)
        {
            _1698 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1698 = frontier_phi_26_22_ladder;
        }
        float _1955;
        if (_1441 > 0.0)
        {
            _1955 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1955 = frontier_phi_38_33_ladder;
        }
        float _1957 = isnan(_1698) ? _1469 : (isnan(_1469) ? _1698 : min(_1469, _1698));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1435) + _1424;
        float _1963 = (_1958 * _1438) + _1428;
        float _1964 = (_1958 * _1441) + _1432;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_16_38_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_16_38_ladder_2;
        _1459 = frontier_phi_16_38_ladder_1;
        _1461 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_531, _532, _533), _1375);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1465 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1465 : min(cbModelParam._m0[25u].w, _1465));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1523 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1527 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1531 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1534 = fma(_533, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531));
        float _1537 = fma(_533, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531));
        float _1540 = fma(_533, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531));
        float _1703;
        if (_1534 > 0.0)
        {
            _1703 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1703 = frontier_phi_28_24_ladder;
        }
        float _1982;
        if (_1537 > 0.0)
        {
            _1982 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1982 = frontier_phi_40_35_ladder;
        }
        float _2195;
        if (_1540 > 0.0)
        {
            _2195 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2195 = frontier_phi_49_46_ladder;
        }
        float _2197 = isnan(_1982) ? _1703 : (isnan(_1703) ? _1982 : min(_1703, _1982));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1534) + _1523;
        float _2203 = (_2198 * _1537) + _1527;
        float _2204 = (_2198 * _1540) + _1531;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2205;
        float _2208 = _2205 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2204 > _2208) || ((_2204 < _2206) || ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 < _2206) || (_2202 > _2208))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2204, cbModelParam._m0[17u].z, fma(_2203, cbModelParam._m0[17u].y, _2202 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2204, cbModelParam._m0[18u].z, fma(_2203, cbModelParam._m0[18u].y, _2202 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2204, cbModelParam._m0[19u].z, fma(_2203, cbModelParam._m0[19u].y, _2202 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_25_49_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1559 = frontier_phi_25_49_ladder_2;
        _1561 = frontier_phi_25_49_ladder_1;
        _1563 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_531, _532, _533), _1466);
        _1559 = _1543.x * cbModelParam._m0[1u].z;
        _1561 = _1543.y * cbModelParam._m0[1u].z;
        _1563 = _1543.z * cbModelParam._m0[1u].z;
    }
    float _1576 = (((_557 * _508) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1578 = (((_557 * _510) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1580 = (((_557 * _511) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, _1576 * cbSceneParam._m0[91u].x));
    vec4 _1597 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_442, _443));
    float _1599 = _1597.w;
    float _1611 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1599);
    float _1612 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1599);
    float _1613 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1599);
    uvec4 _1617 = floatBitsToUint(cbInstanceData._m0[_482 + 5u]);
    uint _1619 = _1617.x * 14u;
    uint _1620 = _1619 + 13u;
    float _1627 = _523 + (-1.0);
    float _1632 = (cbLight._m0[_1620].x * _1627) + 1.0;
    float _1633 = (cbLight._m0[_1620].y * _1627) + 1.0;
    float _1634 = (cbLight._m0[_1620].z * _1627) + 1.0;
    float _1635 = (cbLight._m0[_1620].w * _1627) + 1.0;
    uint _1636 = _1619 + 5u;
    float _1642 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1646 = _1619 + 4u;
    float _1656 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1660 = _1619 | 1u;
    float _1671 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_351, _352, _353));
    float _1674 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_351, _352, _353));
    float _3890 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _3901 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1679 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1681 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1688 = ((cbLight._m0[_1636].x * _1642) * _1681) + (((cbLight._m0[_1646].x * _1611) * _1656) * _1679);
    float _1689 = ((_1642 * cbLight._m0[_1636].y) * _1681) + (((cbLight._m0[_1646].y * _1612) * _1656) * _1679);
    float _1690 = ((_1642 * cbLight._m0[_1636].z) * _1681) + (((cbLight._m0[_1646].z * _1613) * _1656) * _1679);
    uvec4 _1695 = floatBitsToUint(cbLight._m0[_1619 + 12u]);
    bool _1697 = _1695.x == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1697)
    {
        _1708 = _1688;
        _1710 = _1689;
        _1712 = _1690;
    }
    else
    {
        uint _1716 = _1619 + 6u;
        float _1732 = (dot(vec3(cbLight._m0[_1619 + 2u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1733 = _1732 * _1732;
        float _3912 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1735 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1708 = (((cbLight._m0[_1716].x * 0.3183098733425140380859375) * _1734) * _1735) + _1688;
        _1710 = (((cbLight._m0[_1716].y * 0.3183098733425140380859375) * _1734) * _1735) + _1689;
        _1712 = (((cbLight._m0[_1716].z * 0.3183098733425140380859375) * _1734) * _1735) + _1690;
    }
    bool _1715 = _1695.y == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1715)
    {
        _1753 = _1708;
        _1755 = _1710;
        _1757 = _1712;
    }
    else
    {
        uint _1926 = _1619 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1619 + 3u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3928 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1945 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1753 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1708;
        _1755 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1710;
        _1757 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1712;
    }
    uint _1760 = _1619 + 8u;
    float _1773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _355) * 0.949999988079071044921875);
    float _1774 = _1773 * _1773;
    float _1775 = cbLight._m0[_1619].x + _422;
    float _1776 = cbLight._m0[_1619].y + _423;
    float _1777 = cbLight._m0[_1619].z + _424;
    float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
    float _1782 = _1781 * _1775;
    float _1783 = _1781 * _1776;
    float _1784 = _1781 * _1777;
    float _1785 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1619].xyz));
    float _3944 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _1789 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1790 = dot(vec3(_351, _352, _353), vec3(_1782, _1783, _1784));
    float _3966 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1794 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1782, _1783, _1784));
    float _3977 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1798 = _1774 * _1774;
    float _1802 = ((_1793 * _1793) * (_1798 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * 5.0);
    float _1811 = 0.959999978542327880859375 - _505;
    float _1813 = 0.959999978542327880859375 - _506;
    float _1814 = 0.959999978542327880859375 - _507;
    float _1821 = 1.0 - _1774;
    float _1832 = (0.5 / (((_1789 * ((_1788 * _1821) + _1774)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1821) + _1774) * _1788))) * _1788;
    float _3988 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1798 / ((_1802 * _1802) * 3.141590118408203125));
    uint _1848 = _1619 + 9u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _355) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1660].x + _422;
    float _1862 = cbLight._m0[_1660].y + _423;
    float _1863 = cbLight._m0[_1660].z + _424;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1660].xyz));
    float _3999 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1875 = dot(vec3(_351, _352, _353), vec3(_1868, _1869, _1870));
    float _4010 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1868, _1869, _1870));
    float _4021 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1860 * _1860;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _1901 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1789 * ((_1874 * _1901) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1901) + _1860) * _1874))) * _1874;
    float _4032 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    float _1923 = (((((_1894 * _1811) + _508) * cbLight._m0[_1848].x) * _1913) * _1642) + ((((cbLight._m0[_1760].x * _1611) * ((_1810 * _1811) + _508)) * _1834) * _1656);
    float _1924 = (((((_1894 * _1813) + _510) * cbLight._m0[_1848].y) * _1913) * _1642) + ((((cbLight._m0[_1760].y * _1612) * ((_1810 * _1813) + _510)) * _1834) * _1656);
    float _1925 = (((((_1894 * _1814) + _511) * cbLight._m0[_1848].z) * _1913) * _1642) + ((((cbLight._m0[_1760].z * _1613) * ((_1810 * _1814) + _511)) * _1834) * _1656);
    float _1987;
    float _1989;
    float _1991;
    if (_1697)
    {
        _1987 = _1923;
        _1989 = _1924;
        _1991 = _1925;
    }
    else
    {
        uint _1993 = _1619 + 2u;
        uint _1997 = _1619 + 10u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _355) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _422;
        float _2014 = cbLight._m0[_1993].y + _423;
        float _2015 = cbLight._m0[_1993].z + _424;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1993].xyz));
        float _4043 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2027 = dot(vec3(_351, _352, _353), vec3(_2020, _2021, _2022));
        float _4054 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _4065 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
        float _2053 = 1.0 - _2012;
        float _2063 = (0.5 / (((_1789 * ((_2026 * _2053) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2053) + _2012) * _2026))) * _2026;
        float _4076 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1987 = (((((_2046 * _1811) + _508) * cbLight._m0[_1997].x) * _2065) * _2066) + _1923;
        _1989 = (((((_2046 * _1813) + _510) * cbLight._m0[_1997].y) * _2065) * _2066) + _1924;
        _1991 = (((((_2046 * _1814) + _511) * cbLight._m0[_1997].z) * _2065) * _2066) + _1925;
    }
    float _2101;
    float _2103;
    float _2105;
    if (_1715)
    {
        _2101 = _1987;
        _2103 = _1989;
        _2105 = _1991;
    }
    else
    {
        uint _2112 = _1619 + 3u;
        uint _2116 = _1619 + 11u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _355) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _422;
        float _2133 = cbLight._m0[_2112].y + _423;
        float _2134 = cbLight._m0[_2112].z + _424;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_2112].xyz));
        float _4092 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2146 = dot(vec3(_351, _352, _353), vec3(_2139, _2140, _2141));
        float _4103 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4114 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0);
        float _2172 = 1.0 - _2131;
        float _2182 = (0.5 / (((_1789 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2172) + _2131) * _2145))) * _2145;
        float _4125 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _2101 = (((((_2165 * _1811) + _508) * cbLight._m0[_2116].x) * _2184) * _2185) + _1987;
        _2103 = (((((_2165 * _1813) + _510) * cbLight._m0[_2116].y) * _2184) * _2185) + _1989;
        _2105 = (((((_2165 * _1814) + _511) * cbLight._m0[_2116].z) * _2184) * _2185) + _1991;
    }
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    if (_1617.y == 0u)
    {
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2260;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2260;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2260;
        uvec4 _2275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2276 = _2275.x;
        uint _2287 = uint((float(_2275.y) * floor(float(uint(cbSceneParam._m0[85u].y * _443) / _2276))) + floor(float(uint(cbSceneParam._m0[85u].x * _442) / _2276)));
        float _2297 = (log2(_2263 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2298 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        uint _2301 = uint(isnan(14.0) ? _2298 : (isnan(_2298) ? 14.0 : min(_2298, 14.0)));
        uvec4 _2306 = texelFetch(g_lightClusterGridBuffer, int(((_2301 << 2u) + (_2287 << 6u)) >> 2u));
        uint _2307 = _2306.x;
        uint _2308 = _2275.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2308 >> 4u) & 15u)) + 4294967295u) & _2307) == 0u) || ((_2308 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            uint _2571 = 0u;
            uint _2580;
            bool _2581;
            for (;;)
            {
                _2580 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2571 << 2u)) >> 2u)).x;
                _2581 = _2580 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2581)
                {
                    frontier_phi_66_pred = _2565;
                    frontier_phi_66_pred_1 = _2570;
                    frontier_phi_66_pred_2 = _2569;
                    frontier_phi_66_pred_3 = _2568;
                    frontier_phi_66_pred_4 = _2567;
                    frontier_phi_66_pred_5 = _2566;
                }
                else
                {
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    uint _2716;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2580;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    for (;;)
                    {
                        uint _2720 = uint(findLSB(_2716)) + (_2571 << 5u);
                        uint _2717 = (_2716 + 4294967295u) & _2716;
                        uint _2722 = _2720 * 48u;
                        vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2742 = (_2720 * 48u) + 4u;
                        vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2761 = (_2720 * 48u) + 8u;
                        vec3 _2772 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x));
                        float _2776 = _2736.x - _2261;
                        float _2777 = _2736.y - _2262;
                        float _2778 = _2736.z - _2263;
                        float _2779 = dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778));
                        float _2782 = inversesqrt(_2779);
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2786 = dot(vec3(_463, _466, _469), vec3(_2783, _2784, _2785));
                        float _2791 = 1.0 - (_2779 * _2736.w);
                        float _4151 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2793 = sqrt(_2779) * _2755.w;
                        float _2796 = 1.39999997615814208984375 / (_2793 + 1.39999997615814208984375);
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2786) + _2797;
                        float _2803 = _2793 * _2793;
                        float _2807 = ((isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))) * _2792) / ((_2803 * 0.699999988079071044921875) + 1.0);
                        float _2811 = (-0.0) - _2261;
                        float _2812 = (-0.0) - _2262;
                        float _2813 = (-0.0) - _2263;
                        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2828 = exp2(log2(1.0 / ((_2803 * 3.5) + 5.0)) * 0.25);
                        float _2829 = 1.0 - _539;
                        float _2836 = sqrt(1.0 - ((1.0 - (_2829 * _2829)) * (1.0 - (_2828 * _2828))));
                        float _2837 = _2836 * _2836;
                        float _2838 = _2837 * _2837;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2849 = dot(vec3(_463, _466, _469), vec3(_2818, _2819, _2820));
                        float _4167 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2852 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2853 = dot(vec3(_463, _466, _469), vec3(_2845 * _2839, _2845 * _2840, _2845 * _2841));
                        float _4178 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2860 = ((_2856 * _2856) * (_2838 + (-1.0))) + 1.0;
                        float _2861 = _2796 * _2837;
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2786) + _2862;
                        float _4189 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2867 = 1.0 - _2837;
                        float _2877 = (0.5 / (((_2866 * ((_2852 * _2867) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2866 * _2867) + _2837) * _2852))) * _2866;
                        float _4200 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2888 = (((_2838 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_2860 * _2860) * ((_2803 * 2.1991131305694580078125) + 3.141590118408203125))) * _2792;
                        _2640 = (_2807 * _2755.x) + _2713;
                        _2641 = (_2807 * _2755.y) + _2714;
                        _2642 = (_2807 * _2755.z) + _2715;
                        _2637 = (_2888 * _2772.x) + _2710;
                        _2638 = (_2888 * _2772.y) + _2711;
                        _2639 = (_2888 * _2772.z) + _2712;
                        if (_2717 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2717;
                        }
                    }
                    frontier_phi_66_pred = _2637;
                    frontier_phi_66_pred_1 = _2642;
                    frontier_phi_66_pred_2 = _2641;
                    frontier_phi_66_pred_3 = _2640;
                    frontier_phi_66_pred_4 = _2639;
                    frontier_phi_66_pred_5 = _2638;
                }
                _2414 = frontier_phi_66_pred;
                _2424 = frontier_phi_66_pred_1;
                _2422 = frontier_phi_66_pred_2;
                _2420 = frontier_phi_66_pred_3;
                _2418 = frontier_phi_66_pred_4;
                _2416 = frontier_phi_66_pred_5;
                uint _2572 = _2571 + 1u;
                if (_2572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2565 = _2414;
                    _2566 = _2416;
                    _2567 = _2418;
                    _2568 = _2420;
                    _2569 = _2422;
                    _2570 = _2424;
                    _2571 = _2572;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((4294967295u << _2430) & _2307) == 0u)
        {
            _2533 = _2413;
            _2535 = _2415;
            _2537 = _2417;
            _2539 = _2419;
            _2541 = _2421;
            _2543 = _2423;
        }
        else
        {
            float _2558 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
            float _2559 = _2558 * _2261;
            float _2560 = _2558 * _2262;
            float _2561 = _2558 * _2263;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2693 = _2413;
                float _2694 = _2415;
                float _2695 = _2417;
                float _2696 = _2419;
                float _2697 = _2421;
                float _2698 = _2423;
                uint _2699 = _2430;
                uint _2708;
                bool _2709;
                for (;;)
                {
                    _2708 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                    _2709 = _2708 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2709)
                    {
                        frontier_phi_77_pred = _2698;
                        frontier_phi_77_pred_1 = _2697;
                        frontier_phi_77_pred_2 = _2696;
                        frontier_phi_77_pred_3 = _2695;
                        frontier_phi_77_pred_4 = _2694;
                        frontier_phi_77_pred_5 = _2693;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        uint _2921 = _2708;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2991;
                        vec4 _3007;
                        float _3054;
                        bool _3055;
                        for (;;)
                        {
                            uint _2932 = ((_2699 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2978 = (_2932 * 40u) + 16u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2994 = (_2932 * 40u) + 20u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2932 * 40u) + 24u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3029 = (_2932 * 40u) + 28u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3054 = fma(_2263, _3042.z, fma(_2262, _3042.y, _3042.x * _2261)) + _3042.w;
                            _3055 = !((fma(_2263, _3023.z, fma(_2262, _3023.y, _3023.x * _2261)) + _3023.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3055)
                            {
                                float _3082 = _2947.x - _2261;
                                float _3083 = _2947.y - _2262;
                                float _3084 = _2947.z - _2263;
                                float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                                float _3088 = inversesqrt(_3085);
                                float _3089 = _3088 * _3082;
                                float _3090 = _3088 * _3083;
                                float _3091 = _3088 * _3084;
                                float _3095 = 1.0 - (_3085 / (_2948 * _2948));
                                float _4211 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3100 = sqrt(_3085) * _2963.w;
                                float _3102 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                                float _3103 = _3102 * _3102;
                                float _3106 = ((1.0 - _3103) * dot(vec3(_3089, _3090, _3091), vec3(_463, _466, _469))) + _3103;
                                float _3109 = _3100 * _3100;
                                float _3113 = (fma(_2263, _2991.z, fma(_2262, _2991.y, _2991.x * _2261)) + _2991.w) / _3054;
                                float _3114 = (fma(_2263, _3007.z, fma(_2262, _3007.y, _3007.x * _2261)) + _3007.w) / _3054;
                                float _3118 = 1.0 - dot(vec2(_3113, _3114), vec2(_3113, _3114));
                                float _4227 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3120 = _3119 * (((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3096) / ((_3109 * 0.699999988079071044921875) + 1.0));
                                float _3132 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                                float _3133 = 1.0 - _539;
                                float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                                float _3141 = _3140 * _3140;
                                float _3142 = _3141 * _3141;
                                float _3143 = _3089 - _2559;
                                float _3144 = _3090 - _2560;
                                float _3145 = _3091 - _2561;
                                float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                                float _3153 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2559, (-0.0) - _2560, (-0.0) - _2561));
                                float _4238 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3156 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3157 = dot(vec3(_463, _466, _469), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                                float _4249 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                                float _3165 = _3102 * _3141;
                                float _3166 = _3165 * _3165;
                                float _3172 = ((1.0 - _3166) * dot(vec3(_463, _466, _469), vec3(_3089, _3090, _3091))) + _3166;
                                float _4260 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3174 = 1.0 - _3141;
                                float _3184 = (0.5 / (((_3173 * ((_3156 * _3174) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3173 * _3174) + _3141) * _3156))) * _3173;
                                float _4271 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3194 = (_3119 * _3096) * (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) / ((_3164 * _3164) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3120 * _2963.y;
                                frontier_phi_83_pred_1 = _3120 * _2963.x;
                                frontier_phi_83_pred_2 = _3194 * _2975.z;
                                frontier_phi_83_pred_3 = _3194 * _2975.y;
                                frontier_phi_83_pred_4 = _3194 * _2975.x;
                                frontier_phi_83_pred_5 = _3120 * _2963.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_83_pred;
                            _3201 = frontier_phi_83_pred_1;
                            _3200 = frontier_phi_83_pred_2;
                            _3199 = frontier_phi_83_pred_3;
                            _3198 = frontier_phi_83_pred_4;
                            _3203 = frontier_phi_83_pred_5;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2907;
                        frontier_phi_77_pred_1 = _2906;
                        frontier_phi_77_pred_2 = _2905;
                        frontier_phi_77_pred_3 = _2904;
                        frontier_phi_77_pred_4 = _2903;
                        frontier_phi_77_pred_5 = _2902;
                    }
                    _2544 = frontier_phi_77_pred;
                    _2542 = frontier_phi_77_pred_1;
                    _2540 = frontier_phi_77_pred_2;
                    _2538 = frontier_phi_77_pred_3;
                    _2536 = frontier_phi_77_pred_4;
                    _2534 = frontier_phi_77_pred_5;
                    uint _2700 = _2699 + 1u;
                    if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2693 = _2534;
                        _2694 = _2536;
                        _2695 = _2538;
                        _2696 = _2540;
                        _2697 = _2542;
                        _2698 = _2544;
                        _2699 = _2700;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2538;
                frontier_phi_58_59_ladder_1 = _2544;
                frontier_phi_58_59_ladder_2 = _2542;
                frontier_phi_58_59_ladder_3 = _2540;
                frontier_phi_58_59_ladder_4 = _2536;
                frontier_phi_58_59_ladder_5 = _2534;
            }
            else
            {
                frontier_phi_58_59_ladder = _2417;
                frontier_phi_58_59_ladder_1 = _2423;
                frontier_phi_58_59_ladder_2 = _2421;
                frontier_phi_58_59_ladder_3 = _2419;
                frontier_phi_58_59_ladder_4 = _2415;
                frontier_phi_58_59_ladder_5 = _2413;
            }
            _2533 = frontier_phi_58_59_ladder_5;
            _2535 = frontier_phi_58_59_ladder_4;
            _2537 = frontier_phi_58_59_ladder;
            _2539 = frontier_phi_58_59_ladder_3;
            _2541 = frontier_phi_58_59_ladder_2;
            _2543 = frontier_phi_58_59_ladder_1;
        }
        float _2548 = isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0));
        _2320 = (_2548 * _2539) + _1753;
        _2322 = (_2548 * _2541) + _1755;
        _2324 = (_2548 * _2543) + _1757;
        _2326 = ((_2533 * _508) * _2548) + _2101;
        _2328 = ((_2535 * _510) * _2548) + _2103;
        _2330 = ((_2537 * _511) * _2548) + _2105;
    }
    else
    {
        _2320 = _1753;
        _2322 = _1755;
        _2324 = _1757;
        _2326 = _2101;
        _2328 = _2103;
        _2330 = _2105;
    }
    float _4287 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4298 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4309 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4320 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _2348 = ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2320 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _523))) + ((_2326 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2349 = ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2322 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _523))) + ((_2328 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2350 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2324 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _523))) + ((_2330 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2351 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2358 = cbInstanceData._m0[_482 + 6u].w * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)));
    float _2363 = _442 / cbSceneParam._m0[86u].x;
    float _2364 = _443 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _364 : (isnan(_364) ? cbSceneParam._m0[77u].w : min(_364, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_364 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_364) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _364 : min(cbSceneParam._m0[80u].w, _364));
        float _2439 = _2438 / _364;
        float _2450 = _2439 * _415;
        float _2451 = _416 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2453 = _2439 * _417;
        float _2455 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2456 = _2455 + cbSceneParam._m0[79u].w;
        float _2457 = cbSceneParam._m0[79u].w - _2451;
        float _2463 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2453 * _2453));
        float _2466 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2463;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2650;
        if (abs((_2452 - _2455) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2650 = ((((_2456 > 0.0) ? exp2(_2471 * _2456) : (2.0 - exp2(_2473 * _2456))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2466;
        }
        else
        {
            float _2594 = 1.0 / cbSceneParam._m0[80u].x;
            float _2595 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : max(_2456, _2457));
            float _2596 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : min(_2456, _2457));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            _2650 = ((abs(_2463 / _2452) * cbSceneParam._m0[80u].y) * ((((_2605 - _2606) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0))))) * _2594)) - ((exp2(_2473 * _2605) - exp2(_2473 * _2606)) * _2594))) + (_2466 * cbSceneParam._m0[80u].z);
        }
        vec4 _2652 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2661 = exp2((_2650 * (-1.44269502162933349609375)) * (1.0 - _2652.w));
        float _2662 = log2(_2661);
        float _2678 = log2(_2383);
        _2475 = (exp2(_2678 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2662 * cbSceneParam._m0[78u].x)) * _2652.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2477 = (exp2(_2678 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2662 * cbSceneParam._m0[78u].y)) * _2652.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2479 = (exp2(_2678 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2662 * cbSceneParam._m0[78u].z)) * _2652.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2481 = _2661 * _2383;
    }
    else
    {
        _2475 = _2380;
        _2477 = _2381;
        _2479 = _2382;
        _2481 = _2383;
    }
    bool _2688;
    vec4 _2491;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2522;
    bool _2532;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2495 = log2(_2481);
        float _2502 = exp2(_2495 * cbSceneParam._m0[78u].x) * _2351;
        float _2503 = exp2(_2495 * cbSceneParam._m0[78u].y) * _2352;
        float _2504 = exp2(_2495 * cbSceneParam._m0[78u].z) * _2353;
        float _2511 = _431 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2494 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = _2518 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2477)));
        _2521 = _2518 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2479)));
        _2522 = _2511 * 0.999000012874603271484375;
        _2532 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2532)
        {
            if ((cbInstanceData._m0[_482 + 7u].x + _2522) < 0.5)
            {
                _2688 = true;
                break;
            }
        }
        uint _2629 = _484 + uint(_2491.w);
        if ((cbInstanceData._m0[_2629].w < 1.0) && ((cbInstanceData._m0[_2629].w + _2522) < 0.5))
        {
            _2688 = true;
            break;
        }
        if ((_2515 + _292) < _2513.x)
        {
            _2688 = true;
            break;
        }
        _2688 = false;
        break;
    }
    float _2893;
    if (_2688)
    {
        discard_state = true;
        _2893 = 0.0;
    }
    else
    {
        _2893 = _2358;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2893;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2358;
    discard_exit();
}


