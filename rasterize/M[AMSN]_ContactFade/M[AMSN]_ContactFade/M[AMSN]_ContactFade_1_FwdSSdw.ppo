#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _862;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _218 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _224 = _218.w;
    float _231 = cbMtdParam._m0[9u].x * _218.x;
    float _232 = cbMtdParam._m0[9u].y * _218.y;
    float _233 = cbMtdParam._m0[9u].z * _218.z;
    vec4 _246 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _248 = _246.x;
    bool _255 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _272 = ((_255 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _248)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _248))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3227 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _275 = 1.0 - (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)));
    float _3238 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _276 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _284 = _224 - (((_276 * _276) * _224) * (3.0 - (_276 * 2.0)));
    vec4 _299 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _303 = _299.z;
    float _306 = (_299.x * 2.0) + (-1.0);
    float _308 = (_299.y * 2.0) + (-1.0);
    float _309 = dot(vec2(_306, _308), vec2(_306, _308));
    float _3249 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _314 = sqrt(1.0 - (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))));
    float _317 = fma(_314, _194 * NORMAL.x, fma(_308, _201 * TANGENT.x, (_187 * _180) * _306));
    float _320 = fma(_314, _194 * NORMAL.y, fma(_308, _201 * TANGENT.y, (_187 * _181) * _306));
    float _323 = fma(_314, _194 * NORMAL.z, fma(_308, _201 * TANGENT.z, (_187 * _182) * _306));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _328 = _327 * _317;
    float _329 = _327 * _320;
    float _330 = _327 * _323;
    float _3260 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _331 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _332 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3293 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3304 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3315 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _336 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _341 = _255 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _431 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _434 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = (_447 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3326 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _462 = 1.0 - _336;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _336;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _336;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _336;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_328, _329, _330), vec3(_399, _400, _401));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _328) - _399;
    float _497 = (_492 * _329) - _400;
    float _498 = (_492 * _330) - _401;
    float _502 = abs(dot(vec3(_399, _400, _401), vec3(_328, _329, _330)));
    float _3359 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_332);
    float _516 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _522 = (1.0 - _516) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _523 = _516 * _504;
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _861;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _590 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _594 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _619 = _551 + _328;
        float _620 = _555 + _329;
        float _621 = _559 + _330;
        float _631 = fma(_621, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619)) - _586;
        float _632 = fma(_621, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619)) - _590;
        float _633 = fma(_621, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619)) - _594;
        float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
        float _650 = ((_637 * _631) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_586 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_637 * _632) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_590 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_637 * _633) / cbModelParam._m0[34u].z) + ((((((_594 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        float _689 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_655.x + (-0.5));
        float _691 = _689 * (_655.y + (-0.5));
        float _692 = _689 * (_655.z + (-0.5));
        float _699 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_662.x + (-0.5));
        float _701 = _699 * (_662.y + (-0.5));
        float _702 = _699 * (_662.z + (-0.5));
        float _709 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_669.x + (-0.5));
        float _711 = _709 * (_669.y + (-0.5));
        float _712 = _709 * (_669.z + (-0.5));
        float _719 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_676.x + (-0.5));
        float _721 = _719 * (_676.y + (-0.5));
        float _722 = _719 * (_676.z + (-0.5));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = _690 * 0.5;
        float _727 = _700 * 0.5;
        float _728 = _710 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _743 = (dot(vec3(_328, _329, _330), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _753 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3407 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_755 + 1.0))) + _760) * _723;
        float _770 = _691 * 0.5;
        float _771 = _701 * 0.5;
        float _772 = _711 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _786 = (dot(vec3(_328, _329, _330), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _795 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3440 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_797 + 1.0))) + _802) * _724;
        float _812 = _692 * 0.5;
        float _813 = _702 * 0.5;
        float _814 = _712 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_328, _329, _330), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3473 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_839 + 1.0))) + _844) * _725;
        _861 = _692;
        _863 = _691;
        _864 = _690;
        _865 = _702;
        _866 = _701;
        _867 = _700;
        _868 = _712;
        _869 = _711;
        _870 = _710;
        _871 = _725;
        _872 = _724;
        _873 = _723;
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
    }
    else
    {
        _861 = _862;
        _863 = _862;
        _864 = _862;
        _865 = _862;
        _866 = _862;
        _867 = _862;
        _868 = _862;
        _869 = _862;
        _870 = _862;
        _871 = _862;
        _872 = _862;
        _873 = _862;
        _874 = 0.0;
        _875 = 0.0;
        _876 = 0.0;
    }
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _902 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _906 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _910 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _933 = _551 + _328;
        float _934 = _555 + _329;
        float _935 = _559 + _330;
        float _945 = fma(_935, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933)) - _902;
        float _946 = fma(_935, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933)) - _906;
        float _947 = fma(_935, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933)) - _910;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_902 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_906 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[35u].z) + ((((((_910 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1001 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_968.x + (-0.5));
        float _1003 = _1001 * (_968.y + (-0.5));
        float _1004 = _1001 * (_968.z + (-0.5));
        float _1011 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_975.x + (-0.5));
        float _1013 = _1011 * (_975.y + (-0.5));
        float _1014 = _1011 * (_975.z + (-0.5));
        float _1021 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_982.x + (-0.5));
        float _1023 = _1021 * (_982.y + (-0.5));
        float _1024 = _1021 * (_982.z + (-0.5));
        float _1031 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_989.x + (-0.5));
        float _1033 = _1031 * (_989.y + (-0.5));
        float _1034 = _1031 * (_989.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_328, _329, _330), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3536 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1065 + 1.0))) + _1070) * _1035;
        float _1080 = _1003 * 0.5;
        float _1081 = _1013 * 0.5;
        float _1082 = _1023 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_328, _329, _330), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3569 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1107 + 1.0))) + _1112) * _1036;
        float _1122 = _1004 * 0.5;
        float _1123 = _1014 * 0.5;
        float _1124 = _1024 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_328, _329, _330), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3602 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1149 + 1.0))) + _1154) * _1037;
        _1171 = _1004;
        _1172 = _1003;
        _1173 = _1002;
        _1174 = _1014;
        _1175 = _1013;
        _1176 = _1012;
        _1177 = _1024;
        _1178 = _1023;
        _1179 = _1022;
        _1180 = _1037;
        _1181 = _1036;
        _1182 = _1035;
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _862;
        _1172 = _862;
        _1173 = _862;
        _1174 = _862;
        _1175 = _862;
        _1176 = _862;
        _1177 = _862;
        _1178 = _862;
        _1179 = _862;
        _1180 = _862;
        _1181 = _862;
        _1182 = _862;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1218 = fma(_1197, cbSceneParam._m0[89u].z, fma(_1196, cbSceneParam._m0[89u].y, _1195 * cbSceneParam._m0[89u].x));
    float _1221 = fma(_1197, cbSceneParam._m0[90u].z, fma(_1196, cbSceneParam._m0[90u].y, _1195 * cbSceneParam._m0[90u].x));
    float _1224 = fma(_1197, cbSceneParam._m0[91u].z, fma(_1196, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1195));
    float _1239 = _496 * 0.5;
    float _1240 = _497 * 0.5;
    float _1241 = _498 * 0.5;
    float _1242 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1245 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1248 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1282;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1255 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_861, _865, _868, _871));
        float _1259 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_863, _866, _869, _872));
        float _1263 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_864, _867, _870, _873));
        float _1270 = dot(vec4(cbModelParam._m0[39u]), vec4(_1239, _1240, _1241, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1293;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1284 = dot(vec4(cbModelParam._m0[40u]), vec4(_1239, _1240, _1241, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1297 = (_1293 * cbModelParam._m0[1u].x) + (_1282 * (1.0 - cbModelParam._m0[1u].x));
    float _1307 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _332);
    float _1308 = isnan(_1307) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1307 : min(cbModelParam._m0[25u].z, _1307));
    float _1390;
    float _1392;
    float _1394;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1357 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1361 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1365 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1368 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1371 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1374 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1402;
        if (_1368 > 0.0)
        {
            _1402 = abs((1.0 - _1357) / _1368);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1357 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1402 = frontier_phi_14_12_ladder;
        }
        float _1631;
        if (_1371 > 0.0)
        {
            _1631 = abs((1.0 - _1361) / _1371);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1361 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1631 = frontier_phi_23_19_ladder;
        }
        float _1888;
        if (_1374 > 0.0)
        {
            _1888 = abs((1.0 - _1365) / _1374);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1365 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1888 = frontier_phi_35_30_ladder;
        }
        float _1890 = isnan(_1631) ? _1402 : (isnan(_1402) ? _1631 : min(_1402, _1631));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1368) + _1357;
        float _1896 = (_1891 * _1371) + _1361;
        float _1897 = (_1891 * _1374) + _1365;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1898;
        float _1902 = _1898 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 > _1902) || ((_1896 < _1900) || ((_1895 < _1900) || (_1895 > _1902))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1897, cbModelParam._m0[9u].z, fma(_1896, cbModelParam._m0[9u].y, _1895 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1897, cbModelParam._m0[10u].z, fma(_1896, cbModelParam._m0[10u].y, _1895 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1897, cbModelParam._m0[11u].z, fma(_1896, cbModelParam._m0[11u].y, _1895 * cbModelParam._m0[11u].x))), _1308);
            frontier_phi_13_35_ladder = _2025.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2025.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2025.x * cbModelParam._m0[1u].y;
        }
        _1390 = frontier_phi_13_35_ladder_2;
        _1392 = frontier_phi_13_35_ladder_1;
        _1394 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1308);
        _1390 = _1378.x * cbModelParam._m0[1u].y;
        _1392 = _1378.y * cbModelParam._m0[1u].y;
        _1394 = _1378.z * cbModelParam._m0[1u].y;
    }
    float _1398 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _332);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1398 : min(cbModelParam._m0[25u].w, _1398));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1456 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1460 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1464 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1467 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1470 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1473 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1636;
        if (_1467 > 0.0)
        {
            _1636 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1636 = frontier_phi_25_21_ladder;
        }
        float _1915;
        if (_1470 > 0.0)
        {
            _1915 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1915 = frontier_phi_37_32_ladder;
        }
        float _2128;
        if (_1473 > 0.0)
        {
            _2128 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2128 = frontier_phi_46_43_ladder;
        }
        float _2130 = isnan(_1915) ? _1636 : (isnan(_1636) ? _1915 : min(_1636, _1915));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1467) + _1456;
        float _2136 = (_2131 * _1470) + _1460;
        float _2137 = (_2131 * _1473) + _1464;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2138;
        float _2141 = _2138 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2137 > _2141) || ((_2137 < _2139) || ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 < _2139) || (_2135 > _2141))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2137, cbModelParam._m0[17u].z, fma(_2136, cbModelParam._m0[17u].y, _2135 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2137, cbModelParam._m0[18u].z, fma(_2136, cbModelParam._m0[18u].y, _2135 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2137, cbModelParam._m0[19u].z, fma(_2136, cbModelParam._m0[19u].y, _2135 * cbModelParam._m0[19u].x))), _1399);
            frontier_phi_22_46_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1492 = frontier_phi_22_46_ladder_2;
        _1494 = frontier_phi_22_46_ladder_1;
        _1496 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1399);
        _1492 = _1476.x * cbModelParam._m0[1u].z;
        _1494 = _1476.y * cbModelParam._m0[1u].z;
        _1496 = _1476.z * cbModelParam._m0[1u].z;
    }
    float _1509 = (((_522 * _473) + _523) * _488) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1511 = (((_522 * _475) + _523) * _488) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1513 = (((_522 * _476) + _523) * _488) * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1516 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, _1509 * cbSceneParam._m0[91u].x));
    vec4 _1530 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1532 = _1530.w;
    float _1544 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1532);
    float _1545 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1532);
    float _1546 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1532);
    uvec4 _1550 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1552 = _1550.x * 14u;
    uint _1553 = _1552 + 13u;
    float _1560 = _488 + (-1.0);
    float _1565 = (cbLight._m0[_1553].x * _1560) + 1.0;
    float _1566 = (cbLight._m0[_1553].y * _1560) + 1.0;
    float _1567 = (cbLight._m0[_1553].z * _1560) + 1.0;
    float _1568 = (cbLight._m0[_1553].w * _1560) + 1.0;
    uint _1569 = _1552 + 5u;
    float _1575 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1579 = _1552 + 4u;
    float _1589 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1593 = _1552 | 1u;
    float _1604 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_328, _329, _330));
    float _1607 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_328, _329, _330));
    float _3738 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _3749 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1612 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1614 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1621 = ((cbLight._m0[_1569].x * _1575) * _1614) + (((cbLight._m0[_1579].x * _1544) * _1589) * _1612);
    float _1622 = ((_1575 * cbLight._m0[_1569].y) * _1614) + (((cbLight._m0[_1579].y * _1545) * _1589) * _1612);
    float _1623 = ((_1575 * cbLight._m0[_1569].z) * _1614) + (((cbLight._m0[_1579].z * _1546) * _1589) * _1612);
    uvec4 _1628 = floatBitsToUint(cbLight._m0[_1552 + 12u]);
    bool _1630 = _1628.x == 0u;
    float _1641;
    float _1643;
    float _1645;
    if (_1630)
    {
        _1641 = _1621;
        _1643 = _1622;
        _1645 = _1623;
    }
    else
    {
        uint _1649 = _1552 + 6u;
        float _1665 = (dot(vec3(cbLight._m0[_1552 + 2u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _1666 = _1665 * _1665;
        float _3760 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1668 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1641 = (((cbLight._m0[_1649].x * 0.3183098733425140380859375) * _1667) * _1668) + _1621;
        _1643 = (((cbLight._m0[_1649].y * 0.3183098733425140380859375) * _1667) * _1668) + _1622;
        _1645 = (((cbLight._m0[_1649].z * 0.3183098733425140380859375) * _1667) * _1668) + _1623;
    }
    bool _1648 = _1628.y == 0u;
    float _1686;
    float _1688;
    float _1690;
    if (_1648)
    {
        _1686 = _1641;
        _1688 = _1643;
        _1690 = _1645;
    }
    else
    {
        uint _1859 = _1552 + 7u;
        float _1875 = (dot(vec3(cbLight._m0[_1552 + 3u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _3776 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1878 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1686 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1641;
        _1688 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1643;
        _1690 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1645;
    }
    uint _1693 = _1552 + 8u;
    float _1706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _332) * 0.949999988079071044921875);
    float _1707 = _1706 * _1706;
    float _1708 = cbLight._m0[_1552].x + _399;
    float _1709 = cbLight._m0[_1552].y + _400;
    float _1710 = cbLight._m0[_1552].z + _401;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1715 = _1714 * _1708;
    float _1716 = _1714 * _1709;
    float _1717 = _1714 * _1710;
    float _1718 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1552].xyz));
    float _3792 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1722 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1723 = dot(vec3(_328, _329, _330), vec3(_1715, _1716, _1717));
    float _3814 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1727 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1715, _1716, _1717));
    float _3825 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1731 = _1707 * _1707;
    float _1735 = ((_1726 * _1726) * (_1731 + (-1.0))) + 1.0;
    float _1743 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
    float _1744 = 0.959999978542327880859375 - _470;
    float _1746 = 0.959999978542327880859375 - _471;
    float _1747 = 0.959999978542327880859375 - _472;
    float _1754 = 1.0 - _1707;
    float _1765 = (0.5 / (((_1722 * ((_1721 * _1754) + _1707)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1754) + _1707) * _1721))) * _1721;
    float _3836 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1767 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1731 / ((_1735 * _1735) * 3.141590118408203125));
    uint _1781 = _1552 + 9u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1593].w)) * _332) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1593].x + _399;
    float _1795 = cbLight._m0[_1593].y + _400;
    float _1796 = cbLight._m0[_1593].z + _401;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1593].xyz));
    float _3847 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1808 = dot(vec3(_328, _329, _330), vec3(_1801, _1802, _1803));
    float _3858 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1801, _1802, _1803));
    float _3869 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1793 * _1793;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1827 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
    float _1834 = 1.0 - _1793;
    float _1844 = (0.5 / (((_1722 * ((_1807 * _1834) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1834) + _1793) * _1807))) * _1807;
    float _3880 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    float _1856 = (((((_1827 * _1744) + _473) * cbLight._m0[_1781].x) * _1846) * _1575) + ((((cbLight._m0[_1693].x * _1544) * ((_1743 * _1744) + _473)) * _1767) * _1589);
    float _1857 = (((((_1827 * _1746) + _475) * cbLight._m0[_1781].y) * _1846) * _1575) + ((((cbLight._m0[_1693].y * _1545) * ((_1743 * _1746) + _475)) * _1767) * _1589);
    float _1858 = (((((_1827 * _1747) + _476) * cbLight._m0[_1781].z) * _1846) * _1575) + ((((cbLight._m0[_1693].z * _1546) * ((_1743 * _1747) + _476)) * _1767) * _1589);
    float _1920;
    float _1922;
    float _1924;
    if (_1630)
    {
        _1920 = _1856;
        _1922 = _1857;
        _1924 = _1858;
    }
    else
    {
        uint _1926 = _1552 + 2u;
        uint _1930 = _1552 + 10u;
        float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _332) * 0.949999988079071044921875);
        float _1945 = _1944 * _1944;
        float _1946 = cbLight._m0[_1926].x + _399;
        float _1947 = cbLight._m0[_1926].y + _400;
        float _1948 = cbLight._m0[_1926].z + _401;
        float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
        float _1953 = _1952 * _1946;
        float _1954 = _1952 * _1947;
        float _1955 = _1952 * _1948;
        float _1956 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1926].xyz));
        float _3891 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1960 = dot(vec3(_328, _329, _330), vec3(_1953, _1954, _1955));
        float _3902 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1964 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_1953, _1954, _1955));
        float _3913 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1968 = _1945 * _1945;
        float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
        float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0);
        float _1986 = 1.0 - _1945;
        float _1996 = (0.5 / (((_1722 * ((_1959 * _1986) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1986) + _1945) * _1959))) * _1959;
        float _3924 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1998 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
        float _1999 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1920 = (((((_1979 * _1744) + _473) * cbLight._m0[_1930].x) * _1998) * _1999) + _1856;
        _1922 = (((((_1979 * _1746) + _475) * cbLight._m0[_1930].y) * _1998) * _1999) + _1857;
        _1924 = (((((_1979 * _1747) + _476) * cbLight._m0[_1930].z) * _1998) * _1999) + _1858;
    }
    float _2034;
    float _2036;
    float _2038;
    if (_1648)
    {
        _2034 = _1920;
        _2036 = _1922;
        _2038 = _1924;
    }
    else
    {
        uint _2045 = _1552 + 3u;
        uint _2049 = _1552 + 11u;
        float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _332) * 0.949999988079071044921875);
        float _2064 = _2063 * _2063;
        float _2065 = cbLight._m0[_2045].x + _399;
        float _2066 = cbLight._m0[_2045].y + _400;
        float _2067 = cbLight._m0[_2045].z + _401;
        float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
        float _2072 = _2071 * _2065;
        float _2073 = _2071 * _2066;
        float _2074 = _2071 * _2067;
        float _2075 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2045].xyz));
        float _3940 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2079 = dot(vec3(_328, _329, _330), vec3(_2072, _2073, _2074));
        float _3951 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2083 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2072, _2073, _2074));
        float _3962 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2087 = _2064 * _2064;
        float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
        float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
        float _2105 = 1.0 - _2064;
        float _2115 = (0.5 / (((_1722 * ((_2078 * _2105) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _2105) + _2064) * _2078))) * _2078;
        float _3973 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2117 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
        float _2118 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _2034 = (((((_2098 * _1744) + _473) * cbLight._m0[_2049].x) * _2117) * _2118) + _1920;
        _2036 = (((((_2098 * _1746) + _475) * cbLight._m0[_2049].y) * _2117) * _2118) + _1922;
        _2038 = (((((_2098 * _1747) + _476) * cbLight._m0[_2049].z) * _2117) * _2118) + _1924;
    }
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_1550.y == 0u)
    {
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2193;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2193;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2193;
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.x;
        uint _2220 = uint((float(_2208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2209))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2209)));
        float _2230 = (log2(_2196 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2231 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        uint _2234 = uint(isnan(14.0) ? _2231 : (isnan(_2231) ? 14.0 : min(_2231, 14.0)));
        uvec4 _2239 = texelFetch(g_lightClusterGridBuffer, int(((_2234 << 2u) + (_2220 << 6u)) >> 2u));
        uint _2240 = _2239.x;
        uint _2241 = _2208.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2241 >> 4u) & 15u)) + 4294967295u) & _2240) == 0u) || ((_2241 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            uint _2496 = 0u;
            uint _2505;
            bool _2506;
            for (;;)
            {
                _2505 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2496 << 2u)) >> 2u)).x;
                _2506 = _2505 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2506)
                {
                    frontier_phi_61_pred = _2490;
                    frontier_phi_61_pred_1 = _2495;
                    frontier_phi_61_pred_2 = _2494;
                    frontier_phi_61_pred_3 = _2493;
                    frontier_phi_61_pred_4 = _2492;
                    frontier_phi_61_pred_5 = _2491;
                }
                else
                {
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    uint _2620;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2494;
                    _2619 = _2495;
                    _2620 = _2505;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    for (;;)
                    {
                        uint _2624 = uint(findLSB(_2620)) + (_2496 << 5u);
                        uint _2621 = (_2620 + 4294967295u) & _2620;
                        uint _2626 = _2624 * 48u;
                        vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2626)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 3u)).x));
                        uint _2646 = (_2624 * 48u) + 4u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2665 = (_2624 * 48u) + 8u;
                        vec3 _2676 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x));
                        float _2680 = _2640.x - _2194;
                        float _2681 = _2640.y - _2195;
                        float _2682 = _2640.z - _2196;
                        float _2683 = dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682));
                        float _2686 = inversesqrt(_2683);
                        float _2687 = _2686 * _2680;
                        float _2688 = _2686 * _2681;
                        float _2689 = _2686 * _2682;
                        float _2690 = dot(vec3(_428, _431, _434), vec3(_2687, _2688, _2689));
                        float _2695 = 1.0 - (_2683 * _2640.w);
                        float _3999 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2696 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2697 = sqrt(_2683) * _2659.w;
                        float _2700 = 1.39999997615814208984375 / (_2697 + 1.39999997615814208984375);
                        float _2701 = _2700 * _2700;
                        float _2704 = ((1.0 - _2701) * _2690) + _2701;
                        float _2707 = _2697 * _2697;
                        float _2711 = ((isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0))) * _2696) / ((_2707 * 0.699999988079071044921875) + 1.0);
                        float _2715 = (-0.0) - _2194;
                        float _2716 = (-0.0) - _2195;
                        float _2717 = (-0.0) - _2196;
                        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
                        float _2722 = _2721 * _2715;
                        float _2723 = _2721 * _2716;
                        float _2724 = _2721 * _2717;
                        float _2732 = exp2(log2(1.0 / ((_2707 * 3.5) + 5.0)) * 0.25);
                        float _2733 = 1.0 - _504;
                        float _2740 = sqrt(1.0 - ((1.0 - (_2733 * _2733)) * (1.0 - (_2732 * _2732))));
                        float _2741 = _2740 * _2740;
                        float _2742 = _2741 * _2741;
                        float _2743 = _2722 + _2687;
                        float _2744 = _2723 + _2688;
                        float _2745 = _2724 + _2689;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2753 = dot(vec3(_428, _431, _434), vec3(_2722, _2723, _2724));
                        float _4015 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2756 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2757 = dot(vec3(_428, _431, _434), vec3(_2749 * _2743, _2749 * _2744, _2749 * _2745));
                        float _4026 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2760 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2764 = ((_2760 * _2760) * (_2742 + (-1.0))) + 1.0;
                        float _2765 = _2700 * _2741;
                        float _2766 = _2765 * _2765;
                        float _2769 = ((1.0 - _2766) * _2690) + _2766;
                        float _4037 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2770 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2771 = 1.0 - _2741;
                        float _2781 = (0.5 / (((_2770 * ((_2756 * _2771) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2770 * _2771) + _2741) * _2756))) * _2770;
                        float _4048 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2792 = (((_2742 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_2764 * _2764) * ((_2707 * 2.1991131305694580078125) + 3.141590118408203125))) * _2696;
                        _2549 = (_2711 * _2659.x) + _2617;
                        _2550 = (_2711 * _2659.y) + _2618;
                        _2551 = (_2711 * _2659.z) + _2619;
                        _2546 = (_2792 * _2676.x) + _2614;
                        _2547 = (_2792 * _2676.y) + _2615;
                        _2548 = (_2792 * _2676.z) + _2616;
                        if (_2621 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2550;
                            _2619 = _2551;
                            _2620 = _2621;
                        }
                    }
                    frontier_phi_61_pred = _2546;
                    frontier_phi_61_pred_1 = _2551;
                    frontier_phi_61_pred_2 = _2550;
                    frontier_phi_61_pred_3 = _2549;
                    frontier_phi_61_pred_4 = _2548;
                    frontier_phi_61_pred_5 = _2547;
                }
                _2347 = frontier_phi_61_pred;
                _2357 = frontier_phi_61_pred_1;
                _2355 = frontier_phi_61_pred_2;
                _2353 = frontier_phi_61_pred_3;
                _2351 = frontier_phi_61_pred_4;
                _2349 = frontier_phi_61_pred_5;
                uint _2497 = _2496 + 1u;
                if (_2497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2490 = _2347;
                    _2491 = _2349;
                    _2492 = _2351;
                    _2493 = _2353;
                    _2494 = _2355;
                    _2495 = _2357;
                    _2496 = _2497;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((4294967295u << _2363) & _2240) == 0u)
        {
            _2458 = _2346;
            _2460 = _2348;
            _2462 = _2350;
            _2464 = _2352;
            _2466 = _2354;
            _2468 = _2356;
        }
        else
        {
            float _2483 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
            float _2484 = _2483 * _2194;
            float _2485 = _2483 * _2195;
            float _2486 = _2483 * _2196;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2597 = _2346;
                float _2598 = _2348;
                float _2599 = _2350;
                float _2600 = _2352;
                float _2601 = _2354;
                float _2602 = _2356;
                uint _2603 = _2363;
                uint _2612;
                bool _2613;
                for (;;)
                {
                    _2612 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2603 << 2u)) >> 2u)).x;
                    _2613 = _2612 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2613)
                    {
                        frontier_phi_67_pred = _2600;
                        frontier_phi_67_pred_1 = _2601;
                        frontier_phi_67_pred_2 = _2602;
                        frontier_phi_67_pred_3 = _2599;
                        frontier_phi_67_pred_4 = _2598;
                        frontier_phi_67_pred_5 = _2597;
                    }
                    else
                    {
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        float _2814 = _2601;
                        float _2815 = _2602;
                        uint _2816 = _2612;
                        uint _2817;
                        vec4 _2842;
                        float _2843;
                        vec4 _2858;
                        vec3 _2870;
                        vec4 _2886;
                        vec4 _2902;
                        float _2949;
                        bool _2950;
                        for (;;)
                        {
                            uint _2827 = ((_2603 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2816));
                            _2817 = (_2816 + 4294967295u) & _2816;
                            uint _2829 = _2827 * 40u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            _2843 = _2842.w;
                            uint _2845 = (_2827 * 40u) + 4u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2860 = (_2827 * 40u) + 8u;
                            _2870 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x));
                            uint _2873 = (_2827 * 40u) + 16u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2889 = (_2827 * 40u) + 20u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2905 = (_2827 * 40u) + 24u;
                            vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2924 = (_2827 * 40u) + 28u;
                            vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            _2949 = fma(_2196, _2937.z, fma(_2195, _2937.y, _2937.x * _2194)) + _2937.w;
                            _2950 = !((fma(_2196, _2918.z, fma(_2195, _2918.y, _2918.x * _2194)) + _2918.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2950)
                            {
                                float _2977 = _2842.x - _2194;
                                float _2978 = _2842.y - _2195;
                                float _2979 = _2842.z - _2196;
                                float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                                float _2983 = inversesqrt(_2980);
                                float _2984 = _2983 * _2977;
                                float _2985 = _2983 * _2978;
                                float _2986 = _2983 * _2979;
                                float _2990 = 1.0 - (_2980 / (_2843 * _2843));
                                float _4059 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2991 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _2995 = sqrt(_2980) * _2858.w;
                                float _2997 = 1.39999997615814208984375 / (_2995 + 1.39999997615814208984375);
                                float _2998 = _2997 * _2997;
                                float _3001 = ((1.0 - _2998) * dot(vec3(_2984, _2985, _2986), vec3(_428, _431, _434))) + _2998;
                                float _3004 = _2995 * _2995;
                                float _3008 = (fma(_2196, _2886.z, fma(_2195, _2886.y, _2886.x * _2194)) + _2886.w) / _2949;
                                float _3009 = (fma(_2196, _2902.z, fma(_2195, _2902.y, _2902.x * _2194)) + _2902.w) / _2949;
                                float _3013 = 1.0 - dot(vec2(_3008, _3009), vec2(_3008, _3009));
                                float _4075 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3015 = _3014 * (((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2991) / ((_3004 * 0.699999988079071044921875) + 1.0));
                                float _3027 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                                float _3028 = 1.0 - _504;
                                float _3035 = sqrt(1.0 - ((1.0 - (_3028 * _3028)) * (1.0 - (_3027 * _3027))));
                                float _3036 = _3035 * _3035;
                                float _3037 = _3036 * _3036;
                                float _3038 = _2984 - _2484;
                                float _3039 = _2985 - _2485;
                                float _3040 = _2986 - _2486;
                                float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                                float _3048 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2484, (-0.0) - _2485, (-0.0) - _2486));
                                float _4086 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3052 = dot(vec3(_428, _431, _434), vec3(_3044 * _3038, _3044 * _3039, _3044 * _3040));
                                float _4097 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3055 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3059 = ((_3055 * _3055) * (_3037 + (-1.0))) + 1.0;
                                float _3060 = _2997 * _3036;
                                float _3061 = _3060 * _3060;
                                float _3067 = ((1.0 - _3061) * dot(vec3(_428, _431, _434), vec3(_2984, _2985, _2986))) + _3061;
                                float _4108 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3069 = 1.0 - _3036;
                                float _3079 = (0.5 / (((_3068 * ((_3051 * _3069) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3036) * _3051))) * _3068;
                                float _4119 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3089 = (_3014 * _2991) * (((_3037 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_3059 * _3059) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3089 * _2870.x;
                                frontier_phi_73_pred_1 = _3089 * _2870.y;
                                frontier_phi_73_pred_2 = _3015 * _2858.z;
                                frontier_phi_73_pred_3 = _3015 * _2858.y;
                                frontier_phi_73_pred_4 = _3015 * _2858.x;
                                frontier_phi_73_pred_5 = _3089 * _2870.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3093 = frontier_phi_73_pred;
                            _3094 = frontier_phi_73_pred_1;
                            _3098 = frontier_phi_73_pred_2;
                            _3097 = frontier_phi_73_pred_3;
                            _3096 = frontier_phi_73_pred_4;
                            _3095 = frontier_phi_73_pred_5;
                            _2800 = _3096 + _2813;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            if (_2817 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2817;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2800;
                        frontier_phi_67_pred_1 = _2801;
                        frontier_phi_67_pred_2 = _2802;
                        frontier_phi_67_pred_3 = _2799;
                        frontier_phi_67_pred_4 = _2798;
                        frontier_phi_67_pred_5 = _2797;
                    }
                    _2465 = frontier_phi_67_pred;
                    _2467 = frontier_phi_67_pred_1;
                    _2469 = frontier_phi_67_pred_2;
                    _2463 = frontier_phi_67_pred_3;
                    _2461 = frontier_phi_67_pred_4;
                    _2459 = frontier_phi_67_pred_5;
                    uint _2604 = _2603 + 1u;
                    if (_2604 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2597 = _2459;
                        _2598 = _2461;
                        _2599 = _2463;
                        _2600 = _2465;
                        _2601 = _2467;
                        _2602 = _2469;
                        _2603 = _2604;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2467;
                frontier_phi_55_56_ladder_1 = _2469;
                frontier_phi_55_56_ladder_2 = _2465;
                frontier_phi_55_56_ladder_3 = _2463;
                frontier_phi_55_56_ladder_4 = _2461;
                frontier_phi_55_56_ladder_5 = _2459;
            }
            else
            {
                frontier_phi_55_56_ladder = _2354;
                frontier_phi_55_56_ladder_1 = _2356;
                frontier_phi_55_56_ladder_2 = _2352;
                frontier_phi_55_56_ladder_3 = _2350;
                frontier_phi_55_56_ladder_4 = _2348;
                frontier_phi_55_56_ladder_5 = _2346;
            }
            _2458 = frontier_phi_55_56_ladder_5;
            _2460 = frontier_phi_55_56_ladder_4;
            _2462 = frontier_phi_55_56_ladder_3;
            _2464 = frontier_phi_55_56_ladder_2;
            _2466 = frontier_phi_55_56_ladder;
            _2468 = frontier_phi_55_56_ladder_1;
        }
        float _2473 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2253 = (_2473 * _2464) + _1686;
        _2255 = (_2473 * _2466) + _1688;
        _2257 = (_2473 * _2468) + _1690;
        _2259 = ((_2458 * _473) * _2473) + _2034;
        _2261 = ((_2460 * _475) * _2473) + _2036;
        _2263 = ((_2462 * _476) * _2473) + _2038;
    }
    else
    {
        _2253 = _1686;
        _2255 = _1688;
        _2257 = _1690;
        _2259 = _2034;
        _2261 = _2036;
        _2263 = _2038;
    }
    float _4135 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4146 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4157 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4168 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _2281 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2253 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _488))) + ((_2259 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2282 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2255 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _488))) + ((_2261 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2283 = ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2257 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _488))) + ((_2263 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2291 = cbInstanceData._m0[_447 + 6u].w * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)));
    float _2296 = _406 / cbSceneParam._m0[86u].x;
    float _2297 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2313 = _2311.x;
    float _2314 = _2311.y;
    float _2315 = _2311.z;
    float _2316 = _2311.w;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2371 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2372 = _2371 / _341;
        float _2383 = _2372 * _392;
        float _2384 = _393 * _2372;
        float _2385 = (-0.0) - _2384;
        float _2386 = _2372 * _394;
        float _2388 = (cbSceneParam._m0[77u].w * _2385) / _2371;
        float _2389 = _2388 + cbSceneParam._m0[79u].w;
        float _2390 = cbSceneParam._m0[79u].w - _2384;
        float _2396 = sqrt(((_2383 * _2383) + (_2384 * _2384)) + (_2386 * _2386));
        float _2399 = (1.0 - (cbSceneParam._m0[77u].w / _2371)) * _2396;
        float _2404 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2406 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2559;
        if (abs((_2385 - _2388) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2559 = ((((_2389 > 0.0) ? exp2(_2404 * _2389) : (2.0 - exp2(_2406 * _2389))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2399;
        }
        else
        {
            float _2519 = 1.0 / cbSceneParam._m0[80u].x;
            float _2520 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : max(_2389, _2390));
            float _2521 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : min(_2389, _2390));
            float _2530 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : min(_2520, 0.0));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            _2559 = ((abs(_2396 / _2385) * cbSceneParam._m0[80u].y) * ((((_2530 - _2531) * 2.0) - ((exp2(_2404 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)))) - exp2(_2404 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0))))) * _2519)) - ((exp2(_2406 * _2530) - exp2(_2406 * _2531)) * _2519))) + (_2399 * cbSceneParam._m0[80u].z);
        }
        vec4 _2561 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, 1.0), 0.0);
        float _2570 = exp2((_2559 * (-1.44269502162933349609375)) * (1.0 - _2561.w));
        float _2571 = log2(_2570);
        float _2587 = log2(_2316);
        _2408 = (exp2(_2587 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2571 * cbSceneParam._m0[78u].x)) * _2561.x) / cbSceneParam._m0[78u].x)) + _2313;
        _2410 = (exp2(_2587 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2571 * cbSceneParam._m0[78u].y)) * _2561.y) / cbSceneParam._m0[78u].y)) + _2314;
        _2412 = (exp2(_2587 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2571 * cbSceneParam._m0[78u].z)) * _2561.z) / cbSceneParam._m0[78u].z)) + _2315;
        _2414 = _2570 * _2316;
    }
    else
    {
        _2408 = _2313;
        _2410 = _2314;
        _2412 = _2315;
        _2414 = _2316;
    }
    float _2426 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2427 = _2426 == 3.0;
    float _2428 = log2(_2414);
    float _2435 = exp2(_2428 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2436 = exp2(_2428 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0)));
    float _2437 = exp2(_2428 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0)));
    float _2446 = (_2426 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2446 * (_2427 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.y = _2446 * (_2427 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.z = _2446 * (_2427 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2412)));
    SV_Target.w = _2291;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2291;
}


