#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _260 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _250);
    float _261 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _250);
    float _262 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _250);
    vec4 _275 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _281 = _275.w;
    float _287 = cbMtdParam._m0[9u].x * _275.x;
    float _288 = cbMtdParam._m0[9u].y * _275.y;
    float _289 = cbMtdParam._m0[9u].z * _275.z;
    vec4 _301 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _303 = _301.x;
    bool _310 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _327 = ((_310 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _303)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _303))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3414 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _330 = 1.0 - (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)));
    float _3425 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _339 = _281 - (((_331 * _331) * _281) * (3.0 - (_331 * 2.0)));
    vec4 _351 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _357 = cbMtdParam._m0[10u].x + _351.x;
    vec4 _369 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _373 = _369.z;
    float _376 = (_369.x * 2.0) + (-1.0);
    float _378 = (_369.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_376, _378), vec2(_376, _378));
    float _3436 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    float _387 = fma(_384, _196 * NORMAL.x, fma(_378, _203 * TANGENT.x, (_189 * _182) * _376));
    float _390 = fma(_384, _196 * NORMAL.y, fma(_378, _203 * TANGENT.y, (_189 * _183) * _376));
    float _393 = fma(_384, _196 * NORMAL.z, fma(_378, _203 * TANGENT.z, (_189 * _184) * _376));
    float _397 = inversesqrt(dot(vec3(_387, _390, _393), vec3(_387, _390, _393)));
    float _398 = _397 * _387;
    float _399 = _397 * _390;
    float _400 = _397 * _393;
    float _3447 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _401 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _402 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _403 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _404 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _405 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _406 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _424 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _425 = _424 * _260;
    float _426 = _424 * _261;
    float _427 = _424 * _262;
    float _434 = abs(exp2(log2(dot(vec3(_398, _399, _400), vec3(_425, _426, _427))) * cbMatDynParam._m0[12u].x));
    float _435 = isnan(0.100000001490116119384765625) ? _434 : (isnan(_434) ? 0.100000001490116119384765625 : max(_434, 0.100000001490116119384765625));
    float _441 = ((isnan(0.699999988079071044921875) ? _435 : (isnan(_435) ? 0.699999988079071044921875 : min(_435, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _464 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3523 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3534 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _472 = dot(vec3(_398, _399, _400), vec3(0.0, -1.0, 0.0));
    float _3545 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _482 = (_475 * _403) * cbMatDynParam._m0[11u].x;
    float _484 = (_475 * _404) * cbMatDynParam._m0[11u].y;
    float _486 = (_475 * _405) * cbMatDynParam._m0[11u].z;
    float _496 = dot(vec3(_425, _426, _427), vec3(_398, _399, _400)) * 2.0;
    float _506 = dot(vec3((-0.0) - (_425 - (_496 * _398)), (-0.0) - (_426 - (_496 * _399)), (-0.0) - (_427 - (_496 * _400))), vec3(0.0, -1.0, 0.0));
    float _3556 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _513 = exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 4.0);
    float _528 = _310 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _577 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _568);
    float _578 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _568);
    float _579 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _568);
    float _583 = inversesqrt(dot(vec3(_577, _578, _579), vec3(_577, _578, _579)));
    float _584 = _577 * _583;
    float _585 = _578 * _583;
    float _586 = _579 * _583;
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _612 = fma(_400, cbSceneParam._m0[5u].z, fma(_399, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _398));
    float _615 = fma(_400, cbSceneParam._m0[6u].z, fma(_399, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _398));
    float _618 = fma(_400, cbSceneParam._m0[7u].z, fma(_399, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _398));
    uint _631 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = _631 + 9u;
    uint _634 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _640 = ((cbMatDynParam._m0[9u].x * _403) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_634].x;
    float _641 = ((cbMatDynParam._m0[9u].y * _404) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_634].y;
    float _642 = ((cbMatDynParam._m0[9u].z * _405) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_634].z;
    float _3567 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _646 = 1.0 - _406;
    float _647 = _643 * _646;
    float _648 = _644 * _646;
    float _649 = _645 * _646;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _406;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _406;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _406;
    float _657 = _654 + 0.039999999105930328369140625;
    float _659 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _672 = _669.x * TEXCOORD.z;
    float _673 = dot(vec3(_398, _399, _400), vec3(_584, _585, _586));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _398) - _584;
    float _681 = (_676 * _399) - _585;
    float _682 = (_676 * _400) - _586;
    float _686 = abs(dot(vec3(_584, _585, _586), vec3(_398, _399, _400)));
    float _3600 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _688 = sqrt(_402);
    float _699 = exp2((_688 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_688 * 3.0));
    float _705 = (1.0 - _699) * ((_688 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _688;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _398;
        float _803 = _738 + _399;
        float _804 = _742 + _400;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_398, _399, _400), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3648 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_398, _399, _400), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3681 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_398, _399, _400), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3714 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _398;
        float _1117 = _738 + _399;
        float _1118 = _742 + _400;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_398, _399, _400), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3777 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_398, _399, _400), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3810 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_398, _399, _400), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3843 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _680 * 0.5;
    float _1423 = _681 * 0.5;
    float _1424 = _682 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _402);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1554 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1557 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1585 = frontier_phi_14_12_ladder;
        }
        float _1792;
        if (_1554 > 0.0)
        {
            _1792 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1792 = frontier_phi_23_19_ladder;
        }
        float _2046;
        if (_1557 > 0.0)
        {
            _2046 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2046 = frontier_phi_35_30_ladder;
        }
        float _2048 = isnan(_1792) ? _1585 : (isnan(_1585) ? _1792 : min(_1585, _1792));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1551) + _1540;
        float _2054 = (_2049 * _1554) + _1544;
        float _2055 = (_2049 * _1557) + _1548;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2058 = (-1.0) - _2056;
        float _2060 = _2056 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2055 > _2060) || ((_2055 < _2058) || ((_2054 > _2060) || ((_2054 < _2058) || ((_2053 < _2058) || (_2053 > _2060))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2055, cbModelParam._m0[9u].z, fma(_2054, cbModelParam._m0[9u].y, _2053 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2055, cbModelParam._m0[10u].z, fma(_2054, cbModelParam._m0[10u].y, _2053 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2055, cbModelParam._m0[11u].z, fma(_2054, cbModelParam._m0[11u].y, _2053 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_13_35_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_13_35_ladder_2;
        _1575 = frontier_phi_13_35_ladder_1;
        _1577 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1491);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _402);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1653 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1656 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1797;
        if (_1650 > 0.0)
        {
            _1797 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1797 = frontier_phi_25_21_ladder;
        }
        float _2073;
        if (_1653 > 0.0)
        {
            _2073 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2073 = frontier_phi_37_32_ladder;
        }
        float _2286;
        if (_1656 > 0.0)
        {
            _2286 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2286 = frontier_phi_46_43_ladder;
        }
        float _2288 = isnan(_2073) ? _1797 : (isnan(_1797) ? _2073 : min(_1797, _2073));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1650) + _1639;
        float _2294 = (_2289 * _1653) + _1643;
        float _2295 = (_2289 * _1656) + _1647;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_22_46_ladder = _2520.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2520.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2520.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_22_46_ladder_2;
        _1677 = frontier_phi_22_46_ladder_1;
        _1679 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1582);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_705 * _657) + _706) * _672) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_705 * _659) + _706) * _672) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1696 = (((_705 * _660) + _706) * _672) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_631 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _672 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1751 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1755 = _1717 | 1u;
    float _1766 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_398, _399, _400));
    float _1769 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_398, _399, _400));
    float _3979 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _3990 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1774 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1776 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1783 = ((cbLight._m0[_1734].x * _1740) * _1776) + ((cbLight._m0[_1744].x * _1751) * _1774);
    float _1784 = ((_1740 * cbLight._m0[_1734].y) * _1776) + ((_1751 * cbLight._m0[_1744].y) * _1774);
    float _1785 = ((_1740 * cbLight._m0[_1734].z) * _1776) + ((_1751 * cbLight._m0[_1744].z) * _1774);
    uvec4 _1789 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1791 = _1789.x == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1791)
    {
        _1802 = _1783;
        _1804 = _1784;
        _1806 = _1785;
    }
    else
    {
        uint _1810 = _1717 + 6u;
        float _1826 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1827 = _1826 * _1826;
        float _4001 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1829 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1802 = (((cbLight._m0[_1810].x * 0.3183098733425140380859375) * _1828) * _1829) + _1783;
        _1804 = (((cbLight._m0[_1810].y * 0.3183098733425140380859375) * _1828) * _1829) + _1784;
        _1806 = (((cbLight._m0[_1810].z * 0.3183098733425140380859375) * _1828) * _1829) + _1785;
    }
    bool _1809 = _1789.y == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1809)
    {
        _1847 = _1802;
        _1849 = _1804;
        _1851 = _1806;
    }
    else
    {
        uint _2017 = _1717 + 7u;
        float _2033 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4017 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2036 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1847 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1802;
        _1849 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1804;
        _1851 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1806;
    }
    uint _1854 = _1717 + 8u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _402) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1717].x + _584;
    float _1870 = cbLight._m0[_1717].y + _585;
    float _1871 = cbLight._m0[_1717].z + _586;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1717].xyz));
    float _4033 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _1883 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1884 = dot(vec3(_398, _399, _400), vec3(_1876, _1877, _1878));
    float _4055 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1876, _1877, _1878));
    float _4066 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1868 * _1868;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
    float _1905 = 0.959999978542327880859375 - _654;
    float _1907 = 0.959999978542327880859375 - _655;
    float _1908 = 0.959999978542327880859375 - _656;
    float _1915 = 1.0 - _1868;
    float _1926 = (0.5 / (((_1883 * ((_1882 * _1915) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1915) + _1868) * _1882))) * _1882;
    float _4077 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    uint _1939 = _1717 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _402) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1755].x + _584;
    float _1953 = cbLight._m0[_1755].y + _585;
    float _1954 = cbLight._m0[_1755].z + _586;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1755].xyz));
    float _4088 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1966 = dot(vec3(_398, _399, _400), vec3(_1959, _1960, _1961));
    float _4099 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1959, _1960, _1961));
    float _4110 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1985 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _1992 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1883 * ((_1965 * _1992) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1992) + _1951) * _1965))) * _1965;
    float _4121 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2014 = (((((_1985 * _1905) + _657) * cbLight._m0[_1939].x) * _2004) * _1740) + (((((_1904 * _1905) + _657) * cbLight._m0[_1854].x) * _1928) * _1751);
    float _2015 = (((((_1985 * _1907) + _659) * cbLight._m0[_1939].y) * _2004) * _1740) + (((((_1904 * _1907) + _659) * cbLight._m0[_1854].y) * _1928) * _1751);
    float _2016 = (((((_1985 * _1908) + _660) * cbLight._m0[_1939].z) * _2004) * _1740) + (((((_1904 * _1908) + _660) * cbLight._m0[_1854].z) * _1928) * _1751);
    float _2078;
    float _2080;
    float _2082;
    if (_1791)
    {
        _2078 = _2014;
        _2080 = _2015;
        _2082 = _2016;
    }
    else
    {
        uint _2084 = _1717 + 2u;
        uint _2088 = _1717 + 10u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _402) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _584;
        float _2105 = cbLight._m0[_2084].y + _585;
        float _2106 = cbLight._m0[_2084].z + _586;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2084].xyz));
        float _4132 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2118 = dot(vec3(_398, _399, _400), vec3(_2111, _2112, _2113));
        float _4143 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4154 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
        float _2144 = 1.0 - _2103;
        float _2154 = (0.5 / (((_1883 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2144) + _2103) * _2117))) * _2117;
        float _4165 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2078 = (((((_2137 * _1905) + _657) * cbLight._m0[_2088].x) * _2156) * _2157) + _2014;
        _2080 = (((((_2137 * _1907) + _659) * cbLight._m0[_2088].y) * _2156) * _2157) + _2015;
        _2082 = (((((_2137 * _1908) + _660) * cbLight._m0[_2088].z) * _2156) * _2157) + _2016;
    }
    float _2192;
    float _2194;
    float _2196;
    if (_1809)
    {
        _2192 = _2078;
        _2194 = _2080;
        _2196 = _2082;
    }
    else
    {
        uint _2203 = _1717 + 3u;
        uint _2207 = _1717 + 11u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _402) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _584;
        float _2224 = cbLight._m0[_2203].y + _585;
        float _2225 = cbLight._m0[_2203].z + _586;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2203].xyz));
        float _4181 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2237 = dot(vec3(_398, _399, _400), vec3(_2230, _2231, _2232));
        float _4192 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4203 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_1883 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2263) + _2222) * _2236))) * _2236;
        float _4214 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2192 = (((((_2256 * _1905) + _657) * cbLight._m0[_2207].x) * _2275) * _2276) + _2078;
        _2194 = (((((_2256 * _1907) + _659) * cbLight._m0[_2207].y) * _2275) * _2276) + _2080;
        _2196 = (((((_2256 * _1908) + _660) * cbLight._m0[_2207].z) * _2275) * _2276) + _2082;
    }
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_1715.y == 0u)
    {
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2351;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2351;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2351;
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.x;
        uint _2378 = uint((float(_2366.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2367))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2367)));
        float _2388 = (log2(_2354 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2389 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        uint _2392 = uint(isnan(14.0) ? _2389 : (isnan(_2389) ? 14.0 : min(_2389, 14.0)));
        uvec4 _2397 = texelFetch(g_lightClusterGridBuffer, int(((_2392 << 2u) + (_2378 << 6u)) >> 2u));
        uint _2398 = _2397.x;
        uint _2399 = _2366.z;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((((1u << ((_2399 >> 4u) & 15u)) + 4294967295u) & _2398) == 0u) || ((_2399 & 240u) == 0u))
        {
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
        }
        else
        {
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            uint _2684 = 0u;
            uint _2693;
            bool _2694;
            for (;;)
            {
                _2693 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2684 << 2u)) >> 2u)).x;
                _2694 = _2693 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2694)
                {
                    frontier_phi_61_pred = _2678;
                    frontier_phi_61_pred_1 = _2683;
                    frontier_phi_61_pred_2 = _2682;
                    frontier_phi_61_pred_3 = _2681;
                    frontier_phi_61_pred_4 = _2680;
                    frontier_phi_61_pred_5 = _2679;
                }
                else
                {
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    uint _2808;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2693;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    for (;;)
                    {
                        uint _2812 = uint(findLSB(_2808)) + (_2684 << 5u);
                        uint _2809 = (_2808 + 4294967295u) & _2808;
                        uint _2814 = _2812 * 48u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2834 = (_2812 * 48u) + 4u;
                        vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2853 = (_2812 * 48u) + 8u;
                        vec3 _2864 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x));
                        float _2868 = _2828.x - _2352;
                        float _2869 = _2828.y - _2353;
                        float _2870 = _2828.z - _2354;
                        float _2871 = dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870));
                        float _2874 = inversesqrt(_2871);
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2878 = dot(vec3(_612, _615, _618), vec3(_2875, _2876, _2877));
                        float _2883 = 1.0 - (_2871 * _2828.w);
                        float _4240 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2885 = sqrt(_2871) * _2847.w;
                        float _2888 = 1.39999997615814208984375 / (_2885 + 1.39999997615814208984375);
                        float _2889 = _2888 * _2888;
                        float _2892 = ((1.0 - _2889) * _2878) + _2889;
                        float _2895 = _2885 * _2885;
                        float _2898 = ((isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))) * _2884) / ((_2895 * 0.699999988079071044921875) + 1.0);
                        float _2902 = (-0.0) - _2352;
                        float _2903 = (-0.0) - _2353;
                        float _2904 = (-0.0) - _2354;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2919 = exp2(log2(1.0 / ((_2895 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _688;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2909 + _2875;
                        float _2931 = _2910 + _2876;
                        float _2932 = _2911 + _2877;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_612, _615, _618), vec3(_2909, _2910, _2911));
                        float _4256 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2944 = dot(vec3(_612, _615, _618), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4267 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2888 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2878) + _2953;
                        float _4278 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4289 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_2951 * _2951) * ((_2895 * 2.1991131305694580078125) + 3.141590118408203125))) * _2884;
                        _2737 = (_2898 * _2847.x) + _2805;
                        _2738 = (_2898 * _2847.y) + _2806;
                        _2739 = (_2898 * _2847.z) + _2807;
                        _2734 = (_2979 * _2864.x) + _2802;
                        _2735 = (_2979 * _2864.y) + _2803;
                        _2736 = (_2979 * _2864.z) + _2804;
                        if (_2809 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2809;
                        }
                    }
                    frontier_phi_61_pred = _2734;
                    frontier_phi_61_pred_1 = _2739;
                    frontier_phi_61_pred_2 = _2738;
                    frontier_phi_61_pred_3 = _2737;
                    frontier_phi_61_pred_4 = _2736;
                    frontier_phi_61_pred_5 = _2735;
                }
                _2526 = frontier_phi_61_pred;
                _2536 = frontier_phi_61_pred_1;
                _2534 = frontier_phi_61_pred_2;
                _2532 = frontier_phi_61_pred_3;
                _2530 = frontier_phi_61_pred_4;
                _2528 = frontier_phi_61_pred_5;
                uint _2685 = _2684 + 1u;
                if (_2685 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2678 = _2526;
                    _2679 = _2528;
                    _2680 = _2530;
                    _2681 = _2532;
                    _2682 = _2534;
                    _2683 = _2536;
                    _2684 = _2685;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
        }
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.z;
        uint _2542 = (_2540 >> 8u) & 15u;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        if (((4294967295u << _2542) & _2398) == 0u)
        {
            _2646 = _2525;
            _2648 = _2527;
            _2650 = _2529;
            _2652 = _2531;
            _2654 = _2533;
            _2656 = _2535;
        }
        else
        {
            float _2671 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
            float _2672 = _2671 * _2352;
            float _2673 = _2671 * _2353;
            float _2674 = _2671 * _2354;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2542 < ((_2540 >> 12u) & 15u))
            {
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2785 = _2525;
                float _2786 = _2527;
                float _2787 = _2529;
                float _2788 = _2531;
                float _2789 = _2533;
                float _2790 = _2535;
                uint _2791 = _2542;
                uint _2800;
                bool _2801;
                for (;;)
                {
                    _2800 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                    _2801 = _2800 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2801)
                    {
                        frontier_phi_67_pred = _2788;
                        frontier_phi_67_pred_1 = _2789;
                        frontier_phi_67_pred_2 = _2790;
                        frontier_phi_67_pred_3 = _2787;
                        frontier_phi_67_pred_4 = _2786;
                        frontier_phi_67_pred_5 = _2785;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _2997 = _2785;
                        float _2998 = _2786;
                        float _2999 = _2787;
                        float _3000 = _2788;
                        float _3001 = _2789;
                        float _3002 = _2790;
                        uint _3003 = _2800;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3073;
                        vec4 _3089;
                        float _3136;
                        bool _3137;
                        for (;;)
                        {
                            uint _3014 = ((_2791 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3060 = (_3014 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3076 = (_3014 * 40u) + 20u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3092 = (_3014 * 40u) + 24u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3111 = (_3014 * 40u) + 28u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3136 = fma(_2354, _3124.z, fma(_2353, _3124.y, _3124.x * _2352)) + _3124.w;
                            _3137 = !((fma(_2354, _3105.z, fma(_2353, _3105.y, _3105.x * _2352)) + _3105.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3137)
                            {
                                float _3164 = _3029.x - _2352;
                                float _3165 = _3029.y - _2353;
                                float _3166 = _3029.z - _2354;
                                float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                                float _3170 = inversesqrt(_3167);
                                float _3171 = _3170 * _3164;
                                float _3172 = _3170 * _3165;
                                float _3173 = _3170 * _3166;
                                float _3177 = 1.0 - (_3167 / (_3030 * _3030));
                                float _4300 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3182 = sqrt(_3167) * _3045.w;
                                float _3184 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                                float _3185 = _3184 * _3184;
                                float _3188 = ((1.0 - _3185) * dot(vec3(_3171, _3172, _3173), vec3(_612, _615, _618))) + _3185;
                                float _3191 = _3182 * _3182;
                                float _3195 = (fma(_2354, _3073.z, fma(_2353, _3073.y, _3073.x * _2352)) + _3073.w) / _3136;
                                float _3196 = (fma(_2354, _3089.z, fma(_2353, _3089.y, _3089.x * _2352)) + _3089.w) / _3136;
                                float _3200 = 1.0 - dot(vec2(_3195, _3196), vec2(_3195, _3196));
                                float _4316 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3202 = _3201 * (((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3178) / ((_3191 * 0.699999988079071044921875) + 1.0));
                                float _3214 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                                float _3215 = 1.0 - _688;
                                float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                                float _3223 = _3222 * _3222;
                                float _3224 = _3223 * _3223;
                                float _3225 = _3171 - _2672;
                                float _3226 = _3172 - _2673;
                                float _3227 = _3173 - _2674;
                                float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                                float _3235 = dot(vec3(_612, _615, _618), vec3((-0.0) - _2672, (-0.0) - _2673, (-0.0) - _2674));
                                float _4327 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3239 = dot(vec3(_612, _615, _618), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                                float _4338 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                                float _3247 = _3184 * _3223;
                                float _3248 = _3247 * _3247;
                                float _3254 = ((1.0 - _3248) * dot(vec3(_612, _615, _618), vec3(_3171, _3172, _3173))) + _3248;
                                float _4349 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3256 = 1.0 - _3223;
                                float _3266 = (0.5 / (((_3255 * ((_3238 * _3256) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3223) * _3238))) * _3255;
                                float _4360 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3276 = (_3201 * _3178) * (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3246 * _3246) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3276 * _3057.x;
                                frontier_phi_73_pred_1 = _3276 * _3057.y;
                                frontier_phi_73_pred_2 = _3202 * _3045.z;
                                frontier_phi_73_pred_3 = _3202 * _3045.y;
                                frontier_phi_73_pred_4 = _3202 * _3045.x;
                                frontier_phi_73_pred_5 = _3276 * _3057.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3280 = frontier_phi_73_pred;
                            _3281 = frontier_phi_73_pred_1;
                            _3285 = frontier_phi_73_pred_2;
                            _3284 = frontier_phi_73_pred_3;
                            _3283 = frontier_phi_73_pred_4;
                            _3282 = frontier_phi_73_pred_5;
                            _2987 = _3283 + _3000;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            _2984 = _3280 + _2997;
                            _2985 = _3281 + _2998;
                            _2986 = _3282 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2988;
                        frontier_phi_67_pred_2 = _2989;
                        frontier_phi_67_pred_3 = _2986;
                        frontier_phi_67_pred_4 = _2985;
                        frontier_phi_67_pred_5 = _2984;
                    }
                    _2653 = frontier_phi_67_pred;
                    _2655 = frontier_phi_67_pred_1;
                    _2657 = frontier_phi_67_pred_2;
                    _2651 = frontier_phi_67_pred_3;
                    _2649 = frontier_phi_67_pred_4;
                    _2647 = frontier_phi_67_pred_5;
                    uint _2792 = _2791 + 1u;
                    if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2785 = _2647;
                        _2786 = _2649;
                        _2787 = _2651;
                        _2788 = _2653;
                        _2789 = _2655;
                        _2790 = _2657;
                        _2791 = _2792;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2655;
                frontier_phi_55_56_ladder_1 = _2657;
                frontier_phi_55_56_ladder_2 = _2653;
                frontier_phi_55_56_ladder_3 = _2651;
                frontier_phi_55_56_ladder_4 = _2649;
                frontier_phi_55_56_ladder_5 = _2647;
            }
            else
            {
                frontier_phi_55_56_ladder = _2533;
                frontier_phi_55_56_ladder_1 = _2535;
                frontier_phi_55_56_ladder_2 = _2531;
                frontier_phi_55_56_ladder_3 = _2529;
                frontier_phi_55_56_ladder_4 = _2527;
                frontier_phi_55_56_ladder_5 = _2525;
            }
            _2646 = frontier_phi_55_56_ladder_5;
            _2648 = frontier_phi_55_56_ladder_4;
            _2650 = frontier_phi_55_56_ladder_3;
            _2652 = frontier_phi_55_56_ladder_2;
            _2654 = frontier_phi_55_56_ladder;
            _2656 = frontier_phi_55_56_ladder_1;
        }
        float _2661 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2411 = (_2661 * _2652) + _1847;
        _2413 = (_2661 * _2654) + _1849;
        _2415 = (_2661 * _2656) + _1851;
        _2417 = ((_2646 * _657) * _2661) + _2192;
        _2419 = ((_2648 * _659) * _2661) + _2194;
        _2421 = ((_2650 * _660) * _2661) + _2196;
    }
    else
    {
        _2411 = _1847;
        _2413 = _1849;
        _2415 = _1851;
        _2417 = _2192;
        _2419 = _2194;
        _2421 = _2196;
    }
    uint _2427 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _2433 = cbInstanceData._m0[_2427].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _441) + cbMatDynParam._m0[7u].x) + (((_482 - (_482 * _406)) + (cbMatDynParam._m0[11u].x * _513)) * cbMatDynParam._m0[9u].x));
    float _2434 = cbInstanceData._m0[_2427].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _441) + cbMatDynParam._m0[7u].y) + (((_484 - (_484 * _406)) + (cbMatDynParam._m0[11u].y * _513)) * cbMatDynParam._m0[9u].y));
    float _2435 = cbInstanceData._m0[_2427].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _441) + cbMatDynParam._m0[7u].z) + (((_486 - (_486 * _406)) + (cbMatDynParam._m0[11u].z * _513)) * cbMatDynParam._m0[9u].z));
    float _4376 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4387 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4398 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4409 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _2453 = (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2411 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _672))) + ((_2417 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2433;
    float _2455 = (_2434 + ((_2419 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2413 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _672)));
    float _2457 = (_2435 + ((_2421 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2415 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _672)));
    float _2465 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) - _468) * _441) + _468));
    float _2470 = cbInstanceData._m0[_631 + 6u].w * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)));
    float _2475 = _591 / cbSceneParam._m0[86u].x;
    float _2476 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2490 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2475, _2476, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2492 = _2490.x;
    float _2493 = _2490.y;
    float _2494 = _2490.z;
    float _2495 = _2490.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _2550 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _2551 = _2550 / _528;
        float _2562 = _2551 * _577;
        float _2563 = _578 * _2551;
        float _2564 = (-0.0) - _2563;
        float _2565 = _2551 * _579;
        float _2567 = (cbSceneParam._m0[77u].w * _2564) / _2550;
        float _2568 = _2567 + cbSceneParam._m0[79u].w;
        float _2569 = cbSceneParam._m0[79u].w - _2563;
        float _2575 = sqrt(((_2562 * _2562) + (_2563 * _2563)) + (_2565 * _2565));
        float _2578 = (1.0 - (cbSceneParam._m0[77u].w / _2550)) * _2575;
        float _2583 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2585 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2747;
        if (abs((_2564 - _2567) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2747 = ((((_2568 > 0.0) ? exp2(_2583 * _2568) : (2.0 - exp2(_2585 * _2568))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2578;
        }
        else
        {
            float _2707 = 1.0 / cbSceneParam._m0[80u].x;
            float _2708 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : max(_2568, _2569));
            float _2709 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : min(_2568, _2569));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            float _2719 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : min(_2709, 0.0));
            _2747 = ((abs(_2575 / _2564) * cbSceneParam._m0[80u].y) * ((((_2718 - _2719) * 2.0) - ((exp2(_2583 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0)))) - exp2(_2583 * (isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))))) * _2707)) - ((exp2(_2585 * _2718) - exp2(_2585 * _2719)) * _2707))) + (_2578 * cbSceneParam._m0[80u].z);
        }
        vec4 _2749 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2475, _2476, 1.0), 0.0);
        float _2758 = exp2((_2747 * (-1.44269502162933349609375)) * (1.0 - _2749.w));
        float _2759 = log2(_2758);
        float _2775 = log2(_2495);
        _2587 = (exp2(_2775 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].x)) * _2749.x) / cbSceneParam._m0[78u].x)) + _2492;
        _2589 = (exp2(_2775 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].y)) * _2749.y) / cbSceneParam._m0[78u].y)) + _2493;
        _2591 = (exp2(_2775 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].z)) * _2749.z) / cbSceneParam._m0[78u].z)) + _2494;
        _2593 = _2758 * _2495;
    }
    else
    {
        _2587 = _2492;
        _2589 = _2493;
        _2591 = _2494;
        _2593 = _2495;
    }
    float _2605 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2606 = _2605 == 3.0;
    float _2607 = log2(_2593);
    float _2611 = exp2(_2607 * cbSceneParam._m0[78u].x);
    float _2612 = exp2(_2607 * cbSceneParam._m0[78u].y);
    float _2613 = exp2(_2607 * cbSceneParam._m0[78u].z);
    float _2614 = _2611 * (isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0)));
    float _2615 = _2612 * (isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0)));
    float _2616 = _2613 * (isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0)));
    float _2625 = (_2605 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2625 * (_2606 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.y = _2625 * (_2606 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.z = _2625 * (_2606 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.w = _2470;
    SV_Target_1.x = ((_2465 * _2433) * _2611) * _2625;
    SV_Target_1.y = ((_2465 * _2434) * _2612) * _2625;
    SV_Target_1.z = ((_2465 * _2435) * _2613) * _2625;
    SV_Target_1.w = _2470;
}


