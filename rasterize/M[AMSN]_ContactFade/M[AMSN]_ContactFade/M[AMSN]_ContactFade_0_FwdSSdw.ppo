#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.w;
    float _235 = cbMtdParam._m0[9u].x * _222.x;
    float _236 = cbMtdParam._m0[9u].y * _222.y;
    float _237 = cbMtdParam._m0[9u].z * _222.z;
    vec4 _250 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _252 = _250.x;
    bool _259 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _276 = ((_259 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _252)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _252))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3246 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _279 = 1.0 - (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)));
    float _3257 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _280 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _288 = _228 - (((_280 * _280) * _228) * (3.0 - (_280 * 2.0)));
    vec4 _300 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _306 = cbMtdParam._m0[10u].x + _300.x;
    vec4 _318 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _322 = _318.z;
    float _325 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3268 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))));
    float _336 = fma(_333, _198 * NORMAL.x, fma(_327, _205 * TANGENT.x, (_191 * _184) * _325));
    float _339 = fma(_333, _198 * NORMAL.y, fma(_327, _205 * TANGENT.y, (_191 * _185) * _325));
    float _342 = fma(_333, _198 * NORMAL.z, fma(_327, _205 * TANGENT.z, (_191 * _186) * _325));
    float _346 = inversesqrt(dot(vec3(_336, _339, _342), vec3(_336, _339, _342)));
    float _347 = _346 * _336;
    float _348 = _346 * _339;
    float _349 = _346 * _342;
    float _3279 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _350 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _351 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3312 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3323 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3334 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _355 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _360 = _259 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _411 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _401);
    float _412 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _401);
    float _413 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _401);
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _411 * _417;
    float _419 = _412 * _417;
    float _420 = _413 * _417;
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _447 = fma(_349, cbSceneParam._m0[5u].z, fma(_348, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _347));
    float _450 = fma(_349, cbSceneParam._m0[6u].z, fma(_348, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _347));
    float _453 = fma(_349, cbSceneParam._m0[7u].z, fma(_348, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _347));
    uint _466 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = (_466 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _475 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_469].x;
    float _476 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_469].y;
    float _477 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_469].z;
    float _3345 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _481 = 1.0 - _355;
    float _482 = _478 * _481;
    float _483 = _479 * _481;
    float _484 = _480 * _481;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _355;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _355;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _355;
    float _492 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    vec4 _504 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _507 = _504.x * TEXCOORD.z;
    float _508 = dot(vec3(_347, _348, _349), vec3(_418, _419, _420));
    float _511 = _508 * 2.0;
    float _515 = (_511 * _347) - _418;
    float _516 = (_511 * _348) - _419;
    float _517 = (_511 * _349) - _420;
    float _521 = abs(dot(vec3(_418, _419, _420), vec3(_347, _348, _349)));
    float _3378 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _523 = sqrt(_351);
    float _535 = exp2((_523 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_523 * 3.0));
    float _541 = (1.0 - _535) * ((_523 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _523;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _609 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _613 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _638 = _570 + _347;
        float _639 = _574 + _348;
        float _640 = _578 + _349;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_347, _348, _349), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3426 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_347, _348, _349), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3459 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_347, _348, _349), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3492 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _925 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _929 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _952 = _570 + _347;
        float _953 = _574 + _348;
        float _954 = _578 + _349;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_347, _348, _349), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3555 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_347, _348, _349), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3588 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_347, _348, _349), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3621 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _881;
        _1191 = _881;
        _1192 = _881;
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _894)) + _894;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _515 * 0.5;
    float _1259 = _516 * 0.5;
    float _1260 = _517 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _884, _887, _890));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_882, _885, _888, _891));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_883, _886, _889, _892));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _351);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_517, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515));
        float _1390 = fma(_517, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515));
        float _1393 = fma(_517, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515));
        float _1421;
        if (_1387 > 0.0)
        {
            _1421 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1421 = frontier_phi_14_12_ladder;
        }
        float _1650;
        if (_1390 > 0.0)
        {
            _1650 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1650 = frontier_phi_23_19_ladder;
        }
        float _1907;
        if (_1393 > 0.0)
        {
            _1907 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1907 = frontier_phi_35_30_ladder;
        }
        float _1909 = isnan(_1650) ? _1421 : (isnan(_1421) ? _1650 : min(_1421, _1650));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1387) + _1376;
        float _1915 = (_1910 * _1390) + _1380;
        float _1916 = (_1910 * _1393) + _1384;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_13_35_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_13_35_ladder_2;
        _1411 = frontier_phi_13_35_ladder_1;
        _1413 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_515, _516, _517), _1327);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1417 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _351);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1417 : min(cbModelParam._m0[25u].w, _1417));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1475 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1479 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1483 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1486 = fma(_517, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515));
        float _1489 = fma(_517, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515));
        float _1492 = fma(_517, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515));
        float _1655;
        if (_1486 > 0.0)
        {
            _1655 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1655 = frontier_phi_25_21_ladder;
        }
        float _1934;
        if (_1489 > 0.0)
        {
            _1934 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1934 = frontier_phi_37_32_ladder;
        }
        float _2147;
        if (_1492 > 0.0)
        {
            _2147 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2147 = frontier_phi_46_43_ladder;
        }
        float _2149 = isnan(_1934) ? _1655 : (isnan(_1655) ? _1934 : min(_1655, _1934));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1486) + _1475;
        float _2155 = (_2150 * _1489) + _1479;
        float _2156 = (_2150 * _1492) + _1483;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2157;
        float _2160 = _2157 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2156 > _2160) || ((_2156 < _2158) || ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 < _2158) || (_2154 > _2160))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2156, cbModelParam._m0[17u].z, fma(_2155, cbModelParam._m0[17u].y, _2154 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2156, cbModelParam._m0[18u].z, fma(_2155, cbModelParam._m0[18u].y, _2154 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2156, cbModelParam._m0[19u].z, fma(_2155, cbModelParam._m0[19u].y, _2154 * cbModelParam._m0[19u].x))), _1418);
            frontier_phi_22_46_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1511 = frontier_phi_22_46_ladder_2;
        _1513 = frontier_phi_22_46_ladder_1;
        _1515 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_515, _516, _517), _1418);
        _1511 = _1495.x * cbModelParam._m0[1u].z;
        _1513 = _1495.y * cbModelParam._m0[1u].z;
        _1515 = _1495.z * cbModelParam._m0[1u].z;
    }
    float _1528 = (((_541 * _492) + _542) * _507) * ((cbModelParam._m0[1u].w * (_1511 - _1409)) + _1409);
    float _1530 = (((_541 * _494) + _542) * _507) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1532 = (((_541 * _495) + _542) * _507) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1535 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, _1528 * cbSceneParam._m0[91u].x));
    vec4 _1549 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_425, _426));
    float _1551 = _1549.w;
    float _1563 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1551);
    float _1564 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1551);
    float _1565 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1551);
    uvec4 _1569 = floatBitsToUint(cbInstanceData._m0[_466 + 5u]);
    uint _1571 = _1569.x * 14u;
    uint _1572 = _1571 + 13u;
    float _1579 = _507 + (-1.0);
    float _1584 = (cbLight._m0[_1572].x * _1579) + 1.0;
    float _1585 = (cbLight._m0[_1572].y * _1579) + 1.0;
    float _1586 = (cbLight._m0[_1572].z * _1579) + 1.0;
    float _1587 = (cbLight._m0[_1572].w * _1579) + 1.0;
    uint _1588 = _1571 + 5u;
    float _1594 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1598 = _1571 + 4u;
    float _1608 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1612 = _1571 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_347, _348, _349));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_347, _348, _349));
    float _3757 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3768 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1588].x * _1594) * _1633) + (((cbLight._m0[_1598].x * _1563) * _1608) * _1631);
    float _1641 = ((_1594 * cbLight._m0[_1588].y) * _1633) + (((cbLight._m0[_1598].y * _1564) * _1608) * _1631);
    float _1642 = ((_1594 * cbLight._m0[_1588].z) * _1633) + (((cbLight._m0[_1598].z * _1565) * _1608) * _1631);
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1571 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1649)
    {
        _1660 = _1640;
        _1662 = _1641;
        _1664 = _1642;
    }
    else
    {
        uint _1668 = _1571 + 6u;
        float _1684 = (dot(vec3(cbLight._m0[_1571 + 2u].xyz), vec3(_347, _348, _349)) * 0.5) + 0.5;
        float _1685 = _1684 * _1684;
        float _3779 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1687 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1660 = (((cbLight._m0[_1668].x * 0.3183098733425140380859375) * _1686) * _1687) + _1640;
        _1662 = (((cbLight._m0[_1668].y * 0.3183098733425140380859375) * _1686) * _1687) + _1641;
        _1664 = (((cbLight._m0[_1668].z * 0.3183098733425140380859375) * _1686) * _1687) + _1642;
    }
    bool _1667 = _1647.y == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1667)
    {
        _1705 = _1660;
        _1707 = _1662;
        _1709 = _1664;
    }
    else
    {
        uint _1878 = _1571 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1571 + 3u].xyz), vec3(_347, _348, _349)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3795 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1897 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1705 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1660;
        _1707 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1662;
        _1709 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1664;
    }
    uint _1712 = _1571 + 8u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _351) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1571].x + _418;
    float _1728 = cbLight._m0[_1571].y + _419;
    float _1729 = cbLight._m0[_1571].z + _420;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_1571].xyz));
    float _3811 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _1741 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1742 = dot(vec3(_347, _348, _349), vec3(_1734, _1735, _1736));
    float _3833 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1734, _1735, _1736));
    float _3844 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1750 = _1726 * _1726;
    float _1754 = ((_1745 * _1745) * (_1750 + (-1.0))) + 1.0;
    float _1762 = exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0);
    float _1763 = 0.959999978542327880859375 - _489;
    float _1765 = 0.959999978542327880859375 - _490;
    float _1766 = 0.959999978542327880859375 - _491;
    float _1773 = 1.0 - _1726;
    float _1784 = (0.5 / (((_1741 * ((_1740 * _1773) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1773) + _1726) * _1740))) * _1740;
    float _3855 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1750 / ((_1754 * _1754) * 3.141590118408203125));
    uint _1800 = _1571 + 9u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _351) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1612].x + _418;
    float _1814 = cbLight._m0[_1612].y + _419;
    float _1815 = cbLight._m0[_1612].z + _420;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_1612].xyz));
    float _3866 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1827 = dot(vec3(_347, _348, _349), vec3(_1820, _1821, _1822));
    float _3877 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1820, _1821, _1822));
    float _3888 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1812 * _1812;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1846 = exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0);
    float _1853 = 1.0 - _1812;
    float _1863 = (0.5 / (((_1741 * ((_1826 * _1853) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1853) + _1812) * _1826))) * _1826;
    float _3899 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    float _1875 = (((((_1846 * _1763) + _492) * cbLight._m0[_1800].x) * _1865) * _1594) + ((((cbLight._m0[_1712].x * _1563) * ((_1762 * _1763) + _492)) * _1786) * _1608);
    float _1876 = (((((_1846 * _1765) + _494) * cbLight._m0[_1800].y) * _1865) * _1594) + ((((cbLight._m0[_1712].y * _1564) * ((_1762 * _1765) + _494)) * _1786) * _1608);
    float _1877 = (((((_1846 * _1766) + _495) * cbLight._m0[_1800].z) * _1865) * _1594) + ((((cbLight._m0[_1712].z * _1565) * ((_1762 * _1766) + _495)) * _1786) * _1608);
    float _1939;
    float _1941;
    float _1943;
    if (_1649)
    {
        _1939 = _1875;
        _1941 = _1876;
        _1943 = _1877;
    }
    else
    {
        uint _1945 = _1571 + 2u;
        uint _1949 = _1571 + 10u;
        float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _351) * 0.949999988079071044921875);
        float _1964 = _1963 * _1963;
        float _1965 = cbLight._m0[_1945].x + _418;
        float _1966 = cbLight._m0[_1945].y + _419;
        float _1967 = cbLight._m0[_1945].z + _420;
        float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
        float _1972 = _1971 * _1965;
        float _1973 = _1971 * _1966;
        float _1974 = _1971 * _1967;
        float _1975 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_1945].xyz));
        float _3910 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1978 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1979 = dot(vec3(_347, _348, _349), vec3(_1972, _1973, _1974));
        float _3921 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1983 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_1972, _1973, _1974));
        float _3932 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1987 = _1964 * _1964;
        float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
        float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0);
        float _2005 = 1.0 - _1964;
        float _2015 = (0.5 / (((_1741 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2005) + _1964) * _1978))) * _1978;
        float _3943 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2017 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
        float _2018 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1939 = (((((_1998 * _1763) + _492) * cbLight._m0[_1949].x) * _2017) * _2018) + _1875;
        _1941 = (((((_1998 * _1765) + _494) * cbLight._m0[_1949].y) * _2017) * _2018) + _1876;
        _1943 = (((((_1998 * _1766) + _495) * cbLight._m0[_1949].z) * _2017) * _2018) + _1877;
    }
    float _2053;
    float _2055;
    float _2057;
    if (_1667)
    {
        _2053 = _1939;
        _2055 = _1941;
        _2057 = _1943;
    }
    else
    {
        uint _2064 = _1571 + 3u;
        uint _2068 = _1571 + 11u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _351) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _418;
        float _2085 = cbLight._m0[_2064].y + _419;
        float _2086 = cbLight._m0[_2064].z + _420;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_347, _348, _349), vec3(cbLight._m0[_2064].xyz));
        float _3959 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2098 = dot(vec3(_347, _348, _349), vec3(_2091, _2092, _2093));
        float _3970 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _3981 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * 5.0);
        float _2124 = 1.0 - _2083;
        float _2134 = (0.5 / (((_1741 * ((_2097 * _2124) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2124) + _2083) * _2097))) * _2097;
        float _3992 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2137 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _2053 = (((((_2117 * _1763) + _492) * cbLight._m0[_2068].x) * _2136) * _2137) + _1939;
        _2055 = (((((_2117 * _1765) + _494) * cbLight._m0[_2068].y) * _2136) * _2137) + _1941;
        _2057 = (((((_2117 * _1766) + _495) * cbLight._m0[_2068].z) * _2136) * _2137) + _1943;
    }
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    if (_1569.y == 0u)
    {
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2212;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2212;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2212;
        uvec4 _2227 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2228 = _2227.x;
        uint _2239 = uint((float(_2227.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2228))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2228)));
        float _2249 = (log2(_2215 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2250 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        uint _2253 = uint(isnan(14.0) ? _2250 : (isnan(_2250) ? 14.0 : min(_2250, 14.0)));
        uvec4 _2258 = texelFetch(g_lightClusterGridBuffer, int(((_2253 << 2u) + (_2239 << 6u)) >> 2u));
        uint _2259 = _2258.x;
        uint _2260 = _2227.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2260 >> 4u) & 15u)) + 4294967295u) & _2259) == 0u) || ((_2260 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            uint _2515 = 0u;
            uint _2524;
            bool _2525;
            for (;;)
            {
                _2524 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                _2525 = _2524 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2525)
                {
                    frontier_phi_61_pred = _2509;
                    frontier_phi_61_pred_1 = _2514;
                    frontier_phi_61_pred_2 = _2513;
                    frontier_phi_61_pred_3 = _2512;
                    frontier_phi_61_pred_4 = _2511;
                    frontier_phi_61_pred_5 = _2510;
                }
                else
                {
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    uint _2639;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2524;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    for (;;)
                    {
                        uint _2643 = uint(findLSB(_2639)) + (_2515 << 5u);
                        uint _2640 = (_2639 + 4294967295u) & _2639;
                        uint _2645 = _2643 * 48u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2665 = (_2643 * 48u) + 4u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2684 = (_2643 * 48u) + 8u;
                        vec3 _2695 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x));
                        float _2699 = _2659.x - _2213;
                        float _2700 = _2659.y - _2214;
                        float _2701 = _2659.z - _2215;
                        float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                        float _2705 = inversesqrt(_2702);
                        float _2706 = _2705 * _2699;
                        float _2707 = _2705 * _2700;
                        float _2708 = _2705 * _2701;
                        float _2709 = dot(vec3(_447, _450, _453), vec3(_2706, _2707, _2708));
                        float _2714 = 1.0 - (_2702 * _2659.w);
                        float _4018 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2716 = sqrt(_2702) * _2678.w;
                        float _2719 = 1.39999997615814208984375 / (_2716 + 1.39999997615814208984375);
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * _2709) + _2720;
                        float _2726 = _2716 * _2716;
                        float _2730 = ((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2715) / ((_2726 * 0.699999988079071044921875) + 1.0);
                        float _2734 = (-0.0) - _2213;
                        float _2735 = (-0.0) - _2214;
                        float _2736 = (-0.0) - _2215;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2751 = exp2(log2(1.0 / ((_2726 * 3.5) + 5.0)) * 0.25);
                        float _2752 = 1.0 - _523;
                        float _2759 = sqrt(1.0 - ((1.0 - (_2752 * _2752)) * (1.0 - (_2751 * _2751))));
                        float _2760 = _2759 * _2759;
                        float _2761 = _2760 * _2760;
                        float _2762 = _2741 + _2706;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2772 = dot(vec3(_447, _450, _453), vec3(_2741, _2742, _2743));
                        float _4034 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2775 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2776 = dot(vec3(_447, _450, _453), vec3(_2768 * _2762, _2768 * _2763, _2768 * _2764));
                        float _4045 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2783 = ((_2779 * _2779) * (_2761 + (-1.0))) + 1.0;
                        float _2784 = _2719 * _2760;
                        float _2785 = _2784 * _2784;
                        float _2788 = ((1.0 - _2785) * _2709) + _2785;
                        float _4056 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2790 = 1.0 - _2760;
                        float _2800 = (0.5 / (((_2789 * ((_2775 * _2790) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _2790) + _2760) * _2775))) * _2789;
                        float _4067 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2811 = (((_2761 * 3.1415927410125732421875) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) / ((_2783 * _2783) * ((_2726 * 2.1991131305694580078125) + 3.141590118408203125))) * _2715;
                        _2568 = (_2730 * _2678.x) + _2636;
                        _2569 = (_2730 * _2678.y) + _2637;
                        _2570 = (_2730 * _2678.z) + _2638;
                        _2565 = (_2811 * _2695.x) + _2633;
                        _2566 = (_2811 * _2695.y) + _2634;
                        _2567 = (_2811 * _2695.z) + _2635;
                        if (_2640 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2640;
                        }
                    }
                    frontier_phi_61_pred = _2565;
                    frontier_phi_61_pred_1 = _2570;
                    frontier_phi_61_pred_2 = _2569;
                    frontier_phi_61_pred_3 = _2568;
                    frontier_phi_61_pred_4 = _2567;
                    frontier_phi_61_pred_5 = _2566;
                }
                _2366 = frontier_phi_61_pred;
                _2376 = frontier_phi_61_pred_1;
                _2374 = frontier_phi_61_pred_2;
                _2372 = frontier_phi_61_pred_3;
                _2370 = frontier_phi_61_pred_4;
                _2368 = frontier_phi_61_pred_5;
                uint _2516 = _2515 + 1u;
                if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2509 = _2366;
                    _2510 = _2368;
                    _2511 = _2370;
                    _2512 = _2372;
                    _2513 = _2374;
                    _2514 = _2376;
                    _2515 = _2516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        if (((4294967295u << _2382) & _2259) == 0u)
        {
            _2477 = _2365;
            _2479 = _2367;
            _2481 = _2369;
            _2483 = _2371;
            _2485 = _2373;
            _2487 = _2375;
        }
        else
        {
            float _2502 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
            float _2503 = _2502 * _2213;
            float _2504 = _2502 * _2214;
            float _2505 = _2502 * _2215;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2616 = _2365;
                float _2617 = _2367;
                float _2618 = _2369;
                float _2619 = _2371;
                float _2620 = _2373;
                float _2621 = _2375;
                uint _2622 = _2382;
                uint _2631;
                bool _2632;
                for (;;)
                {
                    _2631 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                    _2632 = _2631 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2632)
                    {
                        frontier_phi_67_pred = _2619;
                        frontier_phi_67_pred_1 = _2620;
                        frontier_phi_67_pred_2 = _2621;
                        frontier_phi_67_pred_3 = _2618;
                        frontier_phi_67_pred_4 = _2617;
                        frontier_phi_67_pred_5 = _2616;
                    }
                    else
                    {
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        uint _2835 = _2631;
                        uint _2836;
                        vec4 _2861;
                        float _2862;
                        vec4 _2877;
                        vec3 _2889;
                        vec4 _2905;
                        vec4 _2921;
                        float _2968;
                        bool _2969;
                        for (;;)
                        {
                            uint _2846 = ((_2622 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2835));
                            _2836 = (_2835 + 4294967295u) & _2835;
                            uint _2848 = _2846 * 40u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            _2862 = _2861.w;
                            uint _2864 = (_2846 * 40u) + 4u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2879 = (_2846 * 40u) + 8u;
                            _2889 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x));
                            uint _2892 = (_2846 * 40u) + 16u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2846 * 40u) + 20u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2846 * 40u) + 24u;
                            vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2943 = (_2846 * 40u) + 28u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2968 = fma(_2215, _2956.z, fma(_2214, _2956.y, _2956.x * _2213)) + _2956.w;
                            _2969 = !((fma(_2215, _2937.z, fma(_2214, _2937.y, _2937.x * _2213)) + _2937.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2969)
                            {
                                float _2996 = _2861.x - _2213;
                                float _2997 = _2861.y - _2214;
                                float _2998 = _2861.z - _2215;
                                float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                                float _3002 = inversesqrt(_2999);
                                float _3003 = _3002 * _2996;
                                float _3004 = _3002 * _2997;
                                float _3005 = _3002 * _2998;
                                float _3009 = 1.0 - (_2999 / (_2862 * _2862));
                                float _4078 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3014 = sqrt(_2999) * _2877.w;
                                float _3016 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                                float _3017 = _3016 * _3016;
                                float _3020 = ((1.0 - _3017) * dot(vec3(_3003, _3004, _3005), vec3(_447, _450, _453))) + _3017;
                                float _3023 = _3014 * _3014;
                                float _3027 = (fma(_2215, _2905.z, fma(_2214, _2905.y, _2905.x * _2213)) + _2905.w) / _2968;
                                float _3028 = (fma(_2215, _2921.z, fma(_2214, _2921.y, _2921.x * _2213)) + _2921.w) / _2968;
                                float _3032 = 1.0 - dot(vec2(_3027, _3028), vec2(_3027, _3028));
                                float _4094 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3034 = _3033 * (((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3010) / ((_3023 * 0.699999988079071044921875) + 1.0));
                                float _3046 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                                float _3047 = 1.0 - _523;
                                float _3054 = sqrt(1.0 - ((1.0 - (_3047 * _3047)) * (1.0 - (_3046 * _3046))));
                                float _3055 = _3054 * _3054;
                                float _3056 = _3055 * _3055;
                                float _3057 = _3003 - _2503;
                                float _3058 = _3004 - _2504;
                                float _3059 = _3005 - _2505;
                                float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                                float _3067 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2503, (-0.0) - _2504, (-0.0) - _2505));
                                float _4105 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3070 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3071 = dot(vec3(_447, _450, _453), vec3(_3063 * _3057, _3063 * _3058, _3063 * _3059));
                                float _4116 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3074 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3078 = ((_3074 * _3074) * (_3056 + (-1.0))) + 1.0;
                                float _3079 = _3016 * _3055;
                                float _3080 = _3079 * _3079;
                                float _3086 = ((1.0 - _3080) * dot(vec3(_447, _450, _453), vec3(_3003, _3004, _3005))) + _3080;
                                float _4127 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3088 = 1.0 - _3055;
                                float _3098 = (0.5 / (((_3087 * ((_3070 * _3088) + _3055)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3055) * _3070))) * _3087;
                                float _4138 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3108 = (_3033 * _3010) * (((_3056 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_3078 * _3078) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3108 * _2889.x;
                                frontier_phi_73_pred_1 = _3108 * _2889.y;
                                frontier_phi_73_pred_2 = _3034 * _2877.z;
                                frontier_phi_73_pred_3 = _3034 * _2877.y;
                                frontier_phi_73_pred_4 = _3034 * _2877.x;
                                frontier_phi_73_pred_5 = _3108 * _2889.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3112 = frontier_phi_73_pred;
                            _3113 = frontier_phi_73_pred_1;
                            _3117 = frontier_phi_73_pred_2;
                            _3116 = frontier_phi_73_pred_3;
                            _3115 = frontier_phi_73_pred_4;
                            _3114 = frontier_phi_73_pred_5;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            if (_2836 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2836;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2819;
                        frontier_phi_67_pred_1 = _2820;
                        frontier_phi_67_pred_2 = _2821;
                        frontier_phi_67_pred_3 = _2818;
                        frontier_phi_67_pred_4 = _2817;
                        frontier_phi_67_pred_5 = _2816;
                    }
                    _2484 = frontier_phi_67_pred;
                    _2486 = frontier_phi_67_pred_1;
                    _2488 = frontier_phi_67_pred_2;
                    _2482 = frontier_phi_67_pred_3;
                    _2480 = frontier_phi_67_pred_4;
                    _2478 = frontier_phi_67_pred_5;
                    uint _2623 = _2622 + 1u;
                    if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2616 = _2478;
                        _2617 = _2480;
                        _2618 = _2482;
                        _2619 = _2484;
                        _2620 = _2486;
                        _2621 = _2488;
                        _2622 = _2623;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2486;
                frontier_phi_55_56_ladder_1 = _2488;
                frontier_phi_55_56_ladder_2 = _2484;
                frontier_phi_55_56_ladder_3 = _2482;
                frontier_phi_55_56_ladder_4 = _2480;
                frontier_phi_55_56_ladder_5 = _2478;
            }
            else
            {
                frontier_phi_55_56_ladder = _2373;
                frontier_phi_55_56_ladder_1 = _2375;
                frontier_phi_55_56_ladder_2 = _2371;
                frontier_phi_55_56_ladder_3 = _2369;
                frontier_phi_55_56_ladder_4 = _2367;
                frontier_phi_55_56_ladder_5 = _2365;
            }
            _2477 = frontier_phi_55_56_ladder_5;
            _2479 = frontier_phi_55_56_ladder_4;
            _2481 = frontier_phi_55_56_ladder_3;
            _2483 = frontier_phi_55_56_ladder_2;
            _2485 = frontier_phi_55_56_ladder;
            _2487 = frontier_phi_55_56_ladder_1;
        }
        float _2492 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        _2272 = (_2492 * _2483) + _1705;
        _2274 = (_2492 * _2485) + _1707;
        _2276 = (_2492 * _2487) + _1709;
        _2278 = ((_2477 * _492) * _2492) + _2053;
        _2280 = ((_2479 * _494) * _2492) + _2055;
        _2282 = ((_2481 * _495) * _2492) + _2057;
    }
    else
    {
        _2272 = _1705;
        _2274 = _1707;
        _2276 = _1709;
        _2278 = _2053;
        _2280 = _2055;
        _2282 = _2057;
    }
    float _4154 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4165 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4176 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4187 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _2300 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2272 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _507))) + ((_2278 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2301 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2274 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _507))) + ((_2280 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2302 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2276 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _507))) + ((_2282 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2310 = cbInstanceData._m0[_466 + 6u].w * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)));
    float _2315 = _425 / cbSceneParam._m0[86u].x;
    float _2316 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _360 : (isnan(_360) ? cbSceneParam._m0[77u].w : min(_360, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_360 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_360) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _360 : min(cbSceneParam._m0[80u].w, _360));
        float _2391 = _2390 / _360;
        float _2402 = _2391 * _411;
        float _2403 = _412 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2405 = _2391 * _413;
        float _2407 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2408 = _2407 + cbSceneParam._m0[79u].w;
        float _2409 = cbSceneParam._m0[79u].w - _2403;
        float _2415 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2405 * _2405));
        float _2418 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2415;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2578;
        if (abs((_2404 - _2407) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2578 = ((((_2408 > 0.0) ? exp2(_2423 * _2408) : (2.0 - exp2(_2425 * _2408))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2418;
        }
        else
        {
            float _2538 = 1.0 / cbSceneParam._m0[80u].x;
            float _2539 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : max(_2408, _2409));
            float _2540 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : min(_2408, _2409));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            _2578 = ((abs(_2415 / _2404) * cbSceneParam._m0[80u].y) * ((((_2549 - _2550) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))))) * _2538)) - ((exp2(_2425 * _2549) - exp2(_2425 * _2550)) * _2538))) + (_2418 * cbSceneParam._m0[80u].z);
        }
        vec4 _2580 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2589 = exp2((_2578 * (-1.44269502162933349609375)) * (1.0 - _2580.w));
        float _2590 = log2(_2589);
        float _2606 = log2(_2335);
        _2427 = (exp2(_2606 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].x)) * _2580.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2429 = (exp2(_2606 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].y)) * _2580.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2431 = (exp2(_2606 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].z)) * _2580.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2433 = _2589 * _2335;
    }
    else
    {
        _2427 = _2332;
        _2429 = _2333;
        _2431 = _2334;
        _2433 = _2335;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2447 = log2(_2433);
    float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)));
    float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2465 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2465 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2465 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = _2310;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2310;
}


