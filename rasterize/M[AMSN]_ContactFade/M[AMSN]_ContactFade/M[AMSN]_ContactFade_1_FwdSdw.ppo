#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _864;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.w;
    float _233 = cbMtdParam._m0[9u].x * _220.x;
    float _234 = cbMtdParam._m0[9u].y * _220.y;
    float _235 = cbMtdParam._m0[9u].z * _220.z;
    vec4 _248 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _250 = _248.x;
    bool _257 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _274 = ((_257 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _250)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _250))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3488 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _277 = 1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)));
    float _3499 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _278 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _286 = _226 - (((_278 * _278) * _226) * (3.0 - (_278 * 2.0)));
    vec4 _301 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _301.z;
    float _308 = (_301.x * 2.0) + (-1.0);
    float _310 = (_301.y * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3510 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))));
    float _319 = fma(_316, _196 * NORMAL.x, fma(_310, _203 * TANGENT.x, (_189 * _182) * _308));
    float _322 = fma(_316, _196 * NORMAL.y, fma(_310, _203 * TANGENT.y, (_189 * _183) * _308));
    float _325 = fma(_316, _196 * NORMAL.z, fma(_310, _203 * TANGENT.z, (_189 * _184) * _308));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _330 = _329 * _319;
    float _331 = _329 * _322;
    float _332 = _329 * _325;
    float _3521 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _333 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _334 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3554 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3565 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3576 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _338 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _343 = _257 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_332, cbSceneParam._m0[5u].z, fma(_331, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _330));
    float _433 = fma(_332, cbSceneParam._m0[6u].z, fma(_331, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _330));
    float _436 = fma(_332, cbSceneParam._m0[7u].z, fma(_331, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _330));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = (_449 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3587 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _464 = 1.0 - _338;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _338;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _338;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _338;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_330, _331, _332), vec3(_401, _402, _403));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _330) - _401;
    float _499 = (_494 * _331) - _402;
    float _500 = (_494 * _332) - _403;
    float _504 = abs(dot(vec3(_401, _402, _403), vec3(_330, _331, _332)));
    float _3620 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_334);
    float _518 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _524 = (1.0 - _518) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _525 = _518 * _506;
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _863;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _592 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _596 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _621 = _553 + _330;
        float _622 = _557 + _331;
        float _623 = _561 + _332;
        float _633 = fma(_623, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621)) - _588;
        float _634 = fma(_623, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621)) - _592;
        float _635 = fma(_623, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621)) - _596;
        float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
        float _652 = ((_639 * _633) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_588 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_639 * _634) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_592 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_639 * _635) / cbModelParam._m0[34u].z) + ((((((_596 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        float _691 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_657.x + (-0.5));
        float _693 = _691 * (_657.y + (-0.5));
        float _694 = _691 * (_657.z + (-0.5));
        float _701 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_664.x + (-0.5));
        float _703 = _701 * (_664.y + (-0.5));
        float _704 = _701 * (_664.z + (-0.5));
        float _711 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_671.x + (-0.5));
        float _713 = _711 * (_671.y + (-0.5));
        float _714 = _711 * (_671.z + (-0.5));
        float _721 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_678.x + (-0.5));
        float _723 = _721 * (_678.y + (-0.5));
        float _724 = _721 * (_678.z + (-0.5));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = _692 * 0.5;
        float _729 = _702 * 0.5;
        float _730 = _712 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _745 = (dot(vec3(_330, _331, _332), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _755 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3668 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_757 + 1.0))) + _762) * _725;
        float _772 = _693 * 0.5;
        float _773 = _703 * 0.5;
        float _774 = _713 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_330, _331, _332), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3701 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_799 + 1.0))) + _804) * _726;
        float _814 = _694 * 0.5;
        float _815 = _704 * 0.5;
        float _816 = _714 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_330, _331, _332), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3734 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_841 + 1.0))) + _846) * _727;
        _863 = _694;
        _865 = _693;
        _866 = _692;
        _867 = _704;
        _868 = _703;
        _869 = _702;
        _870 = _714;
        _871 = _713;
        _872 = _712;
        _873 = _727;
        _874 = _726;
        _875 = _725;
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
    }
    else
    {
        _863 = _864;
        _865 = _864;
        _866 = _864;
        _867 = _864;
        _868 = _864;
        _869 = _864;
        _870 = _864;
        _871 = _864;
        _872 = _864;
        _873 = _864;
        _874 = _864;
        _875 = _864;
        _876 = 0.0;
        _877 = 0.0;
        _878 = 0.0;
    }
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _904 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _908 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _912 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _935 = _553 + _330;
        float _936 = _557 + _331;
        float _937 = _561 + _332;
        float _947 = fma(_937, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935)) - _904;
        float _948 = fma(_937, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935)) - _908;
        float _949 = fma(_937, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935)) - _912;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_904 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_908 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[35u].z) + ((((((_912 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1003 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_970.x + (-0.5));
        float _1005 = _1003 * (_970.y + (-0.5));
        float _1006 = _1003 * (_970.z + (-0.5));
        float _1013 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_977.x + (-0.5));
        float _1015 = _1013 * (_977.y + (-0.5));
        float _1016 = _1013 * (_977.z + (-0.5));
        float _1023 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_984.x + (-0.5));
        float _1025 = _1023 * (_984.y + (-0.5));
        float _1026 = _1023 * (_984.z + (-0.5));
        float _1033 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_991.x + (-0.5));
        float _1035 = _1033 * (_991.y + (-0.5));
        float _1036 = _1033 * (_991.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_330, _331, _332), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3797 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1067 + 1.0))) + _1072) * _1037;
        float _1082 = _1005 * 0.5;
        float _1083 = _1015 * 0.5;
        float _1084 = _1025 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_330, _331, _332), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3830 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1109 + 1.0))) + _1114) * _1038;
        float _1124 = _1006 * 0.5;
        float _1125 = _1016 * 0.5;
        float _1126 = _1026 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_330, _331, _332), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3863 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1151 + 1.0))) + _1156) * _1039;
        _1173 = _1006;
        _1174 = _1005;
        _1175 = _1004;
        _1176 = _1016;
        _1177 = _1015;
        _1178 = _1014;
        _1179 = _1026;
        _1180 = _1025;
        _1181 = _1024;
        _1182 = _1039;
        _1183 = _1038;
        _1184 = _1037;
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _864;
        _1174 = _864;
        _1175 = _864;
        _1176 = _864;
        _1177 = _864;
        _1178 = _864;
        _1179 = _864;
        _1180 = _864;
        _1181 = _864;
        _1182 = _864;
        _1183 = _864;
        _1184 = _864;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1220 = fma(_1199, cbSceneParam._m0[89u].z, fma(_1198, cbSceneParam._m0[89u].y, _1197 * cbSceneParam._m0[89u].x));
    float _1223 = fma(_1199, cbSceneParam._m0[90u].z, fma(_1198, cbSceneParam._m0[90u].y, _1197 * cbSceneParam._m0[90u].x));
    float _1226 = fma(_1199, cbSceneParam._m0[91u].z, fma(_1198, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1197));
    float _1241 = _498 * 0.5;
    float _1242 = _499 * 0.5;
    float _1243 = _500 * 0.5;
    float _1244 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1247 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1250 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1284;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1257 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_863, _867, _870, _873));
        float _1261 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_865, _868, _871, _874));
        float _1265 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_866, _869, _872, _875));
        float _1272 = dot(vec4(cbModelParam._m0[39u]), vec4(_1241, _1242, _1243, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1295;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1286 = dot(vec4(cbModelParam._m0[40u]), vec4(_1241, _1242, _1243, 1.0));
        _1295 = dot(vec3(isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1295 = 1.0;
    }
    float _1299 = (_1295 * cbModelParam._m0[1u].x) + (_1284 * (1.0 - cbModelParam._m0[1u].x));
    float _1309 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _334);
    float _1310 = isnan(_1309) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1309 : min(cbModelParam._m0[25u].z, _1309));
    float _1392;
    float _1394;
    float _1396;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1359 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1363 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1367 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1370 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1373 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1376 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1404;
        if (_1370 > 0.0)
        {
            _1404 = abs((1.0 - _1359) / _1370);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1359 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1404 = frontier_phi_14_12_ladder;
        }
        float _1580;
        if (_1373 > 0.0)
        {
            _1580 = abs((1.0 - _1363) / _1373);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1363 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1580 = frontier_phi_23_19_ladder;
        }
        float _1876;
        if (_1376 > 0.0)
        {
            _1876 = abs((1.0 - _1367) / _1376);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1367 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1876 = frontier_phi_35_30_ladder;
        }
        float _1878 = isnan(_1580) ? _1404 : (isnan(_1404) ? _1580 : min(_1404, _1580));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1370) + _1359;
        float _1884 = (_1879 * _1373) + _1363;
        float _1885 = (_1879 * _1376) + _1367;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1310);
            frontier_phi_13_35_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1392 = frontier_phi_13_35_ladder_2;
        _1394 = frontier_phi_13_35_ladder_1;
        _1396 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1310);
        _1392 = _1380.x * cbModelParam._m0[1u].y;
        _1394 = _1380.y * cbModelParam._m0[1u].y;
        _1396 = _1380.z * cbModelParam._m0[1u].y;
    }
    float _1400 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _334);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1400 : min(cbModelParam._m0[25u].w, _1400));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1458 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1462 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1466 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1469 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1472 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1475 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1585;
        if (_1469 > 0.0)
        {
            _1585 = abs((1.0 - _1458) / _1469);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1458 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_21_ladder;
        }
        float _1903;
        if (_1472 > 0.0)
        {
            _1903 = abs((1.0 - _1462) / _1472);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1462 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_32_ladder;
        }
        float _2241;
        if (_1475 > 0.0)
        {
            _2241 = abs((1.0 - _1466) / _1475);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1466 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2241 = frontier_phi_47_44_ladder;
        }
        float _2243 = isnan(_1903) ? _1585 : (isnan(_1585) ? _1903 : min(_1585, _1903));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1469) + _1458;
        float _2249 = (_2244 * _1472) + _1462;
        float _2250 = (_2244 * _1475) + _1466;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1401);
            frontier_phi_22_47_ladder = _2372.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2372.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2372.x * cbModelParam._m0[1u].z;
        }
        _1494 = frontier_phi_22_47_ladder_2;
        _1496 = frontier_phi_22_47_ladder_1;
        _1498 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1401);
        _1494 = _1478.x * cbModelParam._m0[1u].z;
        _1496 = _1478.y * cbModelParam._m0[1u].z;
        _1498 = _1478.z * cbModelParam._m0[1u].z;
    }
    float _1511 = (((_524 * _475) + _525) * _490) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1513 = (((_524 * _477) + _525) * _490) * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1515 = (((_524 * _478) + _525) * _490) * ((cbModelParam._m0[1u].w * (_1498 - _1396)) + _1396);
    float _1518 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, _1511 * cbSceneParam._m0[91u].x));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1572 = _1559 / _1571;
    float _1573 = _1563 / _1571;
    float _1574 = _1567 / _1571;
    float _1721;
    float _1722;
    float _1723;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1601 = ((uint(_1574 > cbSceneParam._m0[59u].y) + uint(_1574 > cbSceneParam._m0[59u].x)) + uint(_1574 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1602 = _1601 + 43u;
        uint _1610 = _1601 + 44u;
        uint _1618 = _1601 + 45u;
        uint _1626 = _1601 + 46u;
        float _1637 = fma(_1571, cbSceneParam._m0[_1602].w, fma(_1567, cbSceneParam._m0[_1602].z, fma(_1563, cbSceneParam._m0[_1602].y, _1559 * cbSceneParam._m0[_1602].x)));
        float _1641 = fma(_1571, cbSceneParam._m0[_1610].w, fma(_1567, cbSceneParam._m0[_1610].z, fma(_1563, cbSceneParam._m0[_1610].y, _1559 * cbSceneParam._m0[_1610].x)));
        float _1649 = fma(_1571, cbSceneParam._m0[_1626].w, fma(_1567, cbSceneParam._m0[_1626].z, fma(_1563, cbSceneParam._m0[_1626].y, _1559 * cbSceneParam._m0[_1626].x)));
        float _1654 = cbSceneParam._m0[33u].z * _1649;
        float _1656 = cbSceneParam._m0[33u].w * _1649;
        float _1659 = fma(_1571, cbSceneParam._m0[_1618].w, fma(_1567, cbSceneParam._m0[_1618].z, fma(_1563, cbSceneParam._m0[_1618].y, _1559 * cbSceneParam._m0[_1618].x))) / _1649;
        float _1707 = (cbSceneParam._m0[33u].x - sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574))) * cbSceneParam._m0[33u].y;
        float _3989 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1714 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1654 + _1637) / _1649, (_1656 + _1641) / _1649), _1659), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 + _1637) / _1649, (_1641 - _1654) / _1649), _1659), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 - _1654) / _1649, (_1641 - _1656) / _1649), _1659), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 - _1656) / _1649, (_1654 + _1641) / _1649), _1659), 0.0)).x), vec4(0.25)));
        _1721 = 1.0 - (_1714 * cbSceneParam._m0[34u].x);
        _1722 = 1.0 - (_1714 * cbSceneParam._m0[34u].y);
        _1723 = 1.0 - (_1714 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1721 = 1.0;
        _1722 = 1.0;
        _1723 = 1.0;
    }
    float _1787;
    float _1789;
    float _1791;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1775 = fma(_1571, cbSceneParam._m0[63u].w, fma(_1567, cbSceneParam._m0[63u].z, fma(_1563, cbSceneParam._m0[63u].y, _1559 * cbSceneParam._m0[63u].x)));
        float _1776 = fma(_1571, cbSceneParam._m0[60u].w, fma(_1567, cbSceneParam._m0[60u].z, fma(_1563, cbSceneParam._m0[60u].y, _1559 * cbSceneParam._m0[60u].x))) / _1775;
        float _1777 = fma(_1571, cbSceneParam._m0[61u].w, fma(_1567, cbSceneParam._m0[61u].z, fma(_1563, cbSceneParam._m0[61u].y, _1559 * cbSceneParam._m0[61u].x))) / _1775;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1776 >= cbSceneParam._m0[64u].x) && (_1777 >= cbSceneParam._m0[64u].y)) && (_1776 <= cbSceneParam._m0[64u].z)) && (_1777 <= cbSceneParam._m0[64u].w))
        {
            float _1916 = fma(_1571, cbSceneParam._m0[62u].w, fma(_1567, cbSceneParam._m0[62u].z, fma(_1563, cbSceneParam._m0[62u].y, _1559 * cbSceneParam._m0[62u].x))) / _1775;
            float _1920 = isnan(cbSceneParam._m0[41u].w) ? _1916 : (isnan(_1916) ? cbSceneParam._m0[41u].w : max(_1916, cbSceneParam._m0[41u].w));
            float _1963 = (cbSceneParam._m0[33u].x - sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574))) * cbSceneParam._m0[33u].y;
            float _4005 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
            float _1970 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1776, cbSceneParam._m0[33u].w + _1777), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1776, _1777 - cbSceneParam._m0[33u].z), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1776 - cbSceneParam._m0[33u].z, _1777 - cbSceneParam._m0[33u].w), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1776 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1777), _1920), 0.0)).x), vec4(0.25)));
            float _1974 = 1.0 - (_1970 * cbSceneParam._m0[34u].x);
            float _1975 = 1.0 - (_1970 * cbSceneParam._m0[34u].y);
            float _1976 = 1.0 - (_1970 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1976) ? _1723 : (isnan(_1723) ? _1976 : min(_1723, _1976));
            frontier_phi_34_33_ladder_1 = isnan(_1975) ? _1722 : (isnan(_1722) ? _1975 : min(_1722, _1975));
            frontier_phi_34_33_ladder_2 = isnan(_1974) ? _1721 : (isnan(_1721) ? _1974 : min(_1721, _1974));
        }
        else
        {
            frontier_phi_34_33_ladder = _1723;
            frontier_phi_34_33_ladder_1 = _1722;
            frontier_phi_34_33_ladder_2 = _1721;
        }
        _1787 = frontier_phi_34_33_ladder_2;
        _1789 = frontier_phi_34_33_ladder_1;
        _1791 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1787 = _1721;
        _1789 = _1722;
        _1791 = _1723;
    }
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _490 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1835 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1839 = _1798 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_330, _331, _332));
    float _1853 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_330, _331, _332));
    float _4041 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _4052 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1858 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1860 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1867 = ((cbLight._m0[_1815].x * _1821) * _1860) + (((cbLight._m0[_1825].x * _1787) * _1835) * _1858);
    float _1868 = ((_1821 * cbLight._m0[_1815].y) * _1860) + (((cbLight._m0[_1825].y * _1789) * _1835) * _1858);
    float _1869 = ((_1821 * cbLight._m0[_1815].z) * _1860) + (((cbLight._m0[_1825].z * _1791) * _1835) * _1858);
    uvec4 _1873 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1875 = _1873.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1875)
    {
        _1977 = _1867;
        _1979 = _1868;
        _1981 = _1869;
    }
    else
    {
        uint _1985 = _1798 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4063 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2004 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1867;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1868;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1869;
    }
    bool _1984 = _1873.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_1984)
    {
        _2039 = _1977;
        _2041 = _1979;
        _2043 = _1981;
    }
    else
    {
        uint _2212 = _1798 + 7u;
        float _2228 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4079 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2231 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2039 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _1977;
        _2041 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _1979;
        _2043 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _1981;
    }
    uint _2046 = _1798 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _334) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1798].x + _401;
    float _2062 = cbLight._m0[_1798].y + _402;
    float _2063 = cbLight._m0[_1798].z + _403;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1798].xyz));
    float _4095 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2075 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2076 = dot(vec3(_330, _331, _332), vec3(_2068, _2069, _2070));
    float _4117 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_2068, _2069, _2070));
    float _4128 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
    float _2097 = 0.959999978542327880859375 - _472;
    float _2099 = 0.959999978542327880859375 - _473;
    float _2100 = 0.959999978542327880859375 - _474;
    float _2107 = 1.0 - _2060;
    float _2118 = (0.5 / (((_2075 * ((_2074 * _2107) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2107) + _2060) * _2074))) * _2074;
    float _4139 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2134 = _1798 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _334) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1839].x + _401;
    float _2148 = cbLight._m0[_1839].y + _402;
    float _2149 = cbLight._m0[_1839].z + _403;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1839].xyz));
    float _4150 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2161 = dot(vec3(_330, _331, _332), vec3(_2154, _2155, _2156));
    float _4161 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2154, _2155, _2156));
    float _4172 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _2187 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2075 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2187) + _2146) * _2160))) * _2160;
    float _4183 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2209 = (((((_2180 * _2097) + _475) * cbLight._m0[_2134].x) * _2199) * _1821) + ((((cbLight._m0[_2046].x * _1787) * ((_2096 * _2097) + _475)) * _2120) * _1835);
    float _2210 = (((((_2180 * _2099) + _477) * cbLight._m0[_2134].y) * _2199) * _1821) + ((((cbLight._m0[_2046].y * _1789) * ((_2096 * _2099) + _477)) * _2120) * _1835);
    float _2211 = (((((_2180 * _2100) + _478) * cbLight._m0[_2134].z) * _2199) * _1821) + ((((cbLight._m0[_2046].z * _1791) * ((_2096 * _2100) + _478)) * _2120) * _1835);
    float _2267;
    float _2269;
    float _2271;
    if (_1875)
    {
        _2267 = _2209;
        _2269 = _2210;
        _2271 = _2211;
    }
    else
    {
        uint _2273 = _1798 + 2u;
        uint _2277 = _1798 + 10u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _334) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _401;
        float _2294 = cbLight._m0[_2273].y + _402;
        float _2295 = cbLight._m0[_2273].z + _403;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2273].xyz));
        float _4194 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2307 = dot(vec3(_330, _331, _332), vec3(_2300, _2301, _2302));
        float _4205 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4216 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2333 = 1.0 - _2292;
        float _2343 = (0.5 / (((_2075 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2333) + _2292) * _2306))) * _2306;
        float _4227 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2267 = (((((_2326 * _2097) + _475) * cbLight._m0[_2277].x) * _2345) * _2346) + _2209;
        _2269 = (((((_2326 * _2099) + _477) * cbLight._m0[_2277].y) * _2345) * _2346) + _2210;
        _2271 = (((((_2326 * _2100) + _478) * cbLight._m0[_2277].z) * _2345) * _2346) + _2211;
    }
    float _2377;
    float _2379;
    float _2381;
    if (_1984)
    {
        _2377 = _2267;
        _2379 = _2269;
        _2381 = _2271;
    }
    else
    {
        uint _2388 = _1798 + 3u;
        uint _2392 = _1798 + 11u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _334) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _401;
        float _2409 = cbLight._m0[_2388].y + _402;
        float _2410 = cbLight._m0[_2388].z + _403;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2388].xyz));
        float _4243 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2422 = dot(vec3(_330, _331, _332), vec3(_2415, _2416, _2417));
        float _4254 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4265 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2075 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2448) + _2407) * _2421))) * _2421;
        float _4276 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2377 = (((((_2441 * _2097) + _475) * cbLight._m0[_2392].x) * _2460) * _2461) + _2267;
        _2379 = (((((_2441 * _2099) + _477) * cbLight._m0[_2392].y) * _2460) * _2461) + _2269;
        _2381 = (((((_2441 * _2100) + _478) * cbLight._m0[_2392].z) * _2460) * _2461) + _2271;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1796.y == 0u)
    {
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2483)));
        float _2504 = (log2(_1574 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
        }
        else
        {
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2759)
                {
                    frontier_phi_66_pred = _2748;
                    frontier_phi_66_pred_1 = _2747;
                    frontier_phi_66_pred_2 = _2746;
                    frontier_phi_66_pred_3 = _2745;
                    frontier_phi_66_pred_4 = _2744;
                    frontier_phi_66_pred_5 = _2743;
                }
                else
                {
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    uint _2873;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2758;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    for (;;)
                    {
                        uint _2877 = uint(findLSB(_2873)) + (_2749 << 5u);
                        uint _2874 = (_2873 + 4294967295u) & _2873;
                        uint _2879 = _2877 * 48u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2899 = (_2877 * 48u) + 4u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2918 = (_2877 * 48u) + 8u;
                        vec3 _2929 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x));
                        float _2933 = _2893.x - _1572;
                        float _2934 = _2893.y - _1573;
                        float _2935 = _2893.z - _1574;
                        float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                        float _2939 = inversesqrt(_2936);
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2943 = dot(vec3(_430, _433, _436), vec3(_2940, _2941, _2942));
                        float _2948 = 1.0 - (_2936 * _2893.w);
                        float _4302 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2950 = sqrt(_2936) * _2912.w;
                        float _2953 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                        float _2954 = _2953 * _2953;
                        float _2957 = ((1.0 - _2954) * _2943) + _2954;
                        float _2960 = _2950 * _2950;
                        float _2964 = ((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2949) / ((_2960 * 0.699999988079071044921875) + 1.0);
                        float _2968 = (-0.0) - _1572;
                        float _2969 = (-0.0) - _1573;
                        float _2970 = (-0.0) - _1574;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2984 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                        float _2985 = 1.0 - _506;
                        float _2992 = sqrt(1.0 - ((1.0 - (_2985 * _2985)) * (1.0 - (_2984 * _2984))));
                        float _2993 = _2992 * _2992;
                        float _2994 = _2993 * _2993;
                        float _2995 = _2975 + _2940;
                        float _2996 = _2976 + _2941;
                        float _2997 = _2977 + _2942;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3005 = dot(vec3(_430, _433, _436), vec3(_2975, _2976, _2977));
                        float _4318 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3009 = dot(vec3(_430, _433, _436), vec3(_3001 * _2995, _3001 * _2996, _3001 * _2997));
                        float _4329 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3016 = ((_3012 * _3012) * (_2994 + (-1.0))) + 1.0;
                        float _3017 = _2953 * _2993;
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _2943) + _3018;
                        float _4340 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3023 = 1.0 - _2993;
                        float _3033 = (0.5 / (((_3022 * ((_3008 * _3023) + _2993)) + 9.9999999392252902907785028219223e-09) + (((_3022 * _3023) + _2993) * _3008))) * _3022;
                        float _4351 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3044 = (((_2994 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3016 * _3016) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125))) * _2949;
                        _2802 = (_2964 * _2912.x) + _2870;
                        _2803 = (_2964 * _2912.y) + _2871;
                        _2804 = (_2964 * _2912.z) + _2872;
                        _2799 = (_3044 * _2929.x) + _2867;
                        _2800 = (_3044 * _2929.y) + _2868;
                        _2801 = (_3044 * _2929.z) + _2869;
                        if (_2874 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2874;
                        }
                    }
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2803;
                    frontier_phi_66_pred_2 = _2802;
                    frontier_phi_66_pred_3 = _2801;
                    frontier_phi_66_pred_4 = _2800;
                    frontier_phi_66_pred_5 = _2799;
                }
                _2610 = frontier_phi_66_pred;
                _2608 = frontier_phi_66_pred_1;
                _2606 = frontier_phi_66_pred_2;
                _2604 = frontier_phi_66_pred_3;
                _2602 = frontier_phi_66_pred_4;
                _2600 = frontier_phi_66_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2600;
                    _2744 = _2602;
                    _2745 = _2604;
                    _2746 = _2606;
                    _2747 = _2608;
                    _2748 = _2610;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
        }
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.z;
        uint _2616 = (_2614 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2616) & _2514) == 0u)
        {
            _2711 = _2599;
            _2713 = _2601;
            _2715 = _2603;
            _2717 = _2605;
            _2719 = _2607;
            _2721 = _2609;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574)));
            float _2737 = _2736 * _1572;
            float _2738 = _2736 * _1573;
            float _2739 = _2736 * _1574;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2616 < ((_2614 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2850 = _2599;
                float _2851 = _2601;
                float _2852 = _2603;
                float _2853 = _2605;
                float _2854 = _2607;
                float _2855 = _2609;
                uint _2856 = _2616;
                uint _2865;
                bool _2866;
                for (;;)
                {
                    _2865 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                    _2866 = _2865 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2866)
                    {
                        frontier_phi_72_pred = _2855;
                        frontier_phi_72_pred_1 = _2854;
                        frontier_phi_72_pred_2 = _2853;
                        frontier_phi_72_pred_3 = _2852;
                        frontier_phi_72_pred_4 = _2851;
                        frontier_phi_72_pred_5 = _2850;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3062 = _2850;
                        float _3063 = _2851;
                        float _3064 = _2852;
                        float _3065 = _2853;
                        float _3066 = _2854;
                        float _3067 = _2855;
                        uint _3068 = _2865;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3138;
                        vec4 _3154;
                        float _3201;
                        bool _3202;
                        for (;;)
                        {
                            uint _3079 = ((_2856 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3125 = (_3079 * 40u) + 16u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3079 * 40u) + 20u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3079 * 40u) + 24u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3176 = (_3079 * 40u) + 28u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3201 = fma(_1574, _3189.z, fma(_1573, _3189.y, _3189.x * _1572)) + _3189.w;
                            _3202 = !((fma(_1574, _3170.z, fma(_1573, _3170.y, _3170.x * _1572)) + _3170.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3202)
                            {
                                float _3229 = _3094.x - _1572;
                                float _3230 = _3094.y - _1573;
                                float _3231 = _3094.z - _1574;
                                float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                                float _3235 = inversesqrt(_3232);
                                float _3236 = _3235 * _3229;
                                float _3237 = _3235 * _3230;
                                float _3238 = _3235 * _3231;
                                float _3242 = 1.0 - (_3232 / (_3095 * _3095));
                                float _4362 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3247 = sqrt(_3232) * _3110.w;
                                float _3249 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                                float _3250 = _3249 * _3249;
                                float _3253 = ((1.0 - _3250) * dot(vec3(_3236, _3237, _3238), vec3(_430, _433, _436))) + _3250;
                                float _3256 = _3247 * _3247;
                                float _3260 = (fma(_1574, _3138.z, fma(_1573, _3138.y, _3138.x * _1572)) + _3138.w) / _3201;
                                float _3261 = (fma(_1574, _3154.z, fma(_1573, _3154.y, _3154.x * _1572)) + _3154.w) / _3201;
                                float _3265 = 1.0 - dot(vec2(_3260, _3261), vec2(_3260, _3261));
                                float _4378 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3267 = _3266 * (((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3243) / ((_3256 * 0.699999988079071044921875) + 1.0));
                                float _3279 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _506;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3236 - _2737;
                                float _3291 = _3237 - _2738;
                                float _3292 = _3238 - _2739;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4389 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3304 = dot(vec3(_430, _433, _436), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4400 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3249 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_430, _433, _436), vec3(_3236, _3237, _3238))) + _3313;
                                float _4411 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4422 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3266 * _3243) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3311 * _3311) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3267 * _3110.y;
                                frontier_phi_78_pred_1 = _3267 * _3110.x;
                                frontier_phi_78_pred_2 = _3341 * _3122.z;
                                frontier_phi_78_pred_3 = _3341 * _3122.y;
                                frontier_phi_78_pred_4 = _3341 * _3122.x;
                                frontier_phi_78_pred_5 = _3267 * _3110.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3349 = frontier_phi_78_pred;
                            _3348 = frontier_phi_78_pred_1;
                            _3347 = frontier_phi_78_pred_2;
                            _3346 = frontier_phi_78_pred_3;
                            _3345 = frontier_phi_78_pred_4;
                            _3350 = frontier_phi_78_pred_5;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            _3049 = _3345 + _3062;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3054;
                        frontier_phi_72_pred_1 = _3053;
                        frontier_phi_72_pred_2 = _3052;
                        frontier_phi_72_pred_3 = _3051;
                        frontier_phi_72_pred_4 = _3050;
                        frontier_phi_72_pred_5 = _3049;
                    }
                    _2722 = frontier_phi_72_pred;
                    _2720 = frontier_phi_72_pred_1;
                    _2718 = frontier_phi_72_pred_2;
                    _2716 = frontier_phi_72_pred_3;
                    _2714 = frontier_phi_72_pred_4;
                    _2712 = frontier_phi_72_pred_5;
                    uint _2857 = _2856 + 1u;
                    if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2850 = _2712;
                        _2851 = _2714;
                        _2852 = _2716;
                        _2853 = _2718;
                        _2854 = _2720;
                        _2855 = _2722;
                        _2856 = _2857;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2722;
                frontier_phi_60_61_ladder_1 = _2720;
                frontier_phi_60_61_ladder_2 = _2716;
                frontier_phi_60_61_ladder_3 = _2714;
                frontier_phi_60_61_ladder_4 = _2712;
                frontier_phi_60_61_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_60_61_ladder = _2609;
                frontier_phi_60_61_ladder_1 = _2607;
                frontier_phi_60_61_ladder_2 = _2603;
                frontier_phi_60_61_ladder_3 = _2601;
                frontier_phi_60_61_ladder_4 = _2599;
                frontier_phi_60_61_ladder_5 = _2605;
            }
            _2711 = frontier_phi_60_61_ladder_4;
            _2713 = frontier_phi_60_61_ladder_3;
            _2715 = frontier_phi_60_61_ladder_2;
            _2717 = frontier_phi_60_61_ladder_5;
            _2719 = frontier_phi_60_61_ladder_1;
            _2721 = frontier_phi_60_61_ladder;
        }
        float _2726 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2527 = (_2726 * _2717) + _2039;
        _2529 = (_2726 * _2719) + _2041;
        _2531 = (_2726 * _2721) + _2043;
        _2533 = ((_2711 * _475) * _2726) + _2377;
        _2535 = ((_2713 * _477) * _2726) + _2379;
        _2537 = ((_2715 * _478) * _2726) + _2381;
    }
    else
    {
        _2527 = _2039;
        _2529 = _2041;
        _2531 = _2043;
        _2533 = _2377;
        _2535 = _2379;
        _2537 = _2381;
    }
    float _4438 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4449 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4460 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4471 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _2555 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2527 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _490))) + ((_2533 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2556 = ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2529 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _490))) + ((_2535 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2557 = ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2531 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _490))) + ((_2537 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2565 = cbInstanceData._m0[_449 + 6u].w * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)));
    float _2570 = _408 / cbSceneParam._m0[86u].x;
    float _2571 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2624 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2625 = _2624 / _343;
        float _2636 = _2625 * _394;
        float _2637 = _395 * _2625;
        float _2638 = (-0.0) - _2637;
        float _2639 = _2625 * _396;
        float _2641 = (cbSceneParam._m0[77u].w * _2638) / _2624;
        float _2642 = _2641 + cbSceneParam._m0[79u].w;
        float _2643 = cbSceneParam._m0[79u].w - _2637;
        float _2649 = sqrt(((_2636 * _2636) + (_2637 * _2637)) + (_2639 * _2639));
        float _2652 = (1.0 - (cbSceneParam._m0[77u].w / _2624)) * _2649;
        float _2657 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2659 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2812;
        if (abs((_2638 - _2641) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2812 = ((((_2642 > 0.0) ? exp2(_2657 * _2642) : (2.0 - exp2(_2659 * _2642))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2652;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : max(_2642, _2643));
            float _2774 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : min(_2642, _2643));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2812 = ((abs(_2649 / _2638) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2657 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2657 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2659 * _2783) - exp2(_2659 * _2784)) * _2772))) + (_2652 * cbSceneParam._m0[80u].z);
        }
        vec4 _2814 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2823 = exp2((_2812 * (-1.44269502162933349609375)) * (1.0 - _2814.w));
        float _2824 = log2(_2823);
        float _2840 = log2(_2590);
        _2661 = (exp2(_2840 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].x)) * _2814.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2663 = (exp2(_2840 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].y)) * _2814.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2665 = (exp2(_2840 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].z)) * _2814.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2667 = _2823 * _2590;
    }
    else
    {
        _2661 = _2587;
        _2663 = _2588;
        _2665 = _2589;
        _2667 = _2590;
    }
    float _2679 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2680 = _2679 == 3.0;
    float _2681 = log2(_2667);
    float _2688 = exp2(_2681 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)));
    float _2689 = exp2(_2681 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0)));
    float _2690 = exp2(_2681 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)));
    float _2699 = (_2679 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2699 * (_2680 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.y = _2699 * (_2680 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.z = _2699 * (_2680 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.w = _2565;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2565;
}


