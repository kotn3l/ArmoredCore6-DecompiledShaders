#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _860;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _216 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _222 = _216.w;
    float _229 = cbMtdParam._m0[9u].x * _216.x;
    float _230 = cbMtdParam._m0[9u].y * _216.y;
    float _231 = cbMtdParam._m0[9u].z * _216.z;
    vec4 _244 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _246 = _244.x;
    bool _253 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _270 = ((_253 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _246)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _246))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3201 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _273 = 1.0 - (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0)));
    float _3212 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _274 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _282 = _222 - (((_274 * _274) * _222) * (3.0 - (_274 * 2.0)));
    vec4 _297 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _301 = _297.z;
    float _304 = (_297.x * 2.0) + (-1.0);
    float _306 = (_297.y * 2.0) + (-1.0);
    float _307 = dot(vec2(_304, _306), vec2(_304, _306));
    float _3223 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _312 = sqrt(1.0 - (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))));
    float _315 = fma(_312, _192 * NORMAL.x, fma(_306, _199 * TANGENT.x, (_185 * _178) * _304));
    float _318 = fma(_312, _192 * NORMAL.y, fma(_306, _199 * TANGENT.y, (_185 * _179) * _304));
    float _321 = fma(_312, _192 * NORMAL.z, fma(_306, _199 * TANGENT.z, (_185 * _180) * _304));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3234 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _329 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _3245 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _330 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3267 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3278 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3289 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _334 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _339 = _253 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _390 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _380);
    float _391 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _380);
    float _392 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _380);
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _397 = _390 * _396;
    float _398 = _391 * _396;
    float _399 = _392 * _396;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _429 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _432 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = (_445 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3300 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _460 = 1.0 - _334;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _334;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _334;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _334;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_326, _327, _328), vec3(_397, _398, _399));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _326) - _397;
    float _495 = (_490 * _327) - _398;
    float _496 = (_490 * _328) - _399;
    float _500 = abs(dot(vec3(_397, _398, _399), vec3(_326, _327, _328)));
    float _3333 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_330);
    float _514 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _520 = (1.0 - _514) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _521 = _514 * _502;
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _859;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _588 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _592 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _617 = _549 + _326;
        float _618 = _553 + _327;
        float _619 = _557 + _328;
        float _629 = fma(_619, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _617)) - _584;
        float _630 = fma(_619, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _617)) - _588;
        float _631 = fma(_619, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _617)) - _592;
        float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
        float _648 = ((_635 * _629) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_584 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_635 * _630) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_588 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_635 * _631) / cbModelParam._m0[34u].z) + ((((((_592 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        float _687 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_653.x + (-0.5));
        float _689 = _687 * (_653.y + (-0.5));
        float _690 = _687 * (_653.z + (-0.5));
        float _697 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_660.x + (-0.5));
        float _699 = _697 * (_660.y + (-0.5));
        float _700 = _697 * (_660.z + (-0.5));
        float _707 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_667.x + (-0.5));
        float _709 = _707 * (_667.y + (-0.5));
        float _710 = _707 * (_667.z + (-0.5));
        float _717 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_674.x + (-0.5));
        float _719 = _717 * (_674.y + (-0.5));
        float _720 = _717 * (_674.z + (-0.5));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = _688 * 0.5;
        float _725 = _698 * 0.5;
        float _726 = _708 * 0.5;
        float _727 = dot(vec3(_724, _725, _726), vec3(_724, _725, _726));
        float _732 = (_727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_727);
        float _741 = (dot(vec3(_326, _327, _328), vec3(_732 * _724, _732 * _725, _732 * _726)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _751 = sqrt(((_725 * _725) + (_724 * _724)) + (_726 * _726)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3381 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_753 + 1.0))) + _758) * _721;
        float _768 = _689 * 0.5;
        float _769 = _699 * 0.5;
        float _770 = _709 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_326, _327, _328), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3414 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_795 + 1.0))) + _800) * _722;
        float _810 = _690 * 0.5;
        float _811 = _700 * 0.5;
        float _812 = _710 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_326, _327, _328), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3447 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_837 + 1.0))) + _842) * _723;
        _859 = _690;
        _861 = _689;
        _862 = _688;
        _863 = _700;
        _864 = _699;
        _865 = _698;
        _866 = _710;
        _867 = _709;
        _868 = _708;
        _869 = _723;
        _870 = _722;
        _871 = _721;
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
    }
    else
    {
        _859 = _860;
        _861 = _860;
        _862 = _860;
        _863 = _860;
        _864 = _860;
        _865 = _860;
        _866 = _860;
        _867 = _860;
        _868 = _860;
        _869 = _860;
        _870 = _860;
        _871 = _860;
        _872 = 0.0;
        _873 = 0.0;
        _874 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _904 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _908 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _931 = _549 + _326;
        float _932 = _553 + _327;
        float _933 = _557 + _328;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_326, _327, _328), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3510 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_326, _327, _328), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3543 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_326, _327, _328), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3576 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _860;
        _1170 = _860;
        _1171 = _860;
        _1172 = _860;
        _1173 = _860;
        _1174 = _860;
        _1175 = _860;
        _1176 = _860;
        _1177 = _860;
        _1178 = _860;
        _1179 = _860;
        _1180 = _860;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _494 * 0.5;
    float _1238 = _495 * 0.5;
    float _1239 = _496 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _863, _866, _869));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_861, _864, _867, _870));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_862, _865, _868, _871));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1305 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _330);
    float _1306 = isnan(_1305) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1305 : min(cbModelParam._m0[25u].z, _1305));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1355 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1359 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1363 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1366 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1369 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1372 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1400;
        if (_1366 > 0.0)
        {
            _1400 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1400 = frontier_phi_14_12_ladder;
        }
        float _1608;
        if (_1369 > 0.0)
        {
            _1608 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1608 = frontier_phi_23_19_ladder;
        }
        float _1862;
        if (_1372 > 0.0)
        {
            _1862 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1862 = frontier_phi_35_30_ladder;
        }
        float _1864 = isnan(_1608) ? _1400 : (isnan(_1400) ? _1608 : min(_1400, _1608));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1366) + _1355;
        float _1870 = (_1865 * _1369) + _1359;
        float _1871 = (_1865 * _1372) + _1363;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1306);
            frontier_phi_13_35_ladder = _1999.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1999.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1999.x * cbModelParam._m0[1u].y;
        }
        _1388 = frontier_phi_13_35_ladder_2;
        _1390 = frontier_phi_13_35_ladder_1;
        _1392 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1306);
        _1388 = _1376.x * cbModelParam._m0[1u].y;
        _1390 = _1376.y * cbModelParam._m0[1u].y;
        _1392 = _1376.z * cbModelParam._m0[1u].y;
    }
    float _1396 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _330);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1396 : min(cbModelParam._m0[25u].w, _1396));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1468 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1471 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1613;
        if (_1465 > 0.0)
        {
            _1613 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1889;
        if (_1468 > 0.0)
        {
            _1889 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1889 = frontier_phi_37_32_ladder;
        }
        float _2102;
        if (_1471 > 0.0)
        {
            _2102 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2102 = frontier_phi_46_43_ladder;
        }
        float _2104 = isnan(_1889) ? _1613 : (isnan(_1613) ? _1889 : min(_1613, _1889));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1465) + _1454;
        float _2110 = (_2105 * _1468) + _1458;
        float _2111 = (_2105 * _1471) + _1462;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2112;
        float _2115 = _2112 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2111 > _2115) || ((_2111 < _2113) || ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 < _2113) || (_2109 > _2115))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2111, cbModelParam._m0[17u].z, fma(_2110, cbModelParam._m0[17u].y, _2109 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2111, cbModelParam._m0[18u].z, fma(_2110, cbModelParam._m0[18u].y, _2109 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2111, cbModelParam._m0[19u].z, fma(_2110, cbModelParam._m0[19u].y, _2109 * cbModelParam._m0[19u].x))), _1397);
            frontier_phi_22_46_ladder = _2315.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2315.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2315.x * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_22_46_ladder_2;
        _1492 = frontier_phi_22_46_ladder_1;
        _1494 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1397);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1507 = (((_520 * _471) + _521) * _486) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1509 = (((_520 * _473) + _521) * _486) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1511 = (((_520 * _474) + _521) * _486) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1514 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1507 * cbSceneParam._m0[91u].x));
    uvec4 _1530 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1532 = _1530.x * 14u;
    uint _1533 = _1532 + 13u;
    float _1540 = _486 + (-1.0);
    float _1545 = (cbLight._m0[_1533].x * _1540) + 1.0;
    float _1546 = (cbLight._m0[_1533].y * _1540) + 1.0;
    float _1547 = (cbLight._m0[_1533].z * _1540) + 1.0;
    float _1548 = (cbLight._m0[_1533].w * _1540) + 1.0;
    uint _1549 = _1532 + 5u;
    float _1555 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
    uint _1559 = _1532 + 4u;
    float _1566 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1570 = _1532 | 1u;
    float _1581 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_326, _327, _328));
    float _1584 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_326, _327, _328));
    float _3712 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _3723 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1589 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1591 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1598 = ((cbLight._m0[_1549].x * _1555) * _1591) + ((cbLight._m0[_1559].x * _1566) * _1589);
    float _1599 = ((_1555 * cbLight._m0[_1549].y) * _1591) + ((_1566 * cbLight._m0[_1559].y) * _1589);
    float _1600 = ((_1555 * cbLight._m0[_1549].z) * _1591) + ((_1566 * cbLight._m0[_1559].z) * _1589);
    uvec4 _1605 = floatBitsToUint(cbLight._m0[_1532 + 12u]);
    bool _1607 = _1605.x == 0u;
    float _1618;
    float _1620;
    float _1622;
    if (_1607)
    {
        _1618 = _1598;
        _1620 = _1599;
        _1622 = _1600;
    }
    else
    {
        uint _1626 = _1532 + 6u;
        float _1642 = (dot(vec3(cbLight._m0[_1532 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1643 = _1642 * _1642;
        float _3734 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1645 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1618 = (((cbLight._m0[_1626].x * 0.3183098733425140380859375) * _1644) * _1645) + _1598;
        _1620 = (((cbLight._m0[_1626].y * 0.3183098733425140380859375) * _1644) * _1645) + _1599;
        _1622 = (((cbLight._m0[_1626].z * 0.3183098733425140380859375) * _1644) * _1645) + _1600;
    }
    bool _1625 = _1605.y == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1625)
    {
        _1663 = _1618;
        _1665 = _1620;
        _1667 = _1622;
    }
    else
    {
        uint _1833 = _1532 + 7u;
        float _1849 = (dot(vec3(cbLight._m0[_1532 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3750 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1852 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1663 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1618;
        _1665 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1620;
        _1667 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1622;
    }
    uint _1670 = _1532 + 8u;
    float _1683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _330) * 0.949999988079071044921875);
    float _1684 = _1683 * _1683;
    float _1685 = cbLight._m0[_1532].x + _397;
    float _1686 = cbLight._m0[_1532].y + _398;
    float _1687 = cbLight._m0[_1532].z + _399;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1692 = _1691 * _1685;
    float _1693 = _1691 * _1686;
    float _1694 = _1691 * _1687;
    float _1695 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1532].xyz));
    float _3766 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1699 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1700 = dot(vec3(_326, _327, _328), vec3(_1692, _1693, _1694));
    float _3788 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1704 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1692, _1693, _1694));
    float _3799 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1708 = _1684 * _1684;
    float _1712 = ((_1703 * _1703) * (_1708 + (-1.0))) + 1.0;
    float _1720 = exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0);
    float _1721 = 0.959999978542327880859375 - _468;
    float _1723 = 0.959999978542327880859375 - _469;
    float _1724 = 0.959999978542327880859375 - _470;
    float _1731 = 1.0 - _1684;
    float _1742 = (0.5 / (((_1699 * ((_1698 * _1731) + _1684)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1731) + _1684) * _1698))) * _1698;
    float _3810 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1708 / ((_1712 * _1712) * 3.141590118408203125));
    uint _1755 = _1532 + 9u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _330) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1570].x + _397;
    float _1769 = cbLight._m0[_1570].y + _398;
    float _1770 = cbLight._m0[_1570].z + _399;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1570].xyz));
    float _3821 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1782 = dot(vec3(_326, _327, _328), vec3(_1775, _1776, _1777));
    float _3832 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1775, _1776, _1777));
    float _3843 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1767 * _1767;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1801 = exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0);
    float _1808 = 1.0 - _1767;
    float _1818 = (0.5 / (((_1699 * ((_1781 * _1808) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1808) + _1767) * _1781))) * _1781;
    float _3854 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    float _1830 = (((((_1801 * _1721) + _471) * cbLight._m0[_1755].x) * _1820) * _1555) + (((((_1720 * _1721) + _471) * cbLight._m0[_1670].x) * _1744) * _1566);
    float _1831 = (((((_1801 * _1723) + _473) * cbLight._m0[_1755].y) * _1820) * _1555) + (((((_1720 * _1723) + _473) * cbLight._m0[_1670].y) * _1744) * _1566);
    float _1832 = (((((_1801 * _1724) + _474) * cbLight._m0[_1755].z) * _1820) * _1555) + (((((_1720 * _1724) + _474) * cbLight._m0[_1670].z) * _1744) * _1566);
    float _1894;
    float _1896;
    float _1898;
    if (_1607)
    {
        _1894 = _1830;
        _1896 = _1831;
        _1898 = _1832;
    }
    else
    {
        uint _1900 = _1532 + 2u;
        uint _1904 = _1532 + 10u;
        float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _330) * 0.949999988079071044921875);
        float _1919 = _1918 * _1918;
        float _1920 = cbLight._m0[_1900].x + _397;
        float _1921 = cbLight._m0[_1900].y + _398;
        float _1922 = cbLight._m0[_1900].z + _399;
        float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
        float _1927 = _1926 * _1920;
        float _1928 = _1926 * _1921;
        float _1929 = _1926 * _1922;
        float _1930 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1900].xyz));
        float _3865 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1934 = dot(vec3(_326, _327, _328), vec3(_1927, _1928, _1929));
        float _3876 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_1927, _1928, _1929));
        float _3887 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = _1919 * _1919;
        float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
        float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0);
        float _1960 = 1.0 - _1919;
        float _1970 = (0.5 / (((_1699 * ((_1933 * _1960) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1960) + _1919) * _1933))) * _1933;
        float _3898 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1972 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
        float _1973 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1894 = (((((_1953 * _1721) + _471) * cbLight._m0[_1904].x) * _1972) * _1973) + _1830;
        _1896 = (((((_1953 * _1723) + _473) * cbLight._m0[_1904].y) * _1972) * _1973) + _1831;
        _1898 = (((((_1953 * _1724) + _474) * cbLight._m0[_1904].z) * _1972) * _1973) + _1832;
    }
    float _2008;
    float _2010;
    float _2012;
    if (_1625)
    {
        _2008 = _1894;
        _2010 = _1896;
        _2012 = _1898;
    }
    else
    {
        uint _2019 = _1532 + 3u;
        uint _2023 = _1532 + 11u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _330) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _397;
        float _2040 = cbLight._m0[_2019].y + _398;
        float _2041 = cbLight._m0[_2019].z + _399;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_2019].xyz));
        float _3914 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _2053 = dot(vec3(_326, _327, _328), vec3(_2046, _2047, _2048));
        float _3925 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _3936 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1699 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _2079) + _2038) * _2052))) * _2052;
        float _3947 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _2008 = (((((_2072 * _1721) + _471) * cbLight._m0[_2023].x) * _2091) * _2092) + _1894;
        _2010 = (((((_2072 * _1723) + _473) * cbLight._m0[_2023].y) * _2091) * _2092) + _1896;
        _2012 = (((((_2072 * _1724) + _474) * cbLight._m0[_2023].z) * _2091) * _2092) + _1898;
    }
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_1530.y == 0u)
    {
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2167;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2167;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2167;
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.x;
        uint _2194 = uint((float(_2182.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2183))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2183)));
        float _2204 = (log2(_2170 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2205 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        uint _2208 = uint(isnan(14.0) ? _2205 : (isnan(_2205) ? 14.0 : min(_2205, 14.0)));
        uvec4 _2213 = texelFetch(g_lightClusterGridBuffer, int(((_2208 << 2u) + (_2194 << 6u)) >> 2u));
        uint _2214 = _2213.x;
        uint _2215 = _2182.z;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        if (((((1u << ((_2215 >> 4u) & 15u)) + 4294967295u) & _2214) == 0u) || ((_2215 & 240u) == 0u))
        {
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
        }
        else
        {
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            uint _2470 = 0u;
            uint _2479;
            bool _2480;
            for (;;)
            {
                _2479 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                _2480 = _2479 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2480)
                {
                    frontier_phi_61_pred = _2464;
                    frontier_phi_61_pred_1 = _2469;
                    frontier_phi_61_pred_2 = _2468;
                    frontier_phi_61_pred_3 = _2467;
                    frontier_phi_61_pred_4 = _2466;
                    frontier_phi_61_pred_5 = _2465;
                }
                else
                {
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    uint _2594;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2467;
                    _2592 = _2468;
                    _2593 = _2469;
                    _2594 = _2479;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    for (;;)
                    {
                        uint _2598 = uint(findLSB(_2594)) + (_2470 << 5u);
                        uint _2595 = (_2594 + 4294967295u) & _2594;
                        uint _2600 = _2598 * 48u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2600)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 3u)).x));
                        uint _2620 = (_2598 * 48u) + 4u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2639 = (_2598 * 48u) + 8u;
                        vec3 _2650 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x));
                        float _2654 = _2614.x - _2168;
                        float _2655 = _2614.y - _2169;
                        float _2656 = _2614.z - _2170;
                        float _2657 = dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656));
                        float _2660 = inversesqrt(_2657);
                        float _2661 = _2660 * _2654;
                        float _2662 = _2660 * _2655;
                        float _2663 = _2660 * _2656;
                        float _2664 = dot(vec3(_426, _429, _432), vec3(_2661, _2662, _2663));
                        float _2669 = 1.0 - (_2657 * _2614.w);
                        float _3973 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2671 = sqrt(_2657) * _2633.w;
                        float _2674 = 1.39999997615814208984375 / (_2671 + 1.39999997615814208984375);
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2664) + _2675;
                        float _2681 = _2671 * _2671;
                        float _2685 = ((isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))) * _2670) / ((_2681 * 0.699999988079071044921875) + 1.0);
                        float _2689 = (-0.0) - _2168;
                        float _2690 = (-0.0) - _2169;
                        float _2691 = (-0.0) - _2170;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2696 = _2695 * _2689;
                        float _2697 = _2695 * _2690;
                        float _2698 = _2695 * _2691;
                        float _2706 = exp2(log2(1.0 / ((_2681 * 3.5) + 5.0)) * 0.25);
                        float _2707 = 1.0 - _502;
                        float _2714 = sqrt(1.0 - ((1.0 - (_2707 * _2707)) * (1.0 - (_2706 * _2706))));
                        float _2715 = _2714 * _2714;
                        float _2716 = _2715 * _2715;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2719 = _2698 + _2663;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2727 = dot(vec3(_426, _429, _432), vec3(_2696, _2697, _2698));
                        float _3989 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2731 = dot(vec3(_426, _429, _432), vec3(_2723 * _2717, _2723 * _2718, _2723 * _2719));
                        float _4000 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2738 = ((_2734 * _2734) * (_2716 + (-1.0))) + 1.0;
                        float _2739 = _2674 * _2715;
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2664) + _2740;
                        float _4011 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2745 = 1.0 - _2715;
                        float _2755 = (0.5 / (((_2744 * ((_2730 * _2745) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2745) + _2715) * _2730))) * _2744;
                        float _4022 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2766 = (((_2716 * 3.1415927410125732421875) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) / ((_2738 * _2738) * ((_2681 * 2.1991131305694580078125) + 3.141590118408203125))) * _2670;
                        _2523 = (_2685 * _2633.x) + _2591;
                        _2524 = (_2685 * _2633.y) + _2592;
                        _2525 = (_2685 * _2633.z) + _2593;
                        _2520 = (_2766 * _2650.x) + _2588;
                        _2521 = (_2766 * _2650.y) + _2589;
                        _2522 = (_2766 * _2650.z) + _2590;
                        if (_2595 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2523;
                            _2592 = _2524;
                            _2593 = _2525;
                            _2594 = _2595;
                        }
                    }
                    frontier_phi_61_pred = _2520;
                    frontier_phi_61_pred_1 = _2525;
                    frontier_phi_61_pred_2 = _2524;
                    frontier_phi_61_pred_3 = _2523;
                    frontier_phi_61_pred_4 = _2522;
                    frontier_phi_61_pred_5 = _2521;
                }
                _2321 = frontier_phi_61_pred;
                _2331 = frontier_phi_61_pred_1;
                _2329 = frontier_phi_61_pred_2;
                _2327 = frontier_phi_61_pred_3;
                _2325 = frontier_phi_61_pred_4;
                _2323 = frontier_phi_61_pred_5;
                uint _2471 = _2470 + 1u;
                if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2464 = _2321;
                    _2465 = _2323;
                    _2466 = _2325;
                    _2467 = _2327;
                    _2468 = _2329;
                    _2469 = _2331;
                    _2470 = _2471;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
        }
        uvec4 _2334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2335 = _2334.z;
        uint _2337 = (_2335 >> 8u) & 15u;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((4294967295u << _2337) & _2214) == 0u)
        {
            _2432 = _2320;
            _2434 = _2322;
            _2436 = _2324;
            _2438 = _2326;
            _2440 = _2328;
            _2442 = _2330;
        }
        else
        {
            float _2457 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
            float _2458 = _2457 * _2168;
            float _2459 = _2457 * _2169;
            float _2460 = _2457 * _2170;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2337 < ((_2335 >> 12u) & 15u))
            {
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2571 = _2320;
                float _2572 = _2322;
                float _2573 = _2324;
                float _2574 = _2326;
                float _2575 = _2328;
                float _2576 = _2330;
                uint _2577 = _2337;
                uint _2586;
                bool _2587;
                for (;;)
                {
                    _2586 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                    _2587 = _2586 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2587)
                    {
                        frontier_phi_67_pred = _2574;
                        frontier_phi_67_pred_1 = _2575;
                        frontier_phi_67_pred_2 = _2576;
                        frontier_phi_67_pred_3 = _2573;
                        frontier_phi_67_pred_4 = _2572;
                        frontier_phi_67_pred_5 = _2571;
                    }
                    else
                    {
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        float _2787 = _2574;
                        float _2788 = _2575;
                        float _2789 = _2576;
                        uint _2790 = _2586;
                        uint _2791;
                        vec4 _2816;
                        float _2817;
                        vec4 _2832;
                        vec3 _2844;
                        vec4 _2860;
                        vec4 _2876;
                        float _2923;
                        bool _2924;
                        for (;;)
                        {
                            uint _2801 = ((_2577 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2790));
                            _2791 = (_2790 + 4294967295u) & _2790;
                            uint _2803 = _2801 * 40u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            _2817 = _2816.w;
                            uint _2819 = (_2801 * 40u) + 4u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2834 = (_2801 * 40u) + 8u;
                            _2844 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x));
                            uint _2847 = (_2801 * 40u) + 16u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2863 = (_2801 * 40u) + 20u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2879 = (_2801 * 40u) + 24u;
                            vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2898 = (_2801 * 40u) + 28u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2923 = fma(_2170, _2911.z, fma(_2169, _2911.y, _2911.x * _2168)) + _2911.w;
                            _2924 = !((fma(_2170, _2892.z, fma(_2169, _2892.y, _2892.x * _2168)) + _2892.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2924)
                            {
                                float _2951 = _2816.x - _2168;
                                float _2952 = _2816.y - _2169;
                                float _2953 = _2816.z - _2170;
                                float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                                float _2957 = inversesqrt(_2954);
                                float _2958 = _2957 * _2951;
                                float _2959 = _2957 * _2952;
                                float _2960 = _2957 * _2953;
                                float _2964 = 1.0 - (_2954 / (_2817 * _2817));
                                float _4033 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2965 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _2969 = sqrt(_2954) * _2832.w;
                                float _2971 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                                float _2972 = _2971 * _2971;
                                float _2975 = ((1.0 - _2972) * dot(vec3(_2958, _2959, _2960), vec3(_426, _429, _432))) + _2972;
                                float _2978 = _2969 * _2969;
                                float _2982 = (fma(_2170, _2860.z, fma(_2169, _2860.y, _2860.x * _2168)) + _2860.w) / _2923;
                                float _2983 = (fma(_2170, _2876.z, fma(_2169, _2876.y, _2876.x * _2168)) + _2876.w) / _2923;
                                float _2987 = 1.0 - dot(vec2(_2982, _2983), vec2(_2982, _2983));
                                float _4049 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _2989 = _2988 * (((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2965) / ((_2978 * 0.699999988079071044921875) + 1.0));
                                float _3001 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                                float _3002 = 1.0 - _502;
                                float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                                float _3010 = _3009 * _3009;
                                float _3011 = _3010 * _3010;
                                float _3012 = _2958 - _2458;
                                float _3013 = _2959 - _2459;
                                float _3014 = _2960 - _2460;
                                float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                                float _3022 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2458, (-0.0) - _2459, (-0.0) - _2460));
                                float _4060 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3026 = dot(vec3(_426, _429, _432), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                                float _4071 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3029 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                                float _3034 = _2971 * _3010;
                                float _3035 = _3034 * _3034;
                                float _3041 = ((1.0 - _3035) * dot(vec3(_426, _429, _432), vec3(_2958, _2959, _2960))) + _3035;
                                float _4082 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3043 = 1.0 - _3010;
                                float _3053 = (0.5 / (((_3042 * ((_3025 * _3043) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3010) * _3025))) * _3042;
                                float _4093 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3063 = (_2988 * _2965) * (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) / ((_3033 * _3033) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3063 * _2844.x;
                                frontier_phi_73_pred_1 = _3063 * _2844.y;
                                frontier_phi_73_pred_2 = _2989 * _2832.z;
                                frontier_phi_73_pred_3 = _2989 * _2832.y;
                                frontier_phi_73_pred_4 = _2989 * _2832.x;
                                frontier_phi_73_pred_5 = _3063 * _2844.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3067 = frontier_phi_73_pred;
                            _3068 = frontier_phi_73_pred_1;
                            _3072 = frontier_phi_73_pred_2;
                            _3071 = frontier_phi_73_pred_3;
                            _3070 = frontier_phi_73_pred_4;
                            _3069 = frontier_phi_73_pred_5;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            if (_2791 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2791;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2774;
                        frontier_phi_67_pred_1 = _2775;
                        frontier_phi_67_pred_2 = _2776;
                        frontier_phi_67_pred_3 = _2773;
                        frontier_phi_67_pred_4 = _2772;
                        frontier_phi_67_pred_5 = _2771;
                    }
                    _2439 = frontier_phi_67_pred;
                    _2441 = frontier_phi_67_pred_1;
                    _2443 = frontier_phi_67_pred_2;
                    _2437 = frontier_phi_67_pred_3;
                    _2435 = frontier_phi_67_pred_4;
                    _2433 = frontier_phi_67_pred_5;
                    uint _2578 = _2577 + 1u;
                    if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2571 = _2433;
                        _2572 = _2435;
                        _2573 = _2437;
                        _2574 = _2439;
                        _2575 = _2441;
                        _2576 = _2443;
                        _2577 = _2578;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2441;
                frontier_phi_55_56_ladder_1 = _2443;
                frontier_phi_55_56_ladder_2 = _2439;
                frontier_phi_55_56_ladder_3 = _2437;
                frontier_phi_55_56_ladder_4 = _2435;
                frontier_phi_55_56_ladder_5 = _2433;
            }
            else
            {
                frontier_phi_55_56_ladder = _2328;
                frontier_phi_55_56_ladder_1 = _2330;
                frontier_phi_55_56_ladder_2 = _2326;
                frontier_phi_55_56_ladder_3 = _2324;
                frontier_phi_55_56_ladder_4 = _2322;
                frontier_phi_55_56_ladder_5 = _2320;
            }
            _2432 = frontier_phi_55_56_ladder_5;
            _2434 = frontier_phi_55_56_ladder_4;
            _2436 = frontier_phi_55_56_ladder_3;
            _2438 = frontier_phi_55_56_ladder_2;
            _2440 = frontier_phi_55_56_ladder;
            _2442 = frontier_phi_55_56_ladder_1;
        }
        float _2447 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2227 = (_2447 * _2438) + _1663;
        _2229 = (_2447 * _2440) + _1665;
        _2231 = (_2447 * _2442) + _1667;
        _2233 = ((_2432 * _471) * _2447) + _2008;
        _2235 = ((_2434 * _473) * _2447) + _2010;
        _2237 = ((_2436 * _474) * _2447) + _2012;
    }
    else
    {
        _2227 = _1663;
        _2229 = _1665;
        _2231 = _1667;
        _2233 = _2008;
        _2235 = _2010;
        _2237 = _2012;
    }
    float _4109 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4120 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4131 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4142 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _2255 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2227 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _486))) + ((_2233 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2256 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2229 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _486))) + ((_2235 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2257 = ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2231 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _486))) + ((_2237 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2265 = cbInstanceData._m0[_445 + 6u].w * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)));
    float _2270 = _404 / cbSceneParam._m0[86u].x;
    float _2271 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2285 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2270, _2271, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2287 = _2285.x;
    float _2288 = _2285.y;
    float _2289 = _2285.z;
    float _2290 = _2285.w;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2345 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2346 = _2345 / _339;
        float _2357 = _2346 * _390;
        float _2358 = _391 * _2346;
        float _2359 = (-0.0) - _2358;
        float _2360 = _2346 * _392;
        float _2362 = (cbSceneParam._m0[77u].w * _2359) / _2345;
        float _2363 = _2362 + cbSceneParam._m0[79u].w;
        float _2364 = cbSceneParam._m0[79u].w - _2358;
        float _2370 = sqrt(((_2357 * _2357) + (_2358 * _2358)) + (_2360 * _2360));
        float _2373 = (1.0 - (cbSceneParam._m0[77u].w / _2345)) * _2370;
        float _2378 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2380 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2533;
        if (abs((_2359 - _2362) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2533 = ((((_2363 > 0.0) ? exp2(_2378 * _2363) : (2.0 - exp2(_2380 * _2363))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2373;
        }
        else
        {
            float _2493 = 1.0 / cbSceneParam._m0[80u].x;
            float _2494 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : max(_2363, _2364));
            float _2495 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : min(_2363, _2364));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            _2533 = ((abs(_2370 / _2359) * cbSceneParam._m0[80u].y) * ((((_2504 - _2505) * 2.0) - ((exp2(_2378 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0)))) - exp2(_2378 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))))) * _2493)) - ((exp2(_2380 * _2504) - exp2(_2380 * _2505)) * _2493))) + (_2373 * cbSceneParam._m0[80u].z);
        }
        vec4 _2535 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2270, _2271, 1.0), 0.0);
        float _2544 = exp2((_2533 * (-1.44269502162933349609375)) * (1.0 - _2535.w));
        float _2545 = log2(_2544);
        float _2561 = log2(_2290);
        _2382 = (exp2(_2561 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].x)) * _2535.x) / cbSceneParam._m0[78u].x)) + _2287;
        _2384 = (exp2(_2561 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].y)) * _2535.y) / cbSceneParam._m0[78u].y)) + _2288;
        _2386 = (exp2(_2561 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].z)) * _2535.z) / cbSceneParam._m0[78u].z)) + _2289;
        _2388 = _2544 * _2290;
    }
    else
    {
        _2382 = _2287;
        _2384 = _2288;
        _2386 = _2289;
        _2388 = _2290;
    }
    float _2400 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2401 = _2400 == 3.0;
    float _2402 = log2(_2388);
    float _2409 = exp2(_2402 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0)));
    float _2410 = exp2(_2402 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)));
    float _2411 = exp2(_2402 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0)));
    float _2420 = (_2400 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2420 * (_2401 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.y = _2420 * (_2401 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2384)));
    SV_Target.z = _2420 * (_2401 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2386)));
    SV_Target.w = _2265;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2265;
}


