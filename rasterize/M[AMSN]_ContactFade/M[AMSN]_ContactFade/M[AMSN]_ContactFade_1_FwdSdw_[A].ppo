#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _909;
float _3587;
float _3588;
float _3589;
float _3590;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.w;
    float _237 = cbMtdParam._m0[9u].x * _224.x;
    float _238 = cbMtdParam._m0[9u].y * _224.y;
    float _239 = cbMtdParam._m0[9u].z * _224.z;
    vec4 _252 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _254 = _252.x;
    bool _261 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _278 = ((_261 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _254)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _254))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3599 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _281 = 1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)));
    float _3610 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _282 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _290 = _230 - (((_282 * _282) * _230) * (3.0 - (_282 * 2.0)));
    vec4 _305 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = _305.z;
    float _312 = (_305.x * 2.0) + (-1.0);
    float _314 = (_305.y * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3621 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))));
    float _323 = fma(_320, _200 * NORMAL.x, fma(_314, _207 * TANGENT.x, (_193 * _186) * _312));
    float _326 = fma(_320, _200 * NORMAL.y, fma(_314, _207 * TANGENT.y, (_193 * _187) * _312));
    float _329 = fma(_320, _200 * NORMAL.z, fma(_314, _207 * TANGENT.z, (_193 * _188) * _312));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _334 = _333 * _323;
    float _335 = _333 * _326;
    float _336 = _333 * _329;
    float _3632 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _337 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _338 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3665 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3676 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3687 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _342 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _347 = _261 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _398 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _388);
    float _399 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _388);
    float _400 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _388);
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _405 = _398 * _404;
    float _406 = _399 * _404;
    float _407 = _400 * _404;
    vec4 _412 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _414 = _412.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _588 = sqrt(((_398 * _398) + (_399 * _399)) + (_400 * _400));
        float _594 = (cbMatDynParam._m0[5u].x * _588) + cbMatDynParam._m0[5u].y;
        float _3698 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _595 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _599 = (cbMatDynParam._m0[5u].z * _588) + cbMatDynParam._m0[5u].w;
        float _3709 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) - _595)) + _595) < ((_414 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_336, cbSceneParam._m0[5u].z, fma(_335, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _334));
    float _449 = fma(_336, cbSceneParam._m0[6u].z, fma(_335, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _334));
    float _452 = fma(_336, cbSceneParam._m0[7u].z, fma(_335, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _334));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3720 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _480 = 1.0 - _342;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _342;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _342;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _342;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_334, _335, _336), vec3(_405, _406, _407));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _334) - _405;
    float _515 = (_510 * _335) - _406;
    float _516 = (_510 * _336) - _407;
    float _520 = abs(dot(vec3(_405, _406, _407), vec3(_334, _335, _336)));
    float _3753 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_338);
    float _534 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _540 = (1.0 - _534) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _541 = _534 * _522;
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_577, cbModelParam._m0[26u].z, fma(_573, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _569));
        float _637 = fma(_577, cbModelParam._m0[27u].z, fma(_573, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _569));
        float _641 = fma(_577, cbModelParam._m0[28u].z, fma(_573, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _569));
        float _666 = _569 + _334;
        float _667 = _573 + _335;
        float _668 = _577 + _336;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_334, _335, _336), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3801 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_334, _335, _336), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3834 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_334, _335, _336), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3867 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _952 = fma(_577, cbModelParam._m0[30u].z, fma(_573, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _569));
        float _956 = fma(_577, cbModelParam._m0[31u].z, fma(_573, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _569));
        float _960 = fma(_577, cbModelParam._m0[32u].z, fma(_573, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _569));
        float _983 = _569 + _334;
        float _984 = _573 + _335;
        float _985 = _577 + _336;
        float _995 = fma(_985, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983)) - _952;
        float _996 = fma(_985, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983)) - _956;
        float _997 = fma(_985, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983)) - _960;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_952 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_956 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[35u].z) + ((((((_960 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1051 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1018.x + (-0.5));
        float _1053 = _1051 * (_1018.y + (-0.5));
        float _1054 = _1051 * (_1018.z + (-0.5));
        float _1061 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1025.x + (-0.5));
        float _1063 = _1061 * (_1025.y + (-0.5));
        float _1064 = _1061 * (_1025.z + (-0.5));
        float _1071 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1032.x + (-0.5));
        float _1073 = _1071 * (_1032.y + (-0.5));
        float _1074 = _1071 * (_1032.z + (-0.5));
        float _1081 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1039.x + (-0.5));
        float _1083 = _1081 * (_1039.y + (-0.5));
        float _1084 = _1081 * (_1039.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_334, _335, _336), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3930 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1115 + 1.0))) + _1120) * _1085;
        float _1130 = _1053 * 0.5;
        float _1131 = _1063 * 0.5;
        float _1132 = _1073 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_334, _335, _336), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3963 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1157 + 1.0))) + _1162) * _1086;
        float _1172 = _1054 * 0.5;
        float _1173 = _1064 * 0.5;
        float _1174 = _1074 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_334, _335, _336), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3996 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1199 + 1.0))) + _1204) * _1087;
        _1221 = _1054;
        _1222 = _1053;
        _1223 = _1052;
        _1224 = _1064;
        _1225 = _1063;
        _1226 = _1062;
        _1227 = _1074;
        _1228 = _1073;
        _1229 = _1072;
        _1230 = _1087;
        _1231 = _1086;
        _1232 = _1085;
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = _909;
        _1230 = _909;
        _1231 = _909;
        _1232 = _909;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1268 = fma(_1247, cbSceneParam._m0[89u].z, fma(_1246, cbSceneParam._m0[89u].y, _1245 * cbSceneParam._m0[89u].x));
    float _1271 = fma(_1247, cbSceneParam._m0[90u].z, fma(_1246, cbSceneParam._m0[90u].y, _1245 * cbSceneParam._m0[90u].x));
    float _1274 = fma(_1247, cbSceneParam._m0[91u].z, fma(_1246, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1245));
    float _1289 = _514 * 0.5;
    float _1290 = _515 * 0.5;
    float _1291 = _516 * 0.5;
    float _1292 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1295 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1298 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1332;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1305 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_908, _912, _915, _918));
        float _1309 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_910, _913, _916, _919));
        float _1313 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_911, _914, _917, _920));
        float _1320 = dot(vec4(cbModelParam._m0[39u]), vec4(_1289, _1290, _1291, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1343;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1334 = dot(vec4(cbModelParam._m0[40u]), vec4(_1289, _1290, _1291, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1334) ? 0.0 : (isnan(0.0) ? _1334 : max(0.0, _1334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1347 = (_1343 * cbModelParam._m0[1u].x) + (_1332 * (1.0 - cbModelParam._m0[1u].x));
    float _1357 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _338);
    float _1358 = isnan(_1357) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1357 : min(cbModelParam._m0[25u].z, _1357));
    float _1440;
    float _1442;
    float _1444;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1407 = fma(_577, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569)) + cbModelParam._m0[13u].w;
        float _1411 = fma(_577, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569)) + cbModelParam._m0[14u].w;
        float _1415 = fma(_577, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569)) + cbModelParam._m0[15u].w;
        float _1418 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1421 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1424 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1452;
        if (_1418 > 0.0)
        {
            _1452 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1452 = frontier_phi_17_15_ladder;
        }
        float _1628;
        if (_1421 > 0.0)
        {
            _1628 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1628 = frontier_phi_26_22_ladder;
        }
        float _1924;
        if (_1424 > 0.0)
        {
            _1924 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1924 = frontier_phi_38_33_ladder;
        }
        float _1926 = isnan(_1628) ? _1452 : (isnan(_1452) ? _1628 : min(_1452, _1628));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1418) + _1407;
        float _1932 = (_1927 * _1421) + _1411;
        float _1933 = (_1927 * _1424) + _1415;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1358);
            frontier_phi_16_38_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1440 = frontier_phi_16_38_ladder_2;
        _1442 = frontier_phi_16_38_ladder_1;
        _1444 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1358);
        _1440 = _1428.x * cbModelParam._m0[1u].y;
        _1442 = _1428.y * cbModelParam._m0[1u].y;
        _1444 = _1428.z * cbModelParam._m0[1u].y;
    }
    float _1448 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _338);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1448 : min(cbModelParam._m0[25u].w, _1448));
    float _1542;
    float _1544;
    float _1546;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1506 = fma(_577, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569)) + cbModelParam._m0[21u].w;
        float _1510 = fma(_577, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569)) + cbModelParam._m0[22u].w;
        float _1514 = fma(_577, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569)) + cbModelParam._m0[23u].w;
        float _1517 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1520 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1523 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1633;
        if (_1517 > 0.0)
        {
            _1633 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_28_24_ladder;
        }
        float _1951;
        if (_1520 > 0.0)
        {
            _1951 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1951 = frontier_phi_40_35_ladder;
        }
        float _2289;
        if (_1523 > 0.0)
        {
            _2289 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2289 = frontier_phi_50_47_ladder;
        }
        float _2291 = isnan(_1951) ? _1633 : (isnan(_1633) ? _1951 : min(_1633, _1951));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1517) + _1506;
        float _2297 = (_2292 * _1520) + _1510;
        float _2298 = (_2292 * _1523) + _1514;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1449);
            frontier_phi_25_50_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1542 = frontier_phi_25_50_ladder_2;
        _1544 = frontier_phi_25_50_ladder_1;
        _1546 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1449);
        _1542 = _1526.x * cbModelParam._m0[1u].z;
        _1544 = _1526.y * cbModelParam._m0[1u].z;
        _1546 = _1526.z * cbModelParam._m0[1u].z;
    }
    float _1559 = (((_540 * _491) + _541) * _506) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1561 = (((_540 * _493) + _541) * _506) * ((cbModelParam._m0[1u].w * (_1544 - _1442)) + _1442);
    float _1563 = (((_540 * _494) + _541) * _506) * ((cbModelParam._m0[1u].w * (_1546 - _1444)) + _1444);
    float _1566 = fma(_1563, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1563, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1563, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, _1559 * cbSceneParam._m0[91u].x));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1620 = _1607 / _1619;
    float _1621 = _1611 / _1619;
    float _1622 = _1615 / _1619;
    float _1769;
    float _1770;
    float _1771;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1649 = ((uint(_1622 > cbSceneParam._m0[59u].y) + uint(_1622 > cbSceneParam._m0[59u].x)) + uint(_1622 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1650 = _1649 + 43u;
        uint _1658 = _1649 + 44u;
        uint _1666 = _1649 + 45u;
        uint _1674 = _1649 + 46u;
        float _1685 = fma(_1619, cbSceneParam._m0[_1650].w, fma(_1615, cbSceneParam._m0[_1650].z, fma(_1611, cbSceneParam._m0[_1650].y, _1607 * cbSceneParam._m0[_1650].x)));
        float _1689 = fma(_1619, cbSceneParam._m0[_1658].w, fma(_1615, cbSceneParam._m0[_1658].z, fma(_1611, cbSceneParam._m0[_1658].y, _1607 * cbSceneParam._m0[_1658].x)));
        float _1697 = fma(_1619, cbSceneParam._m0[_1674].w, fma(_1615, cbSceneParam._m0[_1674].z, fma(_1611, cbSceneParam._m0[_1674].y, _1607 * cbSceneParam._m0[_1674].x)));
        float _1702 = cbSceneParam._m0[33u].z * _1697;
        float _1704 = cbSceneParam._m0[33u].w * _1697;
        float _1707 = fma(_1619, cbSceneParam._m0[_1666].w, fma(_1615, cbSceneParam._m0[_1666].z, fma(_1611, cbSceneParam._m0[_1666].y, _1607 * cbSceneParam._m0[_1666].x))) / _1697;
        float _1755 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
        float _4122 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1762 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1685) / _1697, (_1704 + _1689) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1685) / _1697, (_1689 - _1702) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1702) / _1697, (_1689 - _1704) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1704) / _1697, (_1702 + _1689) / _1697), _1707), 0.0)).x), vec4(0.25)));
        _1769 = 1.0 - (_1762 * cbSceneParam._m0[34u].x);
        _1770 = 1.0 - (_1762 * cbSceneParam._m0[34u].y);
        _1771 = 1.0 - (_1762 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1769 = 1.0;
        _1770 = 1.0;
        _1771 = 1.0;
    }
    float _1835;
    float _1837;
    float _1839;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1823 = fma(_1619, cbSceneParam._m0[63u].w, fma(_1615, cbSceneParam._m0[63u].z, fma(_1611, cbSceneParam._m0[63u].y, _1607 * cbSceneParam._m0[63u].x)));
        float _1824 = fma(_1619, cbSceneParam._m0[60u].w, fma(_1615, cbSceneParam._m0[60u].z, fma(_1611, cbSceneParam._m0[60u].y, _1607 * cbSceneParam._m0[60u].x))) / _1823;
        float _1825 = fma(_1619, cbSceneParam._m0[61u].w, fma(_1615, cbSceneParam._m0[61u].z, fma(_1611, cbSceneParam._m0[61u].y, _1607 * cbSceneParam._m0[61u].x))) / _1823;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1824 >= cbSceneParam._m0[64u].x) && (_1825 >= cbSceneParam._m0[64u].y)) && (_1824 <= cbSceneParam._m0[64u].z)) && (_1825 <= cbSceneParam._m0[64u].w))
        {
            float _1964 = fma(_1619, cbSceneParam._m0[62u].w, fma(_1615, cbSceneParam._m0[62u].z, fma(_1611, cbSceneParam._m0[62u].y, _1607 * cbSceneParam._m0[62u].x))) / _1823;
            float _1968 = isnan(cbSceneParam._m0[41u].w) ? _1964 : (isnan(_1964) ? cbSceneParam._m0[41u].w : max(_1964, cbSceneParam._m0[41u].w));
            float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
            float _4138 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
            float _2018 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1824, cbSceneParam._m0[33u].w + _1825), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1824, _1825 - cbSceneParam._m0[33u].z), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].z, _1825 - cbSceneParam._m0[33u].w), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1825), _1968), 0.0)).x), vec4(0.25)));
            float _2022 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
            float _2023 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
            float _2024 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
            frontier_phi_37_36_ladder_1 = isnan(_2023) ? _1770 : (isnan(_1770) ? _2023 : min(_1770, _2023));
            frontier_phi_37_36_ladder_2 = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
        }
        else
        {
            frontier_phi_37_36_ladder = _1771;
            frontier_phi_37_36_ladder_1 = _1770;
            frontier_phi_37_36_ladder_2 = _1769;
        }
        _1835 = frontier_phi_37_36_ladder_2;
        _1837 = frontier_phi_37_36_ladder_1;
        _1839 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1835 = _1769;
        _1837 = _1770;
        _1839 = _1771;
    }
    uvec4 _1844 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1846 = _1844.x * 14u;
    uint _1847 = _1846 + 13u;
    float _1854 = _506 + (-1.0);
    float _1859 = (cbLight._m0[_1847].x * _1854) + 1.0;
    float _1860 = (cbLight._m0[_1847].y * _1854) + 1.0;
    float _1861 = (cbLight._m0[_1847].z * _1854) + 1.0;
    float _1862 = (cbLight._m0[_1847].w * _1854) + 1.0;
    uint _1863 = _1846 + 5u;
    float _1869 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1873 = _1846 + 4u;
    float _1883 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1887 = _1846 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_334, _335, _336));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_334, _335, _336));
    float _4174 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4185 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1863].x * _1869) * _1908) + (((cbLight._m0[_1873].x * _1835) * _1883) * _1906);
    float _1916 = ((_1869 * cbLight._m0[_1863].y) * _1908) + (((cbLight._m0[_1873].y * _1837) * _1883) * _1906);
    float _1917 = ((_1869 * cbLight._m0[_1863].z) * _1908) + (((cbLight._m0[_1873].z * _1839) * _1883) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1846 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1923)
    {
        _2025 = _1915;
        _2027 = _1916;
        _2029 = _1917;
    }
    else
    {
        uint _2033 = _1846 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1846 + 2u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4196 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2052 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _1915;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _1916;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _1917;
    }
    bool _2032 = _1921.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2032)
    {
        _2087 = _2025;
        _2089 = _2027;
        _2091 = _2029;
    }
    else
    {
        uint _2260 = _1846 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1846 + 3u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4212 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2279 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2087 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2025;
        _2089 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2027;
        _2091 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2029;
    }
    uint _2094 = _1846 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _338) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1846].x + _405;
    float _2110 = cbLight._m0[_1846].y + _406;
    float _2111 = cbLight._m0[_1846].z + _407;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1846].xyz));
    float _4228 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2123 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2124 = dot(vec3(_334, _335, _336), vec3(_2116, _2117, _2118));
    float _4250 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2116, _2117, _2118));
    float _4261 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _488;
    float _2147 = 0.959999978542327880859375 - _489;
    float _2148 = 0.959999978542327880859375 - _490;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4272 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2182 = _1846 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _338) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1887].x + _405;
    float _2196 = cbLight._m0[_1887].y + _406;
    float _2197 = cbLight._m0[_1887].z + _407;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1887].xyz));
    float _4283 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2209 = dot(vec3(_334, _335, _336), vec3(_2202, _2203, _2204));
    float _4294 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2202, _2203, _2204));
    float _4305 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2123 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2235) + _2194) * _2208))) * _2208;
    float _4316 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2145) + _491) * cbLight._m0[_2182].x) * _2247) * _1869) + ((((cbLight._m0[_2094].x * _1835) * ((_2144 * _2145) + _491)) * _2168) * _1883);
    float _2258 = (((((_2228 * _2147) + _493) * cbLight._m0[_2182].y) * _2247) * _1869) + ((((cbLight._m0[_2094].y * _1837) * ((_2144 * _2147) + _493)) * _2168) * _1883);
    float _2259 = (((((_2228 * _2148) + _494) * cbLight._m0[_2182].z) * _2247) * _1869) + ((((cbLight._m0[_2094].z * _1839) * ((_2144 * _2148) + _494)) * _2168) * _1883);
    float _2315;
    float _2317;
    float _2319;
    if (_1923)
    {
        _2315 = _2257;
        _2317 = _2258;
        _2319 = _2259;
    }
    else
    {
        uint _2321 = _1846 + 2u;
        uint _2325 = _1846 + 10u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _338) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _405;
        float _2342 = cbLight._m0[_2321].y + _406;
        float _2343 = cbLight._m0[_2321].z + _407;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2321].xyz));
        float _4327 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2355 = dot(vec3(_334, _335, _336), vec3(_2348, _2349, _2350));
        float _4338 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4349 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2381 = 1.0 - _2340;
        float _2391 = (0.5 / (((_2123 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2381) + _2340) * _2354))) * _2354;
        float _4360 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2315 = (((((_2374 * _2145) + _491) * cbLight._m0[_2325].x) * _2393) * _2394) + _2257;
        _2317 = (((((_2374 * _2147) + _493) * cbLight._m0[_2325].y) * _2393) * _2394) + _2258;
        _2319 = (((((_2374 * _2148) + _494) * cbLight._m0[_2325].z) * _2393) * _2394) + _2259;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2032)
    {
        _2425 = _2315;
        _2427 = _2317;
        _2429 = _2319;
    }
    else
    {
        uint _2436 = _1846 + 3u;
        uint _2440 = _1846 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _338) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _405;
        float _2457 = cbLight._m0[_2436].y + _406;
        float _2458 = cbLight._m0[_2436].z + _407;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2436].xyz));
        float _4376 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2470 = dot(vec3(_334, _335, _336), vec3(_2463, _2464, _2465));
        float _4387 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4398 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2123 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2496) + _2455) * _2469))) * _2469;
        float _4409 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2425 = (((((_2489 * _2145) + _491) * cbLight._m0[_2440].x) * _2508) * _2509) + _2315;
        _2427 = (((((_2489 * _2147) + _493) * cbLight._m0[_2440].y) * _2508) * _2509) + _2317;
        _2429 = (((((_2489 * _2148) + _494) * cbLight._m0[_2440].z) * _2508) * _2509) + _2319;
    }
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_1844.y == 0u)
    {
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.x;
        uint _2542 = uint((float(_2530.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2531))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2531)));
        float _2552 = (log2(_1622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        uint _2556 = uint(isnan(14.0) ? _2553 : (isnan(_2553) ? 14.0 : min(_2553, 14.0)));
        uvec4 _2561 = texelFetch(g_lightClusterGridBuffer, int(((_2556 << 2u) + (_2542 << 6u)) >> 2u));
        uint _2562 = _2561.x;
        uint _2563 = _2530.z;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((((1u << ((_2563 >> 4u) & 15u)) + 4294967295u) & _2562) == 0u) || ((_2563 & 240u) == 0u))
        {
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
        }
        else
        {
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2815)
                {
                    frontier_phi_71_pred = _2804;
                    frontier_phi_71_pred_1 = _2803;
                    frontier_phi_71_pred_2 = _2802;
                    frontier_phi_71_pred_3 = _2801;
                    frontier_phi_71_pred_4 = _2800;
                    frontier_phi_71_pred_5 = _2799;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2814;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2805 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _1620;
                        float _3011 = _2970.y - _1621;
                        float _3012 = _2970.z - _1622;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_446, _449, _452), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4435 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _1620;
                        float _3046 = (-0.0) - _1621;
                        float _3047 = (-0.0) - _1622;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3061 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3062 = 1.0 - _522;
                        float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                        float _3070 = _3069 * _3069;
                        float _3071 = _3070 * _3070;
                        float _3072 = _3052 + _3017;
                        float _3073 = _3053 + _3018;
                        float _3074 = _3054 + _3019;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3082 = dot(vec3(_446, _449, _452), vec3(_3052, _3053, _3054));
                        float _4451 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3086 = dot(vec3(_446, _449, _452), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                        float _4462 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                        float _3094 = _3030 * _3070;
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3020) + _3095;
                        float _4473 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3100 = 1.0 - _3070;
                        float _3110 = (0.5 / (((_3099 * ((_3085 * _3100) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3070) * _3085))) * _3099;
                        float _4484 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3121 = (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3093 * _3093) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2874 = (_3041 * _2989.x) + _2947;
                        _2875 = (_3041 * _2989.y) + _2948;
                        _2876 = (_3041 * _2989.z) + _2949;
                        _2871 = (_3121 * _3006.x) + _2944;
                        _2872 = (_3121 * _3006.y) + _2945;
                        _2873 = (_3121 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_71_pred = _2876;
                    frontier_phi_71_pred_1 = _2875;
                    frontier_phi_71_pred_2 = _2874;
                    frontier_phi_71_pred_3 = _2873;
                    frontier_phi_71_pred_4 = _2872;
                    frontier_phi_71_pred_5 = _2871;
                }
                _2658 = frontier_phi_71_pred;
                _2656 = frontier_phi_71_pred_1;
                _2654 = frontier_phi_71_pred_2;
                _2652 = frontier_phi_71_pred_3;
                _2650 = frontier_phi_71_pred_4;
                _2648 = frontier_phi_71_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2648;
                    _2800 = _2650;
                    _2801 = _2652;
                    _2802 = _2654;
                    _2803 = _2656;
                    _2804 = _2658;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
        }
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.z;
        uint _2664 = (_2662 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2664) & _2562) == 0u)
        {
            _2767 = _2647;
            _2769 = _2649;
            _2771 = _2651;
            _2773 = _2653;
            _2775 = _2655;
            _2777 = _2657;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
            float _2793 = _2792 * _1620;
            float _2794 = _2792 * _1621;
            float _2795 = _2792 * _1622;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2664 < ((_2662 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2927 = _2647;
                float _2928 = _2649;
                float _2929 = _2651;
                float _2930 = _2653;
                float _2931 = _2655;
                float _2932 = _2657;
                uint _2933 = _2664;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2943)
                    {
                        frontier_phi_82_pred = _2932;
                        frontier_phi_82_pred_1 = _2931;
                        frontier_phi_82_pred_2 = _2930;
                        frontier_phi_82_pred_3 = _2929;
                        frontier_phi_82_pred_4 = _2928;
                        frontier_phi_82_pred_5 = _2927;
                    }
                    else
                    {
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3148 = _2927;
                        float _3149 = _2928;
                        float _3150 = _2929;
                        float _3151 = _2930;
                        float _3152 = _2931;
                        float _3153 = _2932;
                        uint _3154 = _2942;
                        uint _3155;
                        vec4 _3180;
                        float _3181;
                        vec4 _3196;
                        vec3 _3208;
                        vec4 _3224;
                        vec4 _3240;
                        float _3287;
                        bool _3288;
                        for (;;)
                        {
                            uint _3165 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3154));
                            _3155 = (_3154 + 4294967295u) & _3154;
                            uint _3167 = _3165 * 40u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3181 = _3180.w;
                            uint _3183 = (_3165 * 40u) + 4u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3165 * 40u) + 8u;
                            _3208 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x));
                            uint _3211 = (_3165 * 40u) + 16u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3165 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3243 = (_3165 * 40u) + 24u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3262 = (_3165 * 40u) + 28u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3287 = fma(_1622, _3275.z, fma(_1621, _3275.y, _3275.x * _1620)) + _3275.w;
                            _3288 = !((fma(_1622, _3256.z, fma(_1621, _3256.y, _3256.x * _1620)) + _3256.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3288)
                            {
                                float _3315 = _3180.x - _1620;
                                float _3316 = _3180.y - _1621;
                                float _3317 = _3180.z - _1622;
                                float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                                float _3321 = inversesqrt(_3318);
                                float _3322 = _3321 * _3315;
                                float _3323 = _3321 * _3316;
                                float _3324 = _3321 * _3317;
                                float _3328 = 1.0 - (_3318 / (_3181 * _3181));
                                float _4495 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3333 = sqrt(_3318) * _3196.w;
                                float _3335 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                                float _3336 = _3335 * _3335;
                                float _3339 = ((1.0 - _3336) * dot(vec3(_3322, _3323, _3324), vec3(_446, _449, _452))) + _3336;
                                float _3342 = _3333 * _3333;
                                float _3346 = (fma(_1622, _3224.z, fma(_1621, _3224.y, _3224.x * _1620)) + _3224.w) / _3287;
                                float _3347 = (fma(_1622, _3240.z, fma(_1621, _3240.y, _3240.x * _1620)) + _3240.w) / _3287;
                                float _3351 = 1.0 - dot(vec2(_3346, _3347), vec2(_3346, _3347));
                                float _4511 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3353 = _3352 * (((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3329) / ((_3342 * 0.699999988079071044921875) + 1.0));
                                float _3365 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                                float _3366 = 1.0 - _522;
                                float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                                float _3374 = _3373 * _3373;
                                float _3375 = _3374 * _3374;
                                float _3376 = _3322 - _2793;
                                float _3377 = _3323 - _2794;
                                float _3378 = _3324 - _2795;
                                float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                                float _3386 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4522 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3390 = dot(vec3(_446, _449, _452), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                                float _4533 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                                float _3398 = _3335 * _3374;
                                float _3399 = _3398 * _3398;
                                float _3405 = ((1.0 - _3399) * dot(vec3(_446, _449, _452), vec3(_3322, _3323, _3324))) + _3399;
                                float _4544 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3407 = 1.0 - _3374;
                                float _3417 = (0.5 / (((_3406 * ((_3389 * _3407) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3374) * _3389))) * _3406;
                                float _4555 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3427 = (_3352 * _3329) * (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3397 * _3397) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3353 * _3196.z;
                                frontier_phi_88_pred_1 = _3353 * _3196.y;
                                frontier_phi_88_pred_2 = _3353 * _3196.x;
                                frontier_phi_88_pred_3 = _3427 * _3208.z;
                                frontier_phi_88_pred_4 = _3427 * _3208.y;
                                frontier_phi_88_pred_5 = _3427 * _3208.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3436 = frontier_phi_88_pred;
                            _3435 = frontier_phi_88_pred_1;
                            _3434 = frontier_phi_88_pred_2;
                            _3433 = frontier_phi_88_pred_3;
                            _3432 = frontier_phi_88_pred_4;
                            _3431 = frontier_phi_88_pred_5;
                            _3138 = _3434 + _3151;
                            _3139 = _3435 + _3152;
                            _3140 = _3436 + _3153;
                            _3135 = _3431 + _3148;
                            _3136 = _3432 + _3149;
                            _3137 = _3433 + _3150;
                            if (_3155 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3155;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3140;
                        frontier_phi_82_pred_1 = _3139;
                        frontier_phi_82_pred_2 = _3138;
                        frontier_phi_82_pred_3 = _3137;
                        frontier_phi_82_pred_4 = _3136;
                        frontier_phi_82_pred_5 = _3135;
                    }
                    _2778 = frontier_phi_82_pred;
                    _2776 = frontier_phi_82_pred_1;
                    _2774 = frontier_phi_82_pred_2;
                    _2772 = frontier_phi_82_pred_3;
                    _2770 = frontier_phi_82_pred_4;
                    _2768 = frontier_phi_82_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2768;
                        _2928 = _2770;
                        _2929 = _2772;
                        _2930 = _2774;
                        _2931 = _2776;
                        _2932 = _2778;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2774;
                frontier_phi_63_64_ladder_1 = _2778;
                frontier_phi_63_64_ladder_2 = _2776;
                frontier_phi_63_64_ladder_3 = _2772;
                frontier_phi_63_64_ladder_4 = _2770;
                frontier_phi_63_64_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_63_64_ladder = _2653;
                frontier_phi_63_64_ladder_1 = _2657;
                frontier_phi_63_64_ladder_2 = _2655;
                frontier_phi_63_64_ladder_3 = _2651;
                frontier_phi_63_64_ladder_4 = _2649;
                frontier_phi_63_64_ladder_5 = _2647;
            }
            _2767 = frontier_phi_63_64_ladder_5;
            _2769 = frontier_phi_63_64_ladder_4;
            _2771 = frontier_phi_63_64_ladder_3;
            _2773 = frontier_phi_63_64_ladder;
            _2775 = frontier_phi_63_64_ladder_2;
            _2777 = frontier_phi_63_64_ladder_1;
        }
        float _2782 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2575 = (_2782 * _2773) + _2087;
        _2577 = (_2782 * _2775) + _2089;
        _2579 = (_2782 * _2777) + _2091;
        _2581 = ((_2767 * _491) * _2782) + _2425;
        _2583 = ((_2769 * _493) * _2782) + _2427;
        _2585 = ((_2771 * _494) * _2782) + _2429;
    }
    else
    {
        _2575 = _2087;
        _2577 = _2089;
        _2579 = _2091;
        _2581 = _2425;
        _2583 = _2427;
        _2585 = _2429;
    }
    float _4571 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4582 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4593 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4604 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _2603 = ((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2575 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _506))) + ((_2581 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1347)) * cbPerFrame._m0[3u].x);
    float _2604 = ((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2577 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _506))) + ((_2583 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1347)) * cbPerFrame._m0[3u].x);
    float _2605 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2579 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _506))) + ((_2585 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1347)) * cbPerFrame._m0[3u].x);
    float _2606 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2613 = cbInstanceData._m0[_465 + 6u].w * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)));
    float _2618 = _425 / cbSceneParam._m0[86u].x;
    float _2619 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2633 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2635 = _2633.x;
    float _2636 = _2633.y;
    float _2637 = _2633.z;
    float _2638 = _2633.w;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _2672 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _2673 = _2672 / _347;
        float _2684 = _2673 * _398;
        float _2685 = _399 * _2673;
        float _2686 = (-0.0) - _2685;
        float _2687 = _2673 * _400;
        float _2689 = (cbSceneParam._m0[77u].w * _2686) / _2672;
        float _2690 = _2689 + cbSceneParam._m0[79u].w;
        float _2691 = cbSceneParam._m0[79u].w - _2685;
        float _2697 = sqrt(((_2684 * _2684) + (_2685 * _2685)) + (_2687 * _2687));
        float _2700 = (1.0 - (cbSceneParam._m0[77u].w / _2672)) * _2697;
        float _2705 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2707 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2884;
        if (abs((_2686 - _2689) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2884 = ((((_2690 > 0.0) ? exp2(_2705 * _2690) : (2.0 - exp2(_2707 * _2690))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2700;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : max(_2690, _2691));
            float _2830 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : min(_2690, _2691));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2884 = ((abs(_2697 / _2686) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2705 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2705 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2707 * _2839) - exp2(_2707 * _2840)) * _2828))) + (_2700 * cbSceneParam._m0[80u].z);
        }
        vec4 _2886 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, 1.0), 0.0);
        float _2895 = exp2((_2884 * (-1.44269502162933349609375)) * (1.0 - _2886.w));
        float _2896 = log2(_2895);
        float _2912 = log2(_2638);
        _2709 = (exp2(_2912 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].x)) * _2886.x) / cbSceneParam._m0[78u].x)) + _2635;
        _2711 = (exp2(_2912 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].y)) * _2886.y) / cbSceneParam._m0[78u].y)) + _2636;
        _2713 = (exp2(_2912 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].z)) * _2886.z) / cbSceneParam._m0[78u].z)) + _2637;
        _2715 = _2895 * _2638;
    }
    else
    {
        _2709 = _2635;
        _2711 = _2636;
        _2713 = _2637;
        _2715 = _2638;
    }
    bool _2922;
    vec4 _2725;
    vec4 _2747;
    float _2749;
    float _2753;
    float _2754;
    float _2755;
    float _2756;
    bool _2766;
    for (;;)
    {
        _2725 = cbMatDynParam._m0[0u];
        float _2727 = roundEven(_2725.y);
        bool _2728 = _2727 == 3.0;
        float _2729 = log2(_2715);
        float _2736 = exp2(_2729 * cbSceneParam._m0[78u].x) * _2606;
        float _2737 = exp2(_2729 * cbSceneParam._m0[78u].y) * _2607;
        float _2738 = exp2(_2729 * cbSceneParam._m0[78u].z) * _2608;
        float _2745 = _414 + (-0.5);
        _2747 = cbMtdParam._m0[1u];
        _2749 = _2747.y * _2745;
        float _2752 = (_2727 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2753 = _2752 * (_2728 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2709)));
        _2754 = _2752 * (_2728 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2711)));
        _2755 = _2752 * (_2728 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2713)));
        _2756 = _2745 * 0.999000012874603271484375;
        _2766 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2766)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2756) < 0.5)
            {
                _2922 = true;
                break;
            }
        }
        uint _2863 = _467 + uint(_2725.w);
        if ((cbInstanceData._m0[_2863].w < 1.0) && ((cbInstanceData._m0[_2863].w + _2756) < 0.5))
        {
            _2922 = true;
            break;
        }
        if ((_2749 + _290) < _2747.x)
        {
            _2922 = true;
            break;
        }
        _2922 = false;
        break;
    }
    float _3126;
    if (_2922)
    {
        discard_state = true;
        _3126 = 0.0;
    }
    else
    {
        _3126 = _2613;
    }
    SV_Target.x = _2753;
    SV_Target.y = _2754;
    SV_Target.z = _2755;
    SV_Target.w = _3126;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2613;
    discard_exit();
}


