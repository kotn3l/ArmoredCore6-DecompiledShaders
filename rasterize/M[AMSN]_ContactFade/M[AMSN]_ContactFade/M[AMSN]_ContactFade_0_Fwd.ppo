#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _879;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.w;
    float _233 = cbMtdParam._m0[9u].x * _220.x;
    float _234 = cbMtdParam._m0[9u].y * _220.y;
    float _235 = cbMtdParam._m0[9u].z * _220.z;
    vec4 _248 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _250 = _248.x;
    bool _257 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _274 = ((_257 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _250)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _250))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3220 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _277 = 1.0 - (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)));
    float _3231 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _278 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _286 = _226 - (((_278 * _278) * _226) * (3.0 - (_278 * 2.0)));
    vec4 _298 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _304 = cbMtdParam._m0[10u].x + _298.x;
    vec4 _316 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _320 = _316.z;
    float _323 = (_316.x * 2.0) + (-1.0);
    float _325 = (_316.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3242 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))));
    float _334 = fma(_331, _196 * NORMAL.x, fma(_325, _203 * TANGENT.x, (_189 * _182) * _323));
    float _337 = fma(_331, _196 * NORMAL.y, fma(_325, _203 * TANGENT.y, (_189 * _183) * _323));
    float _340 = fma(_331, _196 * NORMAL.z, fma(_325, _203 * TANGENT.z, (_189 * _184) * _323));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    float _345 = _344 * _334;
    float _346 = _344 * _337;
    float _347 = _344 * _340;
    float _3253 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _348 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _349 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _3275 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3286 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3297 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3308 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _353 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _358 = _257 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _409 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _399);
    float _410 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _399);
    float _411 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _399);
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _416 = _409 * _415;
    float _417 = _410 * _415;
    float _418 = _411 * _415;
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _445 = fma(_347, cbSceneParam._m0[5u].z, fma(_346, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _345));
    float _448 = fma(_347, cbSceneParam._m0[6u].z, fma(_346, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _345));
    float _451 = fma(_347, cbSceneParam._m0[7u].z, fma(_346, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _345));
    uint _464 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = (_464 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _473 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_467].x;
    float _474 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_467].y;
    float _475 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_467].z;
    float _3319 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _479 = 1.0 - _353;
    float _480 = _476 * _479;
    float _481 = _477 * _479;
    float _482 = _478 * _479;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _353;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _353;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _353;
    float _490 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    vec4 _502 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _505 = _502.x * TEXCOORD.z;
    float _506 = dot(vec3(_345, _346, _347), vec3(_416, _417, _418));
    float _509 = _506 * 2.0;
    float _513 = (_509 * _345) - _416;
    float _514 = (_509 * _346) - _417;
    float _515 = (_509 * _347) - _418;
    float _519 = abs(dot(vec3(_416, _417, _418), vec3(_345, _346, _347)));
    float _3352 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _521 = sqrt(_349);
    float _533 = exp2((_521 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_521 * 3.0));
    float _539 = (1.0 - _533) * ((_521 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _521;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _607 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _611 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _636 = _568 + _345;
        float _637 = _572 + _346;
        float _638 = _576 + _347;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_345, _346, _347), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3400 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_345, _346, _347), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3433 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_345, _346, _347), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3466 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _919 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _923 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _927 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _950 = _568 + _345;
        float _951 = _572 + _346;
        float _952 = _576 + _347;
        float _962 = fma(_952, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950)) - _919;
        float _963 = fma(_952, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950)) - _923;
        float _964 = fma(_952, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950)) - _927;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_919 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_923 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[35u].z) + ((((((_927 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1018 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_985.x + (-0.5));
        float _1020 = _1018 * (_985.y + (-0.5));
        float _1021 = _1018 * (_985.z + (-0.5));
        float _1028 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_992.x + (-0.5));
        float _1030 = _1028 * (_992.y + (-0.5));
        float _1031 = _1028 * (_992.z + (-0.5));
        float _1038 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_999.x + (-0.5));
        float _1040 = _1038 * (_999.y + (-0.5));
        float _1041 = _1038 * (_999.z + (-0.5));
        float _1048 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1006.x + (-0.5));
        float _1050 = _1048 * (_1006.y + (-0.5));
        float _1051 = _1048 * (_1006.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_345, _346, _347), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3529 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_1082 + 1.0))) + _1087) * _1052;
        float _1097 = _1020 * 0.5;
        float _1098 = _1030 * 0.5;
        float _1099 = _1040 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_345, _346, _347), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3562 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1124 + 1.0))) + _1129) * _1053;
        float _1139 = _1021 * 0.5;
        float _1140 = _1031 * 0.5;
        float _1141 = _1041 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_345, _346, _347), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3595 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1166 + 1.0))) + _1171) * _1054;
        _1188 = _1021;
        _1189 = _1020;
        _1190 = _1019;
        _1191 = _1031;
        _1192 = _1030;
        _1193 = _1029;
        _1194 = _1041;
        _1195 = _1040;
        _1196 = _1039;
        _1197 = _1054;
        _1198 = _1053;
        _1199 = _1052;
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _879;
        _1189 = _879;
        _1190 = _879;
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = _879;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _891)) + _891;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _892)) + _892;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1235 = fma(_1214, cbSceneParam._m0[89u].z, fma(_1213, cbSceneParam._m0[89u].y, _1212 * cbSceneParam._m0[89u].x));
    float _1238 = fma(_1214, cbSceneParam._m0[90u].z, fma(_1213, cbSceneParam._m0[90u].y, _1212 * cbSceneParam._m0[90u].x));
    float _1241 = fma(_1214, cbSceneParam._m0[91u].z, fma(_1213, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1212));
    float _1256 = _513 * 0.5;
    float _1257 = _514 * 0.5;
    float _1258 = _515 * 0.5;
    float _1259 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1262 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1265 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1299;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1272 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_878, _882, _885, _888));
        float _1276 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_880, _883, _886, _889));
        float _1280 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_881, _884, _887, _890));
        float _1287 = dot(vec4(cbModelParam._m0[39u]), vec4(_1256, _1257, _1258, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1310;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1301 = dot(vec4(cbModelParam._m0[40u]), vec4(_1256, _1257, _1258, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1314 = (_1310 * cbModelParam._m0[1u].x) + (_1299 * (1.0 - cbModelParam._m0[1u].x));
    float _1324 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _349);
    float _1325 = isnan(_1324) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1324 : min(cbModelParam._m0[25u].z, _1324));
    float _1407;
    float _1409;
    float _1411;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1374 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1378 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1382 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1385 = fma(_515, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513));
        float _1388 = fma(_515, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513));
        float _1391 = fma(_515, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513));
        float _1419;
        if (_1385 > 0.0)
        {
            _1419 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1419 = frontier_phi_14_12_ladder;
        }
        float _1627;
        if (_1388 > 0.0)
        {
            _1627 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1627 = frontier_phi_23_19_ladder;
        }
        float _1881;
        if (_1391 > 0.0)
        {
            _1881 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1881 = frontier_phi_35_30_ladder;
        }
        float _1883 = isnan(_1627) ? _1419 : (isnan(_1419) ? _1627 : min(_1419, _1627));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1385) + _1374;
        float _1889 = (_1884 * _1388) + _1378;
        float _1890 = (_1884 * _1391) + _1382;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1325);
            frontier_phi_13_35_ladder = _2018.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2018.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2018.x * cbModelParam._m0[1u].y;
        }
        _1407 = frontier_phi_13_35_ladder_2;
        _1409 = frontier_phi_13_35_ladder_1;
        _1411 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_513, _514, _515), _1325);
        _1407 = _1395.x * cbModelParam._m0[1u].y;
        _1409 = _1395.y * cbModelParam._m0[1u].y;
        _1411 = _1395.z * cbModelParam._m0[1u].y;
    }
    float _1415 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _349);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1415 : min(cbModelParam._m0[25u].w, _1415));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1473 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1477 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1481 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1484 = fma(_515, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513));
        float _1487 = fma(_515, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513));
        float _1490 = fma(_515, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513));
        float _1632;
        if (_1484 > 0.0)
        {
            _1632 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1632 = frontier_phi_25_21_ladder;
        }
        float _1908;
        if (_1487 > 0.0)
        {
            _1908 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1908 = frontier_phi_37_32_ladder;
        }
        float _2121;
        if (_1490 > 0.0)
        {
            _2121 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2121 = frontier_phi_46_43_ladder;
        }
        float _2123 = isnan(_1908) ? _1632 : (isnan(_1632) ? _1908 : min(_1632, _1908));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1484) + _1473;
        float _2129 = (_2124 * _1487) + _1477;
        float _2130 = (_2124 * _1490) + _1481;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2131;
        float _2134 = _2131 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2130 > _2134) || ((_2130 < _2132) || ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 < _2132) || (_2128 > _2134))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2130, cbModelParam._m0[17u].z, fma(_2129, cbModelParam._m0[17u].y, _2128 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2130, cbModelParam._m0[18u].z, fma(_2129, cbModelParam._m0[18u].y, _2128 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2130, cbModelParam._m0[19u].z, fma(_2129, cbModelParam._m0[19u].y, _2128 * cbModelParam._m0[19u].x))), _1416);
            frontier_phi_22_46_ladder = _2334.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2334.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2334.x * cbModelParam._m0[1u].z;
        }
        _1509 = frontier_phi_22_46_ladder_2;
        _1511 = frontier_phi_22_46_ladder_1;
        _1513 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_513, _514, _515), _1416);
        _1509 = _1493.x * cbModelParam._m0[1u].z;
        _1511 = _1493.y * cbModelParam._m0[1u].z;
        _1513 = _1493.z * cbModelParam._m0[1u].z;
    }
    float _1526 = (((_539 * _490) + _540) * _505) * ((cbModelParam._m0[1u].w * (_1509 - _1407)) + _1407);
    float _1528 = (((_539 * _492) + _540) * _505) * ((cbModelParam._m0[1u].w * (_1511 - _1409)) + _1409);
    float _1530 = (((_539 * _493) + _540) * _505) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1533 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_464 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1559 = _505 + (-1.0);
    float _1564 = (cbLight._m0[_1552].x * _1559) + 1.0;
    float _1565 = (cbLight._m0[_1552].y * _1559) + 1.0;
    float _1566 = (cbLight._m0[_1552].z * _1559) + 1.0;
    float _1567 = (cbLight._m0[_1552].w * _1559) + 1.0;
    uint _1568 = _1551 + 5u;
    float _1574 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1578 = _1551 + 4u;
    float _1585 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1589 = _1551 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_345, _346, _347));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_345, _346, _347));
    float _3731 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3742 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1568].x * _1574) * _1610) + ((cbLight._m0[_1578].x * _1585) * _1608);
    float _1618 = ((_1574 * cbLight._m0[_1568].y) * _1610) + ((_1585 * cbLight._m0[_1578].y) * _1608);
    float _1619 = ((_1574 * cbLight._m0[_1568].z) * _1610) + ((_1585 * cbLight._m0[_1578].z) * _1608);
    uvec4 _1624 = floatBitsToUint(cbLight._m0[_1551 + 12u]);
    bool _1626 = _1624.x == 0u;
    float _1637;
    float _1639;
    float _1641;
    if (_1626)
    {
        _1637 = _1617;
        _1639 = _1618;
        _1641 = _1619;
    }
    else
    {
        uint _1645 = _1551 + 6u;
        float _1661 = (dot(vec3(cbLight._m0[_1551 + 2u].xyz), vec3(_345, _346, _347)) * 0.5) + 0.5;
        float _1662 = _1661 * _1661;
        float _3753 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1664 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1637 = (((cbLight._m0[_1645].x * 0.3183098733425140380859375) * _1663) * _1664) + _1617;
        _1639 = (((cbLight._m0[_1645].y * 0.3183098733425140380859375) * _1663) * _1664) + _1618;
        _1641 = (((cbLight._m0[_1645].z * 0.3183098733425140380859375) * _1663) * _1664) + _1619;
    }
    bool _1644 = _1624.y == 0u;
    float _1682;
    float _1684;
    float _1686;
    if (_1644)
    {
        _1682 = _1637;
        _1684 = _1639;
        _1686 = _1641;
    }
    else
    {
        uint _1852 = _1551 + 7u;
        float _1868 = (dot(vec3(cbLight._m0[_1551 + 3u].xyz), vec3(_345, _346, _347)) * 0.5) + 0.5;
        float _1869 = _1868 * _1868;
        float _3769 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1871 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1682 = (((cbLight._m0[_1852].x * 0.3183098733425140380859375) * _1870) * _1871) + _1637;
        _1684 = (((cbLight._m0[_1852].y * 0.3183098733425140380859375) * _1870) * _1871) + _1639;
        _1686 = (((cbLight._m0[_1852].z * 0.3183098733425140380859375) * _1870) * _1871) + _1641;
    }
    uint _1689 = _1551 + 8u;
    float _1702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _349) * 0.949999988079071044921875);
    float _1703 = _1702 * _1702;
    float _1704 = cbLight._m0[_1551].x + _416;
    float _1705 = cbLight._m0[_1551].y + _417;
    float _1706 = cbLight._m0[_1551].z + _418;
    float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
    float _1711 = _1710 * _1704;
    float _1712 = _1710 * _1705;
    float _1713 = _1710 * _1706;
    float _1714 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1551].xyz));
    float _3785 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _1718 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1719 = dot(vec3(_345, _346, _347), vec3(_1711, _1712, _1713));
    float _3807 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1723 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1711, _1712, _1713));
    float _3818 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1727 = _1703 * _1703;
    float _1731 = ((_1722 * _1722) * (_1727 + (-1.0))) + 1.0;
    float _1739 = exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0);
    float _1740 = 0.959999978542327880859375 - _487;
    float _1742 = 0.959999978542327880859375 - _488;
    float _1743 = 0.959999978542327880859375 - _489;
    float _1750 = 1.0 - _1703;
    float _1761 = (0.5 / (((_1718 * ((_1717 * _1750) + _1703)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1750) + _1703) * _1717))) * _1717;
    float _3829 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1763 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1727 / ((_1731 * _1731) * 3.141590118408203125));
    uint _1774 = _1551 + 9u;
    float _1785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _349) * 0.949999988079071044921875);
    float _1786 = _1785 * _1785;
    float _1787 = cbLight._m0[_1589].x + _416;
    float _1788 = cbLight._m0[_1589].y + _417;
    float _1789 = cbLight._m0[_1589].z + _418;
    float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
    float _1794 = _1793 * _1787;
    float _1795 = _1793 * _1788;
    float _1796 = _1793 * _1789;
    float _1797 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1589].xyz));
    float _3840 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1801 = dot(vec3(_345, _346, _347), vec3(_1794, _1795, _1796));
    float _3851 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1794, _1795, _1796));
    float _3862 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1786 * _1786;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1820 = exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0);
    float _1827 = 1.0 - _1786;
    float _1837 = (0.5 / (((_1718 * ((_1800 * _1827) + _1786)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1827) + _1786) * _1800))) * _1800;
    float _3873 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    float _1849 = (((((_1820 * _1740) + _490) * cbLight._m0[_1774].x) * _1839) * _1574) + (((((_1739 * _1740) + _490) * cbLight._m0[_1689].x) * _1763) * _1585);
    float _1850 = (((((_1820 * _1742) + _492) * cbLight._m0[_1774].y) * _1839) * _1574) + (((((_1739 * _1742) + _492) * cbLight._m0[_1689].y) * _1763) * _1585);
    float _1851 = (((((_1820 * _1743) + _493) * cbLight._m0[_1774].z) * _1839) * _1574) + (((((_1739 * _1743) + _493) * cbLight._m0[_1689].z) * _1763) * _1585);
    float _1913;
    float _1915;
    float _1917;
    if (_1626)
    {
        _1913 = _1849;
        _1915 = _1850;
        _1917 = _1851;
    }
    else
    {
        uint _1919 = _1551 + 2u;
        uint _1923 = _1551 + 10u;
        float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _349) * 0.949999988079071044921875);
        float _1938 = _1937 * _1937;
        float _1939 = cbLight._m0[_1919].x + _416;
        float _1940 = cbLight._m0[_1919].y + _417;
        float _1941 = cbLight._m0[_1919].z + _418;
        float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
        float _1946 = _1945 * _1939;
        float _1947 = _1945 * _1940;
        float _1948 = _1945 * _1941;
        float _1949 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_1919].xyz));
        float _3884 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1952 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1953 = dot(vec3(_345, _346, _347), vec3(_1946, _1947, _1948));
        float _3895 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1956 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1957 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_1946, _1947, _1948));
        float _3906 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1961 = _1938 * _1938;
        float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
        float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0);
        float _1979 = 1.0 - _1938;
        float _1989 = (0.5 / (((_1718 * ((_1952 * _1979) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1979) + _1938) * _1952))) * _1952;
        float _3917 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1991 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
        float _1992 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1913 = (((((_1972 * _1740) + _490) * cbLight._m0[_1923].x) * _1991) * _1992) + _1849;
        _1915 = (((((_1972 * _1742) + _492) * cbLight._m0[_1923].y) * _1991) * _1992) + _1850;
        _1917 = (((((_1972 * _1743) + _493) * cbLight._m0[_1923].z) * _1991) * _1992) + _1851;
    }
    float _2027;
    float _2029;
    float _2031;
    if (_1644)
    {
        _2027 = _1913;
        _2029 = _1915;
        _2031 = _1917;
    }
    else
    {
        uint _2038 = _1551 + 3u;
        uint _2042 = _1551 + 11u;
        float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _349) * 0.949999988079071044921875);
        float _2057 = _2056 * _2056;
        float _2058 = cbLight._m0[_2038].x + _416;
        float _2059 = cbLight._m0[_2038].y + _417;
        float _2060 = cbLight._m0[_2038].z + _418;
        float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
        float _2065 = _2064 * _2058;
        float _2066 = _2064 * _2059;
        float _2067 = _2064 * _2060;
        float _2068 = dot(vec3(_345, _346, _347), vec3(cbLight._m0[_2038].xyz));
        float _3933 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2071 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2072 = dot(vec3(_345, _346, _347), vec3(_2065, _2066, _2067));
        float _3944 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2076 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2065, _2066, _2067));
        float _3955 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2080 = _2057 * _2057;
        float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
        float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
        float _2098 = 1.0 - _2057;
        float _2108 = (0.5 / (((_1718 * ((_2071 * _2098) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _2098) + _2057) * _2071))) * _2071;
        float _3966 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2110 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
        float _2111 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _2027 = (((((_2091 * _1740) + _490) * cbLight._m0[_2042].x) * _2110) * _2111) + _1913;
        _2029 = (((((_2091 * _1742) + _492) * cbLight._m0[_2042].y) * _2110) * _2111) + _1915;
        _2031 = (((((_2091 * _1743) + _493) * cbLight._m0[_2042].z) * _2110) * _2111) + _1917;
    }
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    if (_1549.y == 0u)
    {
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2186;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2186;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2186;
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.x;
        uint _2213 = uint((float(_2201.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2202))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2202)));
        float _2223 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2224 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        uint _2227 = uint(isnan(14.0) ? _2224 : (isnan(_2224) ? 14.0 : min(_2224, 14.0)));
        uvec4 _2232 = texelFetch(g_lightClusterGridBuffer, int(((_2227 << 2u) + (_2213 << 6u)) >> 2u));
        uint _2233 = _2232.x;
        uint _2234 = _2201.z;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        if (((((1u << ((_2234 >> 4u) & 15u)) + 4294967295u) & _2233) == 0u) || ((_2234 & 240u) == 0u))
        {
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
        }
        else
        {
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            uint _2489 = 0u;
            uint _2498;
            bool _2499;
            for (;;)
            {
                _2498 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2489 << 2u)) >> 2u)).x;
                _2499 = _2498 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2499)
                {
                    frontier_phi_61_pred = _2483;
                    frontier_phi_61_pred_1 = _2488;
                    frontier_phi_61_pred_2 = _2487;
                    frontier_phi_61_pred_3 = _2486;
                    frontier_phi_61_pred_4 = _2485;
                    frontier_phi_61_pred_5 = _2484;
                }
                else
                {
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    uint _2613;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2498;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2617 = uint(findLSB(_2613)) + (_2489 << 5u);
                        uint _2614 = (_2613 + 4294967295u) & _2613;
                        uint _2619 = _2617 * 48u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 3u)).x));
                        uint _2639 = (_2617 * 48u) + 4u;
                        vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2658 = (_2617 * 48u) + 8u;
                        vec3 _2669 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x));
                        float _2673 = _2633.x - _2187;
                        float _2674 = _2633.y - _2188;
                        float _2675 = _2633.z - _2189;
                        float _2676 = dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675));
                        float _2679 = inversesqrt(_2676);
                        float _2680 = _2679 * _2673;
                        float _2681 = _2679 * _2674;
                        float _2682 = _2679 * _2675;
                        float _2683 = dot(vec3(_445, _448, _451), vec3(_2680, _2681, _2682));
                        float _2688 = 1.0 - (_2676 * _2633.w);
                        float _3992 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2689 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                        float _2690 = sqrt(_2676) * _2652.w;
                        float _2693 = 1.39999997615814208984375 / (_2690 + 1.39999997615814208984375);
                        float _2694 = _2693 * _2693;
                        float _2697 = ((1.0 - _2694) * _2683) + _2694;
                        float _2700 = _2690 * _2690;
                        float _2704 = ((isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))) * _2689) / ((_2700 * 0.699999988079071044921875) + 1.0);
                        float _2708 = (-0.0) - _2187;
                        float _2709 = (-0.0) - _2188;
                        float _2710 = (-0.0) - _2189;
                        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2725 = exp2(log2(1.0 / ((_2700 * 3.5) + 5.0)) * 0.25);
                        float _2726 = 1.0 - _521;
                        float _2733 = sqrt(1.0 - ((1.0 - (_2726 * _2726)) * (1.0 - (_2725 * _2725))));
                        float _2734 = _2733 * _2733;
                        float _2735 = _2734 * _2734;
                        float _2736 = _2715 + _2680;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2746 = dot(vec3(_445, _448, _451), vec3(_2715, _2716, _2717));
                        float _4008 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2749 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2750 = dot(vec3(_445, _448, _451), vec3(_2742 * _2736, _2742 * _2737, _2742 * _2738));
                        float _4019 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2753 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2757 = ((_2753 * _2753) * (_2735 + (-1.0))) + 1.0;
                        float _2758 = _2693 * _2734;
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * _2683) + _2759;
                        float _4030 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2764 = 1.0 - _2734;
                        float _2774 = (0.5 / (((_2763 * ((_2749 * _2764) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2763 * _2764) + _2734) * _2749))) * _2763;
                        float _4041 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2785 = (((_2735 * 3.1415927410125732421875) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) / ((_2757 * _2757) * ((_2700 * 2.1991131305694580078125) + 3.141590118408203125))) * _2689;
                        _2542 = (_2704 * _2652.x) + _2610;
                        _2543 = (_2704 * _2652.y) + _2611;
                        _2544 = (_2704 * _2652.z) + _2612;
                        _2539 = (_2785 * _2669.x) + _2607;
                        _2540 = (_2785 * _2669.y) + _2608;
                        _2541 = (_2785 * _2669.z) + _2609;
                        if (_2614 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2614;
                        }
                    }
                    frontier_phi_61_pred = _2539;
                    frontier_phi_61_pred_1 = _2544;
                    frontier_phi_61_pred_2 = _2543;
                    frontier_phi_61_pred_3 = _2542;
                    frontier_phi_61_pred_4 = _2541;
                    frontier_phi_61_pred_5 = _2540;
                }
                _2340 = frontier_phi_61_pred;
                _2350 = frontier_phi_61_pred_1;
                _2348 = frontier_phi_61_pred_2;
                _2346 = frontier_phi_61_pred_3;
                _2344 = frontier_phi_61_pred_4;
                _2342 = frontier_phi_61_pred_5;
                uint _2490 = _2489 + 1u;
                if (_2490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2483 = _2340;
                    _2484 = _2342;
                    _2485 = _2344;
                    _2486 = _2346;
                    _2487 = _2348;
                    _2488 = _2350;
                    _2489 = _2490;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
        }
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.z;
        uint _2356 = (_2354 >> 8u) & 15u;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((4294967295u << _2356) & _2233) == 0u)
        {
            _2451 = _2339;
            _2453 = _2341;
            _2455 = _2343;
            _2457 = _2345;
            _2459 = _2347;
            _2461 = _2349;
        }
        else
        {
            float _2476 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _2477 = _2476 * _2187;
            float _2478 = _2476 * _2188;
            float _2479 = _2476 * _2189;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2356 < ((_2354 >> 12u) & 15u))
            {
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2590 = _2339;
                float _2591 = _2341;
                float _2592 = _2343;
                float _2593 = _2345;
                float _2594 = _2347;
                float _2595 = _2349;
                uint _2596 = _2356;
                uint _2605;
                bool _2606;
                for (;;)
                {
                    _2605 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                    _2606 = _2605 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2606)
                    {
                        frontier_phi_67_pred = _2593;
                        frontier_phi_67_pred_1 = _2594;
                        frontier_phi_67_pred_2 = _2595;
                        frontier_phi_67_pred_3 = _2592;
                        frontier_phi_67_pred_4 = _2591;
                        frontier_phi_67_pred_5 = _2590;
                    }
                    else
                    {
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        uint _2809 = _2605;
                        uint _2810;
                        vec4 _2835;
                        float _2836;
                        vec4 _2851;
                        vec3 _2863;
                        vec4 _2879;
                        vec4 _2895;
                        float _2942;
                        bool _2943;
                        for (;;)
                        {
                            uint _2820 = ((_2596 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2809));
                            _2810 = (_2809 + 4294967295u) & _2809;
                            uint _2822 = _2820 * 40u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            _2836 = _2835.w;
                            uint _2838 = (_2820 * 40u) + 4u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2820 * 40u) + 8u;
                            _2863 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x));
                            uint _2866 = (_2820 * 40u) + 16u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2820 * 40u) + 20u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2898 = (_2820 * 40u) + 24u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2917 = (_2820 * 40u) + 28u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2942 = fma(_2189, _2930.z, fma(_2188, _2930.y, _2930.x * _2187)) + _2930.w;
                            _2943 = !((fma(_2189, _2911.z, fma(_2188, _2911.y, _2911.x * _2187)) + _2911.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2943)
                            {
                                float _2970 = _2835.x - _2187;
                                float _2971 = _2835.y - _2188;
                                float _2972 = _2835.z - _2189;
                                float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                                float _2976 = inversesqrt(_2973);
                                float _2977 = _2976 * _2970;
                                float _2978 = _2976 * _2971;
                                float _2979 = _2976 * _2972;
                                float _2983 = 1.0 - (_2973 / (_2836 * _2836));
                                float _4052 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                                float _2988 = sqrt(_2973) * _2851.w;
                                float _2990 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                                float _2991 = _2990 * _2990;
                                float _2994 = ((1.0 - _2991) * dot(vec3(_2977, _2978, _2979), vec3(_445, _448, _451))) + _2991;
                                float _2997 = _2988 * _2988;
                                float _3001 = (fma(_2189, _2879.z, fma(_2188, _2879.y, _2879.x * _2187)) + _2879.w) / _2942;
                                float _3002 = (fma(_2189, _2895.z, fma(_2188, _2895.y, _2895.x * _2187)) + _2895.w) / _2942;
                                float _3006 = 1.0 - dot(vec2(_3001, _3002), vec2(_3001, _3002));
                                float _4068 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3008 = _3007 * (((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2984) / ((_2997 * 0.699999988079071044921875) + 1.0));
                                float _3020 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                                float _3021 = 1.0 - _521;
                                float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                                float _3029 = _3028 * _3028;
                                float _3030 = _3029 * _3029;
                                float _3031 = _2977 - _2477;
                                float _3032 = _2978 - _2478;
                                float _3033 = _2979 - _2479;
                                float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                                float _3041 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2477, (-0.0) - _2478, (-0.0) - _2479));
                                float _4079 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3044 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3045 = dot(vec3(_445, _448, _451), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                                float _4090 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3048 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                                float _3053 = _2990 * _3029;
                                float _3054 = _3053 * _3053;
                                float _3060 = ((1.0 - _3054) * dot(vec3(_445, _448, _451), vec3(_2977, _2978, _2979))) + _3054;
                                float _4101 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3062 = 1.0 - _3029;
                                float _3072 = (0.5 / (((_3061 * ((_3044 * _3062) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3029) * _3044))) * _3061;
                                float _4112 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3082 = (_3007 * _2984) * (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) / ((_3052 * _3052) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3082 * _2863.x;
                                frontier_phi_73_pred_1 = _3082 * _2863.y;
                                frontier_phi_73_pred_2 = _3008 * _2851.z;
                                frontier_phi_73_pred_3 = _3008 * _2851.y;
                                frontier_phi_73_pred_4 = _3008 * _2851.x;
                                frontier_phi_73_pred_5 = _3082 * _2863.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3086 = frontier_phi_73_pred;
                            _3087 = frontier_phi_73_pred_1;
                            _3091 = frontier_phi_73_pred_2;
                            _3090 = frontier_phi_73_pred_3;
                            _3089 = frontier_phi_73_pred_4;
                            _3088 = frontier_phi_73_pred_5;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            if (_2810 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2810;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2793;
                        frontier_phi_67_pred_1 = _2794;
                        frontier_phi_67_pred_2 = _2795;
                        frontier_phi_67_pred_3 = _2792;
                        frontier_phi_67_pred_4 = _2791;
                        frontier_phi_67_pred_5 = _2790;
                    }
                    _2458 = frontier_phi_67_pred;
                    _2460 = frontier_phi_67_pred_1;
                    _2462 = frontier_phi_67_pred_2;
                    _2456 = frontier_phi_67_pred_3;
                    _2454 = frontier_phi_67_pred_4;
                    _2452 = frontier_phi_67_pred_5;
                    uint _2597 = _2596 + 1u;
                    if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2590 = _2452;
                        _2591 = _2454;
                        _2592 = _2456;
                        _2593 = _2458;
                        _2594 = _2460;
                        _2595 = _2462;
                        _2596 = _2597;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2460;
                frontier_phi_55_56_ladder_1 = _2462;
                frontier_phi_55_56_ladder_2 = _2458;
                frontier_phi_55_56_ladder_3 = _2456;
                frontier_phi_55_56_ladder_4 = _2454;
                frontier_phi_55_56_ladder_5 = _2452;
            }
            else
            {
                frontier_phi_55_56_ladder = _2347;
                frontier_phi_55_56_ladder_1 = _2349;
                frontier_phi_55_56_ladder_2 = _2345;
                frontier_phi_55_56_ladder_3 = _2343;
                frontier_phi_55_56_ladder_4 = _2341;
                frontier_phi_55_56_ladder_5 = _2339;
            }
            _2451 = frontier_phi_55_56_ladder_5;
            _2453 = frontier_phi_55_56_ladder_4;
            _2455 = frontier_phi_55_56_ladder_3;
            _2457 = frontier_phi_55_56_ladder_2;
            _2459 = frontier_phi_55_56_ladder;
            _2461 = frontier_phi_55_56_ladder_1;
        }
        float _2466 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
        _2246 = (_2466 * _2457) + _1682;
        _2248 = (_2466 * _2459) + _1684;
        _2250 = (_2466 * _2461) + _1686;
        _2252 = ((_2451 * _490) * _2466) + _2027;
        _2254 = ((_2453 * _492) * _2466) + _2029;
        _2256 = ((_2455 * _493) * _2466) + _2031;
    }
    else
    {
        _2246 = _1682;
        _2248 = _1684;
        _2250 = _1686;
        _2252 = _2027;
        _2254 = _2029;
        _2256 = _2031;
    }
    float _4128 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4139 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4150 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4161 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _2274 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2246 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _505))) + ((_2252 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1314)) * cbPerFrame._m0[3u].x);
    float _2275 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2248 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _505))) + ((_2254 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1314)) * cbPerFrame._m0[3u].x);
    float _2276 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2250 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _505))) + ((_2256 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1314)) * cbPerFrame._m0[3u].x);
    float _2284 = cbInstanceData._m0[_464 + 6u].w * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)));
    float _2289 = _423 / cbSceneParam._m0[86u].x;
    float _2290 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2304 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, (log2((isnan(cbSceneParam._m0[77u].w) ? _358 : (isnan(_358) ? cbSceneParam._m0[77u].w : min(_358, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2306 = _2304.x;
    float _2307 = _2304.y;
    float _2308 = _2304.z;
    float _2309 = _2304.w;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_358 > cbSceneParam._m0[78u].w)
    {
        float _2364 = isnan(_358) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _358 : min(cbSceneParam._m0[80u].w, _358));
        float _2365 = _2364 / _358;
        float _2376 = _2365 * _409;
        float _2377 = _410 * _2365;
        float _2378 = (-0.0) - _2377;
        float _2379 = _2365 * _411;
        float _2381 = (cbSceneParam._m0[77u].w * _2378) / _2364;
        float _2382 = _2381 + cbSceneParam._m0[79u].w;
        float _2383 = cbSceneParam._m0[79u].w - _2377;
        float _2389 = sqrt(((_2376 * _2376) + (_2377 * _2377)) + (_2379 * _2379));
        float _2392 = (1.0 - (cbSceneParam._m0[77u].w / _2364)) * _2389;
        float _2397 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2399 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2552;
        if (abs((_2378 - _2381) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2552 = ((((_2382 > 0.0) ? exp2(_2397 * _2382) : (2.0 - exp2(_2399 * _2382))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2392;
        }
        else
        {
            float _2512 = 1.0 / cbSceneParam._m0[80u].x;
            float _2513 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : max(_2382, _2383));
            float _2514 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : min(_2382, _2383));
            float _2523 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : min(_2513, 0.0));
            float _2524 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : min(_2514, 0.0));
            _2552 = ((abs(_2389 / _2378) * cbSceneParam._m0[80u].y) * ((((_2523 - _2524) * 2.0) - ((exp2(_2397 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0)))) - exp2(_2397 * (isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0))))) * _2512)) - ((exp2(_2399 * _2523) - exp2(_2399 * _2524)) * _2512))) + (_2392 * cbSceneParam._m0[80u].z);
        }
        vec4 _2554 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, 1.0), 0.0);
        float _2563 = exp2((_2552 * (-1.44269502162933349609375)) * (1.0 - _2554.w));
        float _2564 = log2(_2563);
        float _2580 = log2(_2309);
        _2401 = (exp2(_2580 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].x)) * _2554.x) / cbSceneParam._m0[78u].x)) + _2306;
        _2403 = (exp2(_2580 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].y)) * _2554.y) / cbSceneParam._m0[78u].y)) + _2307;
        _2405 = (exp2(_2580 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].z)) * _2554.z) / cbSceneParam._m0[78u].z)) + _2308;
        _2407 = _2563 * _2309;
    }
    else
    {
        _2401 = _2306;
        _2403 = _2307;
        _2405 = _2308;
        _2407 = _2309;
    }
    float _2419 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2420 = _2419 == 3.0;
    float _2421 = log2(_2407);
    float _2428 = exp2(_2421 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)));
    float _2429 = exp2(_2421 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)));
    float _2430 = exp2(_2421 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)));
    float _2439 = (_2419 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2439 * (_2420 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2401)));
    SV_Target.y = _2439 * (_2420 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2403)));
    SV_Target.z = _2439 * (_2420 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2405)));
    SV_Target.w = _2284;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2284;
}


