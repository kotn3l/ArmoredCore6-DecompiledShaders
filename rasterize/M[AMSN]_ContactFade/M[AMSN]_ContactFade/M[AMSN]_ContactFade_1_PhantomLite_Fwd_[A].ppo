#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1071;
float _3494;
float _3495;
float _3496;
float _3497;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _260 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _250);
    float _261 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _250);
    float _262 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _250);
    vec4 _275 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _281 = _275.w;
    float _287 = cbMtdParam._m0[9u].x * _275.x;
    float _288 = cbMtdParam._m0[9u].y * _275.y;
    float _289 = cbMtdParam._m0[9u].z * _275.z;
    vec4 _301 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _303 = _301.x;
    bool _310 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _327 = ((_310 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _303)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _303))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3506 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _330 = 1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)));
    float _3517 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _339 = _281 - (((_331 * _331) * _281) * (3.0 - (_331 * 2.0)));
    vec4 _354 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _358 = _354.z;
    float _361 = (_354.x * 2.0) + (-1.0);
    float _363 = (_354.y * 2.0) + (-1.0);
    float _364 = dot(vec2(_361, _363), vec2(_361, _363));
    float _3528 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))));
    float _372 = fma(_369, _196 * NORMAL.x, fma(_363, _203 * TANGENT.x, (_189 * _182) * _361));
    float _375 = fma(_369, _196 * NORMAL.y, fma(_363, _203 * TANGENT.y, (_189 * _183) * _361));
    float _378 = fma(_369, _196 * NORMAL.z, fma(_363, _203 * TANGENT.z, (_189 * _184) * _361));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _3539 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _386 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _387 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _388 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _389 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _390 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _391 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _409 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _410 = _409 * _260;
    float _411 = _409 * _261;
    float _412 = _409 * _262;
    float _419 = abs(exp2(log2(dot(vec3(_383, _384, _385), vec3(_410, _411, _412))) * cbMatDynParam._m0[12u].x));
    float _420 = isnan(0.100000001490116119384765625) ? _419 : (isnan(_419) ? 0.100000001490116119384765625 : max(_419, 0.100000001490116119384765625));
    float _426 = ((isnan(0.699999988079071044921875) ? _420 : (isnan(_420) ? 0.699999988079071044921875 : min(_420, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _449 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3615 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3626 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _457 = dot(vec3(_383, _384, _385), vec3(0.0, -1.0, 0.0));
    float _3637 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _467 = (_460 * _388) * cbMatDynParam._m0[11u].x;
    float _469 = (_460 * _389) * cbMatDynParam._m0[11u].y;
    float _471 = (_460 * _390) * cbMatDynParam._m0[11u].z;
    float _481 = dot(vec3(_410, _411, _412), vec3(_383, _384, _385)) * 2.0;
    float _491 = dot(vec3((-0.0) - (_410 - (_481 * _383)), (-0.0) - (_411 - (_481 * _384)), (-0.0) - (_412 - (_481 * _385))), vec3(0.0, -1.0, 0.0));
    float _3648 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _498 = exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 4.0);
    float _513 = _310 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _562 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _553);
    float _563 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _553);
    float _564 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _553);
    float _568 = inversesqrt(dot(vec3(_562, _563, _564), vec3(_562, _563, _564)));
    float _569 = _562 * _568;
    float _570 = _563 * _568;
    float _571 = _564 * _568;
    vec4 _576 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _578 = _576.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _750 = sqrt(((_562 * _562) + (_563 * _563)) + (_564 * _564));
        float _756 = (cbMatDynParam._m0[5u].x * _750) + cbMatDynParam._m0[5u].y;
        float _3659 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _761 = (cbMatDynParam._m0[5u].z * _750) + cbMatDynParam._m0[5u].w;
        float _3670 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) - _757)) + _757) < ((_578 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_385, cbSceneParam._m0[5u].z, fma(_384, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _383));
    float _612 = fma(_385, cbSceneParam._m0[6u].z, fma(_384, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _383));
    float _615 = fma(_385, cbSceneParam._m0[7u].z, fma(_384, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _383));
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _630 = _628 + 9u;
    uint _631 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _637 = ((cbMatDynParam._m0[9u].x * _388) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_631].x;
    float _638 = ((cbMatDynParam._m0[9u].y * _389) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_631].y;
    float _639 = ((cbMatDynParam._m0[9u].z * _390) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_631].z;
    float _3681 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _643 = 1.0 - _391;
    float _644 = _640 * _643;
    float _645 = _641 * _643;
    float _646 = _642 * _643;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _391;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _391;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _391;
    float _654 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    float _657 = _653 + 0.039999999105930328369140625;
    vec4 _666 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _669 = _666.x * TEXCOORD.z;
    float _670 = dot(vec3(_383, _384, _385), vec3(_569, _570, _571));
    float _673 = _670 * 2.0;
    float _677 = (_673 * _383) - _569;
    float _678 = (_673 * _384) - _570;
    float _679 = (_673 * _385) - _571;
    float _683 = abs(dot(vec3(_569, _570, _571), vec3(_383, _384, _385)));
    float _3714 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _685 = sqrt(_387);
    float _696 = exp2((_685 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _702 = (1.0 - _696) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _703 = _696 * _685;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _799 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _803 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _828 = _731 + _383;
        float _829 = _735 + _384;
        float _830 = _739 + _385;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _795;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _799;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _803;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_383, _384, _385), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3762 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_383, _384, _385), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3795 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_383, _384, _385), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3828 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1072 = _900;
        _1073 = _899;
        _1074 = _911;
        _1075 = _910;
        _1076 = _909;
        _1077 = _921;
        _1078 = _920;
        _1079 = _919;
        _1080 = _934;
        _1081 = _933;
        _1082 = _932;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _1071;
        _1072 = _1071;
        _1073 = _1071;
        _1074 = _1071;
        _1075 = _1071;
        _1076 = _1071;
        _1077 = _1071;
        _1078 = _1071;
        _1079 = _1071;
        _1080 = _1071;
        _1081 = _1071;
        _1082 = _1071;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1118 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1122 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1145 = _731 + _383;
        float _1146 = _735 + _384;
        float _1147 = _739 + _385;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_383, _384, _385), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3891 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_383, _384, _385), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3924 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_383, _384, _385), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3957 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1071;
        _1384 = _1071;
        _1385 = _1071;
        _1386 = _1071;
        _1387 = _1071;
        _1388 = _1071;
        _1389 = _1071;
        _1390 = _1071;
        _1391 = _1071;
        _1392 = _1071;
        _1393 = _1071;
        _1394 = _1071;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _677 * 0.5;
    float _1452 = _678 * 0.5;
    float _1453 = _679 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1070, _1074, _1077, _1080));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_679, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677));
        float _1583 = fma(_679, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677));
        float _1586 = fma(_679, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1614 = frontier_phi_17_15_ladder;
        }
        float _1821;
        if (_1583 > 0.0)
        {
            _1821 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1821 = frontier_phi_26_22_ladder;
        }
        float _2075;
        if (_1586 > 0.0)
        {
            _2075 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2075 = frontier_phi_38_33_ladder;
        }
        float _2077 = isnan(_1821) ? _1614 : (isnan(_1614) ? _1821 : min(_1614, _1821));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1580) + _1569;
        float _2083 = (_2078 * _1583) + _1573;
        float _2084 = (_2078 * _1586) + _1577;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_16_38_ladder = _2212.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2212.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2212.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_16_38_ladder_2;
        _1604 = frontier_phi_16_38_ladder_1;
        _1606 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_677, _678, _679), _1520);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_679, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677));
        float _1682 = fma(_679, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677));
        float _1685 = fma(_679, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677));
        float _1826;
        if (_1679 > 0.0)
        {
            _1826 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1826 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1682 > 0.0)
        {
            _2102 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2315;
        if (_1685 > 0.0)
        {
            _2315 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2315 = frontier_phi_49_46_ladder;
        }
        float _2317 = isnan(_2102) ? _1826 : (isnan(_1826) ? _2102 : min(_1826, _2102));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1679) + _1668;
        float _2323 = (_2318 * _1682) + _1672;
        float _2324 = (_2318 * _1685) + _1676;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2325;
        float _2328 = _2325 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2324 > _2328) || ((_2324 < _2326) || ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 < _2326) || (_2322 > _2328))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2324, cbModelParam._m0[17u].z, fma(_2323, cbModelParam._m0[17u].y, _2322 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2324, cbModelParam._m0[18u].z, fma(_2323, cbModelParam._m0[18u].y, _2322 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2324, cbModelParam._m0[19u].z, fma(_2323, cbModelParam._m0[19u].y, _2322 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_25_49_ladder = _2549.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2549.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2549.x * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_25_49_ladder_2;
        _1706 = frontier_phi_25_49_ladder_1;
        _1708 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_677, _678, _679), _1611);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1721 = (((_702 * _654) + _703) * _669) * ((cbModelParam._m0[1u].w * (_1704 - _1602)) + _1602);
    float _1723 = (((_702 * _656) + _703) * _669) * ((cbModelParam._m0[1u].w * (_1706 - _1604)) + _1604);
    float _1725 = (((_702 * _657) + _703) * _669) * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1728 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    uvec4 _1744 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1746 = _1744.x * 14u;
    uint _1747 = _1746 + 13u;
    float _1754 = _669 + (-1.0);
    float _1759 = (cbLight._m0[_1747].x * _1754) + 1.0;
    float _1760 = (cbLight._m0[_1747].y * _1754) + 1.0;
    float _1761 = (cbLight._m0[_1747].z * _1754) + 1.0;
    float _1762 = (cbLight._m0[_1747].w * _1754) + 1.0;
    uint _1763 = _1746 + 5u;
    float _1769 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1773 = _1746 + 4u;
    float _1780 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1784 = _1746 | 1u;
    float _1795 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_383, _384, _385));
    float _1798 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_383, _384, _385));
    float _4093 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _4104 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1803 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1805 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1812 = ((cbLight._m0[_1763].x * _1769) * _1805) + ((cbLight._m0[_1773].x * _1780) * _1803);
    float _1813 = ((_1769 * cbLight._m0[_1763].y) * _1805) + ((_1780 * cbLight._m0[_1773].y) * _1803);
    float _1814 = ((_1769 * cbLight._m0[_1763].z) * _1805) + ((_1780 * cbLight._m0[_1773].z) * _1803);
    uvec4 _1818 = floatBitsToUint(cbLight._m0[_1746 + 12u]);
    bool _1820 = _1818.x == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1820)
    {
        _1831 = _1812;
        _1833 = _1813;
        _1835 = _1814;
    }
    else
    {
        uint _1839 = _1746 + 6u;
        float _1855 = (dot(vec3(cbLight._m0[_1746 + 2u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1856 = _1855 * _1855;
        float _4115 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1858 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1831 = (((cbLight._m0[_1839].x * 0.3183098733425140380859375) * _1857) * _1858) + _1812;
        _1833 = (((cbLight._m0[_1839].y * 0.3183098733425140380859375) * _1857) * _1858) + _1813;
        _1835 = (((cbLight._m0[_1839].z * 0.3183098733425140380859375) * _1857) * _1858) + _1814;
    }
    bool _1838 = _1818.y == 0u;
    float _1876;
    float _1878;
    float _1880;
    if (_1838)
    {
        _1876 = _1831;
        _1878 = _1833;
        _1880 = _1835;
    }
    else
    {
        uint _2046 = _1746 + 7u;
        float _2062 = (dot(vec3(cbLight._m0[_1746 + 3u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4131 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2065 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _1876 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1831;
        _1878 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1833;
        _1880 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1835;
    }
    uint _1883 = _1746 + 8u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _387) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1746].x + _569;
    float _1899 = cbLight._m0[_1746].y + _570;
    float _1900 = cbLight._m0[_1746].z + _571;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1746].xyz));
    float _4147 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _1912 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1913 = dot(vec3(_383, _384, _385), vec3(_1905, _1906, _1907));
    float _4169 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1905, _1906, _1907));
    float _4180 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1897 * _1897;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1933 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _1934 = 0.959999978542327880859375 - _651;
    float _1936 = 0.959999978542327880859375 - _652;
    float _1937 = 0.959999978542327880859375 - _653;
    float _1944 = 1.0 - _1897;
    float _1955 = (0.5 / (((_1912 * ((_1911 * _1944) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _1944) + _1897) * _1911))) * _1911;
    float _4191 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    uint _1968 = _1746 + 9u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _387) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1784].x + _569;
    float _1982 = cbLight._m0[_1784].y + _570;
    float _1983 = cbLight._m0[_1784].z + _571;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1784].xyz));
    float _4202 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _1995 = dot(vec3(_383, _384, _385), vec3(_1988, _1989, _1990));
    float _4213 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1988, _1989, _1990));
    float _4224 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2003 = _1980 * _1980;
    float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
    float _2014 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
    float _2021 = 1.0 - _1980;
    float _2031 = (0.5 / (((_1912 * ((_1994 * _2021) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2021) + _1980) * _1994))) * _1994;
    float _4235 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
    float _2043 = (((((_2014 * _1934) + _654) * cbLight._m0[_1968].x) * _2033) * _1769) + (((((_1933 * _1934) + _654) * cbLight._m0[_1883].x) * _1957) * _1780);
    float _2044 = (((((_2014 * _1936) + _656) * cbLight._m0[_1968].y) * _2033) * _1769) + (((((_1933 * _1936) + _656) * cbLight._m0[_1883].y) * _1957) * _1780);
    float _2045 = (((((_2014 * _1937) + _657) * cbLight._m0[_1968].z) * _2033) * _1769) + (((((_1933 * _1937) + _657) * cbLight._m0[_1883].z) * _1957) * _1780);
    float _2107;
    float _2109;
    float _2111;
    if (_1820)
    {
        _2107 = _2043;
        _2109 = _2044;
        _2111 = _2045;
    }
    else
    {
        uint _2113 = _1746 + 2u;
        uint _2117 = _1746 + 10u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _387) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _569;
        float _2134 = cbLight._m0[_2113].y + _570;
        float _2135 = cbLight._m0[_2113].z + _571;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2113].xyz));
        float _4246 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2147 = dot(vec3(_383, _384, _385), vec3(_2140, _2141, _2142));
        float _4257 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4268 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0);
        float _2173 = 1.0 - _2132;
        float _2183 = (0.5 / (((_1912 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2173) + _2132) * _2146))) * _2146;
        float _4279 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2107 = (((((_2166 * _1934) + _654) * cbLight._m0[_2117].x) * _2185) * _2186) + _2043;
        _2109 = (((((_2166 * _1936) + _656) * cbLight._m0[_2117].y) * _2185) * _2186) + _2044;
        _2111 = (((((_2166 * _1937) + _657) * cbLight._m0[_2117].z) * _2185) * _2186) + _2045;
    }
    float _2221;
    float _2223;
    float _2225;
    if (_1838)
    {
        _2221 = _2107;
        _2223 = _2109;
        _2225 = _2111;
    }
    else
    {
        uint _2232 = _1746 + 3u;
        uint _2236 = _1746 + 11u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _387) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _569;
        float _2253 = cbLight._m0[_2232].y + _570;
        float _2254 = cbLight._m0[_2232].z + _571;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2232].xyz));
        float _4295 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2266 = dot(vec3(_383, _384, _385), vec3(_2259, _2260, _2261));
        float _4306 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4317 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
        float _2292 = 1.0 - _2251;
        float _2302 = (0.5 / (((_1912 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2292) + _2251) * _2265))) * _2265;
        float _4328 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _2221 = (((((_2285 * _1934) + _654) * cbLight._m0[_2236].x) * _2304) * _2305) + _2107;
        _2223 = (((((_2285 * _1936) + _656) * cbLight._m0[_2236].y) * _2304) * _2305) + _2109;
        _2225 = (((((_2285 * _1937) + _657) * cbLight._m0[_2236].z) * _2304) * _2305) + _2111;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1744.y == 0u)
    {
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2380;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2380;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2380;
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.x;
        uint _2407 = uint((float(_2395.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2396))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2396)));
        float _2417 = (log2(_2383 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2418 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        uint _2421 = uint(isnan(14.0) ? _2418 : (isnan(_2418) ? 14.0 : min(_2418, 14.0)));
        uvec4 _2426 = texelFetch(g_lightClusterGridBuffer, int(((_2421 << 2u) + (_2407 << 6u)) >> 2u));
        uint _2427 = _2426.x;
        uint _2428 = _2395.z;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((((1u << ((_2428 >> 4u) & 15u)) + 4294967295u) & _2427) == 0u) || ((_2428 & 240u) == 0u))
        {
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
        }
        else
        {
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2731)
                {
                    frontier_phi_66_pred = _2715;
                    frontier_phi_66_pred_1 = _2720;
                    frontier_phi_66_pred_2 = _2719;
                    frontier_phi_66_pred_3 = _2718;
                    frontier_phi_66_pred_4 = _2717;
                    frontier_phi_66_pred_5 = _2716;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2730;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2721 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _2381;
                        float _2927 = _2886.y - _2382;
                        float _2928 = _2886.z - _2383;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_609, _612, _615), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4354 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2956 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2960 = (-0.0) - _2381;
                        float _2961 = (-0.0) - _2382;
                        float _2962 = (-0.0) - _2383;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2977 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _685;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2967 + _2933;
                        float _2989 = _2968 + _2934;
                        float _2990 = _2969 + _2935;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_609, _612, _615), vec3(_2967, _2968, _2969));
                        float _4370 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3002 = dot(vec3(_609, _612, _615), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4381 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2946 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2936) + _3011;
                        float _4392 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4403 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3009 * _3009) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2790 = (_2956 * _2905.x) + _2863;
                        _2791 = (_2956 * _2905.y) + _2864;
                        _2792 = (_2956 * _2905.z) + _2865;
                        _2787 = (_3037 * _2922.x) + _2860;
                        _2788 = (_3037 * _2922.y) + _2861;
                        _2789 = (_3037 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_66_pred = _2787;
                    frontier_phi_66_pred_1 = _2792;
                    frontier_phi_66_pred_2 = _2791;
                    frontier_phi_66_pred_3 = _2790;
                    frontier_phi_66_pred_4 = _2789;
                    frontier_phi_66_pred_5 = _2788;
                }
                _2555 = frontier_phi_66_pred;
                _2565 = frontier_phi_66_pred_1;
                _2563 = frontier_phi_66_pred_2;
                _2561 = frontier_phi_66_pred_3;
                _2559 = frontier_phi_66_pred_4;
                _2557 = frontier_phi_66_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2555;
                    _2716 = _2557;
                    _2717 = _2559;
                    _2718 = _2561;
                    _2719 = _2563;
                    _2720 = _2565;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
        }
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.z;
        uint _2571 = (_2569 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2571) & _2427) == 0u)
        {
            _2683 = _2554;
            _2685 = _2556;
            _2687 = _2558;
            _2689 = _2560;
            _2691 = _2562;
            _2693 = _2564;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
            float _2709 = _2708 * _2381;
            float _2710 = _2708 * _2382;
            float _2711 = _2708 * _2383;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2571 < ((_2569 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2843 = _2554;
                float _2844 = _2556;
                float _2845 = _2558;
                float _2846 = _2560;
                float _2847 = _2562;
                float _2848 = _2564;
                uint _2849 = _2571;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2859)
                    {
                        frontier_phi_77_pred = _2848;
                        frontier_phi_77_pred_1 = _2847;
                        frontier_phi_77_pred_2 = _2846;
                        frontier_phi_77_pred_3 = _2845;
                        frontier_phi_77_pred_4 = _2844;
                        frontier_phi_77_pred_5 = _2843;
                    }
                    else
                    {
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3064 = _2843;
                        float _3065 = _2844;
                        float _3066 = _2845;
                        float _3067 = _2846;
                        float _3068 = _2847;
                        float _3069 = _2848;
                        uint _3070 = _2858;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        vec3 _3124;
                        vec4 _3140;
                        vec4 _3156;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3081 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3081 * 40u) + 8u;
                            _3124 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x));
                            uint _3127 = (_3081 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3081 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3081 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3081 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_2383, _3191.z, fma(_2382, _3191.y, _3191.x * _2381)) + _3191.w;
                            _3204 = !((fma(_2383, _3172.z, fma(_2382, _3172.y, _3172.x * _2381)) + _3172.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3096.x - _2381;
                                float _3232 = _3096.y - _2382;
                                float _3233 = _3096.z - _2383;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3097 * _3097));
                                float _4414 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3249 = sqrt(_3234) * _3112.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_609, _612, _615))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_2383, _3140.z, fma(_2382, _3140.y, _3140.x * _2381)) + _3140.w) / _3203;
                                float _3263 = (fma(_2383, _3156.z, fma(_2382, _3156.y, _3156.x * _2381)) + _3156.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4430 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _685;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2709;
                                float _3293 = _3239 - _2710;
                                float _3294 = _3240 - _2711;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4441 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3306 = dot(vec3(_609, _612, _615), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4452 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_609, _612, _615), vec3(_3238, _3239, _3240))) + _3315;
                                float _4463 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4474 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3269 * _3112.y;
                                frontier_phi_83_pred_1 = _3269 * _3112.x;
                                frontier_phi_83_pred_2 = _3343 * _3124.z;
                                frontier_phi_83_pred_3 = _3343 * _3124.y;
                                frontier_phi_83_pred_4 = _3343 * _3124.x;
                                frontier_phi_83_pred_5 = _3269 * _3112.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3351 = frontier_phi_83_pred;
                            _3350 = frontier_phi_83_pred_1;
                            _3349 = frontier_phi_83_pred_2;
                            _3348 = frontier_phi_83_pred_3;
                            _3347 = frontier_phi_83_pred_4;
                            _3352 = frontier_phi_83_pred_5;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3056;
                        frontier_phi_77_pred_1 = _3055;
                        frontier_phi_77_pred_2 = _3054;
                        frontier_phi_77_pred_3 = _3053;
                        frontier_phi_77_pred_4 = _3052;
                        frontier_phi_77_pred_5 = _3051;
                    }
                    _2694 = frontier_phi_77_pred;
                    _2692 = frontier_phi_77_pred_1;
                    _2690 = frontier_phi_77_pred_2;
                    _2688 = frontier_phi_77_pred_3;
                    _2686 = frontier_phi_77_pred_4;
                    _2684 = frontier_phi_77_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2684;
                        _2844 = _2686;
                        _2845 = _2688;
                        _2846 = _2690;
                        _2847 = _2692;
                        _2848 = _2694;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2688;
                frontier_phi_58_59_ladder_1 = _2694;
                frontier_phi_58_59_ladder_2 = _2692;
                frontier_phi_58_59_ladder_3 = _2690;
                frontier_phi_58_59_ladder_4 = _2686;
                frontier_phi_58_59_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_58_59_ladder = _2558;
                frontier_phi_58_59_ladder_1 = _2564;
                frontier_phi_58_59_ladder_2 = _2562;
                frontier_phi_58_59_ladder_3 = _2560;
                frontier_phi_58_59_ladder_4 = _2556;
                frontier_phi_58_59_ladder_5 = _2554;
            }
            _2683 = frontier_phi_58_59_ladder_5;
            _2685 = frontier_phi_58_59_ladder_4;
            _2687 = frontier_phi_58_59_ladder;
            _2689 = frontier_phi_58_59_ladder_3;
            _2691 = frontier_phi_58_59_ladder_2;
            _2693 = frontier_phi_58_59_ladder_1;
        }
        float _2698 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
        _2440 = (_2698 * _2689) + _1876;
        _2442 = (_2698 * _2691) + _1878;
        _2444 = (_2698 * _2693) + _1880;
        _2446 = ((_2683 * _654) * _2698) + _2221;
        _2448 = ((_2685 * _656) * _2698) + _2223;
        _2450 = ((_2687 * _657) * _2698) + _2225;
    }
    else
    {
        _2440 = _1876;
        _2442 = _1878;
        _2444 = _1880;
        _2446 = _2221;
        _2448 = _2223;
        _2450 = _2225;
    }
    uint _2456 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _2462 = cbInstanceData._m0[_2456].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _426) + cbMatDynParam._m0[7u].x) + (((_467 - (_467 * _391)) + (cbMatDynParam._m0[11u].x * _498)) * cbMatDynParam._m0[9u].x));
    float _2463 = cbInstanceData._m0[_2456].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _426) + cbMatDynParam._m0[7u].y) + (((_469 - (_469 * _391)) + (cbMatDynParam._m0[11u].y * _498)) * cbMatDynParam._m0[9u].y));
    float _2464 = cbInstanceData._m0[_2456].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _426) + cbMatDynParam._m0[7u].z) + (((_471 - (_471 * _391)) + (cbMatDynParam._m0[11u].z * _498)) * cbMatDynParam._m0[9u].z));
    float _4490 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4501 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4512 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4523 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2482 = (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2440 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _669))) + ((_2446 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + _2462;
    float _2484 = (_2463 + ((_2448 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2442 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _669)));
    float _2486 = (_2464 + ((_2450 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2444 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _669)));
    float _2487 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2488 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2489 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2494 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) - _453) * _426) + _453));
    float _2499 = cbInstanceData._m0[_628 + 6u].w * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)));
    float _2504 = _589 / cbSceneParam._m0[86u].x;
    float _2505 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2519 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2504, _2505, (log2((isnan(cbSceneParam._m0[77u].w) ? _513 : (isnan(_513) ? cbSceneParam._m0[77u].w : min(_513, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2521 = _2519.x;
    float _2522 = _2519.y;
    float _2523 = _2519.z;
    float _2524 = _2519.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_513 > cbSceneParam._m0[78u].w)
    {
        float _2579 = isnan(_513) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _513 : min(cbSceneParam._m0[80u].w, _513));
        float _2580 = _2579 / _513;
        float _2591 = _2580 * _562;
        float _2592 = _563 * _2580;
        float _2593 = (-0.0) - _2592;
        float _2594 = _2580 * _564;
        float _2596 = (cbSceneParam._m0[77u].w * _2593) / _2579;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2592;
        float _2604 = sqrt(((_2591 * _2591) + (_2592 * _2592)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2579)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2593 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2746 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2800 = ((abs(_2604 / _2593) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2614 * _2755) - exp2(_2614 * _2756)) * _2744))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2504, _2505, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2524);
        _2616 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2521;
        _2618 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2522;
        _2620 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2523;
        _2622 = _2811 * _2524;
    }
    else
    {
        _2616 = _2521;
        _2618 = _2522;
        _2620 = _2523;
        _2622 = _2524;
    }
    bool _2838;
    vec4 _2632;
    vec4 _2654;
    float _2656;
    float _2660;
    float _2661;
    float _2662;
    float _2665;
    float _2668;
    float _2671;
    float _2672;
    bool _2682;
    for (;;)
    {
        _2632 = cbMatDynParam._m0[0u];
        float _2634 = roundEven(_2632.y);
        bool _2635 = _2634 == 3.0;
        float _2636 = log2(_2622);
        float _2640 = exp2(_2636 * cbSceneParam._m0[78u].x);
        float _2641 = exp2(_2636 * cbSceneParam._m0[78u].y);
        float _2642 = exp2(_2636 * cbSceneParam._m0[78u].z);
        float _2643 = _2640 * _2487;
        float _2644 = _2641 * _2488;
        float _2645 = _2642 * _2489;
        float _2652 = _578 + (-0.5);
        _2654 = cbMtdParam._m0[1u];
        _2656 = _2654.y * _2652;
        float _2659 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2660 = _2659 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
        _2661 = _2659 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
        _2662 = _2659 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
        _2665 = ((_2494 * _2462) * _2640) * _2659;
        _2668 = ((_2494 * _2463) * _2641) * _2659;
        _2671 = ((_2494 * _2464) * _2642) * _2659;
        _2672 = _2652 * 0.999000012874603271484375;
        _2682 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2682)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2672) < 0.5)
            {
                _2838 = true;
                break;
            }
        }
        uint _2779 = _630 + uint(_2632.w);
        if ((cbInstanceData._m0[_2779].w < 1.0) && ((cbInstanceData._m0[_2779].w + _2672) < 0.5))
        {
            _2838 = true;
            break;
        }
        if ((_2656 + _339) < _2654.x)
        {
            _2838 = true;
            break;
        }
        _2838 = false;
        break;
    }
    float _3042;
    if (_2838)
    {
        discard_state = true;
        _3042 = 0.0;
    }
    else
    {
        _3042 = _2499;
    }
    SV_Target.x = _2660;
    SV_Target.y = _2661;
    SV_Target.z = _2662;
    SV_Target.w = _3042;
    SV_Target_1.x = _2665;
    SV_Target_1.y = _2668;
    SV_Target_1.z = _2671;
    SV_Target_1.w = _2499;
    discard_exit();
}


