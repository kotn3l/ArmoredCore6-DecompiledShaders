#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _271 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _277 = _271.w;
    float _283 = cbMtdParam._m0[9u].x * _271.x;
    float _284 = cbMtdParam._m0[9u].y * _271.y;
    float _285 = cbMtdParam._m0[9u].z * _271.z;
    vec4 _297 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _299 = _297.x;
    bool _306 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _323 = ((_306 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _299)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _299))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3395 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _326 = 1.0 - (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)));
    float _3406 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _327 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _335 = _277 - (((_327 * _327) * _277) * (3.0 - (_327 * 2.0)));
    vec4 _350 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _354 = _350.z;
    float _357 = (_350.x * 2.0) + (-1.0);
    float _359 = (_350.y * 2.0) + (-1.0);
    float _360 = dot(vec2(_357, _359), vec2(_357, _359));
    float _3417 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _365 = sqrt(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))));
    float _368 = fma(_365, _192 * NORMAL.x, fma(_359, _199 * TANGENT.x, (_185 * _178) * _357));
    float _371 = fma(_365, _192 * NORMAL.y, fma(_359, _199 * TANGENT.y, (_185 * _179) * _357));
    float _374 = fma(_365, _192 * NORMAL.z, fma(_359, _199 * TANGENT.z, (_185 * _180) * _357));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _379 = _378 * _368;
    float _380 = _378 * _371;
    float _381 = _378 * _374;
    float _3428 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _382 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _383 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _384 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _385 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _386 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _387 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _405 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _406 = _405 * _256;
    float _407 = _405 * _257;
    float _408 = _405 * _258;
    float _415 = abs(exp2(log2(dot(vec3(_379, _380, _381), vec3(_406, _407, _408))) * cbMatDynParam._m0[12u].x));
    float _416 = isnan(0.100000001490116119384765625) ? _415 : (isnan(_415) ? 0.100000001490116119384765625 : max(_415, 0.100000001490116119384765625));
    float _422 = ((isnan(0.699999988079071044921875) ? _416 : (isnan(_416) ? 0.699999988079071044921875 : min(_416, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _445 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3504 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3515 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _453 = dot(vec3(_379, _380, _381), vec3(0.0, -1.0, 0.0));
    float _3526 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _463 = (_456 * _384) * cbMatDynParam._m0[11u].x;
    float _465 = (_456 * _385) * cbMatDynParam._m0[11u].y;
    float _467 = (_456 * _386) * cbMatDynParam._m0[11u].z;
    float _477 = dot(vec3(_406, _407, _408), vec3(_379, _380, _381)) * 2.0;
    float _487 = dot(vec3((-0.0) - (_406 - (_477 * _379)), (-0.0) - (_407 - (_477 * _380)), (-0.0) - (_408 - (_477 * _381))), vec3(0.0, -1.0, 0.0));
    float _3537 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _494 = exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 4.0);
    float _509 = _306 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _558 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _549);
    float _559 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _549);
    float _560 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _549);
    float _564 = inversesqrt(dot(vec3(_558, _559, _560), vec3(_558, _559, _560)));
    float _565 = _558 * _564;
    float _566 = _559 * _564;
    float _567 = _560 * _564;
    float _572 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _573 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _593 = fma(_381, cbSceneParam._m0[5u].z, fma(_380, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _379));
    float _596 = fma(_381, cbSceneParam._m0[6u].z, fma(_380, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _379));
    float _599 = fma(_381, cbSceneParam._m0[7u].z, fma(_380, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _379));
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = _612 + 9u;
    uint _615 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _621 = ((cbMatDynParam._m0[9u].x * _384) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_615].x;
    float _622 = ((cbMatDynParam._m0[9u].y * _385) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_615].y;
    float _623 = ((cbMatDynParam._m0[9u].z * _386) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_615].z;
    float _3548 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _627 = 1.0 - _387;
    float _628 = _624 * _627;
    float _629 = _625 * _627;
    float _630 = _626 * _627;
    float _635 = (_624 + (-0.039999999105930328369140625)) * _387;
    float _636 = (_625 + (-0.039999999105930328369140625)) * _387;
    float _637 = (_626 + (-0.039999999105930328369140625)) * _387;
    float _638 = _635 + 0.039999999105930328369140625;
    float _640 = _636 + 0.039999999105930328369140625;
    float _641 = _637 + 0.039999999105930328369140625;
    vec4 _650 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _572, cbSceneParam._m0[86u].y * _573));
    float _653 = _650.x * TEXCOORD.z;
    float _654 = dot(vec3(_379, _380, _381), vec3(_565, _566, _567));
    float _657 = _654 * 2.0;
    float _661 = (_657 * _379) - _565;
    float _662 = (_657 * _380) - _566;
    float _663 = (_657 * _381) - _567;
    float _667 = abs(dot(vec3(_565, _566, _567), vec3(_379, _380, _381)));
    float _3581 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _669 = sqrt(_383);
    float _680 = exp2((_669 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_669 * 3.0));
    float _686 = (1.0 - _680) * ((_669 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _687 = _680 * _669;
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _754 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _758 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _783 = _715 + _379;
        float _784 = _719 + _380;
        float _785 = _723 + _381;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_379, _380, _381), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3629 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_379, _380, _381), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3662 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_379, _380, _381), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3695 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1070 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1074 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1097 = _715 + _379;
        float _1098 = _719 + _380;
        float _1099 = _723 + _381;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_379, _380, _381), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3758 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_379, _380, _381), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3791 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_379, _380, _381), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3824 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1026;
        _1336 = _1026;
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1039)) + _1039;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _661 * 0.5;
    float _1404 = _662 * 0.5;
    float _1405 = _663 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _383);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_663, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661));
        float _1535 = fma(_663, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661));
        float _1538 = fma(_663, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1566 = frontier_phi_14_12_ladder;
        }
        float _1773;
        if (_1535 > 0.0)
        {
            _1773 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1773 = frontier_phi_23_19_ladder;
        }
        float _2027;
        if (_1538 > 0.0)
        {
            _2027 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2027 = frontier_phi_35_30_ladder;
        }
        float _2029 = isnan(_1773) ? _1566 : (isnan(_1566) ? _1773 : min(_1566, _1773));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1532) + _1521;
        float _2035 = (_2030 * _1535) + _1525;
        float _2036 = (_2030 * _1538) + _1529;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2037;
        float _2041 = _2037 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 > _2041) || ((_2035 < _2039) || ((_2034 < _2039) || (_2034 > _2041))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_13_35_ladder = _2164.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2164.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2164.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_13_35_ladder_2;
        _1556 = frontier_phi_13_35_ladder_1;
        _1558 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_661, _662, _663), _1472);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _383);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1620 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1624 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1628 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1631 = fma(_663, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661));
        float _1634 = fma(_663, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661));
        float _1637 = fma(_663, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661));
        float _1778;
        if (_1631 > 0.0)
        {
            _1778 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1778 = frontier_phi_25_21_ladder;
        }
        float _2054;
        if (_1634 > 0.0)
        {
            _2054 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2054 = frontier_phi_37_32_ladder;
        }
        float _2267;
        if (_1637 > 0.0)
        {
            _2267 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2267 = frontier_phi_46_43_ladder;
        }
        float _2269 = isnan(_2054) ? _1778 : (isnan(_1778) ? _2054 : min(_1778, _2054));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1631) + _1620;
        float _2275 = (_2270 * _1634) + _1624;
        float _2276 = (_2270 * _1637) + _1628;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2277;
        float _2280 = _2277 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2276 > _2280) || ((_2276 < _2278) || ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 < _2278) || (_2274 > _2280))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2276, cbModelParam._m0[17u].z, fma(_2275, cbModelParam._m0[17u].y, _2274 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2276, cbModelParam._m0[18u].z, fma(_2275, cbModelParam._m0[18u].y, _2274 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2276, cbModelParam._m0[19u].z, fma(_2275, cbModelParam._m0[19u].y, _2274 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_22_46_ladder = _2501.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2501.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2501.x * cbModelParam._m0[1u].z;
        }
        _1656 = frontier_phi_22_46_ladder_2;
        _1658 = frontier_phi_22_46_ladder_1;
        _1660 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_661, _662, _663), _1563);
        _1656 = _1640.x * cbModelParam._m0[1u].z;
        _1658 = _1640.y * cbModelParam._m0[1u].z;
        _1660 = _1640.z * cbModelParam._m0[1u].z;
    }
    float _1673 = (((_686 * _638) + _687) * _653) * ((cbModelParam._m0[1u].w * (_1656 - _1554)) + _1554);
    float _1675 = (((_686 * _640) + _687) * _653) * ((cbModelParam._m0[1u].w * (_1658 - _1556)) + _1556);
    float _1677 = (((_686 * _641) + _687) * _653) * ((cbModelParam._m0[1u].w * (_1660 - _1558)) + _1558);
    float _1680 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, _1673 * cbSceneParam._m0[91u].x));
    uvec4 _1696 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _1698 = _1696.x * 14u;
    uint _1699 = _1698 + 13u;
    float _1706 = _653 + (-1.0);
    float _1711 = (cbLight._m0[_1699].x * _1706) + 1.0;
    float _1712 = (cbLight._m0[_1699].y * _1706) + 1.0;
    float _1713 = (cbLight._m0[_1699].z * _1706) + 1.0;
    float _1714 = (cbLight._m0[_1699].w * _1706) + 1.0;
    uint _1715 = _1698 + 5u;
    float _1721 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1725 = _1698 + 4u;
    float _1732 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1736 = _1698 | 1u;
    float _1747 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_379, _380, _381));
    float _1750 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_379, _380, _381));
    float _3960 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _3971 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1755 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1757 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1764 = ((cbLight._m0[_1715].x * _1721) * _1757) + ((cbLight._m0[_1725].x * _1732) * _1755);
    float _1765 = ((_1721 * cbLight._m0[_1715].y) * _1757) + ((_1732 * cbLight._m0[_1725].y) * _1755);
    float _1766 = ((_1721 * cbLight._m0[_1715].z) * _1757) + ((_1732 * cbLight._m0[_1725].z) * _1755);
    uvec4 _1770 = floatBitsToUint(cbLight._m0[_1698 + 12u]);
    bool _1772 = _1770.x == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1772)
    {
        _1783 = _1764;
        _1785 = _1765;
        _1787 = _1766;
    }
    else
    {
        uint _1791 = _1698 + 6u;
        float _1807 = (dot(vec3(cbLight._m0[_1698 + 2u].xyz), vec3(_379, _380, _381)) * 0.5) + 0.5;
        float _1808 = _1807 * _1807;
        float _3982 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1810 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _1783 = (((cbLight._m0[_1791].x * 0.3183098733425140380859375) * _1809) * _1810) + _1764;
        _1785 = (((cbLight._m0[_1791].y * 0.3183098733425140380859375) * _1809) * _1810) + _1765;
        _1787 = (((cbLight._m0[_1791].z * 0.3183098733425140380859375) * _1809) * _1810) + _1766;
    }
    bool _1790 = _1770.y == 0u;
    float _1828;
    float _1830;
    float _1832;
    if (_1790)
    {
        _1828 = _1783;
        _1830 = _1785;
        _1832 = _1787;
    }
    else
    {
        uint _1998 = _1698 + 7u;
        float _2014 = (dot(vec3(cbLight._m0[_1698 + 3u].xyz), vec3(_379, _380, _381)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _3998 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2017 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _1828 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1783;
        _1830 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1785;
        _1832 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1787;
    }
    uint _1835 = _1698 + 8u;
    float _1848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1698].w)) * _383) * 0.949999988079071044921875);
    float _1849 = _1848 * _1848;
    float _1850 = cbLight._m0[_1698].x + _565;
    float _1851 = cbLight._m0[_1698].y + _566;
    float _1852 = cbLight._m0[_1698].z + _567;
    float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
    float _1857 = _1856 * _1850;
    float _1858 = _1856 * _1851;
    float _1859 = _1856 * _1852;
    float _1860 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_1698].xyz));
    float _4014 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _1864 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1865 = dot(vec3(_379, _380, _381), vec3(_1857, _1858, _1859));
    float _4036 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1869 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1857, _1858, _1859));
    float _4047 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1873 = _1849 * _1849;
    float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
    float _1885 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
    float _1886 = 0.959999978542327880859375 - _635;
    float _1888 = 0.959999978542327880859375 - _636;
    float _1889 = 0.959999978542327880859375 - _637;
    float _1896 = 1.0 - _1849;
    float _1907 = (0.5 / (((_1864 * ((_1863 * _1896) + _1849)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1896) + _1849) * _1863))) * _1863;
    float _4058 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1909 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
    uint _1920 = _1698 + 9u;
    float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _383) * 0.949999988079071044921875);
    float _1932 = _1931 * _1931;
    float _1933 = cbLight._m0[_1736].x + _565;
    float _1934 = cbLight._m0[_1736].y + _566;
    float _1935 = cbLight._m0[_1736].z + _567;
    float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
    float _1940 = _1939 * _1933;
    float _1941 = _1939 * _1934;
    float _1942 = _1939 * _1935;
    float _1943 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_1736].xyz));
    float _4069 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1947 = dot(vec3(_379, _380, _381), vec3(_1940, _1941, _1942));
    float _4080 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1940, _1941, _1942));
    float _4091 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1955 = _1932 * _1932;
    float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
    float _1966 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
    float _1973 = 1.0 - _1932;
    float _1983 = (0.5 / (((_1864 * ((_1946 * _1973) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1973) + _1932) * _1946))) * _1946;
    float _4102 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
    float _1995 = (((((_1966 * _1886) + _638) * cbLight._m0[_1920].x) * _1985) * _1721) + (((((_1885 * _1886) + _638) * cbLight._m0[_1835].x) * _1909) * _1732);
    float _1996 = (((((_1966 * _1888) + _640) * cbLight._m0[_1920].y) * _1985) * _1721) + (((((_1885 * _1888) + _640) * cbLight._m0[_1835].y) * _1909) * _1732);
    float _1997 = (((((_1966 * _1889) + _641) * cbLight._m0[_1920].z) * _1985) * _1721) + (((((_1885 * _1889) + _641) * cbLight._m0[_1835].z) * _1909) * _1732);
    float _2059;
    float _2061;
    float _2063;
    if (_1772)
    {
        _2059 = _1995;
        _2061 = _1996;
        _2063 = _1997;
    }
    else
    {
        uint _2065 = _1698 + 2u;
        uint _2069 = _1698 + 10u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _383) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _565;
        float _2086 = cbLight._m0[_2065].y + _566;
        float _2087 = cbLight._m0[_2065].z + _567;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2065].xyz));
        float _4113 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2099 = dot(vec3(_379, _380, _381), vec3(_2092, _2093, _2094));
        float _4124 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _4135 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
        float _2125 = 1.0 - _2084;
        float _2135 = (0.5 / (((_1864 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _2125) + _2084) * _2098))) * _2098;
        float _4146 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _2059 = (((((_2118 * _1886) + _638) * cbLight._m0[_2069].x) * _2137) * _2138) + _1995;
        _2061 = (((((_2118 * _1888) + _640) * cbLight._m0[_2069].y) * _2137) * _2138) + _1996;
        _2063 = (((((_2118 * _1889) + _641) * cbLight._m0[_2069].z) * _2137) * _2138) + _1997;
    }
    float _2173;
    float _2175;
    float _2177;
    if (_1790)
    {
        _2173 = _2059;
        _2175 = _2061;
        _2177 = _2063;
    }
    else
    {
        uint _2184 = _1698 + 3u;
        uint _2188 = _1698 + 11u;
        float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _383) * 0.949999988079071044921875);
        float _2203 = _2202 * _2202;
        float _2204 = cbLight._m0[_2184].x + _565;
        float _2205 = cbLight._m0[_2184].y + _566;
        float _2206 = cbLight._m0[_2184].z + _567;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2211 = _2210 * _2204;
        float _2212 = _2210 * _2205;
        float _2213 = _2210 * _2206;
        float _2214 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2184].xyz));
        float _4162 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2218 = dot(vec3(_379, _380, _381), vec3(_2211, _2212, _2213));
        float _4173 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2211, _2212, _2213));
        float _4184 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2226 = _2203 * _2203;
        float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
        float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
        float _2244 = 1.0 - _2203;
        float _2254 = (0.5 / (((_1864 * ((_2217 * _2244) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _2244) + _2203) * _2217))) * _2217;
        float _4195 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2256 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
        float _2257 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _2173 = (((((_2237 * _1886) + _638) * cbLight._m0[_2188].x) * _2256) * _2257) + _2059;
        _2175 = (((((_2237 * _1888) + _640) * cbLight._m0[_2188].y) * _2256) * _2257) + _2061;
        _2177 = (((((_2237 * _1889) + _641) * cbLight._m0[_2188].z) * _2256) * _2257) + _2063;
    }
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_1696.y == 0u)
    {
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2332;
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2332;
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2332;
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.x;
        uint _2359 = uint((float(_2347.y) * floor(float(uint(cbSceneParam._m0[85u].y * _573) / _2348))) + floor(float(uint(cbSceneParam._m0[85u].x * _572) / _2348)));
        float _2369 = (log2(_2335 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2370 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        uint _2373 = uint(isnan(14.0) ? _2370 : (isnan(_2370) ? 14.0 : min(_2370, 14.0)));
        uvec4 _2378 = texelFetch(g_lightClusterGridBuffer, int(((_2373 << 2u) + (_2359 << 6u)) >> 2u));
        uint _2379 = _2378.x;
        uint _2380 = _2347.z;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((((1u << ((_2380 >> 4u) & 15u)) + 4294967295u) & _2379) == 0u) || ((_2380 & 240u) == 0u))
        {
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
        }
        else
        {
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            uint _2665 = 0u;
            uint _2674;
            bool _2675;
            for (;;)
            {
                _2674 = texelFetch(g_lightClassification, int((((_2373 << 5u) + (_2359 << 9u)) + (_2665 << 2u)) >> 2u)).x;
                _2675 = _2674 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2675)
                {
                    frontier_phi_61_pred = _2659;
                    frontier_phi_61_pred_1 = _2664;
                    frontier_phi_61_pred_2 = _2663;
                    frontier_phi_61_pred_3 = _2662;
                    frontier_phi_61_pred_4 = _2661;
                    frontier_phi_61_pred_5 = _2660;
                }
                else
                {
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    uint _2789;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2674;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    for (;;)
                    {
                        uint _2793 = uint(findLSB(_2789)) + (_2665 << 5u);
                        uint _2790 = (_2789 + 4294967295u) & _2789;
                        uint _2795 = _2793 * 48u;
                        vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2815 = (_2793 * 48u) + 4u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2834 = (_2793 * 48u) + 8u;
                        vec3 _2845 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x));
                        float _2849 = _2809.x - _2333;
                        float _2850 = _2809.y - _2334;
                        float _2851 = _2809.z - _2335;
                        float _2852 = dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851));
                        float _2855 = inversesqrt(_2852);
                        float _2856 = _2855 * _2849;
                        float _2857 = _2855 * _2850;
                        float _2858 = _2855 * _2851;
                        float _2859 = dot(vec3(_593, _596, _599), vec3(_2856, _2857, _2858));
                        float _2864 = 1.0 - (_2852 * _2809.w);
                        float _4221 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2866 = sqrt(_2852) * _2828.w;
                        float _2869 = 1.39999997615814208984375 / (_2866 + 1.39999997615814208984375);
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2859) + _2870;
                        float _2876 = _2866 * _2866;
                        float _2879 = ((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2865) / ((_2876 * 0.699999988079071044921875) + 1.0);
                        float _2883 = (-0.0) - _2333;
                        float _2884 = (-0.0) - _2334;
                        float _2885 = (-0.0) - _2335;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2900 = exp2(log2(1.0 / ((_2876 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _669;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2890 + _2856;
                        float _2912 = _2891 + _2857;
                        float _2913 = _2892 + _2858;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_593, _596, _599), vec3(_2890, _2891, _2892));
                        float _4237 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2925 = dot(vec3(_593, _596, _599), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4248 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2869 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2859) + _2934;
                        float _4259 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4270 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2932 * _2932) * ((_2876 * 2.1991131305694580078125) + 3.141590118408203125))) * _2865;
                        _2718 = (_2879 * _2828.x) + _2786;
                        _2719 = (_2879 * _2828.y) + _2787;
                        _2720 = (_2879 * _2828.z) + _2788;
                        _2715 = (_2960 * _2845.x) + _2783;
                        _2716 = (_2960 * _2845.y) + _2784;
                        _2717 = (_2960 * _2845.z) + _2785;
                        if (_2790 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2790;
                        }
                    }
                    frontier_phi_61_pred = _2715;
                    frontier_phi_61_pred_1 = _2720;
                    frontier_phi_61_pred_2 = _2719;
                    frontier_phi_61_pred_3 = _2718;
                    frontier_phi_61_pred_4 = _2717;
                    frontier_phi_61_pred_5 = _2716;
                }
                _2507 = frontier_phi_61_pred;
                _2517 = frontier_phi_61_pred_1;
                _2515 = frontier_phi_61_pred_2;
                _2513 = frontier_phi_61_pred_3;
                _2511 = frontier_phi_61_pred_4;
                _2509 = frontier_phi_61_pred_5;
                uint _2666 = _2665 + 1u;
                if (_2666 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2659 = _2507;
                    _2660 = _2509;
                    _2661 = _2511;
                    _2662 = _2513;
                    _2663 = _2515;
                    _2664 = _2517;
                    _2665 = _2666;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
        }
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.z;
        uint _2523 = (_2521 >> 8u) & 15u;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((4294967295u << _2523) & _2379) == 0u)
        {
            _2627 = _2506;
            _2629 = _2508;
            _2631 = _2510;
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
        }
        else
        {
            float _2652 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
            float _2653 = _2652 * _2333;
            float _2654 = _2652 * _2334;
            float _2655 = _2652 * _2335;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2523 < ((_2521 >> 12u) & 15u))
            {
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2766 = _2506;
                float _2767 = _2508;
                float _2768 = _2510;
                float _2769 = _2512;
                float _2770 = _2514;
                float _2771 = _2516;
                uint _2772 = _2523;
                uint _2781;
                bool _2782;
                for (;;)
                {
                    _2781 = texelFetch(g_lightClassification, int((((_2373 << 5u) + (_2359 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                    _2782 = _2781 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2782)
                    {
                        frontier_phi_67_pred = _2769;
                        frontier_phi_67_pred_1 = _2770;
                        frontier_phi_67_pred_2 = _2771;
                        frontier_phi_67_pred_3 = _2768;
                        frontier_phi_67_pred_4 = _2767;
                        frontier_phi_67_pred_5 = _2766;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2978 = _2766;
                        float _2979 = _2767;
                        float _2980 = _2768;
                        float _2981 = _2769;
                        float _2982 = _2770;
                        float _2983 = _2771;
                        uint _2984 = _2781;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2995 = ((_2772 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2995 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2995 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_2335, _3105.z, fma(_2334, _3105.y, _3105.x * _2333)) + _3105.w;
                            _3118 = !((fma(_2335, _3086.z, fma(_2334, _3086.y, _3086.x * _2333)) + _3086.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3010.x - _2333;
                                float _3146 = _3010.y - _2334;
                                float _3147 = _3010.z - _2335;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3011 * _3011));
                                float _4281 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3163 = sqrt(_3148) * _3026.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_593, _596, _599))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_2335, _3054.z, fma(_2334, _3054.y, _3054.x * _2333)) + _3054.w) / _3117;
                                float _3177 = (fma(_2335, _3070.z, fma(_2334, _3070.y, _3070.x * _2333)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4297 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _669;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2653;
                                float _3207 = _3153 - _2654;
                                float _3208 = _3154 - _2655;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_593, _596, _599), vec3((-0.0) - _2653, (-0.0) - _2654, (-0.0) - _2655));
                                float _4308 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3220 = dot(vec3(_593, _596, _599), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4319 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_593, _596, _599), vec3(_3152, _3153, _3154))) + _3229;
                                float _4330 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4341 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3257 * _3038.x;
                                frontier_phi_73_pred_1 = _3257 * _3038.y;
                                frontier_phi_73_pred_2 = _3183 * _3026.z;
                                frontier_phi_73_pred_3 = _3183 * _3026.y;
                                frontier_phi_73_pred_4 = _3183 * _3026.x;
                                frontier_phi_73_pred_5 = _3257 * _3038.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3261 = frontier_phi_73_pred;
                            _3262 = frontier_phi_73_pred_1;
                            _3266 = frontier_phi_73_pred_2;
                            _3265 = frontier_phi_73_pred_3;
                            _3264 = frontier_phi_73_pred_4;
                            _3263 = frontier_phi_73_pred_5;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2968;
                        frontier_phi_67_pred_1 = _2969;
                        frontier_phi_67_pred_2 = _2970;
                        frontier_phi_67_pred_3 = _2967;
                        frontier_phi_67_pred_4 = _2966;
                        frontier_phi_67_pred_5 = _2965;
                    }
                    _2634 = frontier_phi_67_pred;
                    _2636 = frontier_phi_67_pred_1;
                    _2638 = frontier_phi_67_pred_2;
                    _2632 = frontier_phi_67_pred_3;
                    _2630 = frontier_phi_67_pred_4;
                    _2628 = frontier_phi_67_pred_5;
                    uint _2773 = _2772 + 1u;
                    if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2766 = _2628;
                        _2767 = _2630;
                        _2768 = _2632;
                        _2769 = _2634;
                        _2770 = _2636;
                        _2771 = _2638;
                        _2772 = _2773;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2636;
                frontier_phi_55_56_ladder_1 = _2638;
                frontier_phi_55_56_ladder_2 = _2634;
                frontier_phi_55_56_ladder_3 = _2632;
                frontier_phi_55_56_ladder_4 = _2630;
                frontier_phi_55_56_ladder_5 = _2628;
            }
            else
            {
                frontier_phi_55_56_ladder = _2514;
                frontier_phi_55_56_ladder_1 = _2516;
                frontier_phi_55_56_ladder_2 = _2512;
                frontier_phi_55_56_ladder_3 = _2510;
                frontier_phi_55_56_ladder_4 = _2508;
                frontier_phi_55_56_ladder_5 = _2506;
            }
            _2627 = frontier_phi_55_56_ladder_5;
            _2629 = frontier_phi_55_56_ladder_4;
            _2631 = frontier_phi_55_56_ladder_3;
            _2633 = frontier_phi_55_56_ladder_2;
            _2635 = frontier_phi_55_56_ladder;
            _2637 = frontier_phi_55_56_ladder_1;
        }
        float _2642 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
        _2392 = (_2642 * _2633) + _1828;
        _2394 = (_2642 * _2635) + _1830;
        _2396 = (_2642 * _2637) + _1832;
        _2398 = ((_2627 * _638) * _2642) + _2173;
        _2400 = ((_2629 * _640) * _2642) + _2175;
        _2402 = ((_2631 * _641) * _2642) + _2177;
    }
    else
    {
        _2392 = _1828;
        _2394 = _1830;
        _2396 = _1832;
        _2398 = _2173;
        _2400 = _2175;
        _2402 = _2177;
    }
    uint _2408 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _2414 = cbInstanceData._m0[_2408].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _422) + cbMatDynParam._m0[7u].x) + (((_463 - (_463 * _387)) + (cbMatDynParam._m0[11u].x * _494)) * cbMatDynParam._m0[9u].x));
    float _2415 = cbInstanceData._m0[_2408].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _422) + cbMatDynParam._m0[7u].y) + (((_465 - (_465 * _387)) + (cbMatDynParam._m0[11u].y * _494)) * cbMatDynParam._m0[9u].y));
    float _2416 = cbInstanceData._m0[_2408].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _422) + cbMatDynParam._m0[7u].z) + (((_467 - (_467 * _387)) + (cbMatDynParam._m0[11u].z * _494)) * cbMatDynParam._m0[9u].z));
    float _4357 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4368 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4379 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4390 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _2434 = (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2392 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _653))) + ((_2398 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + _2414;
    float _2436 = (_2415 + ((_2400 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2394 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _653)));
    float _2438 = (_2416 + ((_2402 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2396 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _653)));
    float _2446 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) - _449) * _422) + _449));
    float _2451 = cbInstanceData._m0[_612 + 6u].w * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)));
    float _2456 = _572 / cbSceneParam._m0[86u].x;
    float _2457 = _573 / cbSceneParam._m0[86u].y;
    vec4 _2471 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, (log2((isnan(cbSceneParam._m0[77u].w) ? _509 : (isnan(_509) ? cbSceneParam._m0[77u].w : min(_509, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2473 = _2471.x;
    float _2474 = _2471.y;
    float _2475 = _2471.z;
    float _2476 = _2471.w;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_509 > cbSceneParam._m0[78u].w)
    {
        float _2531 = isnan(_509) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _509 : min(cbSceneParam._m0[80u].w, _509));
        float _2532 = _2531 / _509;
        float _2543 = _2532 * _558;
        float _2544 = _559 * _2532;
        float _2545 = (-0.0) - _2544;
        float _2546 = _2532 * _560;
        float _2548 = (cbSceneParam._m0[77u].w * _2545) / _2531;
        float _2549 = _2548 + cbSceneParam._m0[79u].w;
        float _2550 = cbSceneParam._m0[79u].w - _2544;
        float _2556 = sqrt(((_2543 * _2543) + (_2544 * _2544)) + (_2546 * _2546));
        float _2559 = (1.0 - (cbSceneParam._m0[77u].w / _2531)) * _2556;
        float _2564 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2566 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2728;
        if (abs((_2545 - _2548) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2728 = ((((_2549 > 0.0) ? exp2(_2564 * _2549) : (2.0 - exp2(_2566 * _2549))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2559;
        }
        else
        {
            float _2688 = 1.0 / cbSceneParam._m0[80u].x;
            float _2689 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : max(_2549, _2550));
            float _2690 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : min(_2549, _2550));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            float _2700 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : min(_2690, 0.0));
            _2728 = ((abs(_2556 / _2545) * cbSceneParam._m0[80u].y) * ((((_2699 - _2700) * 2.0) - ((exp2(_2564 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0)))) - exp2(_2564 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0))))) * _2688)) - ((exp2(_2566 * _2699) - exp2(_2566 * _2700)) * _2688))) + (_2559 * cbSceneParam._m0[80u].z);
        }
        vec4 _2730 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, 1.0), 0.0);
        float _2739 = exp2((_2728 * (-1.44269502162933349609375)) * (1.0 - _2730.w));
        float _2740 = log2(_2739);
        float _2756 = log2(_2476);
        _2568 = (exp2(_2756 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].x)) * _2730.x) / cbSceneParam._m0[78u].x)) + _2473;
        _2570 = (exp2(_2756 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].y)) * _2730.y) / cbSceneParam._m0[78u].y)) + _2474;
        _2572 = (exp2(_2756 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].z)) * _2730.z) / cbSceneParam._m0[78u].z)) + _2475;
        _2574 = _2739 * _2476;
    }
    else
    {
        _2568 = _2473;
        _2570 = _2474;
        _2572 = _2475;
        _2574 = _2476;
    }
    float _2586 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2587 = _2586 == 3.0;
    float _2588 = log2(_2574);
    float _2592 = exp2(_2588 * cbSceneParam._m0[78u].x);
    float _2593 = exp2(_2588 * cbSceneParam._m0[78u].y);
    float _2594 = exp2(_2588 * cbSceneParam._m0[78u].z);
    float _2595 = _2592 * (isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0)));
    float _2596 = _2593 * (isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0)));
    float _2597 = _2594 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0)));
    float _2606 = (_2586 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2606 * (_2587 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.y = _2606 * (_2587 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2570)));
    SV_Target.z = _2606 * (_2587 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2572)));
    SV_Target.w = _2451;
    SV_Target_1.x = ((_2446 * _2414) * _2592) * _2606;
    SV_Target_1.y = ((_2446 * _2415) * _2593) * _2606;
    SV_Target_1.z = ((_2446 * _2416) * _2594) * _2606;
    SV_Target_1.w = _2451;
}


