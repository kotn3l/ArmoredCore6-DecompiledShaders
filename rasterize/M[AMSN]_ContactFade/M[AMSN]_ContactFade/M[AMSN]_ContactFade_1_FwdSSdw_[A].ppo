#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _907;
float _3326;
float _3327;
float _3328;
float _3329;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.w;
    float _235 = cbMtdParam._m0[9u].x * _222.x;
    float _236 = cbMtdParam._m0[9u].y * _222.y;
    float _237 = cbMtdParam._m0[9u].z * _222.z;
    vec4 _250 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _252 = _250.x;
    bool _259 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _276 = ((_259 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _252)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _252))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3338 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _279 = 1.0 - (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)));
    float _3349 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _280 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _288 = _228 - (((_280 * _280) * _228) * (3.0 - (_280 * 2.0)));
    vec4 _303 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _303.z;
    float _310 = (_303.x * 2.0) + (-1.0);
    float _312 = (_303.y * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3360 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))));
    float _321 = fma(_318, _198 * NORMAL.x, fma(_312, _205 * TANGENT.x, (_191 * _184) * _310));
    float _324 = fma(_318, _198 * NORMAL.y, fma(_312, _205 * TANGENT.y, (_191 * _185) * _310));
    float _327 = fma(_318, _198 * NORMAL.z, fma(_312, _205 * TANGENT.z, (_191 * _186) * _310));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _332 = _331 * _321;
    float _333 = _331 * _324;
    float _334 = _331 * _327;
    float _3371 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _335 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _336 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3404 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3415 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3426 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _340 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _345 = _259 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _396 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _386);
    float _397 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _386);
    float _398 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _386);
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _403 = _396 * _402;
    float _404 = _397 * _402;
    float _405 = _398 * _402;
    vec4 _410 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _412 = _410.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _586 = sqrt(((_396 * _396) + (_397 * _397)) + (_398 * _398));
        float _592 = (cbMatDynParam._m0[5u].x * _586) + cbMatDynParam._m0[5u].y;
        float _3437 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _593 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _597 = (cbMatDynParam._m0[5u].z * _586) + cbMatDynParam._m0[5u].w;
        float _3448 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) - _593)) + _593) < ((_412 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_334, cbSceneParam._m0[5u].z, fma(_333, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _332));
    float _447 = fma(_334, cbSceneParam._m0[6u].z, fma(_333, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _332));
    float _450 = fma(_334, cbSceneParam._m0[7u].z, fma(_333, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _332));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3459 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _478 = 1.0 - _340;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _340;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _340;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _340;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = dot(vec3(_332, _333, _334), vec3(_403, _404, _405));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _332) - _403;
    float _513 = (_508 * _333) - _404;
    float _514 = (_508 * _334) - _405;
    float _518 = abs(dot(vec3(_403, _404, _405), vec3(_332, _333, _334)));
    float _3492 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_336);
    float _532 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _538 = (1.0 - _532) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _539 = _532 * _520;
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_575, cbModelParam._m0[26u].z, fma(_571, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _567));
        float _635 = fma(_575, cbModelParam._m0[27u].z, fma(_571, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _567));
        float _639 = fma(_575, cbModelParam._m0[28u].z, fma(_571, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _567));
        float _664 = _567 + _332;
        float _665 = _571 + _333;
        float _666 = _575 + _334;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_332, _333, _334), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3540 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_332, _333, _334), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3573 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_332, _333, _334), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3606 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _950 = fma(_575, cbModelParam._m0[30u].z, fma(_571, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _567));
        float _954 = fma(_575, cbModelParam._m0[31u].z, fma(_571, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _567));
        float _958 = fma(_575, cbModelParam._m0[32u].z, fma(_571, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _567));
        float _981 = _567 + _332;
        float _982 = _571 + _333;
        float _983 = _575 + _334;
        float _993 = fma(_983, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981)) - _950;
        float _994 = fma(_983, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981)) - _954;
        float _995 = fma(_983, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981)) - _958;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_950 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_954 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[35u].z) + ((((((_958 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1049 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1016.x + (-0.5));
        float _1051 = _1049 * (_1016.y + (-0.5));
        float _1052 = _1049 * (_1016.z + (-0.5));
        float _1059 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1023.x + (-0.5));
        float _1061 = _1059 * (_1023.y + (-0.5));
        float _1062 = _1059 * (_1023.z + (-0.5));
        float _1069 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1030.x + (-0.5));
        float _1071 = _1069 * (_1030.y + (-0.5));
        float _1072 = _1069 * (_1030.z + (-0.5));
        float _1079 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1037.x + (-0.5));
        float _1081 = _1079 * (_1037.y + (-0.5));
        float _1082 = _1079 * (_1037.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_332, _333, _334), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3669 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1113 + 1.0))) + _1118) * _1083;
        float _1128 = _1051 * 0.5;
        float _1129 = _1061 * 0.5;
        float _1130 = _1071 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_332, _333, _334), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3702 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1155 + 1.0))) + _1160) * _1084;
        float _1170 = _1052 * 0.5;
        float _1171 = _1062 * 0.5;
        float _1172 = _1072 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_332, _333, _334), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3735 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1197 + 1.0))) + _1202) * _1085;
        _1219 = _1052;
        _1220 = _1051;
        _1221 = _1050;
        _1222 = _1062;
        _1223 = _1061;
        _1224 = _1060;
        _1225 = _1072;
        _1226 = _1071;
        _1227 = _1070;
        _1228 = _1085;
        _1229 = _1084;
        _1230 = _1083;
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = _907;
        _1228 = _907;
        _1229 = _907;
        _1230 = _907;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1266 = fma(_1245, cbSceneParam._m0[89u].z, fma(_1244, cbSceneParam._m0[89u].y, _1243 * cbSceneParam._m0[89u].x));
    float _1269 = fma(_1245, cbSceneParam._m0[90u].z, fma(_1244, cbSceneParam._m0[90u].y, _1243 * cbSceneParam._m0[90u].x));
    float _1272 = fma(_1245, cbSceneParam._m0[91u].z, fma(_1244, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1243));
    float _1287 = _512 * 0.5;
    float _1288 = _513 * 0.5;
    float _1289 = _514 * 0.5;
    float _1290 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1293 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1296 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1330;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1303 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_906, _910, _913, _916));
        float _1307 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_908, _911, _914, _917));
        float _1311 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_909, _912, _915, _918));
        float _1318 = dot(vec4(cbModelParam._m0[39u]), vec4(_1287, _1288, _1289, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1341;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1332 = dot(vec4(cbModelParam._m0[40u]), vec4(_1287, _1288, _1289, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1345 = (_1341 * cbModelParam._m0[1u].x) + (_1330 * (1.0 - cbModelParam._m0[1u].x));
    float _1355 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _336);
    float _1356 = isnan(_1355) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1355 : min(cbModelParam._m0[25u].z, _1355));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1405 = fma(_575, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567)) + cbModelParam._m0[13u].w;
        float _1409 = fma(_575, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567)) + cbModelParam._m0[14u].w;
        float _1413 = fma(_575, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567)) + cbModelParam._m0[15u].w;
        float _1416 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1419 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1422 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1450;
        if (_1416 > 0.0)
        {
            _1450 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1450 = frontier_phi_17_15_ladder;
        }
        float _1679;
        if (_1419 > 0.0)
        {
            _1679 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1679 = frontier_phi_26_22_ladder;
        }
        float _1936;
        if (_1422 > 0.0)
        {
            _1936 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1936 = frontier_phi_38_33_ladder;
        }
        float _1938 = isnan(_1679) ? _1450 : (isnan(_1450) ? _1679 : min(_1450, _1679));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1416) + _1405;
        float _1944 = (_1939 * _1419) + _1409;
        float _1945 = (_1939 * _1422) + _1413;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1946;
        float _1950 = _1946 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 > _1950) || ((_1944 < _1948) || ((_1943 < _1948) || (_1943 > _1950))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1945, cbModelParam._m0[9u].z, fma(_1944, cbModelParam._m0[9u].y, _1943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1945, cbModelParam._m0[10u].z, fma(_1944, cbModelParam._m0[10u].y, _1943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1945, cbModelParam._m0[11u].z, fma(_1944, cbModelParam._m0[11u].y, _1943 * cbModelParam._m0[11u].x))), _1356);
            frontier_phi_16_38_ladder = _2073.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2073.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2073.x * cbModelParam._m0[1u].y;
        }
        _1438 = frontier_phi_16_38_ladder_2;
        _1440 = frontier_phi_16_38_ladder_1;
        _1442 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1356);
        _1438 = _1426.x * cbModelParam._m0[1u].y;
        _1440 = _1426.y * cbModelParam._m0[1u].y;
        _1442 = _1426.z * cbModelParam._m0[1u].y;
    }
    float _1446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _336);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1446 : min(cbModelParam._m0[25u].w, _1446));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1504 = fma(_575, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567)) + cbModelParam._m0[21u].w;
        float _1508 = fma(_575, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567)) + cbModelParam._m0[22u].w;
        float _1512 = fma(_575, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567)) + cbModelParam._m0[23u].w;
        float _1515 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1518 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1521 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1684;
        if (_1515 > 0.0)
        {
            _1684 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1963;
        if (_1518 > 0.0)
        {
            _1963 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1963 = frontier_phi_40_35_ladder;
        }
        float _2176;
        if (_1521 > 0.0)
        {
            _2176 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2176 = frontier_phi_49_46_ladder;
        }
        float _2178 = isnan(_1963) ? _1684 : (isnan(_1684) ? _1963 : min(_1684, _1963));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1515) + _1504;
        float _2184 = (_2179 * _1518) + _1508;
        float _2185 = (_2179 * _1521) + _1512;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2187 = (-1.0) - _2186;
        float _2189 = _2186 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2185 > _2189) || ((_2185 < _2187) || ((_2184 > _2189) || ((_2184 < _2187) || ((_2183 < _2187) || (_2183 > _2189))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2185, cbModelParam._m0[17u].z, fma(_2184, cbModelParam._m0[17u].y, _2183 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2185, cbModelParam._m0[18u].z, fma(_2184, cbModelParam._m0[18u].y, _2183 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2185, cbModelParam._m0[19u].z, fma(_2184, cbModelParam._m0[19u].y, _2183 * cbModelParam._m0[19u].x))), _1447);
            frontier_phi_25_49_ladder = _2389.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2389.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2389.x * cbModelParam._m0[1u].z;
        }
        _1540 = frontier_phi_25_49_ladder_2;
        _1542 = frontier_phi_25_49_ladder_1;
        _1544 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1447);
        _1540 = _1524.x * cbModelParam._m0[1u].z;
        _1542 = _1524.y * cbModelParam._m0[1u].z;
        _1544 = _1524.z * cbModelParam._m0[1u].z;
    }
    float _1557 = (((_538 * _489) + _539) * _504) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1559 = (((_538 * _491) + _539) * _504) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1561 = (((_538 * _492) + _539) * _504) * ((cbModelParam._m0[1u].w * (_1544 - _1442)) + _1442);
    float _1564 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1557 * cbSceneParam._m0[91u].x));
    vec4 _1578 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1580 = _1578.w;
    float _1592 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1580);
    float _1593 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1580);
    float _1594 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1580);
    uvec4 _1598 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1600 = _1598.x * 14u;
    uint _1601 = _1600 + 13u;
    float _1608 = _504 + (-1.0);
    float _1613 = (cbLight._m0[_1601].x * _1608) + 1.0;
    float _1614 = (cbLight._m0[_1601].y * _1608) + 1.0;
    float _1615 = (cbLight._m0[_1601].z * _1608) + 1.0;
    float _1616 = (cbLight._m0[_1601].w * _1608) + 1.0;
    uint _1617 = _1600 + 5u;
    float _1623 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1627 = _1600 + 4u;
    float _1637 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1641 = _1600 | 1u;
    float _1652 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_332, _333, _334));
    float _1655 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_332, _333, _334));
    float _3871 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _3882 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1660 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1662 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1669 = ((cbLight._m0[_1617].x * _1623) * _1662) + (((cbLight._m0[_1627].x * _1592) * _1637) * _1660);
    float _1670 = ((_1623 * cbLight._m0[_1617].y) * _1662) + (((cbLight._m0[_1627].y * _1593) * _1637) * _1660);
    float _1671 = ((_1623 * cbLight._m0[_1617].z) * _1662) + (((cbLight._m0[_1627].z * _1594) * _1637) * _1660);
    uvec4 _1676 = floatBitsToUint(cbLight._m0[_1600 + 12u]);
    bool _1678 = _1676.x == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1678)
    {
        _1689 = _1669;
        _1691 = _1670;
        _1693 = _1671;
    }
    else
    {
        uint _1697 = _1600 + 6u;
        float _1713 = (dot(vec3(cbLight._m0[_1600 + 2u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1714 = _1713 * _1713;
        float _3893 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1716 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1689 = (((cbLight._m0[_1697].x * 0.3183098733425140380859375) * _1715) * _1716) + _1669;
        _1691 = (((cbLight._m0[_1697].y * 0.3183098733425140380859375) * _1715) * _1716) + _1670;
        _1693 = (((cbLight._m0[_1697].z * 0.3183098733425140380859375) * _1715) * _1716) + _1671;
    }
    bool _1696 = _1676.y == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1696)
    {
        _1734 = _1689;
        _1736 = _1691;
        _1738 = _1693;
    }
    else
    {
        uint _1907 = _1600 + 7u;
        float _1923 = (dot(vec3(cbLight._m0[_1600 + 3u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3909 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1926 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1734 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1689;
        _1736 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1691;
        _1738 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1693;
    }
    uint _1741 = _1600 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _336) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1600].x + _403;
    float _1757 = cbLight._m0[_1600].y + _404;
    float _1758 = cbLight._m0[_1600].z + _405;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1600].xyz));
    float _3925 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1770 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1771 = dot(vec3(_332, _333, _334), vec3(_1763, _1764, _1765));
    float _3947 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1763, _1764, _1765));
    float _3958 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _486;
    float _1794 = 0.959999978542327880859375 - _487;
    float _1795 = 0.959999978542327880859375 - _488;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3969 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1829 = _1600 + 9u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _336) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1641].x + _403;
    float _1843 = cbLight._m0[_1641].y + _404;
    float _1844 = cbLight._m0[_1641].z + _405;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1641].xyz));
    float _3980 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1856 = dot(vec3(_332, _333, _334), vec3(_1849, _1850, _1851));
    float _3991 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1849, _1850, _1851));
    float _4002 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1841 * _1841;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
    float _1882 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1770 * ((_1855 * _1882) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1882) + _1841) * _1855))) * _1855;
    float _4013 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    float _1904 = (((((_1875 * _1792) + _489) * cbLight._m0[_1829].x) * _1894) * _1623) + ((((cbLight._m0[_1741].x * _1592) * ((_1791 * _1792) + _489)) * _1815) * _1637);
    float _1905 = (((((_1875 * _1794) + _491) * cbLight._m0[_1829].y) * _1894) * _1623) + ((((cbLight._m0[_1741].y * _1593) * ((_1791 * _1794) + _491)) * _1815) * _1637);
    float _1906 = (((((_1875 * _1795) + _492) * cbLight._m0[_1829].z) * _1894) * _1623) + ((((cbLight._m0[_1741].z * _1594) * ((_1791 * _1795) + _492)) * _1815) * _1637);
    float _1968;
    float _1970;
    float _1972;
    if (_1678)
    {
        _1968 = _1904;
        _1970 = _1905;
        _1972 = _1906;
    }
    else
    {
        uint _1974 = _1600 + 2u;
        uint _1978 = _1600 + 10u;
        float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _336) * 0.949999988079071044921875);
        float _1993 = _1992 * _1992;
        float _1994 = cbLight._m0[_1974].x + _403;
        float _1995 = cbLight._m0[_1974].y + _404;
        float _1996 = cbLight._m0[_1974].z + _405;
        float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
        float _2001 = _2000 * _1994;
        float _2002 = _2000 * _1995;
        float _2003 = _2000 * _1996;
        float _2004 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1974].xyz));
        float _4024 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2008 = dot(vec3(_332, _333, _334), vec3(_2001, _2002, _2003));
        float _4035 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2012 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2001, _2002, _2003));
        float _4046 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2016 = _1993 * _1993;
        float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
        float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
        float _2034 = 1.0 - _1993;
        float _2044 = (0.5 / (((_1770 * ((_2007 * _2034) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2034) + _1993) * _2007))) * _2007;
        float _4057 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2046 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
        float _2047 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1968 = (((((_2027 * _1792) + _489) * cbLight._m0[_1978].x) * _2046) * _2047) + _1904;
        _1970 = (((((_2027 * _1794) + _491) * cbLight._m0[_1978].y) * _2046) * _2047) + _1905;
        _1972 = (((((_2027 * _1795) + _492) * cbLight._m0[_1978].z) * _2046) * _2047) + _1906;
    }
    float _2082;
    float _2084;
    float _2086;
    if (_1696)
    {
        _2082 = _1968;
        _2084 = _1970;
        _2086 = _1972;
    }
    else
    {
        uint _2093 = _1600 + 3u;
        uint _2097 = _1600 + 11u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _336) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _403;
        float _2114 = cbLight._m0[_2093].y + _404;
        float _2115 = cbLight._m0[_2093].z + _405;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_2093].xyz));
        float _4073 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2127 = dot(vec3(_332, _333, _334), vec3(_2120, _2121, _2122));
        float _4084 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4095 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0);
        float _2153 = 1.0 - _2112;
        float _2163 = (0.5 / (((_1770 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2153) + _2112) * _2126))) * _2126;
        float _4106 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2165 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2166 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _2082 = (((((_2146 * _1792) + _489) * cbLight._m0[_2097].x) * _2165) * _2166) + _1968;
        _2084 = (((((_2146 * _1794) + _491) * cbLight._m0[_2097].y) * _2165) * _2166) + _1970;
        _2086 = (((((_2146 * _1795) + _492) * cbLight._m0[_2097].z) * _2165) * _2166) + _1972;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1598.y == 0u)
    {
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2241;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2241;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2241;
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2257)));
        float _2278 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uvec4 _2287 = texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u));
        uint _2288 = _2287.x;
        uint _2289 = _2256.z;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & _2288) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
        }
        else
        {
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            uint _2552 = 0u;
            uint _2561;
            bool _2562;
            for (;;)
            {
                _2561 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2552 << 2u)) >> 2u)).x;
                _2562 = _2561 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2562)
                {
                    frontier_phi_66_pred = _2546;
                    frontier_phi_66_pred_1 = _2551;
                    frontier_phi_66_pred_2 = _2550;
                    frontier_phi_66_pred_3 = _2549;
                    frontier_phi_66_pred_4 = _2548;
                    frontier_phi_66_pred_5 = _2547;
                }
                else
                {
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    uint _2697;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2551;
                    _2697 = _2561;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    for (;;)
                    {
                        uint _2701 = uint(findLSB(_2697)) + (_2552 << 5u);
                        uint _2698 = (_2697 + 4294967295u) & _2697;
                        uint _2703 = _2701 * 48u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2723 = (_2701 * 48u) + 4u;
                        vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2742 = (_2701 * 48u) + 8u;
                        vec3 _2753 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x));
                        float _2757 = _2717.x - _2242;
                        float _2758 = _2717.y - _2243;
                        float _2759 = _2717.z - _2244;
                        float _2760 = dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759));
                        float _2763 = inversesqrt(_2760);
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2767 = dot(vec3(_444, _447, _450), vec3(_2764, _2765, _2766));
                        float _2772 = 1.0 - (_2760 * _2717.w);
                        float _4132 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2774 = sqrt(_2760) * _2736.w;
                        float _2777 = 1.39999997615814208984375 / (_2774 + 1.39999997615814208984375);
                        float _2778 = _2777 * _2777;
                        float _2781 = ((1.0 - _2778) * _2767) + _2778;
                        float _2784 = _2774 * _2774;
                        float _2788 = ((isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))) * _2773) / ((_2784 * 0.699999988079071044921875) + 1.0);
                        float _2792 = (-0.0) - _2242;
                        float _2793 = (-0.0) - _2243;
                        float _2794 = (-0.0) - _2244;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2809 = exp2(log2(1.0 / ((_2784 * 3.5) + 5.0)) * 0.25);
                        float _2810 = 1.0 - _520;
                        float _2817 = sqrt(1.0 - ((1.0 - (_2810 * _2810)) * (1.0 - (_2809 * _2809))));
                        float _2818 = _2817 * _2817;
                        float _2819 = _2818 * _2818;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2822 = _2801 + _2766;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2830 = dot(vec3(_444, _447, _450), vec3(_2799, _2800, _2801));
                        float _4148 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2834 = dot(vec3(_444, _447, _450), vec3(_2826 * _2820, _2826 * _2821, _2826 * _2822));
                        float _4159 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2837 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2841 = ((_2837 * _2837) * (_2819 + (-1.0))) + 1.0;
                        float _2842 = _2777 * _2818;
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2767) + _2843;
                        float _4170 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2847 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2848 = 1.0 - _2818;
                        float _2858 = (0.5 / (((_2847 * ((_2833 * _2848) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _2848) + _2818) * _2833))) * _2847;
                        float _4181 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2869 = (((_2819 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_2841 * _2841) * ((_2784 * 2.1991131305694580078125) + 3.141590118408203125))) * _2773;
                        _2621 = (_2788 * _2736.x) + _2694;
                        _2622 = (_2788 * _2736.y) + _2695;
                        _2623 = (_2788 * _2736.z) + _2696;
                        _2618 = (_2869 * _2753.x) + _2691;
                        _2619 = (_2869 * _2753.y) + _2692;
                        _2620 = (_2869 * _2753.z) + _2693;
                        if (_2698 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2621;
                            _2695 = _2622;
                            _2696 = _2623;
                            _2697 = _2698;
                        }
                    }
                    frontier_phi_66_pred = _2618;
                    frontier_phi_66_pred_1 = _2623;
                    frontier_phi_66_pred_2 = _2622;
                    frontier_phi_66_pred_3 = _2621;
                    frontier_phi_66_pred_4 = _2620;
                    frontier_phi_66_pred_5 = _2619;
                }
                _2395 = frontier_phi_66_pred;
                _2405 = frontier_phi_66_pred_1;
                _2403 = frontier_phi_66_pred_2;
                _2401 = frontier_phi_66_pred_3;
                _2399 = frontier_phi_66_pred_4;
                _2397 = frontier_phi_66_pred_5;
                uint _2553 = _2552 + 1u;
                if (_2553 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2546 = _2395;
                    _2547 = _2397;
                    _2548 = _2399;
                    _2549 = _2401;
                    _2550 = _2403;
                    _2551 = _2405;
                    _2552 = _2553;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
        }
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.z;
        uint _2411 = (_2409 >> 8u) & 15u;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((4294967295u << _2411) & _2288) == 0u)
        {
            _2514 = _2394;
            _2516 = _2396;
            _2518 = _2398;
            _2520 = _2400;
            _2522 = _2402;
            _2524 = _2404;
        }
        else
        {
            float _2539 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _2540 = _2539 * _2242;
            float _2541 = _2539 * _2243;
            float _2542 = _2539 * _2244;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2411 < ((_2409 >> 12u) & 15u))
            {
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2674 = _2394;
                float _2675 = _2396;
                float _2676 = _2398;
                float _2677 = _2400;
                float _2678 = _2402;
                float _2679 = _2404;
                uint _2680 = _2411;
                uint _2689;
                bool _2690;
                for (;;)
                {
                    _2689 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                    _2690 = _2689 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2690)
                    {
                        frontier_phi_77_pred = _2679;
                        frontier_phi_77_pred_1 = _2678;
                        frontier_phi_77_pred_2 = _2677;
                        frontier_phi_77_pred_3 = _2676;
                        frontier_phi_77_pred_4 = _2675;
                        frontier_phi_77_pred_5 = _2674;
                    }
                    else
                    {
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        float _2899 = _2677;
                        float _2900 = _2678;
                        float _2901 = _2679;
                        uint _2902 = _2689;
                        uint _2903;
                        vec4 _2928;
                        float _2929;
                        vec4 _2944;
                        vec3 _2956;
                        vec4 _2972;
                        vec4 _2988;
                        float _3035;
                        bool _3036;
                        for (;;)
                        {
                            uint _2913 = ((_2680 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2902));
                            _2903 = (_2902 + 4294967295u) & _2902;
                            uint _2915 = _2913 * 40u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2929 = _2928.w;
                            uint _2931 = (_2913 * 40u) + 4u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2946 = (_2913 * 40u) + 8u;
                            _2956 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x));
                            uint _2959 = (_2913 * 40u) + 16u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2975 = (_2913 * 40u) + 20u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2913 * 40u) + 24u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3010 = (_2913 * 40u) + 28u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3035 = fma(_2244, _3023.z, fma(_2243, _3023.y, _3023.x * _2242)) + _3023.w;
                            _3036 = !((fma(_2244, _3004.z, fma(_2243, _3004.y, _3004.x * _2242)) + _3004.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3036)
                            {
                                float _3063 = _2928.x - _2242;
                                float _3064 = _2928.y - _2243;
                                float _3065 = _2928.z - _2244;
                                float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                                float _3069 = inversesqrt(_3066);
                                float _3070 = _3069 * _3063;
                                float _3071 = _3069 * _3064;
                                float _3072 = _3069 * _3065;
                                float _3076 = 1.0 - (_3066 / (_2929 * _2929));
                                float _4192 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3081 = sqrt(_3066) * _2944.w;
                                float _3083 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                                float _3084 = _3083 * _3083;
                                float _3087 = ((1.0 - _3084) * dot(vec3(_3070, _3071, _3072), vec3(_444, _447, _450))) + _3084;
                                float _3090 = _3081 * _3081;
                                float _3094 = (fma(_2244, _2972.z, fma(_2243, _2972.y, _2972.x * _2242)) + _2972.w) / _3035;
                                float _3095 = (fma(_2244, _2988.z, fma(_2243, _2988.y, _2988.x * _2242)) + _2988.w) / _3035;
                                float _3099 = 1.0 - dot(vec2(_3094, _3095), vec2(_3094, _3095));
                                float _4208 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3101 = _3100 * (((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3077) / ((_3090 * 0.699999988079071044921875) + 1.0));
                                float _3113 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                                float _3114 = 1.0 - _520;
                                float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                                float _3122 = _3121 * _3121;
                                float _3123 = _3122 * _3122;
                                float _3124 = _3070 - _2540;
                                float _3125 = _3071 - _2541;
                                float _3126 = _3072 - _2542;
                                float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                                float _3134 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2540, (-0.0) - _2541, (-0.0) - _2542));
                                float _4219 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3138 = dot(vec3(_444, _447, _450), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                                float _4230 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                                float _3146 = _3083 * _3122;
                                float _3147 = _3146 * _3146;
                                float _3153 = ((1.0 - _3147) * dot(vec3(_444, _447, _450), vec3(_3070, _3071, _3072))) + _3147;
                                float _4241 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3155 = 1.0 - _3122;
                                float _3165 = (0.5 / (((_3154 * ((_3137 * _3155) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3122) * _3137))) * _3154;
                                float _4252 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3175 = (_3100 * _3077) * (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_3145 * _3145) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3101 * _2944.y;
                                frontier_phi_83_pred_1 = _3101 * _2944.x;
                                frontier_phi_83_pred_2 = _3175 * _2956.z;
                                frontier_phi_83_pred_3 = _3175 * _2956.y;
                                frontier_phi_83_pred_4 = _3175 * _2956.x;
                                frontier_phi_83_pred_5 = _3101 * _2944.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3183 = frontier_phi_83_pred;
                            _3182 = frontier_phi_83_pred_1;
                            _3181 = frontier_phi_83_pred_2;
                            _3180 = frontier_phi_83_pred_3;
                            _3179 = frontier_phi_83_pred_4;
                            _3184 = frontier_phi_83_pred_5;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            if (_2903 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2903;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2888;
                        frontier_phi_77_pred_1 = _2887;
                        frontier_phi_77_pred_2 = _2886;
                        frontier_phi_77_pred_3 = _2885;
                        frontier_phi_77_pred_4 = _2884;
                        frontier_phi_77_pred_5 = _2883;
                    }
                    _2525 = frontier_phi_77_pred;
                    _2523 = frontier_phi_77_pred_1;
                    _2521 = frontier_phi_77_pred_2;
                    _2519 = frontier_phi_77_pred_3;
                    _2517 = frontier_phi_77_pred_4;
                    _2515 = frontier_phi_77_pred_5;
                    uint _2681 = _2680 + 1u;
                    if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2674 = _2515;
                        _2675 = _2517;
                        _2676 = _2519;
                        _2677 = _2521;
                        _2678 = _2523;
                        _2679 = _2525;
                        _2680 = _2681;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2519;
                frontier_phi_58_59_ladder_1 = _2525;
                frontier_phi_58_59_ladder_2 = _2523;
                frontier_phi_58_59_ladder_3 = _2521;
                frontier_phi_58_59_ladder_4 = _2517;
                frontier_phi_58_59_ladder_5 = _2515;
            }
            else
            {
                frontier_phi_58_59_ladder = _2398;
                frontier_phi_58_59_ladder_1 = _2404;
                frontier_phi_58_59_ladder_2 = _2402;
                frontier_phi_58_59_ladder_3 = _2400;
                frontier_phi_58_59_ladder_4 = _2396;
                frontier_phi_58_59_ladder_5 = _2394;
            }
            _2514 = frontier_phi_58_59_ladder_5;
            _2516 = frontier_phi_58_59_ladder_4;
            _2518 = frontier_phi_58_59_ladder;
            _2520 = frontier_phi_58_59_ladder_3;
            _2522 = frontier_phi_58_59_ladder_2;
            _2524 = frontier_phi_58_59_ladder_1;
        }
        float _2529 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2301 = (_2529 * _2520) + _1734;
        _2303 = (_2529 * _2522) + _1736;
        _2305 = (_2529 * _2524) + _1738;
        _2307 = ((_2514 * _489) * _2529) + _2082;
        _2309 = ((_2516 * _491) * _2529) + _2084;
        _2311 = ((_2518 * _492) * _2529) + _2086;
    }
    else
    {
        _2301 = _1734;
        _2303 = _1736;
        _2305 = _1738;
        _2307 = _2082;
        _2309 = _2084;
        _2311 = _2086;
    }
    float _4268 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4279 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4290 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4301 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _2329 = ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2301 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _504))) + ((_2307 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2303 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _504))) + ((_2309 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2331 = ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2305 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _504))) + ((_2311 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2332 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2339 = cbInstanceData._m0[_463 + 6u].w * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)));
    float _2344 = _423 / cbSceneParam._m0[86u].x;
    float _2345 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2359 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2361 = _2359.x;
    float _2362 = _2359.y;
    float _2363 = _2359.z;
    float _2364 = _2359.w;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2419 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2420 = _2419 / _345;
        float _2431 = _2420 * _396;
        float _2432 = _397 * _2420;
        float _2433 = (-0.0) - _2432;
        float _2434 = _2420 * _398;
        float _2436 = (cbSceneParam._m0[77u].w * _2433) / _2419;
        float _2437 = _2436 + cbSceneParam._m0[79u].w;
        float _2438 = cbSceneParam._m0[79u].w - _2432;
        float _2444 = sqrt(((_2431 * _2431) + (_2432 * _2432)) + (_2434 * _2434));
        float _2447 = (1.0 - (cbSceneParam._m0[77u].w / _2419)) * _2444;
        float _2452 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2454 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2631;
        if (abs((_2433 - _2436) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2631 = ((((_2437 > 0.0) ? exp2(_2452 * _2437) : (2.0 - exp2(_2454 * _2437))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2447;
        }
        else
        {
            float _2575 = 1.0 / cbSceneParam._m0[80u].x;
            float _2576 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : max(_2437, _2438));
            float _2577 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : min(_2437, _2438));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            _2631 = ((abs(_2444 / _2433) * cbSceneParam._m0[80u].y) * ((((_2586 - _2587) * 2.0) - ((exp2(_2452 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)))) - exp2(_2452 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0))))) * _2575)) - ((exp2(_2454 * _2586) - exp2(_2454 * _2587)) * _2575))) + (_2447 * cbSceneParam._m0[80u].z);
        }
        vec4 _2633 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, 1.0), 0.0);
        float _2642 = exp2((_2631 * (-1.44269502162933349609375)) * (1.0 - _2633.w));
        float _2643 = log2(_2642);
        float _2659 = log2(_2364);
        _2456 = (exp2(_2659 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].x)) * _2633.x) / cbSceneParam._m0[78u].x)) + _2361;
        _2458 = (exp2(_2659 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].y)) * _2633.y) / cbSceneParam._m0[78u].y)) + _2362;
        _2460 = (exp2(_2659 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].z)) * _2633.z) / cbSceneParam._m0[78u].z)) + _2363;
        _2462 = _2642 * _2364;
    }
    else
    {
        _2456 = _2361;
        _2458 = _2362;
        _2460 = _2363;
        _2462 = _2364;
    }
    bool _2669;
    vec4 _2472;
    vec4 _2494;
    float _2496;
    float _2500;
    float _2501;
    float _2502;
    float _2503;
    bool _2513;
    for (;;)
    {
        _2472 = cbMatDynParam._m0[0u];
        float _2474 = roundEven(_2472.y);
        bool _2475 = _2474 == 3.0;
        float _2476 = log2(_2462);
        float _2483 = exp2(_2476 * cbSceneParam._m0[78u].x) * _2332;
        float _2484 = exp2(_2476 * cbSceneParam._m0[78u].y) * _2333;
        float _2485 = exp2(_2476 * cbSceneParam._m0[78u].z) * _2334;
        float _2492 = _412 + (-0.5);
        _2494 = cbMtdParam._m0[1u];
        _2496 = _2494.y * _2492;
        float _2499 = (_2474 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2500 = _2499 * (_2475 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2456)));
        _2501 = _2499 * (_2475 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2458)));
        _2502 = _2499 * (_2475 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2460)));
        _2503 = _2492 * 0.999000012874603271484375;
        _2513 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2513)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2503) < 0.5)
            {
                _2669 = true;
                break;
            }
        }
        uint _2610 = _465 + uint(_2472.w);
        if ((cbInstanceData._m0[_2610].w < 1.0) && ((cbInstanceData._m0[_2610].w + _2503) < 0.5))
        {
            _2669 = true;
            break;
        }
        if ((_2496 + _288) < _2494.x)
        {
            _2669 = true;
            break;
        }
        _2669 = false;
        break;
    }
    float _2874;
    if (_2669)
    {
        discard_state = true;
        _2874 = 0.0;
    }
    else
    {
        _2874 = _2339;
    }
    SV_Target.x = _2500;
    SV_Target.y = _2501;
    SV_Target.z = _2502;
    SV_Target.w = _2874;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2339;
    discard_exit();
}


