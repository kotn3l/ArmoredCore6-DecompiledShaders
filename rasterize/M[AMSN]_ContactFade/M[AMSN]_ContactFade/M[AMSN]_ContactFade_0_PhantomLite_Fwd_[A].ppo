#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3513;
float _3514;
float _3515;
float _3516;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _254);
    float _265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _254);
    float _266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _254);
    vec4 _279 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _285 = _279.w;
    float _291 = cbMtdParam._m0[9u].x * _279.x;
    float _292 = cbMtdParam._m0[9u].y * _279.y;
    float _293 = cbMtdParam._m0[9u].z * _279.z;
    vec4 _305 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _307 = _305.x;
    bool _314 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _331 = ((_314 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _307)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _307))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3525 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _334 = 1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)));
    float _3536 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _343 = _285 - (((_335 * _335) * _285) * (3.0 - (_335 * 2.0)));
    vec4 _355 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _361 = cbMtdParam._m0[10u].x + _355.x;
    vec4 _373 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _377 = _373.z;
    float _380 = (_373.x * 2.0) + (-1.0);
    float _382 = (_373.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_380, _382), vec2(_380, _382));
    float _3547 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _388 = sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))));
    float _391 = fma(_388, _200 * NORMAL.x, fma(_382, _207 * TANGENT.x, (_193 * _186) * _380));
    float _394 = fma(_388, _200 * NORMAL.y, fma(_382, _207 * TANGENT.y, (_193 * _187) * _380));
    float _397 = fma(_388, _200 * NORMAL.z, fma(_382, _207 * TANGENT.z, (_193 * _188) * _380));
    float _401 = inversesqrt(dot(vec3(_391, _394, _397), vec3(_391, _394, _397)));
    float _402 = _401 * _391;
    float _403 = _401 * _394;
    float _404 = _401 * _397;
    float _3558 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _405 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _406 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _407 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _408 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _409 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _410 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _428 = inversesqrt(dot(vec3(_264, _265, _266), vec3(_264, _265, _266)));
    float _429 = _428 * _264;
    float _430 = _428 * _265;
    float _431 = _428 * _266;
    float _438 = abs(exp2(log2(dot(vec3(_402, _403, _404), vec3(_429, _430, _431))) * cbMatDynParam._m0[12u].x));
    float _439 = isnan(0.100000001490116119384765625) ? _438 : (isnan(_438) ? 0.100000001490116119384765625 : max(_438, 0.100000001490116119384765625));
    float _445 = ((isnan(0.699999988079071044921875) ? _439 : (isnan(_439) ? 0.699999988079071044921875 : min(_439, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _468 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3634 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3645 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _476 = dot(vec3(_402, _403, _404), vec3(0.0, -1.0, 0.0));
    float _3656 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _486 = (_479 * _407) * cbMatDynParam._m0[11u].x;
    float _488 = (_479 * _408) * cbMatDynParam._m0[11u].y;
    float _490 = (_479 * _409) * cbMatDynParam._m0[11u].z;
    float _500 = dot(vec3(_429, _430, _431), vec3(_402, _403, _404)) * 2.0;
    float _510 = dot(vec3((-0.0) - (_429 - (_500 * _402)), (-0.0) - (_430 - (_500 * _403)), (-0.0) - (_431 - (_500 * _404))), vec3(0.0, -1.0, 0.0));
    float _3667 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _517 = exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 4.0);
    float _532 = _314 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _581 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _572);
    float _582 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _572);
    float _583 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _572);
    float _587 = inversesqrt(dot(vec3(_581, _582, _583), vec3(_581, _582, _583)));
    float _588 = _581 * _587;
    float _589 = _582 * _587;
    float _590 = _583 * _587;
    vec4 _595 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _597 = _595.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _769 = sqrt(((_581 * _581) + (_582 * _582)) + (_583 * _583));
        float _775 = (cbMatDynParam._m0[5u].x * _769) + cbMatDynParam._m0[5u].y;
        float _3678 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _780 = (cbMatDynParam._m0[5u].z * _769) + cbMatDynParam._m0[5u].w;
        float _3689 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) - _776)) + _776) < ((_597 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_404, cbSceneParam._m0[5u].z, fma(_403, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _402));
    float _631 = fma(_404, cbSceneParam._m0[6u].z, fma(_403, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _402));
    float _634 = fma(_404, cbSceneParam._m0[7u].z, fma(_403, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _402));
    uint _647 = uint(roundEven(NORMAL.w)) * 13u;
    uint _649 = _647 + 9u;
    uint _650 = _649 + uint(cbMatDynParam._m0[0u].w);
    float _656 = ((cbMatDynParam._m0[9u].x * _407) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_650].x;
    float _657 = ((cbMatDynParam._m0[9u].y * _408) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_650].y;
    float _658 = ((cbMatDynParam._m0[9u].z * _409) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_650].z;
    float _3700 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _662 = 1.0 - _410;
    float _663 = _659 * _662;
    float _664 = _660 * _662;
    float _665 = _661 * _662;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _410;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _410;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _410;
    float _673 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _688 = _685.x * TEXCOORD.z;
    float _689 = dot(vec3(_402, _403, _404), vec3(_588, _589, _590));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _402) - _588;
    float _697 = (_692 * _403) - _589;
    float _698 = (_692 * _404) - _590;
    float _702 = abs(dot(vec3(_588, _589, _590), vec3(_402, _403, _404)));
    float _3733 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _704 = sqrt(_406);
    float _715 = exp2((_704 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _721 = (1.0 - _715) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _722 = _715 * _704;
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _818 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _822 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _847 = _750 + _402;
        float _848 = _754 + _403;
        float _849 = _758 + _404;
        float _859 = fma(_849, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847)) - _814;
        float _860 = fma(_849, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847)) - _818;
        float _861 = fma(_849, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847)) - _822;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_814 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_818 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[34u].z) + ((((((_822 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(_402, _403, _404), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3781 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_402, _403, _404), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3814 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_402, _403, _404), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3847 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1137 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1141 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1164 = _750 + _402;
        float _1165 = _754 + _403;
        float _1166 = _758 + _404;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_402, _403, _404), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3910 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_402, _403, _404), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3943 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_402, _403, _404), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3976 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1090;
        _1403 = _1090;
        _1404 = _1090;
        _1405 = _1090;
        _1406 = _1090;
        _1407 = _1090;
        _1408 = _1090;
        _1409 = _1090;
        _1410 = _1090;
        _1411 = _1090;
        _1412 = _1090;
        _1413 = _1090;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _696 * 0.5;
    float _1471 = _697 * 0.5;
    float _1472 = _698 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _406);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1602 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1605 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1633 = frontier_phi_17_15_ladder;
        }
        float _1840;
        if (_1602 > 0.0)
        {
            _1840 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1840 = frontier_phi_26_22_ladder;
        }
        float _2094;
        if (_1605 > 0.0)
        {
            _2094 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2094 = frontier_phi_38_33_ladder;
        }
        float _2096 = isnan(_1840) ? _1633 : (isnan(_1633) ? _1840 : min(_1633, _1840));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1599) + _1588;
        float _2102 = (_2097 * _1602) + _1592;
        float _2103 = (_2097 * _1605) + _1596;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_16_38_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_16_38_ladder_2;
        _1623 = frontier_phi_16_38_ladder_1;
        _1625 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1539);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _406);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1701 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1704 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1845;
        if (_1698 > 0.0)
        {
            _1845 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1845 = frontier_phi_28_24_ladder;
        }
        float _2121;
        if (_1701 > 0.0)
        {
            _2121 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2121 = frontier_phi_40_35_ladder;
        }
        float _2334;
        if (_1704 > 0.0)
        {
            _2334 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2334 = frontier_phi_49_46_ladder;
        }
        float _2336 = isnan(_2121) ? _1845 : (isnan(_1845) ? _2121 : min(_1845, _2121));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1698) + _1687;
        float _2342 = (_2337 * _1701) + _1691;
        float _2343 = (_2337 * _1704) + _1695;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_25_49_ladder = _2568.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2568.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2568.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_25_49_ladder_2;
        _1725 = frontier_phi_25_49_ladder_1;
        _1727 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1630);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_721 * _673) + _722) * _688) * ((cbModelParam._m0[1u].w * (_1723 - _1621)) + _1621);
    float _1742 = (((_721 * _675) + _722) * _688) * ((cbModelParam._m0[1u].w * (_1725 - _1623)) + _1623);
    float _1744 = (((_721 * _676) + _722) * _688) * ((cbModelParam._m0[1u].w * (_1727 - _1625)) + _1625);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_647 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _688 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1799 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1803 = _1765 | 1u;
    float _1814 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_402, _403, _404));
    float _1817 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_402, _403, _404));
    float _4112 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _4123 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1822 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1824 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1831 = ((cbLight._m0[_1782].x * _1788) * _1824) + ((cbLight._m0[_1792].x * _1799) * _1822);
    float _1832 = ((_1788 * cbLight._m0[_1782].y) * _1824) + ((_1799 * cbLight._m0[_1792].y) * _1822);
    float _1833 = ((_1788 * cbLight._m0[_1782].z) * _1824) + ((_1799 * cbLight._m0[_1792].z) * _1822);
    uvec4 _1837 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1839 = _1837.x == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1839)
    {
        _1850 = _1831;
        _1852 = _1832;
        _1854 = _1833;
    }
    else
    {
        uint _1858 = _1765 + 6u;
        float _1874 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _4134 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1877 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1850 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1831;
        _1852 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1832;
        _1854 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1833;
    }
    bool _1857 = _1837.y == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1857)
    {
        _1895 = _1850;
        _1897 = _1852;
        _1899 = _1854;
    }
    else
    {
        uint _2065 = _1765 + 7u;
        float _2081 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4150 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2084 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1895 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _1850;
        _1897 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _1852;
        _1899 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _1854;
    }
    uint _1902 = _1765 + 8u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _406) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1765].x + _588;
    float _1918 = cbLight._m0[_1765].y + _589;
    float _1919 = cbLight._m0[_1765].z + _590;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1765].xyz));
    float _4166 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _1931 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _1932 = dot(vec3(_402, _403, _404), vec3(_1924, _1925, _1926));
    float _4188 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1924, _1925, _1926));
    float _4199 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1916 * _1916;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1952 = exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0);
    float _1953 = 0.959999978542327880859375 - _670;
    float _1955 = 0.959999978542327880859375 - _671;
    float _1956 = 0.959999978542327880859375 - _672;
    float _1963 = 1.0 - _1916;
    float _1974 = (0.5 / (((_1931 * ((_1930 * _1963) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _1963) + _1916) * _1930))) * _1930;
    float _4210 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    uint _1987 = _1765 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _406) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1803].x + _588;
    float _2001 = cbLight._m0[_1803].y + _589;
    float _2002 = cbLight._m0[_1803].z + _590;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1803].xyz));
    float _4221 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2014 = dot(vec3(_402, _403, _404), vec3(_2007, _2008, _2009));
    float _4232 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2007, _2008, _2009));
    float _4243 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2033 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
    float _2040 = 1.0 - _1999;
    float _2050 = (0.5 / (((_1931 * ((_2013 * _2040) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2040) + _1999) * _2013))) * _2013;
    float _4254 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2062 = (((((_2033 * _1953) + _673) * cbLight._m0[_1987].x) * _2052) * _1788) + (((((_1952 * _1953) + _673) * cbLight._m0[_1902].x) * _1976) * _1799);
    float _2063 = (((((_2033 * _1955) + _675) * cbLight._m0[_1987].y) * _2052) * _1788) + (((((_1952 * _1955) + _675) * cbLight._m0[_1902].y) * _1976) * _1799);
    float _2064 = (((((_2033 * _1956) + _676) * cbLight._m0[_1987].z) * _2052) * _1788) + (((((_1952 * _1956) + _676) * cbLight._m0[_1902].z) * _1976) * _1799);
    float _2126;
    float _2128;
    float _2130;
    if (_1839)
    {
        _2126 = _2062;
        _2128 = _2063;
        _2130 = _2064;
    }
    else
    {
        uint _2132 = _1765 + 2u;
        uint _2136 = _1765 + 10u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _406) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _588;
        float _2153 = cbLight._m0[_2132].y + _589;
        float _2154 = cbLight._m0[_2132].z + _590;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2132].xyz));
        float _4265 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2166 = dot(vec3(_402, _403, _404), vec3(_2159, _2160, _2161));
        float _4276 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4287 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
        float _2192 = 1.0 - _2151;
        float _2202 = (0.5 / (((_1931 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2192) + _2151) * _2165))) * _2165;
        float _4298 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2126 = (((((_2185 * _1953) + _673) * cbLight._m0[_2136].x) * _2204) * _2205) + _2062;
        _2128 = (((((_2185 * _1955) + _675) * cbLight._m0[_2136].y) * _2204) * _2205) + _2063;
        _2130 = (((((_2185 * _1956) + _676) * cbLight._m0[_2136].z) * _2204) * _2205) + _2064;
    }
    float _2240;
    float _2242;
    float _2244;
    if (_1857)
    {
        _2240 = _2126;
        _2242 = _2128;
        _2244 = _2130;
    }
    else
    {
        uint _2251 = _1765 + 3u;
        uint _2255 = _1765 + 11u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _406) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _588;
        float _2272 = cbLight._m0[_2251].y + _589;
        float _2273 = cbLight._m0[_2251].z + _590;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2251].xyz));
        float _4314 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2285 = dot(vec3(_402, _403, _404), vec3(_2278, _2279, _2280));
        float _4325 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4336 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0);
        float _2311 = 1.0 - _2270;
        float _2321 = (0.5 / (((_1931 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2311) + _2270) * _2284))) * _2284;
        float _4347 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2240 = (((((_2304 * _1953) + _673) * cbLight._m0[_2255].x) * _2323) * _2324) + _2126;
        _2242 = (((((_2304 * _1955) + _675) * cbLight._m0[_2255].y) * _2323) * _2324) + _2128;
        _2244 = (((((_2304 * _1956) + _676) * cbLight._m0[_2255].z) * _2323) * _2324) + _2130;
    }
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_1763.y == 0u)
    {
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2399;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2399;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2399;
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.x;
        uint _2426 = uint((float(_2414.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2415))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2415)));
        float _2436 = (log2(_2402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2437 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        uint _2440 = uint(isnan(14.0) ? _2437 : (isnan(_2437) ? 14.0 : min(_2437, 14.0)));
        uvec4 _2445 = texelFetch(g_lightClusterGridBuffer, int(((_2440 << 2u) + (_2426 << 6u)) >> 2u));
        uint _2446 = _2445.x;
        uint _2447 = _2414.z;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((((1u << ((_2447 >> 4u) & 15u)) + 4294967295u) & _2446) == 0u) || ((_2447 & 240u) == 0u))
        {
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
        }
        else
        {
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2750)
                {
                    frontier_phi_66_pred = _2734;
                    frontier_phi_66_pred_1 = _2739;
                    frontier_phi_66_pred_2 = _2738;
                    frontier_phi_66_pred_3 = _2737;
                    frontier_phi_66_pred_4 = _2736;
                    frontier_phi_66_pred_5 = _2735;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2749;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2740 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        float _2945 = _2905.x - _2400;
                        float _2946 = _2905.y - _2401;
                        float _2947 = _2905.z - _2402;
                        float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                        float _2951 = inversesqrt(_2948);
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2955 = dot(vec3(_628, _631, _634), vec3(_2952, _2953, _2954));
                        float _2960 = 1.0 - (_2948 * _2905.w);
                        float _4373 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _2962 = sqrt(_2948) * _2924.w;
                        float _2965 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2955) + _2966;
                        float _2972 = _2962 * _2962;
                        float _2975 = ((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2961) / ((_2972 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _2400;
                        float _2980 = (-0.0) - _2401;
                        float _2981 = (-0.0) - _2402;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2996 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                        float _2997 = 1.0 - _704;
                        float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                        float _3005 = _3004 * _3004;
                        float _3006 = _3005 * _3005;
                        float _3007 = _2986 + _2952;
                        float _3008 = _2987 + _2953;
                        float _3009 = _2988 + _2954;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3017 = dot(vec3(_628, _631, _634), vec3(_2986, _2987, _2988));
                        float _4389 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3021 = dot(vec3(_628, _631, _634), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                        float _4400 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                        float _3029 = _2965 * _3005;
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _2955) + _3030;
                        float _4411 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3035 = 1.0 - _3005;
                        float _3045 = (0.5 / (((_3034 * ((_3020 * _3035) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3005) * _3020))) * _3034;
                        float _4422 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3056 = (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3028 * _3028) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125))) * _2961;
                        _2809 = (_2975 * _2924.x) + _2882;
                        _2810 = (_2975 * _2924.y) + _2883;
                        _2811 = (_2975 * _2924.z) + _2884;
                        _2806 = (_3056 * _2941.x) + _2879;
                        _2807 = (_3056 * _2941.y) + _2880;
                        _2808 = (_3056 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_66_pred = _2806;
                    frontier_phi_66_pred_1 = _2811;
                    frontier_phi_66_pred_2 = _2810;
                    frontier_phi_66_pred_3 = _2809;
                    frontier_phi_66_pred_4 = _2808;
                    frontier_phi_66_pred_5 = _2807;
                }
                _2574 = frontier_phi_66_pred;
                _2584 = frontier_phi_66_pred_1;
                _2582 = frontier_phi_66_pred_2;
                _2580 = frontier_phi_66_pred_3;
                _2578 = frontier_phi_66_pred_4;
                _2576 = frontier_phi_66_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2574;
                    _2735 = _2576;
                    _2736 = _2578;
                    _2737 = _2580;
                    _2738 = _2582;
                    _2739 = _2584;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
        }
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.z;
        uint _2590 = (_2588 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2590) & _2446) == 0u)
        {
            _2702 = _2573;
            _2704 = _2575;
            _2706 = _2577;
            _2708 = _2579;
            _2710 = _2581;
            _2712 = _2583;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
            float _2728 = _2727 * _2400;
            float _2729 = _2727 * _2401;
            float _2730 = _2727 * _2402;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2590 < ((_2588 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2862 = _2573;
                float _2863 = _2575;
                float _2864 = _2577;
                float _2865 = _2579;
                float _2866 = _2581;
                float _2867 = _2583;
                uint _2868 = _2590;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2878)
                    {
                        frontier_phi_77_pred = _2867;
                        frontier_phi_77_pred_1 = _2866;
                        frontier_phi_77_pred_2 = _2865;
                        frontier_phi_77_pred_3 = _2864;
                        frontier_phi_77_pred_4 = _2863;
                        frontier_phi_77_pred_5 = _2862;
                    }
                    else
                    {
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3083 = _2862;
                        float _3084 = _2863;
                        float _3085 = _2864;
                        float _3086 = _2865;
                        float _3087 = _2866;
                        float _3088 = _2867;
                        uint _3089 = _2877;
                        uint _3090;
                        vec4 _3115;
                        float _3116;
                        vec4 _3131;
                        vec3 _3143;
                        vec4 _3159;
                        vec4 _3175;
                        float _3222;
                        bool _3223;
                        for (;;)
                        {
                            uint _3100 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3089));
                            _3090 = (_3089 + 4294967295u) & _3089;
                            uint _3102 = _3100 * 40u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3116 = _3115.w;
                            uint _3118 = (_3100 * 40u) + 4u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3100 * 40u) + 8u;
                            _3143 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x));
                            uint _3146 = (_3100 * 40u) + 16u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3162 = (_3100 * 40u) + 20u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3178 = (_3100 * 40u) + 24u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3197 = (_3100 * 40u) + 28u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3222 = fma(_2402, _3210.z, fma(_2401, _3210.y, _3210.x * _2400)) + _3210.w;
                            _3223 = !((fma(_2402, _3191.z, fma(_2401, _3191.y, _3191.x * _2400)) + _3191.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3223)
                            {
                                float _3250 = _3115.x - _2400;
                                float _3251 = _3115.y - _2401;
                                float _3252 = _3115.z - _2402;
                                float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                                float _3256 = inversesqrt(_3253);
                                float _3257 = _3256 * _3250;
                                float _3258 = _3256 * _3251;
                                float _3259 = _3256 * _3252;
                                float _3263 = 1.0 - (_3253 / (_3116 * _3116));
                                float _4433 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3268 = sqrt(_3253) * _3131.w;
                                float _3270 = 1.39999997615814208984375 / (_3268 + 1.39999997615814208984375);
                                float _3271 = _3270 * _3270;
                                float _3274 = ((1.0 - _3271) * dot(vec3(_3257, _3258, _3259), vec3(_628, _631, _634))) + _3271;
                                float _3277 = _3268 * _3268;
                                float _3281 = (fma(_2402, _3159.z, fma(_2401, _3159.y, _3159.x * _2400)) + _3159.w) / _3222;
                                float _3282 = (fma(_2402, _3175.z, fma(_2401, _3175.y, _3175.x * _2400)) + _3175.w) / _3222;
                                float _3286 = 1.0 - dot(vec2(_3281, _3282), vec2(_3281, _3282));
                                float _4449 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3288 = _3287 * (((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3264) / ((_3277 * 0.699999988079071044921875) + 1.0));
                                float _3300 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                                float _3301 = 1.0 - _704;
                                float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                                float _3309 = _3308 * _3308;
                                float _3310 = _3309 * _3309;
                                float _3311 = _3257 - _2728;
                                float _3312 = _3258 - _2729;
                                float _3313 = _3259 - _2730;
                                float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                                float _3321 = dot(vec3(_628, _631, _634), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4460 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3325 = dot(vec3(_628, _631, _634), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                                float _4471 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                                float _3333 = _3270 * _3309;
                                float _3334 = _3333 * _3333;
                                float _3340 = ((1.0 - _3334) * dot(vec3(_628, _631, _634), vec3(_3257, _3258, _3259))) + _3334;
                                float _4482 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3342 = 1.0 - _3309;
                                float _3352 = (0.5 / (((_3341 * ((_3324 * _3342) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3341 * _3342) + _3309) * _3324))) * _3341;
                                float _4493 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3362 = (_3287 * _3264) * (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3332 * _3332) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3288 * _3131.y;
                                frontier_phi_83_pred_1 = _3288 * _3131.x;
                                frontier_phi_83_pred_2 = _3362 * _3143.z;
                                frontier_phi_83_pred_3 = _3362 * _3143.y;
                                frontier_phi_83_pred_4 = _3362 * _3143.x;
                                frontier_phi_83_pred_5 = _3288 * _3131.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3370 = frontier_phi_83_pred;
                            _3369 = frontier_phi_83_pred_1;
                            _3368 = frontier_phi_83_pred_2;
                            _3367 = frontier_phi_83_pred_3;
                            _3366 = frontier_phi_83_pred_4;
                            _3371 = frontier_phi_83_pred_5;
                            _3073 = _3369 + _3086;
                            _3074 = _3370 + _3087;
                            _3075 = _3371 + _3088;
                            _3070 = _3366 + _3083;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            if (_3090 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3090;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3075;
                        frontier_phi_77_pred_1 = _3074;
                        frontier_phi_77_pred_2 = _3073;
                        frontier_phi_77_pred_3 = _3072;
                        frontier_phi_77_pred_4 = _3071;
                        frontier_phi_77_pred_5 = _3070;
                    }
                    _2713 = frontier_phi_77_pred;
                    _2711 = frontier_phi_77_pred_1;
                    _2709 = frontier_phi_77_pred_2;
                    _2707 = frontier_phi_77_pred_3;
                    _2705 = frontier_phi_77_pred_4;
                    _2703 = frontier_phi_77_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2703;
                        _2863 = _2705;
                        _2864 = _2707;
                        _2865 = _2709;
                        _2866 = _2711;
                        _2867 = _2713;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2707;
                frontier_phi_58_59_ladder_1 = _2713;
                frontier_phi_58_59_ladder_2 = _2711;
                frontier_phi_58_59_ladder_3 = _2709;
                frontier_phi_58_59_ladder_4 = _2705;
                frontier_phi_58_59_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_58_59_ladder = _2577;
                frontier_phi_58_59_ladder_1 = _2583;
                frontier_phi_58_59_ladder_2 = _2581;
                frontier_phi_58_59_ladder_3 = _2579;
                frontier_phi_58_59_ladder_4 = _2575;
                frontier_phi_58_59_ladder_5 = _2573;
            }
            _2702 = frontier_phi_58_59_ladder_5;
            _2704 = frontier_phi_58_59_ladder_4;
            _2706 = frontier_phi_58_59_ladder;
            _2708 = frontier_phi_58_59_ladder_3;
            _2710 = frontier_phi_58_59_ladder_2;
            _2712 = frontier_phi_58_59_ladder_1;
        }
        float _2717 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2459 = (_2717 * _2708) + _1895;
        _2461 = (_2717 * _2710) + _1897;
        _2463 = (_2717 * _2712) + _1899;
        _2465 = ((_2702 * _673) * _2717) + _2240;
        _2467 = ((_2704 * _675) * _2717) + _2242;
        _2469 = ((_2706 * _676) * _2717) + _2244;
    }
    else
    {
        _2459 = _1895;
        _2461 = _1897;
        _2463 = _1899;
        _2465 = _2240;
        _2467 = _2242;
        _2469 = _2244;
    }
    uint _2475 = _649 + uint(cbMatDynParam._m0[0u].w);
    float _2481 = cbInstanceData._m0[_2475].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _445) + cbMatDynParam._m0[7u].x) + (((_486 - (_486 * _410)) + (cbMatDynParam._m0[11u].x * _517)) * cbMatDynParam._m0[9u].x));
    float _2482 = cbInstanceData._m0[_2475].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _445) + cbMatDynParam._m0[7u].y) + (((_488 - (_488 * _410)) + (cbMatDynParam._m0[11u].y * _517)) * cbMatDynParam._m0[9u].y));
    float _2483 = cbInstanceData._m0[_2475].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _445) + cbMatDynParam._m0[7u].z) + (((_490 - (_490 * _410)) + (cbMatDynParam._m0[11u].z * _517)) * cbMatDynParam._m0[9u].z));
    float _4509 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4520 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4531 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4542 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _2501 = (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2459 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _688))) + ((_2465 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + _2481;
    float _2503 = (_2482 + ((_2467 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2461 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _688)));
    float _2505 = (_2483 + ((_2469 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2463 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _688)));
    float _2506 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2507 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2508 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2513 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) - _472) * _445) + _472));
    float _2518 = cbInstanceData._m0[_647 + 6u].w * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)));
    float _2523 = _608 / cbSceneParam._m0[86u].x;
    float _2524 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2538 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2523, _2524, (log2((isnan(cbSceneParam._m0[77u].w) ? _532 : (isnan(_532) ? cbSceneParam._m0[77u].w : min(_532, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2540 = _2538.x;
    float _2541 = _2538.y;
    float _2542 = _2538.z;
    float _2543 = _2538.w;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_532 > cbSceneParam._m0[78u].w)
    {
        float _2598 = isnan(_532) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _532 : min(cbSceneParam._m0[80u].w, _532));
        float _2599 = _2598 / _532;
        float _2610 = _2599 * _581;
        float _2611 = _582 * _2599;
        float _2612 = (-0.0) - _2611;
        float _2613 = _2599 * _583;
        float _2615 = (cbSceneParam._m0[77u].w * _2612) / _2598;
        float _2616 = _2615 + cbSceneParam._m0[79u].w;
        float _2617 = cbSceneParam._m0[79u].w - _2611;
        float _2623 = sqrt(((_2610 * _2610) + (_2611 * _2611)) + (_2613 * _2613));
        float _2626 = (1.0 - (cbSceneParam._m0[77u].w / _2598)) * _2623;
        float _2631 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2633 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2819;
        if (abs((_2612 - _2615) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2819 = ((((_2616 > 0.0) ? exp2(_2631 * _2616) : (2.0 - exp2(_2633 * _2616))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2626;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : max(_2616, _2617));
            float _2765 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : min(_2616, _2617));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2819 = ((abs(_2623 / _2612) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2631 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2631 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2633 * _2774) - exp2(_2633 * _2775)) * _2763))) + (_2626 * cbSceneParam._m0[80u].z);
        }
        vec4 _2821 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2523, _2524, 1.0), 0.0);
        float _2830 = exp2((_2819 * (-1.44269502162933349609375)) * (1.0 - _2821.w));
        float _2831 = log2(_2830);
        float _2847 = log2(_2543);
        _2635 = (exp2(_2847 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].x)) * _2821.x) / cbSceneParam._m0[78u].x)) + _2540;
        _2637 = (exp2(_2847 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].y)) * _2821.y) / cbSceneParam._m0[78u].y)) + _2541;
        _2639 = (exp2(_2847 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].z)) * _2821.z) / cbSceneParam._m0[78u].z)) + _2542;
        _2641 = _2830 * _2543;
    }
    else
    {
        _2635 = _2540;
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
    }
    bool _2857;
    vec4 _2651;
    vec4 _2673;
    float _2675;
    float _2679;
    float _2680;
    float _2681;
    float _2684;
    float _2687;
    float _2690;
    float _2691;
    bool _2701;
    for (;;)
    {
        _2651 = cbMatDynParam._m0[0u];
        float _2653 = roundEven(_2651.y);
        bool _2654 = _2653 == 3.0;
        float _2655 = log2(_2641);
        float _2659 = exp2(_2655 * cbSceneParam._m0[78u].x);
        float _2660 = exp2(_2655 * cbSceneParam._m0[78u].y);
        float _2661 = exp2(_2655 * cbSceneParam._m0[78u].z);
        float _2662 = _2659 * _2506;
        float _2663 = _2660 * _2507;
        float _2664 = _2661 * _2508;
        float _2671 = _597 + (-0.5);
        _2673 = cbMtdParam._m0[1u];
        _2675 = _2673.y * _2671;
        float _2678 = (_2653 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2679 = _2678 * (_2654 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2635)));
        _2680 = _2678 * (_2654 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2637)));
        _2681 = _2678 * (_2654 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2639)));
        _2684 = ((_2513 * _2481) * _2659) * _2678;
        _2687 = ((_2513 * _2482) * _2660) * _2678;
        _2690 = ((_2513 * _2483) * _2661) * _2678;
        _2691 = _2671 * 0.999000012874603271484375;
        _2701 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2701)
        {
            if ((cbInstanceData._m0[_647 + 7u].x + _2691) < 0.5)
            {
                _2857 = true;
                break;
            }
        }
        uint _2798 = _649 + uint(_2651.w);
        if ((cbInstanceData._m0[_2798].w < 1.0) && ((cbInstanceData._m0[_2798].w + _2691) < 0.5))
        {
            _2857 = true;
            break;
        }
        if ((_2675 + _343) < _2673.x)
        {
            _2857 = true;
            break;
        }
        _2857 = false;
        break;
    }
    float _3061;
    if (_2857)
    {
        discard_state = true;
        _3061 = 0.0;
    }
    else
    {
        _3061 = _2518;
    }
    SV_Target.x = _2679;
    SV_Target.y = _2680;
    SV_Target.z = _2681;
    SV_Target.w = _3061;
    SV_Target_1.x = _2684;
    SV_Target_1.y = _2687;
    SV_Target_1.z = _2690;
    SV_Target_1.w = _2518;
    discard_exit();
}


