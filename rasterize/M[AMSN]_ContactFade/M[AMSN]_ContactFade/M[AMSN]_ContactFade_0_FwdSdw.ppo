#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _883;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.w;
    float _237 = cbMtdParam._m0[9u].x * _224.x;
    float _238 = cbMtdParam._m0[9u].y * _224.y;
    float _239 = cbMtdParam._m0[9u].z * _224.z;
    vec4 _252 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _254 = _252.x;
    bool _261 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _278 = ((_261 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _254)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _254))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3507 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _281 = 1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)));
    float _3518 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _282 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _290 = _230 - (((_282 * _282) * _230) * (3.0 - (_282 * 2.0)));
    vec4 _302 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = cbMtdParam._m0[10u].x + _302.x;
    vec4 _320 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _324 = _320.z;
    float _327 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3529 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))));
    float _338 = fma(_335, _200 * NORMAL.x, fma(_329, _207 * TANGENT.x, (_193 * _186) * _327));
    float _341 = fma(_335, _200 * NORMAL.y, fma(_329, _207 * TANGENT.y, (_193 * _187) * _327));
    float _344 = fma(_335, _200 * NORMAL.z, fma(_329, _207 * TANGENT.z, (_193 * _188) * _327));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _3540 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _352 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3573 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3584 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3595 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _362 = _261 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _449 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _452 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _455 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _468 = uint(roundEven(NORMAL.w)) * 13u;
    uint _471 = (_468 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_471].z;
    float _3606 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _483 = 1.0 - _357;
    float _484 = _480 * _483;
    float _485 = _481 * _483;
    float _486 = _482 * _483;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _357;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _357;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _357;
    float _494 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    vec4 _506 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _509 = _506.x * TEXCOORD.z;
    float _510 = dot(vec3(_349, _350, _351), vec3(_420, _421, _422));
    float _513 = _510 * 2.0;
    float _517 = (_513 * _349) - _420;
    float _518 = (_513 * _350) - _421;
    float _519 = (_513 * _351) - _422;
    float _523 = abs(dot(vec3(_420, _421, _422), vec3(_349, _350, _351)));
    float _3639 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _525 = sqrt(_353);
    float _537 = exp2((_525 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_525 * 3.0));
    float _543 = (1.0 - _537) * ((_525 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _525;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _611 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _615 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _640 = _572 + _349;
        float _641 = _576 + _350;
        float _642 = _580 + _351;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_349, _350, _351), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3687 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_349, _350, _351), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3720 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_349, _350, _351), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3753 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _927 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _931 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _954 = _572 + _349;
        float _955 = _576 + _350;
        float _956 = _580 + _351;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_349, _350, _351), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3816 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_349, _350, _351), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3849 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_349, _350, _351), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3882 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _883;
        _1193 = _883;
        _1194 = _883;
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _517 * 0.5;
    float _1261 = _518 * 0.5;
    float _1262 = _519 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _886, _889, _892));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_884, _887, _890, _893));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_885, _888, _891, _894));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1328 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1329 = isnan(_1328) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1328 : min(cbModelParam._m0[25u].z, _1328));
    float _1411;
    float _1413;
    float _1415;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1378 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1382 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1386 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1389 = fma(_519, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517));
        float _1392 = fma(_519, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517));
        float _1395 = fma(_519, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517));
        float _1423;
        if (_1389 > 0.0)
        {
            _1423 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1423 = frontier_phi_14_12_ladder;
        }
        float _1599;
        if (_1392 > 0.0)
        {
            _1599 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1599 = frontier_phi_23_19_ladder;
        }
        float _1895;
        if (_1395 > 0.0)
        {
            _1895 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1895 = frontier_phi_35_30_ladder;
        }
        float _1897 = isnan(_1599) ? _1423 : (isnan(_1423) ? _1599 : min(_1423, _1599));
        float _1898 = isnan(_1895) ? _1897 : (isnan(_1897) ? _1895 : min(_1897, _1895));
        float _1902 = (_1898 * _1389) + _1378;
        float _1903 = (_1898 * _1392) + _1382;
        float _1904 = (_1898 * _1395) + _1386;
        float _1905 = _1898 * 9.9999997473787516355514526367188e-05;
        float _1907 = (-1.0) - _1905;
        float _1909 = _1905 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1904 > _1909) || ((_1904 < _1907) || ((_1903 > _1909) || ((_1903 < _1907) || ((_1902 < _1907) || (_1902 > _1909))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1904, cbModelParam._m0[9u].z, fma(_1903, cbModelParam._m0[9u].y, _1902 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1904, cbModelParam._m0[10u].z, fma(_1903, cbModelParam._m0[10u].y, _1902 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1904, cbModelParam._m0[11u].z, fma(_1903, cbModelParam._m0[11u].y, _1902 * cbModelParam._m0[11u].x))), _1329);
            frontier_phi_13_35_ladder = _2049.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2049.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2049.x * cbModelParam._m0[1u].y;
        }
        _1411 = frontier_phi_13_35_ladder_2;
        _1413 = frontier_phi_13_35_ladder_1;
        _1415 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_517, _518, _519), _1329);
        _1411 = _1399.x * cbModelParam._m0[1u].y;
        _1413 = _1399.y * cbModelParam._m0[1u].y;
        _1415 = _1399.z * cbModelParam._m0[1u].y;
    }
    float _1419 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1419 : min(cbModelParam._m0[25u].w, _1419));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1477 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1481 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1485 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1488 = fma(_519, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517));
        float _1491 = fma(_519, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517));
        float _1494 = fma(_519, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517));
        float _1604;
        if (_1488 > 0.0)
        {
            _1604 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1604 = frontier_phi_25_21_ladder;
        }
        float _1922;
        if (_1491 > 0.0)
        {
            _1922 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1922 = frontier_phi_37_32_ladder;
        }
        float _2260;
        if (_1494 > 0.0)
        {
            _2260 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2260 = frontier_phi_47_44_ladder;
        }
        float _2262 = isnan(_1922) ? _1604 : (isnan(_1604) ? _1922 : min(_1604, _1922));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1488) + _1477;
        float _2268 = (_2263 * _1491) + _1481;
        float _2269 = (_2263 * _1494) + _1485;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_22_47_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1513 = frontier_phi_22_47_ladder_2;
        _1515 = frontier_phi_22_47_ladder_1;
        _1517 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_517, _518, _519), _1420);
        _1513 = _1497.x * cbModelParam._m0[1u].z;
        _1515 = _1497.y * cbModelParam._m0[1u].z;
        _1517 = _1497.z * cbModelParam._m0[1u].z;
    }
    float _1530 = (((_543 * _494) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1532 = (((_543 * _496) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1534 = (((_543 * _497) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1537 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1530 * cbSceneParam._m0[91u].x));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1591 = _1578 / _1590;
    float _1592 = _1582 / _1590;
    float _1593 = _1586 / _1590;
    float _1740;
    float _1741;
    float _1742;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1620 = ((uint(_1593 > cbSceneParam._m0[59u].y) + uint(_1593 > cbSceneParam._m0[59u].x)) + uint(_1593 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1621 = _1620 + 43u;
        uint _1629 = _1620 + 44u;
        uint _1637 = _1620 + 45u;
        uint _1645 = _1620 + 46u;
        float _1656 = fma(_1590, cbSceneParam._m0[_1621].w, fma(_1586, cbSceneParam._m0[_1621].z, fma(_1582, cbSceneParam._m0[_1621].y, _1578 * cbSceneParam._m0[_1621].x)));
        float _1660 = fma(_1590, cbSceneParam._m0[_1629].w, fma(_1586, cbSceneParam._m0[_1629].z, fma(_1582, cbSceneParam._m0[_1629].y, _1578 * cbSceneParam._m0[_1629].x)));
        float _1668 = fma(_1590, cbSceneParam._m0[_1645].w, fma(_1586, cbSceneParam._m0[_1645].z, fma(_1582, cbSceneParam._m0[_1645].y, _1578 * cbSceneParam._m0[_1645].x)));
        float _1673 = cbSceneParam._m0[33u].z * _1668;
        float _1675 = cbSceneParam._m0[33u].w * _1668;
        float _1678 = fma(_1590, cbSceneParam._m0[_1637].w, fma(_1586, cbSceneParam._m0[_1637].z, fma(_1582, cbSceneParam._m0[_1637].y, _1578 * cbSceneParam._m0[_1637].x))) / _1668;
        float _1726 = (cbSceneParam._m0[33u].x - sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593))) * cbSceneParam._m0[33u].y;
        float _4008 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1733 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 + _1656) / _1668, (_1675 + _1660) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 + _1656) / _1668, (_1660 - _1673) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 - _1673) / _1668, (_1660 - _1675) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 - _1675) / _1668, (_1673 + _1660) / _1668), _1678), 0.0)).x), vec4(0.25)));
        _1740 = 1.0 - (_1733 * cbSceneParam._m0[34u].x);
        _1741 = 1.0 - (_1733 * cbSceneParam._m0[34u].y);
        _1742 = 1.0 - (_1733 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1740 = 1.0;
        _1741 = 1.0;
        _1742 = 1.0;
    }
    float _1806;
    float _1808;
    float _1810;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1794 = fma(_1590, cbSceneParam._m0[63u].w, fma(_1586, cbSceneParam._m0[63u].z, fma(_1582, cbSceneParam._m0[63u].y, _1578 * cbSceneParam._m0[63u].x)));
        float _1795 = fma(_1590, cbSceneParam._m0[60u].w, fma(_1586, cbSceneParam._m0[60u].z, fma(_1582, cbSceneParam._m0[60u].y, _1578 * cbSceneParam._m0[60u].x))) / _1794;
        float _1796 = fma(_1590, cbSceneParam._m0[61u].w, fma(_1586, cbSceneParam._m0[61u].z, fma(_1582, cbSceneParam._m0[61u].y, _1578 * cbSceneParam._m0[61u].x))) / _1794;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1795 >= cbSceneParam._m0[64u].x) && (_1796 >= cbSceneParam._m0[64u].y)) && (_1795 <= cbSceneParam._m0[64u].z)) && (_1796 <= cbSceneParam._m0[64u].w))
        {
            float _1935 = fma(_1590, cbSceneParam._m0[62u].w, fma(_1586, cbSceneParam._m0[62u].z, fma(_1582, cbSceneParam._m0[62u].y, _1578 * cbSceneParam._m0[62u].x))) / _1794;
            float _1939 = isnan(cbSceneParam._m0[41u].w) ? _1935 : (isnan(_1935) ? cbSceneParam._m0[41u].w : max(_1935, cbSceneParam._m0[41u].w));
            float _1982 = (cbSceneParam._m0[33u].x - sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593))) * cbSceneParam._m0[33u].y;
            float _4024 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
            float _1989 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1795, cbSceneParam._m0[33u].w + _1796), _1939), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1795, _1796 - cbSceneParam._m0[33u].z), _1939), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1795 - cbSceneParam._m0[33u].z, _1796 - cbSceneParam._m0[33u].w), _1939), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1795 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1796), _1939), 0.0)).x), vec4(0.25)));
            float _1993 = 1.0 - (_1989 * cbSceneParam._m0[34u].x);
            float _1994 = 1.0 - (_1989 * cbSceneParam._m0[34u].y);
            float _1995 = 1.0 - (_1989 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1995) ? _1742 : (isnan(_1742) ? _1995 : min(_1742, _1995));
            frontier_phi_34_33_ladder_1 = isnan(_1994) ? _1741 : (isnan(_1741) ? _1994 : min(_1741, _1994));
            frontier_phi_34_33_ladder_2 = isnan(_1993) ? _1740 : (isnan(_1740) ? _1993 : min(_1740, _1993));
        }
        else
        {
            frontier_phi_34_33_ladder = _1742;
            frontier_phi_34_33_ladder_1 = _1741;
            frontier_phi_34_33_ladder_2 = _1740;
        }
        _1806 = frontier_phi_34_33_ladder_2;
        _1808 = frontier_phi_34_33_ladder_1;
        _1810 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1806 = _1740;
        _1808 = _1741;
        _1810 = _1742;
    }
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_468 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1825 = _509 + (-1.0);
    float _1830 = (cbLight._m0[_1818].x * _1825) + 1.0;
    float _1831 = (cbLight._m0[_1818].y * _1825) + 1.0;
    float _1832 = (cbLight._m0[_1818].z * _1825) + 1.0;
    float _1833 = (cbLight._m0[_1818].w * _1825) + 1.0;
    uint _1834 = _1817 + 5u;
    float _1840 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1844 = _1817 + 4u;
    float _1854 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1858 = _1817 | 1u;
    float _1869 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_349, _350, _351));
    float _1872 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_349, _350, _351));
    float _4060 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _4071 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1877 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1879 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1886 = ((cbLight._m0[_1834].x * _1840) * _1879) + (((cbLight._m0[_1844].x * _1806) * _1854) * _1877);
    float _1887 = ((_1840 * cbLight._m0[_1834].y) * _1879) + (((cbLight._m0[_1844].y * _1808) * _1854) * _1877);
    float _1888 = ((_1840 * cbLight._m0[_1834].z) * _1879) + (((cbLight._m0[_1844].z * _1810) * _1854) * _1877);
    uvec4 _1892 = floatBitsToUint(cbLight._m0[_1817 + 12u]);
    bool _1894 = _1892.x == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1894)
    {
        _1996 = _1886;
        _1998 = _1887;
        _2000 = _1888;
    }
    else
    {
        uint _2004 = _1817 + 6u;
        float _2020 = (dot(vec3(cbLight._m0[_1817 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _4082 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2023 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1996 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1886;
        _1998 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1887;
        _2000 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1888;
    }
    bool _2003 = _1892.y == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2003)
    {
        _2058 = _1996;
        _2060 = _1998;
        _2062 = _2000;
    }
    else
    {
        uint _2231 = _1817 + 7u;
        float _2247 = (dot(vec3(cbLight._m0[_1817 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4098 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2250 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2058 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _1996;
        _2060 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _1998;
        _2062 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2000;
    }
    uint _2065 = _1817 + 8u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _353) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1817].x + _420;
    float _2081 = cbLight._m0[_1817].y + _421;
    float _2082 = cbLight._m0[_1817].z + _422;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1817].xyz));
    float _4114 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _2094 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2095 = dot(vec3(_349, _350, _351), vec3(_2087, _2088, _2089));
    float _4136 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_2087, _2088, _2089));
    float _4147 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2079 * _2079;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _2116 = 0.959999978542327880859375 - _491;
    float _2118 = 0.959999978542327880859375 - _492;
    float _2119 = 0.959999978542327880859375 - _493;
    float _2126 = 1.0 - _2079;
    float _2137 = (0.5 / (((_2094 * ((_2093 * _2126) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2126) + _2079) * _2093))) * _2093;
    float _4158 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    uint _2153 = _1817 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _353) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1858].x + _420;
    float _2167 = cbLight._m0[_1858].y + _421;
    float _2168 = cbLight._m0[_1858].z + _422;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1858].xyz));
    float _4169 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2180 = dot(vec3(_349, _350, _351), vec3(_2173, _2174, _2175));
    float _4180 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2173, _2174, _2175));
    float _4191 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2206 = 1.0 - _2165;
    float _2216 = (0.5 / (((_2094 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2206) + _2165) * _2179))) * _2179;
    float _4202 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2228 = (((((_2199 * _2116) + _494) * cbLight._m0[_2153].x) * _2218) * _1840) + ((((cbLight._m0[_2065].x * _1806) * ((_2115 * _2116) + _494)) * _2139) * _1854);
    float _2229 = (((((_2199 * _2118) + _496) * cbLight._m0[_2153].y) * _2218) * _1840) + ((((cbLight._m0[_2065].y * _1808) * ((_2115 * _2118) + _496)) * _2139) * _1854);
    float _2230 = (((((_2199 * _2119) + _497) * cbLight._m0[_2153].z) * _2218) * _1840) + ((((cbLight._m0[_2065].z * _1810) * ((_2115 * _2119) + _497)) * _2139) * _1854);
    float _2286;
    float _2288;
    float _2290;
    if (_1894)
    {
        _2286 = _2228;
        _2288 = _2229;
        _2290 = _2230;
    }
    else
    {
        uint _2292 = _1817 + 2u;
        uint _2296 = _1817 + 10u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _353) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _420;
        float _2313 = cbLight._m0[_2292].y + _421;
        float _2314 = cbLight._m0[_2292].z + _422;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2292].xyz));
        float _4213 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2326 = dot(vec3(_349, _350, _351), vec3(_2319, _2320, _2321));
        float _4224 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4235 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2352 = 1.0 - _2311;
        float _2362 = (0.5 / (((_2094 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2352) + _2311) * _2325))) * _2325;
        float _4246 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2286 = (((((_2345 * _2116) + _494) * cbLight._m0[_2296].x) * _2364) * _2365) + _2228;
        _2288 = (((((_2345 * _2118) + _496) * cbLight._m0[_2296].y) * _2364) * _2365) + _2229;
        _2290 = (((((_2345 * _2119) + _497) * cbLight._m0[_2296].z) * _2364) * _2365) + _2230;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2003)
    {
        _2396 = _2286;
        _2398 = _2288;
        _2400 = _2290;
    }
    else
    {
        uint _2407 = _1817 + 3u;
        uint _2411 = _1817 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _353) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _420;
        float _2428 = cbLight._m0[_2407].y + _421;
        float _2429 = cbLight._m0[_2407].z + _422;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2407].xyz));
        float _4262 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2441 = dot(vec3(_349, _350, _351), vec3(_2434, _2435, _2436));
        float _4273 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4284 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2094 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2467) + _2426) * _2440))) * _2440;
        float _4295 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2396 = (((((_2460 * _2116) + _494) * cbLight._m0[_2411].x) * _2479) * _2480) + _2286;
        _2398 = (((((_2460 * _2118) + _496) * cbLight._m0[_2411].y) * _2479) * _2480) + _2288;
        _2400 = (((((_2460 * _2119) + _497) * cbLight._m0[_2411].z) * _2479) * _2480) + _2290;
    }
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_1815.y == 0u)
    {
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.x;
        uint _2513 = uint((float(_2501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2502))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2502)));
        float _2523 = (log2(_1593 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2524 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        uint _2527 = uint(isnan(14.0) ? _2524 : (isnan(_2524) ? 14.0 : min(_2524, 14.0)));
        uvec4 _2532 = texelFetch(g_lightClusterGridBuffer, int(((_2527 << 2u) + (_2513 << 6u)) >> 2u));
        uint _2533 = _2532.x;
        uint _2534 = _2501.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2534 >> 4u) & 15u)) + 4294967295u) & _2533) == 0u) || ((_2534 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2778)
                {
                    frontier_phi_66_pred = _2767;
                    frontier_phi_66_pred_1 = _2766;
                    frontier_phi_66_pred_2 = _2765;
                    frontier_phi_66_pred_3 = _2764;
                    frontier_phi_66_pred_4 = _2763;
                    frontier_phi_66_pred_5 = _2762;
                }
                else
                {
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    uint _2892;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2777;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    for (;;)
                    {
                        uint _2896 = uint(findLSB(_2892)) + (_2768 << 5u);
                        uint _2893 = (_2892 + 4294967295u) & _2892;
                        uint _2898 = _2896 * 48u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2918 = (_2896 * 48u) + 4u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2937 = (_2896 * 48u) + 8u;
                        vec3 _2948 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x));
                        float _2952 = _2912.x - _1591;
                        float _2953 = _2912.y - _1592;
                        float _2954 = _2912.z - _1593;
                        float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                        float _2958 = inversesqrt(_2955);
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2962 = dot(vec3(_449, _452, _455), vec3(_2959, _2960, _2961));
                        float _2967 = 1.0 - (_2955 * _2912.w);
                        float _4321 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2969 = sqrt(_2955) * _2931.w;
                        float _2972 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2962) + _2973;
                        float _2979 = _2969 * _2969;
                        float _2983 = ((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2968) / ((_2979 * 0.699999988079071044921875) + 1.0);
                        float _2987 = (-0.0) - _1591;
                        float _2988 = (-0.0) - _1592;
                        float _2989 = (-0.0) - _1593;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _3003 = exp2(log2(1.0 / ((_2979 * 3.5) + 5.0)) * 0.25);
                        float _3004 = 1.0 - _525;
                        float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                        float _3012 = _3011 * _3011;
                        float _3013 = _3012 * _3012;
                        float _3014 = _2994 + _2959;
                        float _3015 = _2995 + _2960;
                        float _3016 = _2996 + _2961;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3024 = dot(vec3(_449, _452, _455), vec3(_2994, _2995, _2996));
                        float _4337 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3028 = dot(vec3(_449, _452, _455), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                        float _4348 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                        float _3036 = _2972 * _3012;
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _2962) + _3037;
                        float _4359 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3042 = 1.0 - _3012;
                        float _3052 = (0.5 / (((_3041 * ((_3027 * _3042) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3012) * _3027))) * _3041;
                        float _4370 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3063 = (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3035 * _3035) * ((_2979 * 2.1991131305694580078125) + 3.141590118408203125))) * _2968;
                        _2821 = (_2983 * _2931.x) + _2889;
                        _2822 = (_2983 * _2931.y) + _2890;
                        _2823 = (_2983 * _2931.z) + _2891;
                        _2818 = (_3063 * _2948.x) + _2886;
                        _2819 = (_3063 * _2948.y) + _2887;
                        _2820 = (_3063 * _2948.z) + _2888;
                        if (_2893 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2893;
                        }
                    }
                    frontier_phi_66_pred = _2823;
                    frontier_phi_66_pred_1 = _2822;
                    frontier_phi_66_pred_2 = _2821;
                    frontier_phi_66_pred_3 = _2820;
                    frontier_phi_66_pred_4 = _2819;
                    frontier_phi_66_pred_5 = _2818;
                }
                _2629 = frontier_phi_66_pred;
                _2627 = frontier_phi_66_pred_1;
                _2625 = frontier_phi_66_pred_2;
                _2623 = frontier_phi_66_pred_3;
                _2621 = frontier_phi_66_pred_4;
                _2619 = frontier_phi_66_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2619;
                    _2763 = _2621;
                    _2764 = _2623;
                    _2765 = _2625;
                    _2766 = _2627;
                    _2767 = _2629;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((4294967295u << _2635) & _2533) == 0u)
        {
            _2730 = _2618;
            _2732 = _2620;
            _2734 = _2622;
            _2736 = _2624;
            _2738 = _2626;
            _2740 = _2628;
        }
        else
        {
            float _2755 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
            float _2756 = _2755 * _1591;
            float _2757 = _2755 * _1592;
            float _2758 = _2755 * _1593;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2869 = _2618;
                float _2870 = _2620;
                float _2871 = _2622;
                float _2872 = _2624;
                float _2873 = _2626;
                float _2874 = _2628;
                uint _2875 = _2635;
                uint _2884;
                bool _2885;
                for (;;)
                {
                    _2884 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                    _2885 = _2884 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2885)
                    {
                        frontier_phi_72_pred = _2874;
                        frontier_phi_72_pred_1 = _2873;
                        frontier_phi_72_pred_2 = _2872;
                        frontier_phi_72_pred_3 = _2871;
                        frontier_phi_72_pred_4 = _2870;
                        frontier_phi_72_pred_5 = _2869;
                    }
                    else
                    {
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3081 = _2869;
                        float _3082 = _2870;
                        float _3083 = _2871;
                        float _3084 = _2872;
                        float _3085 = _2873;
                        float _3086 = _2874;
                        uint _3087 = _2884;
                        uint _3088;
                        vec4 _3113;
                        float _3114;
                        vec4 _3129;
                        vec3 _3141;
                        vec4 _3157;
                        vec4 _3173;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3098 = ((_2875 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3087));
                            _3088 = (_3087 + 4294967295u) & _3087;
                            uint _3100 = _3098 * 40u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3114 = _3113.w;
                            uint _3116 = (_3098 * 40u) + 4u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3098 * 40u) + 8u;
                            _3141 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x));
                            uint _3144 = (_3098 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3160 = (_3098 * 40u) + 20u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3098 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3098 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_1593, _3208.z, fma(_1592, _3208.y, _3208.x * _1591)) + _3208.w;
                            _3221 = !((fma(_1593, _3189.z, fma(_1592, _3189.y, _3189.x * _1591)) + _3189.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3113.x - _1591;
                                float _3249 = _3113.y - _1592;
                                float _3250 = _3113.z - _1593;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3114 * _3114));
                                float _4381 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3266 = sqrt(_3251) * _3129.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_449, _452, _455))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_1593, _3157.z, fma(_1592, _3157.y, _3157.x * _1591)) + _3157.w) / _3220;
                                float _3280 = (fma(_1593, _3173.z, fma(_1592, _3173.y, _3173.x * _1591)) + _3173.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4397 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _525;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2756;
                                float _3310 = _3256 - _2757;
                                float _3311 = _3257 - _2758;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_449, _452, _455), vec3((-0.0) - _2756, (-0.0) - _2757, (-0.0) - _2758));
                                float _4408 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3323 = dot(vec3(_449, _452, _455), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4419 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_449, _452, _455), vec3(_3255, _3256, _3257))) + _3332;
                                float _4430 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4441 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3286 * _3129.y;
                                frontier_phi_78_pred_1 = _3286 * _3129.x;
                                frontier_phi_78_pred_2 = _3360 * _3141.z;
                                frontier_phi_78_pred_3 = _3360 * _3141.y;
                                frontier_phi_78_pred_4 = _3360 * _3141.x;
                                frontier_phi_78_pred_5 = _3286 * _3129.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3368 = frontier_phi_78_pred;
                            _3367 = frontier_phi_78_pred_1;
                            _3366 = frontier_phi_78_pred_2;
                            _3365 = frontier_phi_78_pred_3;
                            _3364 = frontier_phi_78_pred_4;
                            _3369 = frontier_phi_78_pred_5;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3073 = _3369 + _3086;
                            _3068 = _3364 + _3081;
                            _3069 = _3365 + _3082;
                            _3070 = _3366 + _3083;
                            if (_3088 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3088;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3073;
                        frontier_phi_72_pred_1 = _3072;
                        frontier_phi_72_pred_2 = _3071;
                        frontier_phi_72_pred_3 = _3070;
                        frontier_phi_72_pred_4 = _3069;
                        frontier_phi_72_pred_5 = _3068;
                    }
                    _2741 = frontier_phi_72_pred;
                    _2739 = frontier_phi_72_pred_1;
                    _2737 = frontier_phi_72_pred_2;
                    _2735 = frontier_phi_72_pred_3;
                    _2733 = frontier_phi_72_pred_4;
                    _2731 = frontier_phi_72_pred_5;
                    uint _2876 = _2875 + 1u;
                    if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2869 = _2731;
                        _2870 = _2733;
                        _2871 = _2735;
                        _2872 = _2737;
                        _2873 = _2739;
                        _2874 = _2741;
                        _2875 = _2876;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2741;
                frontier_phi_60_61_ladder_1 = _2739;
                frontier_phi_60_61_ladder_2 = _2735;
                frontier_phi_60_61_ladder_3 = _2733;
                frontier_phi_60_61_ladder_4 = _2731;
                frontier_phi_60_61_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_60_61_ladder = _2628;
                frontier_phi_60_61_ladder_1 = _2626;
                frontier_phi_60_61_ladder_2 = _2622;
                frontier_phi_60_61_ladder_3 = _2620;
                frontier_phi_60_61_ladder_4 = _2618;
                frontier_phi_60_61_ladder_5 = _2624;
            }
            _2730 = frontier_phi_60_61_ladder_4;
            _2732 = frontier_phi_60_61_ladder_3;
            _2734 = frontier_phi_60_61_ladder_2;
            _2736 = frontier_phi_60_61_ladder_5;
            _2738 = frontier_phi_60_61_ladder_1;
            _2740 = frontier_phi_60_61_ladder;
        }
        float _2745 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
        _2546 = (_2745 * _2736) + _2058;
        _2548 = (_2745 * _2738) + _2060;
        _2550 = (_2745 * _2740) + _2062;
        _2552 = ((_2730 * _494) * _2745) + _2396;
        _2554 = ((_2732 * _496) * _2745) + _2398;
        _2556 = ((_2734 * _497) * _2745) + _2400;
    }
    else
    {
        _2546 = _2058;
        _2548 = _2060;
        _2550 = _2062;
        _2552 = _2396;
        _2554 = _2398;
        _2556 = _2400;
    }
    float _4457 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4468 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4479 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4490 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2574 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2546 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _509))) + ((_2552 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1318)) * cbPerFrame._m0[3u].x);
    float _2575 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2548 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _509))) + ((_2554 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1318)) * cbPerFrame._m0[3u].x);
    float _2576 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2550 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _509))) + ((_2556 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1318)) * cbPerFrame._m0[3u].x);
    float _2584 = cbInstanceData._m0[_468 + 6u].w * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)));
    float _2589 = _427 / cbSceneParam._m0[86u].x;
    float _2590 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2644 = _2643 / _362;
        float _2655 = _2644 * _413;
        float _2656 = _414 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2658 = _2644 * _415;
        float _2660 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2661 = _2660 + cbSceneParam._m0[79u].w;
        float _2662 = cbSceneParam._m0[79u].w - _2656;
        float _2668 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2658 * _2658));
        float _2671 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2668;
        float _2676 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2678 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2831;
        if (abs((_2657 - _2660) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2831 = ((((_2661 > 0.0) ? exp2(_2676 * _2661) : (2.0 - exp2(_2678 * _2661))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2671;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : max(_2661, _2662));
            float _2793 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : min(_2661, _2662));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2831 = ((abs(_2668 / _2657) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2676 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2676 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2678 * _2802) - exp2(_2678 * _2803)) * _2791))) + (_2671 * cbSceneParam._m0[80u].z);
        }
        vec4 _2833 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2842 = exp2((_2831 * (-1.44269502162933349609375)) * (1.0 - _2833.w));
        float _2843 = log2(_2842);
        float _2859 = log2(_2609);
        _2680 = (exp2(_2859 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].x)) * _2833.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2682 = (exp2(_2859 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].y)) * _2833.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2684 = (exp2(_2859 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].z)) * _2833.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2686 = _2842 * _2609;
    }
    else
    {
        _2680 = _2606;
        _2682 = _2607;
        _2684 = _2608;
        _2686 = _2609;
    }
    float _2698 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2699 = _2698 == 3.0;
    float _2700 = log2(_2686);
    float _2707 = exp2(_2700 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)));
    float _2708 = exp2(_2700 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)));
    float _2709 = exp2(_2700 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)));
    float _2718 = (_2698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2718 * (_2699 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.y = _2718 * (_2699 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.z = _2718 * (_2699 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.w = _2584;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2584;
}


