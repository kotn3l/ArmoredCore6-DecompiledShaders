#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _905;
float _3300;
float _3301;
float _3302;
float _3303;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.w;
    float _233 = cbMtdParam._m0[9u].x * _220.x;
    float _234 = cbMtdParam._m0[9u].y * _220.y;
    float _235 = cbMtdParam._m0[9u].z * _220.z;
    vec4 _248 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _250 = _248.x;
    bool _257 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _274 = ((_257 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _250)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _250))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3312 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _277 = 1.0 - (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)));
    float _3323 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _278 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _286 = _226 - (((_278 * _278) * _226) * (3.0 - (_278 * 2.0)));
    vec4 _301 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _301.z;
    float _308 = (_301.x * 2.0) + (-1.0);
    float _310 = (_301.y * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3334 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))));
    float _319 = fma(_316, _196 * NORMAL.x, fma(_310, _203 * TANGENT.x, (_189 * _182) * _308));
    float _322 = fma(_316, _196 * NORMAL.y, fma(_310, _203 * TANGENT.y, (_189 * _183) * _308));
    float _325 = fma(_316, _196 * NORMAL.z, fma(_310, _203 * TANGENT.z, (_189 * _184) * _308));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _330 = _329 * _319;
    float _331 = _329 * _322;
    float _332 = _329 * _325;
    float _3345 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _333 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _334 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3378 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3389 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3400 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _338 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _343 = _257 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    vec4 _408 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _410 = _408.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _584 = sqrt(((_394 * _394) + (_395 * _395)) + (_396 * _396));
        float _590 = (cbMatDynParam._m0[5u].x * _584) + cbMatDynParam._m0[5u].y;
        float _3411 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _591 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _595 = (cbMatDynParam._m0[5u].z * _584) + cbMatDynParam._m0[5u].w;
        float _3422 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) - _591)) + _591) < ((_410 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_332, cbSceneParam._m0[5u].z, fma(_331, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _330));
    float _445 = fma(_332, cbSceneParam._m0[6u].z, fma(_331, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _330));
    float _448 = fma(_332, cbSceneParam._m0[7u].z, fma(_331, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _330));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3433 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _476 = 1.0 - _338;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _338;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _338;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _338;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_330, _331, _332), vec3(_401, _402, _403));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _330) - _401;
    float _511 = (_506 * _331) - _402;
    float _512 = (_506 * _332) - _403;
    float _516 = abs(dot(vec3(_401, _402, _403), vec3(_330, _331, _332)));
    float _3466 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_334);
    float _530 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _536 = (1.0 - _530) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _537 = _530 * _518;
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _904;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _629 = fma(_573, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565));
        float _633 = fma(_573, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565));
        float _637 = fma(_573, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565));
        float _662 = _565 + _330;
        float _663 = _569 + _331;
        float _664 = _573 + _332;
        float _674 = fma(_664, cbModelParam._m0[26u].z, fma(_663, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662)) - _629;
        float _675 = fma(_664, cbModelParam._m0[27u].z, fma(_663, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662)) - _633;
        float _676 = fma(_664, cbModelParam._m0[28u].z, fma(_663, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662)) - _637;
        float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
        float _693 = ((_680 * _674) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_680 * _675) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_680 * _676) / cbModelParam._m0[34u].z) + ((((((_637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        float _732 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_698.x + (-0.5));
        float _734 = _732 * (_698.y + (-0.5));
        float _735 = _732 * (_698.z + (-0.5));
        float _742 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_705.x + (-0.5));
        float _744 = _742 * (_705.y + (-0.5));
        float _745 = _742 * (_705.z + (-0.5));
        float _752 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_712.x + (-0.5));
        float _754 = _752 * (_712.y + (-0.5));
        float _755 = _752 * (_712.z + (-0.5));
        float _762 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_719.x + (-0.5));
        float _764 = _762 * (_719.y + (-0.5));
        float _765 = _762 * (_719.z + (-0.5));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = _733 * 0.5;
        float _770 = _743 * 0.5;
        float _771 = _753 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _786 = (dot(vec3(_330, _331, _332), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _796 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3514 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_798 + 1.0))) + _803) * _766;
        float _813 = _734 * 0.5;
        float _814 = _744 * 0.5;
        float _815 = _754 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_330, _331, _332), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3547 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_840 + 1.0))) + _845) * _767;
        float _855 = _735 * 0.5;
        float _856 = _745 * 0.5;
        float _857 = _755 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_330, _331, _332), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3580 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_882 + 1.0))) + _887) * _768;
        _904 = _735;
        _906 = _734;
        _907 = _733;
        _908 = _745;
        _909 = _744;
        _910 = _743;
        _911 = _755;
        _912 = _754;
        _913 = _753;
        _914 = _768;
        _915 = _767;
        _916 = _766;
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
    }
    else
    {
        _904 = _905;
        _906 = _905;
        _907 = _905;
        _908 = _905;
        _909 = _905;
        _910 = _905;
        _911 = _905;
        _912 = _905;
        _913 = _905;
        _914 = _905;
        _915 = _905;
        _916 = _905;
        _917 = 0.0;
        _918 = 0.0;
        _919 = 0.0;
    }
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _948 = fma(_573, cbModelParam._m0[30u].z, fma(_569, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _565));
        float _952 = fma(_573, cbModelParam._m0[31u].z, fma(_569, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _565));
        float _956 = fma(_573, cbModelParam._m0[32u].z, fma(_569, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _565));
        float _979 = _565 + _330;
        float _980 = _569 + _331;
        float _981 = _573 + _332;
        float _991 = fma(_981, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979)) - _948;
        float _992 = fma(_981, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979)) - _952;
        float _993 = fma(_981, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979)) - _956;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_948 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_952 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[35u].z) + ((((((_956 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1047 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1014.x + (-0.5));
        float _1049 = _1047 * (_1014.y + (-0.5));
        float _1050 = _1047 * (_1014.z + (-0.5));
        float _1057 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1021.x + (-0.5));
        float _1059 = _1057 * (_1021.y + (-0.5));
        float _1060 = _1057 * (_1021.z + (-0.5));
        float _1067 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1028.x + (-0.5));
        float _1069 = _1067 * (_1028.y + (-0.5));
        float _1070 = _1067 * (_1028.z + (-0.5));
        float _1077 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1035.x + (-0.5));
        float _1079 = _1077 * (_1035.y + (-0.5));
        float _1080 = _1077 * (_1035.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_330, _331, _332), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3643 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1111 + 1.0))) + _1116) * _1081;
        float _1126 = _1049 * 0.5;
        float _1127 = _1059 * 0.5;
        float _1128 = _1069 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_330, _331, _332), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3676 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1153 + 1.0))) + _1158) * _1082;
        float _1168 = _1050 * 0.5;
        float _1169 = _1060 * 0.5;
        float _1170 = _1070 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_330, _331, _332), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3709 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1195 + 1.0))) + _1200) * _1083;
        _1217 = _1050;
        _1218 = _1049;
        _1219 = _1048;
        _1220 = _1060;
        _1221 = _1059;
        _1222 = _1058;
        _1223 = _1070;
        _1224 = _1069;
        _1225 = _1068;
        _1226 = _1083;
        _1227 = _1082;
        _1228 = _1081;
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _905;
        _1218 = _905;
        _1219 = _905;
        _1220 = _905;
        _1221 = _905;
        _1222 = _905;
        _1223 = _905;
        _1224 = _905;
        _1225 = _905;
        _1226 = _905;
        _1227 = _905;
        _1228 = _905;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1264 = fma(_1243, cbSceneParam._m0[89u].z, fma(_1242, cbSceneParam._m0[89u].y, _1241 * cbSceneParam._m0[89u].x));
    float _1267 = fma(_1243, cbSceneParam._m0[90u].z, fma(_1242, cbSceneParam._m0[90u].y, _1241 * cbSceneParam._m0[90u].x));
    float _1270 = fma(_1243, cbSceneParam._m0[91u].z, fma(_1242, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1241));
    float _1285 = _510 * 0.5;
    float _1286 = _511 * 0.5;
    float _1287 = _512 * 0.5;
    float _1288 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1291 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1294 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1328;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1301 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_904, _908, _911, _914));
        float _1305 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_906, _909, _912, _915));
        float _1309 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_907, _910, _913, _916));
        float _1316 = dot(vec4(cbModelParam._m0[39u]), vec4(_1285, _1286, _1287, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1339;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1330 = dot(vec4(cbModelParam._m0[40u]), vec4(_1285, _1286, _1287, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1343 = (_1339 * cbModelParam._m0[1u].x) + (_1328 * (1.0 - cbModelParam._m0[1u].x));
    float _1353 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _334);
    float _1354 = isnan(_1353) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1353 : min(cbModelParam._m0[25u].z, _1353));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1403 = fma(_573, cbModelParam._m0[13u].z, fma(_569, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565)) + cbModelParam._m0[13u].w;
        float _1407 = fma(_573, cbModelParam._m0[14u].z, fma(_569, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565)) + cbModelParam._m0[14u].w;
        float _1411 = fma(_573, cbModelParam._m0[15u].z, fma(_569, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565)) + cbModelParam._m0[15u].w;
        float _1414 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1417 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1420 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1448;
        if (_1414 > 0.0)
        {
            _1448 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1448 = frontier_phi_17_15_ladder;
        }
        float _1656;
        if (_1417 > 0.0)
        {
            _1656 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1656 = frontier_phi_26_22_ladder;
        }
        float _1910;
        if (_1420 > 0.0)
        {
            _1910 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1910 = frontier_phi_38_33_ladder;
        }
        float _1912 = isnan(_1656) ? _1448 : (isnan(_1448) ? _1656 : min(_1448, _1656));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1414) + _1403;
        float _1918 = (_1913 * _1417) + _1407;
        float _1919 = (_1913 * _1420) + _1411;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1354);
            frontier_phi_16_38_ladder = _2047.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2047.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2047.x * cbModelParam._m0[1u].y;
        }
        _1436 = frontier_phi_16_38_ladder_2;
        _1438 = frontier_phi_16_38_ladder_1;
        _1440 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1354);
        _1436 = _1424.x * cbModelParam._m0[1u].y;
        _1438 = _1424.y * cbModelParam._m0[1u].y;
        _1440 = _1424.z * cbModelParam._m0[1u].y;
    }
    float _1444 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _334);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1444 : min(cbModelParam._m0[25u].w, _1444));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1502 = fma(_573, cbModelParam._m0[21u].z, fma(_569, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565)) + cbModelParam._m0[21u].w;
        float _1506 = fma(_573, cbModelParam._m0[22u].z, fma(_569, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565)) + cbModelParam._m0[22u].w;
        float _1510 = fma(_573, cbModelParam._m0[23u].z, fma(_569, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565)) + cbModelParam._m0[23u].w;
        float _1513 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1516 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1519 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1661;
        if (_1513 > 0.0)
        {
            _1661 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1937;
        if (_1516 > 0.0)
        {
            _1937 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1937 = frontier_phi_40_35_ladder;
        }
        float _2150;
        if (_1519 > 0.0)
        {
            _2150 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2150 = frontier_phi_49_46_ladder;
        }
        float _2152 = isnan(_1937) ? _1661 : (isnan(_1661) ? _1937 : min(_1661, _1937));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1513) + _1502;
        float _2158 = (_2153 * _1516) + _1506;
        float _2159 = (_2153 * _1519) + _1510;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2160;
        float _2163 = _2160 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2159 > _2163) || ((_2159 < _2161) || ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 < _2161) || (_2157 > _2163))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2159, cbModelParam._m0[17u].z, fma(_2158, cbModelParam._m0[17u].y, _2157 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2159, cbModelParam._m0[18u].z, fma(_2158, cbModelParam._m0[18u].y, _2157 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2159, cbModelParam._m0[19u].z, fma(_2158, cbModelParam._m0[19u].y, _2157 * cbModelParam._m0[19u].x))), _1445);
            frontier_phi_25_49_ladder = _2363.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2363.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2363.x * cbModelParam._m0[1u].z;
        }
        _1538 = frontier_phi_25_49_ladder_2;
        _1540 = frontier_phi_25_49_ladder_1;
        _1542 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1445);
        _1538 = _1522.x * cbModelParam._m0[1u].z;
        _1540 = _1522.y * cbModelParam._m0[1u].z;
        _1542 = _1522.z * cbModelParam._m0[1u].z;
    }
    float _1555 = (((_536 * _487) + _537) * _502) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1557 = (((_536 * _489) + _537) * _502) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1559 = (((_536 * _490) + _537) * _502) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1562 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, _1555 * cbSceneParam._m0[91u].x));
    uvec4 _1578 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1580 = _1578.x * 14u;
    uint _1581 = _1580 + 13u;
    float _1588 = _502 + (-1.0);
    float _1593 = (cbLight._m0[_1581].x * _1588) + 1.0;
    float _1594 = (cbLight._m0[_1581].y * _1588) + 1.0;
    float _1595 = (cbLight._m0[_1581].z * _1588) + 1.0;
    float _1596 = (cbLight._m0[_1581].w * _1588) + 1.0;
    uint _1597 = _1580 + 5u;
    float _1603 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1607 = _1580 + 4u;
    float _1614 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1618 = _1580 | 1u;
    float _1629 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_330, _331, _332));
    float _1632 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_330, _331, _332));
    float _3845 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _3856 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1637 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1639 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1646 = ((cbLight._m0[_1597].x * _1603) * _1639) + ((cbLight._m0[_1607].x * _1614) * _1637);
    float _1647 = ((_1603 * cbLight._m0[_1597].y) * _1639) + ((_1614 * cbLight._m0[_1607].y) * _1637);
    float _1648 = ((_1603 * cbLight._m0[_1597].z) * _1639) + ((_1614 * cbLight._m0[_1607].z) * _1637);
    uvec4 _1653 = floatBitsToUint(cbLight._m0[_1580 + 12u]);
    bool _1655 = _1653.x == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1655)
    {
        _1666 = _1646;
        _1668 = _1647;
        _1670 = _1648;
    }
    else
    {
        uint _1674 = _1580 + 6u;
        float _1690 = (dot(vec3(cbLight._m0[_1580 + 2u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3867 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1693 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1666 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1646;
        _1668 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1647;
        _1670 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1648;
    }
    bool _1673 = _1653.y == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1673)
    {
        _1711 = _1666;
        _1713 = _1668;
        _1715 = _1670;
    }
    else
    {
        uint _1881 = _1580 + 7u;
        float _1897 = (dot(vec3(cbLight._m0[_1580 + 3u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _3883 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1900 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1711 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1666;
        _1713 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1668;
        _1715 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1670;
    }
    uint _1718 = _1580 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _334) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1580].x + _401;
    float _1734 = cbLight._m0[_1580].y + _402;
    float _1735 = cbLight._m0[_1580].z + _403;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1580].xyz));
    float _3899 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1747 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1748 = dot(vec3(_330, _331, _332), vec3(_1740, _1741, _1742));
    float _3921 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1740, _1741, _1742));
    float _3932 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1768 = exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0);
    float _1769 = 0.959999978542327880859375 - _484;
    float _1771 = 0.959999978542327880859375 - _485;
    float _1772 = 0.959999978542327880859375 - _486;
    float _1779 = 1.0 - _1732;
    float _1790 = (0.5 / (((_1747 * ((_1746 * _1779) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1779) + _1732) * _1746))) * _1746;
    float _3943 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    uint _1803 = _1580 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _334) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1618].x + _401;
    float _1817 = cbLight._m0[_1618].y + _402;
    float _1818 = cbLight._m0[_1618].z + _403;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1618].xyz));
    float _3954 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1830 = dot(vec3(_330, _331, _332), vec3(_1823, _1824, _1825));
    float _3965 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1823, _1824, _1825));
    float _3976 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
    float _1856 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1747 * ((_1829 * _1856) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1856) + _1815) * _1829))) * _1829;
    float _3987 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1878 = (((((_1849 * _1769) + _487) * cbLight._m0[_1803].x) * _1868) * _1603) + (((((_1768 * _1769) + _487) * cbLight._m0[_1718].x) * _1792) * _1614);
    float _1879 = (((((_1849 * _1771) + _489) * cbLight._m0[_1803].y) * _1868) * _1603) + (((((_1768 * _1771) + _489) * cbLight._m0[_1718].y) * _1792) * _1614);
    float _1880 = (((((_1849 * _1772) + _490) * cbLight._m0[_1803].z) * _1868) * _1603) + (((((_1768 * _1772) + _490) * cbLight._m0[_1718].z) * _1792) * _1614);
    float _1942;
    float _1944;
    float _1946;
    if (_1655)
    {
        _1942 = _1878;
        _1944 = _1879;
        _1946 = _1880;
    }
    else
    {
        uint _1948 = _1580 + 2u;
        uint _1952 = _1580 + 10u;
        float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _334) * 0.949999988079071044921875);
        float _1967 = _1966 * _1966;
        float _1968 = cbLight._m0[_1948].x + _401;
        float _1969 = cbLight._m0[_1948].y + _402;
        float _1970 = cbLight._m0[_1948].z + _403;
        float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
        float _1975 = _1974 * _1968;
        float _1976 = _1974 * _1969;
        float _1977 = _1974 * _1970;
        float _1978 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1948].xyz));
        float _3998 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1982 = dot(vec3(_330, _331, _332), vec3(_1975, _1976, _1977));
        float _4009 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1986 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_1975, _1976, _1977));
        float _4020 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1990 = _1967 * _1967;
        float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
        float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
        float _2008 = 1.0 - _1967;
        float _2018 = (0.5 / (((_1747 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2008) + _1967) * _1981))) * _1981;
        float _4031 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2020 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
        float _2021 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1942 = (((((_2001 * _1769) + _487) * cbLight._m0[_1952].x) * _2020) * _2021) + _1878;
        _1944 = (((((_2001 * _1771) + _489) * cbLight._m0[_1952].y) * _2020) * _2021) + _1879;
        _1946 = (((((_2001 * _1772) + _490) * cbLight._m0[_1952].z) * _2020) * _2021) + _1880;
    }
    float _2056;
    float _2058;
    float _2060;
    if (_1673)
    {
        _2056 = _1942;
        _2058 = _1944;
        _2060 = _1946;
    }
    else
    {
        uint _2067 = _1580 + 3u;
        uint _2071 = _1580 + 11u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _334) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _401;
        float _2088 = cbLight._m0[_2067].y + _402;
        float _2089 = cbLight._m0[_2067].z + _403;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2067].xyz));
        float _4047 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2101 = dot(vec3(_330, _331, _332), vec3(_2094, _2095, _2096));
        float _4058 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4069 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0);
        float _2127 = 1.0 - _2086;
        float _2137 = (0.5 / (((_1747 * ((_2100 * _2127) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2127) + _2086) * _2100))) * _2100;
        float _4080 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2139 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2140 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _2056 = (((((_2120 * _1769) + _487) * cbLight._m0[_2071].x) * _2139) * _2140) + _1942;
        _2058 = (((((_2120 * _1771) + _489) * cbLight._m0[_2071].y) * _2139) * _2140) + _1944;
        _2060 = (((((_2120 * _1772) + _490) * cbLight._m0[_2071].z) * _2139) * _2140) + _1946;
    }
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1578.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            uint _2526 = 0u;
            uint _2535;
            bool _2536;
            for (;;)
            {
                _2535 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2526 << 2u)) >> 2u)).x;
                _2536 = _2535 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2536)
                {
                    frontier_phi_66_pred = _2520;
                    frontier_phi_66_pred_1 = _2525;
                    frontier_phi_66_pred_2 = _2524;
                    frontier_phi_66_pred_3 = _2523;
                    frontier_phi_66_pred_4 = _2522;
                    frontier_phi_66_pred_5 = _2521;
                }
                else
                {
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    uint _2671;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2524;
                    _2670 = _2525;
                    _2671 = _2535;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    for (;;)
                    {
                        uint _2675 = uint(findLSB(_2671)) + (_2526 << 5u);
                        uint _2672 = (_2671 + 4294967295u) & _2671;
                        uint _2677 = _2675 * 48u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2697 = (_2675 * 48u) + 4u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2716 = (_2675 * 48u) + 8u;
                        vec3 _2727 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x));
                        float _2731 = _2691.x - _2216;
                        float _2732 = _2691.y - _2217;
                        float _2733 = _2691.z - _2218;
                        float _2734 = dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733));
                        float _2737 = inversesqrt(_2734);
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2741 = dot(vec3(_442, _445, _448), vec3(_2738, _2739, _2740));
                        float _2746 = 1.0 - (_2734 * _2691.w);
                        float _4106 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2748 = sqrt(_2734) * _2710.w;
                        float _2751 = 1.39999997615814208984375 / (_2748 + 1.39999997615814208984375);
                        float _2752 = _2751 * _2751;
                        float _2755 = ((1.0 - _2752) * _2741) + _2752;
                        float _2758 = _2748 * _2748;
                        float _2762 = ((isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))) * _2747) / ((_2758 * 0.699999988079071044921875) + 1.0);
                        float _2766 = (-0.0) - _2216;
                        float _2767 = (-0.0) - _2217;
                        float _2768 = (-0.0) - _2218;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2783 = exp2(log2(1.0 / ((_2758 * 3.5) + 5.0)) * 0.25);
                        float _2784 = 1.0 - _518;
                        float _2791 = sqrt(1.0 - ((1.0 - (_2784 * _2784)) * (1.0 - (_2783 * _2783))));
                        float _2792 = _2791 * _2791;
                        float _2793 = _2792 * _2792;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2796 = _2775 + _2740;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2804 = dot(vec3(_442, _445, _448), vec3(_2773, _2774, _2775));
                        float _4122 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2808 = dot(vec3(_442, _445, _448), vec3(_2800 * _2794, _2800 * _2795, _2800 * _2796));
                        float _4133 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2815 = ((_2811 * _2811) * (_2793 + (-1.0))) + 1.0;
                        float _2816 = _2751 * _2792;
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2741) + _2817;
                        float _4144 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2821 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2822 = 1.0 - _2792;
                        float _2832 = (0.5 / (((_2821 * ((_2807 * _2822) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _2822) + _2792) * _2807))) * _2821;
                        float _4155 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2843 = (((_2793 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_2815 * _2815) * ((_2758 * 2.1991131305694580078125) + 3.141590118408203125))) * _2747;
                        _2595 = (_2762 * _2710.x) + _2668;
                        _2596 = (_2762 * _2710.y) + _2669;
                        _2597 = (_2762 * _2710.z) + _2670;
                        _2592 = (_2843 * _2727.x) + _2665;
                        _2593 = (_2843 * _2727.y) + _2666;
                        _2594 = (_2843 * _2727.z) + _2667;
                        if (_2672 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2595;
                            _2669 = _2596;
                            _2670 = _2597;
                            _2671 = _2672;
                        }
                    }
                    frontier_phi_66_pred = _2592;
                    frontier_phi_66_pred_1 = _2597;
                    frontier_phi_66_pred_2 = _2596;
                    frontier_phi_66_pred_3 = _2595;
                    frontier_phi_66_pred_4 = _2594;
                    frontier_phi_66_pred_5 = _2593;
                }
                _2369 = frontier_phi_66_pred;
                _2379 = frontier_phi_66_pred_1;
                _2377 = frontier_phi_66_pred_2;
                _2375 = frontier_phi_66_pred_3;
                _2373 = frontier_phi_66_pred_4;
                _2371 = frontier_phi_66_pred_5;
                uint _2527 = _2526 + 1u;
                if (_2527 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2520 = _2369;
                    _2521 = _2371;
                    _2522 = _2373;
                    _2523 = _2375;
                    _2524 = _2377;
                    _2525 = _2379;
                    _2526 = _2527;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((4294967295u << _2385) & _2262) == 0u)
        {
            _2488 = _2368;
            _2490 = _2370;
            _2492 = _2372;
            _2494 = _2374;
            _2496 = _2376;
            _2498 = _2378;
        }
        else
        {
            float _2513 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2514 = _2513 * _2216;
            float _2515 = _2513 * _2217;
            float _2516 = _2513 * _2218;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2648 = _2368;
                float _2649 = _2370;
                float _2650 = _2372;
                float _2651 = _2374;
                float _2652 = _2376;
                float _2653 = _2378;
                uint _2654 = _2385;
                uint _2663;
                bool _2664;
                for (;;)
                {
                    _2663 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                    _2664 = _2663 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2664)
                    {
                        frontier_phi_77_pred = _2653;
                        frontier_phi_77_pred_1 = _2652;
                        frontier_phi_77_pred_2 = _2651;
                        frontier_phi_77_pred_3 = _2650;
                        frontier_phi_77_pred_4 = _2649;
                        frontier_phi_77_pred_5 = _2648;
                    }
                    else
                    {
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        float _2873 = _2651;
                        float _2874 = _2652;
                        float _2875 = _2653;
                        uint _2876 = _2663;
                        uint _2877;
                        vec4 _2902;
                        float _2903;
                        vec4 _2918;
                        vec3 _2930;
                        vec4 _2946;
                        vec4 _2962;
                        float _3009;
                        bool _3010;
                        for (;;)
                        {
                            uint _2887 = ((_2654 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2876));
                            _2877 = (_2876 + 4294967295u) & _2876;
                            uint _2889 = _2887 * 40u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            _2903 = _2902.w;
                            uint _2905 = (_2887 * 40u) + 4u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2920 = (_2887 * 40u) + 8u;
                            _2930 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x));
                            uint _2933 = (_2887 * 40u) + 16u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2887 * 40u) + 20u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2965 = (_2887 * 40u) + 24u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2984 = (_2887 * 40u) + 28u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _3009 = fma(_2218, _2997.z, fma(_2217, _2997.y, _2997.x * _2216)) + _2997.w;
                            _3010 = !((fma(_2218, _2978.z, fma(_2217, _2978.y, _2978.x * _2216)) + _2978.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3010)
                            {
                                float _3037 = _2902.x - _2216;
                                float _3038 = _2902.y - _2217;
                                float _3039 = _2902.z - _2218;
                                float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                                float _3043 = inversesqrt(_3040);
                                float _3044 = _3043 * _3037;
                                float _3045 = _3043 * _3038;
                                float _3046 = _3043 * _3039;
                                float _3050 = 1.0 - (_3040 / (_2903 * _2903));
                                float _4166 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3055 = sqrt(_3040) * _2918.w;
                                float _3057 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                                float _3058 = _3057 * _3057;
                                float _3061 = ((1.0 - _3058) * dot(vec3(_3044, _3045, _3046), vec3(_442, _445, _448))) + _3058;
                                float _3064 = _3055 * _3055;
                                float _3068 = (fma(_2218, _2946.z, fma(_2217, _2946.y, _2946.x * _2216)) + _2946.w) / _3009;
                                float _3069 = (fma(_2218, _2962.z, fma(_2217, _2962.y, _2962.x * _2216)) + _2962.w) / _3009;
                                float _3073 = 1.0 - dot(vec2(_3068, _3069), vec2(_3068, _3069));
                                float _4182 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3075 = _3074 * (((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3051) / ((_3064 * 0.699999988079071044921875) + 1.0));
                                float _3087 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                                float _3088 = 1.0 - _518;
                                float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                                float _3096 = _3095 * _3095;
                                float _3097 = _3096 * _3096;
                                float _3098 = _3044 - _2514;
                                float _3099 = _3045 - _2515;
                                float _3100 = _3046 - _2516;
                                float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                                float _3108 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2514, (-0.0) - _2515, (-0.0) - _2516));
                                float _4193 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3112 = dot(vec3(_442, _445, _448), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                                float _4204 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3115 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                                float _3120 = _3057 * _3096;
                                float _3121 = _3120 * _3120;
                                float _3127 = ((1.0 - _3121) * dot(vec3(_442, _445, _448), vec3(_3044, _3045, _3046))) + _3121;
                                float _4215 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3129 = 1.0 - _3096;
                                float _3139 = (0.5 / (((_3128 * ((_3111 * _3129) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3096) * _3111))) * _3128;
                                float _4226 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3149 = (_3074 * _3051) * (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_3119 * _3119) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3075 * _2918.y;
                                frontier_phi_83_pred_1 = _3075 * _2918.x;
                                frontier_phi_83_pred_2 = _3149 * _2930.z;
                                frontier_phi_83_pred_3 = _3149 * _2930.y;
                                frontier_phi_83_pred_4 = _3149 * _2930.x;
                                frontier_phi_83_pred_5 = _3075 * _2918.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3157 = frontier_phi_83_pred;
                            _3156 = frontier_phi_83_pred_1;
                            _3155 = frontier_phi_83_pred_2;
                            _3154 = frontier_phi_83_pred_3;
                            _3153 = frontier_phi_83_pred_4;
                            _3158 = frontier_phi_83_pred_5;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            if (_2877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2877;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2862;
                        frontier_phi_77_pred_1 = _2861;
                        frontier_phi_77_pred_2 = _2860;
                        frontier_phi_77_pred_3 = _2859;
                        frontier_phi_77_pred_4 = _2858;
                        frontier_phi_77_pred_5 = _2857;
                    }
                    _2499 = frontier_phi_77_pred;
                    _2497 = frontier_phi_77_pred_1;
                    _2495 = frontier_phi_77_pred_2;
                    _2493 = frontier_phi_77_pred_3;
                    _2491 = frontier_phi_77_pred_4;
                    _2489 = frontier_phi_77_pred_5;
                    uint _2655 = _2654 + 1u;
                    if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2648 = _2489;
                        _2649 = _2491;
                        _2650 = _2493;
                        _2651 = _2495;
                        _2652 = _2497;
                        _2653 = _2499;
                        _2654 = _2655;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2493;
                frontier_phi_58_59_ladder_1 = _2499;
                frontier_phi_58_59_ladder_2 = _2497;
                frontier_phi_58_59_ladder_3 = _2495;
                frontier_phi_58_59_ladder_4 = _2491;
                frontier_phi_58_59_ladder_5 = _2489;
            }
            else
            {
                frontier_phi_58_59_ladder = _2372;
                frontier_phi_58_59_ladder_1 = _2378;
                frontier_phi_58_59_ladder_2 = _2376;
                frontier_phi_58_59_ladder_3 = _2374;
                frontier_phi_58_59_ladder_4 = _2370;
                frontier_phi_58_59_ladder_5 = _2368;
            }
            _2488 = frontier_phi_58_59_ladder_5;
            _2490 = frontier_phi_58_59_ladder_4;
            _2492 = frontier_phi_58_59_ladder;
            _2494 = frontier_phi_58_59_ladder_3;
            _2496 = frontier_phi_58_59_ladder_2;
            _2498 = frontier_phi_58_59_ladder_1;
        }
        float _2503 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2275 = (_2503 * _2494) + _1711;
        _2277 = (_2503 * _2496) + _1713;
        _2279 = (_2503 * _2498) + _1715;
        _2281 = ((_2488 * _487) * _2503) + _2056;
        _2283 = ((_2490 * _489) * _2503) + _2058;
        _2285 = ((_2492 * _490) * _2503) + _2060;
    }
    else
    {
        _2275 = _1711;
        _2277 = _1713;
        _2279 = _1715;
        _2281 = _2056;
        _2283 = _2058;
        _2285 = _2060;
    }
    float _4242 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4253 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4264 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4275 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _2303 = ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2275 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _502))) + ((_2281 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2304 = ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2277 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _502))) + ((_2283 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2305 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2279 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _502))) + ((_2285 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2306 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2308 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2313 = cbInstanceData._m0[_461 + 6u].w * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)));
    float _2318 = _421 / cbSceneParam._m0[86u].x;
    float _2319 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2394 = _2393 / _343;
        float _2405 = _2394 * _394;
        float _2406 = _395 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _396;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2605;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2605 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2549 = 1.0 / cbSceneParam._m0[80u].x;
            float _2550 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2551 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            float _2561 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : min(_2551, 0.0));
            _2605 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2560 - _2561) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0))))) * _2549)) - ((exp2(_2428 * _2560) - exp2(_2428 * _2561)) * _2549))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2607 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2616 = exp2((_2605 * (-1.44269502162933349609375)) * (1.0 - _2607.w));
        float _2617 = log2(_2616);
        float _2633 = log2(_2338);
        _2430 = (exp2(_2633 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].x)) * _2607.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2432 = (exp2(_2633 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].y)) * _2607.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2434 = (exp2(_2633 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].z)) * _2607.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2436 = _2616 * _2338;
    }
    else
    {
        _2430 = _2335;
        _2432 = _2336;
        _2434 = _2337;
        _2436 = _2338;
    }
    bool _2643;
    vec4 _2446;
    vec4 _2468;
    float _2470;
    float _2474;
    float _2475;
    float _2476;
    float _2477;
    bool _2487;
    for (;;)
    {
        _2446 = cbMatDynParam._m0[0u];
        float _2448 = roundEven(_2446.y);
        bool _2449 = _2448 == 3.0;
        float _2450 = log2(_2436);
        float _2457 = exp2(_2450 * cbSceneParam._m0[78u].x) * _2306;
        float _2458 = exp2(_2450 * cbSceneParam._m0[78u].y) * _2307;
        float _2459 = exp2(_2450 * cbSceneParam._m0[78u].z) * _2308;
        float _2466 = _410 + (-0.5);
        _2468 = cbMtdParam._m0[1u];
        _2470 = _2468.y * _2466;
        float _2473 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2474 = _2473 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
        _2475 = _2473 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
        _2476 = _2473 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
        _2477 = _2466 * 0.999000012874603271484375;
        _2487 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2487)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2477) < 0.5)
            {
                _2643 = true;
                break;
            }
        }
        uint _2584 = _463 + uint(_2446.w);
        if ((cbInstanceData._m0[_2584].w < 1.0) && ((cbInstanceData._m0[_2584].w + _2477) < 0.5))
        {
            _2643 = true;
            break;
        }
        if ((_2470 + _286) < _2468.x)
        {
            _2643 = true;
            break;
        }
        _2643 = false;
        break;
    }
    float _2848;
    if (_2643)
    {
        discard_state = true;
        _2848 = 0.0;
    }
    else
    {
        _2848 = _2313;
    }
    SV_Target.x = _2474;
    SV_Target.y = _2475;
    SV_Target.z = _2476;
    SV_Target.w = _2848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2313;
    discard_exit();
}


