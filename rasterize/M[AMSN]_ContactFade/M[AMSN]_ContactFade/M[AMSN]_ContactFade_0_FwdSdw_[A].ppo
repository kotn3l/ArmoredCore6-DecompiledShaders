#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _928;
float _3606;
float _3607;
float _3608;
float _3609;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.w;
    float _241 = cbMtdParam._m0[9u].x * _228.x;
    float _242 = cbMtdParam._m0[9u].y * _228.y;
    float _243 = cbMtdParam._m0[9u].z * _228.z;
    vec4 _256 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _258 = _256.x;
    bool _265 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _282 = ((_265 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _258)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _258))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3618 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _285 = 1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)));
    float _3629 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _286 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _294 = _234 - (((_286 * _286) * _234) * (3.0 - (_286 * 2.0)));
    vec4 _306 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = cbMtdParam._m0[10u].x + _306.x;
    vec4 _324 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _328 = _324.z;
    float _331 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_331, _333), vec2(_331, _333));
    float _3640 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))));
    float _342 = fma(_339, _204 * NORMAL.x, fma(_333, _211 * TANGENT.x, (_197 * _190) * _331));
    float _345 = fma(_339, _204 * NORMAL.y, fma(_333, _211 * TANGENT.y, (_197 * _191) * _331));
    float _348 = fma(_339, _204 * NORMAL.z, fma(_333, _211 * TANGENT.z, (_197 * _192) * _331));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _3651 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _356 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _357 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3684 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3695 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3706 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _361 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _366 = _265 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _417 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _407);
    float _418 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _407);
    float _419 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _407);
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _424 = _417 * _423;
    float _425 = _418 * _423;
    float _426 = _419 * _423;
    vec4 _431 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _433 = _431.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _607 = sqrt(((_417 * _417) + (_418 * _418)) + (_419 * _419));
        float _613 = (cbMatDynParam._m0[5u].x * _607) + cbMatDynParam._m0[5u].y;
        float _3717 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _618 = (cbMatDynParam._m0[5u].z * _607) + cbMatDynParam._m0[5u].w;
        float _3728 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) - _614)) + _614) < ((_433 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _444 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _445 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _465 = fma(_355, cbSceneParam._m0[5u].z, fma(_354, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _353));
    float _468 = fma(_355, cbSceneParam._m0[6u].z, fma(_354, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _353));
    float _471 = fma(_355, cbSceneParam._m0[7u].z, fma(_354, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _353));
    uint _484 = uint(roundEven(NORMAL.w)) * 13u;
    uint _486 = _484 + 9u;
    uint _487 = _486 + uint(cbMatDynParam._m0[0u].w);
    float _493 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_487].x;
    float _494 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_487].y;
    float _495 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_487].z;
    float _3739 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _499 = 1.0 - _361;
    float _500 = _496 * _499;
    float _501 = _497 * _499;
    float _502 = _498 * _499;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _361;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _361;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _361;
    float _510 = _507 + 0.039999999105930328369140625;
    float _512 = _508 + 0.039999999105930328369140625;
    float _513 = _509 + 0.039999999105930328369140625;
    vec4 _522 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _444, cbSceneParam._m0[86u].y * _445));
    float _525 = _522.x * TEXCOORD.z;
    float _526 = dot(vec3(_353, _354, _355), vec3(_424, _425, _426));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _353) - _424;
    float _534 = (_529 * _354) - _425;
    float _535 = (_529 * _355) - _426;
    float _539 = abs(dot(vec3(_424, _425, _426), vec3(_353, _354, _355)));
    float _3772 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_357);
    float _553 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _559 = (1.0 - _553) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _560 = _553 * _541;
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _652 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _656 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _660 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _685 = _588 + _353;
        float _686 = _592 + _354;
        float _687 = _596 + _355;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _652;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _656;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _660;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_652 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_656 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_660 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_721.x + (-0.5));
        float _757 = _755 * (_721.y + (-0.5));
        float _758 = _755 * (_721.z + (-0.5));
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_728.x + (-0.5));
        float _767 = _765 * (_728.y + (-0.5));
        float _768 = _765 * (_728.z + (-0.5));
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_735.x + (-0.5));
        float _777 = _775 * (_735.y + (-0.5));
        float _778 = _775 * (_735.z + (-0.5));
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(_353, _354, _355), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3820 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_353, _354, _355), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3853 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_353, _354, _355), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3886 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _971 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _975 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _979 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _1002 = _588 + _353;
        float _1003 = _592 + _354;
        float _1004 = _596 + _355;
        float _1014 = fma(_1004, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002)) - _971;
        float _1015 = fma(_1004, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002)) - _975;
        float _1016 = fma(_1004, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002)) - _979;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_971 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_975 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[35u].z) + ((((((_979 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_353, _354, _355), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3949 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_353, _354, _355), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3982 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_353, _354, _355), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4015 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _928;
        _1241 = _928;
        _1242 = _928;
        _1243 = _928;
        _1244 = _928;
        _1245 = _928;
        _1246 = _928;
        _1247 = _928;
        _1248 = _928;
        _1249 = _928;
        _1250 = _928;
        _1251 = _928;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _533 * 0.5;
    float _1309 = _534 * 0.5;
    float _1310 = _535 * 0.5;
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_927, _931, _934, _937));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_929, _932, _935, _938));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_930, _933, _936, _939));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1376 : min(cbModelParam._m0[25u].z, _1376));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1440 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1443 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1471;
        if (_1437 > 0.0)
        {
            _1471 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1471 = frontier_phi_17_15_ladder;
        }
        float _1647;
        if (_1440 > 0.0)
        {
            _1647 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1647 = frontier_phi_26_22_ladder;
        }
        float _1943;
        if (_1443 > 0.0)
        {
            _1943 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1943 = frontier_phi_38_33_ladder;
        }
        float _1945 = isnan(_1647) ? _1471 : (isnan(_1471) ? _1647 : min(_1471, _1647));
        float _1946 = isnan(_1943) ? _1945 : (isnan(_1945) ? _1943 : min(_1945, _1943));
        float _1950 = (_1946 * _1437) + _1426;
        float _1951 = (_1946 * _1440) + _1430;
        float _1952 = (_1946 * _1443) + _1434;
        float _1953 = _1946 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1953;
        float _1957 = _1953 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 > _1957) || ((_1951 < _1955) || ((_1950 < _1955) || (_1950 > _1957))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1952, cbModelParam._m0[9u].z, fma(_1951, cbModelParam._m0[9u].y, _1950 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1952, cbModelParam._m0[10u].z, fma(_1951, cbModelParam._m0[10u].y, _1950 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1952, cbModelParam._m0[11u].z, fma(_1951, cbModelParam._m0[11u].y, _1950 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_16_38_ladder = _2097.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2097.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2097.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_16_38_ladder_2;
        _1461 = frontier_phi_16_38_ladder_1;
        _1463 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1377);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1467 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1467 : min(cbModelParam._m0[25u].w, _1467));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1539 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1542 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1652;
        if (_1536 > 0.0)
        {
            _1652 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_28_24_ladder;
        }
        float _1970;
        if (_1539 > 0.0)
        {
            _1970 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1970 = frontier_phi_40_35_ladder;
        }
        float _2308;
        if (_1542 > 0.0)
        {
            _2308 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2308 = frontier_phi_50_47_ladder;
        }
        float _2310 = isnan(_1970) ? _1652 : (isnan(_1652) ? _1970 : min(_1652, _1970));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1536) + _1525;
        float _2316 = (_2311 * _1539) + _1529;
        float _2317 = (_2311 * _1542) + _1533;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2318;
        float _2321 = _2318 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2317 > _2321) || ((_2317 < _2319) || ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 < _2319) || (_2315 > _2321))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2317, cbModelParam._m0[17u].z, fma(_2316, cbModelParam._m0[17u].y, _2315 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2317, cbModelParam._m0[18u].z, fma(_2316, cbModelParam._m0[18u].y, _2315 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2317, cbModelParam._m0[19u].z, fma(_2316, cbModelParam._m0[19u].y, _2315 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_25_50_ladder = _2439.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2439.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2439.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_25_50_ladder_2;
        _1563 = frontier_phi_25_50_ladder_1;
        _1565 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1468);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1578 = (((_559 * _510) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1580 = (((_559 * _512) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_559 * _513) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1639 = _1626 / _1638;
    float _1640 = _1630 / _1638;
    float _1641 = _1634 / _1638;
    float _1788;
    float _1789;
    float _1790;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1668 = ((uint(_1641 > cbSceneParam._m0[59u].y) + uint(_1641 > cbSceneParam._m0[59u].x)) + uint(_1641 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1669 = _1668 + 43u;
        uint _1677 = _1668 + 44u;
        uint _1685 = _1668 + 45u;
        uint _1693 = _1668 + 46u;
        float _1704 = fma(_1638, cbSceneParam._m0[_1669].w, fma(_1634, cbSceneParam._m0[_1669].z, fma(_1630, cbSceneParam._m0[_1669].y, _1626 * cbSceneParam._m0[_1669].x)));
        float _1708 = fma(_1638, cbSceneParam._m0[_1677].w, fma(_1634, cbSceneParam._m0[_1677].z, fma(_1630, cbSceneParam._m0[_1677].y, _1626 * cbSceneParam._m0[_1677].x)));
        float _1716 = fma(_1638, cbSceneParam._m0[_1693].w, fma(_1634, cbSceneParam._m0[_1693].z, fma(_1630, cbSceneParam._m0[_1693].y, _1626 * cbSceneParam._m0[_1693].x)));
        float _1721 = cbSceneParam._m0[33u].z * _1716;
        float _1723 = cbSceneParam._m0[33u].w * _1716;
        float _1726 = fma(_1638, cbSceneParam._m0[_1685].w, fma(_1634, cbSceneParam._m0[_1685].z, fma(_1630, cbSceneParam._m0[_1685].y, _1626 * cbSceneParam._m0[_1685].x))) / _1716;
        float _1774 = (cbSceneParam._m0[33u].x - sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641))) * cbSceneParam._m0[33u].y;
        float _4141 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1781 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1721 + _1704) / _1716, (_1723 + _1708) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 + _1704) / _1716, (_1708 - _1721) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 - _1721) / _1716, (_1708 - _1723) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 - _1723) / _1716, (_1721 + _1708) / _1716), _1726), 0.0)).x), vec4(0.25)));
        _1788 = 1.0 - (_1781 * cbSceneParam._m0[34u].x);
        _1789 = 1.0 - (_1781 * cbSceneParam._m0[34u].y);
        _1790 = 1.0 - (_1781 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1788 = 1.0;
        _1789 = 1.0;
        _1790 = 1.0;
    }
    float _1854;
    float _1856;
    float _1858;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1842 = fma(_1638, cbSceneParam._m0[63u].w, fma(_1634, cbSceneParam._m0[63u].z, fma(_1630, cbSceneParam._m0[63u].y, _1626 * cbSceneParam._m0[63u].x)));
        float _1843 = fma(_1638, cbSceneParam._m0[60u].w, fma(_1634, cbSceneParam._m0[60u].z, fma(_1630, cbSceneParam._m0[60u].y, _1626 * cbSceneParam._m0[60u].x))) / _1842;
        float _1844 = fma(_1638, cbSceneParam._m0[61u].w, fma(_1634, cbSceneParam._m0[61u].z, fma(_1630, cbSceneParam._m0[61u].y, _1626 * cbSceneParam._m0[61u].x))) / _1842;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1843 >= cbSceneParam._m0[64u].x) && (_1844 >= cbSceneParam._m0[64u].y)) && (_1843 <= cbSceneParam._m0[64u].z)) && (_1844 <= cbSceneParam._m0[64u].w))
        {
            float _1983 = fma(_1638, cbSceneParam._m0[62u].w, fma(_1634, cbSceneParam._m0[62u].z, fma(_1630, cbSceneParam._m0[62u].y, _1626 * cbSceneParam._m0[62u].x))) / _1842;
            float _1987 = isnan(cbSceneParam._m0[41u].w) ? _1983 : (isnan(_1983) ? cbSceneParam._m0[41u].w : max(_1983, cbSceneParam._m0[41u].w));
            float _2030 = (cbSceneParam._m0[33u].x - sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641))) * cbSceneParam._m0[33u].y;
            float _4157 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
            float _2037 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1843, cbSceneParam._m0[33u].w + _1844), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1843, _1844 - cbSceneParam._m0[33u].z), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1843 - cbSceneParam._m0[33u].z, _1844 - cbSceneParam._m0[33u].w), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1843 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1844), _1987), 0.0)).x), vec4(0.25)));
            float _2041 = 1.0 - (_2037 * cbSceneParam._m0[34u].x);
            float _2042 = 1.0 - (_2037 * cbSceneParam._m0[34u].y);
            float _2043 = 1.0 - (_2037 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2043) ? _1790 : (isnan(_1790) ? _2043 : min(_1790, _2043));
            frontier_phi_37_36_ladder_1 = isnan(_2042) ? _1789 : (isnan(_1789) ? _2042 : min(_1789, _2042));
            frontier_phi_37_36_ladder_2 = isnan(_2041) ? _1788 : (isnan(_1788) ? _2041 : min(_1788, _2041));
        }
        else
        {
            frontier_phi_37_36_ladder = _1790;
            frontier_phi_37_36_ladder_1 = _1789;
            frontier_phi_37_36_ladder_2 = _1788;
        }
        _1854 = frontier_phi_37_36_ladder_2;
        _1856 = frontier_phi_37_36_ladder_1;
        _1858 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1854 = _1788;
        _1856 = _1789;
        _1858 = _1790;
    }
    uvec4 _1863 = floatBitsToUint(cbInstanceData._m0[_484 + 5u]);
    uint _1865 = _1863.x * 14u;
    uint _1866 = _1865 + 13u;
    float _1873 = _525 + (-1.0);
    float _1878 = (cbLight._m0[_1866].x * _1873) + 1.0;
    float _1879 = (cbLight._m0[_1866].y * _1873) + 1.0;
    float _1880 = (cbLight._m0[_1866].z * _1873) + 1.0;
    float _1881 = (cbLight._m0[_1866].w * _1873) + 1.0;
    uint _1882 = _1865 + 5u;
    float _1888 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1892 = _1865 + 4u;
    float _1902 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1906 = _1865 | 1u;
    float _1917 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_353, _354, _355));
    float _1920 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_353, _354, _355));
    float _4193 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _4204 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1925 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _1927 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * 0.3183098733425140380859375;
    float _1934 = ((cbLight._m0[_1882].x * _1888) * _1927) + (((cbLight._m0[_1892].x * _1854) * _1902) * _1925);
    float _1935 = ((_1888 * cbLight._m0[_1882].y) * _1927) + (((cbLight._m0[_1892].y * _1856) * _1902) * _1925);
    float _1936 = ((_1888 * cbLight._m0[_1882].z) * _1927) + (((cbLight._m0[_1892].z * _1858) * _1902) * _1925);
    uvec4 _1940 = floatBitsToUint(cbLight._m0[_1865 + 12u]);
    bool _1942 = _1940.x == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_1942)
    {
        _2044 = _1934;
        _2046 = _1935;
        _2048 = _1936;
    }
    else
    {
        uint _2052 = _1865 + 6u;
        float _2068 = (dot(vec3(cbLight._m0[_1865 + 2u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4215 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2071 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2044 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1934;
        _2046 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1935;
        _2048 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1936;
    }
    bool _2051 = _1940.y == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2051)
    {
        _2106 = _2044;
        _2108 = _2046;
        _2110 = _2048;
    }
    else
    {
        uint _2279 = _1865 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1865 + 3u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4231 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2298 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2106 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2044;
        _2108 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2046;
        _2110 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2048;
    }
    uint _2113 = _1865 + 8u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _357) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_1865].x + _424;
    float _2129 = cbLight._m0[_1865].y + _425;
    float _2130 = cbLight._m0[_1865].z + _426;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1865].xyz));
    float _4247 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _2142 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2143 = dot(vec3(_353, _354, _355), vec3(_2135, _2136, _2137));
    float _4269 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2135, _2136, _2137));
    float _4280 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2127 * _2127;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0);
    float _2164 = 0.959999978542327880859375 - _507;
    float _2166 = 0.959999978542327880859375 - _508;
    float _2167 = 0.959999978542327880859375 - _509;
    float _2174 = 1.0 - _2127;
    float _2185 = (0.5 / (((_2142 * ((_2141 * _2174) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2174) + _2127) * _2141))) * _2141;
    float _4291 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    uint _2201 = _1865 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _357) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_1906].x + _424;
    float _2215 = cbLight._m0[_1906].y + _425;
    float _2216 = cbLight._m0[_1906].z + _426;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1906].xyz));
    float _4302 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2228 = dot(vec3(_353, _354, _355), vec3(_2221, _2222, _2223));
    float _4313 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2221, _2222, _2223));
    float _4324 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
    float _2254 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2142 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2254) + _2213) * _2227))) * _2227;
    float _4335 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2276 = (((((_2247 * _2164) + _510) * cbLight._m0[_2201].x) * _2266) * _1888) + ((((cbLight._m0[_2113].x * _1854) * ((_2163 * _2164) + _510)) * _2187) * _1902);
    float _2277 = (((((_2247 * _2166) + _512) * cbLight._m0[_2201].y) * _2266) * _1888) + ((((cbLight._m0[_2113].y * _1856) * ((_2163 * _2166) + _512)) * _2187) * _1902);
    float _2278 = (((((_2247 * _2167) + _513) * cbLight._m0[_2201].z) * _2266) * _1888) + ((((cbLight._m0[_2113].z * _1858) * ((_2163 * _2167) + _513)) * _2187) * _1902);
    float _2334;
    float _2336;
    float _2338;
    if (_1942)
    {
        _2334 = _2276;
        _2336 = _2277;
        _2338 = _2278;
    }
    else
    {
        uint _2340 = _1865 + 2u;
        uint _2344 = _1865 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _357) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _424;
        float _2361 = cbLight._m0[_2340].y + _425;
        float _2362 = cbLight._m0[_2340].z + _426;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2340].xyz));
        float _4346 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2374 = dot(vec3(_353, _354, _355), vec3(_2367, _2368, _2369));
        float _4357 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4368 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2142 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2400) + _2359) * _2373))) * _2373;
        float _4379 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2334 = (((((_2393 * _2164) + _510) * cbLight._m0[_2344].x) * _2412) * _2413) + _2276;
        _2336 = (((((_2393 * _2166) + _512) * cbLight._m0[_2344].y) * _2412) * _2413) + _2277;
        _2338 = (((((_2393 * _2167) + _513) * cbLight._m0[_2344].z) * _2412) * _2413) + _2278;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2051)
    {
        _2444 = _2334;
        _2446 = _2336;
        _2448 = _2338;
    }
    else
    {
        uint _2455 = _1865 + 3u;
        uint _2459 = _1865 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _357) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _424;
        float _2476 = cbLight._m0[_2455].y + _425;
        float _2477 = cbLight._m0[_2455].z + _426;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2455].xyz));
        float _4395 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2489 = dot(vec3(_353, _354, _355), vec3(_2482, _2483, _2484));
        float _4406 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4417 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
        float _2515 = 1.0 - _2474;
        float _2525 = (0.5 / (((_2142 * ((_2488 * _2515) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2515) + _2474) * _2488))) * _2488;
        float _4428 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2444 = (((((_2508 * _2164) + _510) * cbLight._m0[_2459].x) * _2527) * _2528) + _2334;
        _2446 = (((((_2508 * _2166) + _512) * cbLight._m0[_2459].y) * _2527) * _2528) + _2336;
        _2448 = (((((_2508 * _2167) + _513) * cbLight._m0[_2459].z) * _2527) * _2528) + _2338;
    }
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_1863.y == 0u)
    {
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.x;
        uint _2561 = uint((float(_2549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _445) / _2550))) + floor(float(uint(cbSceneParam._m0[85u].x * _444) / _2550)));
        float _2571 = (log2(_1641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        uint _2575 = uint(isnan(14.0) ? _2572 : (isnan(_2572) ? 14.0 : min(_2572, 14.0)));
        uvec4 _2580 = texelFetch(g_lightClusterGridBuffer, int(((_2575 << 2u) + (_2561 << 6u)) >> 2u));
        uint _2581 = _2580.x;
        uint _2582 = _2549.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2582 >> 4u) & 15u)) + 4294967295u) & _2581) == 0u) || ((_2582 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            uint _2824 = 0u;
            uint _2833;
            bool _2834;
            for (;;)
            {
                _2833 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                _2834 = _2833 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2834)
                {
                    frontier_phi_71_pred = _2823;
                    frontier_phi_71_pred_1 = _2822;
                    frontier_phi_71_pred_2 = _2821;
                    frontier_phi_71_pred_3 = _2820;
                    frontier_phi_71_pred_4 = _2819;
                    frontier_phi_71_pred_5 = _2818;
                }
                else
                {
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    uint _2969;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2833;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    for (;;)
                    {
                        uint _2973 = uint(findLSB(_2969)) + (_2824 << 5u);
                        uint _2970 = (_2969 + 4294967295u) & _2969;
                        uint _2975 = _2973 * 48u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2995 = (_2973 * 48u) + 4u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3014 = (_2973 * 48u) + 8u;
                        vec3 _3025 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x));
                        float _3029 = _2989.x - _1639;
                        float _3030 = _2989.y - _1640;
                        float _3031 = _2989.z - _1641;
                        float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                        float _3035 = inversesqrt(_3032);
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3039 = dot(vec3(_465, _468, _471), vec3(_3036, _3037, _3038));
                        float _3044 = 1.0 - (_3032 * _2989.w);
                        float _4454 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3046 = sqrt(_3032) * _3008.w;
                        float _3049 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _3039) + _3050;
                        float _3056 = _3046 * _3046;
                        float _3060 = ((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3045) / ((_3056 * 0.699999988079071044921875) + 1.0);
                        float _3064 = (-0.0) - _1639;
                        float _3065 = (-0.0) - _1640;
                        float _3066 = (-0.0) - _1641;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3080 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                        float _3081 = 1.0 - _541;
                        float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                        float _3089 = _3088 * _3088;
                        float _3090 = _3089 * _3089;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3093 = _3073 + _3038;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3101 = dot(vec3(_465, _468, _471), vec3(_3071, _3072, _3073));
                        float _4470 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3105 = dot(vec3(_465, _468, _471), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                        float _4481 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                        float _3113 = _3049 * _3089;
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3039) + _3114;
                        float _4492 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3119 = 1.0 - _3089;
                        float _3129 = (0.5 / (((_3118 * ((_3104 * _3119) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3089) * _3104))) * _3118;
                        float _4503 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3140 = (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3112 * _3112) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125))) * _3045;
                        _2893 = (_3060 * _3008.x) + _2966;
                        _2894 = (_3060 * _3008.y) + _2967;
                        _2895 = (_3060 * _3008.z) + _2968;
                        _2890 = (_3140 * _3025.x) + _2963;
                        _2891 = (_3140 * _3025.y) + _2964;
                        _2892 = (_3140 * _3025.z) + _2965;
                        if (_2970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2970;
                        }
                    }
                    frontier_phi_71_pred = _2895;
                    frontier_phi_71_pred_1 = _2894;
                    frontier_phi_71_pred_2 = _2893;
                    frontier_phi_71_pred_3 = _2892;
                    frontier_phi_71_pred_4 = _2891;
                    frontier_phi_71_pred_5 = _2890;
                }
                _2677 = frontier_phi_71_pred;
                _2675 = frontier_phi_71_pred_1;
                _2673 = frontier_phi_71_pred_2;
                _2671 = frontier_phi_71_pred_3;
                _2669 = frontier_phi_71_pred_4;
                _2667 = frontier_phi_71_pred_5;
                uint _2825 = _2824 + 1u;
                if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2818 = _2667;
                    _2819 = _2669;
                    _2820 = _2671;
                    _2821 = _2673;
                    _2822 = _2675;
                    _2823 = _2677;
                    _2824 = _2825;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((4294967295u << _2683) & _2581) == 0u)
        {
            _2786 = _2666;
            _2788 = _2668;
            _2790 = _2670;
            _2792 = _2672;
            _2794 = _2674;
            _2796 = _2676;
        }
        else
        {
            float _2811 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
            float _2812 = _2811 * _1639;
            float _2813 = _2811 * _1640;
            float _2814 = _2811 * _1641;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2946 = _2666;
                float _2947 = _2668;
                float _2948 = _2670;
                float _2949 = _2672;
                float _2950 = _2674;
                float _2951 = _2676;
                uint _2952 = _2683;
                uint _2961;
                bool _2962;
                for (;;)
                {
                    _2961 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                    _2962 = _2961 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2962)
                    {
                        frontier_phi_82_pred = _2951;
                        frontier_phi_82_pred_1 = _2950;
                        frontier_phi_82_pred_2 = _2949;
                        frontier_phi_82_pred_3 = _2948;
                        frontier_phi_82_pred_4 = _2947;
                        frontier_phi_82_pred_5 = _2946;
                    }
                    else
                    {
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        uint _3173 = _2961;
                        uint _3174;
                        vec4 _3199;
                        float _3200;
                        vec4 _3215;
                        vec3 _3227;
                        vec4 _3243;
                        vec4 _3259;
                        float _3306;
                        bool _3307;
                        for (;;)
                        {
                            uint _3184 = ((_2952 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3173));
                            _3174 = (_3173 + 4294967295u) & _3173;
                            uint _3186 = _3184 * 40u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3200 = _3199.w;
                            uint _3202 = (_3184 * 40u) + 4u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3184 * 40u) + 8u;
                            _3227 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x));
                            uint _3230 = (_3184 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3184 * 40u) + 20u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3184 * 40u) + 24u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3281 = (_3184 * 40u) + 28u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3306 = fma(_1641, _3294.z, fma(_1640, _3294.y, _3294.x * _1639)) + _3294.w;
                            _3307 = !((fma(_1641, _3275.z, fma(_1640, _3275.y, _3275.x * _1639)) + _3275.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3307)
                            {
                                float _3334 = _3199.x - _1639;
                                float _3335 = _3199.y - _1640;
                                float _3336 = _3199.z - _1641;
                                float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                                float _3340 = inversesqrt(_3337);
                                float _3341 = _3340 * _3334;
                                float _3342 = _3340 * _3335;
                                float _3343 = _3340 * _3336;
                                float _3347 = 1.0 - (_3337 / (_3200 * _3200));
                                float _4514 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3352 = sqrt(_3337) * _3215.w;
                                float _3354 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                                float _3355 = _3354 * _3354;
                                float _3358 = ((1.0 - _3355) * dot(vec3(_3341, _3342, _3343), vec3(_465, _468, _471))) + _3355;
                                float _3361 = _3352 * _3352;
                                float _3365 = (fma(_1641, _3243.z, fma(_1640, _3243.y, _3243.x * _1639)) + _3243.w) / _3306;
                                float _3366 = (fma(_1641, _3259.z, fma(_1640, _3259.y, _3259.x * _1639)) + _3259.w) / _3306;
                                float _3370 = 1.0 - dot(vec2(_3365, _3366), vec2(_3365, _3366));
                                float _4530 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3372 = _3371 * (((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3348) / ((_3361 * 0.699999988079071044921875) + 1.0));
                                float _3384 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                                float _3385 = 1.0 - _541;
                                float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                                float _3393 = _3392 * _3392;
                                float _3394 = _3393 * _3393;
                                float _3395 = _3341 - _2812;
                                float _3396 = _3342 - _2813;
                                float _3397 = _3343 - _2814;
                                float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                                float _3405 = dot(vec3(_465, _468, _471), vec3((-0.0) - _2812, (-0.0) - _2813, (-0.0) - _2814));
                                float _4541 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3409 = dot(vec3(_465, _468, _471), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                                float _4552 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                                float _3417 = _3354 * _3393;
                                float _3418 = _3417 * _3417;
                                float _3424 = ((1.0 - _3418) * dot(vec3(_465, _468, _471), vec3(_3341, _3342, _3343))) + _3418;
                                float _4563 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3426 = 1.0 - _3393;
                                float _3436 = (0.5 / (((_3425 * ((_3408 * _3426) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3393) * _3408))) * _3425;
                                float _4574 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3446 = (_3371 * _3348) * (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3416 * _3416) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3372 * _3215.z;
                                frontier_phi_88_pred_1 = _3372 * _3215.y;
                                frontier_phi_88_pred_2 = _3372 * _3215.x;
                                frontier_phi_88_pred_3 = _3446 * _3227.z;
                                frontier_phi_88_pred_4 = _3446 * _3227.y;
                                frontier_phi_88_pred_5 = _3446 * _3227.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_88_pred;
                            _3454 = frontier_phi_88_pred_1;
                            _3453 = frontier_phi_88_pred_2;
                            _3452 = frontier_phi_88_pred_3;
                            _3451 = frontier_phi_88_pred_4;
                            _3450 = frontier_phi_88_pred_5;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            _3154 = _3450 + _3167;
                            _3155 = _3451 + _3168;
                            _3156 = _3452 + _3169;
                            if (_3174 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3174;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3159;
                        frontier_phi_82_pred_1 = _3158;
                        frontier_phi_82_pred_2 = _3157;
                        frontier_phi_82_pred_3 = _3156;
                        frontier_phi_82_pred_4 = _3155;
                        frontier_phi_82_pred_5 = _3154;
                    }
                    _2797 = frontier_phi_82_pred;
                    _2795 = frontier_phi_82_pred_1;
                    _2793 = frontier_phi_82_pred_2;
                    _2791 = frontier_phi_82_pred_3;
                    _2789 = frontier_phi_82_pred_4;
                    _2787 = frontier_phi_82_pred_5;
                    uint _2953 = _2952 + 1u;
                    if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2946 = _2787;
                        _2947 = _2789;
                        _2948 = _2791;
                        _2949 = _2793;
                        _2950 = _2795;
                        _2951 = _2797;
                        _2952 = _2953;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2793;
                frontier_phi_63_64_ladder_1 = _2797;
                frontier_phi_63_64_ladder_2 = _2795;
                frontier_phi_63_64_ladder_3 = _2791;
                frontier_phi_63_64_ladder_4 = _2789;
                frontier_phi_63_64_ladder_5 = _2787;
            }
            else
            {
                frontier_phi_63_64_ladder = _2672;
                frontier_phi_63_64_ladder_1 = _2676;
                frontier_phi_63_64_ladder_2 = _2674;
                frontier_phi_63_64_ladder_3 = _2670;
                frontier_phi_63_64_ladder_4 = _2668;
                frontier_phi_63_64_ladder_5 = _2666;
            }
            _2786 = frontier_phi_63_64_ladder_5;
            _2788 = frontier_phi_63_64_ladder_4;
            _2790 = frontier_phi_63_64_ladder_3;
            _2792 = frontier_phi_63_64_ladder;
            _2794 = frontier_phi_63_64_ladder_2;
            _2796 = frontier_phi_63_64_ladder_1;
        }
        float _2801 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2594 = (_2801 * _2792) + _2106;
        _2596 = (_2801 * _2794) + _2108;
        _2598 = (_2801 * _2796) + _2110;
        _2600 = ((_2786 * _510) * _2801) + _2444;
        _2602 = ((_2788 * _512) * _2801) + _2446;
        _2604 = ((_2790 * _513) * _2801) + _2448;
    }
    else
    {
        _2594 = _2106;
        _2596 = _2108;
        _2598 = _2110;
        _2600 = _2444;
        _2602 = _2446;
        _2604 = _2448;
    }
    float _4590 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4601 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4612 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4623 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2622 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2594 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _525))) + ((_2600 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2623 = ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2596 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _525))) + ((_2602 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2624 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2598 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _525))) + ((_2604 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2625 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2627 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2632 = cbInstanceData._m0[_484 + 6u].w * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)));
    float _2637 = _444 / cbSceneParam._m0[86u].x;
    float _2638 = _445 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _366 : (isnan(_366) ? cbSceneParam._m0[77u].w : min(_366, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_366 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_366) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _366 : min(cbSceneParam._m0[80u].w, _366));
        float _2692 = _2691 / _366;
        float _2703 = _2692 * _417;
        float _2704 = _418 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2706 = _2692 * _419;
        float _2708 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2704;
        float _2716 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2903;
        if (abs((_2705 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2903 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2847 = 1.0 / cbSceneParam._m0[80u].x;
            float _2848 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2849 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            _2903 = ((abs(_2716 / _2705) * cbSceneParam._m0[80u].y) * ((((_2858 - _2859) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))))) * _2847)) - ((exp2(_2726 * _2858) - exp2(_2726 * _2859)) * _2847))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2905 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2914 = exp2((_2903 * (-1.44269502162933349609375)) * (1.0 - _2905.w));
        float _2915 = log2(_2914);
        float _2931 = log2(_2657);
        _2728 = (exp2(_2931 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].x)) * _2905.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2730 = (exp2(_2931 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].y)) * _2905.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2732 = (exp2(_2931 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].z)) * _2905.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2734 = _2914 * _2657;
    }
    else
    {
        _2728 = _2654;
        _2730 = _2655;
        _2732 = _2656;
        _2734 = _2657;
    }
    bool _2941;
    vec4 _2744;
    vec4 _2766;
    float _2768;
    float _2772;
    float _2773;
    float _2774;
    float _2775;
    bool _2785;
    for (;;)
    {
        _2744 = cbMatDynParam._m0[0u];
        float _2746 = roundEven(_2744.y);
        bool _2747 = _2746 == 3.0;
        float _2748 = log2(_2734);
        float _2755 = exp2(_2748 * cbSceneParam._m0[78u].x) * _2625;
        float _2756 = exp2(_2748 * cbSceneParam._m0[78u].y) * _2626;
        float _2757 = exp2(_2748 * cbSceneParam._m0[78u].z) * _2627;
        float _2764 = _433 + (-0.5);
        _2766 = cbMtdParam._m0[1u];
        _2768 = _2766.y * _2764;
        float _2771 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2772 = _2771 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
        _2773 = _2771 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
        _2774 = _2771 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
        _2775 = _2764 * 0.999000012874603271484375;
        _2785 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2785)
        {
            if ((cbInstanceData._m0[_484 + 7u].x + _2775) < 0.5)
            {
                _2941 = true;
                break;
            }
        }
        uint _2882 = _486 + uint(_2744.w);
        if ((cbInstanceData._m0[_2882].w < 1.0) && ((cbInstanceData._m0[_2882].w + _2775) < 0.5))
        {
            _2941 = true;
            break;
        }
        if ((_2768 + _294) < _2766.x)
        {
            _2941 = true;
            break;
        }
        _2941 = false;
        break;
    }
    float _3145;
    if (_2941)
    {
        discard_state = true;
        _3145 = 0.0;
    }
    else
    {
        _3145 = _2632;
    }
    SV_Target.x = _2772;
    SV_Target.y = _2773;
    SV_Target.z = _2774;
    SV_Target.w = _3145;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2632;
    discard_exit();
}


