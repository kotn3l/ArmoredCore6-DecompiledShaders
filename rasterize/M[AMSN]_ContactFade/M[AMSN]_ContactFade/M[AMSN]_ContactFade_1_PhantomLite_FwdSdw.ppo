#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1030;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _260 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _250);
    float _261 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _250);
    float _262 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _250);
    vec4 _275 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _281 = _275.w;
    float _287 = cbMtdParam._m0[9u].x * _275.x;
    float _288 = cbMtdParam._m0[9u].y * _275.y;
    float _289 = cbMtdParam._m0[9u].z * _275.z;
    vec4 _301 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _303 = _301.x;
    bool _310 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _327 = ((_310 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _303)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _303))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3682 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _330 = 1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)));
    float _3693 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _339 = _281 - (((_331 * _331) * _281) * (3.0 - (_331 * 2.0)));
    vec4 _354 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _358 = _354.z;
    float _361 = (_354.x * 2.0) + (-1.0);
    float _363 = (_354.y * 2.0) + (-1.0);
    float _364 = dot(vec2(_361, _363), vec2(_361, _363));
    float _3704 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    float _372 = fma(_369, _196 * NORMAL.x, fma(_363, _203 * TANGENT.x, (_189 * _182) * _361));
    float _375 = fma(_369, _196 * NORMAL.y, fma(_363, _203 * TANGENT.y, (_189 * _183) * _361));
    float _378 = fma(_369, _196 * NORMAL.z, fma(_363, _203 * TANGENT.z, (_189 * _184) * _361));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _3715 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _386 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _387 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _388 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _389 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _390 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _391 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _409 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _410 = _409 * _260;
    float _411 = _409 * _261;
    float _412 = _409 * _262;
    float _419 = abs(exp2(log2(dot(vec3(_383, _384, _385), vec3(_410, _411, _412))) * cbMatDynParam._m0[12u].x));
    float _420 = isnan(0.100000001490116119384765625) ? _419 : (isnan(_419) ? 0.100000001490116119384765625 : max(_419, 0.100000001490116119384765625));
    float _426 = ((isnan(0.699999988079071044921875) ? _420 : (isnan(_420) ? 0.699999988079071044921875 : min(_420, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _449 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3791 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3802 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _457 = dot(vec3(_383, _384, _385), vec3(0.0, -1.0, 0.0));
    float _3813 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _467 = (_460 * _388) * cbMatDynParam._m0[11u].x;
    float _469 = (_460 * _389) * cbMatDynParam._m0[11u].y;
    float _471 = (_460 * _390) * cbMatDynParam._m0[11u].z;
    float _481 = dot(vec3(_410, _411, _412), vec3(_383, _384, _385)) * 2.0;
    float _491 = dot(vec3((-0.0) - (_410 - (_481 * _383)), (-0.0) - (_411 - (_481 * _384)), (-0.0) - (_412 - (_481 * _385))), vec3(0.0, -1.0, 0.0));
    float _3824 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _498 = exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 4.0);
    float _513 = _310 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _562 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _553);
    float _563 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _553);
    float _564 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _553);
    float _568 = inversesqrt(dot(vec3(_562, _563, _564), vec3(_562, _563, _564)));
    float _569 = _562 * _568;
    float _570 = _563 * _568;
    float _571 = _564 * _568;
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _597 = fma(_385, cbSceneParam._m0[5u].z, fma(_384, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _383));
    float _600 = fma(_385, cbSceneParam._m0[6u].z, fma(_384, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _383));
    float _603 = fma(_385, cbSceneParam._m0[7u].z, fma(_384, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _383));
    uint _616 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _616 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = ((cbMatDynParam._m0[9u].x * _388) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_619].x;
    float _626 = ((cbMatDynParam._m0[9u].y * _389) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_619].y;
    float _627 = ((cbMatDynParam._m0[9u].z * _390) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_619].z;
    float _3835 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _631 = 1.0 - _391;
    float _632 = _628 * _631;
    float _633 = _629 * _631;
    float _634 = _630 * _631;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _391;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _391;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _391;
    float _642 = _639 + 0.039999999105930328369140625;
    float _644 = _640 + 0.039999999105930328369140625;
    float _645 = _641 + 0.039999999105930328369140625;
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _657 = _654.x * TEXCOORD.z;
    float _658 = dot(vec3(_383, _384, _385), vec3(_569, _570, _571));
    float _661 = _658 * 2.0;
    float _665 = (_661 * _383) - _569;
    float _666 = (_661 * _384) - _570;
    float _667 = (_661 * _385) - _571;
    float _671 = abs(dot(vec3(_569, _570, _571), vec3(_383, _384, _385)));
    float _3868 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _673 = sqrt(_387);
    float _684 = exp2((_673 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_673 * 3.0));
    float _690 = (1.0 - _684) * ((_673 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _691 = _684 * _673;
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1029;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_727, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719));
        float _758 = fma(_727, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719));
        float _762 = fma(_727, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719));
        float _787 = _719 + _383;
        float _788 = _723 + _384;
        float _789 = _727 + _385;
        float _799 = fma(_789, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787)) - _754;
        float _800 = fma(_789, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787)) - _758;
        float _801 = fma(_789, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787)) - _762;
        float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
        float _818 = ((_805 * _799) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_805 * _800) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_805 * _801) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _857 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_823.x + (-0.5));
        float _859 = _857 * (_823.y + (-0.5));
        float _860 = _857 * (_823.z + (-0.5));
        float _867 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_830.x + (-0.5));
        float _869 = _867 * (_830.y + (-0.5));
        float _870 = _867 * (_830.z + (-0.5));
        float _877 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_837.x + (-0.5));
        float _879 = _877 * (_837.y + (-0.5));
        float _880 = _877 * (_837.z + (-0.5));
        float _887 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_844.x + (-0.5));
        float _889 = _887 * (_844.y + (-0.5));
        float _890 = _887 * (_844.z + (-0.5));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = _858 * 0.5;
        float _895 = _868 * 0.5;
        float _896 = _878 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _911 = (dot(vec3(_383, _384, _385), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _921 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3916 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_923 + 1.0))) + _928) * _891;
        float _938 = _859 * 0.5;
        float _939 = _869 * 0.5;
        float _940 = _879 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_383, _384, _385), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3949 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_965 + 1.0))) + _970) * _892;
        float _980 = _860 * 0.5;
        float _981 = _870 * 0.5;
        float _982 = _880 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_383, _384, _385), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3982 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1007 + 1.0))) + _1012) * _893;
        _1029 = _860;
        _1031 = _859;
        _1032 = _858;
        _1033 = _870;
        _1034 = _869;
        _1035 = _868;
        _1036 = _880;
        _1037 = _879;
        _1038 = _878;
        _1039 = _893;
        _1040 = _892;
        _1041 = _891;
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _1030;
        _1031 = _1030;
        _1032 = _1030;
        _1033 = _1030;
        _1034 = _1030;
        _1035 = _1030;
        _1036 = _1030;
        _1037 = _1030;
        _1038 = _1030;
        _1039 = _1030;
        _1040 = _1030;
        _1041 = _1030;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_727, cbModelParam._m0[30u].z, fma(_723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _719));
        float _1074 = fma(_727, cbModelParam._m0[31u].z, fma(_723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _719));
        float _1078 = fma(_727, cbModelParam._m0[32u].z, fma(_723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _719));
        float _1101 = _719 + _383;
        float _1102 = _723 + _384;
        float _1103 = _727 + _385;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_383, _384, _385), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4045 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_383, _384, _385), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4078 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_383, _384, _385), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4111 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1030;
        _1340 = _1030;
        _1341 = _1030;
        _1342 = _1030;
        _1343 = _1030;
        _1344 = _1030;
        _1345 = _1030;
        _1346 = _1030;
        _1347 = _1030;
        _1348 = _1030;
        _1349 = _1030;
        _1350 = _1030;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1043)) + _1043;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1044)) + _1044;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _665 * 0.5;
    float _1408 = _666 * 0.5;
    float _1409 = _667 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1029, _1033, _1036, _1039));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_727, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_727, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_727, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_667, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665));
        float _1539 = fma(_667, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665));
        float _1542 = fma(_667, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1570 = frontier_phi_14_12_ladder;
        }
        float _1745;
        if (_1539 > 0.0)
        {
            _1745 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1745 = frontier_phi_23_19_ladder;
        }
        float _2041;
        if (_1542 > 0.0)
        {
            _2041 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2041 = frontier_phi_35_30_ladder;
        }
        float _2043 = isnan(_1745) ? _1570 : (isnan(_1570) ? _1745 : min(_1570, _1745));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1536) + _1525;
        float _2049 = (_2044 * _1539) + _1529;
        float _2050 = (_2044 * _1542) + _1533;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2053 = (-1.0) - _2051;
        float _2055 = _2051 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2050 > _2055) || ((_2050 < _2053) || ((_2049 > _2055) || ((_2049 < _2053) || ((_2048 < _2053) || (_2048 > _2055))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2195 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2050, cbModelParam._m0[9u].z, fma(_2049, cbModelParam._m0[9u].y, _2048 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2050, cbModelParam._m0[10u].z, fma(_2049, cbModelParam._m0[10u].y, _2048 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2050, cbModelParam._m0[11u].z, fma(_2049, cbModelParam._m0[11u].y, _2048 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_13_35_ladder = _2195.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2195.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2195.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_13_35_ladder_2;
        _1560 = frontier_phi_13_35_ladder_1;
        _1562 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_665, _666, _667), _1476);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_727, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_727, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_727, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_667, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665));
        float _1638 = fma(_667, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665));
        float _1641 = fma(_667, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665));
        float _1750;
        if (_1635 > 0.0)
        {
            _1750 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1750 = frontier_phi_25_21_ladder;
        }
        float _2068;
        if (_1638 > 0.0)
        {
            _2068 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2068 = frontier_phi_37_32_ladder;
        }
        float _2406;
        if (_1641 > 0.0)
        {
            _2406 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2406 = frontier_phi_47_44_ladder;
        }
        float _2408 = isnan(_2068) ? _1750 : (isnan(_1750) ? _2068 : min(_1750, _2068));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1635) + _1624;
        float _2414 = (_2409 * _1638) + _1628;
        float _2415 = (_2409 * _1641) + _1632;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2416;
        float _2419 = _2416 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2415 > _2419) || ((_2415 < _2417) || ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 < _2417) || (_2413 > _2419))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2415, cbModelParam._m0[17u].z, fma(_2414, cbModelParam._m0[17u].y, _2413 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2415, cbModelParam._m0[18u].z, fma(_2414, cbModelParam._m0[18u].y, _2413 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2415, cbModelParam._m0[19u].z, fma(_2414, cbModelParam._m0[19u].y, _2413 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_22_47_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_22_47_ladder_2;
        _1662 = frontier_phi_22_47_ladder_1;
        _1664 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_665, _666, _667), _1567);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1677 = (((_690 * _642) + _691) * _657) * ((cbModelParam._m0[1u].w * (_1660 - _1558)) + _1558);
    float _1679 = (((_690 * _644) + _691) * _657) * ((cbModelParam._m0[1u].w * (_1662 - _1560)) + _1560);
    float _1681 = (((_690 * _645) + _691) * _657) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1737 = _1724 / _1736;
    float _1738 = _1728 / _1736;
    float _1739 = _1732 / _1736;
    float _1886;
    float _1887;
    float _1888;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1766 = ((uint(_1739 > cbSceneParam._m0[59u].y) + uint(_1739 > cbSceneParam._m0[59u].x)) + uint(_1739 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1767 = _1766 + 43u;
        uint _1775 = _1766 + 44u;
        uint _1783 = _1766 + 45u;
        uint _1791 = _1766 + 46u;
        float _1802 = fma(_1736, cbSceneParam._m0[_1767].w, fma(_1732, cbSceneParam._m0[_1767].z, fma(_1728, cbSceneParam._m0[_1767].y, _1724 * cbSceneParam._m0[_1767].x)));
        float _1806 = fma(_1736, cbSceneParam._m0[_1775].w, fma(_1732, cbSceneParam._m0[_1775].z, fma(_1728, cbSceneParam._m0[_1775].y, _1724 * cbSceneParam._m0[_1775].x)));
        float _1814 = fma(_1736, cbSceneParam._m0[_1791].w, fma(_1732, cbSceneParam._m0[_1791].z, fma(_1728, cbSceneParam._m0[_1791].y, _1724 * cbSceneParam._m0[_1791].x)));
        float _1819 = cbSceneParam._m0[33u].z * _1814;
        float _1821 = cbSceneParam._m0[33u].w * _1814;
        float _1824 = fma(_1736, cbSceneParam._m0[_1783].w, fma(_1732, cbSceneParam._m0[_1783].z, fma(_1728, cbSceneParam._m0[_1783].y, _1724 * cbSceneParam._m0[_1783].x))) / _1814;
        float _1872 = (cbSceneParam._m0[33u].x - sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739))) * cbSceneParam._m0[33u].y;
        float _4237 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1879 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1819 + _1802) / _1814, (_1821 + _1806) / _1814), _1824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1821 + _1802) / _1814, (_1806 - _1819) / _1814), _1824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1802 - _1819) / _1814, (_1806 - _1821) / _1814), _1824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1802 - _1821) / _1814, (_1819 + _1806) / _1814), _1824), 0.0)).x), vec4(0.25)));
        _1886 = 1.0 - (_1879 * cbSceneParam._m0[34u].x);
        _1887 = 1.0 - (_1879 * cbSceneParam._m0[34u].y);
        _1888 = 1.0 - (_1879 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1886 = 1.0;
        _1887 = 1.0;
        _1888 = 1.0;
    }
    float _1952;
    float _1954;
    float _1956;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1940 = fma(_1736, cbSceneParam._m0[63u].w, fma(_1732, cbSceneParam._m0[63u].z, fma(_1728, cbSceneParam._m0[63u].y, _1724 * cbSceneParam._m0[63u].x)));
        float _1941 = fma(_1736, cbSceneParam._m0[60u].w, fma(_1732, cbSceneParam._m0[60u].z, fma(_1728, cbSceneParam._m0[60u].y, _1724 * cbSceneParam._m0[60u].x))) / _1940;
        float _1942 = fma(_1736, cbSceneParam._m0[61u].w, fma(_1732, cbSceneParam._m0[61u].z, fma(_1728, cbSceneParam._m0[61u].y, _1724 * cbSceneParam._m0[61u].x))) / _1940;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1941 >= cbSceneParam._m0[64u].x) && (_1942 >= cbSceneParam._m0[64u].y)) && (_1941 <= cbSceneParam._m0[64u].z)) && (_1942 <= cbSceneParam._m0[64u].w))
        {
            float _2081 = fma(_1736, cbSceneParam._m0[62u].w, fma(_1732, cbSceneParam._m0[62u].z, fma(_1728, cbSceneParam._m0[62u].y, _1724 * cbSceneParam._m0[62u].x))) / _1940;
            float _2085 = isnan(cbSceneParam._m0[41u].w) ? _2081 : (isnan(_2081) ? cbSceneParam._m0[41u].w : max(_2081, cbSceneParam._m0[41u].w));
            float _2128 = (cbSceneParam._m0[33u].x - sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739))) * cbSceneParam._m0[33u].y;
            float _4253 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
            float _2135 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1941, cbSceneParam._m0[33u].w + _1942), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1941, _1942 - cbSceneParam._m0[33u].z), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1941 - cbSceneParam._m0[33u].z, _1942 - cbSceneParam._m0[33u].w), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1941 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1942), _2085), 0.0)).x), vec4(0.25)));
            float _2139 = 1.0 - (_2135 * cbSceneParam._m0[34u].x);
            float _2140 = 1.0 - (_2135 * cbSceneParam._m0[34u].y);
            float _2141 = 1.0 - (_2135 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2141) ? _1888 : (isnan(_1888) ? _2141 : min(_1888, _2141));
            frontier_phi_34_33_ladder_1 = isnan(_2140) ? _1887 : (isnan(_1887) ? _2140 : min(_1887, _2140));
            frontier_phi_34_33_ladder_2 = isnan(_2139) ? _1886 : (isnan(_1886) ? _2139 : min(_1886, _2139));
        }
        else
        {
            frontier_phi_34_33_ladder = _1888;
            frontier_phi_34_33_ladder_1 = _1887;
            frontier_phi_34_33_ladder_2 = _1886;
        }
        _1952 = frontier_phi_34_33_ladder_2;
        _1954 = frontier_phi_34_33_ladder_1;
        _1956 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1952 = _1886;
        _1954 = _1887;
        _1956 = _1888;
    }
    uvec4 _1961 = floatBitsToUint(cbInstanceData._m0[_616 + 5u]);
    uint _1963 = _1961.x * 14u;
    uint _1964 = _1963 + 13u;
    float _1971 = _657 + (-1.0);
    float _1976 = (cbLight._m0[_1964].x * _1971) + 1.0;
    float _1977 = (cbLight._m0[_1964].y * _1971) + 1.0;
    float _1978 = (cbLight._m0[_1964].z * _1971) + 1.0;
    float _1979 = (cbLight._m0[_1964].w * _1971) + 1.0;
    uint _1980 = _1963 + 5u;
    float _1986 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1990 = _1963 + 4u;
    float _2000 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2004 = _1963 | 1u;
    float _2015 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_383, _384, _385));
    float _2018 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_383, _384, _385));
    float _4289 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _4300 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2023 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2025 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2032 = ((cbLight._m0[_1980].x * _1986) * _2025) + (((cbLight._m0[_1990].x * _1952) * _2000) * _2023);
    float _2033 = ((_1986 * cbLight._m0[_1980].y) * _2025) + (((cbLight._m0[_1990].y * _1954) * _2000) * _2023);
    float _2034 = ((_1986 * cbLight._m0[_1980].z) * _2025) + (((cbLight._m0[_1990].z * _1956) * _2000) * _2023);
    uvec4 _2038 = floatBitsToUint(cbLight._m0[_1963 + 12u]);
    bool _2040 = _2038.x == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2040)
    {
        _2142 = _2032;
        _2144 = _2033;
        _2146 = _2034;
    }
    else
    {
        uint _2150 = _1963 + 6u;
        float _2166 = (dot(vec3(cbLight._m0[_1963 + 2u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4311 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2169 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2142 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _2032;
        _2144 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _2033;
        _2146 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _2034;
    }
    bool _2149 = _2038.y == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2149)
    {
        _2204 = _2142;
        _2206 = _2144;
        _2208 = _2146;
    }
    else
    {
        uint _2377 = _1963 + 7u;
        float _2393 = (dot(vec3(cbLight._m0[_1963 + 3u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4327 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2396 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2204 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2142;
        _2206 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2144;
        _2208 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2146;
    }
    uint _2211 = _1963 + 8u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _387) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_1963].x + _569;
    float _2227 = cbLight._m0[_1963].y + _570;
    float _2228 = cbLight._m0[_1963].z + _571;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1963].xyz));
    float _4343 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2240 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2241 = dot(vec3(_383, _384, _385), vec3(_2233, _2234, _2235));
    float _4365 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2233, _2234, _2235));
    float _4376 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2225 * _2225;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
    float _2262 = 0.959999978542327880859375 - _639;
    float _2264 = 0.959999978542327880859375 - _640;
    float _2265 = 0.959999978542327880859375 - _641;
    float _2272 = 1.0 - _2225;
    float _2283 = (0.5 / (((_2240 * ((_2239 * _2272) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2272) + _2225) * _2239))) * _2239;
    float _4387 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    uint _2299 = _1963 + 9u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _387) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2004].x + _569;
    float _2313 = cbLight._m0[_2004].y + _570;
    float _2314 = cbLight._m0[_2004].z + _571;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2004].xyz));
    float _4398 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2326 = dot(vec3(_383, _384, _385), vec3(_2319, _2320, _2321));
    float _4409 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2319, _2320, _2321));
    float _4420 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2311 * _2311;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
    float _2352 = 1.0 - _2311;
    float _2362 = (0.5 / (((_2240 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2352) + _2311) * _2325))) * _2325;
    float _4431 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    float _2374 = (((((_2345 * _2262) + _642) * cbLight._m0[_2299].x) * _2364) * _1986) + ((((cbLight._m0[_2211].x * _1952) * ((_2261 * _2262) + _642)) * _2285) * _2000);
    float _2375 = (((((_2345 * _2264) + _644) * cbLight._m0[_2299].y) * _2364) * _1986) + ((((cbLight._m0[_2211].y * _1954) * ((_2261 * _2264) + _644)) * _2285) * _2000);
    float _2376 = (((((_2345 * _2265) + _645) * cbLight._m0[_2299].z) * _2364) * _1986) + ((((cbLight._m0[_2211].z * _1956) * ((_2261 * _2265) + _645)) * _2285) * _2000);
    float _2432;
    float _2434;
    float _2436;
    if (_2040)
    {
        _2432 = _2374;
        _2434 = _2375;
        _2436 = _2376;
    }
    else
    {
        uint _2438 = _1963 + 2u;
        uint _2442 = _1963 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _387) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _569;
        float _2459 = cbLight._m0[_2438].y + _570;
        float _2460 = cbLight._m0[_2438].z + _571;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2438].xyz));
        float _4442 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2472 = dot(vec3(_383, _384, _385), vec3(_2465, _2466, _2467));
        float _4453 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4464 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2240 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2498) + _2457) * _2471))) * _2471;
        float _4475 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2432 = (((((_2491 * _2262) + _642) * cbLight._m0[_2442].x) * _2510) * _2511) + _2374;
        _2434 = (((((_2491 * _2264) + _644) * cbLight._m0[_2442].y) * _2510) * _2511) + _2375;
        _2436 = (((((_2491 * _2265) + _645) * cbLight._m0[_2442].z) * _2510) * _2511) + _2376;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2149)
    {
        _2542 = _2432;
        _2544 = _2434;
        _2546 = _2436;
    }
    else
    {
        uint _2553 = _1963 + 3u;
        uint _2557 = _1963 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _387) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _569;
        float _2574 = cbLight._m0[_2553].y + _570;
        float _2575 = cbLight._m0[_2553].z + _571;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2553].xyz));
        float _4491 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2587 = dot(vec3(_383, _384, _385), vec3(_2580, _2581, _2582));
        float _4502 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4513 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2613 = 1.0 - _2572;
        float _2623 = (0.5 / (((_2240 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2613) + _2572) * _2586))) * _2586;
        float _4524 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2542 = (((((_2606 * _2262) + _642) * cbLight._m0[_2557].x) * _2625) * _2626) + _2432;
        _2544 = (((((_2606 * _2264) + _644) * cbLight._m0[_2557].y) * _2625) * _2626) + _2434;
        _2546 = (((((_2606 * _2265) + _645) * cbLight._m0[_2557].z) * _2625) * _2626) + _2436;
    }
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_1961.y == 0u)
    {
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.x;
        uint _2659 = uint((float(_2647.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _2648))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _2648)));
        float _2669 = (log2(_1739 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        uint _2673 = uint(isnan(14.0) ? _2670 : (isnan(_2670) ? 14.0 : min(_2670, 14.0)));
        uvec4 _2678 = texelFetch(g_lightClusterGridBuffer, int(((_2673 << 2u) + (_2659 << 6u)) >> 2u));
        uint _2679 = _2678.x;
        uint _2680 = _2647.z;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((((1u << ((_2680 >> 4u) & 15u)) + 4294967295u) & _2679) == 0u) || ((_2680 & 240u) == 0u))
        {
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
        }
        else
        {
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            uint _2944 = 0u;
            uint _2953;
            bool _2954;
            for (;;)
            {
                _2953 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                _2954 = _2953 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2954)
                {
                    frontier_phi_66_pred = _2943;
                    frontier_phi_66_pred_1 = _2942;
                    frontier_phi_66_pred_2 = _2941;
                    frontier_phi_66_pred_3 = _2940;
                    frontier_phi_66_pred_4 = _2939;
                    frontier_phi_66_pred_5 = _2938;
                }
                else
                {
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    uint _3068;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2953;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    for (;;)
                    {
                        uint _3072 = uint(findLSB(_3068)) + (_2944 << 5u);
                        uint _3069 = (_3068 + 4294967295u) & _3068;
                        uint _3074 = _3072 * 48u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3094 = (_3072 * 48u) + 4u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3113 = (_3072 * 48u) + 8u;
                        vec3 _3124 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x));
                        float _3128 = _3088.x - _1737;
                        float _3129 = _3088.y - _1738;
                        float _3130 = _3088.z - _1739;
                        float _3131 = dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130));
                        float _3134 = inversesqrt(_3131);
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3138 = dot(vec3(_597, _600, _603), vec3(_3135, _3136, _3137));
                        float _3143 = 1.0 - (_3131 * _3088.w);
                        float _4550 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3145 = sqrt(_3131) * _3107.w;
                        float _3148 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3138) + _3149;
                        float _3155 = _3145 * _3145;
                        float _3158 = ((isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * _3144) / ((_3155 * 0.699999988079071044921875) + 1.0);
                        float _3162 = (-0.0) - _1737;
                        float _3163 = (-0.0) - _1738;
                        float _3164 = (-0.0) - _1739;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3178 = exp2(log2(1.0 / ((_3155 * 3.5) + 5.0)) * 0.25);
                        float _3179 = 1.0 - _673;
                        float _3186 = sqrt(1.0 - ((1.0 - (_3179 * _3179)) * (1.0 - (_3178 * _3178))));
                        float _3187 = _3186 * _3186;
                        float _3188 = _3187 * _3187;
                        float _3189 = _3169 + _3135;
                        float _3190 = _3170 + _3136;
                        float _3191 = _3171 + _3137;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3199 = dot(vec3(_597, _600, _603), vec3(_3169, _3170, _3171));
                        float _4566 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3203 = dot(vec3(_597, _600, _603), vec3(_3195 * _3189, _3195 * _3190, _3195 * _3191));
                        float _4577 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3210 = ((_3206 * _3206) * (_3188 + (-1.0))) + 1.0;
                        float _3211 = _3148 * _3187;
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3138) + _3212;
                        float _4588 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3217 = 1.0 - _3187;
                        float _3227 = (0.5 / (((_3216 * ((_3202 * _3217) + _3187)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3187) * _3202))) * _3216;
                        float _4599 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3238 = (((_3188 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3210 * _3210) * ((_3155 * 2.1991131305694580078125) + 3.141590118408203125))) * _3144;
                        _2997 = (_3158 * _3107.x) + _3065;
                        _2998 = (_3158 * _3107.y) + _3066;
                        _2999 = (_3158 * _3107.z) + _3067;
                        _2994 = (_3238 * _3124.x) + _3062;
                        _2995 = (_3238 * _3124.y) + _3063;
                        _2996 = (_3238 * _3124.z) + _3064;
                        if (_3069 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3069;
                        }
                    }
                    frontier_phi_66_pred = _2999;
                    frontier_phi_66_pred_1 = _2998;
                    frontier_phi_66_pred_2 = _2997;
                    frontier_phi_66_pred_3 = _2996;
                    frontier_phi_66_pred_4 = _2995;
                    frontier_phi_66_pred_5 = _2994;
                }
                _2796 = frontier_phi_66_pred;
                _2794 = frontier_phi_66_pred_1;
                _2792 = frontier_phi_66_pred_2;
                _2790 = frontier_phi_66_pred_3;
                _2788 = frontier_phi_66_pred_4;
                _2786 = frontier_phi_66_pred_5;
                uint _2945 = _2944 + 1u;
                if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2938 = _2786;
                    _2939 = _2788;
                    _2940 = _2790;
                    _2941 = _2792;
                    _2942 = _2794;
                    _2943 = _2796;
                    _2944 = _2945;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
        }
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.z;
        uint _2802 = (_2800 >> 8u) & 15u;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((4294967295u << _2802) & _2679) == 0u)
        {
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
        }
        else
        {
            float _2931 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
            float _2932 = _2931 * _1737;
            float _2933 = _2931 * _1738;
            float _2934 = _2931 * _1739;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2802 < ((_2800 >> 12u) & 15u))
            {
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _3045 = _2785;
                float _3046 = _2787;
                float _3047 = _2789;
                float _3048 = _2791;
                float _3049 = _2793;
                float _3050 = _2795;
                uint _3051 = _2802;
                uint _3060;
                bool _3061;
                for (;;)
                {
                    _3060 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                    _3061 = _3060 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3061)
                    {
                        frontier_phi_72_pred = _3050;
                        frontier_phi_72_pred_1 = _3049;
                        frontier_phi_72_pred_2 = _3048;
                        frontier_phi_72_pred_3 = _3047;
                        frontier_phi_72_pred_4 = _3046;
                        frontier_phi_72_pred_5 = _3045;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3256 = _3045;
                        float _3257 = _3046;
                        float _3258 = _3047;
                        float _3259 = _3048;
                        float _3260 = _3049;
                        float _3261 = _3050;
                        uint _3262 = _3060;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3332;
                        vec4 _3348;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3273 = ((_3051 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3319 = (_3273 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3273 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3273 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3273 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_1739, _3383.z, fma(_1738, _3383.y, _3383.x * _1737)) + _3383.w;
                            _3396 = !((fma(_1739, _3364.z, fma(_1738, _3364.y, _3364.x * _1737)) + _3364.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3288.x - _1737;
                                float _3424 = _3288.y - _1738;
                                float _3425 = _3288.z - _1739;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3289 * _3289));
                                float _4610 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3441 = sqrt(_3426) * _3304.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_597, _600, _603))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_1739, _3332.z, fma(_1738, _3332.y, _3332.x * _1737)) + _3332.w) / _3395;
                                float _3455 = (fma(_1739, _3348.z, fma(_1738, _3348.y, _3348.x * _1737)) + _3348.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4626 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3474 = 1.0 - _673;
                                float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                                float _3482 = _3481 * _3481;
                                float _3483 = _3482 * _3482;
                                float _3484 = _3430 - _2932;
                                float _3485 = _3431 - _2933;
                                float _3486 = _3432 - _2934;
                                float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                                float _3494 = dot(vec3(_597, _600, _603), vec3((-0.0) - _2932, (-0.0) - _2933, (-0.0) - _2934));
                                float _4637 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3498 = dot(vec3(_597, _600, _603), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                                float _4648 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                                float _3506 = _3443 * _3482;
                                float _3507 = _3506 * _3506;
                                float _3513 = ((1.0 - _3507) * dot(vec3(_597, _600, _603), vec3(_3430, _3431, _3432))) + _3507;
                                float _4659 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3515 = 1.0 - _3482;
                                float _3525 = (0.5 / (((_3514 * ((_3497 * _3515) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3482) * _3497))) * _3514;
                                float _4670 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3535 = (_3460 * _3437) * (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3505 * _3505) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3461 * _3304.y;
                                frontier_phi_78_pred_1 = _3461 * _3304.x;
                                frontier_phi_78_pred_2 = _3535 * _3316.z;
                                frontier_phi_78_pred_3 = _3535 * _3316.y;
                                frontier_phi_78_pred_4 = _3535 * _3316.x;
                                frontier_phi_78_pred_5 = _3461 * _3304.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3543 = frontier_phi_78_pred;
                            _3542 = frontier_phi_78_pred_1;
                            _3541 = frontier_phi_78_pred_2;
                            _3540 = frontier_phi_78_pred_3;
                            _3539 = frontier_phi_78_pred_4;
                            _3544 = frontier_phi_78_pred_5;
                            _3246 = _3542 + _3259;
                            _3247 = _3543 + _3260;
                            _3248 = _3544 + _3261;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3245 = _3541 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3248;
                        frontier_phi_72_pred_1 = _3247;
                        frontier_phi_72_pred_2 = _3246;
                        frontier_phi_72_pred_3 = _3245;
                        frontier_phi_72_pred_4 = _3244;
                        frontier_phi_72_pred_5 = _3243;
                    }
                    _2917 = frontier_phi_72_pred;
                    _2915 = frontier_phi_72_pred_1;
                    _2913 = frontier_phi_72_pred_2;
                    _2911 = frontier_phi_72_pred_3;
                    _2909 = frontier_phi_72_pred_4;
                    _2907 = frontier_phi_72_pred_5;
                    uint _3052 = _3051 + 1u;
                    if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3045 = _2907;
                        _3046 = _2909;
                        _3047 = _2911;
                        _3048 = _2913;
                        _3049 = _2915;
                        _3050 = _2917;
                        _3051 = _3052;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2917;
                frontier_phi_60_61_ladder_1 = _2915;
                frontier_phi_60_61_ladder_2 = _2911;
                frontier_phi_60_61_ladder_3 = _2909;
                frontier_phi_60_61_ladder_4 = _2907;
                frontier_phi_60_61_ladder_5 = _2913;
            }
            else
            {
                frontier_phi_60_61_ladder = _2795;
                frontier_phi_60_61_ladder_1 = _2793;
                frontier_phi_60_61_ladder_2 = _2789;
                frontier_phi_60_61_ladder_3 = _2787;
                frontier_phi_60_61_ladder_4 = _2785;
                frontier_phi_60_61_ladder_5 = _2791;
            }
            _2906 = frontier_phi_60_61_ladder_4;
            _2908 = frontier_phi_60_61_ladder_3;
            _2910 = frontier_phi_60_61_ladder_2;
            _2912 = frontier_phi_60_61_ladder_5;
            _2914 = frontier_phi_60_61_ladder_1;
            _2916 = frontier_phi_60_61_ladder;
        }
        float _2921 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
        _2692 = (_2921 * _2912) + _2204;
        _2694 = (_2921 * _2914) + _2206;
        _2696 = (_2921 * _2916) + _2208;
        _2698 = ((_2906 * _642) * _2921) + _2542;
        _2700 = ((_2908 * _644) * _2921) + _2544;
        _2702 = ((_2910 * _645) * _2921) + _2546;
    }
    else
    {
        _2692 = _2204;
        _2694 = _2206;
        _2696 = _2208;
        _2698 = _2542;
        _2700 = _2544;
        _2702 = _2546;
    }
    uint _2708 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _2714 = cbInstanceData._m0[_2708].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _426) + cbMatDynParam._m0[7u].x) + (((_467 - (_467 * _391)) + (cbMatDynParam._m0[11u].x * _498)) * cbMatDynParam._m0[9u].x));
    float _2715 = cbInstanceData._m0[_2708].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _426) + cbMatDynParam._m0[7u].y) + (((_469 - (_469 * _391)) + (cbMatDynParam._m0[11u].y * _498)) * cbMatDynParam._m0[9u].y));
    float _2716 = cbInstanceData._m0[_2708].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _426) + cbMatDynParam._m0[7u].z) + (((_471 - (_471 * _391)) + (cbMatDynParam._m0[11u].z * _498)) * cbMatDynParam._m0[9u].z));
    float _4686 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4697 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4708 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4719 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2734 = (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2692 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _657))) + ((_2698 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + _2714;
    float _2736 = (_2715 + ((_2700 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2694 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _657)));
    float _2738 = (_2716 + ((_2702 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2696 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _657)));
    float _2746 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) - _453) * _426) + _453));
    float _2751 = cbInstanceData._m0[_616 + 6u].w * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)));
    float _2756 = _576 / cbSceneParam._m0[86u].x;
    float _2757 = _577 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _513 : (isnan(_513) ? cbSceneParam._m0[77u].w : min(_513, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_513 > cbSceneParam._m0[78u].w)
    {
        float _2810 = isnan(_513) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _513 : min(cbSceneParam._m0[80u].w, _513));
        float _2811 = _2810 / _513;
        float _2822 = _2811 * _562;
        float _2823 = _563 * _2811;
        float _2824 = (-0.0) - _2823;
        float _2825 = _2811 * _564;
        float _2827 = (cbSceneParam._m0[77u].w * _2824) / _2810;
        float _2828 = _2827 + cbSceneParam._m0[79u].w;
        float _2829 = cbSceneParam._m0[79u].w - _2823;
        float _2835 = sqrt(((_2822 * _2822) + (_2823 * _2823)) + (_2825 * _2825));
        float _2838 = (1.0 - (cbSceneParam._m0[77u].w / _2810)) * _2835;
        float _2843 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2845 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3007;
        if (abs((_2824 - _2827) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3007 = ((((_2828 > 0.0) ? exp2(_2843 * _2828) : (2.0 - exp2(_2845 * _2828))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2838;
        }
        else
        {
            float _2967 = 1.0 / cbSceneParam._m0[80u].x;
            float _2968 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : max(_2828, _2829));
            float _2969 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : min(_2828, _2829));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            _3007 = ((abs(_2835 / _2824) * cbSceneParam._m0[80u].y) * ((((_2978 - _2979) * 2.0) - ((exp2(_2843 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)))) - exp2(_2843 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))))) * _2967)) - ((exp2(_2845 * _2978) - exp2(_2845 * _2979)) * _2967))) + (_2838 * cbSceneParam._m0[80u].z);
        }
        vec4 _3009 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3018 = exp2((_3007 * (-1.44269502162933349609375)) * (1.0 - _3009.w));
        float _3019 = log2(_3018);
        float _3035 = log2(_2776);
        _2847 = (exp2(_3035 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].x)) * _3009.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2849 = (exp2(_3035 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].y)) * _3009.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2851 = (exp2(_3035 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].z)) * _3009.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2853 = _3018 * _2776;
    }
    else
    {
        _2847 = _2773;
        _2849 = _2774;
        _2851 = _2775;
        _2853 = _2776;
    }
    float _2865 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2866 = _2865 == 3.0;
    float _2867 = log2(_2853);
    float _2871 = exp2(_2867 * cbSceneParam._m0[78u].x);
    float _2872 = exp2(_2867 * cbSceneParam._m0[78u].y);
    float _2873 = exp2(_2867 * cbSceneParam._m0[78u].z);
    float _2874 = _2871 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)));
    float _2875 = _2872 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0)));
    float _2876 = _2873 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)));
    float _2885 = (_2865 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2885 * (_2866 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.y = _2885 * (_2866 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.z = _2885 * (_2866 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2851)));
    SV_Target.w = _2751;
    SV_Target_1.x = ((_2746 * _2714) * _2871) * _2885;
    SV_Target_1.y = ((_2746 * _2715) * _2872) * _2885;
    SV_Target_1.z = ((_2746 * _2716) * _2873) * _2885;
    SV_Target_1.w = _2751;
}


