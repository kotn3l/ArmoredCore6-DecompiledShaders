#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1075;
float _3781;
float _3782;
float _3783;
float _3784;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _254);
    float _265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _254);
    float _266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _254);
    vec4 _279 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _285 = _279.w;
    float _291 = cbMtdParam._m0[9u].x * _279.x;
    float _292 = cbMtdParam._m0[9u].y * _279.y;
    float _293 = cbMtdParam._m0[9u].z * _279.z;
    vec4 _305 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _307 = _305.x;
    bool _314 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _331 = ((_314 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _307)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _307))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3793 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _334 = 1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)));
    float _3804 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _343 = _285 - (((_335 * _335) * _285) * (3.0 - (_335 * 2.0)));
    vec4 _358 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _362 = _358.z;
    float _365 = (_358.x * 2.0) + (-1.0);
    float _367 = (_358.y * 2.0) + (-1.0);
    float _368 = dot(vec2(_365, _367), vec2(_365, _367));
    float _3815 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    float _376 = fma(_373, _200 * NORMAL.x, fma(_367, _207 * TANGENT.x, (_193 * _186) * _365));
    float _379 = fma(_373, _200 * NORMAL.y, fma(_367, _207 * TANGENT.y, (_193 * _187) * _365));
    float _382 = fma(_373, _200 * NORMAL.z, fma(_367, _207 * TANGENT.z, (_193 * _188) * _365));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _3826 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _390 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _391 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _392 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _393 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _394 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _395 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _413 = inversesqrt(dot(vec3(_264, _265, _266), vec3(_264, _265, _266)));
    float _414 = _413 * _264;
    float _415 = _413 * _265;
    float _416 = _413 * _266;
    float _423 = abs(exp2(log2(dot(vec3(_387, _388, _389), vec3(_414, _415, _416))) * cbMatDynParam._m0[12u].x));
    float _424 = isnan(0.100000001490116119384765625) ? _423 : (isnan(_423) ? 0.100000001490116119384765625 : max(_423, 0.100000001490116119384765625));
    float _430 = ((isnan(0.699999988079071044921875) ? _424 : (isnan(_424) ? 0.699999988079071044921875 : min(_424, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _453 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3902 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3913 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _461 = dot(vec3(_387, _388, _389), vec3(0.0, -1.0, 0.0));
    float _3924 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _471 = (_464 * _392) * cbMatDynParam._m0[11u].x;
    float _473 = (_464 * _393) * cbMatDynParam._m0[11u].y;
    float _475 = (_464 * _394) * cbMatDynParam._m0[11u].z;
    float _485 = dot(vec3(_414, _415, _416), vec3(_387, _388, _389)) * 2.0;
    float _495 = dot(vec3((-0.0) - (_414 - (_485 * _387)), (-0.0) - (_415 - (_485 * _388)), (-0.0) - (_416 - (_485 * _389))), vec3(0.0, -1.0, 0.0));
    float _3935 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _502 = exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 4.0);
    float _517 = _314 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _566 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _557);
    float _567 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _557);
    float _568 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _557);
    float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
    float _573 = _566 * _572;
    float _574 = _567 * _572;
    float _575 = _568 * _572;
    vec4 _580 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _582 = _580.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _754 = sqrt(((_566 * _566) + (_567 * _567)) + (_568 * _568));
        float _760 = (cbMatDynParam._m0[5u].x * _754) + cbMatDynParam._m0[5u].y;
        float _3946 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _765 = (cbMatDynParam._m0[5u].z * _754) + cbMatDynParam._m0[5u].w;
        float _3957 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) - _761)) + _761) < ((_582 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _593 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _594 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _613 = fma(_389, cbSceneParam._m0[5u].z, fma(_388, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _387));
    float _616 = fma(_389, cbSceneParam._m0[6u].z, fma(_388, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _387));
    float _619 = fma(_389, cbSceneParam._m0[7u].z, fma(_388, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _387));
    uint _632 = uint(roundEven(NORMAL.w)) * 13u;
    uint _634 = _632 + 9u;
    uint _635 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _641 = ((cbMatDynParam._m0[9u].x * _392) * cbMtdParam._m0[0u].x) * cbInstanceData._m0[_635].x;
    float _642 = ((cbMatDynParam._m0[9u].y * _393) * cbMtdParam._m0[0u].y) * cbInstanceData._m0[_635].y;
    float _643 = ((cbMatDynParam._m0[9u].z * _394) * cbMtdParam._m0[0u].z) * cbInstanceData._m0[_635].z;
    float _3968 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _647 = 1.0 - _395;
    float _648 = _644 * _647;
    float _649 = _645 * _647;
    float _650 = _646 * _647;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _395;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _395;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _395;
    float _658 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    float _661 = _657 + 0.039999999105930328369140625;
    vec4 _670 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _593, cbSceneParam._m0[86u].y * _594));
    float _673 = _670.x * TEXCOORD.z;
    float _674 = dot(vec3(_387, _388, _389), vec3(_573, _574, _575));
    float _677 = _674 * 2.0;
    float _681 = (_677 * _387) - _573;
    float _682 = (_677 * _388) - _574;
    float _683 = (_677 * _389) - _575;
    float _687 = abs(dot(vec3(_573, _574, _575), vec3(_387, _388, _389)));
    float _4001 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _689 = sqrt(_391);
    float _700 = exp2((_689 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _706 = (1.0 - _700) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _707 = _700 * _689;
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1074;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _799 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _803 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _807 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _832 = _735 + _387;
        float _833 = _739 + _388;
        float _834 = _743 + _389;
        float _844 = fma(_834, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832)) - _799;
        float _845 = fma(_834, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832)) - _803;
        float _846 = fma(_834, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832)) - _807;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_799 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_803 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[34u].z) + ((((((_807 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _902 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_868.x + (-0.5));
        float _904 = _902 * (_868.y + (-0.5));
        float _905 = _902 * (_868.z + (-0.5));
        float _912 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_875.x + (-0.5));
        float _914 = _912 * (_875.y + (-0.5));
        float _915 = _912 * (_875.z + (-0.5));
        float _922 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_882.x + (-0.5));
        float _924 = _922 * (_882.y + (-0.5));
        float _925 = _922 * (_882.z + (-0.5));
        float _932 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_889.x + (-0.5));
        float _934 = _932 * (_889.y + (-0.5));
        float _935 = _932 * (_889.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _956 = (dot(vec3(_387, _388, _389), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _966 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _4049 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_968 + 1.0))) + _973) * _936;
        float _983 = _904 * 0.5;
        float _984 = _914 * 0.5;
        float _985 = _924 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_387, _388, _389), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _4082 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1010 + 1.0))) + _1015) * _937;
        float _1025 = _905 * 0.5;
        float _1026 = _915 * 0.5;
        float _1027 = _925 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_387, _388, _389), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _4115 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1052 + 1.0))) + _1057) * _938;
        _1074 = _905;
        _1076 = _904;
        _1077 = _903;
        _1078 = _915;
        _1079 = _914;
        _1080 = _913;
        _1081 = _925;
        _1082 = _924;
        _1083 = _923;
        _1084 = _938;
        _1085 = _937;
        _1086 = _936;
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
    }
    else
    {
        _1074 = _1075;
        _1076 = _1075;
        _1077 = _1075;
        _1078 = _1075;
        _1079 = _1075;
        _1080 = _1075;
        _1081 = _1075;
        _1082 = _1075;
        _1083 = _1075;
        _1084 = _1075;
        _1085 = _1075;
        _1086 = _1075;
        _1087 = 0.0;
        _1088 = 0.0;
        _1089 = 0.0;
    }
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1118 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1122 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1126 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1149 = _735 + _387;
        float _1150 = _739 + _388;
        float _1151 = _743 + _389;
        float _1161 = fma(_1151, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1149)) - _1118;
        float _1162 = fma(_1151, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1149)) - _1122;
        float _1163 = fma(_1151, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1149)) - _1126;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1118 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1122 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[35u].z) + ((((((_1126 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1217 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1184.x + (-0.5));
        float _1219 = _1217 * (_1184.y + (-0.5));
        float _1220 = _1217 * (_1184.z + (-0.5));
        float _1227 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1191.x + (-0.5));
        float _1229 = _1227 * (_1191.y + (-0.5));
        float _1230 = _1227 * (_1191.z + (-0.5));
        float _1237 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1198.x + (-0.5));
        float _1239 = _1237 * (_1198.y + (-0.5));
        float _1240 = _1237 * (_1198.z + (-0.5));
        float _1247 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1205.x + (-0.5));
        float _1249 = _1247 * (_1205.y + (-0.5));
        float _1250 = _1247 * (_1205.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_387, _388, _389), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4178 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1281 + 1.0))) + _1286) * _1251;
        float _1296 = _1219 * 0.5;
        float _1297 = _1229 * 0.5;
        float _1298 = _1239 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_387, _388, _389), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4211 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1323 + 1.0))) + _1328) * _1252;
        float _1338 = _1220 * 0.5;
        float _1339 = _1230 * 0.5;
        float _1340 = _1240 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_387, _388, _389), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4244 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1365 + 1.0))) + _1370) * _1253;
        _1387 = _1220;
        _1388 = _1219;
        _1389 = _1218;
        _1390 = _1230;
        _1391 = _1229;
        _1392 = _1228;
        _1393 = _1240;
        _1394 = _1239;
        _1395 = _1238;
        _1396 = _1253;
        _1397 = _1252;
        _1398 = _1251;
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1075;
        _1388 = _1075;
        _1389 = _1075;
        _1390 = _1075;
        _1391 = _1075;
        _1392 = _1075;
        _1393 = _1075;
        _1394 = _1075;
        _1395 = _1075;
        _1396 = _1075;
        _1397 = _1075;
        _1398 = _1075;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1087)) + _1087;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1088)) + _1088;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1089)) + _1089;
    float _1434 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1437 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1440 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1411));
    float _1455 = _681 * 0.5;
    float _1456 = _682 * 0.5;
    float _1457 = _683 * 0.5;
    float _1458 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1461 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1464 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1498;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1471 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1074, _1078, _1081, _1084));
        float _1475 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1479 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1486 = dot(vec4(cbModelParam._m0[39u]), vec4(_1455, _1456, _1457, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1509;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1500 = dot(vec4(cbModelParam._m0[40u]), vec4(_1455, _1456, _1457, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1513 = (_1509 * cbModelParam._m0[1u].x) + (_1498 * (1.0 - cbModelParam._m0[1u].x));
    float _1523 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _391);
    float _1524 = isnan(_1523) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1523 : min(cbModelParam._m0[25u].z, _1523));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_683, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681));
        float _1587 = fma(_683, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681));
        float _1590 = fma(_683, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1618 = frontier_phi_17_15_ladder;
        }
        float _1793;
        if (_1587 > 0.0)
        {
            _1793 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1793 = frontier_phi_26_22_ladder;
        }
        float _2089;
        if (_1590 > 0.0)
        {
            _2089 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2089 = frontier_phi_38_33_ladder;
        }
        float _2091 = isnan(_1793) ? _1618 : (isnan(_1618) ? _1793 : min(_1618, _1793));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1584) + _1573;
        float _2097 = (_2092 * _1587) + _1577;
        float _2098 = (_2092 * _1590) + _1581;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1524);
            frontier_phi_16_38_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_16_38_ladder_2;
        _1608 = frontier_phi_16_38_ladder_1;
        _1610 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_681, _682, _683), _1524);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _391);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1672 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1676 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1680 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1683 = fma(_683, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681));
        float _1686 = fma(_683, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681));
        float _1689 = fma(_683, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681));
        float _1798;
        if (_1683 > 0.0)
        {
            _1798 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1798 = frontier_phi_28_24_ladder;
        }
        float _2116;
        if (_1686 > 0.0)
        {
            _2116 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2116 = frontier_phi_40_35_ladder;
        }
        float _2454;
        if (_1689 > 0.0)
        {
            _2454 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2454 = frontier_phi_50_47_ladder;
        }
        float _2456 = isnan(_2116) ? _1798 : (isnan(_1798) ? _2116 : min(_1798, _2116));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1683) + _1672;
        float _2462 = (_2457 * _1686) + _1676;
        float _2463 = (_2457 * _1689) + _1680;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_25_50_ladder = _2585.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2585.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2585.x * cbModelParam._m0[1u].z;
        }
        _1708 = frontier_phi_25_50_ladder_2;
        _1710 = frontier_phi_25_50_ladder_1;
        _1712 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_681, _682, _683), _1615);
        _1708 = _1692.x * cbModelParam._m0[1u].z;
        _1710 = _1692.y * cbModelParam._m0[1u].z;
        _1712 = _1692.z * cbModelParam._m0[1u].z;
    }
    float _1725 = (((_706 * _658) + _707) * _673) * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1727 = (((_706 * _660) + _707) * _673) * ((cbModelParam._m0[1u].w * (_1710 - _1608)) + _1608);
    float _1729 = (((_706 * _661) + _707) * _673) * ((cbModelParam._m0[1u].w * (_1712 - _1610)) + _1610);
    float _1732 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1725 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1725 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, _1725 * cbSceneParam._m0[91u].x));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1785 = _1772 / _1784;
    float _1786 = _1776 / _1784;
    float _1787 = _1780 / _1784;
    float _1934;
    float _1935;
    float _1936;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1814 = ((uint(_1787 > cbSceneParam._m0[59u].y) + uint(_1787 > cbSceneParam._m0[59u].x)) + uint(_1787 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1815 = _1814 + 43u;
        uint _1823 = _1814 + 44u;
        uint _1831 = _1814 + 45u;
        uint _1839 = _1814 + 46u;
        float _1850 = fma(_1784, cbSceneParam._m0[_1815].w, fma(_1780, cbSceneParam._m0[_1815].z, fma(_1776, cbSceneParam._m0[_1815].y, _1772 * cbSceneParam._m0[_1815].x)));
        float _1854 = fma(_1784, cbSceneParam._m0[_1823].w, fma(_1780, cbSceneParam._m0[_1823].z, fma(_1776, cbSceneParam._m0[_1823].y, _1772 * cbSceneParam._m0[_1823].x)));
        float _1862 = fma(_1784, cbSceneParam._m0[_1839].w, fma(_1780, cbSceneParam._m0[_1839].z, fma(_1776, cbSceneParam._m0[_1839].y, _1772 * cbSceneParam._m0[_1839].x)));
        float _1867 = cbSceneParam._m0[33u].z * _1862;
        float _1869 = cbSceneParam._m0[33u].w * _1862;
        float _1872 = fma(_1784, cbSceneParam._m0[_1831].w, fma(_1780, cbSceneParam._m0[_1831].z, fma(_1776, cbSceneParam._m0[_1831].y, _1772 * cbSceneParam._m0[_1831].x))) / _1862;
        float _1920 = (cbSceneParam._m0[33u].x - sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787))) * cbSceneParam._m0[33u].y;
        float _4370 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1927 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 + _1850) / _1862, (_1869 + _1854) / _1862), _1872), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 + _1850) / _1862, (_1854 - _1867) / _1862), _1872), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1850 - _1867) / _1862, (_1854 - _1869) / _1862), _1872), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1850 - _1869) / _1862, (_1867 + _1854) / _1862), _1872), 0.0)).x), vec4(0.25)));
        _1934 = 1.0 - (_1927 * cbSceneParam._m0[34u].x);
        _1935 = 1.0 - (_1927 * cbSceneParam._m0[34u].y);
        _1936 = 1.0 - (_1927 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1934 = 1.0;
        _1935 = 1.0;
        _1936 = 1.0;
    }
    float _2000;
    float _2002;
    float _2004;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1988 = fma(_1784, cbSceneParam._m0[63u].w, fma(_1780, cbSceneParam._m0[63u].z, fma(_1776, cbSceneParam._m0[63u].y, _1772 * cbSceneParam._m0[63u].x)));
        float _1989 = fma(_1784, cbSceneParam._m0[60u].w, fma(_1780, cbSceneParam._m0[60u].z, fma(_1776, cbSceneParam._m0[60u].y, _1772 * cbSceneParam._m0[60u].x))) / _1988;
        float _1990 = fma(_1784, cbSceneParam._m0[61u].w, fma(_1780, cbSceneParam._m0[61u].z, fma(_1776, cbSceneParam._m0[61u].y, _1772 * cbSceneParam._m0[61u].x))) / _1988;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1989 >= cbSceneParam._m0[64u].x) && (_1990 >= cbSceneParam._m0[64u].y)) && (_1989 <= cbSceneParam._m0[64u].z)) && (_1990 <= cbSceneParam._m0[64u].w))
        {
            float _2129 = fma(_1784, cbSceneParam._m0[62u].w, fma(_1780, cbSceneParam._m0[62u].z, fma(_1776, cbSceneParam._m0[62u].y, _1772 * cbSceneParam._m0[62u].x))) / _1988;
            float _2133 = isnan(cbSceneParam._m0[41u].w) ? _2129 : (isnan(_2129) ? cbSceneParam._m0[41u].w : max(_2129, cbSceneParam._m0[41u].w));
            float _2176 = (cbSceneParam._m0[33u].x - sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787))) * cbSceneParam._m0[33u].y;
            float _4386 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
            float _2183 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1989, cbSceneParam._m0[33u].w + _1990), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1989, _1990 - cbSceneParam._m0[33u].z), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1989 - cbSceneParam._m0[33u].z, _1990 - cbSceneParam._m0[33u].w), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1989 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1990), _2133), 0.0)).x), vec4(0.25)));
            float _2187 = 1.0 - (_2183 * cbSceneParam._m0[34u].x);
            float _2188 = 1.0 - (_2183 * cbSceneParam._m0[34u].y);
            float _2189 = 1.0 - (_2183 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2189) ? _1936 : (isnan(_1936) ? _2189 : min(_1936, _2189));
            frontier_phi_37_36_ladder_1 = isnan(_2188) ? _1935 : (isnan(_1935) ? _2188 : min(_1935, _2188));
            frontier_phi_37_36_ladder_2 = isnan(_2187) ? _1934 : (isnan(_1934) ? _2187 : min(_1934, _2187));
        }
        else
        {
            frontier_phi_37_36_ladder = _1936;
            frontier_phi_37_36_ladder_1 = _1935;
            frontier_phi_37_36_ladder_2 = _1934;
        }
        _2000 = frontier_phi_37_36_ladder_2;
        _2002 = frontier_phi_37_36_ladder_1;
        _2004 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2000 = _1934;
        _2002 = _1935;
        _2004 = _1936;
    }
    uvec4 _2009 = floatBitsToUint(cbInstanceData._m0[_632 + 5u]);
    uint _2011 = _2009.x * 14u;
    uint _2012 = _2011 + 13u;
    float _2019 = _673 + (-1.0);
    float _2024 = (cbLight._m0[_2012].x * _2019) + 1.0;
    float _2025 = (cbLight._m0[_2012].y * _2019) + 1.0;
    float _2026 = (cbLight._m0[_2012].z * _2019) + 1.0;
    float _2027 = (cbLight._m0[_2012].w * _2019) + 1.0;
    uint _2028 = _2011 + 5u;
    float _2034 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2038 = _2011 + 4u;
    float _2048 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2052 = _2011 | 1u;
    float _2063 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_387, _388, _389));
    float _2066 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_387, _388, _389));
    float _4422 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _4433 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2071 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2073 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2080 = ((cbLight._m0[_2028].x * _2034) * _2073) + (((cbLight._m0[_2038].x * _2000) * _2048) * _2071);
    float _2081 = ((_2034 * cbLight._m0[_2028].y) * _2073) + (((cbLight._m0[_2038].y * _2002) * _2048) * _2071);
    float _2082 = ((_2034 * cbLight._m0[_2028].z) * _2073) + (((cbLight._m0[_2038].z * _2004) * _2048) * _2071);
    uvec4 _2086 = floatBitsToUint(cbLight._m0[_2011 + 12u]);
    bool _2088 = _2086.x == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2088)
    {
        _2190 = _2080;
        _2192 = _2081;
        _2194 = _2082;
    }
    else
    {
        uint _2198 = _2011 + 6u;
        float _2214 = (dot(vec3(cbLight._m0[_2011 + 2u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4444 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2217 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2190 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _2080;
        _2192 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _2081;
        _2194 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _2082;
    }
    bool _2197 = _2086.y == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2197)
    {
        _2252 = _2190;
        _2254 = _2192;
        _2256 = _2194;
    }
    else
    {
        uint _2425 = _2011 + 7u;
        float _2441 = (dot(vec3(cbLight._m0[_2011 + 3u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _2442 = _2441 * _2441;
        float _4460 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2443 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2444 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2252 = (((cbLight._m0[_2425].x * 0.3183098733425140380859375) * _2443) * _2444) + _2190;
        _2254 = (((cbLight._m0[_2425].y * 0.3183098733425140380859375) * _2443) * _2444) + _2192;
        _2256 = (((cbLight._m0[_2425].z * 0.3183098733425140380859375) * _2443) * _2444) + _2194;
    }
    uint _2259 = _2011 + 8u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _391) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2011].x + _573;
    float _2275 = cbLight._m0[_2011].y + _574;
    float _2276 = cbLight._m0[_2011].z + _575;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2011].xyz));
    float _4476 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _4487 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _2288 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2289 = dot(vec3(_387, _388, _389), vec3(_2281, _2282, _2283));
    float _4498 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2281, _2282, _2283));
    float _4509 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2273 * _2273;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
    float _2310 = 0.959999978542327880859375 - _655;
    float _2312 = 0.959999978542327880859375 - _656;
    float _2313 = 0.959999978542327880859375 - _657;
    float _2320 = 1.0 - _2273;
    float _2331 = (0.5 / (((_2288 * ((_2287 * _2320) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2320) + _2273) * _2287))) * _2287;
    float _4520 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    uint _2347 = _2011 + 9u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _391) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2052].x + _573;
    float _2361 = cbLight._m0[_2052].y + _574;
    float _2362 = cbLight._m0[_2052].z + _575;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2052].xyz));
    float _4531 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2374 = dot(vec3(_387, _388, _389), vec3(_2367, _2368, _2369));
    float _4542 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2378 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2367, _2368, _2369));
    float _4553 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2382 = _2359 * _2359;
    float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
    float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
    float _2400 = 1.0 - _2359;
    float _2410 = (0.5 / (((_2288 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2400) + _2359) * _2373))) * _2373;
    float _4564 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2412 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
    float _2422 = (((((_2393 * _2310) + _658) * cbLight._m0[_2347].x) * _2412) * _2034) + ((((cbLight._m0[_2259].x * _2000) * ((_2309 * _2310) + _658)) * _2333) * _2048);
    float _2423 = (((((_2393 * _2312) + _660) * cbLight._m0[_2347].y) * _2412) * _2034) + ((((cbLight._m0[_2259].y * _2002) * ((_2309 * _2312) + _660)) * _2333) * _2048);
    float _2424 = (((((_2393 * _2313) + _661) * cbLight._m0[_2347].z) * _2412) * _2034) + ((((cbLight._m0[_2259].z * _2004) * ((_2309 * _2313) + _661)) * _2333) * _2048);
    float _2480;
    float _2482;
    float _2484;
    if (_2088)
    {
        _2480 = _2422;
        _2482 = _2423;
        _2484 = _2424;
    }
    else
    {
        uint _2486 = _2011 + 2u;
        uint _2490 = _2011 + 10u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _391) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _573;
        float _2507 = cbLight._m0[_2486].y + _574;
        float _2508 = cbLight._m0[_2486].z + _575;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2486].xyz));
        float _4575 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2520 = dot(vec3(_387, _388, _389), vec3(_2513, _2514, _2515));
        float _4586 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4597 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
        float _2546 = 1.0 - _2505;
        float _2556 = (0.5 / (((_2288 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2546) + _2505) * _2519))) * _2519;
        float _4608 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2480 = (((((_2539 * _2310) + _658) * cbLight._m0[_2490].x) * _2558) * _2559) + _2422;
        _2482 = (((((_2539 * _2312) + _660) * cbLight._m0[_2490].y) * _2558) * _2559) + _2423;
        _2484 = (((((_2539 * _2313) + _661) * cbLight._m0[_2490].z) * _2558) * _2559) + _2424;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2197)
    {
        _2590 = _2480;
        _2592 = _2482;
        _2594 = _2484;
    }
    else
    {
        uint _2601 = _2011 + 3u;
        uint _2605 = _2011 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _391) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _573;
        float _2622 = cbLight._m0[_2601].y + _574;
        float _2623 = cbLight._m0[_2601].z + _575;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2601].xyz));
        float _4624 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2635 = dot(vec3(_387, _388, _389), vec3(_2628, _2629, _2630));
        float _4635 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4646 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
        float _2661 = 1.0 - _2620;
        float _2671 = (0.5 / (((_2288 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2661) + _2620) * _2634))) * _2634;
        float _4657 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2590 = (((((_2654 * _2310) + _658) * cbLight._m0[_2605].x) * _2673) * _2674) + _2480;
        _2592 = (((((_2654 * _2312) + _660) * cbLight._m0[_2605].y) * _2673) * _2674) + _2482;
        _2594 = (((((_2654 * _2313) + _661) * cbLight._m0[_2605].z) * _2673) * _2674) + _2484;
    }
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_2009.y == 0u)
    {
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.x;
        uint _2707 = uint((float(_2695.y) * floor(float(uint(cbSceneParam._m0[85u].y * _594) / _2696))) + floor(float(uint(cbSceneParam._m0[85u].x * _593) / _2696)));
        float _2717 = (log2(_1787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2718 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        uint _2721 = uint(isnan(14.0) ? _2718 : (isnan(_2718) ? 14.0 : min(_2718, 14.0)));
        uvec4 _2726 = texelFetch(g_lightClusterGridBuffer, int(((_2721 << 2u) + (_2707 << 6u)) >> 2u));
        uint _2727 = _2726.x;
        uint _2728 = _2695.z;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((((1u << ((_2728 >> 4u) & 15u)) + 4294967295u) & _2727) == 0u) || ((_2728 & 240u) == 0u))
        {
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
        }
        else
        {
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3010)
                {
                    frontier_phi_71_pred = _2999;
                    frontier_phi_71_pred_1 = _2998;
                    frontier_phi_71_pred_2 = _2997;
                    frontier_phi_71_pred_3 = _2996;
                    frontier_phi_71_pred_4 = _2995;
                    frontier_phi_71_pred_5 = _2994;
                }
                else
                {
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    uint _3145;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3009;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3149 = uint(findLSB(_3145)) + (_3000 << 5u);
                        uint _3146 = (_3145 + 4294967295u) & _3145;
                        uint _3151 = _3149 * 48u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3171 = (_3149 * 48u) + 4u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3190 = (_3149 * 48u) + 8u;
                        vec3 _3201 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x));
                        float _3205 = _3165.x - _1785;
                        float _3206 = _3165.y - _1786;
                        float _3207 = _3165.z - _1787;
                        float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                        float _3211 = inversesqrt(_3208);
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3215 = dot(vec3(_613, _616, _619), vec3(_3212, _3213, _3214));
                        float _3220 = 1.0 - (_3208 * _3165.w);
                        float _4683 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3222 = sqrt(_3208) * _3184.w;
                        float _3225 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3215) + _3226;
                        float _3232 = _3222 * _3222;
                        float _3235 = ((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3221) / ((_3232 * 0.699999988079071044921875) + 1.0);
                        float _3239 = (-0.0) - _1785;
                        float _3240 = (-0.0) - _1786;
                        float _3241 = (-0.0) - _1787;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3255 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _689;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3246 + _3212;
                        float _3267 = _3247 + _3213;
                        float _3268 = _3248 + _3214;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_613, _616, _619), vec3(_3246, _3247, _3248));
                        float _4699 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3280 = dot(vec3(_613, _616, _619), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4710 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3225 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3215) + _3289;
                        float _4721 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4732 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3287 * _3287) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125))) * _3221;
                        _3069 = (_3235 * _3184.x) + _3142;
                        _3070 = (_3235 * _3184.y) + _3143;
                        _3071 = (_3235 * _3184.z) + _3144;
                        _3066 = (_3315 * _3201.x) + _3139;
                        _3067 = (_3315 * _3201.y) + _3140;
                        _3068 = (_3315 * _3201.z) + _3141;
                        if (_3146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3146;
                        }
                    }
                    frontier_phi_71_pred = _3071;
                    frontier_phi_71_pred_1 = _3070;
                    frontier_phi_71_pred_2 = _3069;
                    frontier_phi_71_pred_3 = _3068;
                    frontier_phi_71_pred_4 = _3067;
                    frontier_phi_71_pred_5 = _3066;
                }
                _2844 = frontier_phi_71_pred;
                _2842 = frontier_phi_71_pred_1;
                _2840 = frontier_phi_71_pred_2;
                _2838 = frontier_phi_71_pred_3;
                _2836 = frontier_phi_71_pred_4;
                _2834 = frontier_phi_71_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2834;
                    _2995 = _2836;
                    _2996 = _2838;
                    _2997 = _2840;
                    _2998 = _2842;
                    _2999 = _2844;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
        }
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.z;
        uint _2850 = (_2848 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2850) & _2727) == 0u)
        {
            _2962 = _2833;
            _2964 = _2835;
            _2966 = _2837;
            _2968 = _2839;
            _2970 = _2841;
            _2972 = _2843;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
            float _2988 = _2987 * _1785;
            float _2989 = _2987 * _1786;
            float _2990 = _2987 * _1787;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2850 < ((_2848 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3122 = _2833;
                float _3123 = _2835;
                float _3124 = _2837;
                float _3125 = _2839;
                float _3126 = _2841;
                float _3127 = _2843;
                uint _3128 = _2850;
                uint _3137;
                bool _3138;
                for (;;)
                {
                    _3137 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                    _3138 = _3137 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3138)
                    {
                        frontier_phi_82_pred = _3127;
                        frontier_phi_82_pred_1 = _3126;
                        frontier_phi_82_pred_2 = _3125;
                        frontier_phi_82_pred_3 = _3124;
                        frontier_phi_82_pred_4 = _3123;
                        frontier_phi_82_pred_5 = _3122;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3342 = _3122;
                        float _3343 = _3123;
                        float _3344 = _3124;
                        float _3345 = _3125;
                        float _3346 = _3126;
                        float _3347 = _3127;
                        uint _3348 = _3137;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3418;
                        vec4 _3434;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3359 = ((_3128 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3405 = (_3359 * 40u) + 16u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3421 = (_3359 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3437 = (_3359 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3359 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_1787, _3469.z, fma(_1786, _3469.y, _3469.x * _1785)) + _3469.w;
                            _3482 = !((fma(_1787, _3450.z, fma(_1786, _3450.y, _3450.x * _1785)) + _3450.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3374.x - _1785;
                                float _3510 = _3374.y - _1786;
                                float _3511 = _3374.z - _1787;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3375 * _3375));
                                float _4743 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3527 = sqrt(_3512) * _3390.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_613, _616, _619))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_1787, _3418.z, fma(_1786, _3418.y, _3418.x * _1785)) + _3418.w) / _3481;
                                float _3541 = (fma(_1787, _3434.z, fma(_1786, _3434.y, _3434.x * _1785)) + _3434.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4759 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _689;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _2988;
                                float _3571 = _3517 - _2989;
                                float _3572 = _3518 - _2990;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_613, _616, _619), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4770 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3584 = dot(vec3(_613, _616, _619), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4781 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_613, _616, _619), vec3(_3516, _3517, _3518))) + _3593;
                                float _4792 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4803 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3547 * _3390.z;
                                frontier_phi_88_pred_1 = _3547 * _3390.y;
                                frontier_phi_88_pred_2 = _3547 * _3390.x;
                                frontier_phi_88_pred_3 = _3621 * _3402.z;
                                frontier_phi_88_pred_4 = _3621 * _3402.y;
                                frontier_phi_88_pred_5 = _3621 * _3402.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_88_pred;
                            _3629 = frontier_phi_88_pred_1;
                            _3628 = frontier_phi_88_pred_2;
                            _3627 = frontier_phi_88_pred_3;
                            _3626 = frontier_phi_88_pred_4;
                            _3625 = frontier_phi_88_pred_5;
                            _3332 = _3628 + _3345;
                            _3333 = _3629 + _3346;
                            _3334 = _3630 + _3347;
                            _3329 = _3625 + _3342;
                            _3330 = _3626 + _3343;
                            _3331 = _3627 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3334;
                        frontier_phi_82_pred_1 = _3333;
                        frontier_phi_82_pred_2 = _3332;
                        frontier_phi_82_pred_3 = _3331;
                        frontier_phi_82_pred_4 = _3330;
                        frontier_phi_82_pred_5 = _3329;
                    }
                    _2973 = frontier_phi_82_pred;
                    _2971 = frontier_phi_82_pred_1;
                    _2969 = frontier_phi_82_pred_2;
                    _2967 = frontier_phi_82_pred_3;
                    _2965 = frontier_phi_82_pred_4;
                    _2963 = frontier_phi_82_pred_5;
                    uint _3129 = _3128 + 1u;
                    if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3122 = _2963;
                        _3123 = _2965;
                        _3124 = _2967;
                        _3125 = _2969;
                        _3126 = _2971;
                        _3127 = _2973;
                        _3128 = _3129;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2969;
                frontier_phi_63_64_ladder_1 = _2973;
                frontier_phi_63_64_ladder_2 = _2971;
                frontier_phi_63_64_ladder_3 = _2967;
                frontier_phi_63_64_ladder_4 = _2965;
                frontier_phi_63_64_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_63_64_ladder = _2839;
                frontier_phi_63_64_ladder_1 = _2843;
                frontier_phi_63_64_ladder_2 = _2841;
                frontier_phi_63_64_ladder_3 = _2837;
                frontier_phi_63_64_ladder_4 = _2835;
                frontier_phi_63_64_ladder_5 = _2833;
            }
            _2962 = frontier_phi_63_64_ladder_5;
            _2964 = frontier_phi_63_64_ladder_4;
            _2966 = frontier_phi_63_64_ladder_3;
            _2968 = frontier_phi_63_64_ladder;
            _2970 = frontier_phi_63_64_ladder_2;
            _2972 = frontier_phi_63_64_ladder_1;
        }
        float _2977 = isnan(1.0) ? _673 : (isnan(_673) ? 1.0 : min(_673, 1.0));
        _2740 = (_2977 * _2968) + _2252;
        _2742 = (_2977 * _2970) + _2254;
        _2744 = (_2977 * _2972) + _2256;
        _2746 = ((_2962 * _658) * _2977) + _2590;
        _2748 = ((_2964 * _660) * _2977) + _2592;
        _2750 = ((_2966 * _661) * _2977) + _2594;
    }
    else
    {
        _2740 = _2252;
        _2742 = _2254;
        _2744 = _2256;
        _2746 = _2590;
        _2748 = _2592;
        _2750 = _2594;
    }
    uint _2756 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _2762 = cbInstanceData._m0[_2756].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _430) + cbMatDynParam._m0[7u].x) + (((_471 - (_471 * _395)) + (cbMatDynParam._m0[11u].x * _502)) * cbMatDynParam._m0[9u].x));
    float _2763 = cbInstanceData._m0[_2756].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _430) + cbMatDynParam._m0[7u].y) + (((_473 - (_473 * _395)) + (cbMatDynParam._m0[11u].y * _502)) * cbMatDynParam._m0[9u].y));
    float _2764 = cbInstanceData._m0[_2756].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _430) + cbMatDynParam._m0[7u].z) + (((_475 - (_475 * _395)) + (cbMatDynParam._m0[11u].z * _502)) * cbMatDynParam._m0[9u].z));
    float _4819 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4830 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4841 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4852 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _2782 = (((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2740 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _673))) + ((_2746 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + _2762;
    float _2784 = (_2763 + ((_2748 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2742 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _673)));
    float _2786 = (_2764 + ((_2750 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2744 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _673)));
    float _2787 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2788 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2789 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2794 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) - _457) * _430) + _457));
    float _2799 = cbInstanceData._m0[_632 + 6u].w * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)));
    float _2804 = _593 / cbSceneParam._m0[86u].x;
    float _2805 = _594 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2858 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2859 = _2858 / _517;
        float _2870 = _2859 * _566;
        float _2871 = _567 * _2859;
        float _2872 = (-0.0) - _2871;
        float _2873 = _2859 * _568;
        float _2875 = (cbSceneParam._m0[77u].w * _2872) / _2858;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2871;
        float _2883 = sqrt(((_2870 * _2870) + (_2871 * _2871)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2858)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2872 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3025 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3079 = ((abs(_2883 / _2872) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2893 * _3034) - exp2(_2893 * _3035)) * _3023))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2824);
        _2895 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2897 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2899 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2901 = _3090 * _2824;
    }
    else
    {
        _2895 = _2821;
        _2897 = _2822;
        _2899 = _2823;
        _2901 = _2824;
    }
    bool _3117;
    vec4 _2911;
    vec4 _2933;
    float _2935;
    float _2939;
    float _2940;
    float _2941;
    float _2944;
    float _2947;
    float _2950;
    float _2951;
    bool _2961;
    for (;;)
    {
        _2911 = cbMatDynParam._m0[0u];
        float _2913 = roundEven(_2911.y);
        bool _2914 = _2913 == 3.0;
        float _2915 = log2(_2901);
        float _2919 = exp2(_2915 * cbSceneParam._m0[78u].x);
        float _2920 = exp2(_2915 * cbSceneParam._m0[78u].y);
        float _2921 = exp2(_2915 * cbSceneParam._m0[78u].z);
        float _2922 = _2919 * _2787;
        float _2923 = _2920 * _2788;
        float _2924 = _2921 * _2789;
        float _2931 = _582 + (-0.5);
        _2933 = cbMtdParam._m0[1u];
        _2935 = _2933.y * _2931;
        float _2938 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2939 = _2938 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
        _2940 = _2938 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
        _2941 = _2938 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
        _2944 = ((_2794 * _2762) * _2919) * _2938;
        _2947 = ((_2794 * _2763) * _2920) * _2938;
        _2950 = ((_2794 * _2764) * _2921) * _2938;
        _2951 = _2931 * 0.999000012874603271484375;
        _2961 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2961)
        {
            if ((cbInstanceData._m0[_632 + 7u].x + _2951) < 0.5)
            {
                _3117 = true;
                break;
            }
        }
        uint _3058 = _634 + uint(_2911.w);
        if ((cbInstanceData._m0[_3058].w < 1.0) && ((cbInstanceData._m0[_3058].w + _2951) < 0.5))
        {
            _3117 = true;
            break;
        }
        if ((_2935 + _343) < _2933.x)
        {
            _3117 = true;
            break;
        }
        _3117 = false;
        break;
    }
    float _3320;
    if (_3117)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = _2799;
    }
    SV_Target.x = _2939;
    SV_Target.y = _2940;
    SV_Target.z = _2941;
    SV_Target.w = _3320;
    SV_Target_1.x = _2944;
    SV_Target_1.y = _2947;
    SV_Target_1.z = _2950;
    SV_Target_1.w = _2799;
    discard_exit();
}


