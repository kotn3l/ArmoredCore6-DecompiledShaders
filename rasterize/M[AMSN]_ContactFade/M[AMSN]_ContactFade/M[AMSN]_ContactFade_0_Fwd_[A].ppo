#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _924;
float _3319;
float _3320;
float _3321;
float _3322;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.w;
    float _237 = cbMtdParam._m0[9u].x * _224.x;
    float _238 = cbMtdParam._m0[9u].y * _224.y;
    float _239 = cbMtdParam._m0[9u].z * _224.z;
    vec4 _252 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _254 = _252.x;
    bool _261 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _278 = ((_261 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _254)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _254))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3331 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _281 = 1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)));
    float _3342 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _282 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _290 = _230 - (((_282 * _282) * _230) * (3.0 - (_282 * 2.0)));
    vec4 _302 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = cbMtdParam._m0[10u].x + _302.x;
    vec4 _320 = texture(sampler2D(M_AMSN_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _324 = _320.z;
    float _327 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3353 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _338 = fma(_335, _200 * NORMAL.x, fma(_329, _207 * TANGENT.x, (_193 * _186) * _327));
    float _341 = fma(_335, _200 * NORMAL.y, fma(_329, _207 * TANGENT.y, (_193 * _187) * _327));
    float _344 = fma(_335, _200 * NORMAL.z, fma(_329, _207 * TANGENT.z, (_193 * _188) * _327));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _3364 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _352 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3397 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3408 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3419 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _362 = _261 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    vec4 _427 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _429 = _427.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _603 = sqrt(((_413 * _413) + (_414 * _414)) + (_415 * _415));
        float _609 = (cbMatDynParam._m0[5u].x * _603) + cbMatDynParam._m0[5u].y;
        float _3430 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _610 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _614 = (cbMatDynParam._m0[5u].z * _603) + cbMatDynParam._m0[5u].w;
        float _3441 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) - _610)) + _610) < ((_429 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _440 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _441 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _464 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _467 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _482 = _480 + 9u;
    uint _483 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3452 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _495 = 1.0 - _357;
    float _496 = _492 * _495;
    float _497 = _493 * _495;
    float _498 = _494 * _495;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _357;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _357;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _357;
    float _506 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    vec4 _518 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _440, cbSceneParam._m0[86u].y * _441));
    float _521 = _518.x * TEXCOORD.z;
    float _522 = dot(vec3(_349, _350, _351), vec3(_420, _421, _422));
    float _525 = _522 * 2.0;
    float _529 = (_525 * _349) - _420;
    float _530 = (_525 * _350) - _421;
    float _531 = (_525 * _351) - _422;
    float _535 = abs(dot(vec3(_420, _421, _422), vec3(_349, _350, _351)));
    float _3485 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _537 = sqrt(_353);
    float _549 = exp2((_537 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_537 * 3.0));
    float _555 = (1.0 - _549) * ((_537 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _556 = _549 * _537;
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _652 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _656 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _681 = _584 + _349;
        float _682 = _588 + _350;
        float _683 = _592 + _351;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_349, _350, _351), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3533 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_349, _350, _351), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3566 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_349, _350, _351), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3599 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _967 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _971 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _975 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _998 = _584 + _349;
        float _999 = _588 + _350;
        float _1000 = _592 + _351;
        float _1010 = fma(_1000, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) - _967;
        float _1011 = fma(_1000, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) - _971;
        float _1012 = fma(_1000, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) - _975;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_967 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_971 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[35u].z) + ((((((_975 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1066 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1033.x + (-0.5));
        float _1068 = _1066 * (_1033.y + (-0.5));
        float _1069 = _1066 * (_1033.z + (-0.5));
        float _1076 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1040.x + (-0.5));
        float _1078 = _1076 * (_1040.y + (-0.5));
        float _1079 = _1076 * (_1040.z + (-0.5));
        float _1086 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1047.x + (-0.5));
        float _1088 = _1086 * (_1047.y + (-0.5));
        float _1089 = _1086 * (_1047.z + (-0.5));
        float _1096 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1054.x + (-0.5));
        float _1098 = _1096 * (_1054.y + (-0.5));
        float _1099 = _1096 * (_1054.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_349, _350, _351), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3662 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1130 + 1.0))) + _1135) * _1100;
        float _1145 = _1068 * 0.5;
        float _1146 = _1078 * 0.5;
        float _1147 = _1088 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_349, _350, _351), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3695 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1172 + 1.0))) + _1177) * _1101;
        float _1187 = _1069 * 0.5;
        float _1188 = _1079 * 0.5;
        float _1189 = _1089 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_349, _350, _351), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3728 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1214 + 1.0))) + _1219) * _1102;
        _1236 = _1069;
        _1237 = _1068;
        _1238 = _1067;
        _1239 = _1079;
        _1240 = _1078;
        _1241 = _1077;
        _1242 = _1089;
        _1243 = _1088;
        _1244 = _1087;
        _1245 = _1102;
        _1246 = _1101;
        _1247 = _1100;
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = _924;
        _1246 = _924;
        _1247 = _924;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _936)) + _936;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _937)) + _937;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1260));
    float _1304 = _529 * 0.5;
    float _1305 = _530 * 0.5;
    float _1306 = _531 * 0.5;
    float _1307 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1310 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1313 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1347;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1320 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_923, _927, _930, _933));
        float _1324 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_925, _928, _931, _934));
        float _1328 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_926, _929, _932, _935));
        float _1335 = dot(vec4(cbModelParam._m0[39u]), vec4(_1304, _1305, _1306, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1358;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1349 = dot(vec4(cbModelParam._m0[40u]), vec4(_1304, _1305, _1306, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1362 = (_1358 * cbModelParam._m0[1u].x) + (_1347 * (1.0 - cbModelParam._m0[1u].x));
    float _1372 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1372 : min(cbModelParam._m0[25u].z, _1372));
    float _1455;
    float _1457;
    float _1459;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1422 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1426 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1430 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1433 = fma(_531, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529));
        float _1436 = fma(_531, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529));
        float _1439 = fma(_531, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529));
        float _1467;
        if (_1433 > 0.0)
        {
            _1467 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1467 = frontier_phi_17_15_ladder;
        }
        float _1675;
        if (_1436 > 0.0)
        {
            _1675 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1675 = frontier_phi_26_22_ladder;
        }
        float _1929;
        if (_1439 > 0.0)
        {
            _1929 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1929 = frontier_phi_38_33_ladder;
        }
        float _1931 = isnan(_1675) ? _1467 : (isnan(_1467) ? _1675 : min(_1467, _1675));
        float _1932 = isnan(_1929) ? _1931 : (isnan(_1931) ? _1929 : min(_1931, _1929));
        float _1936 = (_1932 * _1433) + _1422;
        float _1937 = (_1932 * _1436) + _1426;
        float _1938 = (_1932 * _1439) + _1430;
        float _1939 = _1932 * 9.9999997473787516355514526367188e-05;
        float _1941 = (-1.0) - _1939;
        float _1943 = _1939 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1938 > _1943) || ((_1938 < _1941) || ((_1937 > _1943) || ((_1937 < _1941) || ((_1936 < _1941) || (_1936 > _1943))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1938, cbModelParam._m0[9u].z, fma(_1937, cbModelParam._m0[9u].y, _1936 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1938, cbModelParam._m0[10u].z, fma(_1937, cbModelParam._m0[10u].y, _1936 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1938, cbModelParam._m0[11u].z, fma(_1937, cbModelParam._m0[11u].y, _1936 * cbModelParam._m0[11u].x))), _1373);
            frontier_phi_16_38_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1455 = frontier_phi_16_38_ladder_2;
        _1457 = frontier_phi_16_38_ladder_1;
        _1459 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_529, _530, _531), _1373);
        _1455 = _1443.x * cbModelParam._m0[1u].y;
        _1457 = _1443.y * cbModelParam._m0[1u].y;
        _1459 = _1443.z * cbModelParam._m0[1u].y;
    }
    float _1463 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1463 : min(cbModelParam._m0[25u].w, _1463));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_531, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529));
        float _1535 = fma(_531, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529));
        float _1538 = fma(_531, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529));
        float _1680;
        if (_1532 > 0.0)
        {
            _1680 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1680 = frontier_phi_28_24_ladder;
        }
        float _1956;
        if (_1535 > 0.0)
        {
            _1956 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1956 = frontier_phi_40_35_ladder;
        }
        float _2169;
        if (_1538 > 0.0)
        {
            _2169 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2169 = frontier_phi_49_46_ladder;
        }
        float _2171 = isnan(_1956) ? _1680 : (isnan(_1680) ? _1956 : min(_1680, _1956));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1532) + _1521;
        float _2177 = (_2172 * _1535) + _1525;
        float _2178 = (_2172 * _1538) + _1529;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2179;
        float _2182 = _2179 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2178 > _2182) || ((_2178 < _2180) || ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 < _2180) || (_2176 > _2182))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2178, cbModelParam._m0[17u].z, fma(_2177, cbModelParam._m0[17u].y, _2176 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2178, cbModelParam._m0[18u].z, fma(_2177, cbModelParam._m0[18u].y, _2176 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2178, cbModelParam._m0[19u].z, fma(_2177, cbModelParam._m0[19u].y, _2176 * cbModelParam._m0[19u].x))), _1464);
            frontier_phi_25_49_ladder = _2382.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2382.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2382.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_25_49_ladder_2;
        _1559 = frontier_phi_25_49_ladder_1;
        _1561 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_529, _530, _531), _1464);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1574 = (((_555 * _506) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1576 = (((_555 * _508) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1578 = (((_555 * _509) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _521 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1633 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1637 = _1599 | 1u;
    float _1648 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_349, _350, _351));
    float _1651 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_349, _350, _351));
    float _3864 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _3875 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1656 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1658 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1665 = ((cbLight._m0[_1616].x * _1622) * _1658) + ((cbLight._m0[_1626].x * _1633) * _1656);
    float _1666 = ((_1622 * cbLight._m0[_1616].y) * _1658) + ((_1633 * cbLight._m0[_1626].y) * _1656);
    float _1667 = ((_1622 * cbLight._m0[_1616].z) * _1658) + ((_1633 * cbLight._m0[_1626].z) * _1656);
    uvec4 _1672 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1674 = _1672.x == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1674)
    {
        _1685 = _1665;
        _1687 = _1666;
        _1689 = _1667;
    }
    else
    {
        uint _1693 = _1599 + 6u;
        float _1709 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1710 = _1709 * _1709;
        float _3886 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1712 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1685 = (((cbLight._m0[_1693].x * 0.3183098733425140380859375) * _1711) * _1712) + _1665;
        _1687 = (((cbLight._m0[_1693].y * 0.3183098733425140380859375) * _1711) * _1712) + _1666;
        _1689 = (((cbLight._m0[_1693].z * 0.3183098733425140380859375) * _1711) * _1712) + _1667;
    }
    bool _1692 = _1672.y == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1692)
    {
        _1730 = _1685;
        _1732 = _1687;
        _1734 = _1689;
    }
    else
    {
        uint _1900 = _1599 + 7u;
        float _1916 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1917 = _1916 * _1916;
        float _3902 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1919 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1730 = (((cbLight._m0[_1900].x * 0.3183098733425140380859375) * _1918) * _1919) + _1685;
        _1732 = (((cbLight._m0[_1900].y * 0.3183098733425140380859375) * _1918) * _1919) + _1687;
        _1734 = (((cbLight._m0[_1900].z * 0.3183098733425140380859375) * _1918) * _1919) + _1689;
    }
    uint _1737 = _1599 + 8u;
    float _1750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _353) * 0.949999988079071044921875);
    float _1751 = _1750 * _1750;
    float _1752 = cbLight._m0[_1599].x + _420;
    float _1753 = cbLight._m0[_1599].y + _421;
    float _1754 = cbLight._m0[_1599].z + _422;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1759 = _1758 * _1752;
    float _1760 = _1758 * _1753;
    float _1761 = _1758 * _1754;
    float _1762 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1599].xyz));
    float _3918 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _1766 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1767 = dot(vec3(_349, _350, _351), vec3(_1759, _1760, _1761));
    float _3940 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1759, _1760, _1761));
    float _3951 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1751 * _1751;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1787 = exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0);
    float _1788 = 0.959999978542327880859375 - _503;
    float _1790 = 0.959999978542327880859375 - _504;
    float _1791 = 0.959999978542327880859375 - _505;
    float _1798 = 1.0 - _1751;
    float _1809 = (0.5 / (((_1766 * ((_1765 * _1798) + _1751)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1798) + _1751) * _1765))) * _1765;
    float _3962 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    uint _1822 = _1599 + 9u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _353) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1637].x + _420;
    float _1836 = cbLight._m0[_1637].y + _421;
    float _1837 = cbLight._m0[_1637].z + _422;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1637].xyz));
    float _3973 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1849 = dot(vec3(_349, _350, _351), vec3(_1842, _1843, _1844));
    float _3984 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1853 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1842, _1843, _1844));
    float _3995 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1857 = _1834 * _1834;
    float _1861 = ((_1852 * _1852) * (_1857 + (-1.0))) + 1.0;
    float _1868 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
    float _1875 = 1.0 - _1834;
    float _1885 = (0.5 / (((_1766 * ((_1848 * _1875) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1875) + _1834) * _1848))) * _1848;
    float _4006 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1857 / ((_1861 * _1861) * 3.141590118408203125));
    float _1897 = (((((_1868 * _1788) + _506) * cbLight._m0[_1822].x) * _1887) * _1622) + (((((_1787 * _1788) + _506) * cbLight._m0[_1737].x) * _1811) * _1633);
    float _1898 = (((((_1868 * _1790) + _508) * cbLight._m0[_1822].y) * _1887) * _1622) + (((((_1787 * _1790) + _508) * cbLight._m0[_1737].y) * _1811) * _1633);
    float _1899 = (((((_1868 * _1791) + _509) * cbLight._m0[_1822].z) * _1887) * _1622) + (((((_1787 * _1791) + _509) * cbLight._m0[_1737].z) * _1811) * _1633);
    float _1961;
    float _1963;
    float _1965;
    if (_1674)
    {
        _1961 = _1897;
        _1963 = _1898;
        _1965 = _1899;
    }
    else
    {
        uint _1967 = _1599 + 2u;
        uint _1971 = _1599 + 10u;
        float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _353) * 0.949999988079071044921875);
        float _1986 = _1985 * _1985;
        float _1987 = cbLight._m0[_1967].x + _420;
        float _1988 = cbLight._m0[_1967].y + _421;
        float _1989 = cbLight._m0[_1967].z + _422;
        float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
        float _1994 = _1993 * _1987;
        float _1995 = _1993 * _1988;
        float _1996 = _1993 * _1989;
        float _1997 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1967].xyz));
        float _4017 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2000 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2001 = dot(vec3(_349, _350, _351), vec3(_1994, _1995, _1996));
        float _4028 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2005 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_1994, _1995, _1996));
        float _4039 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2009 = _1986 * _1986;
        float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
        float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
        float _2027 = 1.0 - _1986;
        float _2037 = (0.5 / (((_1766 * ((_2000 * _2027) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2027) + _1986) * _2000))) * _2000;
        float _4050 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2039 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
        float _2040 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1961 = (((((_2020 * _1788) + _506) * cbLight._m0[_1971].x) * _2039) * _2040) + _1897;
        _1963 = (((((_2020 * _1790) + _508) * cbLight._m0[_1971].y) * _2039) * _2040) + _1898;
        _1965 = (((((_2020 * _1791) + _509) * cbLight._m0[_1971].z) * _2039) * _2040) + _1899;
    }
    float _2075;
    float _2077;
    float _2079;
    if (_1692)
    {
        _2075 = _1961;
        _2077 = _1963;
        _2079 = _1965;
    }
    else
    {
        uint _2086 = _1599 + 3u;
        uint _2090 = _1599 + 11u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _353) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _420;
        float _2107 = cbLight._m0[_2086].y + _421;
        float _2108 = cbLight._m0[_2086].z + _422;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2086].xyz));
        float _4066 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2120 = dot(vec3(_349, _350, _351), vec3(_2113, _2114, _2115));
        float _4077 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _4088 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
        float _2146 = 1.0 - _2105;
        float _2156 = (0.5 / (((_1766 * ((_2119 * _2146) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2146) + _2105) * _2119))) * _2119;
        float _4099 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2158 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2159 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2075 = (((((_2139 * _1788) + _506) * cbLight._m0[_2090].x) * _2158) * _2159) + _1961;
        _2077 = (((((_2139 * _1790) + _508) * cbLight._m0[_2090].y) * _2158) * _2159) + _1963;
        _2079 = (((((_2139 * _1791) + _509) * cbLight._m0[_2090].z) * _2158) * _2159) + _1965;
    }
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_1597.y == 0u)
    {
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2234;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2234;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2234;
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.x;
        uint _2261 = uint((float(_2249.y) * floor(float(uint(cbSceneParam._m0[85u].y * _441) / _2250))) + floor(float(uint(cbSceneParam._m0[85u].x * _440) / _2250)));
        float _2271 = (log2(_2237 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2272 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        uint _2275 = uint(isnan(14.0) ? _2272 : (isnan(_2272) ? 14.0 : min(_2272, 14.0)));
        uvec4 _2280 = texelFetch(g_lightClusterGridBuffer, int(((_2275 << 2u) + (_2261 << 6u)) >> 2u));
        uint _2281 = _2280.x;
        uint _2282 = _2249.z;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        if (((((1u << ((_2282 >> 4u) & 15u)) + 4294967295u) & _2281) == 0u) || ((_2282 & 240u) == 0u))
        {
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
        }
        else
        {
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            uint _2545 = 0u;
            uint _2554;
            bool _2555;
            for (;;)
            {
                _2554 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2545 << 2u)) >> 2u)).x;
                _2555 = _2554 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2555)
                {
                    frontier_phi_66_pred = _2539;
                    frontier_phi_66_pred_1 = _2544;
                    frontier_phi_66_pred_2 = _2543;
                    frontier_phi_66_pred_3 = _2542;
                    frontier_phi_66_pred_4 = _2541;
                    frontier_phi_66_pred_5 = _2540;
                }
                else
                {
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    uint _2690;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2554;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    for (;;)
                    {
                        uint _2694 = uint(findLSB(_2690)) + (_2545 << 5u);
                        uint _2691 = (_2690 + 4294967295u) & _2690;
                        uint _2696 = _2694 * 48u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2716 = (_2694 * 48u) + 4u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2735 = (_2694 * 48u) + 8u;
                        vec3 _2746 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x));
                        float _2750 = _2710.x - _2235;
                        float _2751 = _2710.y - _2236;
                        float _2752 = _2710.z - _2237;
                        float _2753 = dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752));
                        float _2756 = inversesqrt(_2753);
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2760 = dot(vec3(_461, _464, _467), vec3(_2757, _2758, _2759));
                        float _2765 = 1.0 - (_2753 * _2710.w);
                        float _4125 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2767 = sqrt(_2753) * _2729.w;
                        float _2770 = 1.39999997615814208984375 / (_2767 + 1.39999997615814208984375);
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2760) + _2771;
                        float _2777 = _2767 * _2767;
                        float _2781 = ((isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))) * _2766) / ((_2777 * 0.699999988079071044921875) + 1.0);
                        float _2785 = (-0.0) - _2235;
                        float _2786 = (-0.0) - _2236;
                        float _2787 = (-0.0) - _2237;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2802 = exp2(log2(1.0 / ((_2777 * 3.5) + 5.0)) * 0.25);
                        float _2803 = 1.0 - _537;
                        float _2810 = sqrt(1.0 - ((1.0 - (_2803 * _2803)) * (1.0 - (_2802 * _2802))));
                        float _2811 = _2810 * _2810;
                        float _2812 = _2811 * _2811;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2815 = _2794 + _2759;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2823 = dot(vec3(_461, _464, _467), vec3(_2792, _2793, _2794));
                        float _4141 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2826 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2827 = dot(vec3(_461, _464, _467), vec3(_2819 * _2813, _2819 * _2814, _2819 * _2815));
                        float _4152 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2834 = ((_2830 * _2830) * (_2812 + (-1.0))) + 1.0;
                        float _2835 = _2770 * _2811;
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2760) + _2836;
                        float _4163 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2841 = 1.0 - _2811;
                        float _2851 = (0.5 / (((_2840 * ((_2826 * _2841) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _2841) + _2811) * _2826))) * _2840;
                        float _4174 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2862 = (((_2812 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_2834 * _2834) * ((_2777 * 2.1991131305694580078125) + 3.141590118408203125))) * _2766;
                        _2614 = (_2781 * _2729.x) + _2687;
                        _2615 = (_2781 * _2729.y) + _2688;
                        _2616 = (_2781 * _2729.z) + _2689;
                        _2611 = (_2862 * _2746.x) + _2684;
                        _2612 = (_2862 * _2746.y) + _2685;
                        _2613 = (_2862 * _2746.z) + _2686;
                        if (_2691 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2691;
                        }
                    }
                    frontier_phi_66_pred = _2611;
                    frontier_phi_66_pred_1 = _2616;
                    frontier_phi_66_pred_2 = _2615;
                    frontier_phi_66_pred_3 = _2614;
                    frontier_phi_66_pred_4 = _2613;
                    frontier_phi_66_pred_5 = _2612;
                }
                _2388 = frontier_phi_66_pred;
                _2398 = frontier_phi_66_pred_1;
                _2396 = frontier_phi_66_pred_2;
                _2394 = frontier_phi_66_pred_3;
                _2392 = frontier_phi_66_pred_4;
                _2390 = frontier_phi_66_pred_5;
                uint _2546 = _2545 + 1u;
                if (_2546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2539 = _2388;
                    _2540 = _2390;
                    _2541 = _2392;
                    _2542 = _2394;
                    _2543 = _2396;
                    _2544 = _2398;
                    _2545 = _2546;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
        }
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.z;
        uint _2404 = (_2402 >> 8u) & 15u;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((4294967295u << _2404) & _2281) == 0u)
        {
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
            _2513 = _2393;
            _2515 = _2395;
            _2517 = _2397;
        }
        else
        {
            float _2532 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
            float _2533 = _2532 * _2235;
            float _2534 = _2532 * _2236;
            float _2535 = _2532 * _2237;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2404 < ((_2402 >> 12u) & 15u))
            {
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2667 = _2387;
                float _2668 = _2389;
                float _2669 = _2391;
                float _2670 = _2393;
                float _2671 = _2395;
                float _2672 = _2397;
                uint _2673 = _2404;
                uint _2682;
                bool _2683;
                for (;;)
                {
                    _2682 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                    _2683 = _2682 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2683)
                    {
                        frontier_phi_77_pred = _2672;
                        frontier_phi_77_pred_1 = _2671;
                        frontier_phi_77_pred_2 = _2670;
                        frontier_phi_77_pred_3 = _2669;
                        frontier_phi_77_pred_4 = _2668;
                        frontier_phi_77_pred_5 = _2667;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        uint _2895 = _2682;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2965;
                        vec4 _2981;
                        float _3028;
                        bool _3029;
                        for (;;)
                        {
                            uint _2906 = ((_2673 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2952 = (_2906 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2906 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2906 * 40u) + 24u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3003 = (_2906 * 40u) + 28u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3028 = fma(_2237, _3016.z, fma(_2236, _3016.y, _3016.x * _2235)) + _3016.w;
                            _3029 = !((fma(_2237, _2997.z, fma(_2236, _2997.y, _2997.x * _2235)) + _2997.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3029)
                            {
                                float _3056 = _2921.x - _2235;
                                float _3057 = _2921.y - _2236;
                                float _3058 = _2921.z - _2237;
                                float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                                float _3062 = inversesqrt(_3059);
                                float _3063 = _3062 * _3056;
                                float _3064 = _3062 * _3057;
                                float _3065 = _3062 * _3058;
                                float _3069 = 1.0 - (_3059 / (_2922 * _2922));
                                float _4185 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3074 = sqrt(_3059) * _2937.w;
                                float _3076 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                                float _3077 = _3076 * _3076;
                                float _3080 = ((1.0 - _3077) * dot(vec3(_3063, _3064, _3065), vec3(_461, _464, _467))) + _3077;
                                float _3083 = _3074 * _3074;
                                float _3087 = (fma(_2237, _2965.z, fma(_2236, _2965.y, _2965.x * _2235)) + _2965.w) / _3028;
                                float _3088 = (fma(_2237, _2981.z, fma(_2236, _2981.y, _2981.x * _2235)) + _2981.w) / _3028;
                                float _3092 = 1.0 - dot(vec2(_3087, _3088), vec2(_3087, _3088));
                                float _4201 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3094 = _3093 * (((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3070) / ((_3083 * 0.699999988079071044921875) + 1.0));
                                float _3106 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                                float _3107 = 1.0 - _537;
                                float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                                float _3115 = _3114 * _3114;
                                float _3116 = _3115 * _3115;
                                float _3117 = _3063 - _2533;
                                float _3118 = _3064 - _2534;
                                float _3119 = _3065 - _2535;
                                float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                                float _3127 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2533, (-0.0) - _2534, (-0.0) - _2535));
                                float _4212 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3130 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3131 = dot(vec3(_461, _464, _467), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                                float _4223 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                                float _3139 = _3076 * _3115;
                                float _3140 = _3139 * _3139;
                                float _3146 = ((1.0 - _3140) * dot(vec3(_461, _464, _467), vec3(_3063, _3064, _3065))) + _3140;
                                float _4234 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3148 = 1.0 - _3115;
                                float _3158 = (0.5 / (((_3147 * ((_3130 * _3148) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3115) * _3130))) * _3147;
                                float _4245 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3168 = (_3093 * _3070) * (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_3138 * _3138) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3094 * _2937.y;
                                frontier_phi_83_pred_1 = _3094 * _2937.x;
                                frontier_phi_83_pred_2 = _3168 * _2949.z;
                                frontier_phi_83_pred_3 = _3168 * _2949.y;
                                frontier_phi_83_pred_4 = _3168 * _2949.x;
                                frontier_phi_83_pred_5 = _3094 * _2937.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3176 = frontier_phi_83_pred;
                            _3175 = frontier_phi_83_pred_1;
                            _3174 = frontier_phi_83_pred_2;
                            _3173 = frontier_phi_83_pred_3;
                            _3172 = frontier_phi_83_pred_4;
                            _3177 = frontier_phi_83_pred_5;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2881;
                        frontier_phi_77_pred_1 = _2880;
                        frontier_phi_77_pred_2 = _2879;
                        frontier_phi_77_pred_3 = _2878;
                        frontier_phi_77_pred_4 = _2877;
                        frontier_phi_77_pred_5 = _2876;
                    }
                    _2518 = frontier_phi_77_pred;
                    _2516 = frontier_phi_77_pred_1;
                    _2514 = frontier_phi_77_pred_2;
                    _2512 = frontier_phi_77_pred_3;
                    _2510 = frontier_phi_77_pred_4;
                    _2508 = frontier_phi_77_pred_5;
                    uint _2674 = _2673 + 1u;
                    if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2667 = _2508;
                        _2668 = _2510;
                        _2669 = _2512;
                        _2670 = _2514;
                        _2671 = _2516;
                        _2672 = _2518;
                        _2673 = _2674;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2512;
                frontier_phi_58_59_ladder_1 = _2518;
                frontier_phi_58_59_ladder_2 = _2516;
                frontier_phi_58_59_ladder_3 = _2514;
                frontier_phi_58_59_ladder_4 = _2510;
                frontier_phi_58_59_ladder_5 = _2508;
            }
            else
            {
                frontier_phi_58_59_ladder = _2391;
                frontier_phi_58_59_ladder_1 = _2397;
                frontier_phi_58_59_ladder_2 = _2395;
                frontier_phi_58_59_ladder_3 = _2393;
                frontier_phi_58_59_ladder_4 = _2389;
                frontier_phi_58_59_ladder_5 = _2387;
            }
            _2507 = frontier_phi_58_59_ladder_5;
            _2509 = frontier_phi_58_59_ladder_4;
            _2511 = frontier_phi_58_59_ladder;
            _2513 = frontier_phi_58_59_ladder_3;
            _2515 = frontier_phi_58_59_ladder_2;
            _2517 = frontier_phi_58_59_ladder_1;
        }
        float _2522 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        _2294 = (_2522 * _2513) + _1730;
        _2296 = (_2522 * _2515) + _1732;
        _2298 = (_2522 * _2517) + _1734;
        _2300 = ((_2507 * _506) * _2522) + _2075;
        _2302 = ((_2509 * _508) * _2522) + _2077;
        _2304 = ((_2511 * _509) * _2522) + _2079;
    }
    else
    {
        _2294 = _1730;
        _2296 = _1732;
        _2298 = _1734;
        _2300 = _2075;
        _2302 = _2077;
        _2304 = _2079;
    }
    float _4261 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4272 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4283 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4294 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2322 = ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2294 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _521))) + ((_2300 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1362)) * cbPerFrame._m0[3u].x);
    float _2323 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2296 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _521))) + ((_2302 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1362)) * cbPerFrame._m0[3u].x);
    float _2324 = ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2298 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _521))) + ((_2304 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1362)) * cbPerFrame._m0[3u].x);
    float _2325 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2332 = cbInstanceData._m0[_480 + 6u].w * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)));
    float _2337 = _440 / cbSceneParam._m0[86u].x;
    float _2338 = _441 / cbSceneParam._m0[86u].y;
    vec4 _2352 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2354 = _2352.x;
    float _2355 = _2352.y;
    float _2356 = _2352.z;
    float _2357 = _2352.w;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2412 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2413 = _2412 / _362;
        float _2424 = _2413 * _413;
        float _2425 = _414 * _2413;
        float _2426 = (-0.0) - _2425;
        float _2427 = _2413 * _415;
        float _2429 = (cbSceneParam._m0[77u].w * _2426) / _2412;
        float _2430 = _2429 + cbSceneParam._m0[79u].w;
        float _2431 = cbSceneParam._m0[79u].w - _2425;
        float _2437 = sqrt(((_2424 * _2424) + (_2425 * _2425)) + (_2427 * _2427));
        float _2440 = (1.0 - (cbSceneParam._m0[77u].w / _2412)) * _2437;
        float _2445 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2447 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2624;
        if (abs((_2426 - _2429) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2624 = ((((_2430 > 0.0) ? exp2(_2445 * _2430) : (2.0 - exp2(_2447 * _2430))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2440;
        }
        else
        {
            float _2568 = 1.0 / cbSceneParam._m0[80u].x;
            float _2569 = isnan(_2431) ? _2430 : (isnan(_2430) ? _2431 : max(_2430, _2431));
            float _2570 = isnan(_2431) ? _2430 : (isnan(_2430) ? _2431 : min(_2430, _2431));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            _2624 = ((abs(_2437 / _2426) * cbSceneParam._m0[80u].y) * ((((_2579 - _2580) * 2.0) - ((exp2(_2445 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)))) - exp2(_2445 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))))) * _2568)) - ((exp2(_2447 * _2579) - exp2(_2447 * _2580)) * _2568))) + (_2440 * cbSceneParam._m0[80u].z);
        }
        vec4 _2626 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, 1.0), 0.0);
        float _2635 = exp2((_2624 * (-1.44269502162933349609375)) * (1.0 - _2626.w));
        float _2636 = log2(_2635);
        float _2652 = log2(_2357);
        _2449 = (exp2(_2652 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].x)) * _2626.x) / cbSceneParam._m0[78u].x)) + _2354;
        _2451 = (exp2(_2652 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].y)) * _2626.y) / cbSceneParam._m0[78u].y)) + _2355;
        _2453 = (exp2(_2652 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].z)) * _2626.z) / cbSceneParam._m0[78u].z)) + _2356;
        _2455 = _2635 * _2357;
    }
    else
    {
        _2449 = _2354;
        _2451 = _2355;
        _2453 = _2356;
        _2455 = _2357;
    }
    bool _2662;
    vec4 _2465;
    vec4 _2487;
    float _2489;
    float _2493;
    float _2494;
    float _2495;
    float _2496;
    bool _2506;
    for (;;)
    {
        _2465 = cbMatDynParam._m0[0u];
        float _2467 = roundEven(_2465.y);
        bool _2468 = _2467 == 3.0;
        float _2469 = log2(_2455);
        float _2476 = exp2(_2469 * cbSceneParam._m0[78u].x) * _2325;
        float _2477 = exp2(_2469 * cbSceneParam._m0[78u].y) * _2326;
        float _2478 = exp2(_2469 * cbSceneParam._m0[78u].z) * _2327;
        float _2485 = _429 + (-0.5);
        _2487 = cbMtdParam._m0[1u];
        _2489 = _2487.y * _2485;
        float _2492 = (_2467 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2493 = _2492 * (_2468 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = _2492 * (_2468 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
        _2495 = _2492 * (_2468 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
        _2496 = _2485 * 0.999000012874603271484375;
        _2506 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2506)
        {
            if ((cbInstanceData._m0[_480 + 7u].x + _2496) < 0.5)
            {
                _2662 = true;
                break;
            }
        }
        uint _2603 = _482 + uint(_2465.w);
        if ((cbInstanceData._m0[_2603].w < 1.0) && ((cbInstanceData._m0[_2603].w + _2496) < 0.5))
        {
            _2662 = true;
            break;
        }
        if ((_2489 + _290) < _2487.x)
        {
            _2662 = true;
            break;
        }
        _2662 = false;
        break;
    }
    float _2867;
    if (_2662)
    {
        discard_state = true;
        _2867 = 0.0;
    }
    else
    {
        _2867 = _2332;
    }
    SV_Target.x = _2493;
    SV_Target.y = _2494;
    SV_Target.z = _2495;
    SV_Target.w = _2867;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2332;
    discard_exit();
}


