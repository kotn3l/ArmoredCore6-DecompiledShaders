#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _836;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _232.x * cbMtdParam._m0[9u].x;
    float _240 = _232.y * cbMtdParam._m0[9u].y;
    float _241 = _232.z * cbMtdParam._m0[9u].z;
    float _242 = _232.w * TEXCOORD_1.z;
    vec4 _258 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3199 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))));
    float _278 = fma(_275, _210, fma(_268, _202 * TANGENT.x, (_188 * _180) * _266));
    float _281 = fma(_275, _211, fma(_268, _202 * TANGENT.y, (_188 * _181) * _266));
    float _284 = fma(_275, _212, fma(_268, _202 * TANGENT.z, (_188 * _182) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3210 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _292 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    float _3221 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _293 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
    float _3232 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3243 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3254 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3265 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _297 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _404 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _407 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = (_420 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0)))) * cbInstanceData._m0[_423].z;
    float _3276 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _435 = 1.0 - _297;
    float _436 = _432 * _435;
    float _437 = _433 * _435;
    float _438 = _434 * _435;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _297;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _297;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _297;
    float _446 = _443 + 0.039999999105930328369140625;
    float _448 = _444 + 0.039999999105930328369140625;
    float _449 = _445 + 0.039999999105930328369140625;
    vec4 _458 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _461 = _458.x * TEXCOORD_1.w;
    float _462 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _465 = _462 * 2.0;
    float _469 = (_465 * _289) - _371;
    float _470 = (_465 * _290) - _372;
    float _471 = (_465 * _291) - _373;
    float _475 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3309 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = sqrt(_293);
    float _490 = exp2((_477 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_477 * 3.0));
    float _496 = (1.0 - _490) * ((_477 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _497 = _490 * _477;
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _560 = fma(_533, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525));
        float _564 = fma(_533, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525));
        float _568 = fma(_533, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525));
        float _593 = _525 + _289;
        float _594 = _529 + _290;
        float _595 = _533 + _291;
        float _605 = fma(_595, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) - _560;
        float _606 = fma(_595, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) - _564;
        float _607 = fma(_595, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) - _568;
        float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
        float _624 = ((_611 * _605) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_560 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_611 * _606) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_564 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_611 * _607) / cbModelParam._m0[34u].z) + ((((((_568 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        float _663 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_629.x + (-0.5));
        float _665 = _663 * (_629.y + (-0.5));
        float _666 = _663 * (_629.z + (-0.5));
        float _673 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_636.x + (-0.5));
        float _675 = _673 * (_636.y + (-0.5));
        float _676 = _673 * (_636.z + (-0.5));
        float _683 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_643.x + (-0.5));
        float _685 = _683 * (_643.y + (-0.5));
        float _686 = _683 * (_643.z + (-0.5));
        float _693 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_650.x + (-0.5));
        float _695 = _693 * (_650.y + (-0.5));
        float _696 = _693 * (_650.z + (-0.5));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = _664 * 0.5;
        float _701 = _674 * 0.5;
        float _702 = _684 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _717 = (dot(vec3(_289, _290, _291), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _727 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3357 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_729 + 1.0))) + _734) * _697;
        float _744 = _665 * 0.5;
        float _745 = _675 * 0.5;
        float _746 = _685 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_289, _290, _291), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3390 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_771 + 1.0))) + _776) * _698;
        float _786 = _666 * 0.5;
        float _787 = _676 * 0.5;
        float _788 = _686 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_289, _290, _291), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3423 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_813 + 1.0))) + _818) * _699;
        _835 = _666;
        _837 = _665;
        _838 = _664;
        _839 = _676;
        _840 = _675;
        _841 = _674;
        _842 = _686;
        _843 = _685;
        _844 = _684;
        _845 = _699;
        _846 = _698;
        _847 = _697;
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
    }
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _876 = fma(_533, cbModelParam._m0[30u].z, fma(_529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _525));
        float _880 = fma(_533, cbModelParam._m0[31u].z, fma(_529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _525));
        float _884 = fma(_533, cbModelParam._m0[32u].z, fma(_529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _525));
        float _907 = _525 + _289;
        float _908 = _529 + _290;
        float _909 = _533 + _291;
        float _919 = fma(_909, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907)) - _876;
        float _920 = fma(_909, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907)) - _880;
        float _921 = fma(_909, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907)) - _884;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_876 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_880 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[35u].z) + ((((((_884 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _975 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_942.x + (-0.5));
        float _977 = _975 * (_942.y + (-0.5));
        float _978 = _975 * (_942.z + (-0.5));
        float _985 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_949.x + (-0.5));
        float _987 = _985 * (_949.y + (-0.5));
        float _988 = _985 * (_949.z + (-0.5));
        float _995 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_956.x + (-0.5));
        float _997 = _995 * (_956.y + (-0.5));
        float _998 = _995 * (_956.z + (-0.5));
        float _1005 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_963.x + (-0.5));
        float _1007 = _1005 * (_963.y + (-0.5));
        float _1008 = _1005 * (_963.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_289, _290, _291), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3486 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1039 + 1.0))) + _1044) * _1009;
        float _1054 = _977 * 0.5;
        float _1055 = _987 * 0.5;
        float _1056 = _997 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_289, _290, _291), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3519 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1081 + 1.0))) + _1086) * _1010;
        float _1096 = _978 * 0.5;
        float _1097 = _988 * 0.5;
        float _1098 = _998 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_289, _290, _291), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3552 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1123 + 1.0))) + _1128) * _1011;
        _1145 = _978;
        _1146 = _977;
        _1147 = _976;
        _1148 = _988;
        _1149 = _987;
        _1150 = _986;
        _1151 = _998;
        _1152 = _997;
        _1153 = _996;
        _1154 = _1011;
        _1155 = _1010;
        _1156 = _1009;
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _836;
        _1146 = _836;
        _1147 = _836;
        _1148 = _836;
        _1149 = _836;
        _1150 = _836;
        _1151 = _836;
        _1152 = _836;
        _1153 = _836;
        _1154 = _836;
        _1155 = _836;
        _1156 = _836;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1192 = fma(_1171, cbSceneParam._m0[89u].z, fma(_1170, cbSceneParam._m0[89u].y, _1169 * cbSceneParam._m0[89u].x));
    float _1195 = fma(_1171, cbSceneParam._m0[90u].z, fma(_1170, cbSceneParam._m0[90u].y, _1169 * cbSceneParam._m0[90u].x));
    float _1198 = fma(_1171, cbSceneParam._m0[91u].z, fma(_1170, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1169));
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = _471 * 0.5;
    float _1216 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1219 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1222 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1256;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1229 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_835, _839, _842, _845));
        float _1233 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_837, _840, _843, _846));
        float _1237 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_838, _841, _844, _847));
        float _1244 = dot(vec4(cbModelParam._m0[39u]), vec4(_1213, _1214, _1215, 1.0));
        _1256 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1256 = 1.0;
    }
    float _1267;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1258 = dot(vec4(cbModelParam._m0[40u]), vec4(_1213, _1214, _1215, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1271 = (_1267 * cbModelParam._m0[1u].x) + (_1256 * (1.0 - cbModelParam._m0[1u].x));
    float _1281 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1282 = isnan(_1281) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1281 : min(cbModelParam._m0[25u].z, _1281));
    float _1364;
    float _1366;
    float _1368;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1331 = fma(_533, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525)) + cbModelParam._m0[13u].w;
        float _1335 = fma(_533, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525)) + cbModelParam._m0[14u].w;
        float _1339 = fma(_533, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525)) + cbModelParam._m0[15u].w;
        float _1342 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1345 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1348 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1376;
        if (_1342 > 0.0)
        {
            _1376 = abs((1.0 - _1331) / _1342);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1331 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1376 = frontier_phi_16_14_ladder;
        }
        float _1605;
        if (_1345 > 0.0)
        {
            _1605 = abs((1.0 - _1335) / _1345);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1335 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1605 = frontier_phi_25_21_ladder;
        }
        float _1862;
        if (_1348 > 0.0)
        {
            _1862 = abs((1.0 - _1339) / _1348);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1339 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1862 = frontier_phi_37_32_ladder;
        }
        float _1864 = isnan(_1605) ? _1376 : (isnan(_1376) ? _1605 : min(_1376, _1605));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1342) + _1331;
        float _1870 = (_1865 * _1345) + _1335;
        float _1871 = (_1865 * _1348) + _1339;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1282);
            frontier_phi_15_37_ladder = _1999.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1999.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1999.x * cbModelParam._m0[1u].y;
        }
        _1364 = frontier_phi_15_37_ladder_2;
        _1366 = frontier_phi_15_37_ladder_1;
        _1368 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1282);
        _1364 = _1352.x * cbModelParam._m0[1u].y;
        _1366 = _1352.y * cbModelParam._m0[1u].y;
        _1368 = _1352.z * cbModelParam._m0[1u].y;
    }
    float _1372 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1372 : min(cbModelParam._m0[25u].w, _1372));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1430 = fma(_533, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525)) + cbModelParam._m0[21u].w;
        float _1434 = fma(_533, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525)) + cbModelParam._m0[22u].w;
        float _1438 = fma(_533, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525)) + cbModelParam._m0[23u].w;
        float _1441 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1444 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1447 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1610;
        if (_1441 > 0.0)
        {
            _1610 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1610 = frontier_phi_27_23_ladder;
        }
        float _1889;
        if (_1444 > 0.0)
        {
            _1889 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1889 = frontier_phi_39_34_ladder;
        }
        float _2102;
        if (_1447 > 0.0)
        {
            _2102 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2102 = frontier_phi_48_45_ladder;
        }
        float _2104 = isnan(_1889) ? _1610 : (isnan(_1610) ? _1889 : min(_1610, _1889));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1441) + _1430;
        float _2110 = (_2105 * _1444) + _1434;
        float _2111 = (_2105 * _1447) + _1438;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2112;
        float _2115 = _2112 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2111 > _2115) || ((_2111 < _2113) || ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 < _2113) || (_2109 > _2115))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2111, cbModelParam._m0[17u].z, fma(_2110, cbModelParam._m0[17u].y, _2109 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2111, cbModelParam._m0[18u].z, fma(_2110, cbModelParam._m0[18u].y, _2109 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2111, cbModelParam._m0[19u].z, fma(_2110, cbModelParam._m0[19u].y, _2109 * cbModelParam._m0[19u].x))), _1373);
            frontier_phi_24_48_ladder = _2311.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2311.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2311.x * cbModelParam._m0[1u].z;
        }
        _1466 = frontier_phi_24_48_ladder_2;
        _1468 = frontier_phi_24_48_ladder_1;
        _1470 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1373);
        _1466 = _1450.x * cbModelParam._m0[1u].z;
        _1468 = _1450.y * cbModelParam._m0[1u].z;
        _1470 = _1450.z * cbModelParam._m0[1u].z;
    }
    float _1483 = (((_496 * _446) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_496 * _448) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1487 = (((_496 * _449) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1490 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, _1483 * cbSceneParam._m0[91u].x));
    vec4 _1504 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_379, _380));
    float _1506 = _1504.w;
    float _1518 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1506);
    float _1519 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1506);
    float _1520 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1506);
    uvec4 _1524 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1526 = _1524.x * 14u;
    uint _1527 = _1526 + 13u;
    float _1534 = _461 + (-1.0);
    float _1539 = (cbLight._m0[_1527].x * _1534) + 1.0;
    float _1540 = (cbLight._m0[_1527].y * _1534) + 1.0;
    float _1541 = (cbLight._m0[_1527].z * _1534) + 1.0;
    float _1542 = (cbLight._m0[_1527].w * _1534) + 1.0;
    uint _1543 = _1526 + 5u;
    float _1549 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1553 = _1526 + 4u;
    float _1563 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1567 = _1526 | 1u;
    float _1578 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_289, _290, _291));
    float _1581 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_289, _290, _291));
    float _3688 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _3699 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _1586 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.3183098733425140380859375;
    float _1588 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.3183098733425140380859375;
    float _1595 = ((cbLight._m0[_1543].x * _1549) * _1588) + (((cbLight._m0[_1553].x * _1518) * _1563) * _1586);
    float _1596 = ((_1549 * cbLight._m0[_1543].y) * _1588) + (((cbLight._m0[_1553].y * _1519) * _1563) * _1586);
    float _1597 = ((_1549 * cbLight._m0[_1543].z) * _1588) + (((cbLight._m0[_1553].z * _1520) * _1563) * _1586);
    uvec4 _1602 = floatBitsToUint(cbLight._m0[_1526 + 12u]);
    bool _1604 = _1602.x == 0u;
    float _1615;
    float _1617;
    float _1619;
    if (_1604)
    {
        _1615 = _1595;
        _1617 = _1596;
        _1619 = _1597;
    }
    else
    {
        uint _1623 = _1526 + 6u;
        float _1639 = (dot(vec3(cbLight._m0[_1526 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1640 = _1639 * _1639;
        float _3710 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1642 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1615 = (((cbLight._m0[_1623].x * 0.3183098733425140380859375) * _1641) * _1642) + _1595;
        _1617 = (((cbLight._m0[_1623].y * 0.3183098733425140380859375) * _1641) * _1642) + _1596;
        _1619 = (((cbLight._m0[_1623].z * 0.3183098733425140380859375) * _1641) * _1642) + _1597;
    }
    bool _1622 = _1602.y == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1622)
    {
        _1660 = _1615;
        _1662 = _1617;
        _1664 = _1619;
    }
    else
    {
        uint _1833 = _1526 + 7u;
        float _1849 = (dot(vec3(cbLight._m0[_1526 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3726 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1852 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1660 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1615;
        _1662 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1617;
        _1664 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1619;
    }
    uint _1667 = _1526 + 8u;
    float _1680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1526].w)) * _293) * 0.949999988079071044921875);
    float _1681 = _1680 * _1680;
    float _1682 = cbLight._m0[_1526].x + _371;
    float _1683 = cbLight._m0[_1526].y + _372;
    float _1684 = cbLight._m0[_1526].z + _373;
    float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
    float _1689 = _1688 * _1682;
    float _1690 = _1688 * _1683;
    float _1691 = _1688 * _1684;
    float _1692 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1526].xyz));
    float _3742 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _1696 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1697 = dot(vec3(_289, _290, _291), vec3(_1689, _1690, _1691));
    float _3764 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _1701 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_1689, _1690, _1691));
    float _3775 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1705 = _1681 * _1681;
    float _1709 = ((_1700 * _1700) * (_1705 + (-1.0))) + 1.0;
    float _1717 = exp2(log2(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * 5.0);
    float _1718 = 0.959999978542327880859375 - _443;
    float _1720 = 0.959999978542327880859375 - _444;
    float _1721 = 0.959999978542327880859375 - _445;
    float _1728 = 1.0 - _1681;
    float _1739 = (0.5 / (((_1696 * ((_1695 * _1728) + _1681)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1728) + _1681) * _1695))) * _1695;
    float _3786 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1741 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1705 / ((_1709 * _1709) * 3.141590118408203125));
    uint _1755 = _1526 + 9u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _293) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1567].x + _371;
    float _1769 = cbLight._m0[_1567].y + _372;
    float _1770 = cbLight._m0[_1567].z + _373;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1567].xyz));
    float _3797 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1782 = dot(vec3(_289, _290, _291), vec3(_1775, _1776, _1777));
    float _3808 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1775, _1776, _1777));
    float _3819 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1767 * _1767;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1801 = exp2(log2(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * 5.0);
    float _1808 = 1.0 - _1767;
    float _1818 = (0.5 / (((_1696 * ((_1781 * _1808) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1808) + _1767) * _1781))) * _1781;
    float _3830 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    float _1830 = (((((_1801 * _1718) + _446) * cbLight._m0[_1755].x) * _1820) * _1549) + ((((cbLight._m0[_1667].x * _1518) * ((_1717 * _1718) + _446)) * _1741) * _1563);
    float _1831 = (((((_1801 * _1720) + _448) * cbLight._m0[_1755].y) * _1820) * _1549) + ((((cbLight._m0[_1667].y * _1519) * ((_1717 * _1720) + _448)) * _1741) * _1563);
    float _1832 = (((((_1801 * _1721) + _449) * cbLight._m0[_1755].z) * _1820) * _1549) + ((((cbLight._m0[_1667].z * _1520) * ((_1717 * _1721) + _449)) * _1741) * _1563);
    float _1894;
    float _1896;
    float _1898;
    if (_1604)
    {
        _1894 = _1830;
        _1896 = _1831;
        _1898 = _1832;
    }
    else
    {
        uint _1900 = _1526 + 2u;
        uint _1904 = _1526 + 10u;
        float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _293) * 0.949999988079071044921875);
        float _1919 = _1918 * _1918;
        float _1920 = cbLight._m0[_1900].x + _371;
        float _1921 = cbLight._m0[_1900].y + _372;
        float _1922 = cbLight._m0[_1900].z + _373;
        float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
        float _1927 = _1926 * _1920;
        float _1928 = _1926 * _1921;
        float _1929 = _1926 * _1922;
        float _1930 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1900].xyz));
        float _3841 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1934 = dot(vec3(_289, _290, _291), vec3(_1927, _1928, _1929));
        float _3852 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_1927, _1928, _1929));
        float _3863 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = _1919 * _1919;
        float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
        float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0);
        float _1960 = 1.0 - _1919;
        float _1970 = (0.5 / (((_1696 * ((_1933 * _1960) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1960) + _1919) * _1933))) * _1933;
        float _3874 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1972 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
        float _1973 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1894 = (((((_1953 * _1718) + _446) * cbLight._m0[_1904].x) * _1972) * _1973) + _1830;
        _1896 = (((((_1953 * _1720) + _448) * cbLight._m0[_1904].y) * _1972) * _1973) + _1831;
        _1898 = (((((_1953 * _1721) + _449) * cbLight._m0[_1904].z) * _1972) * _1973) + _1832;
    }
    float _2008;
    float _2010;
    float _2012;
    if (_1622)
    {
        _2008 = _1894;
        _2010 = _1896;
        _2012 = _1898;
    }
    else
    {
        uint _2019 = _1526 + 3u;
        uint _2023 = _1526 + 11u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _293) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _371;
        float _2040 = cbLight._m0[_2019].y + _372;
        float _2041 = cbLight._m0[_2019].z + _373;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2019].xyz));
        float _3890 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _2053 = dot(vec3(_289, _290, _291), vec3(_2046, _2047, _2048));
        float _3901 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _3912 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1696 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _2079) + _2038) * _2052))) * _2052;
        float _3923 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _2008 = (((((_2072 * _1718) + _446) * cbLight._m0[_2023].x) * _2091) * _2092) + _1894;
        _2010 = (((((_2072 * _1720) + _448) * cbLight._m0[_2023].y) * _2091) * _2092) + _1896;
        _2012 = (((((_2072 * _1721) + _449) * cbLight._m0[_2023].z) * _2091) * _2092) + _1898;
    }
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    if (_1524.y == 0u)
    {
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2167;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2167;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2167;
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.x;
        uint _2194 = uint((float(_2182.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2183))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2183)));
        float _2204 = (log2(_2170 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2205 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        uint _2208 = uint(isnan(14.0) ? _2205 : (isnan(_2205) ? 14.0 : min(_2205, 14.0)));
        uvec4 _2213 = texelFetch(g_lightClusterGridBuffer, int(((_2208 << 2u) + (_2194 << 6u)) >> 2u));
        uint _2214 = _2213.x;
        uint _2215 = _2182.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2215 >> 4u) & 15u)) + 4294967295u) & _2214) == 0u) || ((_2215 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            uint _2466 = 0u;
            uint _2475;
            bool _2476;
            for (;;)
            {
                _2475 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                _2476 = _2475 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2476)
                {
                    frontier_phi_63_pred = _2465;
                    frontier_phi_63_pred_1 = _2464;
                    frontier_phi_63_pred_2 = _2463;
                    frontier_phi_63_pred_3 = _2462;
                    frontier_phi_63_pred_4 = _2461;
                    frontier_phi_63_pred_5 = _2460;
                }
                else
                {
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    uint _2590;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2475;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    for (;;)
                    {
                        uint _2594 = uint(findLSB(_2590)) + (_2466 << 5u);
                        uint _2591 = (_2590 + 4294967295u) & _2590;
                        uint _2596 = _2594 * 48u;
                        vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2616 = (_2594 * 48u) + 4u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2635 = (_2594 * 48u) + 8u;
                        vec3 _2646 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x));
                        float _2650 = _2610.x - _2168;
                        float _2651 = _2610.y - _2169;
                        float _2652 = _2610.z - _2170;
                        float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                        float _2656 = inversesqrt(_2653);
                        float _2657 = _2656 * _2650;
                        float _2658 = _2656 * _2651;
                        float _2659 = _2656 * _2652;
                        float _2660 = dot(vec3(_401, _404, _407), vec3(_2657, _2658, _2659));
                        float _2665 = 1.0 - (_2653 * _2610.w);
                        float _3949 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2667 = sqrt(_2653) * _2629.w;
                        float _2670 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2660) + _2671;
                        float _2677 = _2667 * _2667;
                        float _2681 = ((isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))) * _2666) / ((_2677 * 0.699999988079071044921875) + 1.0);
                        float _2685 = (-0.0) - _2168;
                        float _2686 = (-0.0) - _2169;
                        float _2687 = (-0.0) - _2170;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2677 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _477;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_401, _404, _407), vec3(_2692, _2693, _2694));
                        float _3965 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2727 = dot(vec3(_401, _404, _407), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _3976 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2670 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2660) + _2736;
                        float _3987 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _3998 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) / ((_2734 * _2734) * ((_2677 * 2.1991131305694580078125) + 3.141590118408203125))) * _2666;
                        _2519 = (_2681 * _2629.x) + _2587;
                        _2520 = (_2681 * _2629.y) + _2588;
                        _2521 = (_2681 * _2629.z) + _2589;
                        _2516 = (_2762 * _2646.x) + _2584;
                        _2517 = (_2762 * _2646.y) + _2585;
                        _2518 = (_2762 * _2646.z) + _2586;
                        if (_2591 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2591;
                        }
                    }
                    frontier_phi_63_pred = _2521;
                    frontier_phi_63_pred_1 = _2520;
                    frontier_phi_63_pred_2 = _2519;
                    frontier_phi_63_pred_3 = _2518;
                    frontier_phi_63_pred_4 = _2517;
                    frontier_phi_63_pred_5 = _2516;
                }
                _2327 = frontier_phi_63_pred;
                _2325 = frontier_phi_63_pred_1;
                _2323 = frontier_phi_63_pred_2;
                _2321 = frontier_phi_63_pred_3;
                _2319 = frontier_phi_63_pred_4;
                _2317 = frontier_phi_63_pred_5;
                uint _2467 = _2466 + 1u;
                if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2460 = _2317;
                    _2461 = _2319;
                    _2462 = _2321;
                    _2463 = _2323;
                    _2464 = _2325;
                    _2465 = _2327;
                    _2466 = _2467;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((4294967295u << _2333) & _2214) == 0u)
        {
            _2428 = _2316;
            _2430 = _2318;
            _2432 = _2320;
            _2434 = _2322;
            _2436 = _2324;
            _2438 = _2326;
        }
        else
        {
            float _2453 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
            float _2454 = _2453 * _2168;
            float _2455 = _2453 * _2169;
            float _2456 = _2453 * _2170;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2429;
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2567 = _2316;
                float _2568 = _2318;
                float _2569 = _2320;
                float _2570 = _2322;
                float _2571 = _2324;
                float _2572 = _2326;
                uint _2573 = _2333;
                uint _2582;
                bool _2583;
                for (;;)
                {
                    _2582 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                    _2583 = _2582 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2583)
                    {
                        frontier_phi_69_pred = _2572;
                        frontier_phi_69_pred_1 = _2571;
                        frontier_phi_69_pred_2 = _2570;
                        frontier_phi_69_pred_3 = _2569;
                        frontier_phi_69_pred_4 = _2568;
                        frontier_phi_69_pred_5 = _2567;
                    }
                    else
                    {
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        uint _2786 = _2582;
                        uint _2787;
                        vec4 _2812;
                        float _2813;
                        vec4 _2828;
                        vec3 _2840;
                        vec4 _2856;
                        vec4 _2872;
                        float _2919;
                        bool _2920;
                        for (;;)
                        {
                            uint _2797 = ((_2573 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2786));
                            _2787 = (_2786 + 4294967295u) & _2786;
                            uint _2799 = _2797 * 40u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            _2813 = _2812.w;
                            uint _2815 = (_2797 * 40u) + 4u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2830 = (_2797 * 40u) + 8u;
                            _2840 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x));
                            uint _2843 = (_2797 * 40u) + 16u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2797 * 40u) + 20u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2797 * 40u) + 24u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2894 = (_2797 * 40u) + 28u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2919 = fma(_2170, _2907.z, fma(_2169, _2907.y, _2907.x * _2168)) + _2907.w;
                            _2920 = !((fma(_2170, _2888.z, fma(_2169, _2888.y, _2888.x * _2168)) + _2888.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2920)
                            {
                                float _2947 = _2812.x - _2168;
                                float _2948 = _2812.y - _2169;
                                float _2949 = _2812.z - _2170;
                                float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                                float _2953 = inversesqrt(_2950);
                                float _2954 = _2953 * _2947;
                                float _2955 = _2953 * _2948;
                                float _2956 = _2953 * _2949;
                                float _2960 = 1.0 - (_2950 / (_2813 * _2813));
                                float _4009 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _2965 = sqrt(_2950) * _2828.w;
                                float _2967 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                                float _2968 = _2967 * _2967;
                                float _2971 = ((1.0 - _2968) * dot(vec3(_2954, _2955, _2956), vec3(_401, _404, _407))) + _2968;
                                float _2974 = _2965 * _2965;
                                float _2978 = (fma(_2170, _2856.z, fma(_2169, _2856.y, _2856.x * _2168)) + _2856.w) / _2919;
                                float _2979 = (fma(_2170, _2872.z, fma(_2169, _2872.y, _2872.x * _2168)) + _2872.w) / _2919;
                                float _2983 = 1.0 - dot(vec2(_2978, _2979), vec2(_2978, _2979));
                                float _4025 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _2985 = _2984 * (((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2961) / ((_2974 * 0.699999988079071044921875) + 1.0));
                                float _2997 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                                float _2998 = 1.0 - _477;
                                float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                                float _3006 = _3005 * _3005;
                                float _3007 = _3006 * _3006;
                                float _3008 = _2954 - _2454;
                                float _3009 = _2955 - _2455;
                                float _3010 = _2956 - _2456;
                                float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                                float _3018 = dot(vec3(_401, _404, _407), vec3((-0.0) - _2454, (-0.0) - _2455, (-0.0) - _2456));
                                float _4036 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3022 = dot(vec3(_401, _404, _407), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                                float _4047 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                                float _3030 = _2967 * _3006;
                                float _3031 = _3030 * _3030;
                                float _3037 = ((1.0 - _3031) * dot(vec3(_401, _404, _407), vec3(_2954, _2955, _2956))) + _3031;
                                float _4058 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3039 = 1.0 - _3006;
                                float _3049 = (0.5 / (((_3038 * ((_3021 * _3039) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3006) * _3021))) * _3038;
                                float _4069 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3059 = (_2984 * _2961) * (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) / ((_3029 * _3029) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2985 * _2828.z;
                                frontier_phi_75_pred_1 = _2985 * _2828.y;
                                frontier_phi_75_pred_2 = _2985 * _2828.x;
                                frontier_phi_75_pred_3 = _3059 * _2840.z;
                                frontier_phi_75_pred_4 = _3059 * _2840.y;
                                frontier_phi_75_pred_5 = _3059 * _2840.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3068 = frontier_phi_75_pred;
                            _3067 = frontier_phi_75_pred_1;
                            _3066 = frontier_phi_75_pred_2;
                            _3065 = frontier_phi_75_pred_3;
                            _3064 = frontier_phi_75_pred_4;
                            _3063 = frontier_phi_75_pred_5;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            if (_2787 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2787;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2772;
                        frontier_phi_69_pred_1 = _2771;
                        frontier_phi_69_pred_2 = _2770;
                        frontier_phi_69_pred_3 = _2769;
                        frontier_phi_69_pred_4 = _2768;
                        frontier_phi_69_pred_5 = _2767;
                    }
                    _2439 = frontier_phi_69_pred;
                    _2437 = frontier_phi_69_pred_1;
                    _2435 = frontier_phi_69_pred_2;
                    _2433 = frontier_phi_69_pred_3;
                    _2431 = frontier_phi_69_pred_4;
                    _2429 = frontier_phi_69_pred_5;
                    uint _2574 = _2573 + 1u;
                    if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2567 = _2429;
                        _2568 = _2431;
                        _2569 = _2433;
                        _2570 = _2435;
                        _2571 = _2437;
                        _2572 = _2439;
                        _2573 = _2574;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2439;
                frontier_phi_57_58_ladder_1 = _2437;
                frontier_phi_57_58_ladder_2 = _2435;
                frontier_phi_57_58_ladder_3 = _2433;
                frontier_phi_57_58_ladder_4 = _2431;
                frontier_phi_57_58_ladder_5 = _2429;
            }
            else
            {
                frontier_phi_57_58_ladder = _2326;
                frontier_phi_57_58_ladder_1 = _2324;
                frontier_phi_57_58_ladder_2 = _2322;
                frontier_phi_57_58_ladder_3 = _2320;
                frontier_phi_57_58_ladder_4 = _2318;
                frontier_phi_57_58_ladder_5 = _2316;
            }
            _2428 = frontier_phi_57_58_ladder_5;
            _2430 = frontier_phi_57_58_ladder_4;
            _2432 = frontier_phi_57_58_ladder_3;
            _2434 = frontier_phi_57_58_ladder_2;
            _2436 = frontier_phi_57_58_ladder_1;
            _2438 = frontier_phi_57_58_ladder;
        }
        float _2443 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
        _2226 = (_2443 * _2434) + _1660;
        _2228 = (_2443 * _2436) + _1662;
        _2230 = (_2443 * _2438) + _1664;
        _2232 = ((_2428 * _446) * _2443) + _2008;
        _2234 = ((_2430 * _448) * _2443) + _2010;
        _2236 = ((_2432 * _449) * _2443) + _2012;
    }
    else
    {
        _2226 = _1660;
        _2228 = _1662;
        _2230 = _1664;
        _2232 = _2008;
        _2234 = _2010;
        _2236 = _2012;
    }
    float _4085 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4096 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4107 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4118 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _2261 = cbInstanceData._m0[_420 + 6u].w * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)));
    float _2266 = _379 / cbSceneParam._m0[86u].x;
    float _2267 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2281 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2283 = _2281.x;
    float _2284 = _2281.y;
    float _2285 = _2281.z;
    float _2286 = _2281.w;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2341 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2342 = _2341 / _313;
        float _2353 = _2342 * _364;
        float _2354 = _365 * _2342;
        float _2355 = (-0.0) - _2354;
        float _2356 = _2342 * _366;
        float _2358 = (cbSceneParam._m0[77u].w * _2355) / _2341;
        float _2359 = _2358 + cbSceneParam._m0[79u].w;
        float _2360 = cbSceneParam._m0[79u].w - _2354;
        float _2366 = sqrt(((_2353 * _2353) + (_2354 * _2354)) + (_2356 * _2356));
        float _2369 = (1.0 - (cbSceneParam._m0[77u].w / _2341)) * _2366;
        float _2374 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2376 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2529;
        if (abs((_2355 - _2358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2529 = ((((_2359 > 0.0) ? exp2(_2374 * _2359) : (2.0 - exp2(_2376 * _2359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2369;
        }
        else
        {
            float _2489 = 1.0 / cbSceneParam._m0[80u].x;
            float _2490 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : max(_2359, _2360));
            float _2491 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : min(_2359, _2360));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            float _2501 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : min(_2491, 0.0));
            _2529 = ((abs(_2366 / _2355) * cbSceneParam._m0[80u].y) * ((((_2500 - _2501) * 2.0) - ((exp2(_2374 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)))) - exp2(_2374 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0))))) * _2489)) - ((exp2(_2376 * _2500) - exp2(_2376 * _2501)) * _2489))) + (_2369 * cbSceneParam._m0[80u].z);
        }
        vec4 _2531 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, 1.0), 0.0);
        float _2540 = exp2((_2529 * (-1.44269502162933349609375)) * (1.0 - _2531.w));
        float _2541 = log2(_2540);
        float _2557 = log2(_2286);
        _2378 = (exp2(_2557 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].x)) * _2531.x) / cbSceneParam._m0[78u].x)) + _2283;
        _2380 = (exp2(_2557 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].y)) * _2531.y) / cbSceneParam._m0[78u].y)) + _2284;
        _2382 = (exp2(_2557 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].z)) * _2531.z) / cbSceneParam._m0[78u].z)) + _2285;
        _2384 = _2540 * _2286;
    }
    else
    {
        _2378 = _2283;
        _2380 = _2284;
        _2382 = _2285;
        _2384 = _2286;
    }
    float _2396 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2397 = _2396 == 3.0;
    float _2398 = log2(_2384);
    float _2405 = exp2(_2398 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2226 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _461))) + ((_2232 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2406 = exp2(_2398 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2228 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _461))) + ((_2234 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2407 = exp2(_2398 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2230 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _461))) + ((_2236 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2416 = (_2396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2416 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2378)));
    SV_Target.y = _2416 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2380)));
    SV_Target.z = _2416 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.w = _2261;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2261;
}


