#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall2_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall2_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _275 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _285 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _275);
    float _286 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _275);
    float _287 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _275);
    float _307 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    vec4 _325 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_5, SS_BumpMap), vec2((((_307 * cbMtdParam._m0[18u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_307 * cbMtdParam._m0[18u].y) + TEXCOORD_1.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _330 = _325.x * 2.0;
    float _332 = _325.y * 2.0;
    float _333 = _330 + (-1.0);
    float _335 = _332 + (-1.0);
    float _336 = dot(vec2(_333, _335), vec2(_333, _335));
    float _3474 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    float _355 = (cbMtdParam._m0[17u].x * _307) + TEXCOORD_1.x;
    float _356 = (cbMtdParam._m0[17u].y * _307) + TEXCOORD_1.y;
    vec4 _368 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_355 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_356 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _373 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].z * cbMtdParam._m0[14u].x);
    float _380 = ((_368.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _382 = (-0.0) - (cbMtdParam._m0[15u].x * ((_368.x * 0.5) + (-0.25)));
    float _383 = fract(_373);
    float _385 = fract(_373 + 0.5);
    float _396 = abs((_383 * 2.0) + (-1.0));
    vec4 _412 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_383 * _382) + _355) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_380 * _383) + _356) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    vec4 _416 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_385 * _382) + _355) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_380 * _385) + _356) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _445 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].z * _307) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[16u].w * _307) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _455 = ((_330 + (-1.35000002384185791015625)) + ((((((_416.x - _414) * _396) + _414) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_445.x * 0.699999988079071044921875);
    float _458 = ((_332 + (-1.35000002384185791015625)) + ((((((_416.y - _415) * _396) + _415) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_445.y * 0.699999988079071044921875);
    float _461 = fma(_342, _229, fma(_458, _221 * TANGENT.x, _455 * (_207 * _200)));
    float _464 = fma(_342, _230, fma(_458, _221 * TANGENT.y, _455 * (_207 * _201)));
    float _467 = fma(_342, _231, fma(_458, _221 * TANGENT.z, _455 * (_207 * _202)));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    float _472 = _471 * _461;
    float _473 = _471 * _464;
    float _474 = _471 * _467;
    vec4 _497 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _509 = (cbMtdParam._m0[17u].z * _307) + TEXCOORD_1.x;
    float _510 = (cbMtdParam._m0[17u].w * _307) + TEXCOORD_1.y;
    vec4 _540 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _509) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _510) + cbTextureTilingScale._m0[1u].w));
    float _549 = (cbMtdParam._m0[16u].x * _307) + TEXCOORD_1.x;
    float _550 = (cbMtdParam._m0[16u].y * _307) + TEXCOORD_1.y;
    vec4 _555 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_549 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_550 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _563 = ((_555.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _565 = (-0.0) - (cbMtdParam._m0[15u].x * ((_555.x * 0.5) + (-0.25)));
    vec4 _582 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_383 * _565) + _549) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_563 * _383) + _550) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    vec4 _587 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_385 * _565) + _549) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_563 * _385) + _550) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _602 = (((_497.x * cbMtdParam._m0[19u].y) + TEXCOORD_4.x) * cbMtdParam._m0[15u].y) * exp2(log2(texture(sampler2D(M_Waterfall2_snp_0_Texture2D_4, SS_WrapLinear), vec2((_509 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_510 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x) * cbMtdParam._m0[13u].w);
    float _606 = (_497.y * cbMtdParam._m0[19u].z) + TEXCOORD_4.y;
    float _619 = (((cbMtdParam._m0[9u].x + _540.x) * _606) + cbMtdParam._m0[10u].x) + (_602 * (((_587.x - _584) * _396) + _584));
    float _621 = (((cbMtdParam._m0[9u].y + _540.y) * _606) + cbMtdParam._m0[10u].y) + (_602 * (((_587.y - _585) * _396) + _585));
    float _623 = (((cbMtdParam._m0[9u].z + _540.z) * _606) + cbMtdParam._m0[10u].z) + (_602 * (((_587.z - _586) * _396) + _586));
    float _632 = inversesqrt(dot(vec3(_285, _286, _287), vec3(_285, _286, _287)));
    float _633 = _632 * _285;
    float _634 = _632 * _286;
    float _635 = _632 * _287;
    float _639 = dot(vec4(_633, _634, _635, 0.0), vec4(_472, _473, _474, 0.0)) + (-1.0);
    float _3485 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _643 = exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))));
    float _655 = (((_643 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _619) + (cbMtdParam._m0[12u].x * TEXCOORD_4.y);
    float _658 = (((_643 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _621) + (cbMtdParam._m0[12u].y * TEXCOORD_4.y);
    float _661 = (((_643 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _623) + (cbMtdParam._m0[12u].z * TEXCOORD_4.y);
    float _3496 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _667 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3518 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3529 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_474, cbSceneParam._m0[5u].z, fma(_473, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _472));
    float _716 = fma(_474, cbSceneParam._m0[6u].z, fma(_473, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _472));
    float _719 = fma(_474, cbSceneParam._m0[7u].z, fma(_473, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _472));
    uint _732 = uint(roundEven(NORMAL.w)) * 13u;
    uint _733 = _732 + 9u;
    uint _734 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3540 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _757 = _754.x * TEXCOORD_1.z;
    float _758 = dot(vec3(_472, _473, _474), vec3(_633, _634, _635));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _472) - _633;
    float _766 = (_761 * _473) - _634;
    float _767 = (_761 * _474) - _635;
    float _771 = abs(dot(vec3(_633, _634, _635), vec3(_472, _473, _474)));
    float _3573 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_667);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _857 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _861 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _885 = _818 + _472;
        float _886 = _822 + _473;
        float _887 = _826 + _474;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _853;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _857;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _861;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_472, _473, _474), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3621 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_472, _473, _474), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3654 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_472, _473, _474), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3687 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1172 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1176 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1199 = _818 + _472;
        float _1200 = _822 + _473;
        float _1201 = _826 + _474;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_472, _473, _474), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3750 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_472, _473, _474), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3783 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_472, _473, _474), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3816 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _765 * 0.5;
    float _1506 = _766 * 0.5;
    float _1507 = _767 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _667);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1635 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1638 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1666 = frontier_phi_16_14_ladder;
        }
        float _1836;
        if (_1635 > 0.0)
        {
            _1836 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1836 = frontier_phi_25_21_ladder;
        }
        float _2280;
        if (_1638 > 0.0)
        {
            _2280 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2280 = frontier_phi_37_32_ladder;
        }
        float _2282 = isnan(_1836) ? _1666 : (isnan(_1666) ? _1836 : min(_1666, _1836));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1632) + _1621;
        float _2288 = (_2283 * _1635) + _1625;
        float _2289 = (_2283 * _1638) + _1629;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2290;
        float _2294 = _2290 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 > _2294) || ((_2288 < _2292) || ((_2287 < _2292) || (_2287 > _2294))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_15_37_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_15_37_ladder_2;
        _1656 = frontier_phi_15_37_ladder_1;
        _1658 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1574);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _667);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1717 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1721 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1725 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1728 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1731 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1734 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1841;
        if (_1728 > 0.0)
        {
            _1841 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1841 = frontier_phi_27_23_ladder;
        }
        float _2307;
        if (_1731 > 0.0)
        {
            _2307 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2307 = frontier_phi_39_34_ladder;
        }
        float _2659;
        if (_1734 > 0.0)
        {
            _2659 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2659 = frontier_phi_51_46_ladder;
        }
        float _2661 = isnan(_2307) ? _1841 : (isnan(_1841) ? _2307 : min(_1841, _2307));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _1728) + _1717;
        float _2667 = (_2662 * _1731) + _1721;
        float _2668 = (_2662 * _1734) + _1725;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_24_51_ladder;
        float frontier_phi_24_51_ladder_1;
        float frontier_phi_24_51_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_24_51_ladder = 0.0;
            frontier_phi_24_51_ladder_1 = 0.0;
            frontier_phi_24_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_24_51_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_1 = _2789.x * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_2 = _2789.y * cbModelParam._m0[1u].z;
        }
        _1753 = frontier_phi_24_51_ladder_1;
        _1755 = frontier_phi_24_51_ladder_2;
        _1757 = frontier_phi_24_51_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1663);
        _1753 = _1737.x * cbModelParam._m0[1u].z;
        _1755 = _1737.y * cbModelParam._m0[1u].z;
        _1757 = _1737.z * cbModelParam._m0[1u].z;
    }
    float _1769 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1770 = _1769 * ((cbModelParam._m0[1u].w * (_1753 - _1654)) + _1654);
    float _1771 = _1769 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1772 = _1769 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1775 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1770 * cbSceneParam._m0[91u].x));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1828 = _1815 / _1827;
    float _1829 = _1819 / _1827;
    float _1830 = _1823 / _1827;
    float _1977;
    float _1978;
    float _1979;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1857 = ((uint(_1830 > cbSceneParam._m0[59u].y) + uint(_1830 > cbSceneParam._m0[59u].x)) + uint(_1830 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1858 = _1857 + 43u;
        uint _1866 = _1857 + 44u;
        uint _1874 = _1857 + 45u;
        uint _1882 = _1857 + 46u;
        float _1893 = fma(_1827, cbSceneParam._m0[_1858].w, fma(_1823, cbSceneParam._m0[_1858].z, fma(_1819, cbSceneParam._m0[_1858].y, _1815 * cbSceneParam._m0[_1858].x)));
        float _1897 = fma(_1827, cbSceneParam._m0[_1866].w, fma(_1823, cbSceneParam._m0[_1866].z, fma(_1819, cbSceneParam._m0[_1866].y, _1815 * cbSceneParam._m0[_1866].x)));
        float _1905 = fma(_1827, cbSceneParam._m0[_1882].w, fma(_1823, cbSceneParam._m0[_1882].z, fma(_1819, cbSceneParam._m0[_1882].y, _1815 * cbSceneParam._m0[_1882].x)));
        float _1910 = cbSceneParam._m0[33u].z * _1905;
        float _1912 = cbSceneParam._m0[33u].w * _1905;
        float _1915 = fma(_1827, cbSceneParam._m0[_1874].w, fma(_1823, cbSceneParam._m0[_1874].z, fma(_1819, cbSceneParam._m0[_1874].y, _1815 * cbSceneParam._m0[_1874].x))) / _1905;
        float _1963 = (cbSceneParam._m0[33u].x - sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830))) * cbSceneParam._m0[33u].y;
        float _3942 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1970 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 + _1893) / _1905, (_1912 + _1897) / _1905), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 + _1893) / _1905, (_1897 - _1910) / _1905), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 - _1910) / _1905, (_1897 - _1912) / _1905), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 - _1912) / _1905, (_1910 + _1897) / _1905), _1915), 0.0)).x), vec4(0.25)));
        _1977 = 1.0 - (_1970 * cbSceneParam._m0[34u].x);
        _1978 = 1.0 - (_1970 * cbSceneParam._m0[34u].y);
        _1979 = 1.0 - (_1970 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1977 = 1.0;
        _1978 = 1.0;
        _1979 = 1.0;
    }
    float _2043;
    float _2045;
    float _2047;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2031 = fma(_1827, cbSceneParam._m0[63u].w, fma(_1823, cbSceneParam._m0[63u].z, fma(_1819, cbSceneParam._m0[63u].y, _1815 * cbSceneParam._m0[63u].x)));
        float _2032 = fma(_1827, cbSceneParam._m0[60u].w, fma(_1823, cbSceneParam._m0[60u].z, fma(_1819, cbSceneParam._m0[60u].y, _1815 * cbSceneParam._m0[60u].x))) / _2031;
        float _2033 = fma(_1827, cbSceneParam._m0[61u].w, fma(_1823, cbSceneParam._m0[61u].z, fma(_1819, cbSceneParam._m0[61u].y, _1815 * cbSceneParam._m0[61u].x))) / _2031;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2032 >= cbSceneParam._m0[64u].x) && (_2033 >= cbSceneParam._m0[64u].y)) && (_2032 <= cbSceneParam._m0[64u].z)) && (_2033 <= cbSceneParam._m0[64u].w))
        {
            float _2320 = fma(_1827, cbSceneParam._m0[62u].w, fma(_1823, cbSceneParam._m0[62u].z, fma(_1819, cbSceneParam._m0[62u].y, _1815 * cbSceneParam._m0[62u].x))) / _2031;
            float _2324 = isnan(cbSceneParam._m0[41u].w) ? _2320 : (isnan(_2320) ? cbSceneParam._m0[41u].w : max(_2320, cbSceneParam._m0[41u].w));
            float _2367 = (cbSceneParam._m0[33u].x - sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830))) * cbSceneParam._m0[33u].y;
            float _3958 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
            float _2374 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2032, cbSceneParam._m0[33u].w + _2033), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2032, _2033 - cbSceneParam._m0[33u].z), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2032 - cbSceneParam._m0[33u].z, _2033 - cbSceneParam._m0[33u].w), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2032 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2033), _2324), 0.0)).x), vec4(0.25)));
            float _2378 = 1.0 - (_2374 * cbSceneParam._m0[34u].x);
            float _2379 = 1.0 - (_2374 * cbSceneParam._m0[34u].y);
            float _2380 = 1.0 - (_2374 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2380) ? _1979 : (isnan(_1979) ? _2380 : min(_1979, _2380));
            frontier_phi_36_35_ladder_1 = isnan(_2378) ? _1977 : (isnan(_1977) ? _2378 : min(_1977, _2378));
            frontier_phi_36_35_ladder_2 = isnan(_2379) ? _1978 : (isnan(_1978) ? _2379 : min(_1978, _2379));
        }
        else
        {
            frontier_phi_36_35_ladder = _1979;
            frontier_phi_36_35_ladder_1 = _1977;
            frontier_phi_36_35_ladder_2 = _1978;
        }
        _2043 = frontier_phi_36_35_ladder_1;
        _2045 = frontier_phi_36_35_ladder_2;
        _2047 = frontier_phi_36_35_ladder;
    }
    else
    {
        _2043 = _1977;
        _2045 = _1978;
        _2047 = _1979;
    }
    uvec4 _2052 = floatBitsToUint(cbInstanceData._m0[_732 + 5u]);
    uint _2054 = _2052.x * 14u;
    uint _2055 = _2054 + 13u;
    float _2060 = _757 + (-1.0);
    float _2063 = (cbLight._m0[_2055].x * _2060) + 1.0;
    float _2064 = (cbLight._m0[_2055].y * _2060) + 1.0;
    uint _2065 = _2054 + 5u;
    float _2071 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2075 = _2054 + 4u;
    float _2084 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2088 = _2054 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_472, _473, _474));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_472, _473, _474));
    float _3994 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4005 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2065].x * _2071) * _2109) + (((cbLight._m0[_2075].x * _2043) * _2084) * _2107);
    float _2117 = ((_2071 * cbLight._m0[_2065].y) * _2109) + (((cbLight._m0[_2075].y * _2045) * _2084) * _2107);
    float _2118 = ((_2071 * cbLight._m0[_2065].z) * _2109) + (((cbLight._m0[_2075].z * _2047) * _2084) * _2107);
    uint _2120 = _2054 + 8u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _667) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_2054].x + _633;
    float _2136 = cbLight._m0[_2054].y + _634;
    float _2137 = cbLight._m0[_2054].z + _635;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2054].xyz));
    float _4016 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2149 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _2150 = dot(vec3(_472, _473, _474), vec3(_2142, _2143, _2144));
    float _4038 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2142, _2143, _2144));
    float _4049 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2134 * _2134;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2174 = 1.0 - _2134;
    float _2185 = (0.5 / (((_2149 * ((_2148 * _2174) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2174) + _2134) * _2148))) * _2148;
    float _4060 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    uint _2201 = _2054 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _667) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2088].x + _633;
    float _2215 = cbLight._m0[_2088].y + _634;
    float _2216 = cbLight._m0[_2088].z + _635;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2088].xyz));
    float _4071 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2228 = dot(vec3(_472, _473, _474), vec3(_2221, _2222, _2223));
    float _4082 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2221, _2222, _2223));
    float _4093 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2250 = 1.0 - _2213;
    float _2260 = (0.5 / (((_2149 * ((_2227 * _2250) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2250) + _2213) * _2227))) * _2227;
    float _4104 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2272 = (((_2249 * cbLight._m0[_2201].x) * _2262) * _2071) + ((((cbLight._m0[_2120].x * _2043) * _2173) * _2187) * _2084);
    float _2273 = (((_2249 * cbLight._m0[_2201].y) * _2262) * _2071) + ((((cbLight._m0[_2120].y * _2045) * _2173) * _2187) * _2084);
    float _2274 = (((_2249 * cbLight._m0[_2201].z) * _2262) * _2071) + ((((cbLight._m0[_2120].z * _2047) * _2173) * _2187) * _2084);
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_2052.y == 0u)
    {
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.x;
        uint _2404 = uint((float(_2392.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2393))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2393)));
        float _2414 = (log2(_1830 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2415 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        uint _2418 = uint(isnan(14.0) ? _2415 : (isnan(_2415) ? 14.0 : min(_2415, 14.0)));
        uvec4 _2423 = texelFetch(g_lightClusterGridBuffer, int(((_2418 << 2u) + (_2404 << 6u)) >> 2u));
        uint _2424 = _2423.x;
        uint _2425 = _2392.z;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((((1u << ((_2425 >> 4u) & 15u)) + 4294967295u) & _2424) == 0u) || ((_2425 & 240u) == 0u))
        {
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
        }
        else
        {
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2418 << 5u) + (_2404 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2733)
                {
                    frontier_phi_60_pred = _2717;
                    frontier_phi_60_pred_1 = _2718;
                    frontier_phi_60_pred_2 = _2722;
                    frontier_phi_60_pred_3 = _2721;
                    frontier_phi_60_pred_4 = _2720;
                    frontier_phi_60_pred_5 = _2719;
                }
                else
                {
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    uint _2868;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2732;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    for (;;)
                    {
                        uint _2872 = uint(findLSB(_2868)) + (_2723 << 5u);
                        uint _2869 = (_2868 + 4294967295u) & _2868;
                        uint _2874 = _2872 * 48u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2894 = (_2872 * 48u) + 4u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2913 = (_2872 * 48u) + 8u;
                        vec3 _2924 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x));
                        float _2928 = _2888.x - _1828;
                        float _2929 = _2888.y - _1829;
                        float _2930 = _2888.z - _1830;
                        float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                        float _2934 = inversesqrt(_2931);
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2938 = dot(vec3(_713, _716, _719), vec3(_2935, _2936, _2937));
                        float _2943 = 1.0 - (_2931 * _2888.w);
                        float _4125 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2945 = sqrt(_2931) * _2907.w;
                        float _2948 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2938) + _2949;
                        float _2955 = _2945 * _2945;
                        float _2958 = ((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2944) / ((_2955 * 0.699999988079071044921875) + 1.0);
                        float _2962 = (-0.0) - _1828;
                        float _2963 = (-0.0) - _1829;
                        float _2964 = (-0.0) - _1830;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2978 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                        float _2979 = 1.0 - _773;
                        float _2986 = sqrt(1.0 - ((1.0 - (_2979 * _2979)) * (1.0 - (_2978 * _2978))));
                        float _2987 = _2986 * _2986;
                        float _2988 = _2987 * _2987;
                        float _2989 = _2969 + _2935;
                        float _2990 = _2970 + _2936;
                        float _2991 = _2971 + _2937;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2999 = dot(vec3(_713, _716, _719), vec3(_2969, _2970, _2971));
                        float _4141 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _3003 = dot(vec3(_713, _716, _719), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                        float _4152 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                        float _3011 = _2948 * _2987;
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _2938) + _3012;
                        float _4163 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _3017 = 1.0 - _2987;
                        float _3027 = (0.5 / (((_3016 * ((_3002 * _3017) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2987) * _3002))) * _3016;
                        float _4174 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3038 = (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_3010 * _3010) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125))) * _2944;
                        _2797 = (_2958 * _2907.x) + _2865;
                        _2798 = (_2958 * _2907.y) + _2866;
                        _2799 = (_2958 * _2907.z) + _2867;
                        _2794 = (_3038 * _2924.x) + _2862;
                        _2795 = (_3038 * _2924.y) + _2863;
                        _2796 = (_3038 * _2924.z) + _2864;
                        if (_2869 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2869;
                        }
                    }
                    frontier_phi_60_pred = _2794;
                    frontier_phi_60_pred_1 = _2795;
                    frontier_phi_60_pred_2 = _2799;
                    frontier_phi_60_pred_3 = _2798;
                    frontier_phi_60_pred_4 = _2797;
                    frontier_phi_60_pred_5 = _2796;
                }
                _2548 = frontier_phi_60_pred;
                _2550 = frontier_phi_60_pred_1;
                _2558 = frontier_phi_60_pred_2;
                _2556 = frontier_phi_60_pred_3;
                _2554 = frontier_phi_60_pred_4;
                _2552 = frontier_phi_60_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2548;
                    _2718 = _2550;
                    _2719 = _2552;
                    _2720 = _2554;
                    _2721 = _2556;
                    _2722 = _2558;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
        }
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.z;
        uint _2564 = (_2562 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2564) & _2424) == 0u)
        {
            _2685 = _2547;
            _2687 = _2549;
            _2689 = _2551;
            _2691 = _2553;
            _2693 = _2555;
            _2695 = _2557;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
            float _2711 = _2710 * _1828;
            float _2712 = _2710 * _1829;
            float _2713 = _2710 * _1830;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2564 < ((_2562 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2845 = _2547;
                float _2846 = _2549;
                float _2847 = _2551;
                float _2848 = _2553;
                float _2849 = _2555;
                float _2850 = _2557;
                uint _2851 = _2564;
                uint _2860;
                bool _2861;
                for (;;)
                {
                    _2860 = texelFetch(g_lightClassification, int((((_2418 << 5u) + (_2404 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                    _2861 = _2860 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2861)
                    {
                        frontier_phi_66_pred = _2845;
                        frontier_phi_66_pred_1 = _2850;
                        frontier_phi_66_pred_2 = _2849;
                        frontier_phi_66_pred_3 = _2848;
                        frontier_phi_66_pred_4 = _2847;
                        frontier_phi_66_pred_5 = _2846;
                    }
                    else
                    {
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3056 = _2845;
                        float _3057 = _2846;
                        float _3058 = _2847;
                        float _3059 = _2848;
                        float _3060 = _2849;
                        float _3061 = _2850;
                        uint _3062 = _2860;
                        uint _3063;
                        vec4 _3088;
                        float _3089;
                        vec4 _3104;
                        vec3 _3116;
                        vec4 _3131;
                        vec4 _3146;
                        float _3193;
                        bool _3194;
                        for (;;)
                        {
                            uint _3073 = ((_2851 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3062));
                            _3063 = (_3062 + 4294967295u) & _3062;
                            uint _3075 = _3073 * 40u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            _3089 = _3088.w;
                            uint _3091 = (_3073 * 40u) + 4u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3106 = (_3073 * 40u) + 8u;
                            _3116 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x));
                            uint _3118 = (_3073 * 40u) + 16u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3073 * 40u) + 20u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3073 * 40u) + 24u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3168 = (_3073 * 40u) + 28u;
                            vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3193 = fma(_1830, _3181.z, fma(_1829, _3181.y, _3181.x * _1828)) + _3181.w;
                            _3194 = !((fma(_1830, _3162.z, fma(_1829, _3162.y, _3162.x * _1828)) + _3162.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3194)
                            {
                                float _3221 = _3088.x - _1828;
                                float _3222 = _3088.y - _1829;
                                float _3223 = _3088.z - _1830;
                                float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                                float _3227 = inversesqrt(_3224);
                                float _3228 = _3227 * _3221;
                                float _3229 = _3227 * _3222;
                                float _3230 = _3227 * _3223;
                                float _3234 = 1.0 - (_3224 / (_3089 * _3089));
                                float _4185 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3239 = sqrt(_3224) * _3104.w;
                                float _3241 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                                float _3242 = _3241 * _3241;
                                float _3245 = ((1.0 - _3242) * dot(vec3(_3228, _3229, _3230), vec3(_713, _716, _719))) + _3242;
                                float _3248 = _3239 * _3239;
                                float _3252 = (fma(_1830, _3131.z, fma(_1829, _3131.y, _3131.x * _1828)) + _3131.w) / _3193;
                                float _3253 = (fma(_1830, _3146.z, fma(_1829, _3146.y, _3146.x * _1828)) + _3146.w) / _3193;
                                float _3257 = 1.0 - dot(vec2(_3252, _3253), vec2(_3252, _3253));
                                float _4201 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3259 = _3258 * (((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3235) / ((_3248 * 0.699999988079071044921875) + 1.0));
                                float _3271 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                                float _3272 = 1.0 - _773;
                                float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                                float _3280 = _3279 * _3279;
                                float _3281 = _3280 * _3280;
                                float _3282 = _3228 - _2711;
                                float _3283 = _3229 - _2712;
                                float _3284 = _3230 - _2713;
                                float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                                float _3292 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4212 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3296 = dot(vec3(_713, _716, _719), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                                float _4223 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                                float _3304 = _3241 * _3280;
                                float _3305 = _3304 * _3304;
                                float _3311 = ((1.0 - _3305) * dot(vec3(_713, _716, _719), vec3(_3228, _3229, _3230))) + _3305;
                                float _4234 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3313 = 1.0 - _3280;
                                float _3323 = (0.5 / (((_3312 * ((_3295 * _3313) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3280) * _3295))) * _3312;
                                float _4245 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3333 = (_3258 * _3235) * (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_3303 * _3303) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _3259 * _3104.z;
                                frontier_phi_72_pred_1 = _3259 * _3104.y;
                                frontier_phi_72_pred_2 = _3259 * _3104.x;
                                frontier_phi_72_pred_3 = _3333 * _3116.z;
                                frontier_phi_72_pred_4 = _3333 * _3116.y;
                                frontier_phi_72_pred_5 = _3333 * _3116.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3342 = frontier_phi_72_pred;
                            _3341 = frontier_phi_72_pred_1;
                            _3340 = frontier_phi_72_pred_2;
                            _3339 = frontier_phi_72_pred_3;
                            _3338 = frontier_phi_72_pred_4;
                            _3337 = frontier_phi_72_pred_5;
                            _3046 = _3340 + _3059;
                            _3047 = _3341 + _3060;
                            _3048 = _3342 + _3061;
                            _3043 = _3337 + _3056;
                            _3044 = _3338 + _3057;
                            _3045 = _3339 + _3058;
                            if (_3063 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3063;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _3043;
                        frontier_phi_66_pred_1 = _3048;
                        frontier_phi_66_pred_2 = _3047;
                        frontier_phi_66_pred_3 = _3046;
                        frontier_phi_66_pred_4 = _3045;
                        frontier_phi_66_pred_5 = _3044;
                    }
                    _2686 = frontier_phi_66_pred;
                    _2696 = frontier_phi_66_pred_1;
                    _2694 = frontier_phi_66_pred_2;
                    _2692 = frontier_phi_66_pred_3;
                    _2690 = frontier_phi_66_pred_4;
                    _2688 = frontier_phi_66_pred_5;
                    uint _2852 = _2851 + 1u;
                    if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2845 = _2686;
                        _2846 = _2688;
                        _2847 = _2690;
                        _2848 = _2692;
                        _2849 = _2694;
                        _2850 = _2696;
                        _2851 = _2852;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2694;
                frontier_phi_53_54_ladder_1 = _2696;
                frontier_phi_53_54_ladder_2 = _2692;
                frontier_phi_53_54_ladder_3 = _2690;
                frontier_phi_53_54_ladder_4 = _2688;
                frontier_phi_53_54_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_53_54_ladder = _2555;
                frontier_phi_53_54_ladder_1 = _2557;
                frontier_phi_53_54_ladder_2 = _2553;
                frontier_phi_53_54_ladder_3 = _2551;
                frontier_phi_53_54_ladder_4 = _2549;
                frontier_phi_53_54_ladder_5 = _2547;
            }
            _2685 = frontier_phi_53_54_ladder_5;
            _2687 = frontier_phi_53_54_ladder_4;
            _2689 = frontier_phi_53_54_ladder_3;
            _2691 = frontier_phi_53_54_ladder_2;
            _2693 = frontier_phi_53_54_ladder;
            _2695 = frontier_phi_53_54_ladder_1;
        }
        float _2700 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2436 = (_2700 * _2691) + _2116;
        _2438 = (_2700 * _2693) + _2117;
        _2440 = (_2700 * _2695) + _2118;
        _2442 = ((_2685 * 0.039999999105930328369140625) * _2700) + _2272;
        _2444 = ((_2687 * 0.039999999105930328369140625) * _2700) + _2273;
        _2446 = ((_2689 * 0.039999999105930328369140625) * _2700) + _2274;
    }
    else
    {
        _2436 = _2116;
        _2438 = _2117;
        _2440 = _2118;
        _2442 = _2272;
        _2444 = _2273;
        _2446 = _2274;
    }
    uint _2452 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _4261 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4272 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4283 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2477 = (((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2436 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _757))) + ((_2442 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[13u].y * _619) * cbInstanceData._m0[_2452].x);
    float _2479 = (((cbMtdParam._m0[13u].y * _621) * cbInstanceData._m0[_2452].y) + ((_2444 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2438 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _757)));
    float _2481 = (((cbMtdParam._m0[13u].y * _623) * cbInstanceData._m0[_2452].z) + ((_2446 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2440 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _757)));
    uint _2485 = _732 + 6u;
    float _2493 = _692 / cbSceneParam._m0[86u].x;
    float _2494 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2508 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2510 = _2508.x;
    float _2511 = _2508.y;
    float _2512 = _2508.z;
    float _2513 = _2508.w;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2572 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2573 = _2572 / _686;
        float _2584 = _2573 * _285;
        float _2585 = _286 * _2573;
        float _2586 = (-0.0) - _2585;
        float _2587 = _2573 * _287;
        float _2589 = (cbSceneParam._m0[77u].w * _2586) / _2572;
        float _2590 = _2589 + cbSceneParam._m0[79u].w;
        float _2591 = cbSceneParam._m0[79u].w - _2585;
        float _2597 = sqrt(((_2584 * _2584) + (_2585 * _2585)) + (_2587 * _2587));
        float _2600 = (1.0 - (cbSceneParam._m0[77u].w / _2572)) * _2597;
        float _2605 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2607 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2807;
        if (abs((_2586 - _2589) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2807 = ((((_2590 > 0.0) ? exp2(_2605 * _2590) : (2.0 - exp2(_2607 * _2590))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2600;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : max(_2590, _2591));
            float _2748 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : min(_2590, _2591));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2807 = ((abs(_2597 / _2586) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2605 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2605 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2607 * _2757) - exp2(_2607 * _2758)) * _2746))) + (_2600 * cbSceneParam._m0[80u].z);
        }
        vec4 _2809 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, 1.0), 0.0);
        float _2818 = exp2((_2807 * (-1.44269502162933349609375)) * (1.0 - _2809.w));
        float _2819 = log2(_2818);
        float _2835 = log2(_2513);
        _2609 = (exp2(_2835 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].x)) * _2809.x) / cbSceneParam._m0[78u].x)) + _2510;
        _2611 = (exp2(_2835 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].y)) * _2809.y) / cbSceneParam._m0[78u].y)) + _2511;
        _2613 = (exp2(_2835 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].z)) * _2809.z) / cbSceneParam._m0[78u].z)) + _2512;
        _2615 = _2818 * _2513;
    }
    else
    {
        _2609 = _2510;
        _2611 = _2511;
        _2613 = _2512;
        _2615 = _2513;
    }
    float _2627 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2628 = _2627 == 3.0;
    float _2629 = log2(_2615);
    float _2636 = exp2(_2629 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)));
    float _2637 = exp2(_2629 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0)));
    float _2638 = exp2(_2629 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0)));
    float _2647 = (_2627 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2647 * (_2628 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.y = _2647 * (_2628 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.z = _2647 * (_2628 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.w = cbInstanceData._m0[_2485].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2485].w;
}


