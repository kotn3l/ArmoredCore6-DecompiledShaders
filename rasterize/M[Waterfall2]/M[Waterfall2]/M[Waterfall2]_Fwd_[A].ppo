#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall2_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall2_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1278;
float _3395;
float _3396;
float _3397;
float _3398;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _279 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _289 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _279);
    float _290 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _279);
    float _291 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _279);
    float _311 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    vec4 _329 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_5, SS_BumpMap), vec2((((_311 * cbMtdParam._m0[18u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_311 * cbMtdParam._m0[18u].y) + TEXCOORD_1.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _334 = _329.x * 2.0;
    float _336 = _329.y * 2.0;
    float _337 = _334 + (-1.0);
    float _339 = _336 + (-1.0);
    float _340 = dot(vec2(_337, _339), vec2(_337, _339));
    float _3407 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))));
    float _359 = (cbMtdParam._m0[17u].x * _311) + TEXCOORD_1.x;
    float _360 = (cbMtdParam._m0[17u].y * _311) + TEXCOORD_1.y;
    vec4 _372 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_359 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_360 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _377 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].z * cbMtdParam._m0[14u].x);
    float _384 = ((_372.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _386 = (-0.0) - (cbMtdParam._m0[15u].x * ((_372.x * 0.5) + (-0.25)));
    float _387 = fract(_377);
    float _389 = fract(_377 + 0.5);
    float _400 = abs((_387 * 2.0) + (-1.0));
    vec4 _416 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_387 * _386) + _359) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_384 * _387) + _360) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    vec4 _420 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_389 * _386) + _359) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_384 * _389) + _360) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _449 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].z * _311) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[16u].w * _311) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _459 = ((_334 + (-1.35000002384185791015625)) + ((((((_420.x - _418) * _400) + _418) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_449.x * 0.699999988079071044921875);
    float _462 = ((_336 + (-1.35000002384185791015625)) + ((((((_420.y - _419) * _400) + _419) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_449.y * 0.699999988079071044921875);
    float _465 = fma(_346, _233, fma(_462, _225 * TANGENT.x, _459 * (_211 * _204)));
    float _468 = fma(_346, _234, fma(_462, _225 * TANGENT.y, _459 * (_211 * _205)));
    float _471 = fma(_346, _235, fma(_462, _225 * TANGENT.z, _459 * (_211 * _206)));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    vec4 _502 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _507 = _502.x * cbMtdParam._m0[19u].y;
    float _516 = (cbMtdParam._m0[17u].z * _311) + TEXCOORD_1.x;
    float _517 = (cbMtdParam._m0[17u].w * _311) + TEXCOORD_1.y;
    vec4 _547 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _516) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _517) + cbTextureTilingScale._m0[1u].w));
    float _557 = (cbMtdParam._m0[16u].x * _311) + TEXCOORD_1.x;
    float _558 = (cbMtdParam._m0[16u].y * _311) + TEXCOORD_1.y;
    vec4 _563 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_557 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_558 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _571 = ((_563.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _573 = (-0.0) - (cbMtdParam._m0[15u].x * ((_563.x * 0.5) + (-0.25)));
    vec4 _590 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_387 * _573) + _557) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_571 * _387) + _558) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    vec4 _595 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_389 * _573) + _557) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_571 * _389) + _558) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _610 = ((_507 + TEXCOORD_4.x) * cbMtdParam._m0[15u].y) * exp2(log2(texture(sampler2D(M_Waterfall2_snp_0_Texture2D_4, SS_WrapLinear), vec2((_516 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_517 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x) * cbMtdParam._m0[13u].w);
    float _614 = (_502.y * cbMtdParam._m0[19u].z) + TEXCOORD_4.y;
    float _627 = (((cbMtdParam._m0[9u].x + _547.x) * _614) + cbMtdParam._m0[10u].x) + (_610 * (((_595.x - _592) * _400) + _592));
    float _629 = (((cbMtdParam._m0[9u].y + _547.y) * _614) + cbMtdParam._m0[10u].y) + (_610 * (((_595.y - _593) * _400) + _593));
    float _631 = (((cbMtdParam._m0[9u].z + _547.z) * _614) + cbMtdParam._m0[10u].z) + (_610 * (((_595.z - _594) * _400) + _594));
    float _640 = inversesqrt(dot(vec3(_289, _290, _291), vec3(_289, _290, _291)));
    float _647 = dot(vec4(_640 * _289, _640 * _290, _640 * _291, 0.0), vec4(_476, _477, _478, 0.0)) + (-1.0);
    float _3418 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _651 = exp2(log2(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))));
    float _663 = (((_651 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _627) + (cbMtdParam._m0[12u].x * TEXCOORD_4.y);
    float _666 = (((_651 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _629) + (cbMtdParam._m0[12u].y * TEXCOORD_4.y);
    float _669 = (((_651 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _631) + (cbMtdParam._m0[12u].z * TEXCOORD_4.y);
    float _673 = cbMtdParam._m0[15u].z * ((1.0 - TEXCOORD_4.z) - (_502.z * cbMtdParam._m0[19u].w));
    float _683 = cbMtdParam._m0[14u].y - cbMtdParam._m0[15u].w;
    float _686 = (sqrt(((_289 * _289) + (_290 * _290)) + (_291 * _291)) - cbMtdParam._m0[15u].w) / (isnan(0.001000000047497451305389404296875) ? _683 : (isnan(_683) ? 0.001000000047497451305389404296875 : max(_683, 0.001000000047497451305389404296875)));
    float _3434 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _690 = (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_673 + (-0.001000000047497451305389404296875));
    float _703 = gl_FragCoord.x * 0.125;
    float _705 = gl_FragCoord.y * 0.125;
    vec4 _707 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_703, _705));
    float _715 = float(((((TEXCOORD_4.w * 2.0) - (cbMtdParam._m0[13u].z * _547.w)) * _673) * ((_690 + 0.001000000047497451305389404296875) + ((0.999000012874603271484375 - _690) * (1.0 - _507)))) >= ((_707.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _3445 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _725 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3467 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3478 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _744 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _793 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _784);
    float _794 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _784);
    float _795 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _784);
    float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
    float _800 = _793 * _799;
    float _801 = _794 * _799;
    float _802 = _795 * _799;
    vec4 _803 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_703, _705));
    float _805 = _803.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _960 = sqrt(((_793 * _793) + (_794 * _794)) + (_795 * _795));
        float _966 = (cbMatDynParam._m0[5u].x * _960) + cbMatDynParam._m0[5u].y;
        float _3489 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _971 = (cbMatDynParam._m0[5u].z * _960) + cbMatDynParam._m0[5u].w;
        float _3500 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) - _967)) + _967) < ((_805 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _840 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _843 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _856 = uint(roundEven(NORMAL.w)) * 13u;
    uint _857 = _856 + 9u;
    uint _858 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_858].z;
    float _3511 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _881 = _878.x * TEXCOORD_1.z;
    float _882 = dot(vec3(_476, _477, _478), vec3(_800, _801, _802));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _476) - _800;
    float _890 = (_885 * _477) - _801;
    float _891 = (_885 * _478) - _802;
    float _895 = abs(dot(vec3(_800, _801, _802), vec3(_476, _477, _478)));
    float _3544 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_725);
    float _909 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1277;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _1007 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _1011 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1035 = _941 + _476;
        float _1036 = _945 + _477;
        float _1037 = _949 + _478;
        float _1047 = fma(_1037, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035)) - _1003;
        float _1048 = fma(_1037, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035)) - _1007;
        float _1049 = fma(_1037, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035)) - _1011;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1105 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1071.x + (-0.5));
        float _1107 = _1105 * (_1071.y + (-0.5));
        float _1108 = _1105 * (_1071.z + (-0.5));
        float _1115 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1078.x + (-0.5));
        float _1117 = _1115 * (_1078.y + (-0.5));
        float _1118 = _1115 * (_1078.z + (-0.5));
        float _1125 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1085.x + (-0.5));
        float _1127 = _1125 * (_1085.y + (-0.5));
        float _1128 = _1125 * (_1085.z + (-0.5));
        float _1135 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1092.x + (-0.5));
        float _1137 = _1135 * (_1092.y + (-0.5));
        float _1138 = _1135 * (_1092.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1159 = (dot(vec3(_476, _477, _478), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1169 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3592 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1171 + 1.0))) + _1176) * _1139;
        float _1186 = _1107 * 0.5;
        float _1187 = _1117 * 0.5;
        float _1188 = _1127 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_476, _477, _478), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3625 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1213 + 1.0))) + _1218) * _1140;
        float _1228 = _1108 * 0.5;
        float _1229 = _1118 * 0.5;
        float _1230 = _1128 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_476, _477, _478), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3658 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1255 + 1.0))) + _1260) * _1141;
        _1277 = _1108;
        _1279 = _1107;
        _1280 = _1106;
        _1281 = _1118;
        _1282 = _1117;
        _1283 = _1116;
        _1284 = _1128;
        _1285 = _1127;
        _1286 = _1126;
        _1287 = _1141;
        _1288 = _1140;
        _1289 = _1139;
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _1278;
        _1279 = _1278;
        _1280 = _1278;
        _1281 = _1278;
        _1282 = _1278;
        _1283 = _1278;
        _1284 = _1278;
        _1285 = _1278;
        _1286 = _1278;
        _1287 = _1278;
        _1288 = _1278;
        _1289 = _1278;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1321 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1325 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1329 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1352 = _941 + _476;
        float _1353 = _945 + _477;
        float _1354 = _949 + _478;
        float _1364 = fma(_1354, cbModelParam._m0[30u].z, fma(_1353, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1352)) - _1321;
        float _1365 = fma(_1354, cbModelParam._m0[31u].z, fma(_1353, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1352)) - _1325;
        float _1366 = fma(_1354, cbModelParam._m0[32u].z, fma(_1353, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1352)) - _1329;
        float _1370 = inversesqrt(dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366)));
        float _1383 = ((_1370 * _1364) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1321 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1370 * _1365) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1325 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1370 * _1366) / cbModelParam._m0[35u].z) + ((((((_1329 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        float _1420 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1387.x + (-0.5));
        float _1422 = _1420 * (_1387.y + (-0.5));
        float _1423 = _1420 * (_1387.z + (-0.5));
        float _1430 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1394.x + (-0.5));
        float _1432 = _1430 * (_1394.y + (-0.5));
        float _1433 = _1430 * (_1394.z + (-0.5));
        float _1440 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1401.x + (-0.5));
        float _1442 = _1440 * (_1401.y + (-0.5));
        float _1443 = _1440 * (_1401.z + (-0.5));
        float _1450 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1408.x + (-0.5));
        float _1452 = _1450 * (_1408.y + (-0.5));
        float _1453 = _1450 * (_1408.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_476, _477, _478), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3721 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1484 + 1.0))) + _1489) * _1454;
        float _1499 = _1422 * 0.5;
        float _1500 = _1432 * 0.5;
        float _1501 = _1442 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_476, _477, _478), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3754 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1526 + 1.0))) + _1531) * _1455;
        float _1541 = _1423 * 0.5;
        float _1542 = _1433 * 0.5;
        float _1543 = _1443 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_476, _477, _478), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _3787 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1568 + 1.0))) + _1573) * _1456;
        _1590 = _1423;
        _1591 = _1422;
        _1592 = _1421;
        _1593 = _1433;
        _1594 = _1432;
        _1595 = _1431;
        _1596 = _1443;
        _1597 = _1442;
        _1598 = _1441;
        _1599 = _1456;
        _1600 = _1455;
        _1601 = _1454;
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1278;
        _1591 = _1278;
        _1592 = _1278;
        _1593 = _1278;
        _1594 = _1278;
        _1595 = _1278;
        _1596 = _1278;
        _1597 = _1278;
        _1598 = _1278;
        _1599 = _1278;
        _1600 = _1278;
        _1601 = _1278;
        _1602 = 0.0;
        _1603 = 0.0;
        _1604 = 0.0;
    }
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1290)) + _1290;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1291)) + _1291;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1292)) + _1292;
    float _1637 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1614));
    float _1658 = _889 * 0.5;
    float _1659 = _890 * 0.5;
    float _1660 = _891 * 0.5;
    float _1661 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1664 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1667 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1701;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1674 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1277, _1281, _1284, _1287));
        float _1678 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1682 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1689 = dot(vec4(cbModelParam._m0[39u]), vec4(_1658, _1659, _1660, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1712;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1703 = dot(vec4(cbModelParam._m0[40u]), vec4(_1658, _1659, _1660, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1716 = (_1712 * cbModelParam._m0[1u].x) + (_1701 * (1.0 - cbModelParam._m0[1u].x));
    float _1726 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _725);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1726 : min(cbModelParam._m0[25u].z, _1726));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1774 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1778 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1782 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1785 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1788 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1791 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1819;
        if (_1785 > 0.0)
        {
            _1819 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1819 = frontier_phi_19_17_ladder;
        }
        float _2166;
        if (_1788 > 0.0)
        {
            _2166 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2166 = frontier_phi_28_24_ladder;
        }
        float _2489;
        if (_1791 > 0.0)
        {
            _2489 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2489 = frontier_phi_42_35_ladder;
        }
        float _2491 = isnan(_2166) ? _1819 : (isnan(_1819) ? _2166 : min(_1819, _2166));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1785) + _1774;
        float _2497 = (_2492 * _1788) + _1778;
        float _2498 = (_2492 * _1791) + _1782;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2498, cbModelParam._m0[9u].z, fma(_2497, cbModelParam._m0[9u].y, _2496 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2498, cbModelParam._m0[10u].z, fma(_2497, cbModelParam._m0[10u].y, _2496 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2498, cbModelParam._m0[11u].z, fma(_2497, cbModelParam._m0[11u].y, _2496 * cbModelParam._m0[11u].x))), _1727);
            frontier_phi_18_42_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _1807 = frontier_phi_18_42_ladder_2;
        _1809 = frontier_phi_18_42_ladder_1;
        _1811 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1727);
        _1807 = _1795.x * cbModelParam._m0[1u].y;
        _1809 = _1795.y * cbModelParam._m0[1u].y;
        _1811 = _1795.z * cbModelParam._m0[1u].y;
    }
    float _1815 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _725);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1815 : min(cbModelParam._m0[25u].w, _1815));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1870 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1874 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1878 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1881 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1884 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1887 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _2171;
        if (_1881 > 0.0)
        {
            _2171 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2171 = frontier_phi_30_26_ladder;
        }
        float _2515;
        if (_1884 > 0.0)
        {
            _2515 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2515 = frontier_phi_44_37_ladder;
        }
        float _2705;
        if (_1887 > 0.0)
        {
            _2705 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2705 = frontier_phi_62_55_ladder;
        }
        float _2707 = isnan(_2515) ? _2171 : (isnan(_2171) ? _2515 : min(_2171, _2515));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _1881) + _1870;
        float _2713 = (_2708 * _1884) + _1874;
        float _2714 = (_2708 * _1887) + _1878;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _1816);
            frontier_phi_27_62_ladder = _2955.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2955.y * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2955.x * cbModelParam._m0[1u].z;
        }
        _1906 = frontier_phi_27_62_ladder_2;
        _1908 = frontier_phi_27_62_ladder_1;
        _1910 = frontier_phi_27_62_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1816);
        _1906 = _1890.x * cbModelParam._m0[1u].z;
        _1908 = _1890.y * cbModelParam._m0[1u].z;
        _1910 = _1890.z * cbModelParam._m0[1u].z;
    }
    float _1922 = ((((1.0 - _909) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_909 * _897)) * _881;
    float _1923 = _1922 * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1924 = _1922 * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1925 = _1922 * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1928 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, _1923 * cbSceneParam._m0[91u].x));
    uvec4 _1944 = floatBitsToUint(cbInstanceData._m0[_856 + 5u]);
    uint _1946 = _1944.x * 14u;
    uint _1947 = _1946 + 13u;
    float _1952 = _881 + (-1.0);
    float _1955 = (cbLight._m0[_1947].x * _1952) + 1.0;
    float _1956 = (cbLight._m0[_1947].y * _1952) + 1.0;
    uint _1957 = _1946 + 5u;
    float _1963 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1967 = _1946 + 4u;
    float _1973 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1977 = _1946 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_476, _477, _478));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_476, _477, _478));
    float _3923 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _3934 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1957].x * _1963) * _1998) + ((cbLight._m0[_1967].x * _1973) * _1996);
    float _2006 = ((_1963 * cbLight._m0[_1957].y) * _1998) + ((_1973 * cbLight._m0[_1967].y) * _1996);
    float _2007 = ((_1963 * cbLight._m0[_1957].z) * _1998) + ((_1973 * cbLight._m0[_1967].z) * _1996);
    uint _2009 = _1946 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _725) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1946].x + _800;
    float _2025 = cbLight._m0[_1946].y + _801;
    float _2026 = cbLight._m0[_1946].z + _802;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1946].xyz));
    float _3945 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2038 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _2039 = dot(vec3(_476, _477, _478), vec3(_2031, _2032, _2033));
    float _3967 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2031, _2032, _2033));
    float _3978 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2023;
    float _2074 = (0.5 / (((_2038 * ((_2037 * _2063) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2063) + _2023) * _2037))) * _2037;
    float _3989 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2087 = _1946 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _725) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1977].x + _800;
    float _2101 = cbLight._m0[_1977].y + _801;
    float _2102 = cbLight._m0[_1977].z + _802;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1977].xyz));
    float _4000 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _2114 = dot(vec3(_476, _477, _478), vec3(_2107, _2108, _2109));
    float _4011 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2107, _2108, _2109));
    float _4022 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2099;
    float _2146 = (0.5 / (((_2038 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2136) + _2099) * _2113))) * _2113;
    float _4033 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2158 = (((_2135 * cbLight._m0[_2087].x) * _2148) * _1963) + (((_2062 * cbLight._m0[_2009].x) * _2076) * _1973);
    float _2159 = (((_2135 * cbLight._m0[_2087].y) * _2148) * _1963) + (((_2062 * cbLight._m0[_2009].y) * _2076) * _1973);
    float _2160 = (((_2135 * cbLight._m0[_2087].z) * _2148) * _1963) + (((_2062 * cbLight._m0[_2009].z) * _2076) * _1973);
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_1944.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            uint _2558 = 0u;
            uint _2567;
            bool _2568;
            for (;;)
            {
                _2567 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                _2568 = _2567 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2568)
                {
                    frontier_phi_57_pred = _2553;
                    frontier_phi_57_pred_1 = _2557;
                    frontier_phi_57_pred_2 = _2556;
                    frontier_phi_57_pred_3 = _2555;
                    frontier_phi_57_pred_4 = _2554;
                    frontier_phi_57_pred_5 = _2552;
                }
                else
                {
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    uint _2754;
                    _2748 = _2552;
                    _2749 = _2553;
                    _2750 = _2554;
                    _2751 = _2555;
                    _2752 = _2556;
                    _2753 = _2557;
                    _2754 = _2567;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    for (;;)
                    {
                        uint _2758 = uint(findLSB(_2754)) + (_2558 << 5u);
                        uint _2755 = (_2754 + 4294967295u) & _2754;
                        uint _2760 = _2758 * 48u;
                        vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2780 = (_2758 * 48u) + 4u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 3u)).x));
                        uint _2799 = (_2758 * 48u) + 8u;
                        vec3 _2810 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x));
                        float _2814 = _2774.x - _2216;
                        float _2815 = _2774.y - _2217;
                        float _2816 = _2774.z - _2218;
                        float _2817 = dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816));
                        float _2820 = inversesqrt(_2817);
                        float _2821 = _2820 * _2814;
                        float _2822 = _2820 * _2815;
                        float _2823 = _2820 * _2816;
                        float _2824 = dot(vec3(_837, _840, _843), vec3(_2821, _2822, _2823));
                        float _2829 = 1.0 - (_2817 * _2774.w);
                        float _4054 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2831 = sqrt(_2817) * _2793.w;
                        float _2834 = 1.39999997615814208984375 / (_2831 + 1.39999997615814208984375);
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2824) + _2835;
                        float _2841 = _2831 * _2831;
                        float _2844 = ((isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))) * _2830) / ((_2841 * 0.699999988079071044921875) + 1.0);
                        float _2848 = (-0.0) - _2216;
                        float _2849 = (-0.0) - _2217;
                        float _2850 = (-0.0) - _2218;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2865 = exp2(log2(1.0 / ((_2841 * 3.5) + 5.0)) * 0.25);
                        float _2866 = 1.0 - _897;
                        float _2873 = sqrt(1.0 - ((1.0 - (_2866 * _2866)) * (1.0 - (_2865 * _2865))));
                        float _2874 = _2873 * _2873;
                        float _2875 = _2874 * _2874;
                        float _2876 = _2855 + _2821;
                        float _2877 = _2856 + _2822;
                        float _2878 = _2857 + _2823;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2886 = dot(vec3(_837, _840, _843), vec3(_2855, _2856, _2857));
                        float _4070 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2889 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2890 = dot(vec3(_837, _840, _843), vec3(_2882 * _2876, _2882 * _2877, _2882 * _2878));
                        float _4081 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2893 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2897 = ((_2893 * _2893) * (_2875 + (-1.0))) + 1.0;
                        float _2898 = _2834 * _2874;
                        float _2899 = _2898 * _2898;
                        float _2902 = ((1.0 - _2899) * _2824) + _2899;
                        float _4092 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2903 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2904 = 1.0 - _2874;
                        float _2914 = (0.5 / (((_2903 * ((_2889 * _2904) + _2874)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _2904) + _2874) * _2889))) * _2903;
                        float _4103 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2925 = (((_2875 * 3.1415927410125732421875) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) / ((_2897 * _2897) * ((_2841 * 2.1991131305694580078125) + 3.141590118408203125))) * _2830;
                        _2652 = (_2844 * _2793.x) + _2751;
                        _2653 = (_2844 * _2793.y) + _2752;
                        _2654 = (_2844 * _2793.z) + _2753;
                        _2649 = (_2925 * _2810.x) + _2748;
                        _2650 = (_2925 * _2810.y) + _2749;
                        _2651 = (_2925 * _2810.z) + _2750;
                        if (_2755 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2748 = _2649;
                            _2749 = _2650;
                            _2750 = _2651;
                            _2751 = _2652;
                            _2752 = _2653;
                            _2753 = _2654;
                            _2754 = _2755;
                        }
                    }
                    frontier_phi_57_pred = _2650;
                    frontier_phi_57_pred_1 = _2654;
                    frontier_phi_57_pred_2 = _2653;
                    frontier_phi_57_pred_3 = _2652;
                    frontier_phi_57_pred_4 = _2651;
                    frontier_phi_57_pred_5 = _2649;
                }
                _2371 = frontier_phi_57_pred;
                _2379 = frontier_phi_57_pred_1;
                _2377 = frontier_phi_57_pred_2;
                _2375 = frontier_phi_57_pred_3;
                _2373 = frontier_phi_57_pred_4;
                _2369 = frontier_phi_57_pred_5;
                uint _2559 = _2558 + 1u;
                if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2552 = _2369;
                    _2553 = _2371;
                    _2554 = _2373;
                    _2555 = _2375;
                    _2556 = _2377;
                    _2557 = _2379;
                    _2558 = _2559;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((4294967295u << _2385) & _2262) == 0u)
        {
            _2520 = _2368;
            _2522 = _2370;
            _2524 = _2372;
            _2526 = _2374;
            _2528 = _2376;
            _2530 = _2378;
        }
        else
        {
            float _2545 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2546 = _2545 * _2216;
            float _2547 = _2545 * _2217;
            float _2548 = _2545 * _2218;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2731 = _2368;
                float _2732 = _2370;
                float _2733 = _2372;
                float _2734 = _2374;
                float _2735 = _2376;
                float _2736 = _2378;
                uint _2737 = _2385;
                uint _2746;
                bool _2747;
                for (;;)
                {
                    _2746 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                    _2747 = _2746 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2747)
                    {
                        frontier_phi_71_pred = _2736;
                        frontier_phi_71_pred_1 = _2735;
                        frontier_phi_71_pred_2 = _2734;
                        frontier_phi_71_pred_3 = _2733;
                        frontier_phi_71_pred_4 = _2732;
                        frontier_phi_71_pred_5 = _2731;
                    }
                    else
                    {
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _2973 = _2731;
                        float _2974 = _2732;
                        float _2975 = _2733;
                        float _2976 = _2734;
                        float _2977 = _2735;
                        float _2978 = _2736;
                        uint _2979 = _2746;
                        uint _2980;
                        vec4 _3005;
                        float _3006;
                        vec4 _3021;
                        vec3 _3033;
                        vec4 _3048;
                        vec4 _3063;
                        float _3110;
                        bool _3111;
                        for (;;)
                        {
                            uint _2990 = ((_2737 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2979));
                            _2980 = (_2979 + 4294967295u) & _2979;
                            uint _2992 = _2990 * 40u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3006 = _3005.w;
                            uint _3008 = (_2990 * 40u) + 4u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3023 = (_2990 * 40u) + 8u;
                            _3033 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x));
                            uint _3035 = (_2990 * 40u) + 16u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2990 * 40u) + 20u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3066 = (_2990 * 40u) + 24u;
                            vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3085 = (_2990 * 40u) + 28u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3110 = fma(_2218, _3098.z, fma(_2217, _3098.y, _3098.x * _2216)) + _3098.w;
                            _3111 = !((fma(_2218, _3079.z, fma(_2217, _3079.y, _3079.x * _2216)) + _3079.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3111)
                            {
                                float _3138 = _3005.x - _2216;
                                float _3139 = _3005.y - _2217;
                                float _3140 = _3005.z - _2218;
                                float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                                float _3144 = inversesqrt(_3141);
                                float _3145 = _3144 * _3138;
                                float _3146 = _3144 * _3139;
                                float _3147 = _3144 * _3140;
                                float _3151 = 1.0 - (_3141 / (_3006 * _3006));
                                float _4114 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3156 = sqrt(_3141) * _3021.w;
                                float _3158 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                                float _3159 = _3158 * _3158;
                                float _3162 = ((1.0 - _3159) * dot(vec3(_3145, _3146, _3147), vec3(_837, _840, _843))) + _3159;
                                float _3165 = _3156 * _3156;
                                float _3169 = (fma(_2218, _3048.z, fma(_2217, _3048.y, _3048.x * _2216)) + _3048.w) / _3110;
                                float _3170 = (fma(_2218, _3063.z, fma(_2217, _3063.y, _3063.x * _2216)) + _3063.w) / _3110;
                                float _3174 = 1.0 - dot(vec2(_3169, _3170), vec2(_3169, _3170));
                                float _4130 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3176 = _3175 * (((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3152) / ((_3165 * 0.699999988079071044921875) + 1.0));
                                float _3188 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                                float _3189 = 1.0 - _897;
                                float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                                float _3197 = _3196 * _3196;
                                float _3198 = _3197 * _3197;
                                float _3199 = _3145 - _2546;
                                float _3200 = _3146 - _2547;
                                float _3201 = _3147 - _2548;
                                float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                                float _3209 = dot(vec3(_837, _840, _843), vec3((-0.0) - _2546, (-0.0) - _2547, (-0.0) - _2548));
                                float _4141 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3213 = dot(vec3(_837, _840, _843), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                                float _4152 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                                float _3221 = _3158 * _3197;
                                float _3222 = _3221 * _3221;
                                float _3228 = ((1.0 - _3222) * dot(vec3(_837, _840, _843), vec3(_3145, _3146, _3147))) + _3222;
                                float _4163 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3230 = 1.0 - _3197;
                                float _3240 = (0.5 / (((_3229 * ((_3212 * _3230) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3197) * _3212))) * _3229;
                                float _4174 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3250 = (_3175 * _3152) * (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_3220 * _3220) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3176 * _3021.x;
                                frontier_phi_77_pred_1 = _3176 * _3021.z;
                                frontier_phi_77_pred_2 = _3176 * _3021.y;
                                frontier_phi_77_pred_3 = _3250 * _3033.z;
                                frontier_phi_77_pred_4 = _3250 * _3033.y;
                                frontier_phi_77_pred_5 = _3250 * _3033.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_77_pred;
                            _3259 = frontier_phi_77_pred_1;
                            _3258 = frontier_phi_77_pred_2;
                            _3256 = frontier_phi_77_pred_3;
                            _3255 = frontier_phi_77_pred_4;
                            _3254 = frontier_phi_77_pred_5;
                            _2963 = _3257 + _2976;
                            _2964 = _3258 + _2977;
                            _2965 = _3259 + _2978;
                            _2960 = _3254 + _2973;
                            _2961 = _3255 + _2974;
                            _2962 = _3256 + _2975;
                            if (_2980 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2980;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2965;
                        frontier_phi_71_pred_1 = _2964;
                        frontier_phi_71_pred_2 = _2963;
                        frontier_phi_71_pred_3 = _2962;
                        frontier_phi_71_pred_4 = _2961;
                        frontier_phi_71_pred_5 = _2960;
                    }
                    _2531 = frontier_phi_71_pred;
                    _2529 = frontier_phi_71_pred_1;
                    _2527 = frontier_phi_71_pred_2;
                    _2525 = frontier_phi_71_pred_3;
                    _2523 = frontier_phi_71_pred_4;
                    _2521 = frontier_phi_71_pred_5;
                    uint _2738 = _2737 + 1u;
                    if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2731 = _2521;
                        _2732 = _2523;
                        _2733 = _2525;
                        _2734 = _2527;
                        _2735 = _2529;
                        _2736 = _2531;
                        _2737 = _2738;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2531;
                frontier_phi_46_47_ladder_1 = _2523;
                frontier_phi_46_47_ladder_2 = _2529;
                frontier_phi_46_47_ladder_3 = _2527;
                frontier_phi_46_47_ladder_4 = _2525;
                frontier_phi_46_47_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_46_47_ladder = _2378;
                frontier_phi_46_47_ladder_1 = _2370;
                frontier_phi_46_47_ladder_2 = _2376;
                frontier_phi_46_47_ladder_3 = _2374;
                frontier_phi_46_47_ladder_4 = _2372;
                frontier_phi_46_47_ladder_5 = _2368;
            }
            _2520 = frontier_phi_46_47_ladder_5;
            _2522 = frontier_phi_46_47_ladder_1;
            _2524 = frontier_phi_46_47_ladder_4;
            _2526 = frontier_phi_46_47_ladder_3;
            _2528 = frontier_phi_46_47_ladder_2;
            _2530 = frontier_phi_46_47_ladder;
        }
        float _2535 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2274 = (_2535 * _2526) + _2005;
        _2276 = (_2535 * _2528) + _2006;
        _2278 = (_2535 * _2530) + _2007;
        _2280 = ((_2520 * 0.039999999105930328369140625) * _2535) + _2158;
        _2282 = ((_2522 * 0.039999999105930328369140625) * _2535) + _2159;
        _2284 = ((_2524 * 0.039999999105930328369140625) * _2535) + _2160;
    }
    else
    {
        _2274 = _2005;
        _2276 = _2006;
        _2278 = _2007;
        _2280 = _2158;
        _2282 = _2159;
        _2284 = _2160;
    }
    uint _2290 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _4190 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4201 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4212 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2315 = (((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2274 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _881))) + ((_2280 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1716)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[13u].y * _627) * cbInstanceData._m0[_2290].x);
    float _2317 = (((cbMtdParam._m0[13u].y * _629) * cbInstanceData._m0[_2290].y) + ((_2282 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1716)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2276 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _881)));
    float _2319 = (((cbMtdParam._m0[13u].y * _631) * cbInstanceData._m0[_2290].z) + ((_2284 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1716)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2278 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _881)));
    float _2320 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2321 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2322 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    uint _2323 = _856 + 6u;
    float _2331 = _817 / cbSceneParam._m0[86u].x;
    float _2332 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _744 : (isnan(_744) ? cbSceneParam._m0[77u].w : min(_744, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    if (_744 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_744) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _744 : min(cbSceneParam._m0[80u].w, _744));
        float _2394 = _2393 / _744;
        float _2405 = _2394 * _793;
        float _2406 = _794 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _795;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2427 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2429 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2411 > 0.0) ? exp2(_2427 * _2411) : (2.0 - exp2(_2429 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2581 = 1.0 / cbSceneParam._m0[80u].x;
            float _2582 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2583 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            _2662 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2592 - _2593) * 2.0) - ((exp2(_2427 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0)))) - exp2(_2427 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0))))) * _2581)) - ((exp2(_2429 * _2592) - exp2(_2429 * _2593)) * _2581))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2351);
        _2431 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2433 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2435 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2437 = _2673 * _2351;
    }
    else
    {
        _2431 = _2348;
        _2433 = _2349;
        _2435 = _2350;
        _2437 = _2351;
    }
    bool _2700;
    vec4 _2447;
    vec4 _2469;
    float _2471;
    float _2475;
    float _2476;
    float _2477;
    float _2478;
    bool _2488;
    for (;;)
    {
        _2447 = cbMatDynParam._m0[0u];
        float _2449 = roundEven(_2447.y);
        bool _2450 = _2449 == 3.0;
        float _2451 = log2(_2437);
        float _2458 = exp2(_2451 * cbSceneParam._m0[78u].x) * _2320;
        float _2459 = exp2(_2451 * cbSceneParam._m0[78u].y) * _2321;
        float _2460 = exp2(_2451 * cbSceneParam._m0[78u].z) * _2322;
        float _2467 = _805 + (-0.5);
        _2469 = cbMtdParam._m0[1u];
        _2471 = _2469.y * _2467;
        float _2474 = (_2449 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2475 = _2474 * (_2450 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2431)));
        _2476 = _2474 * (_2450 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2433)));
        _2477 = _2474 * (_2450 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2435)));
        _2478 = _2467 * 0.999000012874603271484375;
        _2488 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2488)
        {
            if ((cbInstanceData._m0[_856 + 7u].x + _2478) < 0.5)
            {
                _2700 = true;
                break;
            }
        }
        uint _2616 = _857 + uint(_2447.w);
        if ((cbInstanceData._m0[_2616].w < 1.0) && ((cbInstanceData._m0[_2616].w + _2478) < 0.5))
        {
            _2700 = true;
            break;
        }
        if ((_2471 + _715) < _2469.x)
        {
            _2700 = true;
            break;
        }
        _2700 = false;
        break;
    }
    float _2930;
    if (_2700)
    {
        discard_state = true;
        _2930 = 0.0;
    }
    else
    {
        _2930 = cbInstanceData._m0[_2323].w;
    }
    SV_Target.x = _2475;
    SV_Target.y = _2476;
    SV_Target.z = _2477;
    SV_Target.w = _2930;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2323].w;
    discard_exit();
}


