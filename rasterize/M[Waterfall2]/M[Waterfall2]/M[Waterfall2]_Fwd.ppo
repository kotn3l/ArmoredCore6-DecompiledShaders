#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall2_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall2_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    float _271 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _281 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _271);
    float _282 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _271);
    float _283 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _271);
    float _303 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    vec4 _321 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_5, SS_BumpMap), vec2((((_303 * cbMtdParam._m0[18u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_303 * cbMtdParam._m0[18u].y) + TEXCOORD_1.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _326 = _321.x * 2.0;
    float _328 = _321.y * 2.0;
    float _329 = _326 + (-1.0);
    float _331 = _328 + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3187 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))));
    float _351 = (cbMtdParam._m0[17u].x * _303) + TEXCOORD_1.x;
    float _352 = (cbMtdParam._m0[17u].y * _303) + TEXCOORD_1.y;
    vec4 _364 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_351 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_352 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _369 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].z * cbMtdParam._m0[14u].x);
    float _376 = ((_364.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _378 = (-0.0) - (cbMtdParam._m0[15u].x * ((_364.x * 0.5) + (-0.25)));
    float _379 = fract(_369);
    float _381 = fract(_369 + 0.5);
    float _392 = abs((_379 * 2.0) + (-1.0));
    vec4 _408 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_379 * _378) + _351) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_376 * _379) + _352) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    vec4 _412 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_381 * _378) + _351) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_376 * _381) + _352) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _441 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].z * _303) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[16u].w * _303) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _451 = ((_326 + (-1.35000002384185791015625)) + ((((((_412.x - _410) * _392) + _410) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_441.x * 0.699999988079071044921875);
    float _454 = ((_328 + (-1.35000002384185791015625)) + ((((((_412.y - _411) * _392) + _411) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_441.y * 0.699999988079071044921875);
    float _457 = fma(_338, _225, fma(_454, _217 * TANGENT.x, _451 * (_203 * _196)));
    float _460 = fma(_338, _226, fma(_454, _217 * TANGENT.y, _451 * (_203 * _197)));
    float _463 = fma(_338, _227, fma(_454, _217 * TANGENT.z, _451 * (_203 * _198)));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    float _468 = _467 * _457;
    float _469 = _467 * _460;
    float _470 = _467 * _463;
    vec4 _493 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _505 = (cbMtdParam._m0[17u].z * _303) + TEXCOORD_1.x;
    float _506 = (cbMtdParam._m0[17u].w * _303) + TEXCOORD_1.y;
    vec4 _536 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _505) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _506) + cbTextureTilingScale._m0[1u].w));
    float _545 = (cbMtdParam._m0[16u].x * _303) + TEXCOORD_1.x;
    float _546 = (cbMtdParam._m0[16u].y * _303) + TEXCOORD_1.y;
    vec4 _551 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_545 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_546 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _559 = ((_551.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _561 = (-0.0) - (cbMtdParam._m0[15u].x * ((_551.x * 0.5) + (-0.25)));
    vec4 _578 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_379 * _561) + _545) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_559 * _379) + _546) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    vec4 _583 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_381 * _561) + _545) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_559 * _381) + _546) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _598 = (((_493.x * cbMtdParam._m0[19u].y) + TEXCOORD_4.x) * cbMtdParam._m0[15u].y) * exp2(log2(texture(sampler2D(M_Waterfall2_snp_0_Texture2D_4, SS_WrapLinear), vec2((_505 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_506 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x) * cbMtdParam._m0[13u].w);
    float _602 = (_493.y * cbMtdParam._m0[19u].z) + TEXCOORD_4.y;
    float _615 = (((cbMtdParam._m0[9u].x + _536.x) * _602) + cbMtdParam._m0[10u].x) + (_598 * (((_583.x - _580) * _392) + _580));
    float _617 = (((cbMtdParam._m0[9u].y + _536.y) * _602) + cbMtdParam._m0[10u].y) + (_598 * (((_583.y - _581) * _392) + _581));
    float _619 = (((cbMtdParam._m0[9u].z + _536.z) * _602) + cbMtdParam._m0[10u].z) + (_598 * (((_583.z - _582) * _392) + _582));
    float _628 = inversesqrt(dot(vec3(_281, _282, _283), vec3(_281, _282, _283)));
    float _629 = _628 * _281;
    float _630 = _628 * _282;
    float _631 = _628 * _283;
    float _635 = dot(vec4(_629, _630, _631, 0.0), vec4(_468, _469, _470, 0.0)) + (-1.0);
    float _3198 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _639 = exp2(log2(1.0 - (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))));
    float _651 = (((_639 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _615) + (cbMtdParam._m0[12u].x * TEXCOORD_4.y);
    float _654 = (((_639 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _617) + (cbMtdParam._m0[12u].y * TEXCOORD_4.y);
    float _657 = (((_639 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _619) + (cbMtdParam._m0[12u].z * TEXCOORD_4.y);
    float _3209 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _663 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3231 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _3242 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _688 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _689 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _709 = fma(_470, cbSceneParam._m0[5u].z, fma(_469, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _468));
    float _712 = fma(_470, cbSceneParam._m0[6u].z, fma(_469, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _468));
    float _715 = fma(_470, cbSceneParam._m0[7u].z, fma(_469, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _468));
    uint _728 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = _728 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3253 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _3275 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _688, cbSceneParam._m0[86u].y * _689));
    float _753 = _750.x * TEXCOORD_1.z;
    float _754 = dot(vec3(_468, _469, _470), vec3(_629, _630, _631));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _468) - _629;
    float _762 = (_757 * _469) - _630;
    float _763 = (_757 * _470) - _631;
    float _767 = abs(dot(vec3(_629, _630, _631), vec3(_468, _469, _470)));
    float _3286 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_663);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _853 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _857 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _881 = _814 + _468;
        float _882 = _818 + _469;
        float _883 = _822 + _470;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _849;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _853;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _857;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_468, _469, _470), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3312 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3323 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3334 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_468, _469, _470), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3367 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_468, _469, _470), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3400 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1168 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1172 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1195 = _814 + _468;
        float _1196 = _818 + _469;
        float _1197 = _822 + _470;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_468, _469, _470), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3463 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_468, _469, _470), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3496 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_468, _469, _470), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3529 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1136)) + _1136;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1137)) + _1137;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _761 * 0.5;
    float _1502 = _762 * 0.5;
    float _1503 = _763 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _663);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1631 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1634 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1662 = frontier_phi_16_14_ladder;
        }
        float _2009;
        if (_1631 > 0.0)
        {
            _2009 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2009 = frontier_phi_25_21_ladder;
        }
        float _2324;
        if (_1634 > 0.0)
        {
            _2324 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2324 = frontier_phi_39_32_ladder;
        }
        float _2326 = isnan(_2009) ? _1662 : (isnan(_1662) ? _2009 : min(_1662, _2009));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1628) + _1617;
        float _2332 = (_2327 * _1631) + _1621;
        float _2333 = (_2327 * _1634) + _1625;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2333, cbModelParam._m0[9u].z, fma(_2332, cbModelParam._m0[9u].y, _2331 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2333, cbModelParam._m0[10u].z, fma(_2332, cbModelParam._m0[10u].y, _2331 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2333, cbModelParam._m0[11u].z, fma(_2332, cbModelParam._m0[11u].y, _2331 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_15_39_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_15_39_ladder_2;
        _1652 = frontier_phi_15_39_ladder_1;
        _1654 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1570);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _663);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1713 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1717 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1721 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1724 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1727 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1730 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _2014;
        if (_1724 > 0.0)
        {
            _2014 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2014 = frontier_phi_27_23_ladder;
        }
        float _2350;
        if (_1727 > 0.0)
        {
            _2350 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2350 = frontier_phi_41_34_ladder;
        }
        float _2519;
        if (_1730 > 0.0)
        {
            _2519 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _2519 = frontier_phi_55_50_ladder;
        }
        float _2521 = isnan(_2350) ? _2014 : (isnan(_2014) ? _2350 : min(_2014, _2350));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1724) + _1713;
        float _2527 = (_2522 * _1727) + _1717;
        float _2528 = (_2522 * _1730) + _1721;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_24_55_ladder;
        float frontier_phi_24_55_ladder_1;
        float frontier_phi_24_55_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_24_55_ladder = 0.0;
            frontier_phi_24_55_ladder_1 = 0.0;
            frontier_phi_24_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_24_55_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1749 = frontier_phi_24_55_ladder_2;
        _1751 = frontier_phi_24_55_ladder_1;
        _1753 = frontier_phi_24_55_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1659);
        _1749 = _1733.x * cbModelParam._m0[1u].z;
        _1751 = _1733.y * cbModelParam._m0[1u].z;
        _1753 = _1733.z * cbModelParam._m0[1u].z;
    }
    float _1765 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1766 = _1765 * ((cbModelParam._m0[1u].w * (_1749 - _1650)) + _1650);
    float _1767 = _1765 * ((cbModelParam._m0[1u].w * (_1751 - _1652)) + _1652);
    float _1768 = _1765 * ((cbModelParam._m0[1u].w * (_1753 - _1654)) + _1654);
    float _1771 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1766 * cbSceneParam._m0[91u].x));
    uvec4 _1787 = floatBitsToUint(cbInstanceData._m0[_728 + 5u]);
    uint _1789 = _1787.x * 14u;
    uint _1790 = _1789 + 13u;
    float _1795 = _753 + (-1.0);
    float _1798 = (cbLight._m0[_1790].x * _1795) + 1.0;
    float _1799 = (cbLight._m0[_1790].y * _1795) + 1.0;
    uint _1800 = _1789 + 5u;
    float _1806 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1810 = _1789 + 4u;
    float _1816 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1820 = _1789 | 1u;
    float _1831 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_468, _469, _470));
    float _1834 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_468, _469, _470));
    float _3665 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _3676 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1839 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.3183098733425140380859375;
    float _1841 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.3183098733425140380859375;
    float _1848 = ((cbLight._m0[_1800].x * _1806) * _1841) + ((cbLight._m0[_1810].x * _1816) * _1839);
    float _1849 = ((_1806 * cbLight._m0[_1800].y) * _1841) + ((_1816 * cbLight._m0[_1810].y) * _1839);
    float _1850 = ((_1806 * cbLight._m0[_1800].z) * _1841) + ((_1816 * cbLight._m0[_1810].z) * _1839);
    uint _1852 = _1789 + 8u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _663) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1789].x + _629;
    float _1868 = cbLight._m0[_1789].y + _630;
    float _1869 = cbLight._m0[_1789].z + _631;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_1789].xyz));
    float _3687 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1881 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _1882 = dot(vec3(_468, _469, _470), vec3(_1874, _1875, _1876));
    float _3709 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _1886 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1874, _1875, _1876));
    float _3720 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1890 = _1866 * _1866;
    float _1894 = ((_1885 * _1885) * (_1890 + (-1.0))) + 1.0;
    float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1906 = 1.0 - _1866;
    float _1917 = (0.5 / (((_1881 * ((_1880 * _1906) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _1906) + _1866) * _1880))) * _1880;
    float _3731 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1890 / ((_1894 * _1894) * 3.141590118408203125));
    uint _1930 = _1789 + 9u;
    float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _663) * 0.949999988079071044921875);
    float _1942 = _1941 * _1941;
    float _1943 = cbLight._m0[_1820].x + _629;
    float _1944 = cbLight._m0[_1820].y + _630;
    float _1945 = cbLight._m0[_1820].z + _631;
    float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
    float _1950 = _1949 * _1943;
    float _1951 = _1949 * _1944;
    float _1952 = _1949 * _1945;
    float _1953 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_1820].xyz));
    float _3742 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1957 = dot(vec3(_468, _469, _470), vec3(_1950, _1951, _1952));
    float _3753 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1950, _1951, _1952));
    float _3764 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1942 * _1942;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1978 = (exp2(log2(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1979 = 1.0 - _1942;
    float _1989 = (0.5 / (((_1881 * ((_1956 * _1979) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _1979) + _1942) * _1956))) * _1956;
    float _3775 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    float _2001 = (((_1978 * cbLight._m0[_1930].x) * _1991) * _1806) + (((_1905 * cbLight._m0[_1852].x) * _1919) * _1816);
    float _2002 = (((_1978 * cbLight._m0[_1930].y) * _1991) * _1806) + (((_1905 * cbLight._m0[_1852].y) * _1919) * _1816);
    float _2003 = (((_1978 * cbLight._m0[_1930].z) * _1991) * _1806) + (((_1905 * cbLight._m0[_1852].z) * _1919) * _1816);
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    if (_1787.y == 0u)
    {
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2059 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2058;
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2058;
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2058;
        uvec4 _2073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2074 = _2073.x;
        uint _2085 = uint((float(_2073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _689) / _2074))) + floor(float(uint(cbSceneParam._m0[85u].x * _688) / _2074)));
        float _2095 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2096 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        uint _2099 = uint(isnan(14.0) ? _2096 : (isnan(_2096) ? 14.0 : min(_2096, 14.0)));
        uvec4 _2104 = texelFetch(g_lightClusterGridBuffer, int(((_2099 << 2u) + (_2085 << 6u)) >> 2u));
        uint _2105 = _2104.x;
        uint _2106 = _2073.z;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        if (((((1u << ((_2106 >> 4u) & 15u)) + 4294967295u) & _2105) == 0u) || ((_2106 & 240u) == 0u))
        {
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
        }
        else
        {
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            uint _2393 = 0u;
            uint _2402;
            bool _2403;
            for (;;)
            {
                _2402 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2393 << 2u)) >> 2u)).x;
                _2403 = _2402 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2403)
                {
                    frontier_phi_52_pred = _2387;
                    frontier_phi_52_pred_1 = _2392;
                    frontier_phi_52_pred_2 = _2391;
                    frontier_phi_52_pred_3 = _2390;
                    frontier_phi_52_pred_4 = _2389;
                    frontier_phi_52_pred_5 = _2388;
                }
                else
                {
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    uint _2568;
                    _2562 = _2387;
                    _2563 = _2388;
                    _2564 = _2389;
                    _2565 = _2390;
                    _2566 = _2391;
                    _2567 = _2392;
                    _2568 = _2402;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    for (;;)
                    {
                        uint _2572 = uint(findLSB(_2568)) + (_2393 << 5u);
                        uint _2569 = (_2568 + 4294967295u) & _2568;
                        uint _2574 = _2572 * 48u;
                        vec4 _2588 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2574)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 3u)).x));
                        uint _2594 = (_2572 * 48u) + 4u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2594)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 3u)).x));
                        uint _2613 = (_2572 * 48u) + 8u;
                        vec3 _2624 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x));
                        float _2628 = _2588.x - _2059;
                        float _2629 = _2588.y - _2060;
                        float _2630 = _2588.z - _2061;
                        float _2631 = dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630));
                        float _2634 = inversesqrt(_2631);
                        float _2635 = _2634 * _2628;
                        float _2636 = _2634 * _2629;
                        float _2637 = _2634 * _2630;
                        float _2638 = dot(vec3(_709, _712, _715), vec3(_2635, _2636, _2637));
                        float _2643 = 1.0 - (_2631 * _2588.w);
                        float _3796 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2644 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
                        float _2645 = sqrt(_2631) * _2607.w;
                        float _2648 = 1.39999997615814208984375 / (_2645 + 1.39999997615814208984375);
                        float _2649 = _2648 * _2648;
                        float _2652 = ((1.0 - _2649) * _2638) + _2649;
                        float _2655 = _2645 * _2645;
                        float _2658 = ((isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0))) * _2644) / ((_2655 * 0.699999988079071044921875) + 1.0);
                        float _2662 = (-0.0) - _2059;
                        float _2663 = (-0.0) - _2060;
                        float _2664 = (-0.0) - _2061;
                        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2679 = exp2(log2(1.0 / ((_2655 * 3.5) + 5.0)) * 0.25);
                        float _2680 = 1.0 - _769;
                        float _2687 = sqrt(1.0 - ((1.0 - (_2680 * _2680)) * (1.0 - (_2679 * _2679))));
                        float _2688 = _2687 * _2687;
                        float _2689 = _2688 * _2688;
                        float _2690 = _2669 + _2635;
                        float _2691 = _2670 + _2636;
                        float _2692 = _2671 + _2637;
                        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
                        float _2700 = dot(vec3(_709, _712, _715), vec3(_2669, _2670, _2671));
                        float _3812 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                        float _2704 = dot(vec3(_709, _712, _715), vec3(_2696 * _2690, _2696 * _2691, _2696 * _2692));
                        float _3823 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2707 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                        float _2711 = ((_2707 * _2707) * (_2689 + (-1.0))) + 1.0;
                        float _2712 = _2648 * _2688;
                        float _2713 = _2712 * _2712;
                        float _2716 = ((1.0 - _2713) * _2638) + _2713;
                        float _3834 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                        float _2718 = 1.0 - _2688;
                        float _2728 = (0.5 / (((_2717 * ((_2703 * _2718) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2718) + _2688) * _2703))) * _2717;
                        float _3845 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2739 = (((_2689 * 3.1415927410125732421875) * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) / ((_2711 * _2711) * ((_2655 * 2.1991131305694580078125) + 3.141590118408203125))) * _2644;
                        _2471 = (_2658 * _2607.x) + _2565;
                        _2472 = (_2658 * _2607.y) + _2566;
                        _2473 = (_2658 * _2607.z) + _2567;
                        _2468 = (_2739 * _2624.x) + _2562;
                        _2469 = (_2739 * _2624.y) + _2563;
                        _2470 = (_2739 * _2624.z) + _2564;
                        if (_2569 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2562 = _2468;
                            _2563 = _2469;
                            _2564 = _2470;
                            _2565 = _2471;
                            _2566 = _2472;
                            _2567 = _2473;
                            _2568 = _2569;
                        }
                    }
                    frontier_phi_52_pred = _2468;
                    frontier_phi_52_pred_1 = _2473;
                    frontier_phi_52_pred_2 = _2472;
                    frontier_phi_52_pred_3 = _2471;
                    frontier_phi_52_pred_4 = _2470;
                    frontier_phi_52_pred_5 = _2469;
                }
                _2212 = frontier_phi_52_pred;
                _2222 = frontier_phi_52_pred_1;
                _2220 = frontier_phi_52_pred_2;
                _2218 = frontier_phi_52_pred_3;
                _2216 = frontier_phi_52_pred_4;
                _2214 = frontier_phi_52_pred_5;
                uint _2394 = _2393 + 1u;
                if (_2394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2387 = _2212;
                    _2388 = _2214;
                    _2389 = _2216;
                    _2390 = _2218;
                    _2391 = _2220;
                    _2392 = _2222;
                    _2393 = _2394;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
        }
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.z;
        uint _2228 = (_2226 >> 8u) & 15u;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        if (((4294967295u << _2228) & _2105) == 0u)
        {
            _2355 = _2211;
            _2357 = _2213;
            _2359 = _2215;
            _2361 = _2217;
            _2363 = _2219;
            _2365 = _2221;
        }
        else
        {
            float _2380 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _2381 = _2380 * _2059;
            float _2382 = _2380 * _2060;
            float _2383 = _2380 * _2061;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2228 < ((_2226 >> 12u) & 15u))
            {
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2366;
                float _2545 = _2211;
                float _2546 = _2213;
                float _2547 = _2215;
                float _2548 = _2217;
                float _2549 = _2219;
                float _2550 = _2221;
                uint _2551 = _2228;
                uint _2560;
                bool _2561;
                for (;;)
                {
                    _2560 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                    _2561 = _2560 == 0u;
                    float frontier_phi_61_pred;
                    float frontier_phi_61_pred_1;
                    float frontier_phi_61_pred_2;
                    float frontier_phi_61_pred_3;
                    float frontier_phi_61_pred_4;
                    float frontier_phi_61_pred_5;
                    if (_2561)
                    {
                        frontier_phi_61_pred = _2550;
                        frontier_phi_61_pred_1 = _2549;
                        frontier_phi_61_pred_2 = _2548;
                        frontier_phi_61_pred_3 = _2547;
                        frontier_phi_61_pred_4 = _2546;
                        frontier_phi_61_pred_5 = _2545;
                    }
                    else
                    {
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _2778 = _2545;
                        float _2779 = _2546;
                        float _2780 = _2547;
                        float _2781 = _2548;
                        float _2782 = _2549;
                        float _2783 = _2550;
                        uint _2784 = _2560;
                        uint _2785;
                        vec4 _2810;
                        float _2811;
                        vec4 _2826;
                        vec3 _2838;
                        vec4 _2853;
                        vec4 _2868;
                        float _2915;
                        bool _2916;
                        for (;;)
                        {
                            uint _2795 = ((_2551 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2784));
                            _2785 = (_2784 + 4294967295u) & _2784;
                            uint _2797 = _2795 * 40u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            _2811 = _2810.w;
                            uint _2813 = (_2795 * 40u) + 4u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            uint _2828 = (_2795 * 40u) + 8u;
                            _2838 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x));
                            uint _2840 = (_2795 * 40u) + 16u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2855 = (_2795 * 40u) + 20u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2795 * 40u) + 24u;
                            vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2890 = (_2795 * 40u) + 28u;
                            vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2915 = fma(_2061, _2903.z, fma(_2060, _2903.y, _2903.x * _2059)) + _2903.w;
                            _2916 = !((fma(_2061, _2884.z, fma(_2060, _2884.y, _2884.x * _2059)) + _2884.w) <= 0.0);
                            float frontier_phi_67_pred;
                            float frontier_phi_67_pred_1;
                            float frontier_phi_67_pred_2;
                            float frontier_phi_67_pred_3;
                            float frontier_phi_67_pred_4;
                            float frontier_phi_67_pred_5;
                            if (_2916)
                            {
                                float _2943 = _2810.x - _2059;
                                float _2944 = _2810.y - _2060;
                                float _2945 = _2810.z - _2061;
                                float _2946 = dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945));
                                float _2949 = inversesqrt(_2946);
                                float _2950 = _2949 * _2943;
                                float _2951 = _2949 * _2944;
                                float _2952 = _2949 * _2945;
                                float _2956 = 1.0 - (_2946 / (_2811 * _2811));
                                float _3856 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                                float _2961 = sqrt(_2946) * _2826.w;
                                float _2963 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                                float _2964 = _2963 * _2963;
                                float _2967 = ((1.0 - _2964) * dot(vec3(_2950, _2951, _2952), vec3(_709, _712, _715))) + _2964;
                                float _2970 = _2961 * _2961;
                                float _2974 = (fma(_2061, _2853.z, fma(_2060, _2853.y, _2853.x * _2059)) + _2853.w) / _2915;
                                float _2975 = (fma(_2061, _2868.z, fma(_2060, _2868.y, _2868.x * _2059)) + _2868.w) / _2915;
                                float _2979 = 1.0 - dot(vec2(_2974, _2975), vec2(_2974, _2975));
                                float _3872 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                                float _2981 = _2980 * (((isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))) * _2957) / ((_2970 * 0.699999988079071044921875) + 1.0));
                                float _2993 = exp2(log2(1.0 / ((_2970 * 3.5) + 5.0)) * 0.25);
                                float _2994 = 1.0 - _769;
                                float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                                float _3002 = _3001 * _3001;
                                float _3003 = _3002 * _3002;
                                float _3004 = _2950 - _2381;
                                float _3005 = _2951 - _2382;
                                float _3006 = _2952 - _2383;
                                float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                                float _3014 = dot(vec3(_709, _712, _715), vec3((-0.0) - _2381, (-0.0) - _2382, (-0.0) - _2383));
                                float _3883 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3017 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                                float _3018 = dot(vec3(_709, _712, _715), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                                float _3894 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
                                float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                                float _3026 = _2963 * _3002;
                                float _3027 = _3026 * _3026;
                                float _3033 = ((1.0 - _3027) * dot(vec3(_709, _712, _715), vec3(_2950, _2951, _2952))) + _3027;
                                float _3905 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _3035 = 1.0 - _3002;
                                float _3045 = (0.5 / (((_3034 * ((_3017 * _3035) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3002) * _3017))) * _3034;
                                float _3916 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3055 = (_2980 * _2957) * (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) / ((_3025 * _3025) * ((_2970 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_67_pred = _2981 * _2826.z;
                                frontier_phi_67_pred_1 = _2981 * _2826.y;
                                frontier_phi_67_pred_2 = _2981 * _2826.x;
                                frontier_phi_67_pred_3 = _3055 * _2838.z;
                                frontier_phi_67_pred_4 = _3055 * _2838.y;
                                frontier_phi_67_pred_5 = _3055 * _2838.x;
                            }
                            else
                            {
                                frontier_phi_67_pred = 0.0;
                                frontier_phi_67_pred_1 = 0.0;
                                frontier_phi_67_pred_2 = 0.0;
                                frontier_phi_67_pred_3 = 0.0;
                                frontier_phi_67_pred_4 = 0.0;
                                frontier_phi_67_pred_5 = 0.0;
                            }
                            _3064 = frontier_phi_67_pred;
                            _3063 = frontier_phi_67_pred_1;
                            _3062 = frontier_phi_67_pred_2;
                            _3061 = frontier_phi_67_pred_3;
                            _3060 = frontier_phi_67_pred_4;
                            _3059 = frontier_phi_67_pred_5;
                            _2768 = _3062 + _2781;
                            _2769 = _3063 + _2782;
                            _2770 = _3064 + _2783;
                            _2765 = _3059 + _2778;
                            _2766 = _3060 + _2779;
                            _2767 = _3061 + _2780;
                            if (_2785 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2785;
                                continue;
                            }
                        }
                        frontier_phi_61_pred = _2770;
                        frontier_phi_61_pred_1 = _2769;
                        frontier_phi_61_pred_2 = _2768;
                        frontier_phi_61_pred_3 = _2767;
                        frontier_phi_61_pred_4 = _2766;
                        frontier_phi_61_pred_5 = _2765;
                    }
                    _2366 = frontier_phi_61_pred;
                    _2364 = frontier_phi_61_pred_1;
                    _2362 = frontier_phi_61_pred_2;
                    _2360 = frontier_phi_61_pred_3;
                    _2358 = frontier_phi_61_pred_4;
                    _2356 = frontier_phi_61_pred_5;
                    uint _2552 = _2551 + 1u;
                    if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2545 = _2356;
                        _2546 = _2358;
                        _2547 = _2360;
                        _2548 = _2362;
                        _2549 = _2364;
                        _2550 = _2366;
                        _2551 = _2552;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2366;
                frontier_phi_43_44_ladder_1 = _2362;
                frontier_phi_43_44_ladder_2 = _2364;
                frontier_phi_43_44_ladder_3 = _2360;
                frontier_phi_43_44_ladder_4 = _2358;
                frontier_phi_43_44_ladder_5 = _2356;
            }
            else
            {
                frontier_phi_43_44_ladder = _2221;
                frontier_phi_43_44_ladder_1 = _2217;
                frontier_phi_43_44_ladder_2 = _2219;
                frontier_phi_43_44_ladder_3 = _2215;
                frontier_phi_43_44_ladder_4 = _2213;
                frontier_phi_43_44_ladder_5 = _2211;
            }
            _2355 = frontier_phi_43_44_ladder_5;
            _2357 = frontier_phi_43_44_ladder_4;
            _2359 = frontier_phi_43_44_ladder_3;
            _2361 = frontier_phi_43_44_ladder_1;
            _2363 = frontier_phi_43_44_ladder_2;
            _2365 = frontier_phi_43_44_ladder;
        }
        float _2370 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2117 = (_2370 * _2361) + _1848;
        _2119 = (_2370 * _2363) + _1849;
        _2121 = (_2370 * _2365) + _1850;
        _2123 = ((_2355 * 0.039999999105930328369140625) * _2370) + _2001;
        _2125 = ((_2357 * 0.039999999105930328369140625) * _2370) + _2002;
        _2127 = ((_2359 * 0.039999999105930328369140625) * _2370) + _2003;
    }
    else
    {
        _2117 = _1848;
        _2119 = _1849;
        _2121 = _1850;
        _2123 = _2001;
        _2125 = _2002;
        _2127 = _2003;
    }
    uint _2133 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _3932 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3943 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3954 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2158 = (((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2117 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _753))) + ((_2123 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[13u].y * _615) * cbInstanceData._m0[_2133].x);
    float _2160 = (((cbMtdParam._m0[13u].y * _617) * cbInstanceData._m0[_2133].y) + ((_2125 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_2119 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _753)));
    float _2162 = (((cbMtdParam._m0[13u].y * _619) * cbInstanceData._m0[_2133].z) + ((_2127 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_2121 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _753)));
    uint _2166 = _728 + 6u;
    float _2174 = _688 / cbSceneParam._m0[86u].x;
    float _2175 = _689 / cbSceneParam._m0[86u].y;
    vec4 _2189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2174, _2175, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2191 = _2189.x;
    float _2192 = _2189.y;
    float _2193 = _2189.z;
    float _2194 = _2189.w;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2236 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2237 = _2236 / _682;
        float _2248 = _2237 * _281;
        float _2249 = _282 * _2237;
        float _2250 = (-0.0) - _2249;
        float _2251 = _2237 * _283;
        float _2253 = (cbSceneParam._m0[77u].w * _2250) / _2236;
        float _2254 = _2253 + cbSceneParam._m0[79u].w;
        float _2255 = cbSceneParam._m0[79u].w - _2249;
        float _2261 = sqrt(((_2248 * _2248) + (_2249 * _2249)) + (_2251 * _2251));
        float _2264 = (1.0 - (cbSceneParam._m0[77u].w / _2236)) * _2261;
        float _2270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2481;
        if (abs((_2250 - _2253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2481 = ((((_2254 > 0.0) ? exp2(_2270 * _2254) : (2.0 - exp2(_2272 * _2254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2264;
        }
        else
        {
            float _2416 = 1.0 / cbSceneParam._m0[80u].x;
            float _2417 = isnan(_2255) ? _2254 : (isnan(_2254) ? _2255 : max(_2254, _2255));
            float _2418 = isnan(_2255) ? _2254 : (isnan(_2254) ? _2255 : min(_2254, _2255));
            float _2427 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : min(_2417, 0.0));
            float _2428 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : min(_2418, 0.0));
            _2481 = ((abs(_2261 / _2250) * cbSceneParam._m0[80u].y) * ((((_2427 - _2428) * 2.0) - ((exp2(_2270 * (isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0)))) - exp2(_2270 * (isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0))))) * _2416)) - ((exp2(_2272 * _2427) - exp2(_2272 * _2428)) * _2416))) + (_2264 * cbSceneParam._m0[80u].z);
        }
        vec4 _2483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2174, _2175, 1.0), 0.0);
        float _2492 = exp2((_2481 * (-1.44269502162933349609375)) * (1.0 - _2483.w));
        float _2493 = log2(_2492);
        float _2509 = log2(_2194);
        _2274 = (exp2(_2509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].x)) * _2483.x) / cbSceneParam._m0[78u].x)) + _2191;
        _2276 = (exp2(_2509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].y)) * _2483.y) / cbSceneParam._m0[78u].y)) + _2192;
        _2278 = (exp2(_2509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].z)) * _2483.z) / cbSceneParam._m0[78u].z)) + _2193;
        _2280 = _2492 * _2194;
    }
    else
    {
        _2274 = _2191;
        _2276 = _2192;
        _2278 = _2193;
        _2280 = _2194;
    }
    float _2292 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2293 = _2292 == 3.0;
    float _2294 = log2(_2280);
    float _2301 = exp2(_2294 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
    float _2302 = exp2(_2294 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)));
    float _2303 = exp2(_2294 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)));
    float _2312 = (_2292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2312 * (_2293 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.y = _2312 * (_2293 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.z = _2312 * (_2293 ? _2303 : (_2303 + (cbSceneParam._m0[72u].w * _2278)));
    SV_Target.w = cbInstanceData._m0[_2166].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2166].w;
}


