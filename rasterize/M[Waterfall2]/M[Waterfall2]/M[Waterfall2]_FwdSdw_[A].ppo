#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall2_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall2_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3682;
float _3683;
float _3684;
float _3685;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    float _315 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    vec4 _333 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_5, SS_BumpMap), vec2((((_315 * cbMtdParam._m0[18u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_315 * cbMtdParam._m0[18u].y) + TEXCOORD_1.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _338 = _333.x * 2.0;
    float _340 = _333.y * 2.0;
    float _341 = _338 + (-1.0);
    float _343 = _340 + (-1.0);
    float _344 = dot(vec2(_341, _343), vec2(_341, _343));
    float _3694 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))));
    float _363 = (cbMtdParam._m0[17u].x * _315) + TEXCOORD_1.x;
    float _364 = (cbMtdParam._m0[17u].y * _315) + TEXCOORD_1.y;
    vec4 _376 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_363 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_364 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _381 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].z * cbMtdParam._m0[14u].x);
    float _388 = ((_376.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _390 = (-0.0) - (cbMtdParam._m0[15u].x * ((_376.x * 0.5) + (-0.25)));
    float _391 = fract(_381);
    float _393 = fract(_381 + 0.5);
    float _404 = abs((_391 * 2.0) + (-1.0));
    vec4 _420 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_391 * _390) + _363) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_388 * _391) + _364) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    vec4 _424 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_393 * _390) + _363) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_388 * _393) + _364) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _453 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].z * _315) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[16u].w * _315) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _463 = ((_338 + (-1.35000002384185791015625)) + ((((((_424.x - _422) * _404) + _422) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_453.x * 0.699999988079071044921875);
    float _466 = ((_340 + (-1.35000002384185791015625)) + ((((((_424.y - _423) * _404) + _423) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_453.y * 0.699999988079071044921875);
    float _469 = fma(_350, _237, fma(_466, _229 * TANGENT.x, _463 * (_215 * _208)));
    float _472 = fma(_350, _238, fma(_466, _229 * TANGENT.y, _463 * (_215 * _209)));
    float _475 = fma(_350, _239, fma(_466, _229 * TANGENT.z, _463 * (_215 * _210)));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _480 = _479 * _469;
    float _481 = _479 * _472;
    float _482 = _479 * _475;
    vec4 _506 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _511 = _506.x * cbMtdParam._m0[19u].y;
    float _520 = (cbMtdParam._m0[17u].z * _315) + TEXCOORD_1.x;
    float _521 = (cbMtdParam._m0[17u].w * _315) + TEXCOORD_1.y;
    vec4 _551 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _520) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _521) + cbTextureTilingScale._m0[1u].w));
    float _561 = (cbMtdParam._m0[16u].x * _315) + TEXCOORD_1.x;
    float _562 = (cbMtdParam._m0[16u].y * _315) + TEXCOORD_1.y;
    vec4 _567 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_561 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_562 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _575 = ((_567.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _577 = (-0.0) - (cbMtdParam._m0[15u].x * ((_567.x * 0.5) + (-0.25)));
    vec4 _594 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_391 * _577) + _561) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_575 * _391) + _562) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _597 = _594.y;
    float _598 = _594.z;
    vec4 _599 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_393 * _577) + _561) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_575 * _393) + _562) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _614 = ((_511 + TEXCOORD_4.x) * cbMtdParam._m0[15u].y) * exp2(log2(texture(sampler2D(M_Waterfall2_snp_0_Texture2D_4, SS_WrapLinear), vec2((_520 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_521 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x) * cbMtdParam._m0[13u].w);
    float _618 = (_506.y * cbMtdParam._m0[19u].z) + TEXCOORD_4.y;
    float _631 = (((cbMtdParam._m0[9u].x + _551.x) * _618) + cbMtdParam._m0[10u].x) + (_614 * (((_599.x - _596) * _404) + _596));
    float _633 = (((cbMtdParam._m0[9u].y + _551.y) * _618) + cbMtdParam._m0[10u].y) + (_614 * (((_599.y - _597) * _404) + _597));
    float _635 = (((cbMtdParam._m0[9u].z + _551.z) * _618) + cbMtdParam._m0[10u].z) + (_614 * (((_599.z - _598) * _404) + _598));
    float _644 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _651 = dot(vec4(_644 * _293, _644 * _294, _644 * _295, 0.0), vec4(_480, _481, _482, 0.0)) + (-1.0);
    float _3705 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _655 = exp2(log2(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))));
    float _667 = (((_655 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _631) + (cbMtdParam._m0[12u].x * TEXCOORD_4.y);
    float _670 = (((_655 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _633) + (cbMtdParam._m0[12u].y * TEXCOORD_4.y);
    float _673 = (((_655 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _635) + (cbMtdParam._m0[12u].z * TEXCOORD_4.y);
    float _677 = cbMtdParam._m0[15u].z * ((1.0 - TEXCOORD_4.z) - (_506.z * cbMtdParam._m0[19u].w));
    float _687 = cbMtdParam._m0[14u].y - cbMtdParam._m0[15u].w;
    float _690 = (sqrt(((_293 * _293) + (_294 * _294)) + (_295 * _295)) - cbMtdParam._m0[15u].w) / (isnan(0.001000000047497451305389404296875) ? _687 : (isnan(_687) ? 0.001000000047497451305389404296875 : max(_687, 0.001000000047497451305389404296875)));
    float _3721 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _694 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_677 + (-0.001000000047497451305389404296875));
    float _707 = gl_FragCoord.x * 0.125;
    float _709 = gl_FragCoord.y * 0.125;
    vec4 _711 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_707, _709));
    float _719 = float(((((TEXCOORD_4.w * 2.0) - (cbMtdParam._m0[13u].z * _551.w)) * _677) * ((_694 + 0.001000000047497451305389404296875) + ((0.999000012874603271484375 - _694) * (1.0 - _511)))) >= ((_711.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _3732 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _729 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3754 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3765 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _748 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _797 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _788);
    float _798 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _788);
    float _799 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _788);
    float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
    float _804 = _797 * _803;
    float _805 = _798 * _803;
    float _806 = _799 * _803;
    vec4 _807 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_707, _709));
    float _809 = _807.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_797 * _797) + (_798 * _798)) + (_799 * _799));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _3776 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _3787 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) - _971)) + _971) < ((_809 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_482, cbSceneParam._m0[5u].z, fma(_481, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _480));
    float _844 = fma(_482, cbSceneParam._m0[6u].z, fma(_481, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _480));
    float _847 = fma(_482, cbSceneParam._m0[7u].z, fma(_481, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _480));
    uint _860 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = _860 + 9u;
    uint _862 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_862].z;
    float _3798 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _885 = _882.x * TEXCOORD_1.z;
    float _886 = dot(vec3(_480, _481, _482), vec3(_804, _805, _806));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _480) - _804;
    float _894 = (_889 * _481) - _805;
    float _895 = (_889 * _482) - _806;
    float _899 = abs(dot(vec3(_804, _805, _806), vec3(_480, _481, _482)));
    float _3831 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_729);
    float _913 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1011 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1015 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1039 = _945 + _480;
        float _1040 = _949 + _481;
        float _1041 = _953 + _482;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1007;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1011;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1015;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_480, _481, _482), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3879 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_480, _481, _482), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3912 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_480, _481, _482), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3945 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1329 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1333 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1356 = _945 + _480;
        float _1357 = _949 + _481;
        float _1358 = _953 + _482;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_480, _481, _482), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4008 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_480, _481, _482), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4041 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_480, _481, _482), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4074 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = _1282;
        _1604 = _1282;
        _1605 = _1282;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1294)) + _1294;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _893 * 0.5;
    float _1663 = _894 * 0.5;
    float _1664 = _895 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1705;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1716;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1707 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1720 = (_1716 * cbModelParam._m0[1u].x) + (_1705 * (1.0 - cbModelParam._m0[1u].x));
    float _1730 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _729);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1730 : min(cbModelParam._m0[25u].z, _1730));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1792 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1795 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1823 = frontier_phi_19_17_ladder;
        }
        float _1993;
        if (_1792 > 0.0)
        {
            _1993 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1993 = frontier_phi_28_24_ladder;
        }
        float _2437;
        if (_1795 > 0.0)
        {
            _2437 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2437 = frontier_phi_40_35_ladder;
        }
        float _2439 = isnan(_1993) ? _1823 : (isnan(_1823) ? _1993 : min(_1823, _1993));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1789) + _1778;
        float _2445 = (_2440 * _1792) + _1782;
        float _2446 = (_2440 * _1795) + _1786;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2447;
        float _2451 = _2447 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 > _2451) || ((_2445 < _2449) || ((_2444 < _2449) || (_2444 > _2451))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2446, cbModelParam._m0[9u].z, fma(_2445, cbModelParam._m0[9u].y, _2444 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2446, cbModelParam._m0[10u].z, fma(_2445, cbModelParam._m0[10u].y, _2444 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2446, cbModelParam._m0[11u].z, fma(_2445, cbModelParam._m0[11u].y, _2444 * cbModelParam._m0[11u].x))), _1731);
            frontier_phi_18_40_ladder = _2695.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2695.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2695.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_18_40_ladder_2;
        _1813 = frontier_phi_18_40_ladder_1;
        _1815 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1731);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _729);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1888 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1891 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _1998;
        if (_1885 > 0.0)
        {
            _1998 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1998 = frontier_phi_30_26_ladder;
        }
        float _2464;
        if (_1888 > 0.0)
        {
            _2464 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2464 = frontier_phi_42_37_ladder;
        }
        float _2824;
        if (_1891 > 0.0)
        {
            _2824 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2824 = frontier_phi_54_49_ladder;
        }
        float _2826 = isnan(_2464) ? _1998 : (isnan(_1998) ? _2464 : min(_1998, _2464));
        float _2827 = isnan(_2824) ? _2826 : (isnan(_2826) ? _2824 : min(_2826, _2824));
        float _2831 = (_2827 * _1885) + _1874;
        float _2832 = (_2827 * _1888) + _1878;
        float _2833 = (_2827 * _1891) + _1882;
        float _2834 = _2827 * 9.9999997473787516355514526367188e-05;
        float _2835 = (-1.0) - _2834;
        float _2837 = _2834 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2833 > _2837) || ((_2833 < _2835) || ((_2832 > _2837) || ((_2832 < _2835) || ((_2831 < _2835) || (_2831 > _2837))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2833, cbModelParam._m0[17u].z, fma(_2832, cbModelParam._m0[17u].y, _2831 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2833, cbModelParam._m0[18u].z, fma(_2832, cbModelParam._m0[18u].y, _2831 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2833, cbModelParam._m0[19u].z, fma(_2832, cbModelParam._m0[19u].y, _2831 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_27_54_ladder = _2970.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _2970.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _2970.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_27_54_ladder_2;
        _1912 = frontier_phi_27_54_ladder_1;
        _1914 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1820);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1926 = ((((1.0 - _913) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _901)) * _885;
    float _1927 = _1926 * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1928 = _1926 * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1929 = _1926 * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1932 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1928, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1928, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1928, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1985 = _1972 / _1984;
    float _1986 = _1976 / _1984;
    float _1987 = _1980 / _1984;
    float _2134;
    float _2135;
    float _2136;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2014 = ((uint(_1987 > cbSceneParam._m0[59u].y) + uint(_1987 > cbSceneParam._m0[59u].x)) + uint(_1987 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2015 = _2014 + 43u;
        uint _2023 = _2014 + 44u;
        uint _2031 = _2014 + 45u;
        uint _2039 = _2014 + 46u;
        float _2050 = fma(_1984, cbSceneParam._m0[_2015].w, fma(_1980, cbSceneParam._m0[_2015].z, fma(_1976, cbSceneParam._m0[_2015].y, _1972 * cbSceneParam._m0[_2015].x)));
        float _2054 = fma(_1984, cbSceneParam._m0[_2023].w, fma(_1980, cbSceneParam._m0[_2023].z, fma(_1976, cbSceneParam._m0[_2023].y, _1972 * cbSceneParam._m0[_2023].x)));
        float _2062 = fma(_1984, cbSceneParam._m0[_2039].w, fma(_1980, cbSceneParam._m0[_2039].z, fma(_1976, cbSceneParam._m0[_2039].y, _1972 * cbSceneParam._m0[_2039].x)));
        float _2067 = cbSceneParam._m0[33u].z * _2062;
        float _2069 = cbSceneParam._m0[33u].w * _2062;
        float _2072 = fma(_1984, cbSceneParam._m0[_2031].w, fma(_1980, cbSceneParam._m0[_2031].z, fma(_1976, cbSceneParam._m0[_2031].y, _1972 * cbSceneParam._m0[_2031].x))) / _2062;
        float _2120 = (cbSceneParam._m0[33u].x - sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987))) * cbSceneParam._m0[33u].y;
        float _4200 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2127 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 + _2050) / _2062, (_2069 + _2054) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2050) / _2062, (_2054 - _2067) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 - _2067) / _2062, (_2054 - _2069) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 - _2069) / _2062, (_2067 + _2054) / _2062), _2072), 0.0)).x), vec4(0.25)));
        _2134 = 1.0 - (_2127 * cbSceneParam._m0[34u].x);
        _2135 = 1.0 - (_2127 * cbSceneParam._m0[34u].y);
        _2136 = 1.0 - (_2127 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2134 = 1.0;
        _2135 = 1.0;
        _2136 = 1.0;
    }
    float _2200;
    float _2202;
    float _2204;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2188 = fma(_1984, cbSceneParam._m0[63u].w, fma(_1980, cbSceneParam._m0[63u].z, fma(_1976, cbSceneParam._m0[63u].y, _1972 * cbSceneParam._m0[63u].x)));
        float _2189 = fma(_1984, cbSceneParam._m0[60u].w, fma(_1980, cbSceneParam._m0[60u].z, fma(_1976, cbSceneParam._m0[60u].y, _1972 * cbSceneParam._m0[60u].x))) / _2188;
        float _2190 = fma(_1984, cbSceneParam._m0[61u].w, fma(_1980, cbSceneParam._m0[61u].z, fma(_1976, cbSceneParam._m0[61u].y, _1972 * cbSceneParam._m0[61u].x))) / _2188;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2189 >= cbSceneParam._m0[64u].x) && (_2190 >= cbSceneParam._m0[64u].y)) && (_2189 <= cbSceneParam._m0[64u].z)) && (_2190 <= cbSceneParam._m0[64u].w))
        {
            float _2477 = fma(_1984, cbSceneParam._m0[62u].w, fma(_1980, cbSceneParam._m0[62u].z, fma(_1976, cbSceneParam._m0[62u].y, _1972 * cbSceneParam._m0[62u].x))) / _2188;
            float _2481 = isnan(cbSceneParam._m0[41u].w) ? _2477 : (isnan(_2477) ? cbSceneParam._m0[41u].w : max(_2477, cbSceneParam._m0[41u].w));
            float _2524 = (cbSceneParam._m0[33u].x - sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987))) * cbSceneParam._m0[33u].y;
            float _4216 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
            float _2531 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2189, cbSceneParam._m0[33u].w + _2190), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2189, _2190 - cbSceneParam._m0[33u].z), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2189 - cbSceneParam._m0[33u].z, _2190 - cbSceneParam._m0[33u].w), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2189 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2190), _2481), 0.0)).x), vec4(0.25)));
            float _2535 = 1.0 - (_2531 * cbSceneParam._m0[34u].x);
            float _2536 = 1.0 - (_2531 * cbSceneParam._m0[34u].y);
            float _2537 = 1.0 - (_2531 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2537) ? _2136 : (isnan(_2136) ? _2537 : min(_2136, _2537));
            frontier_phi_39_38_ladder_1 = isnan(_2536) ? _2135 : (isnan(_2135) ? _2536 : min(_2135, _2536));
            frontier_phi_39_38_ladder_2 = isnan(_2535) ? _2134 : (isnan(_2134) ? _2535 : min(_2134, _2535));
        }
        else
        {
            frontier_phi_39_38_ladder = _2136;
            frontier_phi_39_38_ladder_1 = _2135;
            frontier_phi_39_38_ladder_2 = _2134;
        }
        _2200 = frontier_phi_39_38_ladder_2;
        _2202 = frontier_phi_39_38_ladder_1;
        _2204 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2200 = _2134;
        _2202 = _2135;
        _2204 = _2136;
    }
    uvec4 _2209 = floatBitsToUint(cbInstanceData._m0[_860 + 5u]);
    uint _2211 = _2209.x * 14u;
    uint _2212 = _2211 + 13u;
    float _2217 = _885 + (-1.0);
    float _2220 = (cbLight._m0[_2212].x * _2217) + 1.0;
    float _2221 = (cbLight._m0[_2212].y * _2217) + 1.0;
    uint _2222 = _2211 + 5u;
    float _2228 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2232 = _2211 + 4u;
    float _2241 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2245 = _2211 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_480, _481, _482));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_480, _481, _482));
    float _4252 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4263 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2200) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2202) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2204) * _2241) * _2264);
    uint _2277 = _2211 + 8u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _729) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2211].x + _804;
    float _2293 = cbLight._m0[_2211].y + _805;
    float _2294 = cbLight._m0[_2211].z + _806;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2211].xyz));
    float _4274 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2306 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2307 = dot(vec3(_480, _481, _482), vec3(_2299, _2300, _2301));
    float _4296 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2299, _2300, _2301));
    float _4307 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2291 * _2291;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2331 = 1.0 - _2291;
    float _2342 = (0.5 / (((_2306 * ((_2305 * _2331) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2331) + _2291) * _2305))) * _2305;
    float _4318 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2344 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    uint _2358 = _2211 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _729) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2245].x + _804;
    float _2372 = cbLight._m0[_2245].y + _805;
    float _2373 = cbLight._m0[_2245].z + _806;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2245].xyz));
    float _4329 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2385 = dot(vec3(_480, _481, _482), vec3(_2378, _2379, _2380));
    float _4340 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2378, _2379, _2380));
    float _4351 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2407 = 1.0 - _2370;
    float _2417 = (0.5 / (((_2306 * ((_2384 * _2407) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2407) + _2370) * _2384))) * _2384;
    float _4362 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2429 = (((_2406 * cbLight._m0[_2358].x) * _2419) * _2228) + ((((cbLight._m0[_2277].x * _2200) * _2330) * _2344) * _2241);
    float _2430 = (((_2406 * cbLight._m0[_2358].y) * _2419) * _2228) + ((((cbLight._m0[_2277].y * _2202) * _2330) * _2344) * _2241);
    float _2431 = (((_2406 * cbLight._m0[_2358].z) * _2419) * _2228) + ((((cbLight._m0[_2277].z * _2204) * _2330) * _2344) * _2241);
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_2209.y == 0u)
    {
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.x;
        uint _2561 = uint((float(_2549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2550))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2550)));
        float _2571 = (log2(_1987 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        uint _2575 = uint(isnan(14.0) ? _2572 : (isnan(_2572) ? 14.0 : min(_2572, 14.0)));
        uvec4 _2580 = texelFetch(g_lightClusterGridBuffer, int(((_2575 << 2u) + (_2561 << 6u)) >> 2u));
        uint _2581 = _2580.x;
        uint _2582 = _2549.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2582 >> 4u) & 15u)) + 4294967295u) & _2581) == 0u) || ((_2582 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            uint _2888 = 0u;
            uint _2897;
            bool _2898;
            for (;;)
            {
                _2897 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                _2898 = _2897 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2898)
                {
                    frontier_phi_65_pred = _2884;
                    frontier_phi_65_pred_1 = _2883;
                    frontier_phi_65_pred_2 = _2882;
                    frontier_phi_65_pred_3 = _2885;
                    frontier_phi_65_pred_4 = _2887;
                    frontier_phi_65_pred_5 = _2886;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2882;
                    _3049 = _2883;
                    _3050 = _2884;
                    _3051 = _2885;
                    _3052 = _2886;
                    _3053 = _2887;
                    _3054 = _2897;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2888 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _1985;
                        float _3115 = _3074.y - _1986;
                        float _3116 = _3074.z - _1987;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_841, _844, _847), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4383 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3144 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _1985;
                        float _3149 = (-0.0) - _1986;
                        float _3150 = (-0.0) - _1987;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3164 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3165 = 1.0 - _901;
                        float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                        float _3173 = _3172 * _3172;
                        float _3174 = _3173 * _3173;
                        float _3175 = _3155 + _3121;
                        float _3176 = _3156 + _3122;
                        float _3177 = _3157 + _3123;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3185 = dot(vec3(_841, _844, _847), vec3(_3155, _3156, _3157));
                        float _4399 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3189 = dot(vec3(_841, _844, _847), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                        float _4410 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                        float _3197 = _3134 * _3173;
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3124) + _3198;
                        float _4421 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3203 = 1.0 - _3173;
                        float _3213 = (0.5 / (((_3202 * ((_3188 * _3203) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3202 * _3203) + _3173) * _3188))) * _3202;
                        float _4432 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3224 = (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3196 * _3196) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2978 = (_3144 * _3093.x) + _3051;
                        _2979 = (_3144 * _3093.y) + _3052;
                        _2980 = (_3144 * _3093.z) + _3053;
                        _2975 = (_3224 * _3110.x) + _3048;
                        _2976 = (_3224 * _3110.y) + _3049;
                        _2977 = (_3224 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_65_pred = _2977;
                    frontier_phi_65_pred_1 = _2976;
                    frontier_phi_65_pred_2 = _2975;
                    frontier_phi_65_pred_3 = _2978;
                    frontier_phi_65_pred_4 = _2980;
                    frontier_phi_65_pred_5 = _2979;
                }
                _2709 = frontier_phi_65_pred;
                _2707 = frontier_phi_65_pred_1;
                _2705 = frontier_phi_65_pred_2;
                _2711 = frontier_phi_65_pred_3;
                _2715 = frontier_phi_65_pred_4;
                _2713 = frontier_phi_65_pred_5;
                uint _2889 = _2888 + 1u;
                if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2882 = _2705;
                    _2883 = _2707;
                    _2884 = _2709;
                    _2885 = _2711;
                    _2886 = _2713;
                    _2887 = _2715;
                    _2888 = _2889;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((4294967295u << _2721) & _2581) == 0u)
        {
            _2850 = _2704;
            _2852 = _2706;
            _2854 = _2708;
            _2856 = _2710;
            _2858 = _2712;
            _2860 = _2714;
        }
        else
        {
            float _2875 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
            float _2876 = _2875 * _1985;
            float _2877 = _2875 * _1986;
            float _2878 = _2875 * _1987;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _3031 = _2704;
                float _3032 = _2706;
                float _3033 = _2708;
                float _3034 = _2710;
                float _3035 = _2712;
                float _3036 = _2714;
                uint _3037 = _2721;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_3047)
                    {
                        frontier_phi_76_pred = _3033;
                        frontier_phi_76_pred_1 = _3032;
                        frontier_phi_76_pred_2 = _3031;
                        frontier_phi_76_pred_3 = _3036;
                        frontier_phi_76_pred_4 = _3035;
                        frontier_phi_76_pred_5 = _3034;
                    }
                    else
                    {
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3251 = _3031;
                        float _3252 = _3032;
                        float _3253 = _3033;
                        float _3254 = _3034;
                        float _3255 = _3035;
                        float _3256 = _3036;
                        uint _3257 = _3046;
                        uint _3258;
                        vec4 _3283;
                        float _3284;
                        vec4 _3299;
                        vec3 _3311;
                        vec4 _3326;
                        vec4 _3341;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3268 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3257));
                            _3258 = (_3257 + 4294967295u) & _3257;
                            uint _3270 = _3268 * 40u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            _3284 = _3283.w;
                            uint _3286 = (_3268 * 40u) + 4u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3268 * 40u) + 8u;
                            _3311 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x));
                            uint _3313 = (_3268 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3268 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3344 = (_3268 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3268 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_1987, _3376.z, fma(_1986, _3376.y, _3376.x * _1985)) + _3376.w;
                            _3389 = !((fma(_1987, _3357.z, fma(_1986, _3357.y, _3357.x * _1985)) + _3357.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3283.x - _1985;
                                float _3417 = _3283.y - _1986;
                                float _3418 = _3283.z - _1987;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3284 * _3284));
                                float _4443 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3434 = sqrt(_3419) * _3299.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_841, _844, _847))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_1987, _3326.z, fma(_1986, _3326.y, _3326.x * _1985)) + _3326.w) / _3388;
                                float _3448 = (fma(_1987, _3341.z, fma(_1986, _3341.y, _3341.x * _1985)) + _3341.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4459 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _901;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2876;
                                float _3478 = _3424 - _2877;
                                float _3479 = _3425 - _2878;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_841, _844, _847), vec3((-0.0) - _2876, (-0.0) - _2877, (-0.0) - _2878));
                                float _4470 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3491 = dot(vec3(_841, _844, _847), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4481 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_841, _844, _847), vec3(_3423, _3424, _3425))) + _3500;
                                float _4492 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4503 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3528 * _3311.z;
                                frontier_phi_82_pred_1 = _3528 * _3311.y;
                                frontier_phi_82_pred_2 = _3528 * _3311.x;
                                frontier_phi_82_pred_3 = _3454 * _3299.z;
                                frontier_phi_82_pred_4 = _3454 * _3299.y;
                                frontier_phi_82_pred_5 = _3454 * _3299.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3534 = frontier_phi_82_pred;
                            _3533 = frontier_phi_82_pred_1;
                            _3532 = frontier_phi_82_pred_2;
                            _3537 = frontier_phi_82_pred_3;
                            _3536 = frontier_phi_82_pred_4;
                            _3535 = frontier_phi_82_pred_5;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            _3240 = _3534 + _3253;
                            if (_3258 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3258;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3240;
                        frontier_phi_76_pred_1 = _3239;
                        frontier_phi_76_pred_2 = _3238;
                        frontier_phi_76_pred_3 = _3243;
                        frontier_phi_76_pred_4 = _3242;
                        frontier_phi_76_pred_5 = _3241;
                    }
                    _2855 = frontier_phi_76_pred;
                    _2853 = frontier_phi_76_pred_1;
                    _2851 = frontier_phi_76_pred_2;
                    _2861 = frontier_phi_76_pred_3;
                    _2859 = frontier_phi_76_pred_4;
                    _2857 = frontier_phi_76_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2851;
                        _3032 = _2853;
                        _3033 = _2855;
                        _3034 = _2857;
                        _3035 = _2859;
                        _3036 = _2861;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2861;
                frontier_phi_56_57_ladder_1 = _2859;
                frontier_phi_56_57_ladder_2 = _2857;
                frontier_phi_56_57_ladder_3 = _2853;
                frontier_phi_56_57_ladder_4 = _2851;
                frontier_phi_56_57_ladder_5 = _2855;
            }
            else
            {
                frontier_phi_56_57_ladder = _2714;
                frontier_phi_56_57_ladder_1 = _2712;
                frontier_phi_56_57_ladder_2 = _2710;
                frontier_phi_56_57_ladder_3 = _2706;
                frontier_phi_56_57_ladder_4 = _2704;
                frontier_phi_56_57_ladder_5 = _2708;
            }
            _2850 = frontier_phi_56_57_ladder_4;
            _2852 = frontier_phi_56_57_ladder_3;
            _2854 = frontier_phi_56_57_ladder_5;
            _2856 = frontier_phi_56_57_ladder_2;
            _2858 = frontier_phi_56_57_ladder_1;
            _2860 = frontier_phi_56_57_ladder;
        }
        float _2865 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2593 = (_2865 * _2856) + _2273;
        _2595 = (_2865 * _2858) + _2274;
        _2597 = (_2865 * _2860) + _2275;
        _2599 = ((_2850 * 0.039999999105930328369140625) * _2865) + _2429;
        _2601 = ((_2852 * 0.039999999105930328369140625) * _2865) + _2430;
        _2603 = ((_2854 * 0.039999999105930328369140625) * _2865) + _2431;
    }
    else
    {
        _2593 = _2273;
        _2595 = _2274;
        _2597 = _2275;
        _2599 = _2429;
        _2601 = _2430;
        _2603 = _2431;
    }
    uint _2609 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _4519 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4530 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4541 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2634 = (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2593 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _885))) + ((_2599 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1720)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[13u].y * _631) * cbInstanceData._m0[_2609].x);
    float _2636 = (((cbMtdParam._m0[13u].y * _633) * cbInstanceData._m0[_2609].y) + ((_2601 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1720)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2595 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _885)));
    float _2638 = (((cbMtdParam._m0[13u].y * _635) * cbInstanceData._m0[_2609].z) + ((_2603 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1720)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2597 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _885)));
    float _2639 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2640 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2641 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    uint _2642 = _860 + 6u;
    float _2650 = _821 / cbSceneParam._m0[86u].x;
    float _2651 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2665 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, (log2((isnan(cbSceneParam._m0[77u].w) ? _748 : (isnan(_748) ? cbSceneParam._m0[77u].w : min(_748, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2667 = _2665.x;
    float _2668 = _2665.y;
    float _2669 = _2665.z;
    float _2670 = _2665.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_748 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_748) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _748 : min(cbSceneParam._m0[80u].w, _748));
        float _2730 = _2729 / _748;
        float _2741 = _2730 * _797;
        float _2742 = _798 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2744 = _2730 * _799;
        float _2746 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2742;
        float _2754 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2988;
        if (abs((_2743 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2988 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2911 = 1.0 / cbSceneParam._m0[80u].x;
            float _2912 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2913 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            _2988 = ((abs(_2754 / _2743) * cbSceneParam._m0[80u].y) * ((((_2922 - _2923) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))))) * _2911)) - ((exp2(_2764 * _2922) - exp2(_2764 * _2923)) * _2911))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2990 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, 1.0), 0.0);
        float _2999 = exp2((_2988 * (-1.44269502162933349609375)) * (1.0 - _2990.w));
        float _3000 = log2(_2999);
        float _3016 = log2(_2670);
        _2766 = (exp2(_3016 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].x)) * _2990.x) / cbSceneParam._m0[78u].x)) + _2667;
        _2768 = (exp2(_3016 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].y)) * _2990.y) / cbSceneParam._m0[78u].y)) + _2668;
        _2770 = (exp2(_3016 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].z)) * _2990.z) / cbSceneParam._m0[78u].z)) + _2669;
        _2772 = _2999 * _2670;
    }
    else
    {
        _2766 = _2667;
        _2768 = _2668;
        _2770 = _2669;
        _2772 = _2670;
    }
    bool _3026;
    vec4 _2782;
    vec4 _2804;
    float _2806;
    float _2810;
    float _2811;
    float _2812;
    float _2813;
    bool _2823;
    for (;;)
    {
        _2782 = cbMatDynParam._m0[0u];
        float _2784 = roundEven(_2782.y);
        bool _2785 = _2784 == 3.0;
        float _2786 = log2(_2772);
        float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * _2639;
        float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * _2640;
        float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * _2641;
        float _2802 = _809 + (-0.5);
        _2804 = cbMtdParam._m0[1u];
        _2806 = _2804.y * _2802;
        float _2809 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2810 = _2809 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
        _2811 = _2809 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
        _2812 = _2809 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
        _2813 = _2802 * 0.999000012874603271484375;
        _2823 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2823)
        {
            if ((cbInstanceData._m0[_860 + 7u].x + _2813) < 0.5)
            {
                _3026 = true;
                break;
            }
        }
        uint _2946 = _861 + uint(_2782.w);
        if ((cbInstanceData._m0[_2946].w < 1.0) && ((cbInstanceData._m0[_2946].w + _2813) < 0.5))
        {
            _3026 = true;
            break;
        }
        if ((_2806 + _719) < _2804.x)
        {
            _3026 = true;
            break;
        }
        _3026 = false;
        break;
    }
    float _3229;
    if (_3026)
    {
        discard_state = true;
        _3229 = 0.0;
    }
    else
    {
        _3229 = cbInstanceData._m0[_2642].w;
    }
    SV_Target.x = _2810;
    SV_Target.y = _2811;
    SV_Target.z = _2812;
    SV_Target.w = _3229;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2642].w;
    discard_exit();
}


