#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall2_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall2_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3421;
float _3422;
float _3423;
float _3424;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    float _313 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    vec4 _331 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_5, SS_BumpMap), vec2((((_313 * cbMtdParam._m0[18u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_313 * cbMtdParam._m0[18u].y) + TEXCOORD_1.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _336 = _331.x * 2.0;
    float _338 = _331.y * 2.0;
    float _339 = _336 + (-1.0);
    float _341 = _338 + (-1.0);
    float _342 = dot(vec2(_339, _341), vec2(_339, _341));
    float _3433 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _361 = (cbMtdParam._m0[17u].x * _313) + TEXCOORD_1.x;
    float _362 = (cbMtdParam._m0[17u].y * _313) + TEXCOORD_1.y;
    vec4 _374 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_361 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_362 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _379 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].z * cbMtdParam._m0[14u].x);
    float _386 = ((_374.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _388 = (-0.0) - (cbMtdParam._m0[15u].x * ((_374.x * 0.5) + (-0.25)));
    float _389 = fract(_379);
    float _391 = fract(_379 + 0.5);
    float _402 = abs((_389 * 2.0) + (-1.0));
    vec4 _418 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_389 * _388) + _361) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_386 * _389) + _362) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    vec4 _422 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_391 * _388) + _361) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_386 * _391) + _362) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _451 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].z * _313) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[16u].w * _313) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _461 = ((_336 + (-1.35000002384185791015625)) + ((((((_422.x - _420) * _402) + _420) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_451.x * 0.699999988079071044921875);
    float _464 = ((_338 + (-1.35000002384185791015625)) + ((((((_422.y - _421) * _402) + _421) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_451.y * 0.699999988079071044921875);
    float _467 = fma(_348, _235, fma(_464, _227 * TANGENT.x, _461 * (_213 * _206)));
    float _470 = fma(_348, _236, fma(_464, _227 * TANGENT.y, _461 * (_213 * _207)));
    float _473 = fma(_348, _237, fma(_464, _227 * TANGENT.z, _461 * (_213 * _208)));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _478 = _477 * _467;
    float _479 = _477 * _470;
    float _480 = _477 * _473;
    vec4 _504 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _509 = _504.x * cbMtdParam._m0[19u].y;
    float _518 = (cbMtdParam._m0[17u].z * _313) + TEXCOORD_1.x;
    float _519 = (cbMtdParam._m0[17u].w * _313) + TEXCOORD_1.y;
    vec4 _549 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _518) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _519) + cbTextureTilingScale._m0[1u].w));
    float _559 = (cbMtdParam._m0[16u].x * _313) + TEXCOORD_1.x;
    float _560 = (cbMtdParam._m0[16u].y * _313) + TEXCOORD_1.y;
    vec4 _565 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_559 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_560 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _573 = ((_565.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _575 = (-0.0) - (cbMtdParam._m0[15u].x * ((_565.x * 0.5) + (-0.25)));
    vec4 _592 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_389 * _575) + _559) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_573 * _389) + _560) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    vec4 _597 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_391 * _575) + _559) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_573 * _391) + _560) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _612 = ((_509 + TEXCOORD_4.x) * cbMtdParam._m0[15u].y) * exp2(log2(texture(sampler2D(M_Waterfall2_snp_0_Texture2D_4, SS_WrapLinear), vec2((_518 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_519 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x) * cbMtdParam._m0[13u].w);
    float _616 = (_504.y * cbMtdParam._m0[19u].z) + TEXCOORD_4.y;
    float _629 = (((cbMtdParam._m0[9u].x + _549.x) * _616) + cbMtdParam._m0[10u].x) + (_612 * (((_597.x - _594) * _402) + _594));
    float _631 = (((cbMtdParam._m0[9u].y + _549.y) * _616) + cbMtdParam._m0[10u].y) + (_612 * (((_597.y - _595) * _402) + _595));
    float _633 = (((cbMtdParam._m0[9u].z + _549.z) * _616) + cbMtdParam._m0[10u].z) + (_612 * (((_597.z - _596) * _402) + _596));
    float _642 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _649 = dot(vec4(_642 * _291, _642 * _292, _642 * _293, 0.0), vec4(_478, _479, _480, 0.0)) + (-1.0);
    float _3444 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _653 = exp2(log2(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))));
    float _665 = (((_653 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _629) + (cbMtdParam._m0[12u].x * TEXCOORD_4.y);
    float _668 = (((_653 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _631) + (cbMtdParam._m0[12u].y * TEXCOORD_4.y);
    float _671 = (((_653 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _633) + (cbMtdParam._m0[12u].z * TEXCOORD_4.y);
    float _675 = cbMtdParam._m0[15u].z * ((1.0 - TEXCOORD_4.z) - (_504.z * cbMtdParam._m0[19u].w));
    float _685 = cbMtdParam._m0[14u].y - cbMtdParam._m0[15u].w;
    float _688 = (sqrt(((_291 * _291) + (_292 * _292)) + (_293 * _293)) - cbMtdParam._m0[15u].w) / (isnan(0.001000000047497451305389404296875) ? _685 : (isnan(_685) ? 0.001000000047497451305389404296875 : max(_685, 0.001000000047497451305389404296875)));
    float _3460 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _692 = (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_675 + (-0.001000000047497451305389404296875));
    float _705 = gl_FragCoord.x * 0.125;
    float _707 = gl_FragCoord.y * 0.125;
    vec4 _709 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_705, _707));
    float _717 = float(((((TEXCOORD_4.w * 2.0) - (cbMtdParam._m0[13u].z * _549.w)) * _675) * ((_692 + 0.001000000047497451305389404296875) + ((0.999000012874603271484375 - _692) * (1.0 - _509)))) >= ((_709.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _3471 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _727 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3493 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3504 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _746 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _786);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _786);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _786);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    vec4 _805 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_705, _707));
    float _807 = _805.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _962 = sqrt(((_795 * _795) + (_796 * _796)) + (_797 * _797));
        float _968 = (cbMatDynParam._m0[5u].x * _962) + cbMatDynParam._m0[5u].y;
        float _3515 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _973 = (cbMatDynParam._m0[5u].z * _962) + cbMatDynParam._m0[5u].w;
        float _3526 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) - _969)) + _969) < ((_807 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _819 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _820 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _839 = fma(_480, cbSceneParam._m0[5u].z, fma(_479, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _478));
    float _842 = fma(_480, cbSceneParam._m0[6u].z, fma(_479, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _478));
    float _845 = fma(_480, cbSceneParam._m0[7u].z, fma(_479, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _478));
    uint _858 = uint(roundEven(NORMAL.w)) * 13u;
    uint _859 = _858 + 9u;
    uint _860 = _859 + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3537 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _819, cbSceneParam._m0[86u].y * _820));
    float _883 = _880.x * TEXCOORD_1.z;
    float _884 = dot(vec3(_478, _479, _480), vec3(_802, _803, _804));
    float _887 = _884 * 2.0;
    float _891 = (_887 * _478) - _802;
    float _892 = (_887 * _479) - _803;
    float _893 = (_887 * _480) - _804;
    float _897 = abs(dot(vec3(_802, _803, _804), vec3(_478, _479, _480)));
    float _3570 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _899 = sqrt(_727);
    float _911 = exp2((_899 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_899 * 3.0));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1005 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _1009 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _1013 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1037 = _943 + _478;
        float _1038 = _947 + _479;
        float _1039 = _951 + _480;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1005;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1009;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1013;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1005 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1009 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1013 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_478, _479, _480), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3618 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_478, _479, _480), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3651 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_478, _479, _480), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3684 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1323 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1327 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1331 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1354 = _943 + _478;
        float _1355 = _947 + _479;
        float _1356 = _951 + _480;
        float _1366 = fma(_1356, cbModelParam._m0[30u].z, fma(_1355, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1354)) - _1323;
        float _1367 = fma(_1356, cbModelParam._m0[31u].z, fma(_1355, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1354)) - _1327;
        float _1368 = fma(_1356, cbModelParam._m0[32u].z, fma(_1355, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1354)) - _1331;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1323 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1327 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[35u].z) + ((((((_1331 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1422 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1389.x + (-0.5));
        float _1424 = _1422 * (_1389.y + (-0.5));
        float _1425 = _1422 * (_1389.z + (-0.5));
        float _1432 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1396.x + (-0.5));
        float _1434 = _1432 * (_1396.y + (-0.5));
        float _1435 = _1432 * (_1396.z + (-0.5));
        float _1442 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1403.x + (-0.5));
        float _1444 = _1442 * (_1403.y + (-0.5));
        float _1445 = _1442 * (_1403.z + (-0.5));
        float _1452 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1410.x + (-0.5));
        float _1454 = _1452 * (_1410.y + (-0.5));
        float _1455 = _1452 * (_1410.z + (-0.5));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = _1423 * 0.5;
        float _1460 = _1433 * 0.5;
        float _1461 = _1443 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_478, _479, _480), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _3747 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1486 + 1.0))) + _1491) * _1456;
        float _1501 = _1424 * 0.5;
        float _1502 = _1434 * 0.5;
        float _1503 = _1444 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_478, _479, _480), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _3780 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1528 + 1.0))) + _1533) * _1457;
        float _1543 = _1425 * 0.5;
        float _1544 = _1435 * 0.5;
        float _1545 = _1445 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_478, _479, _480), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _3813 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1570 + 1.0))) + _1575) * _1458;
        _1592 = _1425;
        _1593 = _1424;
        _1594 = _1423;
        _1595 = _1435;
        _1596 = _1434;
        _1597 = _1433;
        _1598 = _1445;
        _1599 = _1444;
        _1600 = _1443;
        _1601 = _1458;
        _1602 = _1457;
        _1603 = _1456;
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = _1280;
        _1602 = _1280;
        _1603 = _1280;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1292)) + _1292;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1293)) + _1293;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1294)) + _1294;
    float _1639 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1616));
    float _1660 = _891 * 0.5;
    float _1661 = _892 * 0.5;
    float _1662 = _893 * 0.5;
    float _1663 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1666 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1669 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1703;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1676 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1680 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1684 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1691 = dot(vec4(cbModelParam._m0[39u]), vec4(_1660, _1661, _1662, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1714;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1705 = dot(vec4(cbModelParam._m0[40u]), vec4(_1660, _1661, _1662, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1718 = (_1714 * cbModelParam._m0[1u].x) + (_1703 * (1.0 - cbModelParam._m0[1u].x));
    float _1728 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _727);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1728 : min(cbModelParam._m0[25u].z, _1728));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_893, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891));
        float _1790 = fma(_893, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891));
        float _1793 = fma(_893, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1821 = frontier_phi_19_17_ladder;
        }
        float _2192;
        if (_1790 > 0.0)
        {
            _2192 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2192 = frontier_phi_28_24_ladder;
        }
        float _2515;
        if (_1793 > 0.0)
        {
            _2515 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2515 = frontier_phi_42_35_ladder;
        }
        float _2517 = isnan(_2192) ? _1821 : (isnan(_1821) ? _2192 : min(_1821, _2192));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1787) + _1776;
        float _2523 = (_2518 * _1790) + _1780;
        float _2524 = (_2518 * _1793) + _1784;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2524, cbModelParam._m0[9u].z, fma(_2523, cbModelParam._m0[9u].y, _2522 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2524, cbModelParam._m0[10u].z, fma(_2523, cbModelParam._m0[10u].y, _2522 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2524, cbModelParam._m0[11u].z, fma(_2523, cbModelParam._m0[11u].y, _2522 * cbModelParam._m0[11u].x))), _1729);
            frontier_phi_18_42_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_18_42_ladder_2;
        _1811 = frontier_phi_18_42_ladder_1;
        _1813 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_891, _892, _893), _1729);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _727);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_893, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891));
        float _1886 = fma(_893, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891));
        float _1889 = fma(_893, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891));
        float _2197;
        if (_1883 > 0.0)
        {
            _2197 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2197 = frontier_phi_30_26_ladder;
        }
        float _2541;
        if (_1886 > 0.0)
        {
            _2541 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2541 = frontier_phi_44_37_ladder;
        }
        float _2731;
        if (_1889 > 0.0)
        {
            _2731 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2731 = frontier_phi_62_55_ladder;
        }
        float _2733 = isnan(_2541) ? _2197 : (isnan(_2197) ? _2541 : min(_2197, _2541));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _1883) + _1872;
        float _2739 = (_2734 * _1886) + _1876;
        float _2740 = (_2734 * _1889) + _1880;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_27_62_ladder = _2981.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2981.y * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2981.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_27_62_ladder_2;
        _1910 = frontier_phi_27_62_ladder_1;
        _1912 = frontier_phi_27_62_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_891, _892, _893), _1818);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1924 = ((((1.0 - _911) * ((_899 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_911 * _899)) * _883;
    float _1925 = _1924 * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1926 = _1924 * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1927 = _1924 * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    vec4 _1944 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_819, _820));
    float _1946 = _1944.w;
    float _1958 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1946);
    float _1959 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1946);
    float _1960 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1946);
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_858 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1972 = _883 + (-1.0);
    float _1975 = (cbLight._m0[_1967].x * _1972) + 1.0;
    float _1976 = (cbLight._m0[_1967].y * _1972) + 1.0;
    uint _1977 = _1966 + 5u;
    float _1983 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1987 = _1966 + 4u;
    float _1996 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2000 = _1966 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_478, _479, _480));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_478, _479, _480));
    float _3949 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _3960 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1977].x * _1983) * _2021) + (((cbLight._m0[_1987].x * _1958) * _1996) * _2019);
    float _2029 = ((_1983 * cbLight._m0[_1977].y) * _2021) + (((cbLight._m0[_1987].y * _1959) * _1996) * _2019);
    float _2030 = ((_1983 * cbLight._m0[_1977].z) * _2021) + (((cbLight._m0[_1987].z * _1960) * _1996) * _2019);
    uint _2032 = _1966 + 8u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _727) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1966].x + _802;
    float _2048 = cbLight._m0[_1966].y + _803;
    float _2049 = cbLight._m0[_1966].z + _804;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1966].xyz));
    float _3971 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2061 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _2062 = dot(vec3(_478, _479, _480), vec3(_2054, _2055, _2056));
    float _3993 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2054, _2055, _2056));
    float _4004 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2046 * _2046;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2046;
    float _2097 = (0.5 / (((_2061 * ((_2060 * _2086) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2086) + _2046) * _2060))) * _2060;
    float _4015 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    uint _2113 = _1966 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _727) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_2000].x + _802;
    float _2127 = cbLight._m0[_2000].y + _803;
    float _2128 = cbLight._m0[_2000].z + _804;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2000].xyz));
    float _4026 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _2140 = dot(vec3(_478, _479, _480), vec3(_2133, _2134, _2135));
    float _4037 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2133, _2134, _2135));
    float _4048 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2162 = 1.0 - _2125;
    float _2172 = (0.5 / (((_2061 * ((_2139 * _2162) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2162) + _2125) * _2139))) * _2139;
    float _4059 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2184 = (((_2161 * cbLight._m0[_2113].x) * _2174) * _1983) + ((((cbLight._m0[_2032].x * _1958) * _2085) * _2099) * _1996);
    float _2185 = (((_2161 * cbLight._m0[_2113].y) * _2174) * _1983) + ((((cbLight._m0[_2032].y * _1959) * _2085) * _2099) * _1996);
    float _2186 = (((_2161 * cbLight._m0[_2113].z) * _2174) * _1983) + ((((cbLight._m0[_2032].z * _1960) * _2085) * _2099) * _1996);
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    if (_1964.y == 0u)
    {
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2241;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2241;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2241;
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _820) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _819) / _2257)));
        float _2278 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uvec4 _2287 = texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u));
        uint _2288 = _2287.x;
        uint _2289 = _2256.z;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & _2288) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
        }
        else
        {
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            uint _2584 = 0u;
            uint _2593;
            bool _2594;
            for (;;)
            {
                _2593 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                _2594 = _2593 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2594)
                {
                    frontier_phi_57_pred = _2579;
                    frontier_phi_57_pred_1 = _2583;
                    frontier_phi_57_pred_2 = _2582;
                    frontier_phi_57_pred_3 = _2581;
                    frontier_phi_57_pred_4 = _2580;
                    frontier_phi_57_pred_5 = _2578;
                }
                else
                {
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    uint _2780;
                    _2774 = _2578;
                    _2775 = _2579;
                    _2776 = _2580;
                    _2777 = _2581;
                    _2778 = _2582;
                    _2779 = _2583;
                    _2780 = _2593;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    for (;;)
                    {
                        uint _2784 = uint(findLSB(_2780)) + (_2584 << 5u);
                        uint _2781 = (_2780 + 4294967295u) & _2780;
                        uint _2786 = _2784 * 48u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2806 = (_2784 * 48u) + 4u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2825 = (_2784 * 48u) + 8u;
                        vec3 _2836 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x));
                        float _2840 = _2800.x - _2242;
                        float _2841 = _2800.y - _2243;
                        float _2842 = _2800.z - _2244;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_839, _842, _845), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2800.w);
                        float _4080 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2857 = sqrt(_2843) * _2819.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2850) + _2861;
                        float _2867 = _2857 * _2857;
                        float _2870 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2856) / ((_2867 * 0.699999988079071044921875) + 1.0);
                        float _2874 = (-0.0) - _2242;
                        float _2875 = (-0.0) - _2243;
                        float _2876 = (-0.0) - _2244;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2891 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                        float _2892 = 1.0 - _899;
                        float _2899 = sqrt(1.0 - ((1.0 - (_2892 * _2892)) * (1.0 - (_2891 * _2891))));
                        float _2900 = _2899 * _2899;
                        float _2901 = _2900 * _2900;
                        float _2902 = _2881 + _2847;
                        float _2903 = _2882 + _2848;
                        float _2904 = _2883 + _2849;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2912 = dot(vec3(_839, _842, _845), vec3(_2881, _2882, _2883));
                        float _4096 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2916 = dot(vec3(_839, _842, _845), vec3(_2908 * _2902, _2908 * _2903, _2908 * _2904));
                        float _4107 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2923 = ((_2919 * _2919) * (_2901 + (-1.0))) + 1.0;
                        float _2924 = _2860 * _2900;
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2850) + _2925;
                        float _4118 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2930 = 1.0 - _2900;
                        float _2940 = (0.5 / (((_2929 * ((_2915 * _2930) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2929 * _2930) + _2900) * _2915))) * _2929;
                        float _4129 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2951 = (((_2901 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_2923 * _2923) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2678 = (_2870 * _2819.x) + _2777;
                        _2679 = (_2870 * _2819.y) + _2778;
                        _2680 = (_2870 * _2819.z) + _2779;
                        _2675 = (_2951 * _2836.x) + _2774;
                        _2676 = (_2951 * _2836.y) + _2775;
                        _2677 = (_2951 * _2836.z) + _2776;
                        if (_2781 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2774 = _2675;
                            _2775 = _2676;
                            _2776 = _2677;
                            _2777 = _2678;
                            _2778 = _2679;
                            _2779 = _2680;
                            _2780 = _2781;
                        }
                    }
                    frontier_phi_57_pred = _2676;
                    frontier_phi_57_pred_1 = _2680;
                    frontier_phi_57_pred_2 = _2679;
                    frontier_phi_57_pred_3 = _2678;
                    frontier_phi_57_pred_4 = _2677;
                    frontier_phi_57_pred_5 = _2675;
                }
                _2397 = frontier_phi_57_pred;
                _2405 = frontier_phi_57_pred_1;
                _2403 = frontier_phi_57_pred_2;
                _2401 = frontier_phi_57_pred_3;
                _2399 = frontier_phi_57_pred_4;
                _2395 = frontier_phi_57_pred_5;
                uint _2585 = _2584 + 1u;
                if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2578 = _2395;
                    _2579 = _2397;
                    _2580 = _2399;
                    _2581 = _2401;
                    _2582 = _2403;
                    _2583 = _2405;
                    _2584 = _2585;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
        }
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.z;
        uint _2411 = (_2409 >> 8u) & 15u;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((4294967295u << _2411) & _2288) == 0u)
        {
            _2546 = _2394;
            _2548 = _2396;
            _2550 = _2398;
            _2552 = _2400;
            _2554 = _2402;
            _2556 = _2404;
        }
        else
        {
            float _2571 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _2572 = _2571 * _2242;
            float _2573 = _2571 * _2243;
            float _2574 = _2571 * _2244;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2411 < ((_2409 >> 12u) & 15u))
            {
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2757 = _2394;
                float _2758 = _2396;
                float _2759 = _2398;
                float _2760 = _2400;
                float _2761 = _2402;
                float _2762 = _2404;
                uint _2763 = _2411;
                uint _2772;
                bool _2773;
                for (;;)
                {
                    _2772 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                    _2773 = _2772 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2773)
                    {
                        frontier_phi_71_pred = _2762;
                        frontier_phi_71_pred_1 = _2761;
                        frontier_phi_71_pred_2 = _2760;
                        frontier_phi_71_pred_3 = _2759;
                        frontier_phi_71_pred_4 = _2758;
                        frontier_phi_71_pred_5 = _2757;
                    }
                    else
                    {
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _2999 = _2757;
                        float _3000 = _2758;
                        float _3001 = _2759;
                        float _3002 = _2760;
                        float _3003 = _2761;
                        float _3004 = _2762;
                        uint _3005 = _2772;
                        uint _3006;
                        vec4 _3031;
                        float _3032;
                        vec4 _3047;
                        vec3 _3059;
                        vec4 _3074;
                        vec4 _3089;
                        float _3136;
                        bool _3137;
                        for (;;)
                        {
                            uint _3016 = ((_2763 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3005));
                            _3006 = (_3005 + 4294967295u) & _3005;
                            uint _3018 = _3016 * 40u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            _3032 = _3031.w;
                            uint _3034 = (_3016 * 40u) + 4u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_3016 * 40u) + 8u;
                            _3059 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x));
                            uint _3061 = (_3016 * 40u) + 16u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3016 * 40u) + 20u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3092 = (_3016 * 40u) + 24u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3111 = (_3016 * 40u) + 28u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3136 = fma(_2244, _3124.z, fma(_2243, _3124.y, _3124.x * _2242)) + _3124.w;
                            _3137 = !((fma(_2244, _3105.z, fma(_2243, _3105.y, _3105.x * _2242)) + _3105.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3137)
                            {
                                float _3164 = _3031.x - _2242;
                                float _3165 = _3031.y - _2243;
                                float _3166 = _3031.z - _2244;
                                float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                                float _3170 = inversesqrt(_3167);
                                float _3171 = _3170 * _3164;
                                float _3172 = _3170 * _3165;
                                float _3173 = _3170 * _3166;
                                float _3177 = 1.0 - (_3167 / (_3032 * _3032));
                                float _4140 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3182 = sqrt(_3167) * _3047.w;
                                float _3184 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                                float _3185 = _3184 * _3184;
                                float _3188 = ((1.0 - _3185) * dot(vec3(_3171, _3172, _3173), vec3(_839, _842, _845))) + _3185;
                                float _3191 = _3182 * _3182;
                                float _3195 = (fma(_2244, _3074.z, fma(_2243, _3074.y, _3074.x * _2242)) + _3074.w) / _3136;
                                float _3196 = (fma(_2244, _3089.z, fma(_2243, _3089.y, _3089.x * _2242)) + _3089.w) / _3136;
                                float _3200 = 1.0 - dot(vec2(_3195, _3196), vec2(_3195, _3196));
                                float _4156 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3202 = _3201 * (((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3178) / ((_3191 * 0.699999988079071044921875) + 1.0));
                                float _3214 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                                float _3215 = 1.0 - _899;
                                float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                                float _3223 = _3222 * _3222;
                                float _3224 = _3223 * _3223;
                                float _3225 = _3171 - _2572;
                                float _3226 = _3172 - _2573;
                                float _3227 = _3173 - _2574;
                                float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                                float _3235 = dot(vec3(_839, _842, _845), vec3((-0.0) - _2572, (-0.0) - _2573, (-0.0) - _2574));
                                float _4167 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3239 = dot(vec3(_839, _842, _845), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                                float _4178 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                                float _3247 = _3184 * _3223;
                                float _3248 = _3247 * _3247;
                                float _3254 = ((1.0 - _3248) * dot(vec3(_839, _842, _845), vec3(_3171, _3172, _3173))) + _3248;
                                float _4189 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3256 = 1.0 - _3223;
                                float _3266 = (0.5 / (((_3255 * ((_3238 * _3256) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3223) * _3238))) * _3255;
                                float _4200 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3276 = (_3201 * _3178) * (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_3246 * _3246) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3202 * _3047.x;
                                frontier_phi_77_pred_1 = _3202 * _3047.z;
                                frontier_phi_77_pred_2 = _3202 * _3047.y;
                                frontier_phi_77_pred_3 = _3276 * _3059.z;
                                frontier_phi_77_pred_4 = _3276 * _3059.y;
                                frontier_phi_77_pred_5 = _3276 * _3059.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_77_pred;
                            _3285 = frontier_phi_77_pred_1;
                            _3284 = frontier_phi_77_pred_2;
                            _3282 = frontier_phi_77_pred_3;
                            _3281 = frontier_phi_77_pred_4;
                            _3280 = frontier_phi_77_pred_5;
                            _2989 = _3283 + _3002;
                            _2990 = _3284 + _3003;
                            _2991 = _3285 + _3004;
                            _2986 = _3280 + _2999;
                            _2987 = _3281 + _3000;
                            _2988 = _3282 + _3001;
                            if (_3006 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _3006;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2991;
                        frontier_phi_71_pred_1 = _2990;
                        frontier_phi_71_pred_2 = _2989;
                        frontier_phi_71_pred_3 = _2988;
                        frontier_phi_71_pred_4 = _2987;
                        frontier_phi_71_pred_5 = _2986;
                    }
                    _2557 = frontier_phi_71_pred;
                    _2555 = frontier_phi_71_pred_1;
                    _2553 = frontier_phi_71_pred_2;
                    _2551 = frontier_phi_71_pred_3;
                    _2549 = frontier_phi_71_pred_4;
                    _2547 = frontier_phi_71_pred_5;
                    uint _2764 = _2763 + 1u;
                    if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2757 = _2547;
                        _2758 = _2549;
                        _2759 = _2551;
                        _2760 = _2553;
                        _2761 = _2555;
                        _2762 = _2557;
                        _2763 = _2764;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2557;
                frontier_phi_46_47_ladder_1 = _2549;
                frontier_phi_46_47_ladder_2 = _2555;
                frontier_phi_46_47_ladder_3 = _2553;
                frontier_phi_46_47_ladder_4 = _2551;
                frontier_phi_46_47_ladder_5 = _2547;
            }
            else
            {
                frontier_phi_46_47_ladder = _2404;
                frontier_phi_46_47_ladder_1 = _2396;
                frontier_phi_46_47_ladder_2 = _2402;
                frontier_phi_46_47_ladder_3 = _2400;
                frontier_phi_46_47_ladder_4 = _2398;
                frontier_phi_46_47_ladder_5 = _2394;
            }
            _2546 = frontier_phi_46_47_ladder_5;
            _2548 = frontier_phi_46_47_ladder_1;
            _2550 = frontier_phi_46_47_ladder_4;
            _2552 = frontier_phi_46_47_ladder_3;
            _2554 = frontier_phi_46_47_ladder_2;
            _2556 = frontier_phi_46_47_ladder;
        }
        float _2561 = isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0));
        _2300 = (_2561 * _2552) + _2028;
        _2302 = (_2561 * _2554) + _2029;
        _2304 = (_2561 * _2556) + _2030;
        _2306 = ((_2546 * 0.039999999105930328369140625) * _2561) + _2184;
        _2308 = ((_2548 * 0.039999999105930328369140625) * _2561) + _2185;
        _2310 = ((_2550 * 0.039999999105930328369140625) * _2561) + _2186;
    }
    else
    {
        _2300 = _2028;
        _2302 = _2029;
        _2304 = _2030;
        _2306 = _2184;
        _2308 = _2185;
        _2310 = _2186;
    }
    uint _2316 = _859 + uint(cbMatDynParam._m0[0u].w);
    float _4216 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4227 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4238 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2341 = (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2300 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _883))) + ((_2306 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1718)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[13u].y * _629) * cbInstanceData._m0[_2316].x);
    float _2343 = (((cbMtdParam._m0[13u].y * _631) * cbInstanceData._m0[_2316].y) + ((_2308 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1718)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2302 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _883)));
    float _2345 = (((cbMtdParam._m0[13u].y * _633) * cbInstanceData._m0[_2316].z) + ((_2310 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1718)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2304 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _883)));
    float _2346 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2347 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    uint _2349 = _858 + 6u;
    float _2357 = _819 / cbSceneParam._m0[86u].x;
    float _2358 = _820 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _746 : (isnan(_746) ? cbSceneParam._m0[77u].w : min(_746, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_746 > cbSceneParam._m0[78u].w)
    {
        float _2419 = isnan(_746) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _746 : min(cbSceneParam._m0[80u].w, _746));
        float _2420 = _2419 / _746;
        float _2431 = _2420 * _795;
        float _2432 = _796 * _2420;
        float _2433 = (-0.0) - _2432;
        float _2434 = _2420 * _797;
        float _2436 = (cbSceneParam._m0[77u].w * _2433) / _2419;
        float _2437 = _2436 + cbSceneParam._m0[79u].w;
        float _2438 = cbSceneParam._m0[79u].w - _2432;
        float _2444 = sqrt(((_2431 * _2431) + (_2432 * _2432)) + (_2434 * _2434));
        float _2447 = (1.0 - (cbSceneParam._m0[77u].w / _2419)) * _2444;
        float _2453 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2455 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2688;
        if (abs((_2433 - _2436) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2688 = ((((_2437 > 0.0) ? exp2(_2453 * _2437) : (2.0 - exp2(_2455 * _2437))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2447;
        }
        else
        {
            float _2607 = 1.0 / cbSceneParam._m0[80u].x;
            float _2608 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : max(_2437, _2438));
            float _2609 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : min(_2437, _2438));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            _2688 = ((abs(_2444 / _2433) * cbSceneParam._m0[80u].y) * ((((_2618 - _2619) * 2.0) - ((exp2(_2453 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)))) - exp2(_2453 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0))))) * _2607)) - ((exp2(_2455 * _2618) - exp2(_2455 * _2619)) * _2607))) + (_2447 * cbSceneParam._m0[80u].z);
        }
        vec4 _2690 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2699 = exp2((_2688 * (-1.44269502162933349609375)) * (1.0 - _2690.w));
        float _2700 = log2(_2699);
        float _2716 = log2(_2377);
        _2457 = (exp2(_2716 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].x)) * _2690.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2459 = (exp2(_2716 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].y)) * _2690.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2461 = (exp2(_2716 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].z)) * _2690.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2463 = _2699 * _2377;
    }
    else
    {
        _2457 = _2374;
        _2459 = _2375;
        _2461 = _2376;
        _2463 = _2377;
    }
    bool _2726;
    vec4 _2473;
    vec4 _2495;
    float _2497;
    float _2501;
    float _2502;
    float _2503;
    float _2504;
    bool _2514;
    for (;;)
    {
        _2473 = cbMatDynParam._m0[0u];
        float _2475 = roundEven(_2473.y);
        bool _2476 = _2475 == 3.0;
        float _2477 = log2(_2463);
        float _2484 = exp2(_2477 * cbSceneParam._m0[78u].x) * _2346;
        float _2485 = exp2(_2477 * cbSceneParam._m0[78u].y) * _2347;
        float _2486 = exp2(_2477 * cbSceneParam._m0[78u].z) * _2348;
        float _2493 = _807 + (-0.5);
        _2495 = cbMtdParam._m0[1u];
        _2497 = _2495.y * _2493;
        float _2500 = (_2475 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2501 = _2500 * (_2476 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2457)));
        _2502 = _2500 * (_2476 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2459)));
        _2503 = _2500 * (_2476 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2461)));
        _2504 = _2493 * 0.999000012874603271484375;
        _2514 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2514)
        {
            if ((cbInstanceData._m0[_858 + 7u].x + _2504) < 0.5)
            {
                _2726 = true;
                break;
            }
        }
        uint _2642 = _859 + uint(_2473.w);
        if ((cbInstanceData._m0[_2642].w < 1.0) && ((cbInstanceData._m0[_2642].w + _2504) < 0.5))
        {
            _2726 = true;
            break;
        }
        if ((_2497 + _717) < _2495.x)
        {
            _2726 = true;
            break;
        }
        _2726 = false;
        break;
    }
    float _2956;
    if (_2726)
    {
        discard_state = true;
        _2956 = 0.0;
    }
    else
    {
        _2956 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2501;
    SV_Target.y = _2502;
    SV_Target.z = _2503;
    SV_Target.w = _2956;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


