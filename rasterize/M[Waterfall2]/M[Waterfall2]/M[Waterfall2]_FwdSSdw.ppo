#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall2_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall2_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall2_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall2_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Waterfall2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    float _305 = cbMtdParam._m0[14u].x * cbPerFrame._m0[22u].x;
    vec4 _323 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_5, SS_BumpMap), vec2((((_305 * cbMtdParam._m0[18u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_305 * cbMtdParam._m0[18u].y) + TEXCOORD_1.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _328 = _323.x * 2.0;
    float _330 = _323.y * 2.0;
    float _331 = _328 + (-1.0);
    float _333 = _330 + (-1.0);
    float _334 = dot(vec2(_331, _333), vec2(_331, _333));
    float _3213 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))));
    float _353 = (cbMtdParam._m0[17u].x * _305) + TEXCOORD_1.x;
    float _354 = (cbMtdParam._m0[17u].y * _305) + TEXCOORD_1.y;
    vec4 _366 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_353 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_354 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _371 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].z * cbMtdParam._m0[14u].x);
    float _378 = ((_366.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _380 = (-0.0) - (cbMtdParam._m0[15u].x * ((_366.x * 0.5) + (-0.25)));
    float _381 = fract(_371);
    float _383 = fract(_371 + 0.5);
    float _394 = abs((_381 * 2.0) + (-1.0));
    vec4 _410 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_381 * _380) + _353) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_378 * _381) + _354) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    vec4 _414 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((_383 * _380) + _353) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_378 * _383) + _354) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _443 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].z * _305) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[16u].w * _305) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _453 = ((_328 + (-1.35000002384185791015625)) + ((((((_414.x - _412) * _394) + _412) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_443.x * 0.699999988079071044921875);
    float _456 = ((_330 + (-1.35000002384185791015625)) + ((((((_414.y - _413) * _394) + _413) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x)) + (_443.y * 0.699999988079071044921875);
    float _459 = fma(_340, _227, fma(_456, _219 * TANGENT.x, _453 * (_205 * _198)));
    float _462 = fma(_340, _228, fma(_456, _219 * TANGENT.y, _453 * (_205 * _199)));
    float _465 = fma(_340, _229, fma(_456, _219 * TANGENT.z, _453 * (_205 * _200)));
    float _469 = inversesqrt(dot(vec3(_459, _462, _465), vec3(_459, _462, _465)));
    float _470 = _469 * _459;
    float _471 = _469 * _462;
    float _472 = _469 * _465;
    vec4 _495 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _507 = (cbMtdParam._m0[17u].z * _305) + TEXCOORD_1.x;
    float _508 = (cbMtdParam._m0[17u].w * _305) + TEXCOORD_1.y;
    vec4 _538 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * _507) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _508) + cbTextureTilingScale._m0[1u].w));
    float _547 = (cbMtdParam._m0[16u].x * _305) + TEXCOORD_1.x;
    float _548 = (cbMtdParam._m0[16u].y * _305) + TEXCOORD_1.y;
    vec4 _553 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_3, SS_WrapLinear), vec2((_547 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_548 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _561 = ((_553.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].x;
    float _563 = (-0.0) - (cbMtdParam._m0[15u].x * ((_553.x * 0.5) + (-0.25)));
    vec4 _580 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_381 * _563) + _547) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_561 * _381) + _548) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    vec4 _585 = texture(sampler2D(M_Waterfall2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_383 * _563) + _547) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_561 * _383) + _548) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _600 = (((_495.x * cbMtdParam._m0[19u].y) + TEXCOORD_4.x) * cbMtdParam._m0[15u].y) * exp2(log2(texture(sampler2D(M_Waterfall2_snp_0_Texture2D_4, SS_WrapLinear), vec2((_507 * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (_508 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x) * cbMtdParam._m0[13u].w);
    float _604 = (_495.y * cbMtdParam._m0[19u].z) + TEXCOORD_4.y;
    float _617 = (((cbMtdParam._m0[9u].x + _538.x) * _604) + cbMtdParam._m0[10u].x) + (_600 * (((_585.x - _582) * _394) + _582));
    float _619 = (((cbMtdParam._m0[9u].y + _538.y) * _604) + cbMtdParam._m0[10u].y) + (_600 * (((_585.y - _583) * _394) + _583));
    float _621 = (((cbMtdParam._m0[9u].z + _538.z) * _604) + cbMtdParam._m0[10u].z) + (_600 * (((_585.z - _584) * _394) + _584));
    float _630 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _631 = _630 * _283;
    float _632 = _630 * _284;
    float _633 = _630 * _285;
    float _637 = dot(vec4(_631, _632, _633, 0.0), vec4(_470, _471, _472, 0.0)) + (-1.0);
    float _3224 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _641 = exp2(log2(1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))));
    float _653 = (((_641 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _617) + (cbMtdParam._m0[12u].x * TEXCOORD_4.y);
    float _656 = (((_641 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _619) + (cbMtdParam._m0[12u].y * TEXCOORD_4.y);
    float _659 = (((_641 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _621) + (cbMtdParam._m0[12u].z * TEXCOORD_4.y);
    float _3235 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _665 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _3246 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3257 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3268 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _711 = fma(_472, cbSceneParam._m0[5u].z, fma(_471, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _470));
    float _714 = fma(_472, cbSceneParam._m0[6u].z, fma(_471, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _470));
    float _717 = fma(_472, cbSceneParam._m0[7u].z, fma(_471, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _470));
    uint _730 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _730 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3279 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _755 = _752.x * TEXCOORD_1.z;
    float _756 = dot(vec3(_470, _471, _472), vec3(_631, _632, _633));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _470) - _631;
    float _764 = (_759 * _471) - _632;
    float _765 = (_759 * _472) - _633;
    float _769 = abs(dot(vec3(_631, _632, _633), vec3(_470, _471, _472)));
    float _3312 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_665);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _855 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _859 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _883 = _816 + _470;
        float _884 = _820 + _471;
        float _885 = _824 + _472;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _851;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _855;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _859;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_470, _471, _472), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3360 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_470, _471, _472), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3393 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_470, _471, _472), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3426 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1170 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1174 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1197 = _816 + _470;
        float _1198 = _820 + _471;
        float _1199 = _824 + _472;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_470, _471, _472), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3489 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_470, _471, _472), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3522 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_470, _471, _472), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3555 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _763 * 0.5;
    float _1504 = _764 * 0.5;
    float _1505 = _765 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _665);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1633 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1636 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1664 = frontier_phi_16_14_ladder;
        }
        float _2035;
        if (_1633 > 0.0)
        {
            _2035 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2035 = frontier_phi_25_21_ladder;
        }
        float _2350;
        if (_1636 > 0.0)
        {
            _2350 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2350 = frontier_phi_39_32_ladder;
        }
        float _2352 = isnan(_2035) ? _1664 : (isnan(_1664) ? _2035 : min(_1664, _2035));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1630) + _1619;
        float _2358 = (_2353 * _1633) + _1623;
        float _2359 = (_2353 * _1636) + _1627;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2359, cbModelParam._m0[9u].z, fma(_2358, cbModelParam._m0[9u].y, _2357 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2359, cbModelParam._m0[10u].z, fma(_2358, cbModelParam._m0[10u].y, _2357 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2359, cbModelParam._m0[11u].z, fma(_2358, cbModelParam._m0[11u].y, _2357 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_15_39_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_15_39_ladder_2;
        _1654 = frontier_phi_15_39_ladder_1;
        _1656 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1572);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _665);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1715 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1719 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1723 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1726 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1729 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1732 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _2040;
        if (_1726 > 0.0)
        {
            _2040 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2040 = frontier_phi_27_23_ladder;
        }
        float _2376;
        if (_1729 > 0.0)
        {
            _2376 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2376 = frontier_phi_41_34_ladder;
        }
        float _2545;
        if (_1732 > 0.0)
        {
            _2545 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _2545 = frontier_phi_55_50_ladder;
        }
        float _2547 = isnan(_2376) ? _2040 : (isnan(_2040) ? _2376 : min(_2040, _2376));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _1726) + _1715;
        float _2553 = (_2548 * _1729) + _1719;
        float _2554 = (_2548 * _1732) + _1723;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2555;
        float _2558 = _2555 + 1.0;
        float frontier_phi_24_55_ladder;
        float frontier_phi_24_55_ladder_1;
        float frontier_phi_24_55_ladder_2;
        if ((_2554 > _2558) || ((_2554 < _2556) || ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 < _2556) || (_2552 > _2558))))))
        {
            frontier_phi_24_55_ladder = 0.0;
            frontier_phi_24_55_ladder_1 = 0.0;
            frontier_phi_24_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2554, cbModelParam._m0[17u].z, fma(_2553, cbModelParam._m0[17u].y, _2552 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2554, cbModelParam._m0[18u].z, fma(_2553, cbModelParam._m0[18u].y, _2552 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2554, cbModelParam._m0[19u].z, fma(_2553, cbModelParam._m0[19u].y, _2552 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_24_55_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1751 = frontier_phi_24_55_ladder_2;
        _1753 = frontier_phi_24_55_ladder_1;
        _1755 = frontier_phi_24_55_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1661);
        _1751 = _1735.x * cbModelParam._m0[1u].z;
        _1753 = _1735.y * cbModelParam._m0[1u].z;
        _1755 = _1735.z * cbModelParam._m0[1u].z;
    }
    float _1767 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1768 = _1767 * ((cbModelParam._m0[1u].w * (_1751 - _1652)) + _1652);
    float _1769 = _1767 * ((cbModelParam._m0[1u].w * (_1753 - _1654)) + _1654);
    float _1770 = _1767 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1773 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1768 * cbSceneParam._m0[91u].x));
    vec4 _1787 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_690, _691));
    float _1789 = _1787.w;
    float _1801 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1789);
    float _1802 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1789);
    float _1803 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1789);
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_730 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1815 = _755 + (-1.0);
    float _1818 = (cbLight._m0[_1810].x * _1815) + 1.0;
    float _1819 = (cbLight._m0[_1810].y * _1815) + 1.0;
    uint _1820 = _1809 + 5u;
    float _1826 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1830 = _1809 + 4u;
    float _1839 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1843 = _1809 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_470, _471, _472));
    float _1857 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_470, _471, _472));
    float _3691 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _3702 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1862 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1864 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1871 = ((cbLight._m0[_1820].x * _1826) * _1864) + (((cbLight._m0[_1830].x * _1801) * _1839) * _1862);
    float _1872 = ((_1826 * cbLight._m0[_1820].y) * _1864) + (((cbLight._m0[_1830].y * _1802) * _1839) * _1862);
    float _1873 = ((_1826 * cbLight._m0[_1820].z) * _1864) + (((cbLight._m0[_1830].z * _1803) * _1839) * _1862);
    uint _1875 = _1809 + 8u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _665) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1809].x + _631;
    float _1891 = cbLight._m0[_1809].y + _632;
    float _1892 = cbLight._m0[_1809].z + _633;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_1809].xyz));
    float _3713 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1904 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _1905 = dot(vec3(_470, _471, _472), vec3(_1897, _1898, _1899));
    float _3735 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1897, _1898, _1899));
    float _3746 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1889 * _1889;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1929 = 1.0 - _1889;
    float _1940 = (0.5 / (((_1904 * ((_1903 * _1929) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _1929) + _1889) * _1903))) * _1903;
    float _3757 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    uint _1956 = _1809 + 9u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _665) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1843].x + _631;
    float _1970 = cbLight._m0[_1843].y + _632;
    float _1971 = cbLight._m0[_1843].z + _633;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_1843].xyz));
    float _3768 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1983 = dot(vec3(_470, _471, _472), vec3(_1976, _1977, _1978));
    float _3779 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_1976, _1977, _1978));
    float _3790 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1968 * _1968;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2005 = 1.0 - _1968;
    float _2015 = (0.5 / (((_1904 * ((_1982 * _2005) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2005) + _1968) * _1982))) * _1982;
    float _3801 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    float _2027 = (((_2004 * cbLight._m0[_1956].x) * _2017) * _1826) + ((((cbLight._m0[_1875].x * _1801) * _1928) * _1942) * _1839);
    float _2028 = (((_2004 * cbLight._m0[_1956].y) * _2017) * _1826) + ((((cbLight._m0[_1875].y * _1802) * _1928) * _1942) * _1839);
    float _2029 = (((_2004 * cbLight._m0[_1956].z) * _2017) * _1826) + ((((cbLight._m0[_1875].z * _1803) * _1928) * _1942) * _1839);
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    if (_1807.y == 0u)
    {
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2084;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2084;
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2084;
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.x;
        uint _2111 = uint((float(_2099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2100))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2100)));
        float _2121 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2122 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        uint _2125 = uint(isnan(14.0) ? _2122 : (isnan(_2122) ? 14.0 : min(_2122, 14.0)));
        uvec4 _2130 = texelFetch(g_lightClusterGridBuffer, int(((_2125 << 2u) + (_2111 << 6u)) >> 2u));
        uint _2131 = _2130.x;
        uint _2132 = _2099.z;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        if (((((1u << ((_2132 >> 4u) & 15u)) + 4294967295u) & _2131) == 0u) || ((_2132 & 240u) == 0u))
        {
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
        }
        else
        {
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            uint _2419 = 0u;
            uint _2428;
            bool _2429;
            for (;;)
            {
                _2428 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2419 << 2u)) >> 2u)).x;
                _2429 = _2428 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2429)
                {
                    frontier_phi_52_pred = _2413;
                    frontier_phi_52_pred_1 = _2418;
                    frontier_phi_52_pred_2 = _2417;
                    frontier_phi_52_pred_3 = _2416;
                    frontier_phi_52_pred_4 = _2415;
                    frontier_phi_52_pred_5 = _2414;
                }
                else
                {
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    uint _2594;
                    _2588 = _2413;
                    _2589 = _2414;
                    _2590 = _2415;
                    _2591 = _2416;
                    _2592 = _2417;
                    _2593 = _2418;
                    _2594 = _2428;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    for (;;)
                    {
                        uint _2598 = uint(findLSB(_2594)) + (_2419 << 5u);
                        uint _2595 = (_2594 + 4294967295u) & _2594;
                        uint _2600 = _2598 * 48u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2600)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 3u)).x));
                        uint _2620 = (_2598 * 48u) + 4u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2639 = (_2598 * 48u) + 8u;
                        vec3 _2650 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x));
                        float _2654 = _2614.x - _2085;
                        float _2655 = _2614.y - _2086;
                        float _2656 = _2614.z - _2087;
                        float _2657 = dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656));
                        float _2660 = inversesqrt(_2657);
                        float _2661 = _2660 * _2654;
                        float _2662 = _2660 * _2655;
                        float _2663 = _2660 * _2656;
                        float _2664 = dot(vec3(_711, _714, _717), vec3(_2661, _2662, _2663));
                        float _2669 = 1.0 - (_2657 * _2614.w);
                        float _3822 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                        float _2671 = sqrt(_2657) * _2633.w;
                        float _2674 = 1.39999997615814208984375 / (_2671 + 1.39999997615814208984375);
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2664) + _2675;
                        float _2681 = _2671 * _2671;
                        float _2684 = ((isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))) * _2670) / ((_2681 * 0.699999988079071044921875) + 1.0);
                        float _2688 = (-0.0) - _2085;
                        float _2689 = (-0.0) - _2086;
                        float _2690 = (-0.0) - _2087;
                        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
                        float _2695 = _2694 * _2688;
                        float _2696 = _2694 * _2689;
                        float _2697 = _2694 * _2690;
                        float _2705 = exp2(log2(1.0 / ((_2681 * 3.5) + 5.0)) * 0.25);
                        float _2706 = 1.0 - _771;
                        float _2713 = sqrt(1.0 - ((1.0 - (_2706 * _2706)) * (1.0 - (_2705 * _2705))));
                        float _2714 = _2713 * _2713;
                        float _2715 = _2714 * _2714;
                        float _2716 = _2695 + _2661;
                        float _2717 = _2696 + _2662;
                        float _2718 = _2697 + _2663;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2726 = dot(vec3(_711, _714, _717), vec3(_2695, _2696, _2697));
                        float _3838 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
                        float _2730 = dot(vec3(_711, _714, _717), vec3(_2722 * _2716, _2722 * _2717, _2722 * _2718));
                        float _3849 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
                        float _2737 = ((_2733 * _2733) * (_2715 + (-1.0))) + 1.0;
                        float _2738 = _2674 * _2714;
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2664) + _2739;
                        float _3860 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                        float _2744 = 1.0 - _2714;
                        float _2754 = (0.5 / (((_2743 * ((_2729 * _2744) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _2744) + _2714) * _2729))) * _2743;
                        float _3871 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2765 = (((_2715 * 3.1415927410125732421875) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) / ((_2737 * _2737) * ((_2681 * 2.1991131305694580078125) + 3.141590118408203125))) * _2670;
                        _2497 = (_2684 * _2633.x) + _2591;
                        _2498 = (_2684 * _2633.y) + _2592;
                        _2499 = (_2684 * _2633.z) + _2593;
                        _2494 = (_2765 * _2650.x) + _2588;
                        _2495 = (_2765 * _2650.y) + _2589;
                        _2496 = (_2765 * _2650.z) + _2590;
                        if (_2595 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2588 = _2494;
                            _2589 = _2495;
                            _2590 = _2496;
                            _2591 = _2497;
                            _2592 = _2498;
                            _2593 = _2499;
                            _2594 = _2595;
                        }
                    }
                    frontier_phi_52_pred = _2494;
                    frontier_phi_52_pred_1 = _2499;
                    frontier_phi_52_pred_2 = _2498;
                    frontier_phi_52_pred_3 = _2497;
                    frontier_phi_52_pred_4 = _2496;
                    frontier_phi_52_pred_5 = _2495;
                }
                _2238 = frontier_phi_52_pred;
                _2248 = frontier_phi_52_pred_1;
                _2246 = frontier_phi_52_pred_2;
                _2244 = frontier_phi_52_pred_3;
                _2242 = frontier_phi_52_pred_4;
                _2240 = frontier_phi_52_pred_5;
                uint _2420 = _2419 + 1u;
                if (_2420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2413 = _2238;
                    _2414 = _2240;
                    _2415 = _2242;
                    _2416 = _2244;
                    _2417 = _2246;
                    _2418 = _2248;
                    _2419 = _2420;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
        }
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.z;
        uint _2254 = (_2252 >> 8u) & 15u;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((4294967295u << _2254) & _2131) == 0u)
        {
            _2381 = _2237;
            _2383 = _2239;
            _2385 = _2241;
            _2387 = _2243;
            _2389 = _2245;
            _2391 = _2247;
        }
        else
        {
            float _2406 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _2407 = _2406 * _2085;
            float _2408 = _2406 * _2086;
            float _2409 = _2406 * _2087;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2254 < ((_2252 >> 12u) & 15u))
            {
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2571 = _2237;
                float _2572 = _2239;
                float _2573 = _2241;
                float _2574 = _2243;
                float _2575 = _2245;
                float _2576 = _2247;
                uint _2577 = _2254;
                uint _2586;
                bool _2587;
                for (;;)
                {
                    _2586 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                    _2587 = _2586 == 0u;
                    float frontier_phi_61_pred;
                    float frontier_phi_61_pred_1;
                    float frontier_phi_61_pred_2;
                    float frontier_phi_61_pred_3;
                    float frontier_phi_61_pred_4;
                    float frontier_phi_61_pred_5;
                    if (_2587)
                    {
                        frontier_phi_61_pred = _2576;
                        frontier_phi_61_pred_1 = _2575;
                        frontier_phi_61_pred_2 = _2574;
                        frontier_phi_61_pred_3 = _2573;
                        frontier_phi_61_pred_4 = _2572;
                        frontier_phi_61_pred_5 = _2571;
                    }
                    else
                    {
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _2804 = _2571;
                        float _2805 = _2572;
                        float _2806 = _2573;
                        float _2807 = _2574;
                        float _2808 = _2575;
                        float _2809 = _2576;
                        uint _2810 = _2586;
                        uint _2811;
                        vec4 _2836;
                        float _2837;
                        vec4 _2852;
                        vec3 _2864;
                        vec4 _2879;
                        vec4 _2894;
                        float _2941;
                        bool _2942;
                        for (;;)
                        {
                            uint _2821 = ((_2577 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2810));
                            _2811 = (_2810 + 4294967295u) & _2810;
                            uint _2823 = _2821 * 40u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            _2837 = _2836.w;
                            uint _2839 = (_2821 * 40u) + 4u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2854 = (_2821 * 40u) + 8u;
                            _2864 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x));
                            uint _2866 = (_2821 * 40u) + 16u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2881 = (_2821 * 40u) + 20u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2821 * 40u) + 24u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2916 = (_2821 * 40u) + 28u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2941 = fma(_2087, _2929.z, fma(_2086, _2929.y, _2929.x * _2085)) + _2929.w;
                            _2942 = !((fma(_2087, _2910.z, fma(_2086, _2910.y, _2910.x * _2085)) + _2910.w) <= 0.0);
                            float frontier_phi_67_pred;
                            float frontier_phi_67_pred_1;
                            float frontier_phi_67_pred_2;
                            float frontier_phi_67_pred_3;
                            float frontier_phi_67_pred_4;
                            float frontier_phi_67_pred_5;
                            if (_2942)
                            {
                                float _2969 = _2836.x - _2085;
                                float _2970 = _2836.y - _2086;
                                float _2971 = _2836.z - _2087;
                                float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                                float _2975 = inversesqrt(_2972);
                                float _2976 = _2975 * _2969;
                                float _2977 = _2975 * _2970;
                                float _2978 = _2975 * _2971;
                                float _2982 = 1.0 - (_2972 / (_2837 * _2837));
                                float _3882 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                                float _2987 = sqrt(_2972) * _2852.w;
                                float _2989 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                                float _2990 = _2989 * _2989;
                                float _2993 = ((1.0 - _2990) * dot(vec3(_2976, _2977, _2978), vec3(_711, _714, _717))) + _2990;
                                float _2996 = _2987 * _2987;
                                float _3000 = (fma(_2087, _2879.z, fma(_2086, _2879.y, _2879.x * _2085)) + _2879.w) / _2941;
                                float _3001 = (fma(_2087, _2894.z, fma(_2086, _2894.y, _2894.x * _2085)) + _2894.w) / _2941;
                                float _3005 = 1.0 - dot(vec2(_3000, _3001), vec2(_3000, _3001));
                                float _3898 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                                float _3007 = _3006 * (((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2983) / ((_2996 * 0.699999988079071044921875) + 1.0));
                                float _3019 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                                float _3020 = 1.0 - _771;
                                float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                                float _3028 = _3027 * _3027;
                                float _3029 = _3028 * _3028;
                                float _3030 = _2976 - _2407;
                                float _3031 = _2977 - _2408;
                                float _3032 = _2978 - _2409;
                                float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                                float _3040 = dot(vec3(_711, _714, _717), vec3((-0.0) - _2407, (-0.0) - _2408, (-0.0) - _2409));
                                float _3909 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                                float _3044 = dot(vec3(_711, _714, _717), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                                float _3920 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                                float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                                float _3052 = _2989 * _3028;
                                float _3053 = _3052 * _3052;
                                float _3059 = ((1.0 - _3053) * dot(vec3(_711, _714, _717), vec3(_2976, _2977, _2978))) + _3053;
                                float _3931 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _3061 = 1.0 - _3028;
                                float _3071 = (0.5 / (((_3060 * ((_3043 * _3061) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3028) * _3043))) * _3060;
                                float _3942 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3081 = (_3006 * _2983) * (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) / ((_3051 * _3051) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_67_pred = _3007 * _2852.z;
                                frontier_phi_67_pred_1 = _3007 * _2852.y;
                                frontier_phi_67_pred_2 = _3007 * _2852.x;
                                frontier_phi_67_pred_3 = _3081 * _2864.z;
                                frontier_phi_67_pred_4 = _3081 * _2864.y;
                                frontier_phi_67_pred_5 = _3081 * _2864.x;
                            }
                            else
                            {
                                frontier_phi_67_pred = 0.0;
                                frontier_phi_67_pred_1 = 0.0;
                                frontier_phi_67_pred_2 = 0.0;
                                frontier_phi_67_pred_3 = 0.0;
                                frontier_phi_67_pred_4 = 0.0;
                                frontier_phi_67_pred_5 = 0.0;
                            }
                            _3090 = frontier_phi_67_pred;
                            _3089 = frontier_phi_67_pred_1;
                            _3088 = frontier_phi_67_pred_2;
                            _3087 = frontier_phi_67_pred_3;
                            _3086 = frontier_phi_67_pred_4;
                            _3085 = frontier_phi_67_pred_5;
                            _2794 = _3088 + _2807;
                            _2795 = _3089 + _2808;
                            _2796 = _3090 + _2809;
                            _2791 = _3085 + _2804;
                            _2792 = _3086 + _2805;
                            _2793 = _3087 + _2806;
                            if (_2811 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2811;
                                continue;
                            }
                        }
                        frontier_phi_61_pred = _2796;
                        frontier_phi_61_pred_1 = _2795;
                        frontier_phi_61_pred_2 = _2794;
                        frontier_phi_61_pred_3 = _2793;
                        frontier_phi_61_pred_4 = _2792;
                        frontier_phi_61_pred_5 = _2791;
                    }
                    _2392 = frontier_phi_61_pred;
                    _2390 = frontier_phi_61_pred_1;
                    _2388 = frontier_phi_61_pred_2;
                    _2386 = frontier_phi_61_pred_3;
                    _2384 = frontier_phi_61_pred_4;
                    _2382 = frontier_phi_61_pred_5;
                    uint _2578 = _2577 + 1u;
                    if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2571 = _2382;
                        _2572 = _2384;
                        _2573 = _2386;
                        _2574 = _2388;
                        _2575 = _2390;
                        _2576 = _2392;
                        _2577 = _2578;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2392;
                frontier_phi_43_44_ladder_1 = _2388;
                frontier_phi_43_44_ladder_2 = _2390;
                frontier_phi_43_44_ladder_3 = _2386;
                frontier_phi_43_44_ladder_4 = _2384;
                frontier_phi_43_44_ladder_5 = _2382;
            }
            else
            {
                frontier_phi_43_44_ladder = _2247;
                frontier_phi_43_44_ladder_1 = _2243;
                frontier_phi_43_44_ladder_2 = _2245;
                frontier_phi_43_44_ladder_3 = _2241;
                frontier_phi_43_44_ladder_4 = _2239;
                frontier_phi_43_44_ladder_5 = _2237;
            }
            _2381 = frontier_phi_43_44_ladder_5;
            _2383 = frontier_phi_43_44_ladder_4;
            _2385 = frontier_phi_43_44_ladder_3;
            _2387 = frontier_phi_43_44_ladder_1;
            _2389 = frontier_phi_43_44_ladder_2;
            _2391 = frontier_phi_43_44_ladder;
        }
        float _2396 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2143 = (_2396 * _2387) + _1871;
        _2145 = (_2396 * _2389) + _1872;
        _2147 = (_2396 * _2391) + _1873;
        _2149 = ((_2381 * 0.039999999105930328369140625) * _2396) + _2027;
        _2151 = ((_2383 * 0.039999999105930328369140625) * _2396) + _2028;
        _2153 = ((_2385 * 0.039999999105930328369140625) * _2396) + _2029;
    }
    else
    {
        _2143 = _1871;
        _2145 = _1872;
        _2147 = _1873;
        _2149 = _2027;
        _2151 = _2028;
        _2153 = _2029;
    }
    uint _2159 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _3958 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3969 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3980 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2184 = (((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2143 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _755))) + ((_2149 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[13u].y * _617) * cbInstanceData._m0[_2159].x);
    float _2186 = (((cbMtdParam._m0[13u].y * _619) * cbInstanceData._m0[_2159].y) + ((_2151 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_2145 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _755)));
    float _2188 = (((cbMtdParam._m0[13u].y * _621) * cbInstanceData._m0[_2159].z) + ((_2153 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2147 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _755)));
    uint _2192 = _730 + 6u;
    float _2200 = _690 / cbSceneParam._m0[86u].x;
    float _2201 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2215 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2200, _2201, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2217 = _2215.x;
    float _2218 = _2215.y;
    float _2219 = _2215.z;
    float _2220 = _2215.w;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2262 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2263 = _2262 / _684;
        float _2274 = _2263 * _283;
        float _2275 = _284 * _2263;
        float _2276 = (-0.0) - _2275;
        float _2277 = _2263 * _285;
        float _2279 = (cbSceneParam._m0[77u].w * _2276) / _2262;
        float _2280 = _2279 + cbSceneParam._m0[79u].w;
        float _2281 = cbSceneParam._m0[79u].w - _2275;
        float _2287 = sqrt(((_2274 * _2274) + (_2275 * _2275)) + (_2277 * _2277));
        float _2290 = (1.0 - (cbSceneParam._m0[77u].w / _2262)) * _2287;
        float _2296 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2298 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2507;
        if (abs((_2276 - _2279) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2507 = ((((_2280 > 0.0) ? exp2(_2296 * _2280) : (2.0 - exp2(_2298 * _2280))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2290;
        }
        else
        {
            float _2442 = 1.0 / cbSceneParam._m0[80u].x;
            float _2443 = isnan(_2281) ? _2280 : (isnan(_2280) ? _2281 : max(_2280, _2281));
            float _2444 = isnan(_2281) ? _2280 : (isnan(_2280) ? _2281 : min(_2280, _2281));
            float _2453 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : min(_2443, 0.0));
            float _2454 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : min(_2444, 0.0));
            _2507 = ((abs(_2287 / _2276) * cbSceneParam._m0[80u].y) * ((((_2453 - _2454) * 2.0) - ((exp2(_2296 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)))) - exp2(_2296 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0))))) * _2442)) - ((exp2(_2298 * _2453) - exp2(_2298 * _2454)) * _2442))) + (_2290 * cbSceneParam._m0[80u].z);
        }
        vec4 _2509 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2200, _2201, 1.0), 0.0);
        float _2518 = exp2((_2507 * (-1.44269502162933349609375)) * (1.0 - _2509.w));
        float _2519 = log2(_2518);
        float _2535 = log2(_2220);
        _2300 = (exp2(_2535 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].x)) * _2509.x) / cbSceneParam._m0[78u].x)) + _2217;
        _2302 = (exp2(_2535 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].y)) * _2509.y) / cbSceneParam._m0[78u].y)) + _2218;
        _2304 = (exp2(_2535 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].z)) * _2509.z) / cbSceneParam._m0[78u].z)) + _2219;
        _2306 = _2518 * _2220;
    }
    else
    {
        _2300 = _2217;
        _2302 = _2218;
        _2304 = _2219;
        _2306 = _2220;
    }
    float _2318 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2319 = _2318 == 3.0;
    float _2320 = log2(_2306);
    float _2327 = exp2(_2320 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0)));
    float _2328 = exp2(_2320 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0)));
    float _2329 = exp2(_2320 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0)));
    float _2338 = (_2318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2338 * (_2319 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.y = _2338 * (_2319 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.z = _2338 * (_2319 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2304)));
    SV_Target.w = cbInstanceData._m0[_2192].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2192].w;
}


