#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 52) uniform texture2D g_ScreenSpaceShadowTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1119;
float _3318;
float _3319;
float _3320;
float _3321;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _203 = _202 * _195;
    float _204 = _202 * _196;
    float _205 = _202 * _197;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _297 = cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y;
    float _300 = (sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275)) - cbMtdParam._m0[14u].y) / (isnan(0.001000000047497451305389404296875) ? _297 : (isnan(_297) ? 0.001000000047497451305389404296875 : max(_297, 0.001000000047497451305389404296875)));
    float _301 = _300 / cbMtdParam._m0[15u].y;
    float _3335 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _306 = cbMtdParam._m0[15u].z * (1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))));
    float _315 = (cbMtdParam._m0[13u].x + _300) * cbMtdParam._m0[13u].y;
    float _3346 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _319 = ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    vec4 _332 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = (_332.x * 2.0) + (-1.0);
    float _342 = (_332.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3357 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))));
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _373 = ((_362 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _374 = 1.0 - ((_363 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _376 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_362, _363), 0.0);
    float _378 = _376.x;
    float _419 = fma(_378, cbSceneParam._m0[15u].z, fma(_374, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _373)) + cbSceneParam._m0[15u].w;
    float _420 = (fma(_378, cbSceneParam._m0[12u].z, fma(_374, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _373)) + cbSceneParam._m0[12u].w) / _419;
    float _421 = (fma(_378, cbSceneParam._m0[13u].z, fma(_374, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _373)) + cbSceneParam._m0[13u].w) / _419;
    float _422 = (fma(_378, cbSceneParam._m0[14u].z, fma(_374, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _373)) + cbSceneParam._m0[14u].w) / _419;
    float _454 = 1.0 / cbMtdParam._m0[12u].y;
    float _455 = ((fma(_422, cbSceneParam._m0[20u].z, fma(_421, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _420)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) * _454;
    float _456 = _454 * ((fma(_422, cbSceneParam._m0[22u].z, fma(_421, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _420)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z);
    float _457 = _455 * cbMtdParam._m0[16u].z;
    float _458 = _456 * cbMtdParam._m0[16u].w;
    float _472 = cbMtdParam._m0[15u].w * cbMtdParam._m0[16u].x;
    vec4 _485 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x)) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y)) + cbTextureTilingScale._m0[2u].w));
    float _490 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].w;
    float _493 = (_485.x * 0.5) + (-0.25);
    float _496 = (_485.y * 0.5) + (-0.25);
    float _497 = _496 * _472;
    float _499 = (-0.0) - (_472 * _493);
    float _501 = fract(_490);
    float _503 = fract(_490 + 0.5);
    float _514 = abs((_501 * 2.0) + (-1.0));
    vec4 _530 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_501 * _499) + _457) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_497 * _501) + _458) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _532 = _530.x;
    vec4 _533 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_503 * _499) + _457) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_497 * _503) + _458) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _538 = _496 * cbMtdParam._m0[16u].x;
    float _540 = (-0.0) - (cbMtdParam._m0[16u].x * _493);
    vec4 _557 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_501 * _540) + _455) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_538 * _501) + _456) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _559 = _557.x;
    vec4 _560 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_503 * _540) + _455) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_538 * _503) + _456) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _568 = (((((_533.x - _532) * _514) + _532) + _559) + ((_560.x - _559) * _514)) * cbMtdParam._m0[11u].w;
    float _574 = (cbMtdParam._m0[13u].w + _300) * cbMtdParam._m0[13u].z;
    float _3368 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _576 = (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * cbMtdParam._m0[12u].w;
    float _3379 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _589 = isnan(cbInstanceData._m0[8u].x) ? _362 : (isnan(_362) ? cbInstanceData._m0[8u].x : max(_362, cbInstanceData._m0[8u].x));
    float _590 = isnan(cbInstanceData._m0[8u].y) ? _363 : (isnan(_363) ? cbInstanceData._m0[8u].y : max(_363, cbInstanceData._m0[8u].y));
    vec4 _594 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _589 : (isnan(_589) ? cbInstanceData._m0[8u].z : min(_589, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _590 : (isnan(_590) ? cbInstanceData._m0[8u].w : min(_590, cbInstanceData._m0[8u].w))));
    float _608 = (POSITION_1.w - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[16u].y);
    float _3410 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = 1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)));
    float _623 = fma(_348, _209 * NORMAL.x, fma(_342, _216 * TANGENT.x, _340 * _203));
    float _626 = fma(_348, _209 * NORMAL.y, fma(_342, _216 * TANGENT.y, _340 * _204));
    float _629 = fma(_348, _209 * NORMAL.z, fma(_342, _216 * TANGENT.z, _340 * _205));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    float _634 = _633 * _623;
    float _635 = _633 * _626;
    float _636 = _633 * _629;
    float _3421 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3432 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _638 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3454 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3465 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _662 = _273 * _661;
    float _663 = _274 * _661;
    float _664 = _275 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_636, cbSceneParam._m0[5u].z, fma(_635, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _634));
    float _701 = fma(_636, cbSceneParam._m0[6u].z, fma(_635, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _634));
    float _704 = fma(_636, cbSceneParam._m0[7u].z, fma(_635, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _634));
    uint _717 = uint(roundEven(NORMAL.w)) * 13u;
    uint _718 = _717 + 9u;
    uint _719 = _718 + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3476 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _741 = _738.x * TEXCOORD.z;
    float _742 = dot(vec3(_634, _635, _636), vec3(_662, _663, _664));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _634) - _662;
    float _750 = (_745 * _635) - _663;
    float _751 = (_745 * _636) - _664;
    float _755 = abs(dot(vec3(_662, _663, _664), vec3(_634, _635, _636)));
    float _3509 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _765 = sqrt(_638);
    float _777 = exp2((_765 * 5.0) * log2(1.0 - (_756 * 0.999000012874603271484375))) / (4.0 - (_765 * 3.0));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _848 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _852 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _876 = _809 + _634;
        float _877 = _813 + _635;
        float _878 = _817 + _636;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _844;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _848;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _852;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_634, _635, _636), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3557 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_634, _635, _636), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3590 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_634, _635, _636), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3623 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1159 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1163 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1167 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1190 = _809 + _634;
        float _1191 = _813 + _635;
        float _1192 = _817 + _636;
        float _1202 = fma(_1192, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190)) - _1159;
        float _1203 = fma(_1192, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190)) - _1163;
        float _1204 = fma(_1192, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190)) - _1167;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1159 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1163 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[35u].z) + ((((((_1167 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1258 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1225.x + (-0.5));
        float _1260 = _1258 * (_1225.y + (-0.5));
        float _1261 = _1258 * (_1225.z + (-0.5));
        float _1268 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1232.x + (-0.5));
        float _1270 = _1268 * (_1232.y + (-0.5));
        float _1271 = _1268 * (_1232.z + (-0.5));
        float _1278 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1239.x + (-0.5));
        float _1280 = _1278 * (_1239.y + (-0.5));
        float _1281 = _1278 * (_1239.z + (-0.5));
        float _1288 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1246.x + (-0.5));
        float _1290 = _1288 * (_1246.y + (-0.5));
        float _1291 = _1288 * (_1246.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_634, _635, _636), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3686 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1322 + 1.0))) + _1327) * _1292;
        float _1337 = _1260 * 0.5;
        float _1338 = _1270 * 0.5;
        float _1339 = _1280 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_634, _635, _636), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3719 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1364 + 1.0))) + _1369) * _1293;
        float _1379 = _1261 * 0.5;
        float _1380 = _1271 * 0.5;
        float _1381 = _1281 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_634, _635, _636), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3752 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1406 + 1.0))) + _1411) * _1294;
        _1428 = _1261;
        _1429 = _1260;
        _1430 = _1259;
        _1431 = _1271;
        _1432 = _1270;
        _1433 = _1269;
        _1434 = _1281;
        _1435 = _1280;
        _1436 = _1279;
        _1437 = _1294;
        _1438 = _1293;
        _1439 = _1292;
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1119;
        _1429 = _1119;
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = _1119;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1131)) + _1131;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1132)) + _1132;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1133)) + _1133;
    float _1475 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1452));
    float _1496 = _749 * 0.5;
    float _1497 = _750 * 0.5;
    float _1498 = _751 * 0.5;
    float _1499 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1502 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1505 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1539;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1512 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1516 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1520 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1527 = dot(vec4(cbModelParam._m0[39u]), vec4(_1496, _1497, _1498, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1550;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1541 = dot(vec4(cbModelParam._m0[40u]), vec4(_1496, _1497, _1498, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1554 = (_1550 * cbModelParam._m0[1u].x) + (_1539 * (1.0 - cbModelParam._m0[1u].x));
    float _1564 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1564 : min(cbModelParam._m0[25u].z, _1564));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1626 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1629 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1657 = frontier_phi_14_12_ladder;
        }
        float _1924;
        if (_1626 > 0.0)
        {
            _1924 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1924 = frontier_phi_23_19_ladder;
        }
        float _2414;
        if (_1629 > 0.0)
        {
            _2414 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2414 = frontier_phi_37_30_ladder;
        }
        float _2416 = isnan(_1924) ? _1657 : (isnan(_1657) ? _1924 : min(_1657, _1924));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1623) + _1612;
        float _2422 = (_2417 * _1626) + _1616;
        float _2423 = (_2417 * _1629) + _1620;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2424;
        float _2427 = _2424 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2423 > _2427) || ((_2423 < _2425) || ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 < _2425) || (_2421 > _2427))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1565);
            frontier_phi_13_37_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_13_37_ladder_2;
        _1647 = frontier_phi_13_37_ladder_1;
        _1649 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1565);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1708 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1712 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1716 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1719 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1722 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1725 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _1929;
        if (_1719 > 0.0)
        {
            _1929 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1929 = frontier_phi_25_21_ladder;
        }
        float _2440;
        if (_1722 > 0.0)
        {
            _2440 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2440 = frontier_phi_39_32_ladder;
        }
        float _2631;
        if (_1725 > 0.0)
        {
            _2631 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_57_50_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_57_50_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_57_50_ladder = 5000.0;
            }
            _2631 = frontier_phi_57_50_ladder;
        }
        float _2633 = isnan(_2440) ? _1929 : (isnan(_1929) ? _2440 : min(_1929, _2440));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1719) + _1708;
        float _2639 = (_2634 * _1722) + _1712;
        float _2640 = (_2634 * _1725) + _1716;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_22_57_ladder;
        float frontier_phi_22_57_ladder_1;
        float frontier_phi_22_57_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_22_57_ladder = 0.0;
            frontier_phi_22_57_ladder_1 = 0.0;
            frontier_phi_22_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_22_57_ladder = _2884.x * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_1 = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_2 = _2884.y * cbModelParam._m0[1u].z;
        }
        _1744 = frontier_phi_22_57_ladder;
        _1746 = frontier_phi_22_57_ladder_2;
        _1748 = frontier_phi_22_57_ladder_1;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1654);
        _1744 = _1728.x * cbModelParam._m0[1u].z;
        _1746 = _1728.y * cbModelParam._m0[1u].z;
        _1748 = _1728.z * cbModelParam._m0[1u].z;
    }
    float _1760 = ((((1.0 - _777) * ((_765 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_777 * _765)) * _741;
    float _1761 = _1760 * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1762 = _1760 * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1763 = _1760 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1766 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1761 * cbSceneParam._m0[91u].x));
    vec4 _1780 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_676, _677));
    float _1782 = _1780.w;
    float _1794 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1782);
    float _1795 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1782);
    float _1796 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1782);
    uvec4 _1800 = floatBitsToUint(cbInstanceData._m0[_717 + 5u]);
    uint _1802 = _1800.x * 14u;
    float _1809 = (cbLight._m0[_1802 + 13u].x * (_741 + (-1.0))) + 1.0;
    uint _1810 = _1802 + 4u;
    float _1820 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_634, _635, _636));
    float _3883 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1810].x * _1794) * _1820) * _1833;
    float _1836 = ((cbLight._m0[_1810].y * _1795) * _1820) * _1833;
    float _1837 = ((cbLight._m0[_1810].z * _1796) * _1820) * _1833;
    uint _1839 = _1802 + 8u;
    float _1852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _638) * 0.949999988079071044921875);
    float _1853 = _1852 * _1852;
    float _1854 = cbLight._m0[_1802].x + _662;
    float _1855 = cbLight._m0[_1802].y + _663;
    float _1856 = cbLight._m0[_1802].z + _664;
    float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
    float _1861 = _1860 * _1854;
    float _1862 = _1860 * _1855;
    float _1863 = _1860 * _1856;
    float _1864 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1802].xyz));
    float _3894 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _1868 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1869 = dot(vec3(_634, _635, _636), vec3(_1861, _1862, _1863));
    float _3916 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_1861, _1862, _1863));
    float _3927 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1853 * _1853;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1892 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1893 = 1.0 - _1853;
    float _1904 = (0.5 / (((_1868 * ((_1867 * _1893) + _1853)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1893) + _1853) * _1867))) * _1867;
    float _3938 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1910 = (((cbLight._m0[_1839].x * _1794) * _1892) * _1906) * _1820;
    float _1914 = (((cbLight._m0[_1839].y * _1795) * _1892) * _1906) * _1820;
    float _1918 = (((cbLight._m0[_1839].z * _1796) * _1892) * _1906) * _1820;
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    if (_1800.y == 0u)
    {
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1973;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1973;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1973;
        uvec4 _1988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1989 = _1988.x;
        uint _2000 = uint((float(_1988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _1989))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _1989)));
        float _2010 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2011 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        uint _2014 = uint(isnan(14.0) ? _2011 : (isnan(_2011) ? 14.0 : min(_2011, 14.0)));
        uvec4 _2019 = texelFetch(g_lightClusterGridBuffer, int(((_2014 << 2u) + (_2000 << 6u)) >> 2u));
        uint _2020 = _2019.x;
        uint _2021 = _1988.z;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        if (((((1u << ((_2021 >> 4u) & 15u)) + 4294967295u) & _2020) == 0u) || ((_2021 & 240u) == 0u))
        {
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
            _2268 = 0.0;
            _2270 = 0.0;
            _2272 = 0.0;
        }
        else
        {
            float _2263;
            float _2265;
            float _2267;
            float _2269;
            float _2271;
            float _2273;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            uint _2483 = 0u;
            uint _2492;
            bool _2493;
            for (;;)
            {
                _2492 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                _2493 = _2492 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2493)
                {
                    frontier_phi_52_pred = _2481;
                    frontier_phi_52_pred_1 = _2482;
                    frontier_phi_52_pred_2 = _2480;
                    frontier_phi_52_pred_3 = _2479;
                    frontier_phi_52_pred_4 = _2478;
                    frontier_phi_52_pred_5 = _2477;
                }
                else
                {
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    uint _2680;
                    _2674 = _2477;
                    _2675 = _2478;
                    _2676 = _2479;
                    _2677 = _2480;
                    _2678 = _2481;
                    _2679 = _2482;
                    _2680 = _2492;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2684 = uint(findLSB(_2680)) + (_2483 << 5u);
                        uint _2681 = (_2680 + 4294967295u) & _2680;
                        uint _2686 = _2684 * 48u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2706 = (_2684 * 48u) + 4u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2725 = (_2684 * 48u) + 8u;
                        vec3 _2736 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x));
                        float _2740 = _2700.x - _1974;
                        float _2741 = _2700.y - _1975;
                        float _2742 = _2700.z - _1976;
                        float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                        float _2746 = inversesqrt(_2743);
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2750 = dot(vec3(_698, _701, _704), vec3(_2747, _2748, _2749));
                        float _2755 = 1.0 - (_2743 * _2700.w);
                        float _3959 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2756 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2757 = sqrt(_2743) * _2719.w;
                        float _2760 = 1.39999997615814208984375 / (_2757 + 1.39999997615814208984375);
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * _2750) + _2761;
                        float _2767 = _2757 * _2757;
                        float _2771 = ((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2756) / ((_2767 * 0.699999988079071044921875) + 1.0);
                        float _2775 = (-0.0) - _1974;
                        float _2776 = (-0.0) - _1975;
                        float _2777 = (-0.0) - _1976;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2792 = exp2(log2(1.0 / ((_2767 * 3.5) + 5.0)) * 0.25);
                        float _2793 = 1.0 - _765;
                        float _2800 = sqrt(1.0 - ((1.0 - (_2793 * _2793)) * (1.0 - (_2792 * _2792))));
                        float _2801 = _2800 * _2800;
                        float _2802 = _2801 * _2801;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2813 = dot(vec3(_698, _701, _704), vec3(_2782, _2783, _2784));
                        float _3975 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2817 = dot(vec3(_698, _701, _704), vec3(_2809 * _2803, _2809 * _2804, _2809 * _2805));
                        float _3986 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2824 = ((_2820 * _2820) * (_2802 + (-1.0))) + 1.0;
                        float _2825 = _2760 * _2801;
                        float _2826 = _2825 * _2825;
                        float _2829 = ((1.0 - _2826) * _2750) + _2826;
                        float _3997 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2831 = 1.0 - _2801;
                        float _2841 = (0.5 / (((_2830 * ((_2816 * _2831) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _2831) + _2801) * _2816))) * _2830;
                        float _4008 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2852 = (((_2802 * 3.1415927410125732421875) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) / ((_2824 * _2824) * ((_2767 * 2.1991131305694580078125) + 3.141590118408203125))) * _2756;
                        _2577 = (_2771 * _2719.x) + _2677;
                        _2578 = (_2771 * _2719.y) + _2678;
                        _2579 = (_2771 * _2719.z) + _2679;
                        _2574 = (_2852 * _2736.x) + _2674;
                        _2575 = (_2852 * _2736.y) + _2675;
                        _2576 = (_2852 * _2736.z) + _2676;
                        if (_2681 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2674 = _2574;
                            _2675 = _2575;
                            _2676 = _2576;
                            _2677 = _2577;
                            _2678 = _2578;
                            _2679 = _2579;
                            _2680 = _2681;
                        }
                    }
                    frontier_phi_52_pred = _2578;
                    frontier_phi_52_pred_1 = _2579;
                    frontier_phi_52_pred_2 = _2577;
                    frontier_phi_52_pred_3 = _2576;
                    frontier_phi_52_pred_4 = _2575;
                    frontier_phi_52_pred_5 = _2574;
                }
                _2271 = frontier_phi_52_pred;
                _2273 = frontier_phi_52_pred_1;
                _2269 = frontier_phi_52_pred_2;
                _2267 = frontier_phi_52_pred_3;
                _2265 = frontier_phi_52_pred_4;
                _2263 = frontier_phi_52_pred_5;
                uint _2484 = _2483 + 1u;
                if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2477 = _2263;
                    _2478 = _2265;
                    _2479 = _2267;
                    _2480 = _2269;
                    _2481 = _2271;
                    _2482 = _2273;
                    _2483 = _2484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
            _2268 = _2269;
            _2270 = _2271;
            _2272 = _2273;
        }
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.z;
        uint _2279 = (_2277 >> 8u) & 15u;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((4294967295u << _2279) & _2020) == 0u)
        {
            _2445 = _2262;
            _2447 = _2264;
            _2449 = _2266;
            _2451 = _2268;
            _2453 = _2270;
            _2455 = _2272;
        }
        else
        {
            float _2470 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _2471 = _2470 * _1974;
            float _2472 = _2470 * _1975;
            float _2473 = _2470 * _1976;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2279 < ((_2277 >> 12u) & 15u))
            {
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2657 = _2262;
                float _2658 = _2264;
                float _2659 = _2266;
                float _2660 = _2268;
                float _2661 = _2270;
                float _2662 = _2272;
                uint _2663 = _2279;
                uint _2672;
                bool _2673;
                for (;;)
                {
                    _2672 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                    _2673 = _2672 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2673)
                    {
                        frontier_phi_66_pred = _2662;
                        frontier_phi_66_pred_1 = _2661;
                        frontier_phi_66_pred_2 = _2660;
                        frontier_phi_66_pred_3 = _2659;
                        frontier_phi_66_pred_4 = _2658;
                        frontier_phi_66_pred_5 = _2657;
                    }
                    else
                    {
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _2902 = _2657;
                        float _2903 = _2658;
                        float _2904 = _2659;
                        float _2905 = _2660;
                        float _2906 = _2661;
                        float _2907 = _2662;
                        uint _2908 = _2672;
                        uint _2909;
                        vec4 _2934;
                        float _2935;
                        vec4 _2950;
                        vec3 _2962;
                        vec4 _2977;
                        vec4 _2992;
                        float _3039;
                        bool _3040;
                        for (;;)
                        {
                            uint _2919 = ((_2663 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2908));
                            _2909 = (_2908 + 4294967295u) & _2908;
                            uint _2921 = _2919 * 40u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            _2935 = _2934.w;
                            uint _2937 = (_2919 * 40u) + 4u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2952 = (_2919 * 40u) + 8u;
                            _2962 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x));
                            uint _2964 = (_2919 * 40u) + 16u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2919 * 40u) + 20u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2995 = (_2919 * 40u) + 24u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3014 = (_2919 * 40u) + 28u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3039 = fma(_1976, _3027.z, fma(_1975, _3027.y, _3027.x * _1974)) + _3027.w;
                            _3040 = !((fma(_1976, _3008.z, fma(_1975, _3008.y, _3008.x * _1974)) + _3008.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3040)
                            {
                                float _3067 = _2934.x - _1974;
                                float _3068 = _2934.y - _1975;
                                float _3069 = _2934.z - _1976;
                                float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                                float _3073 = inversesqrt(_3070);
                                float _3074 = _3073 * _3067;
                                float _3075 = _3073 * _3068;
                                float _3076 = _3073 * _3069;
                                float _3080 = 1.0 - (_3070 / (_2935 * _2935));
                                float _4019 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3085 = sqrt(_3070) * _2950.w;
                                float _3087 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                                float _3088 = _3087 * _3087;
                                float _3091 = ((1.0 - _3088) * dot(vec3(_3074, _3075, _3076), vec3(_698, _701, _704))) + _3088;
                                float _3094 = _3085 * _3085;
                                float _3098 = (fma(_1976, _2977.z, fma(_1975, _2977.y, _2977.x * _1974)) + _2977.w) / _3039;
                                float _3099 = (fma(_1976, _2992.z, fma(_1975, _2992.y, _2992.x * _1974)) + _2992.w) / _3039;
                                float _3103 = 1.0 - dot(vec2(_3098, _3099), vec2(_3098, _3099));
                                float _4035 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3105 = _3104 * (((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3081) / ((_3094 * 0.699999988079071044921875) + 1.0));
                                float _3117 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                                float _3118 = 1.0 - _765;
                                float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                                float _3126 = _3125 * _3125;
                                float _3127 = _3126 * _3126;
                                float _3128 = _3074 - _2471;
                                float _3129 = _3075 - _2472;
                                float _3130 = _3076 - _2473;
                                float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                                float _3138 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2471, (-0.0) - _2472, (-0.0) - _2473));
                                float _4046 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3142 = dot(vec3(_698, _701, _704), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                                float _4057 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3145 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                                float _3150 = _3087 * _3126;
                                float _3151 = _3150 * _3150;
                                float _3157 = ((1.0 - _3151) * dot(vec3(_698, _701, _704), vec3(_3074, _3075, _3076))) + _3151;
                                float _4068 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3159 = 1.0 - _3126;
                                float _3169 = (0.5 / (((_3158 * ((_3141 * _3159) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3126) * _3141))) * _3158;
                                float _4079 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3179 = (_3104 * _3081) * (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) / ((_3149 * _3149) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _3105 * _2950.x;
                                frontier_phi_72_pred_1 = _3105 * _2950.z;
                                frontier_phi_72_pred_2 = _3105 * _2950.y;
                                frontier_phi_72_pred_3 = _3179 * _2962.z;
                                frontier_phi_72_pred_4 = _3179 * _2962.y;
                                frontier_phi_72_pred_5 = _3179 * _2962.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3186 = frontier_phi_72_pred;
                            _3188 = frontier_phi_72_pred_1;
                            _3187 = frontier_phi_72_pred_2;
                            _3185 = frontier_phi_72_pred_3;
                            _3184 = frontier_phi_72_pred_4;
                            _3183 = frontier_phi_72_pred_5;
                            _2892 = _3186 + _2905;
                            _2893 = _3187 + _2906;
                            _2894 = _3188 + _2907;
                            _2889 = _3183 + _2902;
                            _2890 = _3184 + _2903;
                            _2891 = _3185 + _2904;
                            if (_2909 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2909;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2894;
                        frontier_phi_66_pred_1 = _2893;
                        frontier_phi_66_pred_2 = _2892;
                        frontier_phi_66_pred_3 = _2891;
                        frontier_phi_66_pred_4 = _2890;
                        frontier_phi_66_pred_5 = _2889;
                    }
                    _2456 = frontier_phi_66_pred;
                    _2454 = frontier_phi_66_pred_1;
                    _2452 = frontier_phi_66_pred_2;
                    _2450 = frontier_phi_66_pred_3;
                    _2448 = frontier_phi_66_pred_4;
                    _2446 = frontier_phi_66_pred_5;
                    uint _2664 = _2663 + 1u;
                    if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2657 = _2446;
                        _2658 = _2448;
                        _2659 = _2450;
                        _2660 = _2452;
                        _2661 = _2454;
                        _2662 = _2456;
                        _2663 = _2664;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2448;
                frontier_phi_41_42_ladder_1 = _2456;
                frontier_phi_41_42_ladder_2 = _2454;
                frontier_phi_41_42_ladder_3 = _2452;
                frontier_phi_41_42_ladder_4 = _2450;
                frontier_phi_41_42_ladder_5 = _2446;
            }
            else
            {
                frontier_phi_41_42_ladder = _2264;
                frontier_phi_41_42_ladder_1 = _2272;
                frontier_phi_41_42_ladder_2 = _2270;
                frontier_phi_41_42_ladder_3 = _2268;
                frontier_phi_41_42_ladder_4 = _2266;
                frontier_phi_41_42_ladder_5 = _2262;
            }
            _2445 = frontier_phi_41_42_ladder_5;
            _2447 = frontier_phi_41_42_ladder;
            _2449 = frontier_phi_41_42_ladder_4;
            _2451 = frontier_phi_41_42_ladder_3;
            _2453 = frontier_phi_41_42_ladder_2;
            _2455 = frontier_phi_41_42_ladder_1;
        }
        float _2460 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2033 = (_2460 * _2451) + _1835;
        _2035 = (_2460 * _2453) + _1836;
        _2037 = (_2460 * _2455) + _1837;
        _2039 = ((_2445 * 0.039999999105930328369140625) * _2460) + _1910;
        _2041 = ((_2447 * 0.039999999105930328369140625) * _2460) + _1914;
        _2043 = ((_2449 * 0.039999999105930328369140625) * _2460) + _1918;
    }
    else
    {
        _2033 = _1835;
        _2035 = _1836;
        _2037 = _1837;
        _2039 = _1910;
        _2041 = _1914;
        _2043 = _1918;
    }
    float _2063 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2064 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2065 = cbSceneParam._m0[86u].x * ((_676 / cbSceneParam._m0[86u].x) + (((10.0 / (_657 + 10.0)) * cbMtdParam._m0[12u].z) * dot(vec3(_634, _635, _636), vec3(_203, _204, _205))));
    float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
    float _2067 = isnan(_2064) ? _677 : (isnan(_677) ? _2064 : min(_677, _2064));
    vec4 _2069 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2066, _2067), 0.0);
    float _2071 = _2069.x;
    bool _2091 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2071)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2071))) > _657;
    float _2092 = _2091 ? _2066 : _676;
    float _2093 = _2091 ? _2067 : _677;
    vec4 _2095 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2092, _2093));
    vec4 _2101 = texture(sampler2D(g_ScreenSpaceShadowTexture, SS_WrapLinear), vec2(_2092, _2093));
    float _2103 = _2101.w;
    vec4 _2131 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2092, _2093));
    float _2133 = _2131.x;
    float _2153 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2133)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2133))) - _657;
    bool _2163 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2167 = (isnan(_2153) ? 0.0 : (isnan(0.0) ? _2153 : max(0.0, _2153))) * (-1.44269502162933349609375);
    float _4110 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4121 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4132 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _2194 = 0.959999978542327880859375 - (exp2(log2(1.0 - _756) * 5.0) * 0.959999978542327880859375);
    float _2197 = ((((((((((cbMtdParam._m0[10u].x * _568) * _594.x) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _610) * _2103) * cbSceneParam._m0[72u].z) + _2095.x) * _2194) * exp2(_2167 * (_2163 ? 0.0 : (cbMtdParam._m0[18u].y + cbMtdParam._m0[17u].z)))) * cbSceneParam._m0[72u].w;
    float _2200 = ((((((((((cbMtdParam._m0[10u].y * _568) * _594.y) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _610) * _2103) * cbSceneParam._m0[72u].z) + _2095.y) * _2194) * exp2(_2167 * (_2163 ? 0.0 : (cbMtdParam._m0[18u].z + cbMtdParam._m0[17u].w)))) * cbSceneParam._m0[72u].w;
    float _2203 = ((((((((((cbMtdParam._m0[10u].z * _568) * _594.z) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _610) * _2103) * cbSceneParam._m0[72u].z) + _2095.z) * _2194) * exp2(_2167 * (_2163 ? 0.0 : (cbMtdParam._m0[18u].w + cbMtdParam._m0[18u].x)))) * cbSceneParam._m0[72u].w;
    float _2211 = (_2197 + ((_2039 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2033 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _741))) - _2197) * _577);
    float _2213 = (_2200 + ((_2041 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2035 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _741))) - _2200) * _577);
    float _2215 = (_2203 + ((_2043 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2037 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _741))) - _2203) * _577);
    float _2220 = cbInstanceData._m0[_717 + 6u].w * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)));
    float _2225 = _676 / cbSceneParam._m0[86u].x;
    float _2226 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2240 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2225, _2226, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2242 = _2240.x;
    float _2243 = _2240.y;
    float _2244 = _2240.z;
    float _2245 = _2240.w;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2287 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2288 = _2287 / _657;
        float _2299 = _2288 * _273;
        float _2300 = _274 * _2288;
        float _2301 = (-0.0) - _2300;
        float _2302 = _2288 * _275;
        float _2304 = (cbSceneParam._m0[77u].w * _2301) / _2287;
        float _2305 = _2304 + cbSceneParam._m0[79u].w;
        float _2306 = cbSceneParam._m0[79u].w - _2300;
        float _2312 = sqrt(((_2299 * _2299) + (_2300 * _2300)) + (_2302 * _2302));
        float _2315 = (1.0 - (cbSceneParam._m0[77u].w / _2287)) * _2312;
        float _2321 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2322 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2301 - _2304) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2305 > 0.0) ? exp2(_2321 * _2305) : (2.0 - exp2(_2322 * _2305))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2315;
        }
        else
        {
            float _2506 = 1.0 / cbSceneParam._m0[80u].x;
            float _2507 = isnan(_2306) ? _2305 : (isnan(_2305) ? _2306 : max(_2305, _2306));
            float _2508 = isnan(_2306) ? _2305 : (isnan(_2305) ? _2306 : min(_2305, _2306));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            _2587 = ((abs(_2312 / _2301) * cbSceneParam._m0[80u].y) * ((((_2517 - _2518) * 2.0) - ((exp2(_2321 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0)))) - exp2(_2321 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))))) * _2506)) - ((exp2(_2322 * _2517) - exp2(_2322 * _2518)) * _2506))) + (_2315 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2225, _2226, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2245);
        _2324 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2242;
        _2326 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2243;
        _2328 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2244;
        _2330 = _2598 * _2245;
    }
    else
    {
        _2324 = _2242;
        _2326 = _2243;
        _2328 = _2244;
        _2330 = _2245;
    }
    bool _2625;
    float _2385;
    vec4 _2388;
    float _2390;
    vec4 _2392;
    float _2400;
    float _2401;
    float _2402;
    float _2403;
    bool _2413;
    for (;;)
    {
        bool _2342 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2343 = log2(_2330);
        float _2350 = exp2(_2343 * cbSceneParam._m0[78u].x) * _2211;
        float _2351 = exp2(_2343 * cbSceneParam._m0[78u].y) * _2213;
        float _2352 = exp2(_2343 * cbSceneParam._m0[78u].z) * _2215;
        vec4 _2360 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_676, _677));
        float _2362 = _2360.x;
        float _2383 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2362)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2362))) - _657) * cbMtdParam._m0[11u].x;
        float _4183 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        _2385 = _2220 * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)));
        float _2386 = _671 + (-0.5);
        _2388 = cbMtdParam._m0[1u];
        _2390 = _2388.y * _2386;
        _2392 = cbMatDynParam._m0[0u];
        float _2399 = (roundEven(_2392.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2400 = _2399 * (_2342 ? _2350 : (_2350 + (cbSceneParam._m0[72u].w * _2324)));
        _2401 = _2399 * (_2342 ? _2351 : (_2351 + (cbSceneParam._m0[72u].w * _2326)));
        _2402 = _2399 * (_2342 ? _2352 : (_2352 + (cbSceneParam._m0[72u].w * _2328)));
        _2403 = _2386 * 0.999000012874603271484375;
        _2413 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2413)
        {
            if ((cbInstanceData._m0[_717 + 7u].x + _2403) < 0.5)
            {
                _2625 = true;
                break;
            }
        }
        uint _2541 = _718 + uint(_2392.w);
        if ((cbInstanceData._m0[_2541].w < 1.0) && ((cbInstanceData._m0[_2541].w + _2403) < 0.5))
        {
            _2625 = true;
            break;
        }
        if ((_2390 + 1.0) < _2388.x)
        {
            _2625 = true;
            break;
        }
        _2625 = false;
        break;
    }
    float _2859;
    if (_2625)
    {
        discard_state = true;
        _2859 = 0.0;
    }
    else
    {
        _2859 = _2385;
    }
    SV_Target.x = _2400;
    SV_Target.y = _2401;
    SV_Target.z = _2402;
    SV_Target.w = _2859;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2385;
    discard_exit();
}


