#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 52) uniform texture2D g_ScreenSpaceShadowTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1121;
float _3579;
float _3580;
float _3581;
float _3582;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _205 = _204 * _197;
    float _206 = _204 * _198;
    float _207 = _204 * _199;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _299 = cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y;
    float _302 = (sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277)) - cbMtdParam._m0[14u].y) / (isnan(0.001000000047497451305389404296875) ? _299 : (isnan(_299) ? 0.001000000047497451305389404296875 : max(_299, 0.001000000047497451305389404296875)));
    float _303 = _302 / cbMtdParam._m0[15u].y;
    float _3596 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _308 = cbMtdParam._m0[15u].z * (1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))));
    float _317 = (cbMtdParam._m0[13u].x + _302) * cbMtdParam._m0[13u].y;
    float _3607 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _321 = ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    vec4 _334 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = (_334.x * 2.0) + (-1.0);
    float _344 = (_334.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3618 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _375 = ((_364 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _376 = 1.0 - ((_365 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _378 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_364, _365), 0.0);
    float _380 = _378.x;
    float _421 = fma(_380, cbSceneParam._m0[15u].z, fma(_376, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _375)) + cbSceneParam._m0[15u].w;
    float _422 = (fma(_380, cbSceneParam._m0[12u].z, fma(_376, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _375)) + cbSceneParam._m0[12u].w) / _421;
    float _423 = (fma(_380, cbSceneParam._m0[13u].z, fma(_376, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _375)) + cbSceneParam._m0[13u].w) / _421;
    float _424 = (fma(_380, cbSceneParam._m0[14u].z, fma(_376, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _375)) + cbSceneParam._m0[14u].w) / _421;
    float _456 = 1.0 / cbMtdParam._m0[12u].y;
    float _457 = ((fma(_424, cbSceneParam._m0[20u].z, fma(_423, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _422)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) * _456;
    float _458 = _456 * ((fma(_424, cbSceneParam._m0[22u].z, fma(_423, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _422)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z);
    float _459 = _457 * cbMtdParam._m0[16u].z;
    float _460 = _458 * cbMtdParam._m0[16u].w;
    float _474 = cbMtdParam._m0[15u].w * cbMtdParam._m0[16u].x;
    vec4 _487 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x)) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y)) + cbTextureTilingScale._m0[2u].w));
    float _492 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].w;
    float _495 = (_487.x * 0.5) + (-0.25);
    float _498 = (_487.y * 0.5) + (-0.25);
    float _499 = _498 * _474;
    float _501 = (-0.0) - (_474 * _495);
    float _503 = fract(_492);
    float _505 = fract(_492 + 0.5);
    float _516 = abs((_503 * 2.0) + (-1.0));
    vec4 _532 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_503 * _501) + _459) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_499 * _503) + _460) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _534 = _532.x;
    vec4 _535 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_505 * _501) + _459) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_499 * _505) + _460) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _540 = _498 * cbMtdParam._m0[16u].x;
    float _542 = (-0.0) - (cbMtdParam._m0[16u].x * _495);
    vec4 _559 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_503 * _542) + _457) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_540 * _503) + _458) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _561 = _559.x;
    vec4 _562 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_505 * _542) + _457) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_540 * _505) + _458) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _570 = (((((_535.x - _534) * _516) + _534) + _561) + ((_562.x - _561) * _516)) * cbMtdParam._m0[11u].w;
    float _576 = (cbMtdParam._m0[13u].w + _302) * cbMtdParam._m0[13u].z;
    float _3629 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _578 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * cbMtdParam._m0[12u].w;
    float _3640 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _591 = isnan(cbInstanceData._m0[8u].x) ? _364 : (isnan(_364) ? cbInstanceData._m0[8u].x : max(_364, cbInstanceData._m0[8u].x));
    float _592 = isnan(cbInstanceData._m0[8u].y) ? _365 : (isnan(_365) ? cbInstanceData._m0[8u].y : max(_365, cbInstanceData._m0[8u].y));
    vec4 _596 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _591 : (isnan(_591) ? cbInstanceData._m0[8u].z : min(_591, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _592 : (isnan(_592) ? cbInstanceData._m0[8u].w : min(_592, cbInstanceData._m0[8u].w))));
    float _610 = (POSITION_1.w - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[16u].y);
    float _3671 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _612 = 1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)));
    float _625 = fma(_350, _211 * NORMAL.x, fma(_344, _218 * TANGENT.x, _342 * _205));
    float _628 = fma(_350, _211 * NORMAL.y, fma(_344, _218 * TANGENT.y, _342 * _206));
    float _631 = fma(_350, _211 * NORMAL.z, fma(_344, _218 * TANGENT.z, _342 * _207));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3682 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3693 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _640 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3715 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3726 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _663 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _664 = _275 * _663;
    float _665 = _276 * _663;
    float _666 = _277 * _663;
    vec4 _671 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _673 = _671.w;
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _700 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _703 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _706 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _719 = uint(roundEven(NORMAL.w)) * 13u;
    uint _720 = _719 + 9u;
    uint _721 = _720 + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3737 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _743 = _740.x * TEXCOORD.z;
    float _744 = dot(vec3(_636, _637, _638), vec3(_664, _665, _666));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _636) - _664;
    float _752 = (_747 * _637) - _665;
    float _753 = (_747 * _638) - _666;
    float _757 = abs(dot(vec3(_664, _665, _666), vec3(_636, _637, _638)));
    float _3770 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _767 = sqrt(_640);
    float _779 = exp2((_767 * 5.0) * log2(1.0 - (_758 * 0.999000012874603271484375))) / (4.0 - (_767 * 3.0));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1120;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _846 = fma(_819, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811));
        float _850 = fma(_819, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811));
        float _854 = fma(_819, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811));
        float _878 = _811 + _636;
        float _879 = _815 + _637;
        float _880 = _819 + _638;
        float _890 = fma(_880, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878)) - _846;
        float _891 = fma(_880, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878)) - _850;
        float _892 = fma(_880, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878)) - _854;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_846 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_850 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[34u].z) + ((((((_854 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _948 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_914.x + (-0.5));
        float _950 = _948 * (_914.y + (-0.5));
        float _951 = _948 * (_914.z + (-0.5));
        float _958 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_921.x + (-0.5));
        float _960 = _958 * (_921.y + (-0.5));
        float _961 = _958 * (_921.z + (-0.5));
        float _968 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_928.x + (-0.5));
        float _970 = _968 * (_928.y + (-0.5));
        float _971 = _968 * (_928.z + (-0.5));
        float _978 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_935.x + (-0.5));
        float _980 = _978 * (_935.y + (-0.5));
        float _981 = _978 * (_935.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1002 = (dot(vec3(_636, _637, _638), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1012 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3818 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1014 + 1.0))) + _1019) * _982;
        float _1029 = _950 * 0.5;
        float _1030 = _960 * 0.5;
        float _1031 = _970 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_636, _637, _638), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3851 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1056 + 1.0))) + _1061) * _983;
        float _1071 = _951 * 0.5;
        float _1072 = _961 * 0.5;
        float _1073 = _971 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_636, _637, _638), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3884 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1098 + 1.0))) + _1103) * _984;
        _1120 = _951;
        _1122 = _950;
        _1123 = _949;
        _1124 = _961;
        _1125 = _960;
        _1126 = _959;
        _1127 = _971;
        _1128 = _970;
        _1129 = _969;
        _1130 = _984;
        _1131 = _983;
        _1132 = _982;
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _1121;
        _1122 = _1121;
        _1123 = _1121;
        _1124 = _1121;
        _1125 = _1121;
        _1126 = _1121;
        _1127 = _1121;
        _1128 = _1121;
        _1129 = _1121;
        _1130 = _1121;
        _1131 = _1121;
        _1132 = _1121;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = fma(_819, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _811));
        float _1165 = fma(_819, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _811));
        float _1169 = fma(_819, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _811));
        float _1192 = _811 + _636;
        float _1193 = _815 + _637;
        float _1194 = _819 + _638;
        float _1204 = fma(_1194, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192)) - _1161;
        float _1205 = fma(_1194, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192)) - _1165;
        float _1206 = fma(_1194, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192)) - _1169;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1161 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1165 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[35u].z) + ((((((_1169 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1260 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1227.x + (-0.5));
        float _1262 = _1260 * (_1227.y + (-0.5));
        float _1263 = _1260 * (_1227.z + (-0.5));
        float _1270 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1234.x + (-0.5));
        float _1272 = _1270 * (_1234.y + (-0.5));
        float _1273 = _1270 * (_1234.z + (-0.5));
        float _1280 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1241.x + (-0.5));
        float _1282 = _1280 * (_1241.y + (-0.5));
        float _1283 = _1280 * (_1241.z + (-0.5));
        float _1290 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1248.x + (-0.5));
        float _1292 = _1290 * (_1248.y + (-0.5));
        float _1293 = _1290 * (_1248.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_636, _637, _638), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3947 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1324 + 1.0))) + _1329) * _1294;
        float _1339 = _1262 * 0.5;
        float _1340 = _1272 * 0.5;
        float _1341 = _1282 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_636, _637, _638), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3980 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1366 + 1.0))) + _1371) * _1295;
        float _1381 = _1263 * 0.5;
        float _1382 = _1273 * 0.5;
        float _1383 = _1283 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_636, _637, _638), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4013 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1408 + 1.0))) + _1413) * _1296;
        _1430 = _1263;
        _1431 = _1262;
        _1432 = _1261;
        _1433 = _1273;
        _1434 = _1272;
        _1435 = _1271;
        _1436 = _1283;
        _1437 = _1282;
        _1438 = _1281;
        _1439 = _1296;
        _1440 = _1295;
        _1441 = _1294;
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1121;
        _1431 = _1121;
        _1432 = _1121;
        _1433 = _1121;
        _1434 = _1121;
        _1435 = _1121;
        _1436 = _1121;
        _1437 = _1121;
        _1438 = _1121;
        _1439 = _1121;
        _1440 = _1121;
        _1441 = _1121;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1133)) + _1133;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1134)) + _1134;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1135)) + _1135;
    float _1477 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1454));
    float _1498 = _751 * 0.5;
    float _1499 = _752 * 0.5;
    float _1500 = _753 * 0.5;
    float _1501 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1504 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1507 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1541;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1514 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1120, _1124, _1127, _1130));
        float _1518 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1522 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1529 = dot(vec4(cbModelParam._m0[39u]), vec4(_1498, _1499, _1500, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1552;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1543 = dot(vec4(cbModelParam._m0[40u]), vec4(_1498, _1499, _1500, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1556 = (_1552 * cbModelParam._m0[1u].x) + (_1541 * (1.0 - cbModelParam._m0[1u].x));
    float _1566 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1566 : min(cbModelParam._m0[25u].z, _1566));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_819, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_819, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_819, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1628 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1631 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1659 = frontier_phi_14_12_ladder;
        }
        float _1829;
        if (_1628 > 0.0)
        {
            _1829 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1829 = frontier_phi_23_19_ladder;
        }
        float _2169;
        if (_1631 > 0.0)
        {
            _2169 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2169 = frontier_phi_35_30_ladder;
        }
        float _2171 = isnan(_1829) ? _1659 : (isnan(_1659) ? _1829 : min(_1659, _1829));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1625) + _1614;
        float _2177 = (_2172 * _1628) + _1618;
        float _2178 = (_2172 * _1631) + _1622;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2179;
        float _2183 = _2179 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 > _2183) || ((_2177 < _2181) || ((_2176 < _2181) || (_2176 > _2183))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1567);
            frontier_phi_13_35_ladder = _2563.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2563.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2563.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_13_35_ladder_2;
        _1649 = frontier_phi_13_35_ladder_1;
        _1651 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1567);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_819, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_819, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_819, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1724 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1727 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1834;
        if (_1721 > 0.0)
        {
            _1834 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1834 = frontier_phi_25_21_ladder;
        }
        float _2196;
        if (_1724 > 0.0)
        {
            _2196 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2196 = frontier_phi_37_32_ladder;
        }
        float _2723;
        if (_1727 > 0.0)
        {
            _2723 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2723 = frontier_phi_49_44_ladder;
        }
        float _2725 = isnan(_2196) ? _1834 : (isnan(_1834) ? _2196 : min(_1834, _2196));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1721) + _1710;
        float _2731 = (_2726 * _1724) + _1714;
        float _2732 = (_2726 * _1727) + _1718;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_22_49_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_22_49_ladder_2;
        _1748 = frontier_phi_22_49_ladder_1;
        _1750 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1656);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1762 = ((((1.0 - _779) * ((_767 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_779 * _767)) * _743;
    float _1763 = _1762 * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1764 = _1762 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1765 = _1762 * ((cbModelParam._m0[1u].w * (_1750 - _1651)) + _1651);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1821 = _1808 / _1820;
    float _1822 = _1812 / _1820;
    float _1823 = _1816 / _1820;
    float _1970;
    float _1971;
    float _1972;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1850 = ((uint(_1823 > cbSceneParam._m0[59u].y) + uint(_1823 > cbSceneParam._m0[59u].x)) + uint(_1823 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1851 = _1850 + 43u;
        uint _1859 = _1850 + 44u;
        uint _1867 = _1850 + 45u;
        uint _1875 = _1850 + 46u;
        float _1886 = fma(_1820, cbSceneParam._m0[_1851].w, fma(_1816, cbSceneParam._m0[_1851].z, fma(_1812, cbSceneParam._m0[_1851].y, _1808 * cbSceneParam._m0[_1851].x)));
        float _1890 = fma(_1820, cbSceneParam._m0[_1859].w, fma(_1816, cbSceneParam._m0[_1859].z, fma(_1812, cbSceneParam._m0[_1859].y, _1808 * cbSceneParam._m0[_1859].x)));
        float _1898 = fma(_1820, cbSceneParam._m0[_1875].w, fma(_1816, cbSceneParam._m0[_1875].z, fma(_1812, cbSceneParam._m0[_1875].y, _1808 * cbSceneParam._m0[_1875].x)));
        float _1903 = cbSceneParam._m0[33u].z * _1898;
        float _1905 = cbSceneParam._m0[33u].w * _1898;
        float _1908 = fma(_1820, cbSceneParam._m0[_1867].w, fma(_1816, cbSceneParam._m0[_1867].z, fma(_1812, cbSceneParam._m0[_1867].y, _1808 * cbSceneParam._m0[_1867].x))) / _1898;
        float _1956 = (cbSceneParam._m0[33u].x - sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823))) * cbSceneParam._m0[33u].y;
        float _4139 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1963 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 + _1886) / _1898, (_1905 + _1890) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 + _1886) / _1898, (_1890 - _1903) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 - _1903) / _1898, (_1890 - _1905) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 - _1905) / _1898, (_1903 + _1890) / _1898), _1908), 0.0)).x), vec4(0.25)));
        _1970 = 1.0 - (_1963 * cbSceneParam._m0[34u].x);
        _1971 = 1.0 - (_1963 * cbSceneParam._m0[34u].y);
        _1972 = 1.0 - (_1963 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1970 = 1.0;
        _1971 = 1.0;
        _1972 = 1.0;
    }
    float _2036;
    float _2038;
    float _2040;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2024 = fma(_1820, cbSceneParam._m0[63u].w, fma(_1816, cbSceneParam._m0[63u].z, fma(_1812, cbSceneParam._m0[63u].y, _1808 * cbSceneParam._m0[63u].x)));
        float _2025 = fma(_1820, cbSceneParam._m0[60u].w, fma(_1816, cbSceneParam._m0[60u].z, fma(_1812, cbSceneParam._m0[60u].y, _1808 * cbSceneParam._m0[60u].x))) / _2024;
        float _2026 = fma(_1820, cbSceneParam._m0[61u].w, fma(_1816, cbSceneParam._m0[61u].z, fma(_1812, cbSceneParam._m0[61u].y, _1808 * cbSceneParam._m0[61u].x))) / _2024;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2025 >= cbSceneParam._m0[64u].x) && (_2026 >= cbSceneParam._m0[64u].y)) && (_2025 <= cbSceneParam._m0[64u].z)) && (_2026 <= cbSceneParam._m0[64u].w))
        {
            float _2209 = fma(_1820, cbSceneParam._m0[62u].w, fma(_1816, cbSceneParam._m0[62u].z, fma(_1812, cbSceneParam._m0[62u].y, _1808 * cbSceneParam._m0[62u].x))) / _2024;
            float _2213 = isnan(cbSceneParam._m0[41u].w) ? _2209 : (isnan(_2209) ? cbSceneParam._m0[41u].w : max(_2209, cbSceneParam._m0[41u].w));
            float _2256 = (cbSceneParam._m0[33u].x - sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823))) * cbSceneParam._m0[33u].y;
            float _4155 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
            float _2263 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2025, cbSceneParam._m0[33u].w + _2026), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2025, _2026 - cbSceneParam._m0[33u].z), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2025 - cbSceneParam._m0[33u].z, _2026 - cbSceneParam._m0[33u].w), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2025 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2026), _2213), 0.0)).x), vec4(0.25)));
            float _2267 = 1.0 - (_2263 * cbSceneParam._m0[34u].x);
            float _2268 = 1.0 - (_2263 * cbSceneParam._m0[34u].y);
            float _2269 = 1.0 - (_2263 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2269) ? _1972 : (isnan(_1972) ? _2269 : min(_1972, _2269));
            frontier_phi_34_33_ladder_1 = isnan(_2268) ? _1971 : (isnan(_1971) ? _2268 : min(_1971, _2268));
            frontier_phi_34_33_ladder_2 = isnan(_2267) ? _1970 : (isnan(_1970) ? _2267 : min(_1970, _2267));
        }
        else
        {
            frontier_phi_34_33_ladder = _1972;
            frontier_phi_34_33_ladder_1 = _1971;
            frontier_phi_34_33_ladder_2 = _1970;
        }
        _2036 = frontier_phi_34_33_ladder_2;
        _2038 = frontier_phi_34_33_ladder_1;
        _2040 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2036 = _1970;
        _2038 = _1971;
        _2040 = _1972;
    }
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_719 + 5u]);
    uint _2047 = _2045.x * 14u;
    float _2054 = (cbLight._m0[_2047 + 13u].x * (_743 + (-1.0))) + 1.0;
    uint _2055 = _2047 + 4u;
    float _2065 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_636, _637, _638));
    float _4186 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _2080 = ((cbLight._m0[_2055].x * _2036) * _2065) * _2078;
    float _2081 = ((cbLight._m0[_2055].y * _2038) * _2065) * _2078;
    float _2082 = ((cbLight._m0[_2055].z * _2040) * _2065) * _2078;
    uint _2084 = _2047 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _640) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_2047].x + _664;
    float _2100 = cbLight._m0[_2047].y + _665;
    float _2101 = cbLight._m0[_2047].z + _666;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2047].xyz));
    float _4197 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2113 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2114 = dot(vec3(_636, _637, _638), vec3(_2106, _2107, _2108));
    float _4219 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2106, _2107, _2108));
    float _4230 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2138 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2113 * ((_2112 * _2138) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2138) + _2098) * _2112))) * _2112;
    float _4241 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2155 = (((cbLight._m0[_2084].x * _2036) * _2137) * _2151) * _2065;
    float _2159 = (((cbLight._m0[_2084].y * _2038) * _2137) * _2151) * _2065;
    float _2163 = (((cbLight._m0[_2084].z * _2040) * _2137) * _2151) * _2065;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    if (_2045.y == 0u)
    {
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2282)));
        float _2303 = (log2(_1823 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2797)
                {
                    frontier_phi_60_pred = _2786;
                    frontier_phi_60_pred_1 = _2785;
                    frontier_phi_60_pred_2 = _2784;
                    frontier_phi_60_pred_3 = _2783;
                    frontier_phi_60_pred_4 = _2782;
                    frontier_phi_60_pred_5 = _2781;
                }
                else
                {
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    uint _2954;
                    _2948 = _2781;
                    _2949 = _2782;
                    _2950 = _2783;
                    _2951 = _2784;
                    _2952 = _2785;
                    _2953 = _2786;
                    _2954 = _2796;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    for (;;)
                    {
                        uint _2958 = uint(findLSB(_2954)) + (_2787 << 5u);
                        uint _2955 = (_2954 + 4294967295u) & _2954;
                        uint _2960 = _2958 * 48u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2980 = (_2958 * 48u) + 4u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _2999 = (_2958 * 48u) + 8u;
                        vec3 _3010 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x));
                        float _3014 = _2974.x - _1821;
                        float _3015 = _2974.y - _1822;
                        float _3016 = _2974.z - _1823;
                        float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                        float _3020 = inversesqrt(_3017);
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3024 = dot(vec3(_700, _703, _706), vec3(_3021, _3022, _3023));
                        float _3029 = 1.0 - (_3017 * _2974.w);
                        float _4262 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _3031 = sqrt(_3017) * _2993.w;
                        float _3034 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _3024) + _3035;
                        float _3041 = _3031 * _3031;
                        float _3045 = ((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3030) / ((_3041 * 0.699999988079071044921875) + 1.0);
                        float _3049 = (-0.0) - _1821;
                        float _3050 = (-0.0) - _1822;
                        float _3051 = (-0.0) - _1823;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3065 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                        float _3066 = 1.0 - _767;
                        float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                        float _3074 = _3073 * _3073;
                        float _3075 = _3074 * _3074;
                        float _3076 = _3056 + _3021;
                        float _3077 = _3057 + _3022;
                        float _3078 = _3058 + _3023;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3086 = dot(vec3(_700, _703, _706), vec3(_3056, _3057, _3058));
                        float _4278 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3090 = dot(vec3(_700, _703, _706), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                        float _4289 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                        float _3098 = _3034 * _3074;
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3024) + _3099;
                        float _4300 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3104 = 1.0 - _3074;
                        float _3114 = (0.5 / (((_3103 * ((_3089 * _3104) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3074) * _3089))) * _3103;
                        float _4311 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3125 = (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3097 * _3097) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125))) * _3030;
                        _2877 = (_3045 * _2993.x) + _2951;
                        _2878 = (_3045 * _2993.y) + _2952;
                        _2879 = (_3045 * _2993.z) + _2953;
                        _2874 = (_3125 * _3010.x) + _2948;
                        _2875 = (_3125 * _3010.y) + _2949;
                        _2876 = (_3125 * _3010.z) + _2950;
                        if (_2955 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2948 = _2874;
                            _2949 = _2875;
                            _2950 = _2876;
                            _2951 = _2877;
                            _2952 = _2878;
                            _2953 = _2879;
                            _2954 = _2955;
                        }
                    }
                    frontier_phi_60_pred = _2879;
                    frontier_phi_60_pred_1 = _2878;
                    frontier_phi_60_pred_2 = _2877;
                    frontier_phi_60_pred_3 = _2876;
                    frontier_phi_60_pred_4 = _2875;
                    frontier_phi_60_pred_5 = _2874;
                }
                _2583 = frontier_phi_60_pred;
                _2581 = frontier_phi_60_pred_1;
                _2579 = frontier_phi_60_pred_2;
                _2577 = frontier_phi_60_pred_3;
                _2575 = frontier_phi_60_pred_4;
                _2573 = frontier_phi_60_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2573;
                    _2782 = _2575;
                    _2783 = _2577;
                    _2784 = _2579;
                    _2785 = _2581;
                    _2786 = _2583;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
        }
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.z;
        uint _2589 = (_2587 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2589) & _2313) == 0u)
        {
            _2749 = _2572;
            _2751 = _2574;
            _2753 = _2576;
            _2755 = _2578;
            _2757 = _2580;
            _2759 = _2582;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
            float _2775 = _2774 * _1821;
            float _2776 = _2774 * _1822;
            float _2777 = _2774 * _1823;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2589 < ((_2587 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2931 = _2572;
                float _2932 = _2574;
                float _2933 = _2576;
                float _2934 = _2578;
                float _2935 = _2580;
                float _2936 = _2582;
                uint _2937 = _2589;
                uint _2946;
                bool _2947;
                for (;;)
                {
                    _2946 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                    _2947 = _2946 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2947)
                    {
                        frontier_phi_71_pred = _2935;
                        frontier_phi_71_pred_1 = _2934;
                        frontier_phi_71_pred_2 = _2933;
                        frontier_phi_71_pred_3 = _2932;
                        frontier_phi_71_pred_4 = _2931;
                        frontier_phi_71_pred_5 = _2936;
                    }
                    else
                    {
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3154 = _2931;
                        float _3155 = _2932;
                        float _3156 = _2933;
                        float _3157 = _2934;
                        float _3158 = _2935;
                        float _3159 = _2936;
                        uint _3160 = _2946;
                        uint _3161;
                        vec4 _3186;
                        float _3187;
                        vec4 _3202;
                        vec3 _3214;
                        vec4 _3229;
                        vec4 _3244;
                        float _3291;
                        bool _3292;
                        for (;;)
                        {
                            uint _3171 = ((_2937 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3160));
                            _3161 = (_3160 + 4294967295u) & _3160;
                            uint _3173 = _3171 * 40u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3187 = _3186.w;
                            uint _3189 = (_3171 * 40u) + 4u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3171 * 40u) + 8u;
                            _3214 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x));
                            uint _3216 = (_3171 * 40u) + 16u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3171 * 40u) + 20u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3247 = (_3171 * 40u) + 24u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3266 = (_3171 * 40u) + 28u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3291 = fma(_1823, _3279.z, fma(_1822, _3279.y, _3279.x * _1821)) + _3279.w;
                            _3292 = !((fma(_1823, _3260.z, fma(_1822, _3260.y, _3260.x * _1821)) + _3260.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3292)
                            {
                                float _3319 = _3186.x - _1821;
                                float _3320 = _3186.y - _1822;
                                float _3321 = _3186.z - _1823;
                                float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                                float _3325 = inversesqrt(_3322);
                                float _3326 = _3325 * _3319;
                                float _3327 = _3325 * _3320;
                                float _3328 = _3325 * _3321;
                                float _3332 = 1.0 - (_3322 / (_3187 * _3187));
                                float _4322 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3337 = sqrt(_3322) * _3202.w;
                                float _3339 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                                float _3340 = _3339 * _3339;
                                float _3343 = ((1.0 - _3340) * dot(vec3(_3326, _3327, _3328), vec3(_700, _703, _706))) + _3340;
                                float _3346 = _3337 * _3337;
                                float _3350 = (fma(_1823, _3229.z, fma(_1822, _3229.y, _3229.x * _1821)) + _3229.w) / _3291;
                                float _3351 = (fma(_1823, _3244.z, fma(_1822, _3244.y, _3244.x * _1821)) + _3244.w) / _3291;
                                float _3355 = 1.0 - dot(vec2(_3350, _3351), vec2(_3350, _3351));
                                float _4338 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3357 = _3356 * (((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3333) / ((_3346 * 0.699999988079071044921875) + 1.0));
                                float _3369 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                                float _3370 = 1.0 - _767;
                                float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                                float _3378 = _3377 * _3377;
                                float _3379 = _3378 * _3378;
                                float _3380 = _3326 - _2775;
                                float _3381 = _3327 - _2776;
                                float _3382 = _3328 - _2777;
                                float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                                float _3390 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4349 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3394 = dot(vec3(_700, _703, _706), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                                float _4360 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                                float _3402 = _3339 * _3378;
                                float _3403 = _3402 * _3402;
                                float _3409 = ((1.0 - _3403) * dot(vec3(_700, _703, _706), vec3(_3326, _3327, _3328))) + _3403;
                                float _4371 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3411 = 1.0 - _3378;
                                float _3421 = (0.5 / (((_3410 * ((_3393 * _3411) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3378) * _3393))) * _3410;
                                float _4382 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3431 = (_3356 * _3333) * (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) / ((_3401 * _3401) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3357 * _3202.z;
                                frontier_phi_77_pred_1 = _3357 * _3202.y;
                                frontier_phi_77_pred_2 = _3357 * _3202.x;
                                frontier_phi_77_pred_3 = _3431 * _3214.z;
                                frontier_phi_77_pred_4 = _3431 * _3214.y;
                                frontier_phi_77_pred_5 = _3431 * _3214.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3440 = frontier_phi_77_pred;
                            _3439 = frontier_phi_77_pred_1;
                            _3438 = frontier_phi_77_pred_2;
                            _3437 = frontier_phi_77_pred_3;
                            _3436 = frontier_phi_77_pred_4;
                            _3435 = frontier_phi_77_pred_5;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3146 = _3440 + _3159;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            if (_3161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3161;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3145;
                        frontier_phi_71_pred_1 = _3144;
                        frontier_phi_71_pred_2 = _3143;
                        frontier_phi_71_pred_3 = _3142;
                        frontier_phi_71_pred_4 = _3141;
                        frontier_phi_71_pred_5 = _3146;
                    }
                    _2758 = frontier_phi_71_pred;
                    _2756 = frontier_phi_71_pred_1;
                    _2754 = frontier_phi_71_pred_2;
                    _2752 = frontier_phi_71_pred_3;
                    _2750 = frontier_phi_71_pred_4;
                    _2760 = frontier_phi_71_pred_5;
                    uint _2938 = _2937 + 1u;
                    if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2931 = _2750;
                        _2932 = _2752;
                        _2933 = _2754;
                        _2934 = _2756;
                        _2935 = _2758;
                        _2936 = _2760;
                        _2937 = _2938;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2760;
                frontier_phi_51_52_ladder_1 = _2758;
                frontier_phi_51_52_ladder_2 = _2756;
                frontier_phi_51_52_ladder_3 = _2754;
                frontier_phi_51_52_ladder_4 = _2750;
                frontier_phi_51_52_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_51_52_ladder = _2582;
                frontier_phi_51_52_ladder_1 = _2580;
                frontier_phi_51_52_ladder_2 = _2578;
                frontier_phi_51_52_ladder_3 = _2576;
                frontier_phi_51_52_ladder_4 = _2572;
                frontier_phi_51_52_ladder_5 = _2574;
            }
            _2749 = frontier_phi_51_52_ladder_4;
            _2751 = frontier_phi_51_52_ladder_5;
            _2753 = frontier_phi_51_52_ladder_3;
            _2755 = frontier_phi_51_52_ladder_2;
            _2757 = frontier_phi_51_52_ladder_1;
            _2759 = frontier_phi_51_52_ladder;
        }
        float _2764 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2326 = (_2764 * _2755) + _2080;
        _2328 = (_2764 * _2757) + _2081;
        _2330 = (_2764 * _2759) + _2082;
        _2332 = ((_2749 * 0.039999999105930328369140625) * _2764) + _2155;
        _2334 = ((_2751 * 0.039999999105930328369140625) * _2764) + _2159;
        _2336 = ((_2753 * 0.039999999105930328369140625) * _2764) + _2163;
    }
    else
    {
        _2326 = _2080;
        _2328 = _2081;
        _2330 = _2082;
        _2332 = _2155;
        _2334 = _2159;
        _2336 = _2163;
    }
    float _2356 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2357 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2358 = cbSceneParam._m0[86u].x * ((_678 / cbSceneParam._m0[86u].x) + (((10.0 / (_659 + 10.0)) * cbMtdParam._m0[12u].z) * dot(vec3(_636, _637, _638), vec3(_205, _206, _207))));
    float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
    float _2360 = isnan(_2357) ? _679 : (isnan(_679) ? _2357 : min(_679, _2357));
    vec4 _2362 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2359, _2360), 0.0);
    float _2364 = _2362.x;
    bool _2384 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2364)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2364))) > _659;
    float _2385 = _2384 ? _2359 : _678;
    float _2386 = _2384 ? _2360 : _679;
    vec4 _2388 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2385, _2386));
    vec4 _2394 = texture(sampler2D(g_ScreenSpaceShadowTexture, SS_WrapLinear), vec2(_2385, _2386));
    float _2396 = _2394.w;
    vec4 _2424 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2385, _2386));
    float _2426 = _2424.x;
    float _2446 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2426)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2426))) - _659;
    bool _2456 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2460 = (isnan(_2446) ? 0.0 : (isnan(0.0) ? _2446 : max(0.0, _2446))) * (-1.44269502162933349609375);
    float _4413 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4424 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4435 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2487 = 0.959999978542327880859375 - (exp2(log2(1.0 - _758) * 5.0) * 0.959999978542327880859375);
    float _2490 = ((((((((((cbMtdParam._m0[10u].x * _570) * _596.x) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _612) * _2396) * cbSceneParam._m0[72u].z) + _2388.x) * _2487) * exp2(_2460 * (_2456 ? 0.0 : (cbMtdParam._m0[18u].y + cbMtdParam._m0[17u].z)))) * cbSceneParam._m0[72u].w;
    float _2493 = ((((((((((cbMtdParam._m0[10u].y * _570) * _596.y) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _612) * _2396) * cbSceneParam._m0[72u].z) + _2388.y) * _2487) * exp2(_2460 * (_2456 ? 0.0 : (cbMtdParam._m0[18u].z + cbMtdParam._m0[17u].w)))) * cbSceneParam._m0[72u].w;
    float _2496 = ((((((((((cbMtdParam._m0[10u].z * _570) * _596.z) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _612) * _2396) * cbSceneParam._m0[72u].z) + _2388.z) * _2487) * exp2(_2460 * (_2456 ? 0.0 : (cbMtdParam._m0[18u].w + cbMtdParam._m0[18u].x)))) * cbSceneParam._m0[72u].w;
    float _2504 = (_2490 + ((_2332 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1556)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2326 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _743))) - _2490) * _579);
    float _2506 = (_2493 + ((_2334 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1556)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2328 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _743))) - _2493) * _579);
    float _2508 = (_2496 + ((_2336 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1556)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2330 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _743))) - _2496) * _579);
    float _2513 = cbInstanceData._m0[_719 + 6u].w * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)));
    float _2518 = _678 / cbSceneParam._m0[86u].x;
    float _2519 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2533 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2535 = _2533.x;
    float _2536 = _2533.y;
    float _2537 = _2533.z;
    float _2538 = _2533.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2597 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2598 = _2597 / _659;
        float _2609 = _2598 * _275;
        float _2610 = _276 * _2598;
        float _2611 = (-0.0) - _2610;
        float _2612 = _2598 * _277;
        float _2614 = (cbSceneParam._m0[77u].w * _2611) / _2597;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2610;
        float _2622 = sqrt(((_2609 * _2609) + (_2610 * _2610)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2597)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2887;
        if (abs((_2611 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2887 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2631 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2812 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2887 = ((abs(_2622 / _2611) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2631 * _2821) - exp2(_2631 * _2822)) * _2810))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2889 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, 1.0), 0.0);
        float _2898 = exp2((_2887 * (-1.44269502162933349609375)) * (1.0 - _2889.w));
        float _2899 = log2(_2898);
        float _2915 = log2(_2538);
        _2633 = (exp2(_2915 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2899 * cbSceneParam._m0[78u].x)) * _2889.x) / cbSceneParam._m0[78u].x)) + _2535;
        _2635 = (exp2(_2915 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2899 * cbSceneParam._m0[78u].y)) * _2889.y) / cbSceneParam._m0[78u].y)) + _2536;
        _2637 = (exp2(_2915 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2899 * cbSceneParam._m0[78u].z)) * _2889.z) / cbSceneParam._m0[78u].z)) + _2537;
        _2639 = _2898 * _2538;
    }
    else
    {
        _2633 = _2535;
        _2635 = _2536;
        _2637 = _2537;
        _2639 = _2538;
    }
    bool _2925;
    float _2694;
    vec4 _2697;
    float _2699;
    vec4 _2701;
    float _2709;
    float _2710;
    float _2711;
    float _2712;
    bool _2722;
    for (;;)
    {
        bool _2651 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2652 = log2(_2639);
        float _2659 = exp2(_2652 * cbSceneParam._m0[78u].x) * _2504;
        float _2660 = exp2(_2652 * cbSceneParam._m0[78u].y) * _2506;
        float _2661 = exp2(_2652 * cbSceneParam._m0[78u].z) * _2508;
        vec4 _2669 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_678, _679));
        float _2671 = _2669.x;
        float _2692 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2671)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2671))) - _659) * cbMtdParam._m0[11u].x;
        float _4486 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        _2694 = _2513 * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)));
        float _2695 = _673 + (-0.5);
        _2697 = cbMtdParam._m0[1u];
        _2699 = _2697.y * _2695;
        _2701 = cbMatDynParam._m0[0u];
        float _2708 = (roundEven(_2701.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2709 = _2708 * (_2651 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2633)));
        _2710 = _2708 * (_2651 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2635)));
        _2711 = _2708 * (_2651 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2637)));
        _2712 = _2695 * 0.999000012874603271484375;
        _2722 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2722)
        {
            if ((cbInstanceData._m0[_719 + 7u].x + _2712) < 0.5)
            {
                _2925 = true;
                break;
            }
        }
        uint _2845 = _720 + uint(_2701.w);
        if ((cbInstanceData._m0[_2845].w < 1.0) && ((cbInstanceData._m0[_2845].w + _2712) < 0.5))
        {
            _2925 = true;
            break;
        }
        if ((_2699 + 1.0) < _2697.x)
        {
            _2925 = true;
            break;
        }
        _2925 = false;
        break;
    }
    float _3132;
    if (_2925)
    {
        discard_state = true;
        _3132 = 0.0;
    }
    else
    {
        _3132 = _2694;
    }
    SV_Target.x = _2709;
    SV_Target.y = _2710;
    SV_Target.z = _2711;
    SV_Target.w = _3132;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2694;
    discard_exit();
}


