#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 52) uniform texture2D g_ScreenSpaceShadowTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1100;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _201 = _200 * _193;
    float _202 = _200 * _194;
    float _203 = _200 * _195;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _295 = cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y;
    float _298 = (sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273)) - cbMtdParam._m0[14u].y) / (isnan(0.001000000047497451305389404296875) ? _295 : (isnan(_295) ? 0.001000000047497451305389404296875 : max(_295, 0.001000000047497451305389404296875)));
    float _299 = _298 / cbMtdParam._m0[15u].y;
    float _3513 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _304 = cbMtdParam._m0[15u].z * (1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))));
    float _313 = (cbMtdParam._m0[13u].x + _298) * cbMtdParam._m0[13u].y;
    float _3524 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _317 = ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    vec4 _330 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _338 = (_330.x * 2.0) + (-1.0);
    float _340 = (_330.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3535 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    float _360 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _361 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _371 = ((_360 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _372 = 1.0 - ((_361 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _374 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_360, _361), 0.0);
    float _376 = _374.x;
    float _417 = fma(_376, cbSceneParam._m0[15u].z, fma(_372, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _371)) + cbSceneParam._m0[15u].w;
    float _418 = (fma(_376, cbSceneParam._m0[12u].z, fma(_372, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _371)) + cbSceneParam._m0[12u].w) / _417;
    float _419 = (fma(_376, cbSceneParam._m0[13u].z, fma(_372, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _371)) + cbSceneParam._m0[13u].w) / _417;
    float _420 = (fma(_376, cbSceneParam._m0[14u].z, fma(_372, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _371)) + cbSceneParam._m0[14u].w) / _417;
    float _452 = 1.0 / cbMtdParam._m0[12u].y;
    float _453 = ((fma(_420, cbSceneParam._m0[20u].z, fma(_419, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _418)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) * _452;
    float _454 = _452 * ((fma(_420, cbSceneParam._m0[22u].z, fma(_419, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _418)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z);
    float _455 = _453 * cbMtdParam._m0[16u].z;
    float _456 = _454 * cbMtdParam._m0[16u].w;
    float _470 = cbMtdParam._m0[15u].w * cbMtdParam._m0[16u].x;
    vec4 _483 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x)) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y)) + cbTextureTilingScale._m0[2u].w));
    float _488 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].w;
    float _491 = (_483.x * 0.5) + (-0.25);
    float _494 = (_483.y * 0.5) + (-0.25);
    float _495 = _494 * _470;
    float _497 = (-0.0) - (_470 * _491);
    float _499 = fract(_488);
    float _501 = fract(_488 + 0.5);
    float _512 = abs((_499 * 2.0) + (-1.0));
    vec4 _528 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_499 * _497) + _455) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_495 * _499) + _456) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _530 = _528.x;
    vec4 _531 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_501 * _497) + _455) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_495 * _501) + _456) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _536 = _494 * cbMtdParam._m0[16u].x;
    float _538 = (-0.0) - (cbMtdParam._m0[16u].x * _491);
    vec4 _555 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_499 * _538) + _453) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_536 * _499) + _454) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _557 = _555.x;
    vec4 _558 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_501 * _538) + _453) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_536 * _501) + _454) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _566 = (((((_531.x - _530) * _512) + _530) + _557) + ((_558.x - _557) * _512)) * cbMtdParam._m0[11u].w;
    float _572 = (cbMtdParam._m0[13u].w + _298) * cbMtdParam._m0[13u].z;
    float _3546 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * cbMtdParam._m0[12u].w;
    float _3557 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _587 = isnan(cbInstanceData._m0[8u].x) ? _360 : (isnan(_360) ? cbInstanceData._m0[8u].x : max(_360, cbInstanceData._m0[8u].x));
    float _588 = isnan(cbInstanceData._m0[8u].y) ? _361 : (isnan(_361) ? cbInstanceData._m0[8u].y : max(_361, cbInstanceData._m0[8u].y));
    vec4 _592 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _587 : (isnan(_587) ? cbInstanceData._m0[8u].z : min(_587, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _588 : (isnan(_588) ? cbInstanceData._m0[8u].w : min(_588, cbInstanceData._m0[8u].w))));
    float _606 = (POSITION_1.w - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[16u].y);
    float _3588 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _608 = 1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)));
    float _621 = fma(_346, _207 * NORMAL.x, fma(_340, _214 * TANGENT.x, _338 * _201));
    float _624 = fma(_346, _207 * NORMAL.y, fma(_340, _214 * TANGENT.y, _338 * _202));
    float _627 = fma(_346, _207 * NORMAL.z, fma(_340, _214 * TANGENT.z, _338 * _203));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3599 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3610 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _636 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3632 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3643 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _660 = _271 * _659;
    float _661 = _272 * _659;
    float _662 = _273 * _659;
    float _683 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _686 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _689 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _702 = uint(roundEven(NORMAL.w)) * 13u;
    uint _704 = (_702 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _710 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_704].x;
    float _711 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_704].y;
    float _712 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_704].z;
    float _3654 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    vec4 _719 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _360, cbSceneParam._m0[86u].y * _361));
    float _722 = _719.x * TEXCOORD.z;
    float _723 = dot(vec3(_632, _633, _634), vec3(_660, _661, _662));
    float _726 = _723 * 2.0;
    float _730 = (_726 * _632) - _660;
    float _731 = (_726 * _633) - _661;
    float _732 = (_726 * _634) - _662;
    float _736 = abs(dot(vec3(_660, _661, _662), vec3(_632, _633, _634)));
    float _3687 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _746 = sqrt(_636);
    float _758 = exp2((_746 * 5.0) * log2(1.0 - (_737 * 0.999000012874603271484375))) / (4.0 - (_746 * 3.0));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _825 = fma(_798, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790));
        float _829 = fma(_798, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790));
        float _833 = fma(_798, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790));
        float _857 = _790 + _632;
        float _858 = _794 + _633;
        float _859 = _798 + _634;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _825;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _829;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _833;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_825 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_829 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_833 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_632, _633, _634), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3735 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_632, _633, _634), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3768 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_632, _633, _634), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3801 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_798, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _790));
        float _1144 = fma(_798, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _790));
        float _1148 = fma(_798, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _790));
        float _1171 = _790 + _632;
        float _1172 = _794 + _633;
        float _1173 = _798 + _634;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_632, _633, _634), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3864 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_632, _633, _634), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3897 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_632, _633, _634), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3930 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1100;
        _1410 = _1100;
        _1411 = _1100;
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1112)) + _1112;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1113)) + _1113;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1114)) + _1114;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _730 * 0.5;
    float _1478 = _731 * 0.5;
    float _1479 = _732 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1520;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1531;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1522 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1535 = (_1531 * cbModelParam._m0[1u].x) + (_1520 * (1.0 - cbModelParam._m0[1u].x));
    float _1545 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1545 : min(cbModelParam._m0[25u].z, _1545));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_798, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_798, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_798, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1607 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1610 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1638 = frontier_phi_14_12_ladder;
        }
        float _1808;
        if (_1607 > 0.0)
        {
            _1808 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1808 = frontier_phi_23_19_ladder;
        }
        float _2148;
        if (_1610 > 0.0)
        {
            _2148 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2148 = frontier_phi_35_30_ladder;
        }
        float _2150 = isnan(_1808) ? _1638 : (isnan(_1638) ? _1808 : min(_1638, _1808));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1604) + _1593;
        float _2156 = (_2151 * _1607) + _1597;
        float _2157 = (_2151 * _1610) + _1601;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2158;
        float _2162 = _2158 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 > _2162) || ((_2156 < _2160) || ((_2155 < _2160) || (_2155 > _2162))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2157, cbModelParam._m0[9u].z, fma(_2156, cbModelParam._m0[9u].y, _2155 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2157, cbModelParam._m0[10u].z, fma(_2156, cbModelParam._m0[10u].y, _2155 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2157, cbModelParam._m0[11u].z, fma(_2156, cbModelParam._m0[11u].y, _2155 * cbModelParam._m0[11u].x))), _1546);
            frontier_phi_13_35_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_13_35_ladder_2;
        _1628 = frontier_phi_13_35_ladder_1;
        _1630 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1546);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1689 = fma(_798, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790)) + cbModelParam._m0[21u].w;
        float _1693 = fma(_798, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790)) + cbModelParam._m0[22u].w;
        float _1697 = fma(_798, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790)) + cbModelParam._m0[23u].w;
        float _1700 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1703 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1706 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1813;
        if (_1700 > 0.0)
        {
            _1813 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1813 = frontier_phi_25_21_ladder;
        }
        float _2175;
        if (_1703 > 0.0)
        {
            _2175 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2175 = frontier_phi_37_32_ladder;
        }
        float _2694;
        if (_1706 > 0.0)
        {
            _2694 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2694 = frontier_phi_49_44_ladder;
        }
        float _2696 = isnan(_2175) ? _1813 : (isnan(_1813) ? _2175 : min(_1813, _2175));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _1700) + _1689;
        float _2702 = (_2697 * _1703) + _1693;
        float _2703 = (_2697 * _1706) + _1697;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_22_49_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1725 = frontier_phi_22_49_ladder_2;
        _1727 = frontier_phi_22_49_ladder_1;
        _1729 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1635);
        _1725 = _1709.x * cbModelParam._m0[1u].z;
        _1727 = _1709.y * cbModelParam._m0[1u].z;
        _1729 = _1709.z * cbModelParam._m0[1u].z;
    }
    float _1741 = ((((1.0 - _758) * ((_746 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_758 * _746)) * _722;
    float _1742 = _1741 * ((cbModelParam._m0[1u].w * (_1725 - _1626)) + _1626);
    float _1743 = _1741 * ((cbModelParam._m0[1u].w * (_1727 - _1628)) + _1628);
    float _1744 = _1741 * ((cbModelParam._m0[1u].w * (_1729 - _1630)) + _1630);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, _1742 * cbSceneParam._m0[91u].x));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1800 = _1787 / _1799;
    float _1801 = _1791 / _1799;
    float _1802 = _1795 / _1799;
    float _1949;
    float _1950;
    float _1951;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1829 = ((uint(_1802 > cbSceneParam._m0[59u].y) + uint(_1802 > cbSceneParam._m0[59u].x)) + uint(_1802 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1830 = _1829 + 43u;
        uint _1838 = _1829 + 44u;
        uint _1846 = _1829 + 45u;
        uint _1854 = _1829 + 46u;
        float _1865 = fma(_1799, cbSceneParam._m0[_1830].w, fma(_1795, cbSceneParam._m0[_1830].z, fma(_1791, cbSceneParam._m0[_1830].y, _1787 * cbSceneParam._m0[_1830].x)));
        float _1869 = fma(_1799, cbSceneParam._m0[_1838].w, fma(_1795, cbSceneParam._m0[_1838].z, fma(_1791, cbSceneParam._m0[_1838].y, _1787 * cbSceneParam._m0[_1838].x)));
        float _1877 = fma(_1799, cbSceneParam._m0[_1854].w, fma(_1795, cbSceneParam._m0[_1854].z, fma(_1791, cbSceneParam._m0[_1854].y, _1787 * cbSceneParam._m0[_1854].x)));
        float _1882 = cbSceneParam._m0[33u].z * _1877;
        float _1884 = cbSceneParam._m0[33u].w * _1877;
        float _1887 = fma(_1799, cbSceneParam._m0[_1846].w, fma(_1795, cbSceneParam._m0[_1846].z, fma(_1791, cbSceneParam._m0[_1846].y, _1787 * cbSceneParam._m0[_1846].x))) / _1877;
        float _1935 = (cbSceneParam._m0[33u].x - sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802))) * cbSceneParam._m0[33u].y;
        float _4056 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1942 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 + _1865) / _1877, (_1884 + _1869) / _1877), _1887), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 + _1865) / _1877, (_1869 - _1882) / _1877), _1887), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 - _1882) / _1877, (_1869 - _1884) / _1877), _1887), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 - _1884) / _1877, (_1882 + _1869) / _1877), _1887), 0.0)).x), vec4(0.25)));
        _1949 = 1.0 - (_1942 * cbSceneParam._m0[34u].x);
        _1950 = 1.0 - (_1942 * cbSceneParam._m0[34u].y);
        _1951 = 1.0 - (_1942 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1949 = 1.0;
        _1950 = 1.0;
        _1951 = 1.0;
    }
    float _2015;
    float _2017;
    float _2019;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2003 = fma(_1799, cbSceneParam._m0[63u].w, fma(_1795, cbSceneParam._m0[63u].z, fma(_1791, cbSceneParam._m0[63u].y, _1787 * cbSceneParam._m0[63u].x)));
        float _2004 = fma(_1799, cbSceneParam._m0[60u].w, fma(_1795, cbSceneParam._m0[60u].z, fma(_1791, cbSceneParam._m0[60u].y, _1787 * cbSceneParam._m0[60u].x))) / _2003;
        float _2005 = fma(_1799, cbSceneParam._m0[61u].w, fma(_1795, cbSceneParam._m0[61u].z, fma(_1791, cbSceneParam._m0[61u].y, _1787 * cbSceneParam._m0[61u].x))) / _2003;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2004 >= cbSceneParam._m0[64u].x) && (_2005 >= cbSceneParam._m0[64u].y)) && (_2004 <= cbSceneParam._m0[64u].z)) && (_2005 <= cbSceneParam._m0[64u].w))
        {
            float _2188 = fma(_1799, cbSceneParam._m0[62u].w, fma(_1795, cbSceneParam._m0[62u].z, fma(_1791, cbSceneParam._m0[62u].y, _1787 * cbSceneParam._m0[62u].x))) / _2003;
            float _2192 = isnan(cbSceneParam._m0[41u].w) ? _2188 : (isnan(_2188) ? cbSceneParam._m0[41u].w : max(_2188, cbSceneParam._m0[41u].w));
            float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802))) * cbSceneParam._m0[33u].y;
            float _4072 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
            float _2242 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2004, cbSceneParam._m0[33u].w + _2005), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2004, _2005 - cbSceneParam._m0[33u].z), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2004 - cbSceneParam._m0[33u].z, _2005 - cbSceneParam._m0[33u].w), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2004 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2005), _2192), 0.0)).x), vec4(0.25)));
            float _2246 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
            float _2247 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
            float _2248 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2248) ? _1951 : (isnan(_1951) ? _2248 : min(_1951, _2248));
            frontier_phi_34_33_ladder_1 = isnan(_2247) ? _1950 : (isnan(_1950) ? _2247 : min(_1950, _2247));
            frontier_phi_34_33_ladder_2 = isnan(_2246) ? _1949 : (isnan(_1949) ? _2246 : min(_1949, _2246));
        }
        else
        {
            frontier_phi_34_33_ladder = _1951;
            frontier_phi_34_33_ladder_1 = _1950;
            frontier_phi_34_33_ladder_2 = _1949;
        }
        _2015 = frontier_phi_34_33_ladder_2;
        _2017 = frontier_phi_34_33_ladder_1;
        _2019 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2015 = _1949;
        _2017 = _1950;
        _2019 = _1951;
    }
    uvec4 _2024 = floatBitsToUint(cbInstanceData._m0[_702 + 5u]);
    uint _2026 = _2024.x * 14u;
    float _2033 = (cbLight._m0[_2026 + 13u].x * (_722 + (-1.0))) + 1.0;
    uint _2034 = _2026 + 4u;
    float _2044 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_632, _633, _634));
    float _4103 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _2059 = ((cbLight._m0[_2034].x * _2015) * _2044) * _2057;
    float _2060 = ((cbLight._m0[_2034].y * _2017) * _2044) * _2057;
    float _2061 = ((cbLight._m0[_2034].z * _2019) * _2044) * _2057;
    uint _2063 = _2026 + 8u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _636) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_2026].x + _660;
    float _2079 = cbLight._m0[_2026].y + _661;
    float _2080 = cbLight._m0[_2026].z + _662;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2026].xyz));
    float _4114 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _2092 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2093 = dot(vec3(_632, _633, _634), vec3(_2085, _2086, _2087));
    float _4136 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2085, _2086, _2087));
    float _4147 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2077 * _2077;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2117 = 1.0 - _2077;
    float _2128 = (0.5 / (((_2092 * ((_2091 * _2117) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2117) + _2077) * _2091))) * _2091;
    float _4158 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2134 = (((cbLight._m0[_2063].x * _2015) * _2116) * _2130) * _2044;
    float _2138 = (((cbLight._m0[_2063].y * _2017) * _2116) * _2130) * _2044;
    float _2142 = (((cbLight._m0[_2063].z * _2019) * _2116) * _2130) * _2044;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_2024.y == 0u)
    {
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _361) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _360) / _2261)));
        float _2282 = (log2(_1802 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
        }
        else
        {
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            uint _2758 = 0u;
            uint _2767;
            bool _2768;
            for (;;)
            {
                _2767 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                _2768 = _2767 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2768)
                {
                    frontier_phi_58_pred = _2755;
                    frontier_phi_58_pred_1 = _2754;
                    frontier_phi_58_pred_2 = _2753;
                    frontier_phi_58_pred_3 = _2752;
                    frontier_phi_58_pred_4 = _2756;
                    frontier_phi_58_pred_5 = _2757;
                }
                else
                {
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    uint _2903;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2767;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    for (;;)
                    {
                        uint _2907 = uint(findLSB(_2903)) + (_2758 << 5u);
                        uint _2904 = (_2903 + 4294967295u) & _2903;
                        uint _2909 = _2907 * 48u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2929 = (_2907 * 48u) + 4u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2948 = (_2907 * 48u) + 8u;
                        vec3 _2959 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x));
                        float _2963 = _2923.x - _1800;
                        float _2964 = _2923.y - _1801;
                        float _2965 = _2923.z - _1802;
                        float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                        float _2969 = inversesqrt(_2966);
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2973 = dot(vec3(_683, _686, _689), vec3(_2970, _2971, _2972));
                        float _2978 = 1.0 - (_2966 * _2923.w);
                        float _4179 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2980 = sqrt(_2966) * _2942.w;
                        float _2983 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2973) + _2984;
                        float _2990 = _2980 * _2980;
                        float _2994 = ((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2979) / ((_2990 * 0.699999988079071044921875) + 1.0);
                        float _2998 = (-0.0) - _1800;
                        float _2999 = (-0.0) - _1801;
                        float _3000 = (-0.0) - _1802;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3014 = exp2(log2(1.0 / ((_2990 * 3.5) + 5.0)) * 0.25);
                        float _3015 = 1.0 - _746;
                        float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                        float _3023 = _3022 * _3022;
                        float _3024 = _3023 * _3023;
                        float _3025 = _3005 + _2970;
                        float _3026 = _3006 + _2971;
                        float _3027 = _3007 + _2972;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3035 = dot(vec3(_683, _686, _689), vec3(_3005, _3006, _3007));
                        float _4195 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _3039 = dot(vec3(_683, _686, _689), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                        float _4206 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                        float _3047 = _2983 * _3023;
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _2973) + _3048;
                        float _4217 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _3053 = 1.0 - _3023;
                        float _3063 = (0.5 / (((_3052 * ((_3038 * _3053) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3023) * _3038))) * _3052;
                        float _4228 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3074 = (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_3046 * _3046) * ((_2990 * 2.1991131305694580078125) + 3.141590118408203125))) * _2979;
                        _2832 = (_2994 * _2942.x) + _2900;
                        _2833 = (_2994 * _2942.y) + _2901;
                        _2834 = (_2994 * _2942.z) + _2902;
                        _2829 = (_3074 * _2959.x) + _2897;
                        _2830 = (_3074 * _2959.y) + _2898;
                        _2831 = (_3074 * _2959.z) + _2899;
                        if (_2904 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2904;
                        }
                    }
                    frontier_phi_58_pred = _2832;
                    frontier_phi_58_pred_1 = _2831;
                    frontier_phi_58_pred_2 = _2830;
                    frontier_phi_58_pred_3 = _2829;
                    frontier_phi_58_pred_4 = _2833;
                    frontier_phi_58_pred_5 = _2834;
                }
                _2558 = frontier_phi_58_pred;
                _2556 = frontier_phi_58_pred_1;
                _2554 = frontier_phi_58_pred_2;
                _2552 = frontier_phi_58_pred_3;
                _2560 = frontier_phi_58_pred_4;
                _2562 = frontier_phi_58_pred_5;
                uint _2759 = _2758 + 1u;
                if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2752 = _2552;
                    _2753 = _2554;
                    _2754 = _2556;
                    _2755 = _2558;
                    _2756 = _2560;
                    _2757 = _2562;
                    _2758 = _2759;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
        }
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.z;
        uint _2568 = (_2566 >> 8u) & 15u;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((4294967295u << _2568) & _2292) == 0u)
        {
            _2720 = _2551;
            _2722 = _2553;
            _2724 = _2555;
            _2726 = _2557;
            _2728 = _2559;
            _2730 = _2561;
        }
        else
        {
            float _2745 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
            float _2746 = _2745 * _1800;
            float _2747 = _2745 * _1801;
            float _2748 = _2745 * _1802;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2568 < ((_2566 >> 12u) & 15u))
            {
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2880 = _2551;
                float _2881 = _2553;
                float _2882 = _2555;
                float _2883 = _2557;
                float _2884 = _2559;
                float _2885 = _2561;
                uint _2886 = _2568;
                uint _2895;
                bool _2896;
                for (;;)
                {
                    _2895 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                    _2896 = _2895 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2896)
                    {
                        frontier_phi_64_pred = _2883;
                        frontier_phi_64_pred_1 = _2882;
                        frontier_phi_64_pred_2 = _2881;
                        frontier_phi_64_pred_3 = _2880;
                        frontier_phi_64_pred_4 = _2885;
                        frontier_phi_64_pred_5 = _2884;
                    }
                    else
                    {
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3092 = _2880;
                        float _3093 = _2881;
                        float _3094 = _2882;
                        float _3095 = _2883;
                        float _3096 = _2884;
                        float _3097 = _2885;
                        uint _3098 = _2895;
                        uint _3099;
                        vec4 _3124;
                        float _3125;
                        vec4 _3140;
                        vec3 _3152;
                        vec4 _3167;
                        vec4 _3182;
                        float _3229;
                        bool _3230;
                        for (;;)
                        {
                            uint _3109 = ((_2886 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3098));
                            _3099 = (_3098 + 4294967295u) & _3098;
                            uint _3111 = _3109 * 40u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3125 = _3124.w;
                            uint _3127 = (_3109 * 40u) + 4u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3109 * 40u) + 8u;
                            _3152 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x));
                            uint _3154 = (_3109 * 40u) + 16u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3109 * 40u) + 20u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3109 * 40u) + 24u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3204 = (_3109 * 40u) + 28u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3229 = fma(_1802, _3217.z, fma(_1801, _3217.y, _3217.x * _1800)) + _3217.w;
                            _3230 = !((fma(_1802, _3198.z, fma(_1801, _3198.y, _3198.x * _1800)) + _3198.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_3230)
                            {
                                float _3257 = _3124.x - _1800;
                                float _3258 = _3124.y - _1801;
                                float _3259 = _3124.z - _1802;
                                float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                                float _3263 = inversesqrt(_3260);
                                float _3264 = _3263 * _3257;
                                float _3265 = _3263 * _3258;
                                float _3266 = _3263 * _3259;
                                float _3270 = 1.0 - (_3260 / (_3125 * _3125));
                                float _4239 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3275 = sqrt(_3260) * _3140.w;
                                float _3277 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                                float _3278 = _3277 * _3277;
                                float _3281 = ((1.0 - _3278) * dot(vec3(_3264, _3265, _3266), vec3(_683, _686, _689))) + _3278;
                                float _3284 = _3275 * _3275;
                                float _3288 = (fma(_1802, _3167.z, fma(_1801, _3167.y, _3167.x * _1800)) + _3167.w) / _3229;
                                float _3289 = (fma(_1802, _3182.z, fma(_1801, _3182.y, _3182.x * _1800)) + _3182.w) / _3229;
                                float _3293 = 1.0 - dot(vec2(_3288, _3289), vec2(_3288, _3289));
                                float _4255 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3295 = _3294 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3271) / ((_3284 * 0.699999988079071044921875) + 1.0));
                                float _3307 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                                float _3308 = 1.0 - _746;
                                float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                                float _3316 = _3315 * _3315;
                                float _3317 = _3316 * _3316;
                                float _3318 = _3264 - _2746;
                                float _3319 = _3265 - _2747;
                                float _3320 = _3266 - _2748;
                                float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                                float _3328 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2746, (-0.0) - _2747, (-0.0) - _2748));
                                float _4266 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3332 = dot(vec3(_683, _686, _689), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                                float _4277 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                                float _3340 = _3277 * _3316;
                                float _3341 = _3340 * _3340;
                                float _3347 = ((1.0 - _3341) * dot(vec3(_683, _686, _689), vec3(_3264, _3265, _3266))) + _3341;
                                float _4288 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3349 = 1.0 - _3316;
                                float _3359 = (0.5 / (((_3348 * ((_3331 * _3349) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3316) * _3331))) * _3348;
                                float _4299 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3369 = (_3294 * _3271) * (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_3339 * _3339) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3295 * _3140.x;
                                frontier_phi_70_pred_1 = _3369 * _3152.z;
                                frontier_phi_70_pred_2 = _3369 * _3152.y;
                                frontier_phi_70_pred_3 = _3369 * _3152.x;
                                frontier_phi_70_pred_4 = _3295 * _3140.z;
                                frontier_phi_70_pred_5 = _3295 * _3140.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_70_pred;
                            _3375 = frontier_phi_70_pred_1;
                            _3374 = frontier_phi_70_pred_2;
                            _3373 = frontier_phi_70_pred_3;
                            _3378 = frontier_phi_70_pred_4;
                            _3377 = frontier_phi_70_pred_5;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            if (_3099 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3099;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _3082;
                        frontier_phi_64_pred_1 = _3081;
                        frontier_phi_64_pred_2 = _3080;
                        frontier_phi_64_pred_3 = _3079;
                        frontier_phi_64_pred_4 = _3084;
                        frontier_phi_64_pred_5 = _3083;
                    }
                    _2727 = frontier_phi_64_pred;
                    _2725 = frontier_phi_64_pred_1;
                    _2723 = frontier_phi_64_pred_2;
                    _2721 = frontier_phi_64_pred_3;
                    _2731 = frontier_phi_64_pred_4;
                    _2729 = frontier_phi_64_pred_5;
                    uint _2887 = _2886 + 1u;
                    if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2880 = _2721;
                        _2881 = _2723;
                        _2882 = _2725;
                        _2883 = _2727;
                        _2884 = _2729;
                        _2885 = _2731;
                        _2886 = _2887;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2731;
                frontier_phi_51_52_ladder_1 = _2729;
                frontier_phi_51_52_ladder_2 = _2725;
                frontier_phi_51_52_ladder_3 = _2723;
                frontier_phi_51_52_ladder_4 = _2727;
                frontier_phi_51_52_ladder_5 = _2721;
            }
            else
            {
                frontier_phi_51_52_ladder = _2561;
                frontier_phi_51_52_ladder_1 = _2559;
                frontier_phi_51_52_ladder_2 = _2555;
                frontier_phi_51_52_ladder_3 = _2553;
                frontier_phi_51_52_ladder_4 = _2557;
                frontier_phi_51_52_ladder_5 = _2551;
            }
            _2720 = frontier_phi_51_52_ladder_5;
            _2722 = frontier_phi_51_52_ladder_3;
            _2724 = frontier_phi_51_52_ladder_2;
            _2726 = frontier_phi_51_52_ladder_4;
            _2728 = frontier_phi_51_52_ladder_1;
            _2730 = frontier_phi_51_52_ladder;
        }
        float _2735 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
        _2305 = (_2735 * _2726) + _2059;
        _2307 = (_2735 * _2728) + _2060;
        _2309 = (_2735 * _2730) + _2061;
        _2311 = ((_2720 * 0.039999999105930328369140625) * _2735) + _2134;
        _2313 = ((_2722 * 0.039999999105930328369140625) * _2735) + _2138;
        _2315 = ((_2724 * 0.039999999105930328369140625) * _2735) + _2142;
    }
    else
    {
        _2305 = _2059;
        _2307 = _2060;
        _2309 = _2061;
        _2311 = _2134;
        _2313 = _2138;
        _2315 = _2142;
    }
    float _2335 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2336 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2337 = cbSceneParam._m0[86u].x * ((_360 / cbSceneParam._m0[86u].x) + (((10.0 / (_655 + 10.0)) * cbMtdParam._m0[12u].z) * dot(vec3(_632, _633, _634), vec3(_201, _202, _203))));
    float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
    float _2339 = isnan(_2336) ? _361 : (isnan(_361) ? _2336 : min(_361, _2336));
    vec4 _2341 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2338, _2339), 0.0);
    float _2343 = _2341.x;
    bool _2363 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2343)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2343))) > _655;
    float _2364 = _2363 ? _2338 : _360;
    float _2365 = _2363 ? _2339 : _361;
    vec4 _2367 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2364, _2365));
    vec4 _2373 = texture(sampler2D(g_ScreenSpaceShadowTexture, SS_WrapLinear), vec2(_2364, _2365));
    float _2375 = _2373.w;
    vec4 _2403 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2364, _2365));
    float _2405 = _2403.x;
    float _2425 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2405)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2405))) - _655;
    bool _2435 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2439 = (isnan(_2425) ? 0.0 : (isnan(0.0) ? _2425 : max(0.0, _2425))) * (-1.44269502162933349609375);
    float _4330 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4341 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4352 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2466 = 0.959999978542327880859375 - (exp2(log2(1.0 - _737) * 5.0) * 0.959999978542327880859375);
    float _2469 = ((((((((((cbMtdParam._m0[10u].x * _566) * _592.x) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _608) * _2375) * cbSceneParam._m0[72u].z) + _2367.x) * _2466) * exp2(_2439 * (_2435 ? 0.0 : (cbMtdParam._m0[18u].y + cbMtdParam._m0[17u].z)))) * cbSceneParam._m0[72u].w;
    float _2472 = ((((((((((cbMtdParam._m0[10u].y * _566) * _592.y) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _608) * _2375) * cbSceneParam._m0[72u].z) + _2367.y) * _2466) * exp2(_2439 * (_2435 ? 0.0 : (cbMtdParam._m0[18u].z + cbMtdParam._m0[17u].w)))) * cbSceneParam._m0[72u].w;
    float _2475 = ((((((((((cbMtdParam._m0[10u].z * _566) * _592.z) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _608) * _2375) * cbSceneParam._m0[72u].z) + _2367.z) * _2466) * exp2(_2439 * (_2435 ? 0.0 : (cbMtdParam._m0[18u].w + cbMtdParam._m0[18u].x)))) * cbSceneParam._m0[72u].w;
    float _2497 = _360 / cbSceneParam._m0[86u].x;
    float _2498 = _361 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2576 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2577 = _2576 / _655;
        float _2588 = _2577 * _271;
        float _2589 = _272 * _2577;
        float _2590 = (-0.0) - _2589;
        float _2591 = _2577 * _273;
        float _2593 = (cbSceneParam._m0[77u].w * _2590) / _2576;
        float _2594 = _2593 + cbSceneParam._m0[79u].w;
        float _2595 = cbSceneParam._m0[79u].w - _2589;
        float _2601 = sqrt(((_2588 * _2588) + (_2589 * _2589)) + (_2591 * _2591));
        float _2604 = (1.0 - (cbSceneParam._m0[77u].w / _2576)) * _2601;
        float _2609 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2610 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2842;
        if (abs((_2590 - _2593) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2842 = ((((_2594 > 0.0) ? exp2(_2609 * _2594) : (2.0 - exp2(_2610 * _2594))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2604;
        }
        else
        {
            float _2781 = 1.0 / cbSceneParam._m0[80u].x;
            float _2782 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : max(_2594, _2595));
            float _2783 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : min(_2594, _2595));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            _2842 = ((abs(_2601 / _2590) * cbSceneParam._m0[80u].y) * ((((_2792 - _2793) * 2.0) - ((exp2(_2609 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)))) - exp2(_2609 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))))) * _2781)) - ((exp2(_2610 * _2792) - exp2(_2610 * _2793)) * _2781))) + (_2604 * cbSceneParam._m0[80u].z);
        }
        vec4 _2844 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2853 = exp2((_2842 * (-1.44269502162933349609375)) * (1.0 - _2844.w));
        float _2854 = log2(_2853);
        float _2870 = log2(_2517);
        _2612 = (exp2(_2870 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].x)) * _2844.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2614 = (exp2(_2870 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].y)) * _2844.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2616 = (exp2(_2870 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].z)) * _2844.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2618 = _2853 * _2517;
    }
    else
    {
        _2612 = _2514;
        _2614 = _2515;
        _2616 = _2516;
        _2618 = _2517;
    }
    bool _2630 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2631 = log2(_2618);
    float _2638 = exp2(_2631 * cbSceneParam._m0[78u].x) * ((_2469 + ((_2311 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1535)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2305 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _722))) - _2469) * _575));
    float _2639 = exp2(_2631 * cbSceneParam._m0[78u].y) * ((_2472 + ((_2313 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1535)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2307 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _722))) - _2472) * _575));
    float _2640 = exp2(_2631 * cbSceneParam._m0[78u].z) * ((_2475 + ((_2315 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1535)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2309 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _722))) - _2475) * _575));
    vec4 _2648 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_360, _361));
    float _2650 = _2648.x;
    float _2671 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2650)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2650))) - _655) * cbMtdParam._m0[11u].x;
    float _4403 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (cbInstanceData._m0[_702 + 6u].w * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)));
    float _2682 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2682 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.y = _2682 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2614)));
    SV_Target.z = _2682 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.w = _2673;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2673;
}


