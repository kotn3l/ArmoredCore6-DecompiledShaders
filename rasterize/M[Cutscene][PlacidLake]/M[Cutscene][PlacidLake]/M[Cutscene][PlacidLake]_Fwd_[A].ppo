#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1115;
float _3283;
float _3284;
float _3285;
float _3286;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _199 = _198 * _191;
    float _200 = _198 * _192;
    float _201 = _198 * _193;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _293 = cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y;
    float _296 = (sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[14u].y) / (isnan(0.001000000047497451305389404296875) ? _293 : (isnan(_293) ? 0.001000000047497451305389404296875 : max(_293, 0.001000000047497451305389404296875)));
    float _297 = _296 / cbMtdParam._m0[15u].y;
    float _3300 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _302 = cbMtdParam._m0[15u].z * (1.0 - (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))));
    float _311 = (cbMtdParam._m0[13u].x + _296) * cbMtdParam._m0[13u].y;
    float _3311 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _315 = ((isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    vec4 _328 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3322 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))));
    float _358 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _359 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _369 = ((_358 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _370 = 1.0 - ((_359 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _372 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_358, _359), 0.0);
    float _374 = _372.x;
    float _415 = fma(_374, cbSceneParam._m0[15u].z, fma(_370, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _369)) + cbSceneParam._m0[15u].w;
    float _416 = (fma(_374, cbSceneParam._m0[12u].z, fma(_370, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _369)) + cbSceneParam._m0[12u].w) / _415;
    float _417 = (fma(_374, cbSceneParam._m0[13u].z, fma(_370, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _369)) + cbSceneParam._m0[13u].w) / _415;
    float _418 = (fma(_374, cbSceneParam._m0[14u].z, fma(_370, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _369)) + cbSceneParam._m0[14u].w) / _415;
    float _450 = 1.0 / cbMtdParam._m0[12u].y;
    float _451 = ((fma(_418, cbSceneParam._m0[20u].z, fma(_417, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _416)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) * _450;
    float _452 = _450 * ((fma(_418, cbSceneParam._m0[22u].z, fma(_417, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _416)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z);
    float _453 = _451 * cbMtdParam._m0[16u].z;
    float _454 = _452 * cbMtdParam._m0[16u].w;
    float _468 = cbMtdParam._m0[15u].w * cbMtdParam._m0[16u].x;
    vec4 _481 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x)) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y)) + cbTextureTilingScale._m0[2u].w));
    float _486 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].w;
    float _489 = (_481.x * 0.5) + (-0.25);
    float _492 = (_481.y * 0.5) + (-0.25);
    float _493 = _492 * _468;
    float _495 = (-0.0) - (_468 * _489);
    float _497 = fract(_486);
    float _499 = fract(_486 + 0.5);
    float _510 = abs((_497 * 2.0) + (-1.0));
    vec4 _526 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_497 * _495) + _453) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_493 * _497) + _454) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _528 = _526.x;
    vec4 _529 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_499 * _495) + _453) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_493 * _499) + _454) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _534 = _492 * cbMtdParam._m0[16u].x;
    float _536 = (-0.0) - (cbMtdParam._m0[16u].x * _489);
    vec4 _553 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_497 * _536) + _451) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_534 * _497) + _452) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _555 = _553.x;
    vec4 _556 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_499 * _536) + _451) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_534 * _499) + _452) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _564 = (((((_529.x - _528) * _510) + _528) + _555) + ((_556.x - _555) * _510)) * cbMtdParam._m0[11u].w;
    float _570 = (cbMtdParam._m0[13u].w + _296) * cbMtdParam._m0[13u].z;
    float _3333 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _572 = (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * cbMtdParam._m0[12u].w;
    float _3344 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _585 = isnan(cbInstanceData._m0[8u].x) ? _358 : (isnan(_358) ? cbInstanceData._m0[8u].x : max(_358, cbInstanceData._m0[8u].x));
    float _586 = isnan(cbInstanceData._m0[8u].y) ? _359 : (isnan(_359) ? cbInstanceData._m0[8u].y : max(_359, cbInstanceData._m0[8u].y));
    vec4 _590 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _585 : (isnan(_585) ? cbInstanceData._m0[8u].z : min(_585, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _586 : (isnan(_586) ? cbInstanceData._m0[8u].w : min(_586, cbInstanceData._m0[8u].w))));
    float _604 = (POSITION_1.w - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[16u].y);
    float _3375 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _606 = 1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)));
    float _619 = fma(_344, _205 * NORMAL.x, fma(_338, _212 * TANGENT.x, _336 * _199));
    float _622 = fma(_344, _205 * NORMAL.y, fma(_338, _212 * TANGENT.y, _336 * _200));
    float _625 = fma(_344, _205 * NORMAL.z, fma(_338, _212 * TANGENT.z, _336 * _201));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    float _630 = _629 * _619;
    float _631 = _629 * _622;
    float _632 = _629 * _625;
    float _3386 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3397 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _634 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3419 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3430 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _658 = _269 * _657;
    float _659 = _270 * _657;
    float _660 = _271 * _657;
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_632, cbSceneParam._m0[5u].z, fma(_631, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _630));
    float _697 = fma(_632, cbSceneParam._m0[6u].z, fma(_631, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _630));
    float _700 = fma(_632, cbSceneParam._m0[7u].z, fma(_631, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _630));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _714 = _713 + 9u;
    uint _715 = _714 + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3441 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _737 = _734.x * TEXCOORD.z;
    float _738 = dot(vec3(_630, _631, _632), vec3(_658, _659, _660));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _630) - _658;
    float _746 = (_741 * _631) - _659;
    float _747 = (_741 * _632) - _660;
    float _751 = abs(dot(vec3(_658, _659, _660), vec3(_630, _631, _632)));
    float _3474 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _761 = sqrt(_634);
    float _773 = exp2((_761 * 5.0) * log2(1.0 - (_752 * 0.999000012874603271484375))) / (4.0 - (_761 * 3.0));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _840 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _844 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _848 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _872 = _805 + _630;
        float _873 = _809 + _631;
        float _874 = _813 + _632;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _840;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _844;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _848;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_840 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_844 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_848 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_630, _631, _632), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3522 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_630, _631, _632), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3555 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_630, _631, _632), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3588 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1159 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1163 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1186 = _805 + _630;
        float _1187 = _809 + _631;
        float _1188 = _813 + _632;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_630, _631, _632), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3651 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_630, _631, _632), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3684 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_630, _631, _632), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3717 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1115;
        _1425 = _1115;
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = _1115;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1127)) + _1127;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1128)) + _1128;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1129)) + _1129;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _745 * 0.5;
    float _1493 = _746 * 0.5;
    float _1494 = _747 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1622 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1625 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1896;
        if (_1622 > 0.0)
        {
            _1896 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1896 = frontier_phi_23_19_ladder;
        }
        float _2379;
        if (_1625 > 0.0)
        {
            _2379 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2379 = frontier_phi_37_30_ladder;
        }
        float _2381 = isnan(_1896) ? _1653 : (isnan(_1653) ? _1896 : min(_1653, _1896));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1619) + _1608;
        float _2387 = (_2382 * _1622) + _1612;
        float _2388 = (_2382 * _1625) + _1616;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_13_37_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_37_ladder_2;
        _1643 = frontier_phi_13_37_ladder_1;
        _1645 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1561);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1718 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1721 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1901;
        if (_1715 > 0.0)
        {
            _1901 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1901 = frontier_phi_25_21_ladder;
        }
        float _2405;
        if (_1718 > 0.0)
        {
            _2405 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2405 = frontier_phi_39_32_ladder;
        }
        float _2596;
        if (_1721 > 0.0)
        {
            _2596 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_57_50_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_57_50_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_57_50_ladder = 5000.0;
            }
            _2596 = frontier_phi_57_50_ladder;
        }
        float _2598 = isnan(_2405) ? _1901 : (isnan(_1901) ? _2405 : min(_1901, _2405));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1715) + _1704;
        float _2604 = (_2599 * _1718) + _1708;
        float _2605 = (_2599 * _1721) + _1712;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_22_57_ladder;
        float frontier_phi_22_57_ladder_1;
        float frontier_phi_22_57_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_22_57_ladder = 0.0;
            frontier_phi_22_57_ladder_1 = 0.0;
            frontier_phi_22_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_57_ladder = _2849.x * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_1 = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_2 = _2849.y * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_22_57_ladder;
        _1742 = frontier_phi_22_57_ladder_2;
        _1744 = frontier_phi_22_57_ladder_1;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1650);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1756 = ((((1.0 - _773) * ((_761 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_773 * _761)) * _737;
    float _1757 = _1756 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1758 = _1756 * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1759 = _1756 * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    uvec4 _1778 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1780 = _1778.x * 14u;
    float _1787 = (cbLight._m0[_1780 + 13u].x * (_737 + (-1.0))) + 1.0;
    uint _1788 = _1780 + 4u;
    float _1795 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_630, _631, _632));
    float _3848 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.3183098733425140380859375;
    float _1810 = (cbLight._m0[_1788].x * _1795) * _1808;
    float _1811 = (_1795 * cbLight._m0[_1788].y) * _1808;
    float _1812 = (_1795 * cbLight._m0[_1788].z) * _1808;
    uint _1814 = _1780 + 8u;
    float _1827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _634) * 0.949999988079071044921875);
    float _1828 = _1827 * _1827;
    float _1829 = cbLight._m0[_1780].x + _658;
    float _1830 = cbLight._m0[_1780].y + _659;
    float _1831 = cbLight._m0[_1780].z + _660;
    float _1835 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
    float _1836 = _1835 * _1829;
    float _1837 = _1835 * _1830;
    float _1838 = _1835 * _1831;
    float _1839 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_1780].xyz));
    float _3859 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1843 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1844 = dot(vec3(_630, _631, _632), vec3(_1836, _1837, _1838));
    float _3881 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1836, _1837, _1838));
    float _3892 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1828 * _1828;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1867 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1868 = 1.0 - _1828;
    float _1879 = (0.5 / (((_1843 * ((_1842 * _1868) + _1828)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _1868) + _1828) * _1842))) * _1842;
    float _3903 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1884 = ((_1867 * cbLight._m0[_1814].x) * _1881) * _1795;
    float _1887 = ((_1867 * cbLight._m0[_1814].y) * _1881) * _1795;
    float _1890 = ((_1867 * cbLight._m0[_1814].z) * _1881) * _1795;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    if (_1778.y == 0u)
    {
        float _1945 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1945;
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1945;
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1945;
        uvec4 _1960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1961 = _1960.x;
        uint _1972 = uint((float(_1960.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _1961))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _1961)));
        float _1982 = (log2(_1948 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1983 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        uint _1986 = uint(isnan(14.0) ? _1983 : (isnan(_1983) ? 14.0 : min(_1983, 14.0)));
        uvec4 _1991 = texelFetch(g_lightClusterGridBuffer, int(((_1986 << 2u) + (_1972 << 6u)) >> 2u));
        uint _1992 = _1991.x;
        uint _1993 = _1960.z;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        if (((((1u << ((_1993 >> 4u) & 15u)) + 4294967295u) & _1992) == 0u) || ((_1993 & 240u) == 0u))
        {
            _2227 = 0.0;
            _2229 = 0.0;
            _2231 = 0.0;
            _2233 = 0.0;
            _2235 = 0.0;
            _2237 = 0.0;
        }
        else
        {
            float _2228;
            float _2230;
            float _2232;
            float _2234;
            float _2236;
            float _2238;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            uint _2448 = 0u;
            uint _2457;
            bool _2458;
            for (;;)
            {
                _2457 = texelFetch(g_lightClassification, int((((_1986 << 5u) + (_1972 << 9u)) + (_2448 << 2u)) >> 2u)).x;
                _2458 = _2457 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2458)
                {
                    frontier_phi_52_pred = _2446;
                    frontier_phi_52_pred_1 = _2447;
                    frontier_phi_52_pred_2 = _2445;
                    frontier_phi_52_pred_3 = _2444;
                    frontier_phi_52_pred_4 = _2443;
                    frontier_phi_52_pred_5 = _2442;
                }
                else
                {
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    uint _2645;
                    _2639 = _2442;
                    _2640 = _2443;
                    _2641 = _2444;
                    _2642 = _2445;
                    _2643 = _2446;
                    _2644 = _2447;
                    _2645 = _2457;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2649 = uint(findLSB(_2645)) + (_2448 << 5u);
                        uint _2646 = (_2645 + 4294967295u) & _2645;
                        uint _2651 = _2649 * 48u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2671 = (_2649 * 48u) + 4u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2690 = (_2649 * 48u) + 8u;
                        vec3 _2701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x));
                        float _2705 = _2665.x - _1946;
                        float _2706 = _2665.y - _1947;
                        float _2707 = _2665.z - _1948;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2715 = dot(vec3(_694, _697, _700), vec3(_2712, _2713, _2714));
                        float _2720 = 1.0 - (_2708 * _2665.w);
                        float _3924 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                        float _2722 = sqrt(_2708) * _2684.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2715) + _2726;
                        float _2732 = _2722 * _2722;
                        float _2736 = ((isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))) * _2721) / ((_2732 * 0.699999988079071044921875) + 1.0);
                        float _2740 = (-0.0) - _1946;
                        float _2741 = (-0.0) - _1947;
                        float _2742 = (-0.0) - _1948;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2757 = exp2(log2(1.0 / ((_2732 * 3.5) + 5.0)) * 0.25);
                        float _2758 = 1.0 - _761;
                        float _2765 = sqrt(1.0 - ((1.0 - (_2758 * _2758)) * (1.0 - (_2757 * _2757))));
                        float _2766 = _2765 * _2765;
                        float _2767 = _2766 * _2766;
                        float _2768 = _2747 + _2712;
                        float _2769 = _2748 + _2713;
                        float _2770 = _2749 + _2714;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2778 = dot(vec3(_694, _697, _700), vec3(_2747, _2748, _2749));
                        float _3940 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                        float _2782 = dot(vec3(_694, _697, _700), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770));
                        float _3951 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2789 = ((_2785 * _2785) * (_2767 + (-1.0))) + 1.0;
                        float _2790 = _2725 * _2766;
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2715) + _2791;
                        float _3962 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2796 = 1.0 - _2766;
                        float _2806 = (0.5 / (((_2795 * ((_2781 * _2796) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2795 * _2796) + _2766) * _2781))) * _2795;
                        float _3973 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2817 = (((_2767 * 3.1415927410125732421875) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) / ((_2789 * _2789) * ((_2732 * 2.1991131305694580078125) + 3.141590118408203125))) * _2721;
                        _2542 = (_2736 * _2684.x) + _2642;
                        _2543 = (_2736 * _2684.y) + _2643;
                        _2544 = (_2736 * _2684.z) + _2644;
                        _2539 = (_2817 * _2701.x) + _2639;
                        _2540 = (_2817 * _2701.y) + _2640;
                        _2541 = (_2817 * _2701.z) + _2641;
                        if (_2646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2639 = _2539;
                            _2640 = _2540;
                            _2641 = _2541;
                            _2642 = _2542;
                            _2643 = _2543;
                            _2644 = _2544;
                            _2645 = _2646;
                        }
                    }
                    frontier_phi_52_pred = _2543;
                    frontier_phi_52_pred_1 = _2544;
                    frontier_phi_52_pred_2 = _2542;
                    frontier_phi_52_pred_3 = _2541;
                    frontier_phi_52_pred_4 = _2540;
                    frontier_phi_52_pred_5 = _2539;
                }
                _2236 = frontier_phi_52_pred;
                _2238 = frontier_phi_52_pred_1;
                _2234 = frontier_phi_52_pred_2;
                _2232 = frontier_phi_52_pred_3;
                _2230 = frontier_phi_52_pred_4;
                _2228 = frontier_phi_52_pred_5;
                uint _2449 = _2448 + 1u;
                if (_2449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2442 = _2228;
                    _2443 = _2230;
                    _2444 = _2232;
                    _2445 = _2234;
                    _2446 = _2236;
                    _2447 = _2238;
                    _2448 = _2449;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2227 = _2228;
            _2229 = _2230;
            _2231 = _2232;
            _2233 = _2234;
            _2235 = _2236;
            _2237 = _2238;
        }
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.z;
        uint _2244 = (_2242 >> 8u) & 15u;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((4294967295u << _2244) & _1992) == 0u)
        {
            _2410 = _2227;
            _2412 = _2229;
            _2414 = _2231;
            _2416 = _2233;
            _2418 = _2235;
            _2420 = _2237;
        }
        else
        {
            float _2435 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
            float _2436 = _2435 * _1946;
            float _2437 = _2435 * _1947;
            float _2438 = _2435 * _1948;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2244 < ((_2242 >> 12u) & 15u))
            {
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2622 = _2227;
                float _2623 = _2229;
                float _2624 = _2231;
                float _2625 = _2233;
                float _2626 = _2235;
                float _2627 = _2237;
                uint _2628 = _2244;
                uint _2637;
                bool _2638;
                for (;;)
                {
                    _2637 = texelFetch(g_lightClassification, int((((_1986 << 5u) + (_1972 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                    _2638 = _2637 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2638)
                    {
                        frontier_phi_66_pred = _2627;
                        frontier_phi_66_pred_1 = _2626;
                        frontier_phi_66_pred_2 = _2625;
                        frontier_phi_66_pred_3 = _2624;
                        frontier_phi_66_pred_4 = _2623;
                        frontier_phi_66_pred_5 = _2622;
                    }
                    else
                    {
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _2867 = _2622;
                        float _2868 = _2623;
                        float _2869 = _2624;
                        float _2870 = _2625;
                        float _2871 = _2626;
                        float _2872 = _2627;
                        uint _2873 = _2637;
                        uint _2874;
                        vec4 _2899;
                        float _2900;
                        vec4 _2915;
                        vec3 _2927;
                        vec4 _2942;
                        vec4 _2957;
                        float _3004;
                        bool _3005;
                        for (;;)
                        {
                            uint _2884 = ((_2628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2873));
                            _2874 = (_2873 + 4294967295u) & _2873;
                            uint _2886 = _2884 * 40u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2900 = _2899.w;
                            uint _2902 = (_2884 * 40u) + 4u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2884 * 40u) + 8u;
                            _2927 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x));
                            uint _2929 = (_2884 * 40u) + 16u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2944 = (_2884 * 40u) + 20u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2960 = (_2884 * 40u) + 24u;
                            vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2979 = (_2884 * 40u) + 28u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            _3004 = fma(_1948, _2992.z, fma(_1947, _2992.y, _2992.x * _1946)) + _2992.w;
                            _3005 = !((fma(_1948, _2973.z, fma(_1947, _2973.y, _2973.x * _1946)) + _2973.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3005)
                            {
                                float _3032 = _2899.x - _1946;
                                float _3033 = _2899.y - _1947;
                                float _3034 = _2899.z - _1948;
                                float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                                float _3038 = inversesqrt(_3035);
                                float _3039 = _3038 * _3032;
                                float _3040 = _3038 * _3033;
                                float _3041 = _3038 * _3034;
                                float _3045 = 1.0 - (_3035 / (_2900 * _2900));
                                float _3984 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _3050 = sqrt(_3035) * _2915.w;
                                float _3052 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                                float _3053 = _3052 * _3052;
                                float _3056 = ((1.0 - _3053) * dot(vec3(_3039, _3040, _3041), vec3(_694, _697, _700))) + _3053;
                                float _3059 = _3050 * _3050;
                                float _3063 = (fma(_1948, _2942.z, fma(_1947, _2942.y, _2942.x * _1946)) + _2942.w) / _3004;
                                float _3064 = (fma(_1948, _2957.z, fma(_1947, _2957.y, _2957.x * _1946)) + _2957.w) / _3004;
                                float _3068 = 1.0 - dot(vec2(_3063, _3064), vec2(_3063, _3064));
                                float _4000 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _3070 = _3069 * (((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3046) / ((_3059 * 0.699999988079071044921875) + 1.0));
                                float _3082 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                                float _3083 = 1.0 - _761;
                                float _3090 = sqrt(1.0 - ((1.0 - (_3083 * _3083)) * (1.0 - (_3082 * _3082))));
                                float _3091 = _3090 * _3090;
                                float _3092 = _3091 * _3091;
                                float _3093 = _3039 - _2436;
                                float _3094 = _3040 - _2437;
                                float _3095 = _3041 - _2438;
                                float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                                float _3103 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2436, (-0.0) - _2437, (-0.0) - _2438));
                                float _4011 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3107 = dot(vec3(_694, _697, _700), vec3(_3099 * _3093, _3099 * _3094, _3099 * _3095));
                                float _4022 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _3114 = ((_3110 * _3110) * (_3092 + (-1.0))) + 1.0;
                                float _3115 = _3052 * _3091;
                                float _3116 = _3115 * _3115;
                                float _3122 = ((1.0 - _3116) * dot(vec3(_694, _697, _700), vec3(_3039, _3040, _3041))) + _3116;
                                float _4033 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3124 = 1.0 - _3091;
                                float _3134 = (0.5 / (((_3123 * ((_3106 * _3124) + _3091)) + 9.9999999392252902907785028219223e-09) + (((_3123 * _3124) + _3091) * _3106))) * _3123;
                                float _4044 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3144 = (_3069 * _3046) * (((_3092 * 3.1415927410125732421875) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) / ((_3114 * _3114) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _3070 * _2915.x;
                                frontier_phi_72_pred_1 = _3070 * _2915.z;
                                frontier_phi_72_pred_2 = _3070 * _2915.y;
                                frontier_phi_72_pred_3 = _3144 * _2927.z;
                                frontier_phi_72_pred_4 = _3144 * _2927.y;
                                frontier_phi_72_pred_5 = _3144 * _2927.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3151 = frontier_phi_72_pred;
                            _3153 = frontier_phi_72_pred_1;
                            _3152 = frontier_phi_72_pred_2;
                            _3150 = frontier_phi_72_pred_3;
                            _3149 = frontier_phi_72_pred_4;
                            _3148 = frontier_phi_72_pred_5;
                            _2857 = _3151 + _2870;
                            _2858 = _3152 + _2871;
                            _2859 = _3153 + _2872;
                            _2854 = _3148 + _2867;
                            _2855 = _3149 + _2868;
                            _2856 = _3150 + _2869;
                            if (_2874 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2874;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2859;
                        frontier_phi_66_pred_1 = _2858;
                        frontier_phi_66_pred_2 = _2857;
                        frontier_phi_66_pred_3 = _2856;
                        frontier_phi_66_pred_4 = _2855;
                        frontier_phi_66_pred_5 = _2854;
                    }
                    _2421 = frontier_phi_66_pred;
                    _2419 = frontier_phi_66_pred_1;
                    _2417 = frontier_phi_66_pred_2;
                    _2415 = frontier_phi_66_pred_3;
                    _2413 = frontier_phi_66_pred_4;
                    _2411 = frontier_phi_66_pred_5;
                    uint _2629 = _2628 + 1u;
                    if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2622 = _2411;
                        _2623 = _2413;
                        _2624 = _2415;
                        _2625 = _2417;
                        _2626 = _2419;
                        _2627 = _2421;
                        _2628 = _2629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2413;
                frontier_phi_41_42_ladder_1 = _2421;
                frontier_phi_41_42_ladder_2 = _2419;
                frontier_phi_41_42_ladder_3 = _2417;
                frontier_phi_41_42_ladder_4 = _2415;
                frontier_phi_41_42_ladder_5 = _2411;
            }
            else
            {
                frontier_phi_41_42_ladder = _2229;
                frontier_phi_41_42_ladder_1 = _2237;
                frontier_phi_41_42_ladder_2 = _2235;
                frontier_phi_41_42_ladder_3 = _2233;
                frontier_phi_41_42_ladder_4 = _2231;
                frontier_phi_41_42_ladder_5 = _2227;
            }
            _2410 = frontier_phi_41_42_ladder_5;
            _2412 = frontier_phi_41_42_ladder;
            _2414 = frontier_phi_41_42_ladder_4;
            _2416 = frontier_phi_41_42_ladder_3;
            _2418 = frontier_phi_41_42_ladder_2;
            _2420 = frontier_phi_41_42_ladder_1;
        }
        float _2425 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2005 = (_2425 * _2416) + _1810;
        _2007 = (_2425 * _2418) + _1811;
        _2009 = (_2425 * _2420) + _1812;
        _2011 = ((_2410 * 0.039999999105930328369140625) * _2425) + _1884;
        _2013 = ((_2412 * 0.039999999105930328369140625) * _2425) + _1887;
        _2015 = ((_2414 * 0.039999999105930328369140625) * _2425) + _1890;
    }
    else
    {
        _2005 = _1810;
        _2007 = _1811;
        _2009 = _1812;
        _2011 = _1884;
        _2013 = _1887;
        _2015 = _1890;
    }
    float _2035 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2036 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2037 = cbSceneParam._m0[86u].x * ((_672 / cbSceneParam._m0[86u].x) + (((10.0 / (_653 + 10.0)) * cbMtdParam._m0[12u].z) * dot(vec3(_630, _631, _632), vec3(_199, _200, _201))));
    float _2038 = isnan(_2035) ? _2037 : (isnan(_2037) ? _2035 : min(_2037, _2035));
    float _2039 = isnan(_2036) ? _673 : (isnan(_673) ? _2036 : min(_673, _2036));
    vec4 _2041 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2038, _2039), 0.0);
    float _2043 = _2041.x;
    bool _2063 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2043)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2043))) > _653;
    float _2064 = _2063 ? _2038 : _672;
    float _2065 = _2063 ? _2039 : _673;
    vec4 _2067 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2064, _2065));
    vec4 _2096 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2064, _2065));
    float _2098 = _2096.x;
    float _2118 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2098)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2098))) - _653;
    bool _2128 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2132 = (isnan(_2118) ? 0.0 : (isnan(0.0) ? _2118 : max(0.0, _2118))) * (-1.44269502162933349609375);
    float _4075 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4086 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4097 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2159 = 0.959999978542327880859375 - (exp2(log2(1.0 - _752) * 5.0) * 0.959999978542327880859375);
    float _2162 = (((((((((cbMtdParam._m0[10u].x * _564) * _590.x) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _606) * cbSceneParam._m0[72u].z) + _2067.x) * _2159) * exp2(_2132 * (_2128 ? 0.0 : (cbMtdParam._m0[18u].y + cbMtdParam._m0[17u].z)))) * cbSceneParam._m0[72u].w;
    float _2165 = (((((((((cbMtdParam._m0[10u].y * _564) * _590.y) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _606) * cbSceneParam._m0[72u].z) + _2067.y) * _2159) * exp2(_2132 * (_2128 ? 0.0 : (cbMtdParam._m0[18u].z + cbMtdParam._m0[17u].w)))) * cbSceneParam._m0[72u].w;
    float _2168 = (((((((((cbMtdParam._m0[10u].z * _564) * _590.z) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _606) * cbSceneParam._m0[72u].z) + _2067.z) * _2159) * exp2(_2132 * (_2128 ? 0.0 : (cbMtdParam._m0[18u].w + cbMtdParam._m0[18u].x)))) * cbSceneParam._m0[72u].w;
    float _2176 = (_2162 + ((_2011 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2005 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _737))) - _2162) * _573);
    float _2178 = (_2165 + ((_2013 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2007 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _737))) - _2165) * _573);
    float _2180 = (_2168 + ((_2015 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2009 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _737))) - _2168) * _573);
    float _2185 = cbInstanceData._m0[_713 + 6u].w * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)));
    float _2190 = _672 / cbSceneParam._m0[86u].x;
    float _2191 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2205 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2190, _2191, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2207 = _2205.x;
    float _2208 = _2205.y;
    float _2209 = _2205.z;
    float _2210 = _2205.w;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2252 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2253 = _2252 / _653;
        float _2264 = _2253 * _269;
        float _2265 = _270 * _2253;
        float _2266 = (-0.0) - _2265;
        float _2267 = _2253 * _271;
        float _2269 = (cbSceneParam._m0[77u].w * _2266) / _2252;
        float _2270 = _2269 + cbSceneParam._m0[79u].w;
        float _2271 = cbSceneParam._m0[79u].w - _2265;
        float _2277 = sqrt(((_2264 * _2264) + (_2265 * _2265)) + (_2267 * _2267));
        float _2280 = (1.0 - (cbSceneParam._m0[77u].w / _2252)) * _2277;
        float _2286 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2287 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2552;
        if (abs((_2266 - _2269) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2552 = ((((_2270 > 0.0) ? exp2(_2286 * _2270) : (2.0 - exp2(_2287 * _2270))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2280;
        }
        else
        {
            float _2471 = 1.0 / cbSceneParam._m0[80u].x;
            float _2472 = isnan(_2271) ? _2270 : (isnan(_2270) ? _2271 : max(_2270, _2271));
            float _2473 = isnan(_2271) ? _2270 : (isnan(_2270) ? _2271 : min(_2270, _2271));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            float _2483 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : min(_2473, 0.0));
            _2552 = ((abs(_2277 / _2266) * cbSceneParam._m0[80u].y) * ((((_2482 - _2483) * 2.0) - ((exp2(_2286 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)))) - exp2(_2286 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0))))) * _2471)) - ((exp2(_2287 * _2482) - exp2(_2287 * _2483)) * _2471))) + (_2280 * cbSceneParam._m0[80u].z);
        }
        vec4 _2554 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2190, _2191, 1.0), 0.0);
        float _2563 = exp2((_2552 * (-1.44269502162933349609375)) * (1.0 - _2554.w));
        float _2564 = log2(_2563);
        float _2580 = log2(_2210);
        _2289 = (exp2(_2580 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].x)) * _2554.x) / cbSceneParam._m0[78u].x)) + _2207;
        _2291 = (exp2(_2580 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].y)) * _2554.y) / cbSceneParam._m0[78u].y)) + _2208;
        _2293 = (exp2(_2580 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].z)) * _2554.z) / cbSceneParam._m0[78u].z)) + _2209;
        _2295 = _2563 * _2210;
    }
    else
    {
        _2289 = _2207;
        _2291 = _2208;
        _2293 = _2209;
        _2295 = _2210;
    }
    bool _2590;
    float _2350;
    vec4 _2353;
    float _2355;
    vec4 _2357;
    float _2365;
    float _2366;
    float _2367;
    float _2368;
    bool _2378;
    for (;;)
    {
        bool _2307 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2308 = log2(_2295);
        float _2315 = exp2(_2308 * cbSceneParam._m0[78u].x) * _2176;
        float _2316 = exp2(_2308 * cbSceneParam._m0[78u].y) * _2178;
        float _2317 = exp2(_2308 * cbSceneParam._m0[78u].z) * _2180;
        vec4 _2325 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_672, _673));
        float _2327 = _2325.x;
        float _2348 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2327)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2327))) - _653) * cbMtdParam._m0[11u].x;
        float _4148 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        _2350 = _2185 * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)));
        float _2351 = _667 + (-0.5);
        _2353 = cbMtdParam._m0[1u];
        _2355 = _2353.y * _2351;
        _2357 = cbMatDynParam._m0[0u];
        float _2364 = (roundEven(_2357.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2365 = _2364 * (_2307 ? _2315 : (_2315 + (cbSceneParam._m0[72u].w * _2289)));
        _2366 = _2364 * (_2307 ? _2316 : (_2316 + (cbSceneParam._m0[72u].w * _2291)));
        _2367 = _2364 * (_2307 ? _2317 : (_2317 + (cbSceneParam._m0[72u].w * _2293)));
        _2368 = _2351 * 0.999000012874603271484375;
        _2378 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2378)
        {
            if ((cbInstanceData._m0[_713 + 7u].x + _2368) < 0.5)
            {
                _2590 = true;
                break;
            }
        }
        uint _2506 = _714 + uint(_2357.w);
        if ((cbInstanceData._m0[_2506].w < 1.0) && ((cbInstanceData._m0[_2506].w + _2368) < 0.5))
        {
            _2590 = true;
            break;
        }
        if ((_2355 + 1.0) < _2353.x)
        {
            _2590 = true;
            break;
        }
        _2590 = false;
        break;
    }
    float _2824;
    if (_2590)
    {
        discard_state = true;
        _2824 = 0.0;
    }
    else
    {
        _2824 = _2350;
    }
    SV_Target.x = _2365;
    SV_Target.y = _2366;
    SV_Target.z = _2367;
    SV_Target.w = _2824;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2350;
    discard_exit();
}


