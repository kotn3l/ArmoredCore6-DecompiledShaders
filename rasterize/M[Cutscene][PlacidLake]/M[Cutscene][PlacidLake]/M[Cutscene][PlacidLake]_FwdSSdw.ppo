#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 52) uniform texture2D g_ScreenSpaceShadowTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1098;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _199 = _198 * _191;
    float _200 = _198 * _192;
    float _201 = _198 * _193;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _293 = cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y;
    float _296 = (sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[14u].y) / (isnan(0.001000000047497451305389404296875) ? _293 : (isnan(_293) ? 0.001000000047497451305389404296875 : max(_293, 0.001000000047497451305389404296875)));
    float _297 = _296 / cbMtdParam._m0[15u].y;
    float _3252 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _302 = cbMtdParam._m0[15u].z * (1.0 - (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))));
    float _311 = (cbMtdParam._m0[13u].x + _296) * cbMtdParam._m0[13u].y;
    float _3263 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _315 = ((isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0))) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    vec4 _328 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3274 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))));
    float _358 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _359 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _369 = ((_358 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _370 = 1.0 - ((_359 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _372 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_358, _359), 0.0);
    float _374 = _372.x;
    float _415 = fma(_374, cbSceneParam._m0[15u].z, fma(_370, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _369)) + cbSceneParam._m0[15u].w;
    float _416 = (fma(_374, cbSceneParam._m0[12u].z, fma(_370, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _369)) + cbSceneParam._m0[12u].w) / _415;
    float _417 = (fma(_374, cbSceneParam._m0[13u].z, fma(_370, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _369)) + cbSceneParam._m0[13u].w) / _415;
    float _418 = (fma(_374, cbSceneParam._m0[14u].z, fma(_370, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _369)) + cbSceneParam._m0[14u].w) / _415;
    float _450 = 1.0 / cbMtdParam._m0[12u].y;
    float _451 = ((fma(_418, cbSceneParam._m0[20u].z, fma(_417, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _416)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) * _450;
    float _452 = _450 * ((fma(_418, cbSceneParam._m0[22u].z, fma(_417, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _416)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z);
    float _453 = _451 * cbMtdParam._m0[16u].z;
    float _454 = _452 * cbMtdParam._m0[16u].w;
    float _468 = cbMtdParam._m0[15u].w * cbMtdParam._m0[16u].x;
    vec4 _481 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x)) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y)) + cbTextureTilingScale._m0[2u].w));
    float _486 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].w;
    float _489 = (_481.x * 0.5) + (-0.25);
    float _492 = (_481.y * 0.5) + (-0.25);
    float _493 = _492 * _468;
    float _495 = (-0.0) - (_468 * _489);
    float _497 = fract(_486);
    float _499 = fract(_486 + 0.5);
    float _510 = abs((_497 * 2.0) + (-1.0));
    vec4 _526 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_497 * _495) + _453) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_493 * _497) + _454) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _528 = _526.x;
    vec4 _529 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_499 * _495) + _453) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_493 * _499) + _454) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _534 = _492 * cbMtdParam._m0[16u].x;
    float _536 = (-0.0) - (cbMtdParam._m0[16u].x * _489);
    vec4 _553 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_497 * _536) + _451) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_534 * _497) + _452) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _555 = _553.x;
    vec4 _556 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_499 * _536) + _451) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_534 * _499) + _452) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _564 = (((((_529.x - _528) * _510) + _528) + _555) + ((_556.x - _555) * _510)) * cbMtdParam._m0[11u].w;
    float _570 = (cbMtdParam._m0[13u].w + _296) * cbMtdParam._m0[13u].z;
    float _3285 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _572 = (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * cbMtdParam._m0[12u].w;
    float _3296 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _585 = isnan(cbInstanceData._m0[8u].x) ? _358 : (isnan(_358) ? cbInstanceData._m0[8u].x : max(_358, cbInstanceData._m0[8u].x));
    float _586 = isnan(cbInstanceData._m0[8u].y) ? _359 : (isnan(_359) ? cbInstanceData._m0[8u].y : max(_359, cbInstanceData._m0[8u].y));
    vec4 _590 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _585 : (isnan(_585) ? cbInstanceData._m0[8u].z : min(_585, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _586 : (isnan(_586) ? cbInstanceData._m0[8u].w : min(_586, cbInstanceData._m0[8u].w))));
    float _604 = (POSITION_1.w - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[16u].y);
    float _3327 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _606 = 1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)));
    float _619 = fma(_344, _205 * NORMAL.x, fma(_338, _212 * TANGENT.x, _336 * _199));
    float _622 = fma(_344, _205 * NORMAL.y, fma(_338, _212 * TANGENT.y, _336 * _200));
    float _625 = fma(_344, _205 * NORMAL.z, fma(_338, _212 * TANGENT.z, _336 * _201));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    float _630 = _629 * _619;
    float _631 = _629 * _622;
    float _632 = _629 * _625;
    float _3338 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3349 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _634 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3371 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3382 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _658 = _269 * _657;
    float _659 = _270 * _657;
    float _660 = _271 * _657;
    float _681 = fma(_632, cbSceneParam._m0[5u].z, fma(_631, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _630));
    float _684 = fma(_632, cbSceneParam._m0[6u].z, fma(_631, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _630));
    float _687 = fma(_632, cbSceneParam._m0[7u].z, fma(_631, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _630));
    uint _700 = uint(roundEven(NORMAL.w)) * 13u;
    uint _702 = (_700 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3393 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    vec4 _717 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _358, cbSceneParam._m0[86u].y * _359));
    float _720 = _717.x * TEXCOORD.z;
    float _721 = dot(vec3(_630, _631, _632), vec3(_658, _659, _660));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _630) - _658;
    float _729 = (_724 * _631) - _659;
    float _730 = (_724 * _632) - _660;
    float _734 = abs(dot(vec3(_658, _659, _660), vec3(_630, _631, _632)));
    float _3426 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _735 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _744 = sqrt(_634);
    float _756 = exp2((_744 * 5.0) * log2(1.0 - (_735 * 0.999000012874603271484375))) / (4.0 - (_744 * 3.0));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _823 = fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788));
        float _827 = fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788));
        float _831 = fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788));
        float _855 = _788 + _630;
        float _856 = _792 + _631;
        float _857 = _796 + _632;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _823;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _827;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _831;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_823 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_827 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_831 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_630, _631, _632), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3474 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_630, _631, _632), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3507 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_630, _631, _632), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3540 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788));
        float _1142 = fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788));
        float _1146 = fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788));
        float _1169 = _788 + _630;
        float _1170 = _792 + _631;
        float _1171 = _796 + _632;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_630, _631, _632), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3603 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_630, _631, _632), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3636 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_630, _631, _632), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3669 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1098;
        _1408 = _1098;
        _1409 = _1098;
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = _1098;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1110)) + _1110;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1111)) + _1111;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1112)) + _1112;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _728 * 0.5;
    float _1476 = _729 * 0.5;
    float _1477 = _730 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1518;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1529;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1520 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1533 = (_1529 * cbModelParam._m0[1u].x) + (_1518 * (1.0 - cbModelParam._m0[1u].x));
    float _1543 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1543 : min(cbModelParam._m0[25u].z, _1543));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1605 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1608 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1636 = frontier_phi_14_12_ladder;
        }
        float _1903;
        if (_1605 > 0.0)
        {
            _1903 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1903 = frontier_phi_23_19_ladder;
        }
        float _2385;
        if (_1608 > 0.0)
        {
            _2385 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2385 = frontier_phi_37_30_ladder;
        }
        float _2387 = isnan(_1903) ? _1636 : (isnan(_1636) ? _1903 : min(_1636, _1903));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1602) + _1591;
        float _2393 = (_2388 * _1605) + _1595;
        float _2394 = (_2388 * _1608) + _1599;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2395;
        float _2398 = _2395 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2394 > _2398) || ((_2394 < _2396) || ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 < _2396) || (_2392 > _2398))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1544);
            frontier_phi_13_37_ladder = _2520.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2520.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_13_37_ladder_2;
        _1626 = frontier_phi_13_37_ladder_1;
        _1628 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1544);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1701 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1704 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1908;
        if (_1698 > 0.0)
        {
            _1908 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1908 = frontier_phi_25_21_ladder;
        }
        float _2411;
        if (_1701 > 0.0)
        {
            _2411 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2411 = frontier_phi_39_32_ladder;
        }
        float _2580;
        if (_1704 > 0.0)
        {
            _2580 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2580 = frontier_phi_53_48_ladder;
        }
        float _2582 = isnan(_2411) ? _1908 : (isnan(_1908) ? _2411 : min(_1908, _2411));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1698) + _1687;
        float _2588 = (_2583 * _1701) + _1691;
        float _2589 = (_2583 * _1704) + _1695;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_22_53_ladder = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_22_53_ladder_2;
        _1725 = frontier_phi_22_53_ladder;
        _1727 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1633);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1739 = ((((1.0 - _756) * ((_744 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_756 * _744)) * _720;
    float _1740 = _1739 * ((cbModelParam._m0[1u].w * (_1723 - _1624)) + _1624);
    float _1741 = _1739 * ((cbModelParam._m0[1u].w * (_1725 - _1626)) + _1626);
    float _1742 = _1739 * ((cbModelParam._m0[1u].w * (_1727 - _1628)) + _1628);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    vec4 _1759 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_358, _359));
    float _1761 = _1759.w;
    float _1773 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1761);
    float _1774 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1761);
    float _1775 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1761);
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_700 + 5u]);
    uint _1781 = _1779.x * 14u;
    float _1788 = (cbLight._m0[_1781 + 13u].x * (_720 + (-1.0))) + 1.0;
    uint _1789 = _1781 + 4u;
    float _1799 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_630, _631, _632));
    float _3800 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.3183098733425140380859375;
    float _1814 = ((cbLight._m0[_1789].x * _1773) * _1799) * _1812;
    float _1815 = ((cbLight._m0[_1789].y * _1774) * _1799) * _1812;
    float _1816 = ((cbLight._m0[_1789].z * _1775) * _1799) * _1812;
    uint _1818 = _1781 + 8u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _634) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1781].x + _658;
    float _1834 = cbLight._m0[_1781].y + _659;
    float _1835 = cbLight._m0[_1781].z + _660;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_1781].xyz));
    float _3811 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1847 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1848 = dot(vec3(_630, _631, _632), vec3(_1840, _1841, _1842));
    float _3833 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1840, _1841, _1842));
    float _3844 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = _1832 * _1832;
    float _1860 = ((_1851 * _1851) * (_1856 + (-1.0))) + 1.0;
    float _1871 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1872 = 1.0 - _1832;
    float _1883 = (0.5 / (((_1847 * ((_1846 * _1872) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1847 * _1872) + _1832) * _1846))) * _1846;
    float _3855 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1856 / ((_1860 * _1860) * 3.141590118408203125));
    float _1889 = (((cbLight._m0[_1818].x * _1773) * _1871) * _1885) * _1799;
    float _1893 = (((cbLight._m0[_1818].y * _1774) * _1871) * _1885) * _1799;
    float _1897 = (((cbLight._m0[_1818].z * _1775) * _1871) * _1885) * _1799;
    float _2012;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    if (_1779.y == 0u)
    {
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1952;
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1952;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1952;
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.x;
        uint _1979 = uint((float(_1967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _359) / _1968))) + floor(float(uint(cbSceneParam._m0[85u].x * _358) / _1968)));
        float _1989 = (log2(_1955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1990 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        uint _1993 = uint(isnan(14.0) ? _1990 : (isnan(_1990) ? 14.0 : min(_1990, 14.0)));
        uvec4 _1998 = texelFetch(g_lightClusterGridBuffer, int(((_1993 << 2u) + (_1979 << 6u)) >> 2u));
        uint _1999 = _1998.x;
        uint _2000 = _1967.z;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((((1u << ((_2000 >> 4u) & 15u)) + 4294967295u) & _1999) == 0u) || ((_2000 & 240u) == 0u))
        {
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
        }
        else
        {
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2250;
            float _2252;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            uint _2454 = 0u;
            uint _2463;
            bool _2464;
            for (;;)
            {
                _2463 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2454 << 2u)) >> 2u)).x;
                _2464 = _2463 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2464)
                {
                    frontier_phi_50_pred = _2451;
                    frontier_phi_50_pred_1 = _2453;
                    frontier_phi_50_pred_2 = _2452;
                    frontier_phi_50_pred_3 = _2450;
                    frontier_phi_50_pred_4 = _2449;
                    frontier_phi_50_pred_5 = _2448;
                }
                else
                {
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    uint _2629;
                    _2623 = _2448;
                    _2624 = _2449;
                    _2625 = _2450;
                    _2626 = _2451;
                    _2627 = _2452;
                    _2628 = _2453;
                    _2629 = _2463;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    for (;;)
                    {
                        uint _2633 = uint(findLSB(_2629)) + (_2454 << 5u);
                        uint _2630 = (_2629 + 4294967295u) & _2629;
                        uint _2635 = _2633 * 48u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 3u)).x));
                        uint _2655 = (_2633 * 48u) + 4u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2674 = (_2633 * 48u) + 8u;
                        vec3 _2685 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x));
                        float _2689 = _2649.x - _1953;
                        float _2690 = _2649.y - _1954;
                        float _2691 = _2649.z - _1955;
                        float _2692 = dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691));
                        float _2695 = inversesqrt(_2692);
                        float _2696 = _2695 * _2689;
                        float _2697 = _2695 * _2690;
                        float _2698 = _2695 * _2691;
                        float _2699 = dot(vec3(_681, _684, _687), vec3(_2696, _2697, _2698));
                        float _2704 = 1.0 - (_2692 * _2649.w);
                        float _3876 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2705 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                        float _2706 = sqrt(_2692) * _2668.w;
                        float _2709 = 1.39999997615814208984375 / (_2706 + 1.39999997615814208984375);
                        float _2710 = _2709 * _2709;
                        float _2713 = ((1.0 - _2710) * _2699) + _2710;
                        float _2716 = _2706 * _2706;
                        float _2720 = ((isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0))) * _2705) / ((_2716 * 0.699999988079071044921875) + 1.0);
                        float _2724 = (-0.0) - _1953;
                        float _2725 = (-0.0) - _1954;
                        float _2726 = (-0.0) - _1955;
                        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
                        float _2731 = _2730 * _2724;
                        float _2732 = _2730 * _2725;
                        float _2733 = _2730 * _2726;
                        float _2741 = exp2(log2(1.0 / ((_2716 * 3.5) + 5.0)) * 0.25);
                        float _2742 = 1.0 - _744;
                        float _2749 = sqrt(1.0 - ((1.0 - (_2742 * _2742)) * (1.0 - (_2741 * _2741))));
                        float _2750 = _2749 * _2749;
                        float _2751 = _2750 * _2750;
                        float _2752 = _2731 + _2696;
                        float _2753 = _2732 + _2697;
                        float _2754 = _2733 + _2698;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2762 = dot(vec3(_681, _684, _687), vec3(_2731, _2732, _2733));
                        float _3892 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2766 = dot(vec3(_681, _684, _687), vec3(_2758 * _2752, _2758 * _2753, _2758 * _2754));
                        float _3903 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                        float _2773 = ((_2769 * _2769) * (_2751 + (-1.0))) + 1.0;
                        float _2774 = _2709 * _2750;
                        float _2775 = _2774 * _2774;
                        float _2778 = ((1.0 - _2775) * _2699) + _2775;
                        float _3914 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                        float _2780 = 1.0 - _2750;
                        float _2790 = (0.5 / (((_2779 * ((_2765 * _2780) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2779 * _2780) + _2750) * _2765))) * _2779;
                        float _3925 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2801 = (((_2751 * 3.1415927410125732421875) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) / ((_2773 * _2773) * ((_2716 * 2.1991131305694580078125) + 3.141590118408203125))) * _2705;
                        _2532 = (_2720 * _2668.x) + _2626;
                        _2533 = (_2720 * _2668.y) + _2627;
                        _2534 = (_2720 * _2668.z) + _2628;
                        _2529 = (_2801 * _2685.x) + _2623;
                        _2530 = (_2801 * _2685.y) + _2624;
                        _2531 = (_2801 * _2685.z) + _2625;
                        if (_2630 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2623 = _2529;
                            _2624 = _2530;
                            _2625 = _2531;
                            _2626 = _2532;
                            _2627 = _2533;
                            _2628 = _2534;
                            _2629 = _2630;
                        }
                    }
                    frontier_phi_50_pred = _2532;
                    frontier_phi_50_pred_1 = _2534;
                    frontier_phi_50_pred_2 = _2533;
                    frontier_phi_50_pred_3 = _2531;
                    frontier_phi_50_pred_4 = _2530;
                    frontier_phi_50_pred_5 = _2529;
                }
                _2248 = frontier_phi_50_pred;
                _2252 = frontier_phi_50_pred_1;
                _2250 = frontier_phi_50_pred_2;
                _2246 = frontier_phi_50_pred_3;
                _2244 = frontier_phi_50_pred_4;
                _2242 = frontier_phi_50_pred_5;
                uint _2455 = _2454 + 1u;
                if (_2455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2448 = _2242;
                    _2449 = _2244;
                    _2450 = _2246;
                    _2451 = _2248;
                    _2452 = _2250;
                    _2453 = _2252;
                    _2454 = _2455;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
        }
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.z;
        uint _2258 = (_2256 >> 8u) & 15u;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((4294967295u << _2258) & _1999) == 0u)
        {
            _2416 = _2241;
            _2418 = _2243;
            _2420 = _2245;
            _2422 = _2247;
            _2424 = _2249;
            _2426 = _2251;
        }
        else
        {
            float _2441 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
            float _2442 = _2441 * _1953;
            float _2443 = _2441 * _1954;
            float _2444 = _2441 * _1955;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2258 < ((_2256 >> 12u) & 15u))
            {
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2606 = _2241;
                float _2607 = _2243;
                float _2608 = _2245;
                float _2609 = _2247;
                float _2610 = _2249;
                float _2611 = _2251;
                uint _2612 = _2258;
                uint _2621;
                bool _2622;
                for (;;)
                {
                    _2621 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                    _2622 = _2621 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2622)
                    {
                        frontier_phi_59_pred = _2611;
                        frontier_phi_59_pred_1 = _2610;
                        frontier_phi_59_pred_2 = _2609;
                        frontier_phi_59_pred_3 = _2608;
                        frontier_phi_59_pred_4 = _2607;
                        frontier_phi_59_pred_5 = _2606;
                    }
                    else
                    {
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _2840 = _2606;
                        float _2841 = _2607;
                        float _2842 = _2608;
                        float _2843 = _2609;
                        float _2844 = _2610;
                        float _2845 = _2611;
                        uint _2846 = _2621;
                        uint _2847;
                        vec4 _2872;
                        float _2873;
                        vec4 _2888;
                        vec3 _2900;
                        vec4 _2915;
                        vec4 _2930;
                        float _2977;
                        bool _2978;
                        for (;;)
                        {
                            uint _2857 = ((_2612 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2846));
                            _2847 = (_2846 + 4294967295u) & _2846;
                            uint _2859 = _2857 * 40u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            _2873 = _2872.w;
                            uint _2875 = (_2857 * 40u) + 4u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2890 = (_2857 * 40u) + 8u;
                            _2900 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x));
                            uint _2902 = (_2857 * 40u) + 16u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2857 * 40u) + 20u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2857 * 40u) + 24u;
                            vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2952 = (_2857 * 40u) + 28u;
                            vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2977 = fma(_1955, _2965.z, fma(_1954, _2965.y, _2965.x * _1953)) + _2965.w;
                            _2978 = !((fma(_1955, _2946.z, fma(_1954, _2946.y, _2946.x * _1953)) + _2946.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2978)
                            {
                                float _3005 = _2872.x - _1953;
                                float _3006 = _2872.y - _1954;
                                float _3007 = _2872.z - _1955;
                                float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                                float _3011 = inversesqrt(_3008);
                                float _3012 = _3011 * _3005;
                                float _3013 = _3011 * _3006;
                                float _3014 = _3011 * _3007;
                                float _3018 = 1.0 - (_3008 / (_2873 * _2873));
                                float _3936 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                                float _3023 = sqrt(_3008) * _2888.w;
                                float _3025 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                                float _3026 = _3025 * _3025;
                                float _3029 = ((1.0 - _3026) * dot(vec3(_3012, _3013, _3014), vec3(_681, _684, _687))) + _3026;
                                float _3032 = _3023 * _3023;
                                float _3036 = (fma(_1955, _2915.z, fma(_1954, _2915.y, _2915.x * _1953)) + _2915.w) / _2977;
                                float _3037 = (fma(_1955, _2930.z, fma(_1954, _2930.y, _2930.x * _1953)) + _2930.w) / _2977;
                                float _3041 = 1.0 - dot(vec2(_3036, _3037), vec2(_3036, _3037));
                                float _3952 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3043 = _3042 * (((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3019) / ((_3032 * 0.699999988079071044921875) + 1.0));
                                float _3055 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                                float _3056 = 1.0 - _744;
                                float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                                float _3064 = _3063 * _3063;
                                float _3065 = _3064 * _3064;
                                float _3066 = _3012 - _2442;
                                float _3067 = _3013 - _2443;
                                float _3068 = _3014 - _2444;
                                float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                                float _3076 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2442, (-0.0) - _2443, (-0.0) - _2444));
                                float _3963 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _3080 = dot(vec3(_681, _684, _687), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                                float _3974 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                                float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                                float _3088 = _3025 * _3064;
                                float _3089 = _3088 * _3088;
                                float _3095 = ((1.0 - _3089) * dot(vec3(_681, _684, _687), vec3(_3012, _3013, _3014))) + _3089;
                                float _3985 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _3097 = 1.0 - _3064;
                                float _3107 = (0.5 / (((_3096 * ((_3079 * _3097) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3064) * _3079))) * _3096;
                                float _3996 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3117 = (_3042 * _3019) * (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) / ((_3087 * _3087) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3043 * _2888.z;
                                frontier_phi_65_pred_1 = _3043 * _2888.y;
                                frontier_phi_65_pred_2 = _3043 * _2888.x;
                                frontier_phi_65_pred_3 = _3117 * _2900.z;
                                frontier_phi_65_pred_4 = _3117 * _2900.y;
                                frontier_phi_65_pred_5 = _3117 * _2900.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3126 = frontier_phi_65_pred;
                            _3125 = frontier_phi_65_pred_1;
                            _3124 = frontier_phi_65_pred_2;
                            _3123 = frontier_phi_65_pred_3;
                            _3122 = frontier_phi_65_pred_4;
                            _3121 = frontier_phi_65_pred_5;
                            _2830 = _3124 + _2843;
                            _2831 = _3125 + _2844;
                            _2832 = _3126 + _2845;
                            _2827 = _3121 + _2840;
                            _2828 = _3122 + _2841;
                            _2829 = _3123 + _2842;
                            if (_2847 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2847;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2832;
                        frontier_phi_59_pred_1 = _2831;
                        frontier_phi_59_pred_2 = _2830;
                        frontier_phi_59_pred_3 = _2829;
                        frontier_phi_59_pred_4 = _2828;
                        frontier_phi_59_pred_5 = _2827;
                    }
                    _2427 = frontier_phi_59_pred;
                    _2425 = frontier_phi_59_pred_1;
                    _2423 = frontier_phi_59_pred_2;
                    _2421 = frontier_phi_59_pred_3;
                    _2419 = frontier_phi_59_pred_4;
                    _2417 = frontier_phi_59_pred_5;
                    uint _2613 = _2612 + 1u;
                    if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2606 = _2417;
                        _2607 = _2419;
                        _2608 = _2421;
                        _2609 = _2423;
                        _2610 = _2425;
                        _2611 = _2427;
                        _2612 = _2613;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2423;
                frontier_phi_41_42_ladder_1 = _2427;
                frontier_phi_41_42_ladder_2 = _2425;
                frontier_phi_41_42_ladder_3 = _2421;
                frontier_phi_41_42_ladder_4 = _2419;
                frontier_phi_41_42_ladder_5 = _2417;
            }
            else
            {
                frontier_phi_41_42_ladder = _2247;
                frontier_phi_41_42_ladder_1 = _2251;
                frontier_phi_41_42_ladder_2 = _2249;
                frontier_phi_41_42_ladder_3 = _2245;
                frontier_phi_41_42_ladder_4 = _2243;
                frontier_phi_41_42_ladder_5 = _2241;
            }
            _2416 = frontier_phi_41_42_ladder_5;
            _2418 = frontier_phi_41_42_ladder_4;
            _2420 = frontier_phi_41_42_ladder_3;
            _2422 = frontier_phi_41_42_ladder;
            _2424 = frontier_phi_41_42_ladder_2;
            _2426 = frontier_phi_41_42_ladder_1;
        }
        float _2431 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2012 = (_2431 * _2422) + _1814;
        _2014 = (_2431 * _2424) + _1815;
        _2016 = (_2431 * _2426) + _1816;
        _2018 = ((_2416 * 0.039999999105930328369140625) * _2431) + _1889;
        _2020 = ((_2418 * 0.039999999105930328369140625) * _2431) + _1893;
        _2022 = ((_2420 * 0.039999999105930328369140625) * _2431) + _1897;
    }
    else
    {
        _2012 = _1814;
        _2014 = _1815;
        _2016 = _1816;
        _2018 = _1889;
        _2020 = _1893;
        _2022 = _1897;
    }
    float _2042 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2043 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2044 = cbSceneParam._m0[86u].x * ((_358 / cbSceneParam._m0[86u].x) + (((10.0 / (_653 + 10.0)) * cbMtdParam._m0[12u].z) * dot(vec3(_630, _631, _632), vec3(_199, _200, _201))));
    float _2045 = isnan(_2042) ? _2044 : (isnan(_2044) ? _2042 : min(_2044, _2042));
    float _2046 = isnan(_2043) ? _359 : (isnan(_359) ? _2043 : min(_359, _2043));
    vec4 _2048 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2045, _2046), 0.0);
    float _2050 = _2048.x;
    bool _2070 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2050)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2050))) > _653;
    float _2071 = _2070 ? _2045 : _358;
    float _2072 = _2070 ? _2046 : _359;
    vec4 _2074 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2071, _2072));
    vec4 _2080 = texture(sampler2D(g_ScreenSpaceShadowTexture, SS_WrapLinear), vec2(_2071, _2072));
    float _2082 = _2080.w;
    vec4 _2110 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2071, _2072));
    float _2112 = _2110.x;
    float _2132 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2112)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2112))) - _653;
    bool _2142 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2146 = (isnan(_2132) ? 0.0 : (isnan(0.0) ? _2132 : max(0.0, _2132))) * (-1.44269502162933349609375);
    float _4027 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4038 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4049 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _2173 = 0.959999978542327880859375 - (exp2(log2(1.0 - _735) * 5.0) * 0.959999978542327880859375);
    float _2176 = ((((((((((cbMtdParam._m0[10u].x * _564) * _590.x) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _606) * _2082) * cbSceneParam._m0[72u].z) + _2074.x) * _2173) * exp2(_2146 * (_2142 ? 0.0 : (cbMtdParam._m0[18u].y + cbMtdParam._m0[17u].z)))) * cbSceneParam._m0[72u].w;
    float _2179 = ((((((((((cbMtdParam._m0[10u].y * _564) * _590.y) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _606) * _2082) * cbSceneParam._m0[72u].z) + _2074.y) * _2173) * exp2(_2146 * (_2142 ? 0.0 : (cbMtdParam._m0[18u].z + cbMtdParam._m0[17u].w)))) * cbSceneParam._m0[72u].w;
    float _2182 = ((((((((((cbMtdParam._m0[10u].z * _564) * _590.z) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _606) * _2082) * cbSceneParam._m0[72u].z) + _2074.z) * _2173) * exp2(_2146 * (_2142 ? 0.0 : (cbMtdParam._m0[18u].w + cbMtdParam._m0[18u].x)))) * cbSceneParam._m0[72u].w;
    float _2204 = _358 / cbSceneParam._m0[86u].x;
    float _2205 = _359 / cbSceneParam._m0[86u].y;
    vec4 _2219 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2204, _2205, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2221 = _2219.x;
    float _2222 = _2219.y;
    float _2223 = _2219.z;
    float _2224 = _2219.w;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2266 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2267 = _2266 / _653;
        float _2278 = _2267 * _269;
        float _2279 = _270 * _2267;
        float _2280 = (-0.0) - _2279;
        float _2281 = _2267 * _271;
        float _2283 = (cbSceneParam._m0[77u].w * _2280) / _2266;
        float _2284 = _2283 + cbSceneParam._m0[79u].w;
        float _2285 = cbSceneParam._m0[79u].w - _2279;
        float _2291 = sqrt(((_2278 * _2278) + (_2279 * _2279)) + (_2281 * _2281));
        float _2294 = (1.0 - (cbSceneParam._m0[77u].w / _2266)) * _2291;
        float _2300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2301 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2542;
        if (abs((_2280 - _2283) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2542 = ((((_2284 > 0.0) ? exp2(_2300 * _2284) : (2.0 - exp2(_2301 * _2284))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2294;
        }
        else
        {
            float _2477 = 1.0 / cbSceneParam._m0[80u].x;
            float _2478 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : max(_2284, _2285));
            float _2479 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : min(_2284, _2285));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            float _2489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : min(_2479, 0.0));
            _2542 = ((abs(_2291 / _2280) * cbSceneParam._m0[80u].y) * ((((_2488 - _2489) * 2.0) - ((exp2(_2300 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0)))) - exp2(_2300 * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))))) * _2477)) - ((exp2(_2301 * _2488) - exp2(_2301 * _2489)) * _2477))) + (_2294 * cbSceneParam._m0[80u].z);
        }
        vec4 _2544 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2204, _2205, 1.0), 0.0);
        float _2553 = exp2((_2542 * (-1.44269502162933349609375)) * (1.0 - _2544.w));
        float _2554 = log2(_2553);
        float _2570 = log2(_2224);
        _2303 = (exp2(_2570 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2554 * cbSceneParam._m0[78u].x)) * _2544.x) / cbSceneParam._m0[78u].x)) + _2221;
        _2305 = (exp2(_2570 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2554 * cbSceneParam._m0[78u].y)) * _2544.y) / cbSceneParam._m0[78u].y)) + _2222;
        _2307 = (exp2(_2570 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2554 * cbSceneParam._m0[78u].z)) * _2544.z) / cbSceneParam._m0[78u].z)) + _2223;
        _2309 = _2553 * _2224;
    }
    else
    {
        _2303 = _2221;
        _2305 = _2222;
        _2307 = _2223;
        _2309 = _2224;
    }
    bool _2321 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2322 = log2(_2309);
    float _2329 = exp2(_2322 * cbSceneParam._m0[78u].x) * ((_2176 + ((_2018 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2012 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _720))) - _2176) * _573));
    float _2330 = exp2(_2322 * cbSceneParam._m0[78u].y) * ((_2179 + ((_2020 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2014 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _720))) - _2179) * _573));
    float _2331 = exp2(_2322 * cbSceneParam._m0[78u].z) * ((_2182 + ((_2022 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2016 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _720))) - _2182) * _573));
    vec4 _2339 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_358, _359));
    float _2341 = _2339.x;
    float _2362 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2341)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2341))) - _653) * cbMtdParam._m0[11u].x;
    float _4100 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (cbInstanceData._m0[_700 + 6u].w * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)));
    float _2373 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2373 * (_2321 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.y = _2373 * (_2321 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.z = _2373 * (_2321 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2307)));
    SV_Target.w = _2364;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2364;
}


