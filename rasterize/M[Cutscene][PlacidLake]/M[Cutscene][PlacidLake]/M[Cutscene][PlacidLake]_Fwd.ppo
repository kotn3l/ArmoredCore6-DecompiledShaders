#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_PlacidLake_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1094;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _195 = _194 * _187;
    float _196 = _194 * _188;
    float _197 = _194 * _189;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    float _289 = cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y;
    float _292 = (sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267)) - cbMtdParam._m0[14u].y) / (isnan(0.001000000047497451305389404296875) ? _289 : (isnan(_289) ? 0.001000000047497451305389404296875 : max(_289, 0.001000000047497451305389404296875)));
    float _293 = _292 / cbMtdParam._m0[15u].y;
    float _3217 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _298 = cbMtdParam._m0[15u].z * (1.0 - (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))));
    float _307 = (cbMtdParam._m0[13u].x + _292) * cbMtdParam._m0[13u].y;
    float _3228 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _311 = ((isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    vec4 _324 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = (_324.x * 2.0) + (-1.0);
    float _334 = (_324.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3239 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))));
    float _354 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _355 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _365 = ((_354 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _366 = 1.0 - ((_355 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _368 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_354, _355), 0.0);
    float _370 = _368.x;
    float _411 = fma(_370, cbSceneParam._m0[15u].z, fma(_366, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _365)) + cbSceneParam._m0[15u].w;
    float _412 = (fma(_370, cbSceneParam._m0[12u].z, fma(_366, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _365)) + cbSceneParam._m0[12u].w) / _411;
    float _413 = (fma(_370, cbSceneParam._m0[13u].z, fma(_366, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _365)) + cbSceneParam._m0[13u].w) / _411;
    float _414 = (fma(_370, cbSceneParam._m0[14u].z, fma(_366, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _365)) + cbSceneParam._m0[14u].w) / _411;
    float _446 = 1.0 / cbMtdParam._m0[12u].y;
    float _447 = ((fma(_414, cbSceneParam._m0[20u].z, fma(_413, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _412)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) * _446;
    float _448 = _446 * ((fma(_414, cbSceneParam._m0[22u].z, fma(_413, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _412)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z);
    float _449 = _447 * cbMtdParam._m0[16u].z;
    float _450 = _448 * cbMtdParam._m0[16u].w;
    float _464 = cbMtdParam._m0[15u].w * cbMtdParam._m0[16u].x;
    vec4 _477 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x)) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y)) + cbTextureTilingScale._m0[2u].w));
    float _482 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].w;
    float _485 = (_477.x * 0.5) + (-0.25);
    float _488 = (_477.y * 0.5) + (-0.25);
    float _489 = _488 * _464;
    float _491 = (-0.0) - (_464 * _485);
    float _493 = fract(_482);
    float _495 = fract(_482 + 0.5);
    float _506 = abs((_493 * 2.0) + (-1.0));
    vec4 _522 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_493 * _491) + _449) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_489 * _493) + _450) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _524 = _522.x;
    vec4 _525 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_495 * _491) + _449) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_489 * _495) + _450) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _530 = _488 * cbMtdParam._m0[16u].x;
    float _532 = (-0.0) - (cbMtdParam._m0[16u].x * _485);
    vec4 _549 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_493 * _532) + _447) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_530 * _493) + _448) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _551 = _549.x;
    vec4 _552 = texture(sampler2D(M_Cutscene_PlacidLake_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_495 * _532) + _447) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_530 * _495) + _448) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _560 = (((((_525.x - _524) * _506) + _524) + _551) + ((_552.x - _551) * _506)) * cbMtdParam._m0[11u].w;
    float _566 = (cbMtdParam._m0[13u].w + _292) * cbMtdParam._m0[13u].z;
    float _3250 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * cbMtdParam._m0[12u].w;
    float _3261 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _581 = isnan(cbInstanceData._m0[8u].x) ? _354 : (isnan(_354) ? cbInstanceData._m0[8u].x : max(_354, cbInstanceData._m0[8u].x));
    float _582 = isnan(cbInstanceData._m0[8u].y) ? _355 : (isnan(_355) ? cbInstanceData._m0[8u].y : max(_355, cbInstanceData._m0[8u].y));
    vec4 _586 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _581 : (isnan(_581) ? cbInstanceData._m0[8u].z : min(_581, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _582 : (isnan(_582) ? cbInstanceData._m0[8u].w : min(_582, cbInstanceData._m0[8u].w))));
    float _600 = (POSITION_1.w - cbMtdParam._m0[11u].z) * (1.0 / cbMtdParam._m0[16u].y);
    float _3292 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _602 = 1.0 - (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)));
    float _615 = fma(_340, _201 * NORMAL.x, fma(_334, _208 * TANGENT.x, _332 * _195));
    float _618 = fma(_340, _201 * NORMAL.y, fma(_334, _208 * TANGENT.y, _332 * _196));
    float _621 = fma(_340, _201 * NORMAL.z, fma(_334, _208 * TANGENT.z, _332 * _197));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    float _626 = _625 * _615;
    float _627 = _625 * _618;
    float _628 = _625 * _621;
    float _3303 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3314 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _630 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _3325 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3336 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3347 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _649 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _653 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _654 = _265 * _653;
    float _655 = _266 * _653;
    float _656 = _267 * _653;
    float _677 = fma(_628, cbSceneParam._m0[5u].z, fma(_627, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _626));
    float _680 = fma(_628, cbSceneParam._m0[6u].z, fma(_627, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _626));
    float _683 = fma(_628, cbSceneParam._m0[7u].z, fma(_627, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _626));
    uint _696 = uint(roundEven(NORMAL.w)) * 13u;
    uint _698 = (_696 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _704 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_698].x;
    float _705 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) * cbInstanceData._m0[_698].y;
    float _706 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) * cbInstanceData._m0[_698].z;
    float _3358 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    vec4 _713 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _354, cbSceneParam._m0[86u].y * _355));
    float _716 = _713.x * TEXCOORD.z;
    float _717 = dot(vec3(_626, _627, _628), vec3(_654, _655, _656));
    float _720 = _717 * 2.0;
    float _724 = (_720 * _626) - _654;
    float _725 = (_720 * _627) - _655;
    float _726 = (_720 * _628) - _656;
    float _730 = abs(dot(vec3(_654, _655, _656), vec3(_626, _627, _628)));
    float _3391 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _740 = sqrt(_630);
    float _752 = exp2((_740 * 5.0) * log2(1.0 - (_731 * 0.999000012874603271484375))) / (4.0 - (_740 * 3.0));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _823 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _827 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _851 = _784 + _626;
        float _852 = _788 + _627;
        float _853 = _792 + _628;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _819;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _823;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _827;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_626, _627, _628), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3439 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_626, _627, _628), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3472 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_626, _627, _628), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3505 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1138 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1142 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1165 = _784 + _626;
        float _1166 = _788 + _627;
        float _1167 = _792 + _628;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_626, _627, _628), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3568 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_626, _627, _628), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3601 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_626, _627, _628), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3634 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1094;
        _1404 = _1094;
        _1405 = _1094;
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = _1094;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1106)) + _1106;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1107)) + _1107;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1108)) + _1108;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _724 * 0.5;
    float _1472 = _725 * 0.5;
    float _1473 = _726 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_726, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724));
        float _1601 = fma(_726, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724));
        float _1604 = fma(_726, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1632 = frontier_phi_14_12_ladder;
        }
        float _1875;
        if (_1601 > 0.0)
        {
            _1875 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1875 = frontier_phi_23_19_ladder;
        }
        float _2350;
        if (_1604 > 0.0)
        {
            _2350 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2350 = frontier_phi_37_30_ladder;
        }
        float _2352 = isnan(_1875) ? _1632 : (isnan(_1632) ? _1875 : min(_1632, _1875));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1598) + _1587;
        float _2358 = (_2353 * _1601) + _1591;
        float _2359 = (_2353 * _1604) + _1595;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2359, cbModelParam._m0[9u].z, fma(_2358, cbModelParam._m0[9u].y, _2357 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2359, cbModelParam._m0[10u].z, fma(_2358, cbModelParam._m0[10u].y, _2357 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2359, cbModelParam._m0[11u].z, fma(_2358, cbModelParam._m0[11u].y, _2357 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_13_37_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_13_37_ladder_2;
        _1622 = frontier_phi_13_37_ladder_1;
        _1624 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_724, _725, _726), _1540);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_726, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724));
        float _1697 = fma(_726, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724));
        float _1700 = fma(_726, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724));
        float _1880;
        if (_1694 > 0.0)
        {
            _1880 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1880 = frontier_phi_25_21_ladder;
        }
        float _2376;
        if (_1697 > 0.0)
        {
            _2376 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2376 = frontier_phi_39_32_ladder;
        }
        float _2545;
        if (_1700 > 0.0)
        {
            _2545 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2545 = frontier_phi_53_48_ladder;
        }
        float _2547 = isnan(_2376) ? _1880 : (isnan(_1880) ? _2376 : min(_1880, _2376));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _1694) + _1683;
        float _2553 = (_2548 * _1697) + _1687;
        float _2554 = (_2548 * _1700) + _1691;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2555;
        float _2558 = _2555 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2554 > _2558) || ((_2554 < _2556) || ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 < _2556) || (_2552 > _2558))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2554, cbModelParam._m0[17u].z, fma(_2553, cbModelParam._m0[17u].y, _2552 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2554, cbModelParam._m0[18u].z, fma(_2553, cbModelParam._m0[18u].y, _2552 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2554, cbModelParam._m0[19u].z, fma(_2553, cbModelParam._m0[19u].y, _2552 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_22_53_ladder = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_22_53_ladder_2;
        _1721 = frontier_phi_22_53_ladder;
        _1723 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_724, _725, _726), _1629);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1735 = ((((1.0 - _752) * ((_740 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_752 * _740)) * _716;
    float _1736 = _1735 * ((cbModelParam._m0[1u].w * (_1719 - _1620)) + _1620);
    float _1737 = _1735 * ((cbModelParam._m0[1u].w * (_1721 - _1622)) + _1622);
    float _1738 = _1735 * ((cbModelParam._m0[1u].w * (_1723 - _1624)) + _1624);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_696 + 5u]);
    uint _1759 = _1757.x * 14u;
    float _1766 = (cbLight._m0[_1759 + 13u].x * (_716 + (-1.0))) + 1.0;
    uint _1767 = _1759 + 4u;
    float _1774 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    float _1783 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_626, _627, _628));
    float _3765 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1787 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (cbLight._m0[_1767].x * _1774) * _1787;
    float _1790 = (_1774 * cbLight._m0[_1767].y) * _1787;
    float _1791 = (_1774 * cbLight._m0[_1767].z) * _1787;
    uint _1793 = _1759 + 8u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _630) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1759].x + _654;
    float _1809 = cbLight._m0[_1759].y + _655;
    float _1810 = cbLight._m0[_1759].z + _656;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1759].xyz));
    float _3776 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _1822 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1823 = dot(vec3(_626, _627, _628), vec3(_1815, _1816, _1817));
    float _3798 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1827 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1815, _1816, _1817));
    float _3809 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1831 = _1807 * _1807;
    float _1835 = ((_1826 * _1826) * (_1831 + (-1.0))) + 1.0;
    float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1847 = 1.0 - _1807;
    float _1858 = (0.5 / (((_1822 * ((_1821 * _1847) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _1847) + _1807) * _1821))) * _1821;
    float _3820 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1831 / ((_1835 * _1835) * 3.141590118408203125));
    float _1863 = ((_1846 * cbLight._m0[_1793].x) * _1860) * _1774;
    float _1866 = ((_1846 * cbLight._m0[_1793].y) * _1860) * _1774;
    float _1869 = ((_1846 * cbLight._m0[_1793].z) * _1860) * _1774;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    if (_1757.y == 0u)
    {
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1924;
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1924;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1924;
        uvec4 _1939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1940 = _1939.x;
        uint _1951 = uint((float(_1939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _355) / _1940))) + floor(float(uint(cbSceneParam._m0[85u].x * _354) / _1940)));
        float _1961 = (log2(_1927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1962 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        uint _1965 = uint(isnan(14.0) ? _1962 : (isnan(_1962) ? 14.0 : min(_1962, 14.0)));
        uvec4 _1970 = texelFetch(g_lightClusterGridBuffer, int(((_1965 << 2u) + (_1951 << 6u)) >> 2u));
        uint _1971 = _1970.x;
        uint _1972 = _1939.z;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        if (((((1u << ((_1972 >> 4u) & 15u)) + 4294967295u) & _1971) == 0u) || ((_1972 & 240u) == 0u))
        {
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
        }
        else
        {
            float _2207;
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            uint _2419 = 0u;
            uint _2428;
            bool _2429;
            for (;;)
            {
                _2428 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2419 << 2u)) >> 2u)).x;
                _2429 = _2428 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2429)
                {
                    frontier_phi_50_pred = _2416;
                    frontier_phi_50_pred_1 = _2418;
                    frontier_phi_50_pred_2 = _2417;
                    frontier_phi_50_pred_3 = _2415;
                    frontier_phi_50_pred_4 = _2414;
                    frontier_phi_50_pred_5 = _2413;
                }
                else
                {
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    uint _2594;
                    _2588 = _2413;
                    _2589 = _2414;
                    _2590 = _2415;
                    _2591 = _2416;
                    _2592 = _2417;
                    _2593 = _2418;
                    _2594 = _2428;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    for (;;)
                    {
                        uint _2598 = uint(findLSB(_2594)) + (_2419 << 5u);
                        uint _2595 = (_2594 + 4294967295u) & _2594;
                        uint _2600 = _2598 * 48u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2600)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 3u)).x));
                        uint _2620 = (_2598 * 48u) + 4u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2639 = (_2598 * 48u) + 8u;
                        vec3 _2650 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x));
                        float _2654 = _2614.x - _1925;
                        float _2655 = _2614.y - _1926;
                        float _2656 = _2614.z - _1927;
                        float _2657 = dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656));
                        float _2660 = inversesqrt(_2657);
                        float _2661 = _2660 * _2654;
                        float _2662 = _2660 * _2655;
                        float _2663 = _2660 * _2656;
                        float _2664 = dot(vec3(_677, _680, _683), vec3(_2661, _2662, _2663));
                        float _2669 = 1.0 - (_2657 * _2614.w);
                        float _3841 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                        float _2671 = sqrt(_2657) * _2633.w;
                        float _2674 = 1.39999997615814208984375 / (_2671 + 1.39999997615814208984375);
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2664) + _2675;
                        float _2681 = _2671 * _2671;
                        float _2685 = ((isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))) * _2670) / ((_2681 * 0.699999988079071044921875) + 1.0);
                        float _2689 = (-0.0) - _1925;
                        float _2690 = (-0.0) - _1926;
                        float _2691 = (-0.0) - _1927;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2696 = _2695 * _2689;
                        float _2697 = _2695 * _2690;
                        float _2698 = _2695 * _2691;
                        float _2706 = exp2(log2(1.0 / ((_2681 * 3.5) + 5.0)) * 0.25);
                        float _2707 = 1.0 - _740;
                        float _2714 = sqrt(1.0 - ((1.0 - (_2707 * _2707)) * (1.0 - (_2706 * _2706))));
                        float _2715 = _2714 * _2714;
                        float _2716 = _2715 * _2715;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2719 = _2698 + _2663;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2727 = dot(vec3(_677, _680, _683), vec3(_2696, _2697, _2698));
                        float _3857 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
                        float _2731 = dot(vec3(_677, _680, _683), vec3(_2723 * _2717, _2723 * _2718, _2723 * _2719));
                        float _3868 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
                        float _2738 = ((_2734 * _2734) * (_2716 + (-1.0))) + 1.0;
                        float _2739 = _2674 * _2715;
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2664) + _2740;
                        float _3879 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                        float _2745 = 1.0 - _2715;
                        float _2755 = (0.5 / (((_2744 * ((_2730 * _2745) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2745) + _2715) * _2730))) * _2744;
                        float _3890 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2766 = (((_2716 * 3.1415927410125732421875) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) / ((_2738 * _2738) * ((_2681 * 2.1991131305694580078125) + 3.141590118408203125))) * _2670;
                        _2497 = (_2685 * _2633.x) + _2591;
                        _2498 = (_2685 * _2633.y) + _2592;
                        _2499 = (_2685 * _2633.z) + _2593;
                        _2494 = (_2766 * _2650.x) + _2588;
                        _2495 = (_2766 * _2650.y) + _2589;
                        _2496 = (_2766 * _2650.z) + _2590;
                        if (_2595 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2588 = _2494;
                            _2589 = _2495;
                            _2590 = _2496;
                            _2591 = _2497;
                            _2592 = _2498;
                            _2593 = _2499;
                            _2594 = _2595;
                        }
                    }
                    frontier_phi_50_pred = _2497;
                    frontier_phi_50_pred_1 = _2499;
                    frontier_phi_50_pred_2 = _2498;
                    frontier_phi_50_pred_3 = _2496;
                    frontier_phi_50_pred_4 = _2495;
                    frontier_phi_50_pred_5 = _2494;
                }
                _2213 = frontier_phi_50_pred;
                _2217 = frontier_phi_50_pred_1;
                _2215 = frontier_phi_50_pred_2;
                _2211 = frontier_phi_50_pred_3;
                _2209 = frontier_phi_50_pred_4;
                _2207 = frontier_phi_50_pred_5;
                uint _2420 = _2419 + 1u;
                if (_2420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2413 = _2207;
                    _2414 = _2209;
                    _2415 = _2211;
                    _2416 = _2213;
                    _2417 = _2215;
                    _2418 = _2217;
                    _2419 = _2420;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
        }
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.z;
        uint _2223 = (_2221 >> 8u) & 15u;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((4294967295u << _2223) & _1971) == 0u)
        {
            _2381 = _2206;
            _2383 = _2208;
            _2385 = _2210;
            _2387 = _2212;
            _2389 = _2214;
            _2391 = _2216;
        }
        else
        {
            float _2406 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
            float _2407 = _2406 * _1925;
            float _2408 = _2406 * _1926;
            float _2409 = _2406 * _1927;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2223 < ((_2221 >> 12u) & 15u))
            {
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2571 = _2206;
                float _2572 = _2208;
                float _2573 = _2210;
                float _2574 = _2212;
                float _2575 = _2214;
                float _2576 = _2216;
                uint _2577 = _2223;
                uint _2586;
                bool _2587;
                for (;;)
                {
                    _2586 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                    _2587 = _2586 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2587)
                    {
                        frontier_phi_59_pred = _2576;
                        frontier_phi_59_pred_1 = _2575;
                        frontier_phi_59_pred_2 = _2574;
                        frontier_phi_59_pred_3 = _2573;
                        frontier_phi_59_pred_4 = _2572;
                        frontier_phi_59_pred_5 = _2571;
                    }
                    else
                    {
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _2805 = _2571;
                        float _2806 = _2572;
                        float _2807 = _2573;
                        float _2808 = _2574;
                        float _2809 = _2575;
                        float _2810 = _2576;
                        uint _2811 = _2586;
                        uint _2812;
                        vec4 _2837;
                        float _2838;
                        vec4 _2853;
                        vec3 _2865;
                        vec4 _2880;
                        vec4 _2895;
                        float _2942;
                        bool _2943;
                        for (;;)
                        {
                            uint _2822 = ((_2577 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2811));
                            _2812 = (_2811 + 4294967295u) & _2811;
                            uint _2824 = _2822 * 40u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            _2838 = _2837.w;
                            uint _2840 = (_2822 * 40u) + 4u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2855 = (_2822 * 40u) + 8u;
                            _2865 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x));
                            uint _2867 = (_2822 * 40u) + 16u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2822 * 40u) + 20u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2898 = (_2822 * 40u) + 24u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2917 = (_2822 * 40u) + 28u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2942 = fma(_1927, _2930.z, fma(_1926, _2930.y, _2930.x * _1925)) + _2930.w;
                            _2943 = !((fma(_1927, _2911.z, fma(_1926, _2911.y, _2911.x * _1925)) + _2911.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2943)
                            {
                                float _2970 = _2837.x - _1925;
                                float _2971 = _2837.y - _1926;
                                float _2972 = _2837.z - _1927;
                                float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                                float _2976 = inversesqrt(_2973);
                                float _2977 = _2976 * _2970;
                                float _2978 = _2976 * _2971;
                                float _2979 = _2976 * _2972;
                                float _2983 = 1.0 - (_2973 / (_2838 * _2838));
                                float _3901 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                                float _2988 = sqrt(_2973) * _2853.w;
                                float _2990 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                                float _2991 = _2990 * _2990;
                                float _2994 = ((1.0 - _2991) * dot(vec3(_2977, _2978, _2979), vec3(_677, _680, _683))) + _2991;
                                float _2997 = _2988 * _2988;
                                float _3001 = (fma(_1927, _2880.z, fma(_1926, _2880.y, _2880.x * _1925)) + _2880.w) / _2942;
                                float _3002 = (fma(_1927, _2895.z, fma(_1926, _2895.y, _2895.x * _1925)) + _2895.w) / _2942;
                                float _3006 = 1.0 - dot(vec2(_3001, _3002), vec2(_3001, _3002));
                                float _3917 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                                float _3008 = _3007 * (((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2984) / ((_2997 * 0.699999988079071044921875) + 1.0));
                                float _3020 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                                float _3021 = 1.0 - _740;
                                float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                                float _3029 = _3028 * _3028;
                                float _3030 = _3029 * _3029;
                                float _3031 = _2977 - _2407;
                                float _3032 = _2978 - _2408;
                                float _3033 = _2979 - _2409;
                                float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                                float _3041 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2407, (-0.0) - _2408, (-0.0) - _2409));
                                float _3928 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3044 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                                float _3045 = dot(vec3(_677, _680, _683), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                                float _3939 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3048 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                                float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                                float _3053 = _2990 * _3029;
                                float _3054 = _3053 * _3053;
                                float _3060 = ((1.0 - _3054) * dot(vec3(_677, _680, _683), vec3(_2977, _2978, _2979))) + _3054;
                                float _3950 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                                float _3062 = 1.0 - _3029;
                                float _3072 = (0.5 / (((_3061 * ((_3044 * _3062) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3029) * _3044))) * _3061;
                                float _3961 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3082 = (_3007 * _2984) * (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) / ((_3052 * _3052) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3008 * _2853.z;
                                frontier_phi_65_pred_1 = _3008 * _2853.y;
                                frontier_phi_65_pred_2 = _3008 * _2853.x;
                                frontier_phi_65_pred_3 = _3082 * _2865.z;
                                frontier_phi_65_pred_4 = _3082 * _2865.y;
                                frontier_phi_65_pred_5 = _3082 * _2865.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3091 = frontier_phi_65_pred;
                            _3090 = frontier_phi_65_pred_1;
                            _3089 = frontier_phi_65_pred_2;
                            _3088 = frontier_phi_65_pred_3;
                            _3087 = frontier_phi_65_pred_4;
                            _3086 = frontier_phi_65_pred_5;
                            _2795 = _3089 + _2808;
                            _2796 = _3090 + _2809;
                            _2797 = _3091 + _2810;
                            _2792 = _3086 + _2805;
                            _2793 = _3087 + _2806;
                            _2794 = _3088 + _2807;
                            if (_2812 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2812;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2797;
                        frontier_phi_59_pred_1 = _2796;
                        frontier_phi_59_pred_2 = _2795;
                        frontier_phi_59_pred_3 = _2794;
                        frontier_phi_59_pred_4 = _2793;
                        frontier_phi_59_pred_5 = _2792;
                    }
                    _2392 = frontier_phi_59_pred;
                    _2390 = frontier_phi_59_pred_1;
                    _2388 = frontier_phi_59_pred_2;
                    _2386 = frontier_phi_59_pred_3;
                    _2384 = frontier_phi_59_pred_4;
                    _2382 = frontier_phi_59_pred_5;
                    uint _2578 = _2577 + 1u;
                    if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2571 = _2382;
                        _2572 = _2384;
                        _2573 = _2386;
                        _2574 = _2388;
                        _2575 = _2390;
                        _2576 = _2392;
                        _2577 = _2578;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2388;
                frontier_phi_41_42_ladder_1 = _2392;
                frontier_phi_41_42_ladder_2 = _2390;
                frontier_phi_41_42_ladder_3 = _2386;
                frontier_phi_41_42_ladder_4 = _2384;
                frontier_phi_41_42_ladder_5 = _2382;
            }
            else
            {
                frontier_phi_41_42_ladder = _2212;
                frontier_phi_41_42_ladder_1 = _2216;
                frontier_phi_41_42_ladder_2 = _2214;
                frontier_phi_41_42_ladder_3 = _2210;
                frontier_phi_41_42_ladder_4 = _2208;
                frontier_phi_41_42_ladder_5 = _2206;
            }
            _2381 = frontier_phi_41_42_ladder_5;
            _2383 = frontier_phi_41_42_ladder_4;
            _2385 = frontier_phi_41_42_ladder_3;
            _2387 = frontier_phi_41_42_ladder;
            _2389 = frontier_phi_41_42_ladder_2;
            _2391 = frontier_phi_41_42_ladder_1;
        }
        float _2396 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _1984 = (_2396 * _2387) + _1789;
        _1986 = (_2396 * _2389) + _1790;
        _1988 = (_2396 * _2391) + _1791;
        _1990 = ((_2381 * 0.039999999105930328369140625) * _2396) + _1863;
        _1992 = ((_2383 * 0.039999999105930328369140625) * _2396) + _1866;
        _1994 = ((_2385 * 0.039999999105930328369140625) * _2396) + _1869;
    }
    else
    {
        _1984 = _1789;
        _1986 = _1790;
        _1988 = _1791;
        _1990 = _1863;
        _1992 = _1866;
        _1994 = _1869;
    }
    float _2014 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2015 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2016 = cbSceneParam._m0[86u].x * ((_354 / cbSceneParam._m0[86u].x) + (((10.0 / (_649 + 10.0)) * cbMtdParam._m0[12u].z) * dot(vec3(_626, _627, _628), vec3(_195, _196, _197))));
    float _2017 = isnan(_2014) ? _2016 : (isnan(_2016) ? _2014 : min(_2016, _2014));
    float _2018 = isnan(_2015) ? _355 : (isnan(_355) ? _2015 : min(_355, _2015));
    vec4 _2020 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2017, _2018), 0.0);
    float _2022 = _2020.x;
    bool _2042 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2022)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2022))) > _649;
    float _2043 = _2042 ? _2017 : _354;
    float _2044 = _2042 ? _2018 : _355;
    vec4 _2046 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2043, _2044));
    vec4 _2075 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2043, _2044));
    float _2077 = _2075.x;
    float _2097 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2077)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2077))) - _649;
    bool _2107 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2111 = (isnan(_2097) ? 0.0 : (isnan(0.0) ? _2097 : max(0.0, _2097))) * (-1.44269502162933349609375);
    float _3992 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4003 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4014 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _2138 = 0.959999978542327880859375 - (exp2(log2(1.0 - _731) * 5.0) * 0.959999978542327880859375);
    float _2141 = (((((((((cbMtdParam._m0[10u].x * _560) * _586.x) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _602) * cbSceneParam._m0[72u].z) + _2046.x) * _2138) * exp2(_2111 * (_2107 ? 0.0 : (cbMtdParam._m0[18u].y + cbMtdParam._m0[17u].z)))) * cbSceneParam._m0[72u].w;
    float _2144 = (((((((((cbMtdParam._m0[10u].y * _560) * _586.y) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _602) * cbSceneParam._m0[72u].z) + _2046.y) * _2138) * exp2(_2111 * (_2107 ? 0.0 : (cbMtdParam._m0[18u].z + cbMtdParam._m0[17u].w)))) * cbSceneParam._m0[72u].w;
    float _2147 = (((((((((cbMtdParam._m0[10u].z * _560) * _586.z) * cbSceneParam._m0[72u].w) * cbMtdParam._m0[12u].x) * _602) * cbSceneParam._m0[72u].z) + _2046.z) * _2138) * exp2(_2111 * (_2107 ? 0.0 : (cbMtdParam._m0[18u].w + cbMtdParam._m0[18u].x)))) * cbSceneParam._m0[72u].w;
    float _2169 = _354 / cbSceneParam._m0[86u].x;
    float _2170 = _355 / cbSceneParam._m0[86u].y;
    vec4 _2184 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, (log2((isnan(cbSceneParam._m0[77u].w) ? _649 : (isnan(_649) ? cbSceneParam._m0[77u].w : min(_649, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2186 = _2184.x;
    float _2187 = _2184.y;
    float _2188 = _2184.z;
    float _2189 = _2184.w;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    if (_649 > cbSceneParam._m0[78u].w)
    {
        float _2231 = isnan(_649) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _649 : min(cbSceneParam._m0[80u].w, _649));
        float _2232 = _2231 / _649;
        float _2243 = _2232 * _265;
        float _2244 = _266 * _2232;
        float _2245 = (-0.0) - _2244;
        float _2246 = _2232 * _267;
        float _2248 = (cbSceneParam._m0[77u].w * _2245) / _2231;
        float _2249 = _2248 + cbSceneParam._m0[79u].w;
        float _2250 = cbSceneParam._m0[79u].w - _2244;
        float _2256 = sqrt(((_2243 * _2243) + (_2244 * _2244)) + (_2246 * _2246));
        float _2259 = (1.0 - (cbSceneParam._m0[77u].w / _2231)) * _2256;
        float _2265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2266 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2507;
        if (abs((_2245 - _2248) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2507 = ((((_2249 > 0.0) ? exp2(_2265 * _2249) : (2.0 - exp2(_2266 * _2249))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2259;
        }
        else
        {
            float _2442 = 1.0 / cbSceneParam._m0[80u].x;
            float _2443 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : max(_2249, _2250));
            float _2444 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : min(_2249, _2250));
            float _2453 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : min(_2443, 0.0));
            float _2454 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : min(_2444, 0.0));
            _2507 = ((abs(_2256 / _2245) * cbSceneParam._m0[80u].y) * ((((_2453 - _2454) * 2.0) - ((exp2(_2265 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)))) - exp2(_2265 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0))))) * _2442)) - ((exp2(_2266 * _2453) - exp2(_2266 * _2454)) * _2442))) + (_2259 * cbSceneParam._m0[80u].z);
        }
        vec4 _2509 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, 1.0), 0.0);
        float _2518 = exp2((_2507 * (-1.44269502162933349609375)) * (1.0 - _2509.w));
        float _2519 = log2(_2518);
        float _2535 = log2(_2189);
        _2268 = (exp2(_2535 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].x)) * _2509.x) / cbSceneParam._m0[78u].x)) + _2186;
        _2270 = (exp2(_2535 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].y)) * _2509.y) / cbSceneParam._m0[78u].y)) + _2187;
        _2272 = (exp2(_2535 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].z)) * _2509.z) / cbSceneParam._m0[78u].z)) + _2188;
        _2274 = _2518 * _2189;
    }
    else
    {
        _2268 = _2186;
        _2270 = _2187;
        _2272 = _2188;
        _2274 = _2189;
    }
    bool _2286 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2287 = log2(_2274);
    float _2294 = exp2(_2287 * cbSceneParam._m0[78u].x) * ((_2141 + ((_1990 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1984 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _716))) - _2141) * _569));
    float _2295 = exp2(_2287 * cbSceneParam._m0[78u].y) * ((_2144 + ((_1992 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1986 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _716))) - _2144) * _569));
    float _2296 = exp2(_2287 * cbSceneParam._m0[78u].z) * ((_2147 + ((_1994 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1988 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _716))) - _2147) * _569));
    vec4 _2304 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_354, _355));
    float _2306 = _2304.x;
    float _2327 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2306)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2306))) - _649) * cbMtdParam._m0[11u].x;
    float _4065 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (cbInstanceData._m0[_696 + 6u].w * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)));
    float _2338 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2338 * (_2286 ? _2294 : (_2294 + (cbSceneParam._m0[72u].w * _2268)));
    SV_Target.y = _2338 * (_2286 ? _2295 : (_2295 + (cbSceneParam._m0[72u].w * _2270)));
    SV_Target.z = _2338 * (_2286 ? _2296 : (_2296 + (cbSceneParam._m0[72u].w * _2272)));
    SV_Target.w = _2329;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2329;
}


