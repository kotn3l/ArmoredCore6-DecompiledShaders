#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _785;
float _3279;
float _3280;
float _3281;
float _3282;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _201 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _207 = _201.w;
    float _208 = _201.x * cbMtdParam._m0[9u].x;
    float _209 = _201.y * cbMtdParam._m0[9u].y;
    float _210 = _201.z * cbMtdParam._m0[9u].z;
    vec4 _232 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _245 = _244 * _179;
    float _246 = _244 * _180;
    float _247 = _244 * _181;
    float _3291 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3302 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _3313 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _267 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _308 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _318 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _308);
    float _319 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _308);
    float _320 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _308);
    float _324 = inversesqrt(dot(vec3(_318, _319, _320), vec3(_318, _319, _320)));
    float _325 = _318 * _324;
    float _326 = _319 * _324;
    float _327 = _320 * _324;
    vec4 _332 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _334 = _332.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _464 = sqrt(((_318 * _318) + (_319 * _319)) + (_320 * _320));
        float _470 = (cbMatDynParam._m0[5u].x * _464) + cbMatDynParam._m0[5u].y;
        float _3324 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
        float _471 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _475 = (cbMatDynParam._m0[5u].z * _464) + cbMatDynParam._m0[5u].w;
        float _3335 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) - _471)) + _471) < ((_334 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _346 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _347 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _367 = fma(_247, cbSceneParam._m0[5u].z, fma(_246, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _245));
    float _370 = fma(_247, cbSceneParam._m0[6u].z, fma(_246, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _245));
    float _373 = fma(_247, cbSceneParam._m0[7u].z, fma(_246, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _245));
    uint _386 = uint(roundEven(NORMAL.w)) * 13u;
    uint _388 = _386 + 9u;
    uint _389 = _388 + uint(cbMatDynParam._m0[0u].w);
    float _395 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_389].x;
    float _396 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_389].y;
    float _397 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_389].z;
    float _3346 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _398 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _399 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    vec4 _409 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _346, cbSceneParam._m0[86u].y * _347));
    float _412 = _409.x * TEXCOORD.z;
    float _413 = dot(vec3(_245, _246, _247), vec3(_325, _326, _327));
    float _416 = _413 * 2.0;
    float _421 = (_416 * _245) - _325;
    float _422 = (_416 * _246) - _326;
    float _423 = (_416 * _247) - _327;
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _784;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _509 = fma(_453, cbModelParam._m0[26u].z, fma(_449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _445));
        float _513 = fma(_453, cbModelParam._m0[27u].z, fma(_449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _445));
        float _517 = fma(_453, cbModelParam._m0[28u].z, fma(_449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _445));
        float _542 = _445 + _245;
        float _543 = _449 + _246;
        float _544 = _453 + _247;
        float _554 = fma(_544, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542)) - _509;
        float _555 = fma(_544, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542)) - _513;
        float _556 = fma(_544, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542)) - _517;
        float _560 = inversesqrt(dot(vec3(_554, _555, _556), vec3(_554, _555, _556)));
        float _573 = ((_560 * _554) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_509 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _574 = ((_560 * _555) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_513 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _575 = ((_560 * _556) / cbModelParam._m0[34u].z) + ((((((_517 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        float _612 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_578.x + (-0.5));
        float _614 = _612 * (_578.y + (-0.5));
        float _615 = _612 * (_578.z + (-0.5));
        float _622 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_585.x + (-0.5));
        float _624 = _622 * (_585.y + (-0.5));
        float _625 = _622 * (_585.z + (-0.5));
        float _632 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_592.x + (-0.5));
        float _634 = _632 * (_592.y + (-0.5));
        float _635 = _632 * (_592.z + (-0.5));
        float _642 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_599.x + (-0.5));
        float _644 = _642 * (_599.y + (-0.5));
        float _645 = _642 * (_599.z + (-0.5));
        float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _647 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _649 = _613 * 0.5;
        float _650 = _623 * 0.5;
        float _651 = _633 * 0.5;
        float _652 = dot(vec3(_649, _650, _651), vec3(_649, _650, _651));
        float _657 = (_652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_652);
        float _666 = (dot(vec3(_245, _246, _247), vec3(_657 * _649, _657 * _650, _657 * _651)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _676 = sqrt(((_650 * _650) + (_649 * _649)) + (_651 * _651)) / (_646 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _678 = _677 * 2.0;
        float _682 = (1.0 - _677) / (_677 + 1.0);
        float _3416 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _692 = ((((1.0 - _683) * (_678 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_678 + 1.0))) + _683) * _646;
        float _693 = _614 * 0.5;
        float _694 = _624 * 0.5;
        float _695 = _634 * 0.5;
        float _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
        float _701 = (_696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_696);
        float _709 = (dot(vec3(_245, _246, _247), vec3(_701 * _693, _701 * _694, _701 * _695)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _718 = sqrt(((_694 * _694) + (_693 * _693)) + (_695 * _695)) / (_647 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _720 = _719 * 2.0;
        float _724 = (1.0 - _719) / (_719 + 1.0);
        float _3449 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _734 = ((((1.0 - _725) * (_720 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_720 + 1.0))) + _725) * _647;
        float _735 = _615 * 0.5;
        float _736 = _625 * 0.5;
        float _737 = _635 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _751 = (dot(vec3(_245, _246, _247), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _760 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_648 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3482 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_762 + 1.0))) + _767) * _648;
        _784 = _615;
        _786 = _614;
        _787 = _613;
        _788 = _625;
        _789 = _624;
        _790 = _623;
        _791 = _635;
        _792 = _634;
        _793 = _633;
        _794 = _648;
        _795 = _647;
        _796 = _646;
        _797 = cbModelParam._m0[36u].z * (isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0)));
        _798 = cbModelParam._m0[36u].z * (isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0)));
        _799 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
    }
    else
    {
        _784 = _785;
        _786 = _785;
        _787 = _785;
        _788 = _785;
        _789 = _785;
        _790 = _785;
        _791 = _785;
        _792 = _785;
        _793 = _785;
        _794 = _785;
        _795 = _785;
        _796 = _785;
        _797 = 0.0;
        _798 = 0.0;
        _799 = 0.0;
    }
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _828 = fma(_453, cbModelParam._m0[30u].z, fma(_449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _445));
        float _832 = fma(_453, cbModelParam._m0[31u].z, fma(_449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _445));
        float _836 = fma(_453, cbModelParam._m0[32u].z, fma(_449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _445));
        float _859 = _445 + _245;
        float _860 = _449 + _246;
        float _861 = _453 + _247;
        float _871 = fma(_861, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859)) - _828;
        float _872 = fma(_861, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859)) - _832;
        float _873 = fma(_861, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859)) - _836;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_828 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_832 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[35u].z) + ((((((_836 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _927 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_894.x + (-0.5));
        float _929 = _927 * (_894.y + (-0.5));
        float _930 = _927 * (_894.z + (-0.5));
        float _937 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_901.x + (-0.5));
        float _939 = _937 * (_901.y + (-0.5));
        float _940 = _937 * (_901.z + (-0.5));
        float _947 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_908.x + (-0.5));
        float _949 = _947 * (_908.y + (-0.5));
        float _950 = _947 * (_908.z + (-0.5));
        float _957 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_915.x + (-0.5));
        float _959 = _957 * (_915.y + (-0.5));
        float _960 = _957 * (_915.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_245, _246, _247), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3545 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_991 + 1.0))) + _996) * _961;
        float _1006 = _929 * 0.5;
        float _1007 = _939 * 0.5;
        float _1008 = _949 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_245, _246, _247), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3578 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1033 + 1.0))) + _1038) * _962;
        float _1048 = _930 * 0.5;
        float _1049 = _940 * 0.5;
        float _1050 = _950 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_245, _246, _247), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3611 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1075 + 1.0))) + _1080) * _963;
        _1097 = _930;
        _1098 = _929;
        _1099 = _928;
        _1100 = _940;
        _1101 = _939;
        _1102 = _938;
        _1103 = _950;
        _1104 = _949;
        _1105 = _948;
        _1106 = _963;
        _1107 = _962;
        _1108 = _961;
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1110 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1111 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _785;
        _1098 = _785;
        _1099 = _785;
        _1100 = _785;
        _1101 = _785;
        _1102 = _785;
        _1103 = _785;
        _1104 = _785;
        _1105 = _785;
        _1106 = _785;
        _1107 = _785;
        _1108 = _785;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _797)) + _797;
    float _1122 = (cbModelParam._m0[1u].x * (_1110 - _798)) + _798;
    float _1123 = (cbModelParam._m0[1u].x * (_1111 - _799)) + _799;
    float _1144 = fma(_1123, cbSceneParam._m0[89u].z, fma(_1122, cbSceneParam._m0[89u].y, _1121 * cbSceneParam._m0[89u].x));
    float _1147 = fma(_1123, cbSceneParam._m0[90u].z, fma(_1122, cbSceneParam._m0[90u].y, _1121 * cbSceneParam._m0[90u].x));
    float _1150 = fma(_1123, cbSceneParam._m0[91u].z, fma(_1122, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1121));
    float _1165 = _421 * 0.5;
    float _1166 = _422 * 0.5;
    float _1167 = _423 * 0.5;
    float _1168 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_1099, _1102, _1105, _1108));
    float _1171 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_1098, _1101, _1104, _1107));
    float _1174 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1208;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1181 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_784, _788, _791, _794));
        float _1185 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_786, _789, _792, _795));
        float _1189 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_787, _790, _793, _796));
        float _1196 = dot(vec4(cbModelParam._m0[39u]), vec4(_1165, _1166, _1167, 1.0));
        _1208 = dot(vec3(isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1208 = 1.0;
    }
    float _1219;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1210 = dot(vec4(cbModelParam._m0[40u]), vec4(_1165, _1166, _1167, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1210) ? 0.0 : (isnan(0.0) ? _1210 : max(0.0, _1210))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1223 = (_1219 * cbModelParam._m0[1u].x) + (_1208 * (1.0 - cbModelParam._m0[1u].x));
    float _1232 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1314;
    float _1316;
    float _1318;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1281 = fma(_453, cbModelParam._m0[13u].z, fma(_449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445)) + cbModelParam._m0[13u].w;
        float _1285 = fma(_453, cbModelParam._m0[14u].z, fma(_449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445)) + cbModelParam._m0[14u].w;
        float _1289 = fma(_453, cbModelParam._m0[15u].z, fma(_449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445)) + cbModelParam._m0[15u].w;
        float _1292 = fma(_423, cbModelParam._m0[13u].z, fma(_422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _421));
        float _1295 = fma(_423, cbModelParam._m0[14u].z, fma(_422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _421));
        float _1298 = fma(_423, cbModelParam._m0[15u].z, fma(_422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _421));
        float _1324;
        if (_1292 > 0.0)
        {
            _1324 = abs((1.0 - _1281) / _1292);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1281 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1324 = frontier_phi_19_17_ladder;
        }
        float _1498;
        if (_1295 > 0.0)
        {
            _1498 = abs((1.0 - _1285) / _1295);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1285 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1498 = frontier_phi_28_24_ladder;
        }
        float _1795;
        if (_1298 > 0.0)
        {
            _1795 = abs((1.0 - _1289) / _1298);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1289 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1795 = frontier_phi_40_35_ladder;
        }
        float _1797 = isnan(_1498) ? _1324 : (isnan(_1324) ? _1498 : min(_1324, _1498));
        float _1798 = isnan(_1795) ? _1797 : (isnan(_1797) ? _1795 : min(_1797, _1795));
        float _1802 = (_1798 * _1292) + _1281;
        float _1803 = (_1798 * _1295) + _1285;
        float _1804 = (_1798 * _1298) + _1289;
        float _1805 = _1798 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1805;
        float _1809 = _1805 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 > _1809) || ((_1803 < _1807) || ((_1802 < _1807) || (_1802 > _1809))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1804, cbModelParam._m0[9u].z, fma(_1803, cbModelParam._m0[9u].y, _1802 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1804, cbModelParam._m0[10u].z, fma(_1803, cbModelParam._m0[10u].y, _1802 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1804, cbModelParam._m0[11u].z, fma(_1803, cbModelParam._m0[11u].y, _1802 * cbModelParam._m0[11u].x))), _1232);
            frontier_phi_18_40_ladder = _1949.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1949.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1949.x * cbModelParam._m0[1u].y;
        }
        _1314 = frontier_phi_18_40_ladder_2;
        _1316 = frontier_phi_18_40_ladder_1;
        _1318 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1302 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_421, _422, _423), _1232);
        _1314 = _1302.x * cbModelParam._m0[1u].y;
        _1316 = _1302.y * cbModelParam._m0[1u].y;
        _1318 = _1302.z * cbModelParam._m0[1u].y;
    }
    float _1321 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1378 = fma(_453, cbModelParam._m0[21u].z, fma(_449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445)) + cbModelParam._m0[21u].w;
        float _1382 = fma(_453, cbModelParam._m0[22u].z, fma(_449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445)) + cbModelParam._m0[22u].w;
        float _1386 = fma(_453, cbModelParam._m0[23u].z, fma(_449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445)) + cbModelParam._m0[23u].w;
        float _1389 = fma(_423, cbModelParam._m0[21u].z, fma(_422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _421));
        float _1392 = fma(_423, cbModelParam._m0[22u].z, fma(_422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _421));
        float _1395 = fma(_423, cbModelParam._m0[23u].z, fma(_422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _421));
        float _1503;
        if (_1389 > 0.0)
        {
            _1503 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1503 = frontier_phi_30_26_ladder;
        }
        float _1822;
        if (_1392 > 0.0)
        {
            _1822 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1822 = frontier_phi_42_37_ladder;
        }
        float _2095;
        if (_1395 > 0.0)
        {
            _2095 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2095 = frontier_phi_52_49_ladder;
        }
        float _2097 = isnan(_1822) ? _1503 : (isnan(_1503) ? _1822 : min(_1503, _1822));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1389) + _1378;
        float _2103 = (_2098 * _1392) + _1382;
        float _2104 = (_2098 * _1395) + _1386;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2105;
        float _2108 = _2105 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2104 > _2108) || ((_2104 < _2106) || ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 < _2106) || (_2102 > _2108))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2195 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2104, cbModelParam._m0[17u].z, fma(_2103, cbModelParam._m0[17u].y, _2102 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2104, cbModelParam._m0[18u].z, fma(_2103, cbModelParam._m0[18u].y, _2102 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2104, cbModelParam._m0[19u].z, fma(_2103, cbModelParam._m0[19u].y, _2102 * cbModelParam._m0[19u].x))), _1321);
            frontier_phi_27_52_ladder = _2195.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2195.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2195.x * cbModelParam._m0[1u].z;
        }
        _1414 = frontier_phi_27_52_ladder_2;
        _1416 = frontier_phi_27_52_ladder_1;
        _1418 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_421, _422, _423), _1321);
        _1414 = _1398.x * cbModelParam._m0[1u].z;
        _1416 = _1398.y * cbModelParam._m0[1u].z;
        _1418 = _1398.z * cbModelParam._m0[1u].z;
    }
    float _1430 = _412 * 0.01200000010430812835693359375;
    float _1432 = _1430 * ((cbModelParam._m0[1u].w * (_1414 - _1314)) + _1314);
    float _1433 = _1430 * ((cbModelParam._m0[1u].w * (_1416 - _1316)) + _1316);
    float _1434 = _1430 * ((cbModelParam._m0[1u].w * (_1418 - _1318)) + _1318);
    float _1437 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, _1432 * cbSceneParam._m0[91u].x));
    float _1477 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1481 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1485 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1489 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1490 = _1477 / _1489;
    float _1491 = _1481 / _1489;
    float _1492 = _1485 / _1489;
    float _1639;
    float _1640;
    float _1641;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1519 = ((uint(_1492 > cbSceneParam._m0[59u].y) + uint(_1492 > cbSceneParam._m0[59u].x)) + uint(_1492 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1520 = _1519 + 43u;
        uint _1528 = _1519 + 44u;
        uint _1536 = _1519 + 45u;
        uint _1544 = _1519 + 46u;
        float _1555 = fma(_1489, cbSceneParam._m0[_1520].w, fma(_1485, cbSceneParam._m0[_1520].z, fma(_1481, cbSceneParam._m0[_1520].y, _1477 * cbSceneParam._m0[_1520].x)));
        float _1559 = fma(_1489, cbSceneParam._m0[_1528].w, fma(_1485, cbSceneParam._m0[_1528].z, fma(_1481, cbSceneParam._m0[_1528].y, _1477 * cbSceneParam._m0[_1528].x)));
        float _1567 = fma(_1489, cbSceneParam._m0[_1544].w, fma(_1485, cbSceneParam._m0[_1544].z, fma(_1481, cbSceneParam._m0[_1544].y, _1477 * cbSceneParam._m0[_1544].x)));
        float _1572 = cbSceneParam._m0[33u].z * _1567;
        float _1574 = cbSceneParam._m0[33u].w * _1567;
        float _1577 = fma(_1489, cbSceneParam._m0[_1536].w, fma(_1485, cbSceneParam._m0[_1536].z, fma(_1481, cbSceneParam._m0[_1536].y, _1477 * cbSceneParam._m0[_1536].x))) / _1567;
        float _1625 = (cbSceneParam._m0[33u].x - sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492))) * cbSceneParam._m0[33u].y;
        float _3737 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1632 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 + _1555) / _1567, (_1574 + _1559) / _1567), _1577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1574 + _1555) / _1567, (_1559 - _1572) / _1567), _1577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1555 - _1572) / _1567, (_1559 - _1574) / _1567), _1577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1555 - _1574) / _1567, (_1572 + _1559) / _1567), _1577), 0.0)).x), vec4(0.25)));
        _1639 = 1.0 - (_1632 * cbSceneParam._m0[34u].x);
        _1640 = 1.0 - (_1632 * cbSceneParam._m0[34u].y);
        _1641 = 1.0 - (_1632 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1639 = 1.0;
        _1640 = 1.0;
        _1641 = 1.0;
    }
    float _1705;
    float _1707;
    float _1709;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1693 = fma(_1489, cbSceneParam._m0[63u].w, fma(_1485, cbSceneParam._m0[63u].z, fma(_1481, cbSceneParam._m0[63u].y, _1477 * cbSceneParam._m0[63u].x)));
        float _1694 = fma(_1489, cbSceneParam._m0[60u].w, fma(_1485, cbSceneParam._m0[60u].z, fma(_1481, cbSceneParam._m0[60u].y, _1477 * cbSceneParam._m0[60u].x))) / _1693;
        float _1695 = fma(_1489, cbSceneParam._m0[61u].w, fma(_1485, cbSceneParam._m0[61u].z, fma(_1481, cbSceneParam._m0[61u].y, _1477 * cbSceneParam._m0[61u].x))) / _1693;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1694 >= cbSceneParam._m0[64u].x) && (_1695 >= cbSceneParam._m0[64u].y)) && (_1694 <= cbSceneParam._m0[64u].z)) && (_1695 <= cbSceneParam._m0[64u].w))
        {
            float _1835 = fma(_1489, cbSceneParam._m0[62u].w, fma(_1485, cbSceneParam._m0[62u].z, fma(_1481, cbSceneParam._m0[62u].y, _1477 * cbSceneParam._m0[62u].x))) / _1693;
            float _1839 = isnan(cbSceneParam._m0[41u].w) ? _1835 : (isnan(_1835) ? cbSceneParam._m0[41u].w : max(_1835, cbSceneParam._m0[41u].w));
            float _1882 = (cbSceneParam._m0[33u].x - sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492))) * cbSceneParam._m0[33u].y;
            float _3753 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
            float _1889 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1694, cbSceneParam._m0[33u].w + _1695), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1694, _1695 - cbSceneParam._m0[33u].z), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1694 - cbSceneParam._m0[33u].z, _1695 - cbSceneParam._m0[33u].w), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1694 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1695), _1839), 0.0)).x), vec4(0.25)));
            float _1893 = 1.0 - (_1889 * cbSceneParam._m0[34u].x);
            float _1894 = 1.0 - (_1889 * cbSceneParam._m0[34u].y);
            float _1895 = 1.0 - (_1889 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1894) ? _1640 : (isnan(_1640) ? _1894 : min(_1640, _1894));
            frontier_phi_39_38_ladder_1 = isnan(_1893) ? _1639 : (isnan(_1639) ? _1893 : min(_1639, _1893));
            frontier_phi_39_38_ladder_2 = isnan(_1895) ? _1641 : (isnan(_1641) ? _1895 : min(_1641, _1895));
        }
        else
        {
            frontier_phi_39_38_ladder = _1640;
            frontier_phi_39_38_ladder_1 = _1639;
            frontier_phi_39_38_ladder_2 = _1641;
        }
        _1705 = frontier_phi_39_38_ladder_1;
        _1707 = frontier_phi_39_38_ladder;
        _1709 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1705 = _1639;
        _1707 = _1640;
        _1709 = _1641;
    }
    uvec4 _1714 = floatBitsToUint(cbInstanceData._m0[_386 + 5u]);
    uint _1716 = _1714.x * 14u;
    uint _1717 = _1716 + 13u;
    float _1724 = _412 + (-1.0);
    float _1730 = (cbLight._m0[_1717].x * _1724) + 1.0;
    float _1731 = (cbLight._m0[_1717].y * _1724) + 1.0;
    float _1732 = (cbLight._m0[_1717].z * _1724) + 1.0;
    float _1733 = (cbLight._m0[_1717].w * _1724) + 1.0;
    uint _1734 = _1716 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1716 + 4u;
    float _1754 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1758 = _1716 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_245, _246, _247));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_245, _246, _247));
    float _3789 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3800 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1734].x * _1740) * _1779) + (((cbLight._m0[_1744].x * _1705) * _1754) * _1777);
    float _1787 = ((_1740 * cbLight._m0[_1734].y) * _1779) + (((cbLight._m0[_1744].y * _1707) * _1754) * _1777);
    float _1788 = ((_1740 * cbLight._m0[_1734].z) * _1779) + (((cbLight._m0[_1744].z * _1709) * _1754) * _1777);
    uvec4 _1792 = floatBitsToUint(cbLight._m0[_1716 + 12u]);
    bool _1794 = _1792.x == 0u;
    float _1896;
    float _1898;
    float _1900;
    if (_1794)
    {
        _1896 = _1786;
        _1898 = _1787;
        _1900 = _1788;
    }
    else
    {
        uint _1904 = _1716 + 6u;
        float _1920 = (dot(vec3(cbLight._m0[_1716 + 2u].xyz), vec3(_245, _246, _247)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3811 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1923 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1896 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1786;
        _1898 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1787;
        _1900 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1788;
    }
    bool _1903 = _1792.y == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1903)
    {
        _1958 = _1896;
        _1960 = _1898;
        _1962 = _1900;
    }
    else
    {
        uint _2066 = _1716 + 7u;
        float _2082 = (dot(vec3(cbLight._m0[_1716 + 3u].xyz), vec3(_245, _246, _247)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _3827 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _2085 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1958 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _1896;
        _1960 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _1898;
        _1962 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _1900;
    }
    uint _1964 = _1716 + 8u;
    float _1970 = cbLight._m0[_1716].x + _325;
    float _1971 = cbLight._m0[_1716].y + _326;
    float _1972 = cbLight._m0[_1716].z + _327;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1980 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1716].xyz));
    float _3843 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _1984 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1970 * _1976, _1971 * _1976, _1972 * _1976));
    float _3865 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2002 = (0.5 / ((_1983 + 9.9999999392252902907785028219223e-09) + _1984)) * _1983;
    float _3876 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.31831014156341552734375;
    uint _2018 = _1716 + 9u;
    float _2024 = cbLight._m0[_1758].x + _325;
    float _2025 = cbLight._m0[_1758].y + _326;
    float _2026 = cbLight._m0[_1758].z + _327;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2034 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1758].xyz));
    float _3887 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_2024 * _2030, _2025 * _2030, _2026 * _2030));
    float _3898 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = (0.5 / ((_2037 + 9.9999999392252902907785028219223e-09) + _1984)) * _2037;
    float _3909 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.31831014156341552734375;
    float _2063 = (((_2047 * cbLight._m0[_2018].x) * _2053) * _1740) + ((((cbLight._m0[_1964].x * _1705) * _1996) * _2004) * _1754);
    float _2064 = (((_2047 * cbLight._m0[_2018].y) * _2053) * _1740) + ((((cbLight._m0[_1964].y * _1707) * _1996) * _2004) * _1754);
    float _2065 = (((_2047 * cbLight._m0[_2018].z) * _2053) * _1740) + ((((cbLight._m0[_1964].z * _1709) * _1996) * _2004) * _1754);
    float _2121;
    float _2123;
    float _2125;
    if (_1794)
    {
        _2121 = _2063;
        _2123 = _2064;
        _2125 = _2065;
    }
    else
    {
        uint _2127 = _1716 + 10u;
        uint _2133 = _1716 + 2u;
        float _2139 = cbLight._m0[_2133].x + _325;
        float _2140 = cbLight._m0[_2133].y + _326;
        float _2141 = cbLight._m0[_2133].z + _327;
        float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
        float _2149 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_2133].xyz));
        float _3920 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2139 * _2145, _2140 * _2145, _2141 * _2145));
        float _3931 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2162 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2166 = (0.5 / ((_2152 + 9.9999999392252902907785028219223e-09) + _1984)) * _2152;
        float _3942 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2168 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.31831014156341552734375;
        float _2169 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2121 = (((_2162 * cbLight._m0[_2127].x) * _2168) * _2169) + _2063;
        _2123 = (((_2162 * cbLight._m0[_2127].y) * _2168) * _2169) + _2064;
        _2125 = (((_2162 * cbLight._m0[_2127].z) * _2168) * _2169) + _2065;
    }
    float _2200;
    float _2202;
    float _2204;
    if (_1903)
    {
        _2200 = _2121;
        _2202 = _2123;
        _2204 = _2125;
    }
    else
    {
        uint _2211 = _1716 + 11u;
        uint _2217 = _1716 + 3u;
        float _2223 = cbLight._m0[_2217].x + _325;
        float _2224 = cbLight._m0[_2217].y + _326;
        float _2225 = cbLight._m0[_2217].z + _327;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2233 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_2217].xyz));
        float _3958 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2223 * _2229, _2224 * _2229, _2225 * _2229));
        float _3969 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2250 = (0.5 / ((_2236 + 9.9999999392252902907785028219223e-09) + _1984)) * _2236;
        float _3980 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.31831014156341552734375;
        float _2253 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2200 = (((_2246 * cbLight._m0[_2211].x) * _2252) * _2253) + _2121;
        _2202 = (((_2246 * cbLight._m0[_2211].y) * _2252) * _2253) + _2123;
        _2204 = (((_2246 * cbLight._m0[_2211].z) * _2252) * _2253) + _2125;
    }
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_1714.y == 0u)
    {
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _347) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _346) / _2275)));
        float _2296 = (log2(_1492 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
        }
        else
        {
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            uint _2588 = 0u;
            uint _2597;
            bool _2598;
            for (;;)
            {
                _2597 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                _2598 = _2597 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2598)
                {
                    frontier_phi_73_pred = _2587;
                    frontier_phi_73_pred_1 = _2586;
                    frontier_phi_73_pred_2 = _2585;
                    frontier_phi_73_pred_3 = _2584;
                    frontier_phi_73_pred_4 = _2583;
                    frontier_phi_73_pred_5 = _2582;
                }
                else
                {
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    uint _2733;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2597;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    for (;;)
                    {
                        uint _2737 = uint(findLSB(_2733)) + (_2588 << 5u);
                        uint _2734 = (_2733 + 4294967295u) & _2733;
                        uint _2739 = _2737 * 48u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2759 = (_2737 * 48u) + 4u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2778 = (_2737 * 48u) + 8u;
                        vec3 _2789 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x));
                        float _2793 = _2753.x - _1490;
                        float _2794 = _2753.y - _1491;
                        float _2795 = _2753.z - _1492;
                        float _2796 = dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795));
                        float _2799 = inversesqrt(_2796);
                        float _2808 = 1.0 - (_2796 * _2753.w);
                        float _4006 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2810 = sqrt(_2796) * _2772.w;
                        float _2813 = 1.39999997615814208984375 / (_2810 + 1.39999997615814208984375);
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * dot(vec3(_367, _370, _373), vec3(_2799 * _2793, _2799 * _2794, _2799 * _2795))) + _2814;
                        float _2820 = _2810 * _2810;
                        float _2824 = ((isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))) * _2809) / ((_2820 * 0.699999988079071044921875) + 1.0);
                        float _2828 = (-0.0) - _1490;
                        float _2829 = (-0.0) - _1491;
                        float _2830 = (-0.0) - _1492;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2838 = dot(vec3(_367, _370, _373), vec3(_2834 * _2828, _2834 * _2829, _2834 * _2830));
                        float _4022 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _4033 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2842 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2846 = (0.5 / (((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) + 9.9999999392252902907785028219223e-09) + _2842)) * _2842;
                        float _4044 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2855 = (((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 3.1415927410125732421875) / ((_2820 * 2.1991131305694580078125) + 3.141590118408203125)) * _2809;
                        _2657 = (_2824 * _2772.x) + _2730;
                        _2658 = (_2824 * _2772.y) + _2731;
                        _2659 = (_2824 * _2772.z) + _2732;
                        _2654 = (_2855 * _2789.x) + _2727;
                        _2655 = (_2855 * _2789.y) + _2728;
                        _2656 = (_2855 * _2789.z) + _2729;
                        if (_2734 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2734;
                        }
                    }
                    frontier_phi_73_pred = _2659;
                    frontier_phi_73_pred_1 = _2658;
                    frontier_phi_73_pred_2 = _2657;
                    frontier_phi_73_pred_3 = _2656;
                    frontier_phi_73_pred_4 = _2655;
                    frontier_phi_73_pred_5 = _2654;
                }
                _2434 = frontier_phi_73_pred;
                _2432 = frontier_phi_73_pred_1;
                _2430 = frontier_phi_73_pred_2;
                _2428 = frontier_phi_73_pred_3;
                _2426 = frontier_phi_73_pred_4;
                _2424 = frontier_phi_73_pred_5;
                uint _2589 = _2588 + 1u;
                if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2582 = _2424;
                    _2583 = _2426;
                    _2584 = _2428;
                    _2585 = _2430;
                    _2586 = _2432;
                    _2587 = _2434;
                    _2588 = _2589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
        }
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.z;
        uint _2440 = (_2438 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2440) & _2306) == 0u)
        {
            _2553 = _2423;
            _2555 = _2425;
            _2557 = _2427;
            _2559 = _2429;
            _2561 = _2431;
            _2563 = _2433;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2440 < ((_2438 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2710 = _2423;
                float _2711 = _2425;
                float _2712 = _2427;
                float _2713 = _2429;
                float _2714 = _2431;
                float _2715 = _2433;
                uint _2716 = _2440;
                uint _2725;
                bool _2726;
                for (;;)
                {
                    _2725 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                    _2726 = _2725 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2726)
                    {
                        frontier_phi_84_pred = _2714;
                        frontier_phi_84_pred_1 = _2713;
                        frontier_phi_84_pred_2 = _2712;
                        frontier_phi_84_pred_3 = _2711;
                        frontier_phi_84_pred_4 = _2710;
                        frontier_phi_84_pred_5 = _2715;
                    }
                    else
                    {
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _2882 = _2710;
                        float _2883 = _2711;
                        float _2884 = _2712;
                        float _2885 = _2713;
                        float _2886 = _2714;
                        float _2887 = _2715;
                        uint _2888 = _2725;
                        uint _2889;
                        vec4 _2914;
                        float _2915;
                        vec4 _2930;
                        vec3 _2942;
                        vec4 _2958;
                        vec4 _2974;
                        float _3021;
                        bool _3022;
                        for (;;)
                        {
                            uint _2899 = ((_2716 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2888));
                            _2889 = (_2888 + 4294967295u) & _2888;
                            uint _2901 = _2899 * 40u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2915 = _2914.w;
                            uint _2917 = (_2899 * 40u) + 4u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2932 = (_2899 * 40u) + 8u;
                            _2942 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x));
                            uint _2945 = (_2899 * 40u) + 16u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2899 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2977 = (_2899 * 40u) + 24u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2996 = (_2899 * 40u) + 28u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3021 = fma(_1492, _3009.z, fma(_1491, _3009.y, _3009.x * _1490)) + _3009.w;
                            _3022 = !((fma(_1492, _2990.z, fma(_1491, _2990.y, _2990.x * _1490)) + _2990.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3022)
                            {
                                float _3049 = _2914.x - _1490;
                                float _3050 = _2914.y - _1491;
                                float _3051 = _2914.z - _1492;
                                float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                                float _3055 = inversesqrt(_3052);
                                float _3056 = _3055 * _3049;
                                float _3057 = _3055 * _3050;
                                float _3058 = _3055 * _3051;
                                float _3062 = 1.0 - (_3052 / (_2915 * _2915));
                                float _4055 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                                float _3067 = sqrt(_3052) * _2930.w;
                                float _3069 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                                float _3070 = _3069 * _3069;
                                float _3071 = 1.0 - _3070;
                                float _3073 = (_3071 * dot(vec3(_3056, _3057, _3058), vec3(_367, _370, _373))) + _3070;
                                float _3076 = _3067 * _3067;
                                float _3080 = (fma(_1492, _2958.z, fma(_1491, _2958.y, _2958.x * _1490)) + _2958.w) / _3021;
                                float _3081 = (fma(_1492, _2974.z, fma(_1491, _2974.y, _2974.x * _1490)) + _2974.w) / _3021;
                                float _3085 = 1.0 - dot(vec2(_3080, _3081), vec2(_3080, _3081));
                                float _4071 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3087 = _3086 * (((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3063) / ((_3076 * 0.699999988079071044921875) + 1.0));
                                float _3097 = dot(vec3(_367, _370, _373), vec3((-0.0) - (_1490 * _2578), (-0.0) - (_1491 * _2578), (-0.0) - (_1492 * _2578)));
                                float _4082 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3105 = (_3071 * dot(vec3(_367, _370, _373), vec3(_3056, _3057, _3058))) + _3070;
                                float _4093 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3110 = (0.5 / (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) + 9.9999999392252902907785028219223e-09) + _3106)) * _3106;
                                float _4104 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3117 = (_3086 * _3063) * (((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 3.1415927410125732421875) / ((_3076 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3087 * _2930.y;
                                frontier_phi_90_pred_1 = _3087 * _2930.x;
                                frontier_phi_90_pred_2 = _3117 * _2942.z;
                                frontier_phi_90_pred_3 = _3117 * _2942.y;
                                frontier_phi_90_pred_4 = _3117 * _2942.x;
                                frontier_phi_90_pred_5 = _3087 * _2930.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3125 = frontier_phi_90_pred;
                            _3124 = frontier_phi_90_pred_1;
                            _3123 = frontier_phi_90_pred_2;
                            _3122 = frontier_phi_90_pred_3;
                            _3121 = frontier_phi_90_pred_4;
                            _3126 = frontier_phi_90_pred_5;
                            _2872 = _3124 + _2885;
                            _2873 = _3125 + _2886;
                            _2874 = _3126 + _2887;
                            _2869 = _3121 + _2882;
                            _2870 = _3122 + _2883;
                            _2871 = _3123 + _2884;
                            if (_2889 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2889;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2873;
                        frontier_phi_84_pred_1 = _2872;
                        frontier_phi_84_pred_2 = _2871;
                        frontier_phi_84_pred_3 = _2870;
                        frontier_phi_84_pred_4 = _2869;
                        frontier_phi_84_pred_5 = _2874;
                    }
                    _2562 = frontier_phi_84_pred;
                    _2560 = frontier_phi_84_pred_1;
                    _2558 = frontier_phi_84_pred_2;
                    _2556 = frontier_phi_84_pred_3;
                    _2554 = frontier_phi_84_pred_4;
                    _2564 = frontier_phi_84_pred_5;
                    uint _2717 = _2716 + 1u;
                    if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2710 = _2554;
                        _2711 = _2556;
                        _2712 = _2558;
                        _2713 = _2560;
                        _2714 = _2562;
                        _2715 = _2564;
                        _2716 = _2717;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2564;
                frontier_phi_65_66_ladder_1 = _2560;
                frontier_phi_65_66_ladder_2 = _2562;
                frontier_phi_65_66_ladder_3 = _2556;
                frontier_phi_65_66_ladder_4 = _2554;
                frontier_phi_65_66_ladder_5 = _2558;
            }
            else
            {
                frontier_phi_65_66_ladder = _2433;
                frontier_phi_65_66_ladder_1 = _2429;
                frontier_phi_65_66_ladder_2 = _2431;
                frontier_phi_65_66_ladder_3 = _2425;
                frontier_phi_65_66_ladder_4 = _2423;
                frontier_phi_65_66_ladder_5 = _2427;
            }
            _2553 = frontier_phi_65_66_ladder_4;
            _2555 = frontier_phi_65_66_ladder_3;
            _2557 = frontier_phi_65_66_ladder_5;
            _2559 = frontier_phi_65_66_ladder_1;
            _2561 = frontier_phi_65_66_ladder_2;
            _2563 = frontier_phi_65_66_ladder;
        }
        float _2568 = isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0));
        _2318 = (_2568 * _2559) + _1958;
        _2320 = (_2568 * _2561) + _1960;
        _2322 = (_2568 * _2563) + _1962;
        _2324 = ((_2553 * 0.039999999105930328369140625) * _2568) + _2200;
        _2326 = ((_2555 * 0.039999999105930328369140625) * _2568) + _2202;
        _2328 = ((_2557 * 0.039999999105930328369140625) * _2568) + _2204;
    }
    else
    {
        _2318 = _1958;
        _2320 = _1960;
        _2322 = _1962;
        _2324 = _2200;
        _2326 = _2202;
        _2328 = _2204;
    }
    uint _2334 = _388 + uint(cbMatDynParam._m0[0u].w);
    float _2343 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _232.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2334].x;
    float _2347 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _232.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2334].y;
    float _2351 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _232.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2334].z;
    float _4120 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _4131 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _4142 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _2368 = (((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2318 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _412))) + ((_2324 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1223)) * cbPerFrame._m0[3u].x)) + _2343;
    float _2370 = (_2347 + ((_2326 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _1223)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2320 + ((isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))) * _412)));
    float _2372 = (_2351 + ((_2328 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1223)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2322 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _412)));
    float _2373 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2374 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2375 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2381 = cbMtdParam._m0[2u].x * _2343;
    float _2382 = cbMtdParam._m0[2u].y * _2347;
    float _2383 = cbMtdParam._m0[2u].z * _2351;
    float _4168 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2385 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    uint _2386 = _386 + 6u;
    float _2394 = _346 / cbSceneParam._m0[86u].x;
    float _2395 = _347 / cbSceneParam._m0[86u].y;
    vec4 _2409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, (log2((isnan(cbSceneParam._m0[77u].w) ? _267 : (isnan(_267) ? cbSceneParam._m0[77u].w : min(_267, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2411 = _2409.x;
    float _2412 = _2409.y;
    float _2413 = _2409.z;
    float _2414 = _2409.w;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_267 > cbSceneParam._m0[78u].w)
    {
        float _2448 = isnan(_267) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _267 : min(cbSceneParam._m0[80u].w, _267));
        float _2449 = _2448 / _267;
        float _2460 = _2449 * _318;
        float _2461 = _319 * _2449;
        float _2462 = (-0.0) - _2461;
        float _2463 = _2449 * _320;
        float _2465 = (cbSceneParam._m0[77u].w * _2462) / _2448;
        float _2466 = _2465 + cbSceneParam._m0[79u].w;
        float _2467 = cbSceneParam._m0[79u].w - _2461;
        float _2473 = sqrt(((_2460 * _2460) + (_2461 * _2461)) + (_2463 * _2463));
        float _2476 = (1.0 - (cbSceneParam._m0[77u].w / _2448)) * _2473;
        float _2481 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2483 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2667;
        if (abs((_2462 - _2465) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2667 = ((((_2466 > 0.0) ? exp2(_2481 * _2466) : (2.0 - exp2(_2483 * _2466))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2476;
        }
        else
        {
            float _2611 = 1.0 / cbSceneParam._m0[80u].x;
            float _2612 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : max(_2466, _2467));
            float _2613 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : min(_2466, _2467));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            _2667 = ((abs(_2473 / _2462) * cbSceneParam._m0[80u].y) * ((((_2622 - _2623) * 2.0) - ((exp2(_2481 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)))) - exp2(_2481 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))))) * _2611)) - ((exp2(_2483 * _2622) - exp2(_2483 * _2623)) * _2611))) + (_2476 * cbSceneParam._m0[80u].z);
        }
        vec4 _2669 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, 1.0), 0.0);
        float _2678 = exp2((_2667 * (-1.44269502162933349609375)) * (1.0 - _2669.w));
        float _2679 = log2(_2678);
        float _2695 = log2(_2414);
        _2485 = (exp2(_2695 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].x)) * _2669.x) / cbSceneParam._m0[78u].x)) + _2411;
        _2487 = (exp2(_2695 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].y)) * _2669.y) / cbSceneParam._m0[78u].y)) + _2412;
        _2489 = (exp2(_2695 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].z)) * _2669.z) / cbSceneParam._m0[78u].z)) + _2413;
        _2491 = _2678 * _2414;
    }
    else
    {
        _2485 = _2411;
        _2487 = _2412;
        _2489 = _2413;
        _2491 = _2414;
    }
    bool _2705;
    vec4 _2500;
    vec4 _2523;
    float _2525;
    float _2529;
    float _2530;
    float _2531;
    float _2534;
    float _2537;
    float _2540;
    float _2541;
    bool _2552;
    for (;;)
    {
        _2500 = cbMatDynParam._m0[0u];
        float _2502 = roundEven(_2500.y);
        bool _2503 = _2502 == 3.0;
        float _2505 = log2(_2491);
        float _2509 = exp2(_2505 * cbSceneParam._m0[78u].x);
        float _2510 = exp2(_2505 * cbSceneParam._m0[78u].y);
        float _2511 = exp2(_2505 * cbSceneParam._m0[78u].z);
        float _2512 = _2509 * _2373;
        float _2513 = _2510 * _2374;
        float _2514 = _2511 * _2375;
        float _2521 = _334 + (-0.5);
        _2523 = cbMtdParam._m0[1u];
        _2525 = _2523.y * _2521;
        float _2528 = (_2502 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2529 = _2528 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2485)));
        _2530 = _2528 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2487)));
        _2531 = _2528 * (_2503 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2489)));
        _2534 = ((_2381 * _2385) * _2509) * _2528;
        _2537 = ((_2382 * _2385) * _2510) * _2528;
        _2540 = ((_2383 * _2385) * _2511) * _2528;
        _2541 = _2521 * 0.999000012874603271484375;
        _2552 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2552)
        {
            if ((cbInstanceData._m0[_386 + 7u].x + _2541) < 0.5)
            {
                _2705 = true;
                break;
            }
        }
        uint _2646 = _388 + uint(_2500.w);
        if ((cbInstanceData._m0[_2646].w < 1.0) && ((cbInstanceData._m0[_2646].w + _2541) < 0.5))
        {
            _2705 = true;
            break;
        }
        if ((_2525 + _207) < _2523.x)
        {
            _2705 = true;
            break;
        }
        _2705 = false;
        break;
    }
    float _2860;
    if (_2705)
    {
        discard_state = true;
        _2860 = 0.0;
    }
    else
    {
        _2860 = cbInstanceData._m0[_2386].w;
    }
    SV_Target.x = _2529;
    SV_Target.y = _2530;
    SV_Target.z = _2531;
    SV_Target.w = _2860;
    SV_Target_1.x = _2534;
    SV_Target_1.y = _2537;
    SV_Target_1.z = _2540;
    SV_Target_1.w = cbInstanceData._m0[_2386].w;
    discard_exit();
}


