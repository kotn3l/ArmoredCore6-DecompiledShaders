#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _783;
float _3017;
float _3018;
float _3019;
float _3020;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.w;
    float _206 = _199.x * cbMtdParam._m0[9u].x;
    float _207 = _199.y * cbMtdParam._m0[9u].y;
    float _208 = _199.z * cbMtdParam._m0[9u].z;
    vec4 _230 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _243 = _242 * _177;
    float _244 = _242 * _178;
    float _245 = _242 * _179;
    float _3029 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3040 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3051 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _265 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _306 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _316 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _306);
    float _317 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _306);
    float _318 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _306);
    float _322 = inversesqrt(dot(vec3(_316, _317, _318), vec3(_316, _317, _318)));
    float _323 = _316 * _322;
    float _324 = _317 * _322;
    float _325 = _318 * _322;
    vec4 _330 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _332 = _330.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _462 = sqrt(((_316 * _316) + (_317 * _317)) + (_318 * _318));
        float _468 = (cbMatDynParam._m0[5u].x * _462) + cbMatDynParam._m0[5u].y;
        float _3062 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
        float _469 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
        float _473 = (cbMatDynParam._m0[5u].z * _462) + cbMatDynParam._m0[5u].w;
        float _3073 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0))) - _469)) + _469) < ((_332 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _344 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _345 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _365 = fma(_245, cbSceneParam._m0[5u].z, fma(_244, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _243));
    float _368 = fma(_245, cbSceneParam._m0[6u].z, fma(_244, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _243));
    float _371 = fma(_245, cbSceneParam._m0[7u].z, fma(_244, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _243));
    uint _384 = uint(roundEven(NORMAL.w)) * 13u;
    uint _386 = _384 + 9u;
    uint _387 = _386 + uint(cbMatDynParam._m0[0u].w);
    float _393 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0)))) * cbInstanceData._m0[_387].x;
    float _394 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0)))) * cbInstanceData._m0[_387].y;
    float _395 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0)))) * cbInstanceData._m0[_387].z;
    float _3084 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    float _3095 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _397 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
    float _3106 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _398 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    vec4 _407 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _344, cbSceneParam._m0[86u].y * _345));
    float _410 = _407.x * TEXCOORD.z;
    float _411 = dot(vec3(_243, _244, _245), vec3(_323, _324, _325));
    float _414 = _411 * 2.0;
    float _419 = (_414 * _243) - _323;
    float _420 = (_414 * _244) - _324;
    float _421 = (_414 * _245) - _325;
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _782;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _507 = fma(_451, cbModelParam._m0[26u].z, fma(_447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _443));
        float _511 = fma(_451, cbModelParam._m0[27u].z, fma(_447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _443));
        float _515 = fma(_451, cbModelParam._m0[28u].z, fma(_447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _443));
        float _540 = _443 + _243;
        float _541 = _447 + _244;
        float _542 = _451 + _245;
        float _552 = fma(_542, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540)) - _507;
        float _553 = fma(_542, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540)) - _511;
        float _554 = fma(_542, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540)) - _515;
        float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
        float _571 = ((_558 * _552) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_507 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _572 = ((_558 * _553) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_511 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _573 = ((_558 * _554) / cbModelParam._m0[34u].z) + ((((((_515 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        float _610 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_576.x + (-0.5));
        float _612 = _610 * (_576.y + (-0.5));
        float _613 = _610 * (_576.z + (-0.5));
        float _620 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_583.x + (-0.5));
        float _622 = _620 * (_583.y + (-0.5));
        float _623 = _620 * (_583.z + (-0.5));
        float _630 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_590.x + (-0.5));
        float _632 = _630 * (_590.y + (-0.5));
        float _633 = _630 * (_590.z + (-0.5));
        float _640 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_597.x + (-0.5));
        float _642 = _640 * (_597.y + (-0.5));
        float _643 = _640 * (_597.z + (-0.5));
        float _644 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _645 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _647 = _611 * 0.5;
        float _648 = _621 * 0.5;
        float _649 = _631 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _664 = (dot(vec3(_243, _244, _245), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _3132 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _674 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_644 + 9.9999997473787516355514526367188e-06);
        float _3143 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _676 = _675 * 2.0;
        float _680 = (1.0 - _675) / (_675 + 1.0);
        float _3154 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _690 = ((((1.0 - _681) * (_676 + 2.0)) * exp2(log2(isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0))) * (_676 + 1.0))) + _681) * _644;
        float _691 = _612 * 0.5;
        float _692 = _622 * 0.5;
        float _693 = _632 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _707 = (dot(vec3(_243, _244, _245), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _3165 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _716 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_645 + 9.9999997473787516355514526367188e-06);
        float _3176 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _718 = _717 * 2.0;
        float _722 = (1.0 - _717) / (_717 + 1.0);
        float _3187 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _732 = ((((1.0 - _723) * (_718 + 2.0)) * exp2(log2(isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_718 + 1.0))) + _723) * _645;
        float _733 = _613 * 0.5;
        float _734 = _623 * 0.5;
        float _735 = _633 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _749 = (dot(vec3(_243, _244, _245), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3198 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _758 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_646 + 9.9999997473787516355514526367188e-06);
        float _3209 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3220 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (_760 + 1.0))) + _765) * _646;
        _782 = _613;
        _784 = _612;
        _785 = _611;
        _786 = _623;
        _787 = _622;
        _788 = _621;
        _789 = _633;
        _790 = _632;
        _791 = _631;
        _792 = _646;
        _793 = _645;
        _794 = _644;
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0)));
        _796 = cbModelParam._m0[36u].z * (isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0)));
        _797 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
    }
    else
    {
        _782 = _783;
        _784 = _783;
        _785 = _783;
        _786 = _783;
        _787 = _783;
        _788 = _783;
        _789 = _783;
        _790 = _783;
        _791 = _783;
        _792 = _783;
        _793 = _783;
        _794 = _783;
        _795 = 0.0;
        _796 = 0.0;
        _797 = 0.0;
    }
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _826 = fma(_451, cbModelParam._m0[30u].z, fma(_447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _443));
        float _830 = fma(_451, cbModelParam._m0[31u].z, fma(_447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _443));
        float _834 = fma(_451, cbModelParam._m0[32u].z, fma(_447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _443));
        float _857 = _443 + _243;
        float _858 = _447 + _244;
        float _859 = _451 + _245;
        float _869 = fma(_859, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857)) - _826;
        float _870 = fma(_859, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857)) - _830;
        float _871 = fma(_859, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857)) - _834;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_826 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_830 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[35u].z) + ((((((_834 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _925 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_892.x + (-0.5));
        float _927 = _925 * (_892.y + (-0.5));
        float _928 = _925 * (_892.z + (-0.5));
        float _935 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_899.x + (-0.5));
        float _937 = _935 * (_899.y + (-0.5));
        float _938 = _935 * (_899.z + (-0.5));
        float _945 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_906.x + (-0.5));
        float _947 = _945 * (_906.y + (-0.5));
        float _948 = _945 * (_906.z + (-0.5));
        float _955 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_913.x + (-0.5));
        float _957 = _955 * (_913.y + (-0.5));
        float _958 = _955 * (_913.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_243, _244, _245), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3261 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3272 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3283 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * (_989 + 1.0))) + _994) * _959;
        float _1004 = _927 * 0.5;
        float _1005 = _937 * 0.5;
        float _1006 = _947 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_243, _244, _245), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3316 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_1031 + 1.0))) + _1036) * _960;
        float _1046 = _928 * 0.5;
        float _1047 = _938 * 0.5;
        float _1048 = _948 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_243, _244, _245), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3349 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1073 + 1.0))) + _1078) * _961;
        _1095 = _928;
        _1096 = _927;
        _1097 = _926;
        _1098 = _938;
        _1099 = _937;
        _1100 = _936;
        _1101 = _948;
        _1102 = _947;
        _1103 = _946;
        _1104 = _961;
        _1105 = _960;
        _1106 = _959;
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1108 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _783;
        _1096 = _783;
        _1097 = _783;
        _1098 = _783;
        _1099 = _783;
        _1100 = _783;
        _1101 = _783;
        _1102 = _783;
        _1103 = _783;
        _1104 = _783;
        _1105 = _783;
        _1106 = _783;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _795)) + _795;
    float _1120 = (cbModelParam._m0[1u].x * (_1108 - _796)) + _796;
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _797)) + _797;
    float _1142 = fma(_1121, cbSceneParam._m0[89u].z, fma(_1120, cbSceneParam._m0[89u].y, _1119 * cbSceneParam._m0[89u].x));
    float _1145 = fma(_1121, cbSceneParam._m0[90u].z, fma(_1120, cbSceneParam._m0[90u].y, _1119 * cbSceneParam._m0[90u].x));
    float _1148 = fma(_1121, cbSceneParam._m0[91u].z, fma(_1120, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1119));
    float _1163 = _419 * 0.5;
    float _1164 = _420 * 0.5;
    float _1165 = _421 * 0.5;
    float _1166 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1169 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1096, _1099, _1102, _1105));
    float _1172 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1206;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1179 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_782, _786, _789, _792));
        float _1183 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_784, _787, _790, _793));
        float _1187 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_785, _788, _791, _794));
        float _1194 = dot(vec4(cbModelParam._m0[39u]), vec4(_1163, _1164, _1165, 1.0));
        _1206 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1206 = 1.0;
    }
    float _1217;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1208 = dot(vec4(cbModelParam._m0[40u]), vec4(_1163, _1164, _1165, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1221 = (_1217 * cbModelParam._m0[1u].x) + (_1206 * (1.0 - cbModelParam._m0[1u].x));
    float _1230 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1312;
    float _1314;
    float _1316;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1279 = fma(_451, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443)) + cbModelParam._m0[13u].w;
        float _1283 = fma(_451, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443)) + cbModelParam._m0[14u].w;
        float _1287 = fma(_451, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443)) + cbModelParam._m0[15u].w;
        float _1290 = fma(_421, cbModelParam._m0[13u].z, fma(_420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419));
        float _1293 = fma(_421, cbModelParam._m0[14u].z, fma(_420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419));
        float _1296 = fma(_421, cbModelParam._m0[15u].z, fma(_420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419));
        float _1322;
        if (_1290 > 0.0)
        {
            _1322 = abs((1.0 - _1279) / _1290);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1279 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1322 = frontier_phi_19_17_ladder;
        }
        float _1550;
        if (_1293 > 0.0)
        {
            _1550 = abs((1.0 - _1283) / _1293);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1283 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1550 = frontier_phi_28_24_ladder;
        }
        float _1742;
        if (_1296 > 0.0)
        {
            _1742 = abs((1.0 - _1287) / _1296);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1287 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1742 = frontier_phi_40_35_ladder;
        }
        float _1744 = isnan(_1550) ? _1322 : (isnan(_1322) ? _1550 : min(_1322, _1550));
        float _1745 = isnan(_1742) ? _1744 : (isnan(_1744) ? _1742 : min(_1744, _1742));
        float _1749 = (_1745 * _1290) + _1279;
        float _1750 = (_1745 * _1293) + _1283;
        float _1751 = (_1745 * _1296) + _1287;
        float _1752 = _1745 * 9.9999997473787516355514526367188e-05;
        float _1754 = (-1.0) - _1752;
        float _1756 = _1752 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1751 > _1756) || ((_1751 < _1754) || ((_1750 > _1756) || ((_1750 < _1754) || ((_1749 < _1754) || (_1749 > _1756))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1751, cbModelParam._m0[9u].z, fma(_1750, cbModelParam._m0[9u].y, _1749 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1751, cbModelParam._m0[10u].z, fma(_1750, cbModelParam._m0[10u].y, _1749 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1751, cbModelParam._m0[11u].z, fma(_1750, cbModelParam._m0[11u].y, _1749 * cbModelParam._m0[11u].x))), _1230);
            frontier_phi_18_40_ladder = _1848.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1848.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1848.x * cbModelParam._m0[1u].y;
        }
        _1312 = frontier_phi_18_40_ladder_2;
        _1314 = frontier_phi_18_40_ladder_1;
        _1316 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_419, _420, _421), _1230);
        _1312 = _1300.x * cbModelParam._m0[1u].y;
        _1314 = _1300.y * cbModelParam._m0[1u].y;
        _1316 = _1300.z * cbModelParam._m0[1u].y;
    }
    float _1319 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1376 = fma(_451, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443)) + cbModelParam._m0[21u].w;
        float _1380 = fma(_451, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443)) + cbModelParam._m0[22u].w;
        float _1384 = fma(_451, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443)) + cbModelParam._m0[23u].w;
        float _1387 = fma(_421, cbModelParam._m0[21u].z, fma(_420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419));
        float _1390 = fma(_421, cbModelParam._m0[22u].z, fma(_420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419));
        float _1393 = fma(_421, cbModelParam._m0[23u].z, fma(_420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419));
        float _1555;
        if (_1387 > 0.0)
        {
            _1555 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1555 = frontier_phi_30_26_ladder;
        }
        float _1769;
        if (_1390 > 0.0)
        {
            _1769 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1769 = frontier_phi_42_37_ladder;
        }
        float _1920;
        if (_1393 > 0.0)
        {
            _1920 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1920 = frontier_phi_51_48_ladder;
        }
        float _1922 = isnan(_1769) ? _1555 : (isnan(_1555) ? _1769 : min(_1555, _1769));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1387) + _1376;
        float _1928 = (_1923 * _1390) + _1380;
        float _1929 = (_1923 * _1393) + _1384;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1930;
        float _1933 = _1930 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1929 > _1933) || ((_1929 < _1931) || ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 < _1931) || (_1927 > _1933))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1929, cbModelParam._m0[17u].z, fma(_1928, cbModelParam._m0[17u].y, _1927 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1929, cbModelParam._m0[18u].z, fma(_1928, cbModelParam._m0[18u].y, _1927 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1929, cbModelParam._m0[19u].z, fma(_1928, cbModelParam._m0[19u].y, _1927 * cbModelParam._m0[19u].x))), _1319);
            frontier_phi_27_51_ladder = _2165.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2165.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2165.x * cbModelParam._m0[1u].z;
        }
        _1412 = frontier_phi_27_51_ladder_2;
        _1414 = frontier_phi_27_51_ladder_1;
        _1416 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_419, _420, _421), _1319);
        _1412 = _1396.x * cbModelParam._m0[1u].z;
        _1414 = _1396.y * cbModelParam._m0[1u].z;
        _1416 = _1396.z * cbModelParam._m0[1u].z;
    }
    float _1428 = _410 * 0.01200000010430812835693359375;
    float _1430 = _1428 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1431 = _1428 * ((cbModelParam._m0[1u].w * (_1414 - _1314)) + _1314);
    float _1432 = _1428 * ((cbModelParam._m0[1u].w * (_1416 - _1316)) + _1316);
    float _1435 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, _1430 * cbSceneParam._m0[91u].x));
    vec4 _1449 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_344, _345));
    float _1451 = _1449.w;
    float _1463 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1451);
    float _1464 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1451);
    float _1465 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1451);
    uvec4 _1469 = floatBitsToUint(cbInstanceData._m0[_384 + 5u]);
    uint _1471 = _1469.x * 14u;
    uint _1472 = _1471 + 13u;
    float _1479 = _410 + (-1.0);
    float _1485 = (cbLight._m0[_1472].x * _1479) + 1.0;
    float _1486 = (cbLight._m0[_1472].y * _1479) + 1.0;
    float _1487 = (cbLight._m0[_1472].z * _1479) + 1.0;
    float _1488 = (cbLight._m0[_1472].w * _1479) + 1.0;
    uint _1489 = _1471 + 5u;
    float _1495 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
    uint _1499 = _1471 + 4u;
    float _1509 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
    uint _1513 = _1471 | 1u;
    float _1524 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_243, _244, _245));
    float _1527 = dot(vec3(cbLight._m0[_1513].xyz), vec3(_243, _244, _245));
    float _3485 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
    float _3496 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1532 = (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.3183098733425140380859375;
    float _1534 = (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.3183098733425140380859375;
    float _1541 = ((cbLight._m0[_1489].x * _1495) * _1534) + (((cbLight._m0[_1499].x * _1463) * _1509) * _1532);
    float _1542 = ((_1495 * cbLight._m0[_1489].y) * _1534) + (((cbLight._m0[_1499].y * _1464) * _1509) * _1532);
    float _1543 = ((_1495 * cbLight._m0[_1489].z) * _1534) + (((cbLight._m0[_1499].z * _1465) * _1509) * _1532);
    uvec4 _1547 = floatBitsToUint(cbLight._m0[_1471 + 12u]);
    bool _1549 = _1547.x == 0u;
    float _1560;
    float _1562;
    float _1564;
    if (_1549)
    {
        _1560 = _1541;
        _1562 = _1542;
        _1564 = _1543;
    }
    else
    {
        uint _1568 = _1471 + 6u;
        float _1584 = (dot(vec3(cbLight._m0[_1471 + 2u].xyz), vec3(_243, _244, _245)) * 0.5) + 0.5;
        float _1585 = _1584 * _1584;
        float _3507 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1587 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1560 = (((cbLight._m0[_1568].x * 0.3183098733425140380859375) * _1586) * _1587) + _1541;
        _1562 = (((cbLight._m0[_1568].y * 0.3183098733425140380859375) * _1586) * _1587) + _1542;
        _1564 = (((cbLight._m0[_1568].z * 0.3183098733425140380859375) * _1586) * _1587) + _1543;
    }
    bool _1567 = _1547.y == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1567)
    {
        _1605 = _1560;
        _1607 = _1562;
        _1609 = _1564;
    }
    else
    {
        uint _1713 = _1471 + 7u;
        float _1729 = (dot(vec3(cbLight._m0[_1471 + 3u].xyz), vec3(_243, _244, _245)) * 0.5) + 0.5;
        float _1730 = _1729 * _1729;
        float _3523 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1732 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1605 = (((cbLight._m0[_1713].x * 0.3183098733425140380859375) * _1731) * _1732) + _1560;
        _1607 = (((cbLight._m0[_1713].y * 0.3183098733425140380859375) * _1731) * _1732) + _1562;
        _1609 = (((cbLight._m0[_1713].z * 0.3183098733425140380859375) * _1731) * _1732) + _1564;
    }
    uint _1611 = _1471 + 8u;
    float _1617 = cbLight._m0[_1471].x + _323;
    float _1618 = cbLight._m0[_1471].y + _324;
    float _1619 = cbLight._m0[_1471].z + _325;
    float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
    float _1627 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1471].xyz));
    float _3539 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1630 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _1631 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _1632 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_1617 * _1623, _1618 * _1623, _1619 * _1623));
    float _3561 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1643 = (exp2(log2(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1649 = (0.5 / ((_1630 + 9.9999999392252902907785028219223e-09) + _1631)) * _1630;
    float _3572 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1651 = (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.31831014156341552734375;
    uint _1665 = _1471 + 9u;
    float _1671 = cbLight._m0[_1513].x + _323;
    float _1672 = cbLight._m0[_1513].y + _324;
    float _1673 = cbLight._m0[_1513].z + _325;
    float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
    float _1681 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1513].xyz));
    float _3583 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _1685 = dot(vec3(cbLight._m0[_1513].xyz), vec3(_1671 * _1677, _1672 * _1677, _1673 * _1677));
    float _3594 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1694 = (exp2(log2(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1698 = (0.5 / ((_1684 + 9.9999999392252902907785028219223e-09) + _1631)) * _1684;
    float _3605 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1700 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.31831014156341552734375;
    float _1710 = (((_1694 * cbLight._m0[_1665].x) * _1700) * _1495) + ((((cbLight._m0[_1611].x * _1463) * _1643) * _1651) * _1509);
    float _1711 = (((_1694 * cbLight._m0[_1665].y) * _1700) * _1495) + ((((cbLight._m0[_1611].y * _1464) * _1643) * _1651) * _1509);
    float _1712 = (((_1694 * cbLight._m0[_1665].z) * _1700) * _1495) + ((((cbLight._m0[_1611].z * _1465) * _1643) * _1651) * _1509);
    float _1774;
    float _1776;
    float _1778;
    if (_1549)
    {
        _1774 = _1710;
        _1776 = _1711;
        _1778 = _1712;
    }
    else
    {
        uint _1780 = _1471 + 10u;
        uint _1786 = _1471 + 2u;
        float _1792 = cbLight._m0[_1786].x + _323;
        float _1793 = cbLight._m0[_1786].y + _324;
        float _1794 = cbLight._m0[_1786].z + _325;
        float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
        float _1802 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1786].xyz));
        float _3616 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1805 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1806 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1792 * _1798, _1793 * _1798, _1794 * _1798));
        float _3627 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1819 = (0.5 / ((_1805 + 9.9999999392252902907785028219223e-09) + _1631)) * _1805;
        float _3638 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1821 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.31831014156341552734375;
        float _1822 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1774 = (((_1815 * cbLight._m0[_1780].x) * _1821) * _1822) + _1710;
        _1776 = (((_1815 * cbLight._m0[_1780].y) * _1821) * _1822) + _1711;
        _1778 = (((_1815 * cbLight._m0[_1780].z) * _1821) * _1822) + _1712;
    }
    float _1857;
    float _1859;
    float _1861;
    if (_1567)
    {
        _1857 = _1774;
        _1859 = _1776;
        _1861 = _1778;
    }
    else
    {
        uint _1868 = _1471 + 11u;
        uint _1874 = _1471 + 3u;
        float _1880 = cbLight._m0[_1874].x + _323;
        float _1881 = cbLight._m0[_1874].y + _324;
        float _1882 = cbLight._m0[_1874].z + _325;
        float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
        float _1890 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1874].xyz));
        float _3654 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1893 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1894 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_1880 * _1886, _1881 * _1886, _1882 * _1886));
        float _3665 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1907 = (0.5 / ((_1893 + 9.9999999392252902907785028219223e-09) + _1631)) * _1893;
        float _3676 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1909 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.31831014156341552734375;
        float _1910 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1857 = (((_1903 * cbLight._m0[_1868].x) * _1909) * _1910) + _1774;
        _1859 = (((_1903 * cbLight._m0[_1868].y) * _1909) * _1910) + _1776;
        _1861 = (((_1903 * cbLight._m0[_1868].z) * _1909) * _1910) + _1778;
    }
    float _2044;
    float _2046;
    float _2048;
    float _2050;
    float _2052;
    float _2054;
    if (_1469.y == 0u)
    {
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1985;
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1985;
        float _1988 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1985;
        uvec4 _2000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2001 = _2000.x;
        uint _2012 = uint((float(_2000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _345) / _2001))) + floor(float(uint(cbSceneParam._m0[85u].x * _344) / _2001)));
        float _2022 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2023 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        uint _2026 = uint(isnan(14.0) ? _2023 : (isnan(_2023) ? 14.0 : min(_2023, 14.0)));
        uvec4 _2031 = texelFetch(g_lightClusterGridBuffer, int(((_2026 << 2u) + (_2012 << 6u)) >> 2u));
        uint _2032 = _2031.x;
        uint _2033 = _2000.z;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        if (((((1u << ((_2033 >> 4u) & 15u)) + 4294967295u) & _2032) == 0u) || ((_2033 & 240u) == 0u))
        {
            _2170 = 0.0;
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
        }
        else
        {
            float _2171;
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2181;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            uint _2335 = 0u;
            uint _2344;
            bool _2345;
            for (;;)
            {
                _2344 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2335 << 2u)) >> 2u)).x;
                _2345 = _2344 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2345)
                {
                    frontier_phi_68_pred = _2331;
                    frontier_phi_68_pred_1 = _2334;
                    frontier_phi_68_pred_2 = _2333;
                    frontier_phi_68_pred_3 = _2332;
                    frontier_phi_68_pred_4 = _2330;
                    frontier_phi_68_pred_5 = _2329;
                }
                else
                {
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    uint _2480;
                    _2474 = _2329;
                    _2475 = _2330;
                    _2476 = _2331;
                    _2477 = _2332;
                    _2478 = _2333;
                    _2479 = _2334;
                    _2480 = _2344;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    for (;;)
                    {
                        uint _2484 = uint(findLSB(_2480)) + (_2335 << 5u);
                        uint _2481 = (_2480 + 4294967295u) & _2480;
                        uint _2486 = _2484 * 48u;
                        vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2486)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 3u)).x));
                        uint _2506 = (_2484 * 48u) + 4u;
                        vec4 _2519 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 3u)).x));
                        uint _2525 = (_2484 * 48u) + 8u;
                        vec3 _2536 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2525)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 2u)).x));
                        float _2540 = _2500.x - _1986;
                        float _2541 = _2500.y - _1987;
                        float _2542 = _2500.z - _1988;
                        float _2543 = dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542));
                        float _2546 = inversesqrt(_2543);
                        float _2555 = 1.0 - (_2543 * _2500.w);
                        float _3702 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
                        float _2556 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2557 = sqrt(_2543) * _2519.w;
                        float _2560 = 1.39999997615814208984375 / (_2557 + 1.39999997615814208984375);
                        float _2561 = _2560 * _2560;
                        float _2564 = ((1.0 - _2561) * dot(vec3(_365, _368, _371), vec3(_2546 * _2540, _2546 * _2541, _2546 * _2542))) + _2561;
                        float _2567 = _2557 * _2557;
                        float _2571 = ((isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))) * _2556) / ((_2567 * 0.699999988079071044921875) + 1.0);
                        float _2575 = (-0.0) - _1986;
                        float _2576 = (-0.0) - _1987;
                        float _2577 = (-0.0) - _1988;
                        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
                        float _2585 = dot(vec3(_365, _368, _371), vec3(_2581 * _2575, _2581 * _2576, _2581 * _2577));
                        float _3718 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _3729 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2589 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                        float _2593 = (0.5 / (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) + 9.9999999392252902907785028219223e-09) + _2589)) * _2589;
                        float _3740 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _2602 = (((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 3.1415927410125732421875) / ((_2567 * 2.1991131305694580078125) + 3.141590118408203125)) * _2556;
                        _2404 = (_2571 * _2519.x) + _2477;
                        _2405 = (_2571 * _2519.y) + _2478;
                        _2406 = (_2571 * _2519.z) + _2479;
                        _2401 = (_2602 * _2536.x) + _2474;
                        _2402 = (_2602 * _2536.y) + _2475;
                        _2403 = (_2602 * _2536.z) + _2476;
                        if (_2481 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2474 = _2401;
                            _2475 = _2402;
                            _2476 = _2403;
                            _2477 = _2404;
                            _2478 = _2405;
                            _2479 = _2406;
                            _2480 = _2481;
                        }
                    }
                    frontier_phi_68_pred = _2403;
                    frontier_phi_68_pred_1 = _2406;
                    frontier_phi_68_pred_2 = _2405;
                    frontier_phi_68_pred_3 = _2404;
                    frontier_phi_68_pred_4 = _2402;
                    frontier_phi_68_pred_5 = _2401;
                }
                _2175 = frontier_phi_68_pred;
                _2181 = frontier_phi_68_pred_1;
                _2179 = frontier_phi_68_pred_2;
                _2177 = frontier_phi_68_pred_3;
                _2173 = frontier_phi_68_pred_4;
                _2171 = frontier_phi_68_pred_5;
                uint _2336 = _2335 + 1u;
                if (_2336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2329 = _2171;
                    _2330 = _2173;
                    _2331 = _2175;
                    _2332 = _2177;
                    _2333 = _2179;
                    _2334 = _2181;
                    _2335 = _2336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2170 = _2171;
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
        }
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.z;
        uint _2187 = (_2185 >> 8u) & 15u;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((4294967295u << _2187) & _2032) == 0u)
        {
            _2300 = _2170;
            _2302 = _2172;
            _2304 = _2174;
            _2306 = _2176;
            _2308 = _2178;
            _2310 = _2180;
        }
        else
        {
            float _2325 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2187 < ((_2185 >> 12u) & 15u))
            {
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2457 = _2170;
                float _2458 = _2172;
                float _2459 = _2174;
                float _2460 = _2176;
                float _2461 = _2178;
                float _2462 = _2180;
                uint _2463 = _2187;
                uint _2472;
                bool _2473;
                for (;;)
                {
                    _2472 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2463 << 2u)) >> 2u)).x;
                    _2473 = _2472 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2473)
                    {
                        frontier_phi_79_pred = _2462;
                        frontier_phi_79_pred_1 = _2461;
                        frontier_phi_79_pred_2 = _2460;
                        frontier_phi_79_pred_3 = _2459;
                        frontier_phi_79_pred_4 = _2458;
                        frontier_phi_79_pred_5 = _2457;
                    }
                    else
                    {
                        float _2616;
                        float _2617;
                        float _2618;
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2629 = _2457;
                        float _2630 = _2458;
                        float _2631 = _2459;
                        float _2632 = _2460;
                        float _2633 = _2461;
                        float _2634 = _2462;
                        uint _2635 = _2472;
                        uint _2636;
                        vec4 _2661;
                        float _2662;
                        vec4 _2677;
                        vec3 _2689;
                        vec4 _2705;
                        vec4 _2721;
                        float _2768;
                        bool _2769;
                        for (;;)
                        {
                            uint _2646 = ((_2463 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2635));
                            _2636 = (_2635 + 4294967295u) & _2635;
                            uint _2648 = _2646 * 40u;
                            _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            _2662 = _2661.w;
                            uint _2664 = (_2646 * 40u) + 4u;
                            _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            uint _2679 = (_2646 * 40u) + 8u;
                            _2689 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x));
                            uint _2692 = (_2646 * 40u) + 16u;
                            _2705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 3u)).x));
                            uint _2708 = (_2646 * 40u) + 20u;
                            _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            uint _2724 = (_2646 * 40u) + 24u;
                            vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2743 = (_2646 * 40u) + 28u;
                            vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            _2768 = fma(_1988, _2756.z, fma(_1987, _2756.y, _2756.x * _1986)) + _2756.w;
                            _2769 = !((fma(_1988, _2737.z, fma(_1987, _2737.y, _2737.x * _1986)) + _2737.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2769)
                            {
                                float _2796 = _2661.x - _1986;
                                float _2797 = _2661.y - _1987;
                                float _2798 = _2661.z - _1988;
                                float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                                float _2802 = inversesqrt(_2799);
                                float _2803 = _2802 * _2796;
                                float _2804 = _2802 * _2797;
                                float _2805 = _2802 * _2798;
                                float _2809 = 1.0 - (_2799 / (_2662 * _2662));
                                float _3751 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                                float _2810 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2814 = sqrt(_2799) * _2677.w;
                                float _2816 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                                float _2817 = _2816 * _2816;
                                float _2818 = 1.0 - _2817;
                                float _2820 = (_2818 * dot(vec3(_2803, _2804, _2805), vec3(_365, _368, _371))) + _2817;
                                float _2823 = _2814 * _2814;
                                float _2827 = (fma(_1988, _2705.z, fma(_1987, _2705.y, _2705.x * _1986)) + _2705.w) / _2768;
                                float _2828 = (fma(_1988, _2721.z, fma(_1987, _2721.y, _2721.x * _1986)) + _2721.w) / _2768;
                                float _2832 = 1.0 - dot(vec2(_2827, _2828), vec2(_2827, _2828));
                                float _3767 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2833 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2834 = _2833 * (((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2810) / ((_2823 * 0.699999988079071044921875) + 1.0));
                                float _2844 = dot(vec3(_365, _368, _371), vec3((-0.0) - (_1986 * _2325), (-0.0) - (_1987 * _2325), (-0.0) - (_1988 * _2325)));
                                float _3778 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2852 = (_2818 * dot(vec3(_365, _368, _371), vec3(_2803, _2804, _2805))) + _2817;
                                float _3789 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2853 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                                float _2857 = (0.5 / (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) + 9.9999999392252902907785028219223e-09) + _2853)) * _2853;
                                float _3800 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                                float _2864 = (_2833 * _2810) * (((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 3.1415927410125732421875) / ((_2823 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2834 * _2677.z;
                                frontier_phi_85_pred_1 = _2834 * _2677.y;
                                frontier_phi_85_pred_2 = _2834 * _2677.x;
                                frontier_phi_85_pred_3 = _2864 * _2689.z;
                                frontier_phi_85_pred_4 = _2864 * _2689.y;
                                frontier_phi_85_pred_5 = _2864 * _2689.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2873 = frontier_phi_85_pred;
                            _2872 = frontier_phi_85_pred_1;
                            _2871 = frontier_phi_85_pred_2;
                            _2870 = frontier_phi_85_pred_3;
                            _2869 = frontier_phi_85_pred_4;
                            _2868 = frontier_phi_85_pred_5;
                            _2619 = _2871 + _2632;
                            _2620 = _2872 + _2633;
                            _2621 = _2873 + _2634;
                            _2616 = _2868 + _2629;
                            _2617 = _2869 + _2630;
                            _2618 = _2870 + _2631;
                            if (_2636 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2629 = _2616;
                                _2630 = _2617;
                                _2631 = _2618;
                                _2632 = _2619;
                                _2633 = _2620;
                                _2634 = _2621;
                                _2635 = _2636;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2621;
                        frontier_phi_79_pred_1 = _2620;
                        frontier_phi_79_pred_2 = _2619;
                        frontier_phi_79_pred_3 = _2618;
                        frontier_phi_79_pred_4 = _2617;
                        frontier_phi_79_pred_5 = _2616;
                    }
                    _2311 = frontier_phi_79_pred;
                    _2309 = frontier_phi_79_pred_1;
                    _2307 = frontier_phi_79_pred_2;
                    _2305 = frontier_phi_79_pred_3;
                    _2303 = frontier_phi_79_pred_4;
                    _2301 = frontier_phi_79_pred_5;
                    uint _2464 = _2463 + 1u;
                    if (_2464 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2457 = _2301;
                        _2458 = _2303;
                        _2459 = _2305;
                        _2460 = _2307;
                        _2461 = _2309;
                        _2462 = _2311;
                        _2463 = _2464;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2307;
                frontier_phi_60_61_ladder_1 = _2311;
                frontier_phi_60_61_ladder_2 = _2309;
                frontier_phi_60_61_ladder_3 = _2305;
                frontier_phi_60_61_ladder_4 = _2303;
                frontier_phi_60_61_ladder_5 = _2301;
            }
            else
            {
                frontier_phi_60_61_ladder = _2176;
                frontier_phi_60_61_ladder_1 = _2180;
                frontier_phi_60_61_ladder_2 = _2178;
                frontier_phi_60_61_ladder_3 = _2174;
                frontier_phi_60_61_ladder_4 = _2172;
                frontier_phi_60_61_ladder_5 = _2170;
            }
            _2300 = frontier_phi_60_61_ladder_5;
            _2302 = frontier_phi_60_61_ladder_4;
            _2304 = frontier_phi_60_61_ladder_3;
            _2306 = frontier_phi_60_61_ladder;
            _2308 = frontier_phi_60_61_ladder_2;
            _2310 = frontier_phi_60_61_ladder_1;
        }
        float _2315 = isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0));
        _2044 = (_2315 * _2306) + _1605;
        _2046 = (_2315 * _2308) + _1607;
        _2048 = (_2315 * _2310) + _1609;
        _2050 = ((_2300 * 0.039999999105930328369140625) * _2315) + _1857;
        _2052 = ((_2302 * 0.039999999105930328369140625) * _2315) + _1859;
        _2054 = ((_2304 * 0.039999999105930328369140625) * _2315) + _1861;
    }
    else
    {
        _2044 = _1605;
        _2046 = _1607;
        _2048 = _1609;
        _2050 = _1857;
        _2052 = _1859;
        _2054 = _1861;
    }
    uint _2060 = _386 + uint(cbMatDynParam._m0[0u].w);
    float _2069 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _230.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2060].x;
    float _2073 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _230.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2060].y;
    float _2077 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _230.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2060].z;
    float _3816 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3827 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3838 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _2094 = (((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_2044 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _410))) + ((_2050 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + _2069;
    float _2096 = (_2073 + ((_2052 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_2046 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _410)));
    float _2098 = (_2077 + ((_2054 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_2048 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _410)));
    float _2099 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2100 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2107 = cbMtdParam._m0[2u].x * _2069;
    float _2108 = cbMtdParam._m0[2u].y * _2073;
    float _2109 = cbMtdParam._m0[2u].z * _2077;
    float _3864 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2111 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    uint _2112 = _384 + 6u;
    float _2120 = _344 / cbSceneParam._m0[86u].x;
    float _2121 = _345 / cbSceneParam._m0[86u].y;
    vec4 _2135 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2120, _2121, (log2((isnan(cbSceneParam._m0[77u].w) ? _265 : (isnan(_265) ? cbSceneParam._m0[77u].w : min(_265, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2137 = _2135.x;
    float _2138 = _2135.y;
    float _2139 = _2135.z;
    float _2140 = _2135.w;
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    if (_265 > cbSceneParam._m0[78u].w)
    {
        float _2195 = isnan(_265) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _265 : min(cbSceneParam._m0[80u].w, _265));
        float _2196 = _2195 / _265;
        float _2207 = _2196 * _316;
        float _2208 = _317 * _2196;
        float _2209 = (-0.0) - _2208;
        float _2210 = _2196 * _318;
        float _2212 = (cbSceneParam._m0[77u].w * _2209) / _2195;
        float _2213 = _2212 + cbSceneParam._m0[79u].w;
        float _2214 = cbSceneParam._m0[79u].w - _2208;
        float _2220 = sqrt(((_2207 * _2207) + (_2208 * _2208)) + (_2210 * _2210));
        float _2223 = (1.0 - (cbSceneParam._m0[77u].w / _2195)) * _2220;
        float _2228 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2230 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2414;
        if (abs((_2209 - _2212) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2414 = ((((_2213 > 0.0) ? exp2(_2228 * _2213) : (2.0 - exp2(_2230 * _2213))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2223;
        }
        else
        {
            float _2358 = 1.0 / cbSceneParam._m0[80u].x;
            float _2359 = isnan(_2214) ? _2213 : (isnan(_2213) ? _2214 : max(_2213, _2214));
            float _2360 = isnan(_2214) ? _2213 : (isnan(_2213) ? _2214 : min(_2213, _2214));
            float _2369 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : min(_2359, 0.0));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            _2414 = ((abs(_2220 / _2209) * cbSceneParam._m0[80u].y) * ((((_2369 - _2370) * 2.0) - ((exp2(_2228 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)))) - exp2(_2228 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0))))) * _2358)) - ((exp2(_2230 * _2369) - exp2(_2230 * _2370)) * _2358))) + (_2223 * cbSceneParam._m0[80u].z);
        }
        vec4 _2416 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2120, _2121, 1.0), 0.0);
        float _2425 = exp2((_2414 * (-1.44269502162933349609375)) * (1.0 - _2416.w));
        float _2426 = log2(_2425);
        float _2442 = log2(_2140);
        _2232 = (exp2(_2442 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].x)) * _2416.x) / cbSceneParam._m0[78u].x)) + _2137;
        _2234 = (exp2(_2442 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].y)) * _2416.y) / cbSceneParam._m0[78u].y)) + _2138;
        _2236 = (exp2(_2442 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].z)) * _2416.z) / cbSceneParam._m0[78u].z)) + _2139;
        _2238 = _2425 * _2140;
    }
    else
    {
        _2232 = _2137;
        _2234 = _2138;
        _2236 = _2139;
        _2238 = _2140;
    }
    bool _2452;
    vec4 _2247;
    vec4 _2270;
    float _2272;
    float _2276;
    float _2277;
    float _2278;
    float _2281;
    float _2284;
    float _2287;
    float _2288;
    bool _2299;
    for (;;)
    {
        _2247 = cbMatDynParam._m0[0u];
        float _2249 = roundEven(_2247.y);
        bool _2250 = _2249 == 3.0;
        float _2252 = log2(_2238);
        float _2256 = exp2(_2252 * cbSceneParam._m0[78u].x);
        float _2257 = exp2(_2252 * cbSceneParam._m0[78u].y);
        float _2258 = exp2(_2252 * cbSceneParam._m0[78u].z);
        float _2259 = _2256 * _2099;
        float _2260 = _2257 * _2100;
        float _2261 = _2258 * _2101;
        float _2268 = _332 + (-0.5);
        _2270 = cbMtdParam._m0[1u];
        _2272 = _2270.y * _2268;
        float _2275 = (_2249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2276 = _2275 * (_2250 ? _2259 : (_2259 + (cbSceneParam._m0[72u].w * _2232)));
        _2277 = _2275 * (_2250 ? _2260 : (_2260 + (cbSceneParam._m0[72u].w * _2234)));
        _2278 = _2275 * (_2250 ? _2261 : (_2261 + (cbSceneParam._m0[72u].w * _2236)));
        _2281 = ((_2107 * _2111) * _2256) * _2275;
        _2284 = ((_2108 * _2111) * _2257) * _2275;
        _2287 = ((_2109 * _2111) * _2258) * _2275;
        _2288 = _2268 * 0.999000012874603271484375;
        _2299 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2299)
        {
            if ((cbInstanceData._m0[_384 + 7u].x + _2288) < 0.5)
            {
                _2452 = true;
                break;
            }
        }
        uint _2393 = _386 + uint(_2247.w);
        if ((cbInstanceData._m0[_2393].w < 1.0) && ((cbInstanceData._m0[_2393].w + _2288) < 0.5))
        {
            _2452 = true;
            break;
        }
        if ((_2272 + _205) < _2270.x)
        {
            _2452 = true;
            break;
        }
        _2452 = false;
        break;
    }
    float _2607;
    if (_2452)
    {
        discard_state = true;
        _2607 = 0.0;
    }
    else
    {
        _2607 = cbInstanceData._m0[_2112].w;
    }
    SV_Target.x = _2276;
    SV_Target.y = _2277;
    SV_Target.z = _2278;
    SV_Target.w = _2607;
    SV_Target_1.x = _2281;
    SV_Target_1.y = _2284;
    SV_Target_1.z = _2287;
    SV_Target_1.w = cbInstanceData._m0[_2112].w;
    discard_exit();
}


