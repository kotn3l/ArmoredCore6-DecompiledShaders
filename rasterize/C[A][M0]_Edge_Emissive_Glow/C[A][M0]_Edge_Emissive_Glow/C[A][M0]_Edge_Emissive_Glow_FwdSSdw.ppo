#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _737;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    vec4 _225 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _237 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _238 = _237 * _173;
    float _239 = _237 * _174;
    float _240 = _237 * _175;
    float _2916 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _2927 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2938 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _260 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _301 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _311 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _301);
    float _312 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _301);
    float _313 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _301);
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _318 = _311 * _317;
    float _319 = _312 * _317;
    float _320 = _313 * _317;
    float _326 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _327 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _348 = fma(_240, cbSceneParam._m0[5u].z, fma(_239, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _238));
    float _351 = fma(_240, cbSceneParam._m0[6u].z, fma(_239, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _238));
    float _354 = fma(_240, cbSceneParam._m0[7u].z, fma(_239, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _238));
    uint _367 = uint(roundEven(NORMAL.w)) * 13u;
    uint _369 = _367 + 9u;
    uint _370 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _376 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0)))) * cbInstanceData._m0[_370].x;
    float _377 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0)))) * cbInstanceData._m0[_370].y;
    float _378 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0)))) * cbInstanceData._m0[_370].z;
    float _2949 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
    float _2960 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
    float _2971 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
    vec4 _390 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _326, cbSceneParam._m0[86u].y * _327));
    float _393 = _390.x * TEXCOORD.z;
    float _394 = dot(vec3(_238, _239, _240), vec3(_318, _319, _320));
    float _397 = _394 * 2.0;
    float _402 = (_397 * _238) - _318;
    float _403 = (_397 * _239) - _319;
    float _404 = (_397 * _240) - _320;
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _736;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _461 = fma(_434, cbModelParam._m0[26u].z, fma(_430, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _426));
        float _465 = fma(_434, cbModelParam._m0[27u].z, fma(_430, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _426));
        float _469 = fma(_434, cbModelParam._m0[28u].z, fma(_430, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _426));
        float _494 = _426 + _238;
        float _495 = _430 + _239;
        float _496 = _434 + _240;
        float _506 = fma(_496, cbModelParam._m0[26u].z, fma(_495, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _494)) - _461;
        float _507 = fma(_496, cbModelParam._m0[27u].z, fma(_495, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _494)) - _465;
        float _508 = fma(_496, cbModelParam._m0[28u].z, fma(_495, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _494)) - _469;
        float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
        float _525 = ((_512 * _506) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_461 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _526 = ((_512 * _507) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_465 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _527 = ((_512 * _508) / cbModelParam._m0[34u].z) + ((((((_469 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _530 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        float _564 = exp2((_530.w + (-0.5)) * 20.0) * 2.0;
        float _565 = _564 * (_530.x + (-0.5));
        float _566 = _564 * (_530.y + (-0.5));
        float _567 = _564 * (_530.z + (-0.5));
        float _574 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _575 = _574 * (_537.x + (-0.5));
        float _576 = _574 * (_537.y + (-0.5));
        float _577 = _574 * (_537.z + (-0.5));
        float _584 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _585 = _584 * (_544.x + (-0.5));
        float _586 = _584 * (_544.y + (-0.5));
        float _587 = _584 * (_544.z + (-0.5));
        float _594 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_551.x + (-0.5));
        float _596 = _594 * (_551.y + (-0.5));
        float _597 = _594 * (_551.z + (-0.5));
        float _598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = _565 * 0.5;
        float _602 = _575 * 0.5;
        float _603 = _585 * 0.5;
        float _604 = dot(vec3(_601, _602, _603), vec3(_601, _602, _603));
        float _609 = (_604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_604);
        float _618 = (dot(vec3(_238, _239, _240), vec3(_609 * _601, _609 * _602, _609 * _603)) + 1.0) * 0.5;
        float _2997 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _628 = sqrt(((_602 * _602) + (_601 * _601)) + (_603 * _603)) / (_598 + 9.9999997473787516355514526367188e-06);
        float _3008 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _629 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
        float _630 = _629 * 2.0;
        float _634 = (1.0 - _629) / (_629 + 1.0);
        float _3019 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
        float _644 = ((((1.0 - _635) * (_630 + 2.0)) * exp2(log2(isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0))) * (_630 + 1.0))) + _635) * _598;
        float _645 = _566 * 0.5;
        float _646 = _576 * 0.5;
        float _647 = _586 * 0.5;
        float _648 = dot(vec3(_645, _646, _647), vec3(_645, _646, _647));
        float _653 = (_648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_648);
        float _661 = (dot(vec3(_238, _239, _240), vec3(_653 * _645, _653 * _646, _653 * _647)) + 1.0) * 0.5;
        float _3030 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _670 = sqrt(((_646 * _646) + (_645 * _645)) + (_647 * _647)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _3041 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _672 = _671 * 2.0;
        float _676 = (1.0 - _671) / (_671 + 1.0);
        float _3052 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _686 = ((((1.0 - _677) * (_672 + 2.0)) * exp2(log2(isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) * (_672 + 1.0))) + _677) * _599;
        float _687 = _567 * 0.5;
        float _688 = _577 * 0.5;
        float _689 = _587 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _703 = (dot(vec3(_238, _239, _240), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3063 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _712 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3074 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3085 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0))) * (_714 + 1.0))) + _719) * _600;
        _736 = _567;
        _738 = _566;
        _739 = _565;
        _740 = _577;
        _741 = _576;
        _742 = _575;
        _743 = _587;
        _744 = _586;
        _745 = _585;
        _746 = _600;
        _747 = _599;
        _748 = _598;
        _749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0)));
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0)));
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
    }
    else
    {
        _736 = _737;
        _738 = _737;
        _739 = _737;
        _740 = _737;
        _741 = _737;
        _742 = _737;
        _743 = _737;
        _744 = _737;
        _745 = _737;
        _746 = _737;
        _747 = _737;
        _748 = _737;
        _749 = 0.0;
        _750 = 0.0;
        _751 = 0.0;
    }
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _777 = fma(_434, cbModelParam._m0[30u].z, fma(_430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _426));
        float _781 = fma(_434, cbModelParam._m0[31u].z, fma(_430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _426));
        float _785 = fma(_434, cbModelParam._m0[32u].z, fma(_430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _426));
        float _808 = _426 + _238;
        float _809 = _430 + _239;
        float _810 = _434 + _240;
        float _820 = fma(_810, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _808)) - _777;
        float _821 = fma(_810, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _808)) - _781;
        float _822 = fma(_810, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _808)) - _785;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_777 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_781 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[35u].z) + ((((((_785 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _876 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_843.x + (-0.5));
        float _878 = _876 * (_843.y + (-0.5));
        float _879 = _876 * (_843.z + (-0.5));
        float _886 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_850.x + (-0.5));
        float _888 = _886 * (_850.y + (-0.5));
        float _889 = _886 * (_850.z + (-0.5));
        float _896 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_857.x + (-0.5));
        float _898 = _896 * (_857.y + (-0.5));
        float _899 = _896 * (_857.z + (-0.5));
        float _906 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_864.x + (-0.5));
        float _908 = _906 * (_864.y + (-0.5));
        float _909 = _906 * (_864.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_238, _239, _240), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3126 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3137 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3148 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0))) * (_940 + 1.0))) + _945) * _910;
        float _955 = _878 * 0.5;
        float _956 = _888 * 0.5;
        float _957 = _898 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_238, _239, _240), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3181 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_982 + 1.0))) + _987) * _911;
        float _997 = _879 * 0.5;
        float _998 = _889 * 0.5;
        float _999 = _899 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_238, _239, _240), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3214 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_1024 + 1.0))) + _1029) * _912;
        _1046 = _879;
        _1047 = _878;
        _1048 = _877;
        _1049 = _889;
        _1050 = _888;
        _1051 = _887;
        _1052 = _899;
        _1053 = _898;
        _1054 = _897;
        _1055 = _912;
        _1056 = _911;
        _1057 = _910;
        _1058 = cbModelParam._m0[36u].w * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1059 = cbModelParam._m0[36u].w * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _737;
        _1047 = _737;
        _1048 = _737;
        _1049 = _737;
        _1050 = _737;
        _1051 = _737;
        _1052 = _737;
        _1053 = _737;
        _1054 = _737;
        _1055 = _737;
        _1056 = _737;
        _1057 = _737;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1070 = (cbModelParam._m0[1u].x * (_1058 - _749)) + _749;
    float _1071 = (cbModelParam._m0[1u].x * (_1059 - _750)) + _750;
    float _1072 = (cbModelParam._m0[1u].x * (_1060 - _751)) + _751;
    float _1093 = fma(_1072, cbSceneParam._m0[89u].z, fma(_1071, cbSceneParam._m0[89u].y, _1070 * cbSceneParam._m0[89u].x));
    float _1096 = fma(_1072, cbSceneParam._m0[90u].z, fma(_1071, cbSceneParam._m0[90u].y, _1070 * cbSceneParam._m0[90u].x));
    float _1099 = fma(_1072, cbSceneParam._m0[91u].z, fma(_1071, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1070));
    float _1114 = _402 * 0.5;
    float _1115 = _403 * 0.5;
    float _1116 = _404 * 0.5;
    float _1117 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_1048, _1051, _1054, _1057));
    float _1120 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_1047, _1050, _1053, _1056));
    float _1123 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_1046, _1049, _1052, _1055));
    float _1157;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1130 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_736, _740, _743, _746));
        float _1134 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_738, _741, _744, _747));
        float _1138 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_739, _742, _745, _748));
        float _1145 = dot(vec4(cbModelParam._m0[39u]), vec4(_1114, _1115, _1116, 1.0));
        _1157 = dot(vec3(isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)), isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1145) ? 0.0 : (isnan(0.0) ? _1145 : max(0.0, _1145))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1157 = 1.0;
    }
    float _1168;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1159 = dot(vec4(cbModelParam._m0[40u]), vec4(_1114, _1115, _1116, 1.0));
        _1168 = dot(vec3(isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1159) ? 0.0 : (isnan(0.0) ? _1159 : max(0.0, _1159))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1168 = 1.0;
    }
    float _1172 = (_1168 * cbModelParam._m0[1u].x) + (_1157 * (1.0 - cbModelParam._m0[1u].x));
    float _1181 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1263;
    float _1265;
    float _1267;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1230 = fma(_434, cbModelParam._m0[13u].z, fma(_430, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _426)) + cbModelParam._m0[13u].w;
        float _1234 = fma(_434, cbModelParam._m0[14u].z, fma(_430, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _426)) + cbModelParam._m0[14u].w;
        float _1238 = fma(_434, cbModelParam._m0[15u].z, fma(_430, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _426)) + cbModelParam._m0[15u].w;
        float _1241 = fma(_404, cbModelParam._m0[13u].z, fma(_403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _402));
        float _1244 = fma(_404, cbModelParam._m0[14u].z, fma(_403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _402));
        float _1247 = fma(_404, cbModelParam._m0[15u].z, fma(_403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _402));
        float _1273;
        if (_1241 > 0.0)
        {
            _1273 = abs((1.0 - _1230) / _1241);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1230 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1273 = frontier_phi_16_14_ladder;
        }
        float _1501;
        if (_1244 > 0.0)
        {
            _1501 = abs((1.0 - _1234) / _1244);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1234 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1501 = frontier_phi_25_21_ladder;
        }
        float _1693;
        if (_1247 > 0.0)
        {
            _1693 = abs((1.0 - _1238) / _1247);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1238 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1693 = frontier_phi_37_32_ladder;
        }
        float _1695 = isnan(_1501) ? _1273 : (isnan(_1273) ? _1501 : min(_1273, _1501));
        float _1696 = isnan(_1693) ? _1695 : (isnan(_1695) ? _1693 : min(_1695, _1693));
        float _1700 = (_1696 * _1241) + _1230;
        float _1701 = (_1696 * _1244) + _1234;
        float _1702 = (_1696 * _1247) + _1238;
        float _1703 = _1696 * 9.9999997473787516355514526367188e-05;
        float _1705 = (-1.0) - _1703;
        float _1707 = _1703 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1702 > _1707) || ((_1702 < _1705) || ((_1701 > _1707) || ((_1701 < _1705) || ((_1700 < _1705) || (_1700 > _1707))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1702, cbModelParam._m0[9u].z, fma(_1701, cbModelParam._m0[9u].y, _1700 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1702, cbModelParam._m0[10u].z, fma(_1701, cbModelParam._m0[10u].y, _1700 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1702, cbModelParam._m0[11u].z, fma(_1701, cbModelParam._m0[11u].y, _1700 * cbModelParam._m0[11u].x))), _1181);
            frontier_phi_15_37_ladder = _1799.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1799.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1799.x * cbModelParam._m0[1u].y;
        }
        _1263 = frontier_phi_15_37_ladder_2;
        _1265 = frontier_phi_15_37_ladder_1;
        _1267 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_402, _403, _404), _1181);
        _1263 = _1251.x * cbModelParam._m0[1u].y;
        _1265 = _1251.y * cbModelParam._m0[1u].y;
        _1267 = _1251.z * cbModelParam._m0[1u].y;
    }
    float _1270 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1363;
    float _1365;
    float _1367;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1327 = fma(_434, cbModelParam._m0[21u].z, fma(_430, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _426)) + cbModelParam._m0[21u].w;
        float _1331 = fma(_434, cbModelParam._m0[22u].z, fma(_430, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _426)) + cbModelParam._m0[22u].w;
        float _1335 = fma(_434, cbModelParam._m0[23u].z, fma(_430, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _426)) + cbModelParam._m0[23u].w;
        float _1338 = fma(_404, cbModelParam._m0[21u].z, fma(_403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _402));
        float _1341 = fma(_404, cbModelParam._m0[22u].z, fma(_403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _402));
        float _1344 = fma(_404, cbModelParam._m0[23u].z, fma(_403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _402));
        float _1506;
        if (_1338 > 0.0)
        {
            _1506 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1506 = frontier_phi_27_23_ladder;
        }
        float _1720;
        if (_1341 > 0.0)
        {
            _1720 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1720 = frontier_phi_39_34_ladder;
        }
        float _1871;
        if (_1344 > 0.0)
        {
            _1871 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1871 = frontier_phi_48_45_ladder;
        }
        float _1873 = isnan(_1720) ? _1506 : (isnan(_1506) ? _1720 : min(_1506, _1720));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1338) + _1327;
        float _1879 = (_1874 * _1341) + _1331;
        float _1880 = (_1874 * _1344) + _1335;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1882 = (-1.0) - _1881;
        float _1884 = _1881 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1880 > _1884) || ((_1880 < _1882) || ((_1879 > _1884) || ((_1879 < _1882) || ((_1878 < _1882) || (_1878 > _1884))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1880, cbModelParam._m0[17u].z, fma(_1879, cbModelParam._m0[17u].y, _1878 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1880, cbModelParam._m0[18u].z, fma(_1879, cbModelParam._m0[18u].y, _1878 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1880, cbModelParam._m0[19u].z, fma(_1879, cbModelParam._m0[19u].y, _1878 * cbModelParam._m0[19u].x))), _1270);
            frontier_phi_24_48_ladder = _2116.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2116.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2116.x * cbModelParam._m0[1u].z;
        }
        _1363 = frontier_phi_24_48_ladder_2;
        _1365 = frontier_phi_24_48_ladder_1;
        _1367 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1347 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_402, _403, _404), _1270);
        _1363 = _1347.x * cbModelParam._m0[1u].z;
        _1365 = _1347.y * cbModelParam._m0[1u].z;
        _1367 = _1347.z * cbModelParam._m0[1u].z;
    }
    float _1379 = _393 * 0.01200000010430812835693359375;
    float _1381 = _1379 * ((cbModelParam._m0[1u].w * (_1363 - _1263)) + _1263);
    float _1382 = _1379 * ((cbModelParam._m0[1u].w * (_1365 - _1265)) + _1265);
    float _1383 = _1379 * ((cbModelParam._m0[1u].w * (_1367 - _1267)) + _1267);
    float _1386 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, _1381 * cbSceneParam._m0[91u].x));
    vec4 _1400 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_326, _327));
    float _1402 = _1400.w;
    float _1414 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1402);
    float _1415 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1402);
    float _1416 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1402);
    uvec4 _1420 = floatBitsToUint(cbInstanceData._m0[_367 + 5u]);
    uint _1422 = _1420.x * 14u;
    uint _1423 = _1422 + 13u;
    float _1430 = _393 + (-1.0);
    float _1436 = (cbLight._m0[_1423].x * _1430) + 1.0;
    float _1437 = (cbLight._m0[_1423].y * _1430) + 1.0;
    float _1438 = (cbLight._m0[_1423].z * _1430) + 1.0;
    float _1439 = (cbLight._m0[_1423].w * _1430) + 1.0;
    uint _1440 = _1422 + 5u;
    float _1446 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    uint _1450 = _1422 + 4u;
    float _1460 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
    uint _1464 = _1422 | 1u;
    float _1475 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_238, _239, _240));
    float _1478 = dot(vec3(cbLight._m0[_1464].xyz), vec3(_238, _239, _240));
    float _3350 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _3361 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
    float _1483 = (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.3183098733425140380859375;
    float _1485 = (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.3183098733425140380859375;
    float _1492 = ((cbLight._m0[_1440].x * _1446) * _1485) + (((cbLight._m0[_1450].x * _1414) * _1460) * _1483);
    float _1493 = ((_1446 * cbLight._m0[_1440].y) * _1485) + (((cbLight._m0[_1450].y * _1415) * _1460) * _1483);
    float _1494 = ((_1446 * cbLight._m0[_1440].z) * _1485) + (((cbLight._m0[_1450].z * _1416) * _1460) * _1483);
    uvec4 _1498 = floatBitsToUint(cbLight._m0[_1422 + 12u]);
    bool _1500 = _1498.x == 0u;
    float _1511;
    float _1513;
    float _1515;
    if (_1500)
    {
        _1511 = _1492;
        _1513 = _1493;
        _1515 = _1494;
    }
    else
    {
        uint _1519 = _1422 + 6u;
        float _1535 = (dot(vec3(cbLight._m0[_1422 + 2u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1536 = _1535 * _1535;
        float _3372 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _1538 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1511 = (((cbLight._m0[_1519].x * 0.3183098733425140380859375) * _1537) * _1538) + _1492;
        _1513 = (((cbLight._m0[_1519].y * 0.3183098733425140380859375) * _1537) * _1538) + _1493;
        _1515 = (((cbLight._m0[_1519].z * 0.3183098733425140380859375) * _1537) * _1538) + _1494;
    }
    bool _1518 = _1498.y == 0u;
    float _1556;
    float _1558;
    float _1560;
    if (_1518)
    {
        _1556 = _1511;
        _1558 = _1513;
        _1560 = _1515;
    }
    else
    {
        uint _1664 = _1422 + 7u;
        float _1680 = (dot(vec3(cbLight._m0[_1422 + 3u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1681 = _1680 * _1680;
        float _3388 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1683 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1556 = (((cbLight._m0[_1664].x * 0.3183098733425140380859375) * _1682) * _1683) + _1511;
        _1558 = (((cbLight._m0[_1664].y * 0.3183098733425140380859375) * _1682) * _1683) + _1513;
        _1560 = (((cbLight._m0[_1664].z * 0.3183098733425140380859375) * _1682) * _1683) + _1515;
    }
    uint _1562 = _1422 + 8u;
    float _1568 = cbLight._m0[_1422].x + _318;
    float _1569 = cbLight._m0[_1422].y + _319;
    float _1570 = cbLight._m0[_1422].z + _320;
    float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
    float _1578 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1422].xyz));
    float _3404 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1581 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _1582 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _1583 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_1568 * _1574, _1569 * _1574, _1570 * _1574));
    float _3426 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1594 = (exp2(log2(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1600 = (0.5 / ((_1581 + 9.9999999392252902907785028219223e-09) + _1582)) * _1581;
    float _3437 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1602 = (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.31831014156341552734375;
    uint _1616 = _1422 + 9u;
    float _1622 = cbLight._m0[_1464].x + _318;
    float _1623 = cbLight._m0[_1464].y + _319;
    float _1624 = cbLight._m0[_1464].z + _320;
    float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
    float _1632 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1464].xyz));
    float _3448 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1635 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _1636 = dot(vec3(cbLight._m0[_1464].xyz), vec3(_1622 * _1628, _1623 * _1628, _1624 * _1628));
    float _3459 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1645 = (exp2(log2(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1649 = (0.5 / ((_1635 + 9.9999999392252902907785028219223e-09) + _1582)) * _1635;
    float _3470 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1651 = (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.31831014156341552734375;
    float _1661 = (((_1645 * cbLight._m0[_1616].x) * _1651) * _1446) + ((((cbLight._m0[_1562].x * _1414) * _1594) * _1602) * _1460);
    float _1662 = (((_1645 * cbLight._m0[_1616].y) * _1651) * _1446) + ((((cbLight._m0[_1562].y * _1415) * _1594) * _1602) * _1460);
    float _1663 = (((_1645 * cbLight._m0[_1616].z) * _1651) * _1446) + ((((cbLight._m0[_1562].z * _1416) * _1594) * _1602) * _1460);
    float _1725;
    float _1727;
    float _1729;
    if (_1500)
    {
        _1725 = _1661;
        _1727 = _1662;
        _1729 = _1663;
    }
    else
    {
        uint _1731 = _1422 + 10u;
        uint _1737 = _1422 + 2u;
        float _1743 = cbLight._m0[_1737].x + _318;
        float _1744 = cbLight._m0[_1737].y + _319;
        float _1745 = cbLight._m0[_1737].z + _320;
        float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
        float _1753 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1737].xyz));
        float _3481 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1756 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1757 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1743 * _1749, _1744 * _1749, _1745 * _1749));
        float _3492 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = (exp2(log2(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1770 = (0.5 / ((_1756 + 9.9999999392252902907785028219223e-09) + _1582)) * _1756;
        float _3503 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1772 = (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.31831014156341552734375;
        float _1773 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1725 = (((_1766 * cbLight._m0[_1731].x) * _1772) * _1773) + _1661;
        _1727 = (((_1766 * cbLight._m0[_1731].y) * _1772) * _1773) + _1662;
        _1729 = (((_1766 * cbLight._m0[_1731].z) * _1772) * _1773) + _1663;
    }
    float _1808;
    float _1810;
    float _1812;
    if (_1518)
    {
        _1808 = _1725;
        _1810 = _1727;
        _1812 = _1729;
    }
    else
    {
        uint _1819 = _1422 + 11u;
        uint _1825 = _1422 + 3u;
        float _1831 = cbLight._m0[_1825].x + _318;
        float _1832 = cbLight._m0[_1825].y + _319;
        float _1833 = cbLight._m0[_1825].z + _320;
        float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
        float _1841 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1825].xyz));
        float _3519 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1844 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1845 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_1831 * _1837, _1832 * _1837, _1833 * _1837));
        float _3530 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1858 = (0.5 / ((_1844 + 9.9999999392252902907785028219223e-09) + _1582)) * _1844;
        float _3541 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1860 = (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.31831014156341552734375;
        float _1861 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1808 = (((_1854 * cbLight._m0[_1819].x) * _1860) * _1861) + _1725;
        _1810 = (((_1854 * cbLight._m0[_1819].y) * _1860) * _1861) + _1727;
        _1812 = (((_1854 * cbLight._m0[_1819].z) * _1860) * _1861) + _1729;
    }
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    if (_1420.y == 0u)
    {
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1936;
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1936;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1936;
        uvec4 _1951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1952 = _1951.x;
        uint _1963 = uint((float(_1951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _327) / _1952))) + floor(float(uint(cbSceneParam._m0[85u].x * _326) / _1952)));
        float _1973 = (log2(_1939 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1974 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        uint _1977 = uint(isnan(14.0) ? _1974 : (isnan(_1974) ? 14.0 : min(_1974, 14.0)));
        uvec4 _1982 = texelFetch(g_lightClusterGridBuffer, int(((_1977 << 2u) + (_1963 << 6u)) >> 2u));
        uint _1983 = _1982.x;
        uint _1984 = _1951.z;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        if (((((1u << ((_1984 >> 4u) & 15u)) + 4294967295u) & _1983) == 0u) || ((_1984 & 240u) == 0u))
        {
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
        }
        else
        {
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2271 = 0.0;
            float _2272 = 0.0;
            float _2273 = 0.0;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            uint _2277 = 0u;
            uint _2286;
            bool _2287;
            for (;;)
            {
                _2286 = texelFetch(g_lightClassification, int((((_1977 << 5u) + (_1963 << 9u)) + (_2277 << 2u)) >> 2u)).x;
                _2287 = _2286 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2287)
                {
                    frontier_phi_63_pred = _2276;
                    frontier_phi_63_pred_1 = _2275;
                    frontier_phi_63_pred_2 = _2274;
                    frontier_phi_63_pred_3 = _2273;
                    frontier_phi_63_pred_4 = _2272;
                    frontier_phi_63_pred_5 = _2271;
                }
                else
                {
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    uint _2401;
                    _2395 = _2271;
                    _2396 = _2272;
                    _2397 = _2273;
                    _2398 = _2274;
                    _2399 = _2275;
                    _2400 = _2276;
                    _2401 = _2286;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    for (;;)
                    {
                        uint _2405 = uint(findLSB(_2401)) + (_2277 << 5u);
                        uint _2402 = (_2401 + 4294967295u) & _2401;
                        uint _2407 = _2405 * 48u;
                        vec4 _2421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2407)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 3u)).x));
                        uint _2427 = (_2405 * 48u) + 4u;
                        vec4 _2440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2427)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 3u)).x));
                        uint _2446 = (_2405 * 48u) + 8u;
                        vec3 _2457 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2446)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 2u)).x));
                        float _2461 = _2421.x - _1937;
                        float _2462 = _2421.y - _1938;
                        float _2463 = _2421.z - _1939;
                        float _2464 = dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463));
                        float _2467 = inversesqrt(_2464);
                        float _2476 = 1.0 - (_2464 * _2421.w);
                        float _3567 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
                        float _2477 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
                        float _2478 = sqrt(_2464) * _2440.w;
                        float _2481 = 1.39999997615814208984375 / (_2478 + 1.39999997615814208984375);
                        float _2482 = _2481 * _2481;
                        float _2485 = ((1.0 - _2482) * dot(vec3(_348, _351, _354), vec3(_2467 * _2461, _2467 * _2462, _2467 * _2463))) + _2482;
                        float _2488 = _2478 * _2478;
                        float _2492 = ((isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0))) * _2477) / ((_2488 * 0.699999988079071044921875) + 1.0);
                        float _2496 = (-0.0) - _1937;
                        float _2497 = (-0.0) - _1938;
                        float _2498 = (-0.0) - _1939;
                        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
                        float _2506 = dot(vec3(_348, _351, _354), vec3(_2502 * _2496, _2502 * _2497, _2502 * _2498));
                        float _3583 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
                        float _3594 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
                        float _2510 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
                        float _2514 = (0.5 / (((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) + 9.9999999392252902907785028219223e-09) + _2510)) * _2510;
                        float _3605 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
                        float _2523 = (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 3.1415927410125732421875) / ((_2488 * 2.1991131305694580078125) + 3.141590118408203125)) * _2477;
                        _2330 = (_2492 * _2440.x) + _2398;
                        _2331 = (_2492 * _2440.y) + _2399;
                        _2332 = (_2492 * _2440.z) + _2400;
                        _2327 = (_2523 * _2457.x) + _2395;
                        _2328 = (_2523 * _2457.y) + _2396;
                        _2329 = (_2523 * _2457.z) + _2397;
                        if (_2402 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2395 = _2327;
                            _2396 = _2328;
                            _2397 = _2329;
                            _2398 = _2330;
                            _2399 = _2331;
                            _2400 = _2332;
                            _2401 = _2402;
                        }
                    }
                    frontier_phi_63_pred = _2332;
                    frontier_phi_63_pred_1 = _2331;
                    frontier_phi_63_pred_2 = _2330;
                    frontier_phi_63_pred_3 = _2329;
                    frontier_phi_63_pred_4 = _2328;
                    frontier_phi_63_pred_5 = _2327;
                }
                _2132 = frontier_phi_63_pred;
                _2130 = frontier_phi_63_pred_1;
                _2128 = frontier_phi_63_pred_2;
                _2126 = frontier_phi_63_pred_3;
                _2124 = frontier_phi_63_pred_4;
                _2122 = frontier_phi_63_pred_5;
                uint _2278 = _2277 + 1u;
                if (_2278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2271 = _2122;
                    _2272 = _2124;
                    _2273 = _2126;
                    _2274 = _2128;
                    _2275 = _2130;
                    _2276 = _2132;
                    _2277 = _2278;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
        }
        uvec4 _2135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2136 = _2135.z;
        uint _2138 = (_2136 >> 8u) & 15u;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        if (((4294967295u << _2138) & _1983) == 0u)
        {
            _2242 = _2121;
            _2244 = _2123;
            _2246 = _2125;
            _2248 = _2127;
            _2250 = _2129;
            _2252 = _2131;
        }
        else
        {
            float _2267 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2138 < ((_2136 >> 12u) & 15u))
            {
                float _2243;
                float _2245;
                float _2247;
                float _2249;
                float _2251;
                float _2253;
                float _2378 = _2121;
                float _2379 = _2123;
                float _2380 = _2125;
                float _2381 = _2127;
                float _2382 = _2129;
                float _2383 = _2131;
                uint _2384 = _2138;
                uint _2393;
                bool _2394;
                for (;;)
                {
                    _2393 = texelFetch(g_lightClassification, int((((_1977 << 5u) + (_1963 << 9u)) + (_2384 << 2u)) >> 2u)).x;
                    _2394 = _2393 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2394)
                    {
                        frontier_phi_69_pred = _2383;
                        frontier_phi_69_pred_1 = _2382;
                        frontier_phi_69_pred_2 = _2381;
                        frontier_phi_69_pred_3 = _2380;
                        frontier_phi_69_pred_4 = _2379;
                        frontier_phi_69_pred_5 = _2378;
                    }
                    else
                    {
                        float _2528;
                        float _2529;
                        float _2530;
                        float _2531;
                        float _2532;
                        float _2533;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2541 = _2378;
                        float _2542 = _2379;
                        float _2543 = _2380;
                        float _2544 = _2381;
                        float _2545 = _2382;
                        float _2546 = _2383;
                        uint _2547 = _2393;
                        uint _2548;
                        vec4 _2573;
                        float _2574;
                        vec4 _2589;
                        vec3 _2601;
                        vec4 _2617;
                        vec4 _2633;
                        float _2680;
                        bool _2681;
                        for (;;)
                        {
                            uint _2558 = ((_2384 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2547));
                            _2548 = (_2547 + 4294967295u) & _2547;
                            uint _2560 = _2558 * 40u;
                            _2573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 3u)).x));
                            _2574 = _2573.w;
                            uint _2576 = (_2558 * 40u) + 4u;
                            _2589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 3u)).x));
                            uint _2591 = (_2558 * 40u) + 8u;
                            _2601 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2591 + 2u)).x));
                            uint _2604 = (_2558 * 40u) + 16u;
                            _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            uint _2620 = (_2558 * 40u) + 20u;
                            _2633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 3u)).x));
                            uint _2636 = (_2558 * 40u) + 24u;
                            vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            uint _2655 = (_2558 * 40u) + 28u;
                            vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 3u)).x));
                            _2680 = fma(_1939, _2668.z, fma(_1938, _2668.y, _2668.x * _1937)) + _2668.w;
                            _2681 = !((fma(_1939, _2649.z, fma(_1938, _2649.y, _2649.x * _1937)) + _2649.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2681)
                            {
                                float _2708 = _2573.x - _1937;
                                float _2709 = _2573.y - _1938;
                                float _2710 = _2573.z - _1939;
                                float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                                float _2714 = inversesqrt(_2711);
                                float _2715 = _2714 * _2708;
                                float _2716 = _2714 * _2709;
                                float _2717 = _2714 * _2710;
                                float _2721 = 1.0 - (_2711 / (_2574 * _2574));
                                float _3616 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2722 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                                float _2726 = sqrt(_2711) * _2589.w;
                                float _2728 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                                float _2729 = _2728 * _2728;
                                float _2730 = 1.0 - _2729;
                                float _2732 = (_2730 * dot(vec3(_2715, _2716, _2717), vec3(_348, _351, _354))) + _2729;
                                float _2735 = _2726 * _2726;
                                float _2739 = (fma(_1939, _2617.z, fma(_1938, _2617.y, _2617.x * _1937)) + _2617.w) / _2680;
                                float _2740 = (fma(_1939, _2633.z, fma(_1938, _2633.y, _2633.x * _1937)) + _2633.w) / _2680;
                                float _2744 = 1.0 - dot(vec2(_2739, _2740), vec2(_2739, _2740));
                                float _3632 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2745 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
                                float _2746 = _2745 * (((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2722) / ((_2735 * 0.699999988079071044921875) + 1.0));
                                float _2756 = dot(vec3(_348, _351, _354), vec3((-0.0) - (_1937 * _2267), (-0.0) - (_1938 * _2267), (-0.0) - (_1939 * _2267)));
                                float _3643 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                                float _2764 = (_2730 * dot(vec3(_348, _351, _354), vec3(_2715, _2716, _2717))) + _2729;
                                float _3654 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                                float _2765 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2769 = (0.5 / (((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) + 9.9999999392252902907785028219223e-09) + _2765)) * _2765;
                                float _3665 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2776 = (_2745 * _2722) * (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 3.1415927410125732421875) / ((_2735 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2746 * _2589.z;
                                frontier_phi_75_pred_1 = _2746 * _2589.y;
                                frontier_phi_75_pred_2 = _2746 * _2589.x;
                                frontier_phi_75_pred_3 = _2776 * _2601.z;
                                frontier_phi_75_pred_4 = _2776 * _2601.y;
                                frontier_phi_75_pred_5 = _2776 * _2601.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2785 = frontier_phi_75_pred;
                            _2784 = frontier_phi_75_pred_1;
                            _2783 = frontier_phi_75_pred_2;
                            _2782 = frontier_phi_75_pred_3;
                            _2781 = frontier_phi_75_pred_4;
                            _2780 = frontier_phi_75_pred_5;
                            _2531 = _2783 + _2544;
                            _2532 = _2784 + _2545;
                            _2533 = _2785 + _2546;
                            _2528 = _2780 + _2541;
                            _2529 = _2781 + _2542;
                            _2530 = _2782 + _2543;
                            if (_2548 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2541 = _2528;
                                _2542 = _2529;
                                _2543 = _2530;
                                _2544 = _2531;
                                _2545 = _2532;
                                _2546 = _2533;
                                _2547 = _2548;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2533;
                        frontier_phi_69_pred_1 = _2532;
                        frontier_phi_69_pred_2 = _2531;
                        frontier_phi_69_pred_3 = _2530;
                        frontier_phi_69_pred_4 = _2529;
                        frontier_phi_69_pred_5 = _2528;
                    }
                    _2253 = frontier_phi_69_pred;
                    _2251 = frontier_phi_69_pred_1;
                    _2249 = frontier_phi_69_pred_2;
                    _2247 = frontier_phi_69_pred_3;
                    _2245 = frontier_phi_69_pred_4;
                    _2243 = frontier_phi_69_pred_5;
                    uint _2385 = _2384 + 1u;
                    if (_2385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2378 = _2243;
                        _2379 = _2245;
                        _2380 = _2247;
                        _2381 = _2249;
                        _2382 = _2251;
                        _2383 = _2253;
                        _2384 = _2385;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2253;
                frontier_phi_57_58_ladder_1 = _2251;
                frontier_phi_57_58_ladder_2 = _2249;
                frontier_phi_57_58_ladder_3 = _2247;
                frontier_phi_57_58_ladder_4 = _2245;
                frontier_phi_57_58_ladder_5 = _2243;
            }
            else
            {
                frontier_phi_57_58_ladder = _2131;
                frontier_phi_57_58_ladder_1 = _2129;
                frontier_phi_57_58_ladder_2 = _2127;
                frontier_phi_57_58_ladder_3 = _2125;
                frontier_phi_57_58_ladder_4 = _2123;
                frontier_phi_57_58_ladder_5 = _2121;
            }
            _2242 = frontier_phi_57_58_ladder_5;
            _2244 = frontier_phi_57_58_ladder_4;
            _2246 = frontier_phi_57_58_ladder_3;
            _2248 = frontier_phi_57_58_ladder_2;
            _2250 = frontier_phi_57_58_ladder_1;
            _2252 = frontier_phi_57_58_ladder;
        }
        float _2257 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
        _1995 = (_2257 * _2248) + _1556;
        _1997 = (_2257 * _2250) + _1558;
        _1999 = (_2257 * _2252) + _1560;
        _2001 = ((_2242 * 0.039999999105930328369140625) * _2257) + _1808;
        _2003 = ((_2244 * 0.039999999105930328369140625) * _2257) + _1810;
        _2005 = ((_2246 * 0.039999999105930328369140625) * _2257) + _1812;
    }
    else
    {
        _1995 = _1556;
        _1997 = _1558;
        _1999 = _1560;
        _2001 = _1808;
        _2003 = _1810;
        _2005 = _1812;
    }
    uint _2011 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _2020 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _225.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2011].x;
    float _2024 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _225.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2011].y;
    float _2028 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _225.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2011].z;
    float _3681 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3692 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3703 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _2045 = (((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1995 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _393))) + ((_2001 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1172)) * cbPerFrame._m0[3u].x)) + _2020;
    float _2047 = (_2024 + ((_2003 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1172)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1997 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _393)));
    float _2049 = (_2028 + ((_2005 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _1172)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1999 + ((isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0))) * _393)));
    float _3729 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2062 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    uint _2063 = _367 + 6u;
    float _2071 = _326 / cbSceneParam._m0[86u].x;
    float _2072 = _327 / cbSceneParam._m0[86u].y;
    vec4 _2086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, (log2((isnan(cbSceneParam._m0[77u].w) ? _260 : (isnan(_260) ? cbSceneParam._m0[77u].w : min(_260, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2088 = _2086.x;
    float _2089 = _2086.y;
    float _2090 = _2086.z;
    float _2091 = _2086.w;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_260 > cbSceneParam._m0[78u].w)
    {
        float _2146 = isnan(_260) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _260 : min(cbSceneParam._m0[80u].w, _260));
        float _2147 = _2146 / _260;
        float _2158 = _2147 * _311;
        float _2159 = _312 * _2147;
        float _2160 = (-0.0) - _2159;
        float _2161 = _2147 * _313;
        float _2163 = (cbSceneParam._m0[77u].w * _2160) / _2146;
        float _2164 = _2163 + cbSceneParam._m0[79u].w;
        float _2165 = cbSceneParam._m0[79u].w - _2159;
        float _2171 = sqrt(((_2158 * _2158) + (_2159 * _2159)) + (_2161 * _2161));
        float _2174 = (1.0 - (cbSceneParam._m0[77u].w / _2146)) * _2171;
        float _2179 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2181 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2340;
        if (abs((_2160 - _2163) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2340 = ((((_2164 > 0.0) ? exp2(_2179 * _2164) : (2.0 - exp2(_2181 * _2164))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2174;
        }
        else
        {
            float _2300 = 1.0 / cbSceneParam._m0[80u].x;
            float _2301 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : max(_2164, _2165));
            float _2302 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : min(_2164, _2165));
            float _2311 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : min(_2301, 0.0));
            float _2312 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : min(_2302, 0.0));
            _2340 = ((abs(_2171 / _2160) * cbSceneParam._m0[80u].y) * ((((_2311 - _2312) * 2.0) - ((exp2(_2179 * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)))) - exp2(_2179 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))))) * _2300)) - ((exp2(_2181 * _2311) - exp2(_2181 * _2312)) * _2300))) + (_2174 * cbSceneParam._m0[80u].z);
        }
        vec4 _2342 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, 1.0), 0.0);
        float _2351 = exp2((_2340 * (-1.44269502162933349609375)) * (1.0 - _2342.w));
        float _2352 = log2(_2351);
        float _2368 = log2(_2091);
        _2183 = (exp2(_2368 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2352 * cbSceneParam._m0[78u].x)) * _2342.x) / cbSceneParam._m0[78u].x)) + _2088;
        _2185 = (exp2(_2368 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2352 * cbSceneParam._m0[78u].y)) * _2342.y) / cbSceneParam._m0[78u].y)) + _2089;
        _2187 = (exp2(_2368 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2352 * cbSceneParam._m0[78u].z)) * _2342.z) / cbSceneParam._m0[78u].z)) + _2090;
        _2189 = _2351 * _2091;
    }
    else
    {
        _2183 = _2088;
        _2185 = _2089;
        _2187 = _2090;
        _2189 = _2091;
    }
    float _2200 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2201 = _2200 == 3.0;
    float _2203 = log2(_2189);
    float _2207 = exp2(_2203 * cbSceneParam._m0[78u].x);
    float _2208 = exp2(_2203 * cbSceneParam._m0[78u].y);
    float _2209 = exp2(_2203 * cbSceneParam._m0[78u].z);
    float _2210 = _2207 * (isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)));
    float _2211 = _2208 * (isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)));
    float _2212 = _2209 * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    float _2221 = (_2200 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2221 * (_2201 ? _2210 : (_2210 + (cbSceneParam._m0[72u].w * _2183)));
    SV_Target.y = _2221 * (_2201 ? _2211 : (_2211 + (cbSceneParam._m0[72u].w * _2185)));
    SV_Target.z = _2221 * (_2201 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2187)));
    SV_Target.w = cbInstanceData._m0[_2063].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2020) * _2062) * _2207) * _2221;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2024) * _2062) * _2208) * _2221;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2028) * _2062) * _2209) * _2221;
    SV_Target_1.w = cbInstanceData._m0[_2063].w;
}


