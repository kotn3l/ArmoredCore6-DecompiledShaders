#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _123 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _124 = _123 * NORMAL.x;
    float _125 = _123 * NORMAL.y;
    float _126 = _123 * NORMAL.z;
    float _131;
    float _132;
    float _133;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _131 = (-0.0) - _124;
        _132 = (-0.0) - _125;
        _133 = (-0.0) - _126;
    }
    else
    {
        _131 = _124;
        _132 = _125;
        _133 = _126;
    }
    vec4 _153 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _159 = _153.w;
    float _160 = _153.x * cbMtdParam._m0[9u].x;
    float _161 = _153.y * cbMtdParam._m0[9u].y;
    float _162 = _153.z * cbMtdParam._m0[9u].z;
    vec4 _184 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _196 = inversesqrt(dot(vec3(_131, _132, _133), vec3(_131, _132, _133)));
    float _405 = isnan(0.0) ? _160 : (isnan(_160) ? 0.0 : max(_160, 0.0));
    float _198 = isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0));
    float _416 = isnan(0.0) ? _161 : (isnan(_161) ? 0.0 : max(_161, 0.0));
    float _199 = isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0));
    float _427 = isnan(0.0) ? _162 : (isnan(_162) ? 0.0 : max(_162, 0.0));
    float _200 = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
    uint _202 = uint(roundEven(NORMAL.w));
    vec4 _207 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _209 = _207.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _275 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _438 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
        float _276 = isnan(1.0) ? _438 : (isnan(_438) ? 1.0 : min(_438, 1.0));
        float _280 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _449 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0))) - _276)) + _276) < ((_209 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _309;
    uint _229;
    vec4 _234;
    float _235;
    float _236;
    float _237;
    float _241;
    float _242;
    float _243;
    float _246;
    float _250;
    vec4 _254;
    float _256;
    float _257;
    bool _268;
    for (;;)
    {
        _229 = _202 * 13u;
        _234 = cbInstanceData._m0[(_229 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        _235 = _234.x;
        _236 = _234.y;
        _237 = _234.z;
        float _238 = (cbMtdParam._m0[0u].x * _198) * _235;
        float _239 = (cbMtdParam._m0[0u].y * _199) * _236;
        float _240 = (cbMtdParam._m0[0u].z * _200) * _237;
        float _460 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
        _241 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
        float _471 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
        _242 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        float _482 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
        _243 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _246 = cbMtdParam._m0[2u].w;
        _250 = cbInstanceData._m0[_229 + 6u].w;
        float _251 = _209 + (-0.5);
        _254 = cbMtdParam._m0[1u];
        _256 = _254.y * _251;
        _257 = _251 * 0.999000012874603271484375;
        _268 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_268)
        {
            if ((cbInstanceData._m0[_229 + 7u].x + _257) < 0.5)
            {
                _309 = true;
                break;
            }
        }
        if ((_234.w < 1.0) && ((_234.w + _257) < 0.5))
        {
            _309 = true;
            break;
        }
        if ((_256 + _159) < _254.x)
        {
            _309 = true;
            break;
        }
        _309 = false;
        break;
    }
    if (_309)
    {
        discard_state = true;
    }
    float _354;
    float _355;
    float _356;
    float _357;
    if (cbMtdParam._m0[1u].z != 0.0)
    {
        _354 = _250;
        _355 = _250;
        _356 = _250;
        _357 = _250;
    }
    else
    {
        _354 = _246;
        _355 = 0.0;
        _356 = float(floatBitsToUint(cbInstanceData._m0[_229 + 5u]).x) * 0.0039215688593685626983642578125;
        _357 = TEXCOORD.z;
    }
    SV_Target.x = ((_131 * 0.5) * _196) + 0.500488758087158203125;
    SV_Target.y = ((_132 * 0.5) * _196) + 0.500488758087158203125;
    SV_Target.z = ((_133 * 0.5) * _196) + 0.500488758087158203125;
    SV_Target.w = _355;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _357;
    SV_Target_2.x = _241;
    SV_Target_2.y = _242;
    SV_Target_2.z = _243;
    SV_Target_2.w = _356;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _355;
    SV_Target_4.x = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _184.x) * cbSceneParam._m0[72u].y) * _235) * cbSceneParam._m0[72u].z;
    SV_Target_4.y = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _184.y) * cbSceneParam._m0[72u].y) * _236) * cbSceneParam._m0[72u].z;
    SV_Target_4.z = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _184.z) * cbSceneParam._m0[72u].y) * _237) * cbSceneParam._m0[72u].z;
    SV_Target_4.w = _354;
    discard_exit();
}


