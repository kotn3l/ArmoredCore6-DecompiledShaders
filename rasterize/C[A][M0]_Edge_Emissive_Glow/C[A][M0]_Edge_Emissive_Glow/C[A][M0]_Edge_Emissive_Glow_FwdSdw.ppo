#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _739;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _227 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _240 = _239 * _175;
    float _241 = _239 * _176;
    float _242 = _239 * _177;
    float _3178 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _3189 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3200 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _262 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    float _328 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _329 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _350 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _353 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _356 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _369 = uint(roundEven(NORMAL.w)) * 13u;
    uint _371 = _369 + 9u;
    uint _372 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _378 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0)))) * cbInstanceData._m0[_372].x;
    float _379 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_372].y;
    float _380 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0)))) * cbInstanceData._m0[_372].z;
    float _3211 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _3222 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    vec4 _392 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _328, cbSceneParam._m0[86u].y * _329));
    float _395 = _392.x * TEXCOORD.z;
    float _396 = dot(vec3(_240, _241, _242), vec3(_320, _321, _322));
    float _399 = _396 * 2.0;
    float _404 = (_399 * _240) - _320;
    float _405 = (_399 * _241) - _321;
    float _406 = (_399 * _242) - _322;
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _738;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _463 = fma(_436, cbModelParam._m0[26u].z, fma(_432, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _428));
        float _467 = fma(_436, cbModelParam._m0[27u].z, fma(_432, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _428));
        float _471 = fma(_436, cbModelParam._m0[28u].z, fma(_432, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _428));
        float _496 = _428 + _240;
        float _497 = _432 + _241;
        float _498 = _436 + _242;
        float _508 = fma(_498, cbModelParam._m0[26u].z, fma(_497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _496)) - _463;
        float _509 = fma(_498, cbModelParam._m0[27u].z, fma(_497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _496)) - _467;
        float _510 = fma(_498, cbModelParam._m0[28u].z, fma(_497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _496)) - _471;
        float _514 = inversesqrt(dot(vec3(_508, _509, _510), vec3(_508, _509, _510)));
        float _527 = ((_514 * _508) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_463 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _528 = ((_514 * _509) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_467 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _529 = ((_514 * _510) / cbModelParam._m0[34u].z) + ((((((_471 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        float _566 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _567 = _566 * (_532.x + (-0.5));
        float _568 = _566 * (_532.y + (-0.5));
        float _569 = _566 * (_532.z + (-0.5));
        float _576 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_539.x + (-0.5));
        float _578 = _576 * (_539.y + (-0.5));
        float _579 = _576 * (_539.z + (-0.5));
        float _586 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_546.x + (-0.5));
        float _588 = _586 * (_546.y + (-0.5));
        float _589 = _586 * (_546.z + (-0.5));
        float _596 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_553.x + (-0.5));
        float _598 = _596 * (_553.y + (-0.5));
        float _599 = _596 * (_553.z + (-0.5));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _603 = _567 * 0.5;
        float _604 = _577 * 0.5;
        float _605 = _587 * 0.5;
        float _606 = dot(vec3(_603, _604, _605), vec3(_603, _604, _605));
        float _611 = (_606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_606);
        float _620 = (dot(vec3(_240, _241, _242), vec3(_611 * _603, _611 * _604, _611 * _605)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _630 = sqrt(((_604 * _604) + (_603 * _603)) + (_605 * _605)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _632 = _631 * 2.0;
        float _636 = (1.0 - _631) / (_631 + 1.0);
        float _3281 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _646 = ((((1.0 - _637) * (_632 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_632 + 1.0))) + _637) * _600;
        float _647 = _568 * 0.5;
        float _648 = _578 * 0.5;
        float _649 = _588 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _663 = (dot(vec3(_240, _241, _242), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _672 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _3314 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_674 + 1.0))) + _679) * _601;
        float _689 = _569 * 0.5;
        float _690 = _579 * 0.5;
        float _691 = _589 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _705 = (dot(vec3(_240, _241, _242), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3325 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _714 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_602 + 9.9999997473787516355514526367188e-06);
        float _3336 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3347 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_716 + 1.0))) + _721) * _602;
        _738 = _569;
        _740 = _568;
        _741 = _567;
        _742 = _579;
        _743 = _578;
        _744 = _577;
        _745 = _589;
        _746 = _588;
        _747 = _587;
        _748 = _602;
        _749 = _601;
        _750 = _600;
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0)));
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
        _753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
    }
    else
    {
        _738 = _739;
        _740 = _739;
        _741 = _739;
        _742 = _739;
        _743 = _739;
        _744 = _739;
        _745 = _739;
        _746 = _739;
        _747 = _739;
        _748 = _739;
        _749 = _739;
        _750 = _739;
        _751 = 0.0;
        _752 = 0.0;
        _753 = 0.0;
    }
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _779 = fma(_436, cbModelParam._m0[30u].z, fma(_432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _428));
        float _783 = fma(_436, cbModelParam._m0[31u].z, fma(_432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _428));
        float _787 = fma(_436, cbModelParam._m0[32u].z, fma(_432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _428));
        float _810 = _428 + _240;
        float _811 = _432 + _241;
        float _812 = _436 + _242;
        float _822 = fma(_812, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _810)) - _779;
        float _823 = fma(_812, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _810)) - _783;
        float _824 = fma(_812, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _810)) - _787;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_779 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_783 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[35u].z) + ((((((_787 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _878 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_845.x + (-0.5));
        float _880 = _878 * (_845.y + (-0.5));
        float _881 = _878 * (_845.z + (-0.5));
        float _888 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_852.x + (-0.5));
        float _890 = _888 * (_852.y + (-0.5));
        float _891 = _888 * (_852.z + (-0.5));
        float _898 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_859.x + (-0.5));
        float _900 = _898 * (_859.y + (-0.5));
        float _901 = _898 * (_859.z + (-0.5));
        float _908 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_866.x + (-0.5));
        float _910 = _908 * (_866.y + (-0.5));
        float _911 = _908 * (_866.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_240, _241, _242), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3410 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_942 + 1.0))) + _947) * _912;
        float _957 = _880 * 0.5;
        float _958 = _890 * 0.5;
        float _959 = _900 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_240, _241, _242), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3443 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_984 + 1.0))) + _989) * _913;
        float _999 = _881 * 0.5;
        float _1000 = _891 * 0.5;
        float _1001 = _901 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_240, _241, _242), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3476 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_1026 + 1.0))) + _1031) * _914;
        _1048 = _881;
        _1049 = _880;
        _1050 = _879;
        _1051 = _891;
        _1052 = _890;
        _1053 = _889;
        _1054 = _901;
        _1055 = _900;
        _1056 = _899;
        _1057 = _914;
        _1058 = _913;
        _1059 = _912;
        _1060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1061 = cbModelParam._m0[36u].w * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1062 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _739;
        _1049 = _739;
        _1050 = _739;
        _1051 = _739;
        _1052 = _739;
        _1053 = _739;
        _1054 = _739;
        _1055 = _739;
        _1056 = _739;
        _1057 = _739;
        _1058 = _739;
        _1059 = _739;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1072 = (cbModelParam._m0[1u].x * (_1060 - _751)) + _751;
    float _1073 = (cbModelParam._m0[1u].x * (_1061 - _752)) + _752;
    float _1074 = (cbModelParam._m0[1u].x * (_1062 - _753)) + _753;
    float _1095 = fma(_1074, cbSceneParam._m0[89u].z, fma(_1073, cbSceneParam._m0[89u].y, _1072 * cbSceneParam._m0[89u].x));
    float _1098 = fma(_1074, cbSceneParam._m0[90u].z, fma(_1073, cbSceneParam._m0[90u].y, _1072 * cbSceneParam._m0[90u].x));
    float _1101 = fma(_1074, cbSceneParam._m0[91u].z, fma(_1073, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1072));
    float _1116 = _404 * 0.5;
    float _1117 = _405 * 0.5;
    float _1118 = _406 * 0.5;
    float _1119 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_1050, _1053, _1056, _1059));
    float _1122 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_1049, _1052, _1055, _1058));
    float _1125 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_1048, _1051, _1054, _1057));
    float _1159;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1132 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_738, _742, _745, _748));
        float _1136 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_740, _743, _746, _749));
        float _1140 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_741, _744, _747, _750));
        float _1147 = dot(vec4(cbModelParam._m0[39u]), vec4(_1116, _1117, _1118, 1.0));
        _1159 = dot(vec3(isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1147) ? 0.0 : (isnan(0.0) ? _1147 : max(0.0, _1147))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1159 = 1.0;
    }
    float _1170;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1161 = dot(vec4(cbModelParam._m0[40u]), vec4(_1116, _1117, _1118, 1.0));
        _1170 = dot(vec3(isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1161) ? 0.0 : (isnan(0.0) ? _1161 : max(0.0, _1161))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1170 = 1.0;
    }
    float _1174 = (_1170 * cbModelParam._m0[1u].x) + (_1159 * (1.0 - cbModelParam._m0[1u].x));
    float _1183 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1265;
    float _1267;
    float _1269;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1232 = fma(_436, cbModelParam._m0[13u].z, fma(_432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428)) + cbModelParam._m0[13u].w;
        float _1236 = fma(_436, cbModelParam._m0[14u].z, fma(_432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428)) + cbModelParam._m0[14u].w;
        float _1240 = fma(_436, cbModelParam._m0[15u].z, fma(_432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428)) + cbModelParam._m0[15u].w;
        float _1243 = fma(_406, cbModelParam._m0[13u].z, fma(_405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _404));
        float _1246 = fma(_406, cbModelParam._m0[14u].z, fma(_405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _404));
        float _1249 = fma(_406, cbModelParam._m0[15u].z, fma(_405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _404));
        float _1275;
        if (_1243 > 0.0)
        {
            _1275 = abs((1.0 - _1232) / _1243);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1232 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1275 = frontier_phi_16_14_ladder;
        }
        float _1449;
        if (_1246 > 0.0)
        {
            _1449 = abs((1.0 - _1236) / _1246);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1246 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1236 + 1.0) / _1246);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1449 = frontier_phi_25_21_ladder;
        }
        float _1746;
        if (_1249 > 0.0)
        {
            _1746 = abs((1.0 - _1240) / _1249);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1240 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1746 = frontier_phi_37_32_ladder;
        }
        float _1748 = isnan(_1449) ? _1275 : (isnan(_1275) ? _1449 : min(_1275, _1449));
        float _1749 = isnan(_1746) ? _1748 : (isnan(_1748) ? _1746 : min(_1748, _1746));
        float _1753 = (_1749 * _1243) + _1232;
        float _1754 = (_1749 * _1246) + _1236;
        float _1755 = (_1749 * _1249) + _1240;
        float _1756 = _1749 * 9.9999997473787516355514526367188e-05;
        float _1758 = (-1.0) - _1756;
        float _1760 = _1756 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1755 > _1760) || ((_1755 < _1758) || ((_1754 > _1760) || ((_1754 < _1758) || ((_1753 < _1758) || (_1753 > _1760))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1755, cbModelParam._m0[9u].z, fma(_1754, cbModelParam._m0[9u].y, _1753 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1755, cbModelParam._m0[10u].z, fma(_1754, cbModelParam._m0[10u].y, _1753 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1755, cbModelParam._m0[11u].z, fma(_1754, cbModelParam._m0[11u].y, _1753 * cbModelParam._m0[11u].x))), _1183);
            frontier_phi_15_37_ladder = _1900.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1900.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1900.z * cbModelParam._m0[1u].y;
        }
        _1265 = frontier_phi_15_37_ladder_1;
        _1267 = frontier_phi_15_37_ladder;
        _1269 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_404, _405, _406), _1183);
        _1265 = _1253.x * cbModelParam._m0[1u].y;
        _1267 = _1253.y * cbModelParam._m0[1u].y;
        _1269 = _1253.z * cbModelParam._m0[1u].y;
    }
    float _1272 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1365;
    float _1367;
    float _1369;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1329 = fma(_436, cbModelParam._m0[21u].z, fma(_432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428)) + cbModelParam._m0[21u].w;
        float _1333 = fma(_436, cbModelParam._m0[22u].z, fma(_432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428)) + cbModelParam._m0[22u].w;
        float _1337 = fma(_436, cbModelParam._m0[23u].z, fma(_432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428)) + cbModelParam._m0[23u].w;
        float _1340 = fma(_406, cbModelParam._m0[21u].z, fma(_405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _404));
        float _1343 = fma(_406, cbModelParam._m0[22u].z, fma(_405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _404));
        float _1346 = fma(_406, cbModelParam._m0[23u].z, fma(_405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _404));
        float _1454;
        if (_1340 > 0.0)
        {
            _1454 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1454 = frontier_phi_27_23_ladder;
        }
        float _1773;
        if (_1343 > 0.0)
        {
            _1773 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1773 = frontier_phi_39_34_ladder;
        }
        float _2046;
        if (_1346 > 0.0)
        {
            _2046 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2046 = frontier_phi_49_46_ladder;
        }
        float _2048 = isnan(_1773) ? _1454 : (isnan(_1454) ? _1773 : min(_1454, _1773));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1340) + _1329;
        float _2054 = (_2049 * _1343) + _1333;
        float _2055 = (_2049 * _1346) + _1337;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2056;
        float _2059 = _2056 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2055 > _2059) || ((_2055 < _2057) || ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 < _2057) || (_2053 > _2059))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2146 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2055, cbModelParam._m0[17u].z, fma(_2054, cbModelParam._m0[17u].y, _2053 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2055, cbModelParam._m0[18u].z, fma(_2054, cbModelParam._m0[18u].y, _2053 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2055, cbModelParam._m0[19u].z, fma(_2054, cbModelParam._m0[19u].y, _2053 * cbModelParam._m0[19u].x))), _1272);
            frontier_phi_24_49_ladder = _2146.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2146.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2146.x * cbModelParam._m0[1u].z;
        }
        _1365 = frontier_phi_24_49_ladder_2;
        _1367 = frontier_phi_24_49_ladder_1;
        _1369 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1349 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_404, _405, _406), _1272);
        _1365 = _1349.x * cbModelParam._m0[1u].z;
        _1367 = _1349.y * cbModelParam._m0[1u].z;
        _1369 = _1349.z * cbModelParam._m0[1u].z;
    }
    float _1381 = _395 * 0.01200000010430812835693359375;
    float _1383 = _1381 * ((cbModelParam._m0[1u].w * (_1365 - _1265)) + _1265);
    float _1384 = _1381 * ((cbModelParam._m0[1u].w * (_1367 - _1267)) + _1267);
    float _1385 = _1381 * ((cbModelParam._m0[1u].w * (_1369 - _1269)) + _1269);
    float _1388 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, _1383 * cbSceneParam._m0[91u].x));
    float _1428 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1441 = _1428 / _1440;
    float _1442 = _1432 / _1440;
    float _1443 = _1436 / _1440;
    float _1590;
    float _1591;
    float _1592;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1470 = ((uint(_1443 > cbSceneParam._m0[59u].y) + uint(_1443 > cbSceneParam._m0[59u].x)) + uint(_1443 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1471 = _1470 + 43u;
        uint _1479 = _1470 + 44u;
        uint _1487 = _1470 + 45u;
        uint _1495 = _1470 + 46u;
        float _1506 = fma(_1440, cbSceneParam._m0[_1471].w, fma(_1436, cbSceneParam._m0[_1471].z, fma(_1432, cbSceneParam._m0[_1471].y, _1428 * cbSceneParam._m0[_1471].x)));
        float _1510 = fma(_1440, cbSceneParam._m0[_1479].w, fma(_1436, cbSceneParam._m0[_1479].z, fma(_1432, cbSceneParam._m0[_1479].y, _1428 * cbSceneParam._m0[_1479].x)));
        float _1518 = fma(_1440, cbSceneParam._m0[_1495].w, fma(_1436, cbSceneParam._m0[_1495].z, fma(_1432, cbSceneParam._m0[_1495].y, _1428 * cbSceneParam._m0[_1495].x)));
        float _1523 = cbSceneParam._m0[33u].z * _1518;
        float _1525 = cbSceneParam._m0[33u].w * _1518;
        float _1528 = fma(_1440, cbSceneParam._m0[_1487].w, fma(_1436, cbSceneParam._m0[_1487].z, fma(_1432, cbSceneParam._m0[_1487].y, _1428 * cbSceneParam._m0[_1487].x))) / _1518;
        float _1576 = (cbSceneParam._m0[33u].x - sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443))) * cbSceneParam._m0[33u].y;
        float _3602 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1583 = (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1523 + _1506) / _1518, (_1525 + _1510) / _1518), _1528), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1525 + _1506) / _1518, (_1510 - _1523) / _1518), _1528), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1506 - _1523) / _1518, (_1510 - _1525) / _1518), _1528), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1506 - _1525) / _1518, (_1523 + _1510) / _1518), _1528), 0.0)).x), vec4(0.25)));
        _1590 = 1.0 - (_1583 * cbSceneParam._m0[34u].x);
        _1591 = 1.0 - (_1583 * cbSceneParam._m0[34u].y);
        _1592 = 1.0 - (_1583 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1590 = 1.0;
        _1591 = 1.0;
        _1592 = 1.0;
    }
    float _1656;
    float _1658;
    float _1660;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1644 = fma(_1440, cbSceneParam._m0[63u].w, fma(_1436, cbSceneParam._m0[63u].z, fma(_1432, cbSceneParam._m0[63u].y, _1428 * cbSceneParam._m0[63u].x)));
        float _1645 = fma(_1440, cbSceneParam._m0[60u].w, fma(_1436, cbSceneParam._m0[60u].z, fma(_1432, cbSceneParam._m0[60u].y, _1428 * cbSceneParam._m0[60u].x))) / _1644;
        float _1646 = fma(_1440, cbSceneParam._m0[61u].w, fma(_1436, cbSceneParam._m0[61u].z, fma(_1432, cbSceneParam._m0[61u].y, _1428 * cbSceneParam._m0[61u].x))) / _1644;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1645 >= cbSceneParam._m0[64u].x) && (_1646 >= cbSceneParam._m0[64u].y)) && (_1645 <= cbSceneParam._m0[64u].z)) && (_1646 <= cbSceneParam._m0[64u].w))
        {
            float _1786 = fma(_1440, cbSceneParam._m0[62u].w, fma(_1436, cbSceneParam._m0[62u].z, fma(_1432, cbSceneParam._m0[62u].y, _1428 * cbSceneParam._m0[62u].x))) / _1644;
            float _1790 = isnan(cbSceneParam._m0[41u].w) ? _1786 : (isnan(_1786) ? cbSceneParam._m0[41u].w : max(_1786, cbSceneParam._m0[41u].w));
            float _1833 = (cbSceneParam._m0[33u].x - sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443))) * cbSceneParam._m0[33u].y;
            float _3618 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
            float _1840 = (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1645, cbSceneParam._m0[33u].w + _1646), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1645, _1646 - cbSceneParam._m0[33u].z), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1645 - cbSceneParam._m0[33u].z, _1646 - cbSceneParam._m0[33u].w), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1645 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1646), _1790), 0.0)).x), vec4(0.25)));
            float _1844 = 1.0 - (_1840 * cbSceneParam._m0[34u].x);
            float _1845 = 1.0 - (_1840 * cbSceneParam._m0[34u].y);
            float _1846 = 1.0 - (_1840 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1845) ? _1591 : (isnan(_1591) ? _1845 : min(_1591, _1845));
            frontier_phi_36_35_ladder_1 = isnan(_1846) ? _1592 : (isnan(_1592) ? _1846 : min(_1592, _1846));
            frontier_phi_36_35_ladder_2 = isnan(_1844) ? _1590 : (isnan(_1590) ? _1844 : min(_1590, _1844));
        }
        else
        {
            frontier_phi_36_35_ladder = _1591;
            frontier_phi_36_35_ladder_1 = _1592;
            frontier_phi_36_35_ladder_2 = _1590;
        }
        _1656 = frontier_phi_36_35_ladder_2;
        _1658 = frontier_phi_36_35_ladder;
        _1660 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1656 = _1590;
        _1658 = _1591;
        _1660 = _1592;
    }
    uvec4 _1665 = floatBitsToUint(cbInstanceData._m0[_369 + 5u]);
    uint _1667 = _1665.x * 14u;
    uint _1668 = _1667 + 13u;
    float _1675 = _395 + (-1.0);
    float _1681 = (cbLight._m0[_1668].x * _1675) + 1.0;
    float _1682 = (cbLight._m0[_1668].y * _1675) + 1.0;
    float _1683 = (cbLight._m0[_1668].z * _1675) + 1.0;
    float _1684 = (cbLight._m0[_1668].w * _1675) + 1.0;
    uint _1685 = _1667 + 5u;
    float _1691 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1695 = _1667 + 4u;
    float _1705 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1709 = _1667 | 1u;
    float _1720 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_240, _241, _242));
    float _1723 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_240, _241, _242));
    float _3654 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _3665 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.3183098733425140380859375;
    float _1730 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.3183098733425140380859375;
    float _1737 = ((cbLight._m0[_1685].x * _1691) * _1730) + (((cbLight._m0[_1695].x * _1656) * _1705) * _1728);
    float _1738 = ((_1691 * cbLight._m0[_1685].y) * _1730) + (((cbLight._m0[_1695].y * _1658) * _1705) * _1728);
    float _1739 = ((_1691 * cbLight._m0[_1685].z) * _1730) + (((cbLight._m0[_1695].z * _1660) * _1705) * _1728);
    uvec4 _1743 = floatBitsToUint(cbLight._m0[_1667 + 12u]);
    bool _1745 = _1743.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1745)
    {
        _1847 = _1737;
        _1849 = _1738;
        _1851 = _1739;
    }
    else
    {
        uint _1855 = _1667 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1667 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3676 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1874 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1737;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1738;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1739;
    }
    bool _1854 = _1743.y == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1854)
    {
        _1909 = _1847;
        _1911 = _1849;
        _1913 = _1851;
    }
    else
    {
        uint _2017 = _1667 + 7u;
        float _2033 = (dot(vec3(cbLight._m0[_1667 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _3692 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _2036 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1909 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1847;
        _1911 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1849;
        _1913 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1851;
    }
    uint _1915 = _1667 + 8u;
    float _1921 = cbLight._m0[_1667].x + _320;
    float _1922 = cbLight._m0[_1667].y + _321;
    float _1923 = cbLight._m0[_1667].z + _322;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1931 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1667].xyz));
    float _3708 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _1935 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_1921 * _1927, _1922 * _1927, _1923 * _1927));
    float _3730 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = (0.5 / ((_1934 + 9.9999999392252902907785028219223e-09) + _1935)) * _1934;
    float _3741 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.31831014156341552734375;
    uint _1969 = _1667 + 9u;
    float _1975 = cbLight._m0[_1709].x + _320;
    float _1976 = cbLight._m0[_1709].y + _321;
    float _1977 = cbLight._m0[_1709].z + _322;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1985 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1709].xyz));
    float _3752 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1975 * _1981, _1976 * _1981, _1977 * _1981));
    float _3763 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2002 = (0.5 / ((_1988 + 9.9999999392252902907785028219223e-09) + _1935)) * _1988;
    float _3774 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.31831014156341552734375;
    float _2014 = (((_1998 * cbLight._m0[_1969].x) * _2004) * _1691) + ((((cbLight._m0[_1915].x * _1656) * _1947) * _1955) * _1705);
    float _2015 = (((_1998 * cbLight._m0[_1969].y) * _2004) * _1691) + ((((cbLight._m0[_1915].y * _1658) * _1947) * _1955) * _1705);
    float _2016 = (((_1998 * cbLight._m0[_1969].z) * _2004) * _1691) + ((((cbLight._m0[_1915].z * _1660) * _1947) * _1955) * _1705);
    float _2072;
    float _2074;
    float _2076;
    if (_1745)
    {
        _2072 = _2014;
        _2074 = _2015;
        _2076 = _2016;
    }
    else
    {
        uint _2078 = _1667 + 10u;
        uint _2084 = _1667 + 2u;
        float _2090 = cbLight._m0[_2084].x + _320;
        float _2091 = cbLight._m0[_2084].y + _321;
        float _2092 = cbLight._m0[_2084].z + _322;
        float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
        float _2100 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2084].xyz));
        float _3785 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2090 * _2096, _2091 * _2096, _2092 * _2096));
        float _3796 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2117 = (0.5 / ((_2103 + 9.9999999392252902907785028219223e-09) + _1935)) * _2103;
        float _3807 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.31831014156341552734375;
        float _2120 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2072 = (((_2113 * cbLight._m0[_2078].x) * _2119) * _2120) + _2014;
        _2074 = (((_2113 * cbLight._m0[_2078].y) * _2119) * _2120) + _2015;
        _2076 = (((_2113 * cbLight._m0[_2078].z) * _2119) * _2120) + _2016;
    }
    float _2151;
    float _2153;
    float _2155;
    if (_1854)
    {
        _2151 = _2072;
        _2153 = _2074;
        _2155 = _2076;
    }
    else
    {
        uint _2162 = _1667 + 11u;
        uint _2168 = _1667 + 3u;
        float _2174 = cbLight._m0[_2168].x + _320;
        float _2175 = cbLight._m0[_2168].y + _321;
        float _2176 = cbLight._m0[_2168].z + _322;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2184 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2168].xyz));
        float _3823 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _2188 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2174 * _2180, _2175 * _2180, _2176 * _2180));
        float _3834 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2201 = (0.5 / ((_2187 + 9.9999999392252902907785028219223e-09) + _1935)) * _2187;
        float _3845 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.31831014156341552734375;
        float _2204 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2151 = (((_2197 * cbLight._m0[_2162].x) * _2203) * _2204) + _2072;
        _2153 = (((_2197 * cbLight._m0[_2162].y) * _2203) * _2204) + _2074;
        _2155 = (((_2197 * cbLight._m0[_2162].z) * _2203) * _2204) + _2076;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1665.y == 0u)
    {
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _329) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _328) / _2226)));
        float _2247 = (log2(_1443 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            uint _2530 = 0u;
            uint _2539;
            bool _2540;
            for (;;)
            {
                _2539 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2530 << 2u)) >> 2u)).x;
                _2540 = _2539 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2540)
                {
                    frontier_phi_68_pred = _2529;
                    frontier_phi_68_pred_1 = _2528;
                    frontier_phi_68_pred_2 = _2527;
                    frontier_phi_68_pred_3 = _2525;
                    frontier_phi_68_pred_4 = _2524;
                    frontier_phi_68_pred_5 = _2526;
                }
                else
                {
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    uint _2654;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2539;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    for (;;)
                    {
                        uint _2658 = uint(findLSB(_2654)) + (_2530 << 5u);
                        uint _2655 = (_2654 + 4294967295u) & _2654;
                        uint _2660 = _2658 * 48u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2680 = (_2658 * 48u) + 4u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2699 = (_2658 * 48u) + 8u;
                        vec3 _2710 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x));
                        float _2714 = _2674.x - _1441;
                        float _2715 = _2674.y - _1442;
                        float _2716 = _2674.z - _1443;
                        float _2717 = dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716));
                        float _2720 = inversesqrt(_2717);
                        float _2729 = 1.0 - (_2717 * _2674.w);
                        float _3871 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2731 = sqrt(_2717) * _2693.w;
                        float _2734 = 1.39999997615814208984375 / (_2731 + 1.39999997615814208984375);
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * dot(vec3(_350, _353, _356), vec3(_2720 * _2714, _2720 * _2715, _2720 * _2716))) + _2735;
                        float _2741 = _2731 * _2731;
                        float _2745 = ((isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))) * _2730) / ((_2741 * 0.699999988079071044921875) + 1.0);
                        float _2749 = (-0.0) - _1441;
                        float _2750 = (-0.0) - _1442;
                        float _2751 = (-0.0) - _1443;
                        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
                        float _2759 = dot(vec3(_350, _353, _356), vec3(_2755 * _2749, _2755 * _2750, _2755 * _2751));
                        float _3887 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _3898 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2763 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2767 = (0.5 / (((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) + 9.9999999392252902907785028219223e-09) + _2763)) * _2763;
                        float _3909 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2776 = (((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 3.1415927410125732421875) / ((_2741 * 2.1991131305694580078125) + 3.141590118408203125)) * _2730;
                        _2583 = (_2745 * _2693.x) + _2651;
                        _2584 = (_2745 * _2693.y) + _2652;
                        _2585 = (_2745 * _2693.z) + _2653;
                        _2580 = (_2776 * _2710.x) + _2648;
                        _2581 = (_2776 * _2710.y) + _2649;
                        _2582 = (_2776 * _2710.z) + _2650;
                        if (_2655 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2655;
                        }
                    }
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2584;
                    frontier_phi_68_pred_2 = _2583;
                    frontier_phi_68_pred_3 = _2581;
                    frontier_phi_68_pred_4 = _2580;
                    frontier_phi_68_pred_5 = _2582;
                }
                _2385 = frontier_phi_68_pred;
                _2383 = frontier_phi_68_pred_1;
                _2381 = frontier_phi_68_pred_2;
                _2377 = frontier_phi_68_pred_3;
                _2375 = frontier_phi_68_pred_4;
                _2379 = frontier_phi_68_pred_5;
                uint _2531 = _2530 + 1u;
                if (_2531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2524 = _2375;
                    _2525 = _2377;
                    _2526 = _2379;
                    _2527 = _2381;
                    _2528 = _2383;
                    _2529 = _2385;
                    _2530 = _2531;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2391) & _2257) == 0u)
        {
            _2495 = _2374;
            _2497 = _2376;
            _2499 = _2378;
            _2501 = _2380;
            _2503 = _2382;
            _2505 = _2384;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2631 = _2374;
                float _2632 = _2376;
                float _2633 = _2378;
                float _2634 = _2380;
                float _2635 = _2382;
                float _2636 = _2384;
                uint _2637 = _2391;
                uint _2646;
                bool _2647;
                for (;;)
                {
                    _2646 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                    _2647 = _2646 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2647)
                    {
                        frontier_phi_74_pred = _2633;
                        frontier_phi_74_pred_1 = _2632;
                        frontier_phi_74_pred_2 = _2631;
                        frontier_phi_74_pred_3 = _2636;
                        frontier_phi_74_pred_4 = _2635;
                        frontier_phi_74_pred_5 = _2634;
                    }
                    else
                    {
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _2794 = _2631;
                        float _2795 = _2632;
                        float _2796 = _2633;
                        float _2797 = _2634;
                        float _2798 = _2635;
                        float _2799 = _2636;
                        uint _2800 = _2646;
                        uint _2801;
                        vec4 _2826;
                        float _2827;
                        vec4 _2842;
                        vec3 _2854;
                        vec4 _2870;
                        vec4 _2886;
                        float _2933;
                        bool _2934;
                        for (;;)
                        {
                            uint _2811 = ((_2637 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2800));
                            _2801 = (_2800 + 4294967295u) & _2800;
                            uint _2813 = _2811 * 40u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            _2827 = _2826.w;
                            uint _2829 = (_2811 * 40u) + 4u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2844 = (_2811 * 40u) + 8u;
                            _2854 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x));
                            uint _2857 = (_2811 * 40u) + 16u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2873 = (_2811 * 40u) + 20u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2889 = (_2811 * 40u) + 24u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2908 = (_2811 * 40u) + 28u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2933 = fma(_1443, _2921.z, fma(_1442, _2921.y, _2921.x * _1441)) + _2921.w;
                            _2934 = !((fma(_1443, _2902.z, fma(_1442, _2902.y, _2902.x * _1441)) + _2902.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2934)
                            {
                                float _2961 = _2826.x - _1441;
                                float _2962 = _2826.y - _1442;
                                float _2963 = _2826.z - _1443;
                                float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                                float _2967 = inversesqrt(_2964);
                                float _2968 = _2967 * _2961;
                                float _2969 = _2967 * _2962;
                                float _2970 = _2967 * _2963;
                                float _2974 = 1.0 - (_2964 / (_2827 * _2827));
                                float _3920 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                                float _2979 = sqrt(_2964) * _2842.w;
                                float _2981 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                                float _2982 = _2981 * _2981;
                                float _2983 = 1.0 - _2982;
                                float _2985 = (_2983 * dot(vec3(_2968, _2969, _2970), vec3(_350, _353, _356))) + _2982;
                                float _2988 = _2979 * _2979;
                                float _2992 = (fma(_1443, _2870.z, fma(_1442, _2870.y, _2870.x * _1441)) + _2870.w) / _2933;
                                float _2993 = (fma(_1443, _2886.z, fma(_1442, _2886.y, _2886.x * _1441)) + _2886.w) / _2933;
                                float _2997 = 1.0 - dot(vec2(_2992, _2993), vec2(_2992, _2993));
                                float _3936 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                                float _2999 = _2998 * (((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2975) / ((_2988 * 0.699999988079071044921875) + 1.0));
                                float _3009 = dot(vec3(_350, _353, _356), vec3((-0.0) - (_1441 * _2520), (-0.0) - (_1442 * _2520), (-0.0) - (_1443 * _2520)));
                                float _3947 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3017 = (_2983 * dot(vec3(_350, _353, _356), vec3(_2968, _2969, _2970))) + _2982;
                                float _3958 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _3022 = (0.5 / (((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) + 9.9999999392252902907785028219223e-09) + _3018)) * _3018;
                                float _3969 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3029 = (_2998 * _2975) * (((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 3.1415927410125732421875) / ((_2988 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3029 * _2854.z;
                                frontier_phi_80_pred_1 = _3029 * _2854.y;
                                frontier_phi_80_pred_2 = _3029 * _2854.x;
                                frontier_phi_80_pred_3 = _2999 * _2842.z;
                                frontier_phi_80_pred_4 = _2999 * _2842.y;
                                frontier_phi_80_pred_5 = _2999 * _2842.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3035 = frontier_phi_80_pred;
                            _3034 = frontier_phi_80_pred_1;
                            _3033 = frontier_phi_80_pred_2;
                            _3038 = frontier_phi_80_pred_3;
                            _3037 = frontier_phi_80_pred_4;
                            _3036 = frontier_phi_80_pred_5;
                            _2784 = _3036 + _2797;
                            _2785 = _3037 + _2798;
                            _2786 = _3038 + _2799;
                            _2781 = _3033 + _2794;
                            _2782 = _3034 + _2795;
                            _2783 = _3035 + _2796;
                            if (_2801 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2801;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2783;
                        frontier_phi_74_pred_1 = _2782;
                        frontier_phi_74_pred_2 = _2781;
                        frontier_phi_74_pred_3 = _2786;
                        frontier_phi_74_pred_4 = _2785;
                        frontier_phi_74_pred_5 = _2784;
                    }
                    _2500 = frontier_phi_74_pred;
                    _2498 = frontier_phi_74_pred_1;
                    _2496 = frontier_phi_74_pred_2;
                    _2506 = frontier_phi_74_pred_3;
                    _2504 = frontier_phi_74_pred_4;
                    _2502 = frontier_phi_74_pred_5;
                    uint _2638 = _2637 + 1u;
                    if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2631 = _2496;
                        _2632 = _2498;
                        _2633 = _2500;
                        _2634 = _2502;
                        _2635 = _2504;
                        _2636 = _2506;
                        _2637 = _2638;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2504;
                frontier_phi_62_63_ladder_1 = _2502;
                frontier_phi_62_63_ladder_2 = _2500;
                frontier_phi_62_63_ladder_3 = _2506;
                frontier_phi_62_63_ladder_4 = _2498;
                frontier_phi_62_63_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_62_63_ladder = _2382;
                frontier_phi_62_63_ladder_1 = _2380;
                frontier_phi_62_63_ladder_2 = _2378;
                frontier_phi_62_63_ladder_3 = _2384;
                frontier_phi_62_63_ladder_4 = _2376;
                frontier_phi_62_63_ladder_5 = _2374;
            }
            _2495 = frontier_phi_62_63_ladder_5;
            _2497 = frontier_phi_62_63_ladder_4;
            _2499 = frontier_phi_62_63_ladder_2;
            _2501 = frontier_phi_62_63_ladder_1;
            _2503 = frontier_phi_62_63_ladder;
            _2505 = frontier_phi_62_63_ladder_3;
        }
        float _2510 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
        _2269 = (_2510 * _2501) + _1909;
        _2271 = (_2510 * _2503) + _1911;
        _2273 = (_2510 * _2505) + _1913;
        _2275 = ((_2495 * 0.039999999105930328369140625) * _2510) + _2151;
        _2277 = ((_2497 * 0.039999999105930328369140625) * _2510) + _2153;
        _2279 = ((_2499 * 0.039999999105930328369140625) * _2510) + _2155;
    }
    else
    {
        _2269 = _1909;
        _2271 = _1911;
        _2273 = _1913;
        _2275 = _2151;
        _2277 = _2153;
        _2279 = _2155;
    }
    uint _2285 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _2294 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _227.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2285].x;
    float _2298 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _227.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2285].y;
    float _2302 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _227.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2285].z;
    float _3985 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3996 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _4007 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _2319 = (((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_2269 + ((isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))) * _395))) + ((_2275 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _1174)) * cbPerFrame._m0[3u].x)) + _2294;
    float _2321 = (_2298 + ((_2277 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1174)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2271 + ((isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0))) * _395)));
    float _2323 = (_2302 + ((_2279 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1174)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2273 + ((isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))) * _395)));
    float _4033 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2336 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    uint _2337 = _369 + 6u;
    float _2345 = _328 / cbSceneParam._m0[86u].x;
    float _2346 = _329 / cbSceneParam._m0[86u].y;
    vec4 _2360 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2345, _2346, (log2((isnan(cbSceneParam._m0[77u].w) ? _262 : (isnan(_262) ? cbSceneParam._m0[77u].w : min(_262, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2362 = _2360.x;
    float _2363 = _2360.y;
    float _2364 = _2360.z;
    float _2365 = _2360.w;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_262 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_262) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _262 : min(cbSceneParam._m0[80u].w, _262));
        float _2400 = _2399 / _262;
        float _2411 = _2400 * _313;
        float _2412 = _314 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2414 = _2400 * _315;
        float _2416 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2417 = _2416 + cbSceneParam._m0[79u].w;
        float _2418 = cbSceneParam._m0[79u].w - _2412;
        float _2424 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2414 * _2414));
        float _2427 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2424;
        float _2432 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2434 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2593;
        if (abs((_2413 - _2416) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2593 = ((((_2417 > 0.0) ? exp2(_2432 * _2417) : (2.0 - exp2(_2434 * _2417))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2427;
        }
        else
        {
            float _2553 = 1.0 / cbSceneParam._m0[80u].x;
            float _2554 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : max(_2417, _2418));
            float _2555 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : min(_2417, _2418));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            _2593 = ((abs(_2424 / _2413) * cbSceneParam._m0[80u].y) * ((((_2564 - _2565) * 2.0) - ((exp2(_2432 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0)))) - exp2(_2432 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0))))) * _2553)) - ((exp2(_2434 * _2564) - exp2(_2434 * _2565)) * _2553))) + (_2427 * cbSceneParam._m0[80u].z);
        }
        vec4 _2595 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2345, _2346, 1.0), 0.0);
        float _2604 = exp2((_2593 * (-1.44269502162933349609375)) * (1.0 - _2595.w));
        float _2605 = log2(_2604);
        float _2621 = log2(_2365);
        _2436 = (exp2(_2621 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].x)) * _2595.x) / cbSceneParam._m0[78u].x)) + _2362;
        _2438 = (exp2(_2621 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].y)) * _2595.y) / cbSceneParam._m0[78u].y)) + _2363;
        _2440 = (exp2(_2621 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].z)) * _2595.z) / cbSceneParam._m0[78u].z)) + _2364;
        _2442 = _2604 * _2365;
    }
    else
    {
        _2436 = _2362;
        _2438 = _2363;
        _2440 = _2364;
        _2442 = _2365;
    }
    float _2453 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2454 = _2453 == 3.0;
    float _2456 = log2(_2442);
    float _2460 = exp2(_2456 * cbSceneParam._m0[78u].x);
    float _2461 = exp2(_2456 * cbSceneParam._m0[78u].y);
    float _2462 = exp2(_2456 * cbSceneParam._m0[78u].z);
    float _2463 = _2460 * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)));
    float _2464 = _2461 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2465 = _2462 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)));
    float _2474 = (_2453 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2474 * (_2454 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.y = _2474 * (_2454 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2438)));
    SV_Target.z = _2474 * (_2454 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2440)));
    SV_Target.w = cbInstanceData._m0[_2337].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2294) * _2336) * _2460) * _2474;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2298) * _2336) * _2461) * _2474;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2302) * _2336) * _2462) * _2474;
    SV_Target_1.w = cbInstanceData._m0[_2337].w;
}


