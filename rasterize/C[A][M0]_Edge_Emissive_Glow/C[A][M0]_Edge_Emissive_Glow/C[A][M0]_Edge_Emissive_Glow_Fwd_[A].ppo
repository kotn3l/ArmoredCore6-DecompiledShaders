#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _781;
float _2991;
float _2992;
float _2993;
float _2994;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.w;
    float _204 = _197.x * cbMtdParam._m0[9u].x;
    float _205 = _197.y * cbMtdParam._m0[9u].y;
    float _206 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _228 = texture(sampler2D(C_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _241 = _240 * _175;
    float _242 = _240 * _176;
    float _243 = _240 * _177;
    float _3003 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3014 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3025 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _263 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _304 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _314 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _304);
    float _315 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _304);
    float _316 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _304);
    float _320 = inversesqrt(dot(vec3(_314, _315, _316), vec3(_314, _315, _316)));
    float _321 = _314 * _320;
    float _322 = _315 * _320;
    float _323 = _316 * _320;
    vec4 _328 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _330 = _328.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _460 = sqrt(((_314 * _314) + (_315 * _315)) + (_316 * _316));
        float _466 = (cbMatDynParam._m0[5u].x * _460) + cbMatDynParam._m0[5u].y;
        float _3036 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
        float _467 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
        float _471 = (cbMatDynParam._m0[5u].z * _460) + cbMatDynParam._m0[5u].w;
        float _3047 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0))) - _467)) + _467) < ((_330 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _342 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _343 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _363 = fma(_243, cbSceneParam._m0[5u].z, fma(_242, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _241));
    float _366 = fma(_243, cbSceneParam._m0[6u].z, fma(_242, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _241));
    float _369 = fma(_243, cbSceneParam._m0[7u].z, fma(_242, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _241));
    uint _382 = uint(roundEven(NORMAL.w)) * 13u;
    uint _384 = _382 + 9u;
    uint _385 = _384 + uint(cbMatDynParam._m0[0u].w);
    float _391 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0)))) * cbInstanceData._m0[_385].x;
    float _392 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0)))) * cbInstanceData._m0[_385].y;
    float _393 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0)))) * cbInstanceData._m0[_385].z;
    float _3058 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
    float _3069 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
    float _3080 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
    vec4 _405 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _342, cbSceneParam._m0[86u].y * _343));
    float _408 = _405.x * TEXCOORD.z;
    float _409 = dot(vec3(_241, _242, _243), vec3(_321, _322, _323));
    float _412 = _409 * 2.0;
    float _417 = (_412 * _241) - _321;
    float _418 = (_412 * _242) - _322;
    float _419 = (_412 * _243) - _323;
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _780;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _505 = fma(_449, cbModelParam._m0[26u].z, fma(_445, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _441));
        float _509 = fma(_449, cbModelParam._m0[27u].z, fma(_445, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _441));
        float _513 = fma(_449, cbModelParam._m0[28u].z, fma(_445, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _441));
        float _538 = _441 + _241;
        float _539 = _445 + _242;
        float _540 = _449 + _243;
        float _550 = fma(_540, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538)) - _505;
        float _551 = fma(_540, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538)) - _509;
        float _552 = fma(_540, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538)) - _513;
        float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
        float _569 = ((_556 * _550) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_505 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _570 = ((_556 * _551) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_509 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _571 = ((_556 * _552) / cbModelParam._m0[34u].z) + ((((((_513 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _574 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        float _608 = exp2((_574.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_574.x + (-0.5));
        float _610 = _608 * (_574.y + (-0.5));
        float _611 = _608 * (_574.z + (-0.5));
        float _618 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_581.x + (-0.5));
        float _620 = _618 * (_581.y + (-0.5));
        float _621 = _618 * (_581.z + (-0.5));
        float _628 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_588.x + (-0.5));
        float _630 = _628 * (_588.y + (-0.5));
        float _631 = _628 * (_588.z + (-0.5));
        float _638 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_595.x + (-0.5));
        float _640 = _638 * (_595.y + (-0.5));
        float _641 = _638 * (_595.z + (-0.5));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _644 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _645 = _609 * 0.5;
        float _646 = _619 * 0.5;
        float _647 = _629 * 0.5;
        float _648 = dot(vec3(_645, _646, _647), vec3(_645, _646, _647));
        float _653 = (_648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_648);
        float _662 = (dot(vec3(_241, _242, _243), vec3(_653 * _645, _653 * _646, _653 * _647)) + 1.0) * 0.5;
        float _3106 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _672 = sqrt(((_646 * _646) + (_645 * _645)) + (_647 * _647)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3117 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _3128 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * (_674 + 1.0))) + _679) * _642;
        float _689 = _610 * 0.5;
        float _690 = _620 * 0.5;
        float _691 = _630 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _705 = (dot(vec3(_241, _242, _243), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3139 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _714 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_643 + 9.9999997473787516355514526367188e-06);
        float _3150 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3161 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) * (_716 + 1.0))) + _721) * _643;
        float _731 = _611 * 0.5;
        float _732 = _621 * 0.5;
        float _733 = _631 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_241, _242, _243), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_644 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3194 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_758 + 1.0))) + _763) * _644;
        _780 = _611;
        _782 = _610;
        _783 = _609;
        _784 = _621;
        _785 = _620;
        _786 = _619;
        _787 = _631;
        _788 = _630;
        _789 = _629;
        _790 = _644;
        _791 = _643;
        _792 = _642;
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
        _794 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
    }
    else
    {
        _780 = _781;
        _782 = _781;
        _783 = _781;
        _784 = _781;
        _785 = _781;
        _786 = _781;
        _787 = _781;
        _788 = _781;
        _789 = _781;
        _790 = _781;
        _791 = _781;
        _792 = _781;
        _793 = 0.0;
        _794 = 0.0;
        _795 = 0.0;
    }
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _824 = fma(_449, cbModelParam._m0[30u].z, fma(_445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _441));
        float _828 = fma(_449, cbModelParam._m0[31u].z, fma(_445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _441));
        float _832 = fma(_449, cbModelParam._m0[32u].z, fma(_445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _441));
        float _855 = _441 + _241;
        float _856 = _445 + _242;
        float _857 = _449 + _243;
        float _867 = fma(_857, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855)) - _824;
        float _868 = fma(_857, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855)) - _828;
        float _869 = fma(_857, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855)) - _832;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_824 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_828 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[35u].z) + ((((((_832 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _923 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_890.x + (-0.5));
        float _925 = _923 * (_890.y + (-0.5));
        float _926 = _923 * (_890.z + (-0.5));
        float _933 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_897.x + (-0.5));
        float _935 = _933 * (_897.y + (-0.5));
        float _936 = _933 * (_897.z + (-0.5));
        float _943 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_904.x + (-0.5));
        float _945 = _943 * (_904.y + (-0.5));
        float _946 = _943 * (_904.z + (-0.5));
        float _953 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_911.x + (-0.5));
        float _955 = _953 * (_911.y + (-0.5));
        float _956 = _953 * (_911.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_241, _242, _243), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3235 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3246 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3257 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_987 + 1.0))) + _992) * _957;
        float _1002 = _925 * 0.5;
        float _1003 = _935 * 0.5;
        float _1004 = _945 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_241, _242, _243), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3290 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_1029 + 1.0))) + _1034) * _958;
        float _1044 = _926 * 0.5;
        float _1045 = _936 * 0.5;
        float _1046 = _946 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_241, _242, _243), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3323 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_1071 + 1.0))) + _1076) * _959;
        _1093 = _926;
        _1094 = _925;
        _1095 = _924;
        _1096 = _936;
        _1097 = _935;
        _1098 = _934;
        _1099 = _946;
        _1100 = _945;
        _1101 = _944;
        _1102 = _959;
        _1103 = _958;
        _1104 = _957;
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _781;
        _1094 = _781;
        _1095 = _781;
        _1096 = _781;
        _1097 = _781;
        _1098 = _781;
        _1099 = _781;
        _1100 = _781;
        _1101 = _781;
        _1102 = _781;
        _1103 = _781;
        _1104 = _781;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _794)) + _794;
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _795)) + _795;
    float _1140 = fma(_1119, cbSceneParam._m0[89u].z, fma(_1118, cbSceneParam._m0[89u].y, _1117 * cbSceneParam._m0[89u].x));
    float _1143 = fma(_1119, cbSceneParam._m0[90u].z, fma(_1118, cbSceneParam._m0[90u].y, _1117 * cbSceneParam._m0[90u].x));
    float _1146 = fma(_1119, cbSceneParam._m0[91u].z, fma(_1118, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1117));
    float _1161 = _417 * 0.5;
    float _1162 = _418 * 0.5;
    float _1163 = _419 * 0.5;
    float _1164 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1167 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1170 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1204;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1177 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_780, _784, _787, _790));
        float _1181 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_782, _785, _788, _791));
        float _1185 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_783, _786, _789, _792));
        float _1192 = dot(vec4(cbModelParam._m0[39u]), vec4(_1161, _1162, _1163, 1.0));
        _1204 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1192) ? 0.0 : (isnan(0.0) ? _1192 : max(0.0, _1192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1204 = 1.0;
    }
    float _1215;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1206 = dot(vec4(cbModelParam._m0[40u]), vec4(_1161, _1162, _1163, 1.0));
        _1215 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1215 = 1.0;
    }
    float _1219 = (_1215 * cbModelParam._m0[1u].x) + (_1204 * (1.0 - cbModelParam._m0[1u].x));
    float _1228 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1310;
    float _1312;
    float _1314;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1277 = fma(_449, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441)) + cbModelParam._m0[13u].w;
        float _1281 = fma(_449, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441)) + cbModelParam._m0[14u].w;
        float _1285 = fma(_449, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441)) + cbModelParam._m0[15u].w;
        float _1288 = fma(_419, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417));
        float _1291 = fma(_419, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417));
        float _1294 = fma(_419, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417));
        float _1320;
        if (_1288 > 0.0)
        {
            _1320 = abs((1.0 - _1277) / _1288);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1277 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1320 = frontier_phi_19_17_ladder;
        }
        float _1527;
        if (_1291 > 0.0)
        {
            _1527 = abs((1.0 - _1281) / _1291);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1281 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1527 = frontier_phi_28_24_ladder;
        }
        float _1716;
        if (_1294 > 0.0)
        {
            _1716 = abs((1.0 - _1285) / _1294);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1285 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1716 = frontier_phi_40_35_ladder;
        }
        float _1718 = isnan(_1527) ? _1320 : (isnan(_1320) ? _1527 : min(_1320, _1527));
        float _1719 = isnan(_1716) ? _1718 : (isnan(_1718) ? _1716 : min(_1718, _1716));
        float _1723 = (_1719 * _1288) + _1277;
        float _1724 = (_1719 * _1291) + _1281;
        float _1725 = (_1719 * _1294) + _1285;
        float _1726 = _1719 * 9.9999997473787516355514526367188e-05;
        float _1728 = (-1.0) - _1726;
        float _1730 = _1726 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1725 > _1730) || ((_1725 < _1728) || ((_1724 > _1730) || ((_1724 < _1728) || ((_1723 < _1728) || (_1723 > _1730))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1725, cbModelParam._m0[9u].z, fma(_1724, cbModelParam._m0[9u].y, _1723 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1725, cbModelParam._m0[10u].z, fma(_1724, cbModelParam._m0[10u].y, _1723 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1725, cbModelParam._m0[11u].z, fma(_1724, cbModelParam._m0[11u].y, _1723 * cbModelParam._m0[11u].x))), _1228);
            frontier_phi_18_40_ladder = _1822.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1822.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1822.x * cbModelParam._m0[1u].y;
        }
        _1310 = frontier_phi_18_40_ladder_2;
        _1312 = frontier_phi_18_40_ladder_1;
        _1314 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_417, _418, _419), _1228);
        _1310 = _1298.x * cbModelParam._m0[1u].y;
        _1312 = _1298.y * cbModelParam._m0[1u].y;
        _1314 = _1298.z * cbModelParam._m0[1u].y;
    }
    float _1317 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1374 = fma(_449, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441)) + cbModelParam._m0[21u].w;
        float _1378 = fma(_449, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441)) + cbModelParam._m0[22u].w;
        float _1382 = fma(_449, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441)) + cbModelParam._m0[23u].w;
        float _1385 = fma(_419, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417));
        float _1388 = fma(_419, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417));
        float _1391 = fma(_419, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417));
        float _1532;
        if (_1385 > 0.0)
        {
            _1532 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1532 = frontier_phi_30_26_ladder;
        }
        float _1743;
        if (_1388 > 0.0)
        {
            _1743 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1743 = frontier_phi_42_37_ladder;
        }
        float _1894;
        if (_1391 > 0.0)
        {
            _1894 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1894 = frontier_phi_51_48_ladder;
        }
        float _1896 = isnan(_1743) ? _1532 : (isnan(_1532) ? _1743 : min(_1532, _1743));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1385) + _1374;
        float _1902 = (_1897 * _1388) + _1378;
        float _1903 = (_1897 * _1391) + _1382;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1904;
        float _1907 = _1904 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1903 > _1907) || ((_1903 < _1905) || ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 < _1905) || (_1901 > _1907))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1903, cbModelParam._m0[17u].z, fma(_1902, cbModelParam._m0[17u].y, _1901 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1903, cbModelParam._m0[18u].z, fma(_1902, cbModelParam._m0[18u].y, _1901 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1903, cbModelParam._m0[19u].z, fma(_1902, cbModelParam._m0[19u].y, _1901 * cbModelParam._m0[19u].x))), _1317);
            frontier_phi_27_51_ladder = _2139.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2139.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2139.x * cbModelParam._m0[1u].z;
        }
        _1410 = frontier_phi_27_51_ladder_2;
        _1412 = frontier_phi_27_51_ladder_1;
        _1414 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_417, _418, _419), _1317);
        _1410 = _1394.x * cbModelParam._m0[1u].z;
        _1412 = _1394.y * cbModelParam._m0[1u].z;
        _1414 = _1394.z * cbModelParam._m0[1u].z;
    }
    float _1426 = _408 * 0.01200000010430812835693359375;
    float _1428 = _1426 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1429 = _1426 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1430 = _1426 * ((cbModelParam._m0[1u].w * (_1414 - _1314)) + _1314);
    float _1433 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, _1428 * cbSceneParam._m0[91u].x));
    uvec4 _1449 = floatBitsToUint(cbInstanceData._m0[_382 + 5u]);
    uint _1451 = _1449.x * 14u;
    uint _1452 = _1451 + 13u;
    float _1459 = _408 + (-1.0);
    float _1465 = (cbLight._m0[_1452].x * _1459) + 1.0;
    float _1466 = (cbLight._m0[_1452].y * _1459) + 1.0;
    float _1467 = (cbLight._m0[_1452].z * _1459) + 1.0;
    float _1468 = (cbLight._m0[_1452].w * _1459) + 1.0;
    uint _1469 = _1451 + 5u;
    float _1475 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
    uint _1479 = _1451 + 4u;
    float _1486 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
    uint _1490 = _1451 | 1u;
    float _1501 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_241, _242, _243));
    float _1504 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_241, _242, _243));
    float _3459 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
    float _3470 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _1509 = (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.3183098733425140380859375;
    float _1511 = (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.3183098733425140380859375;
    float _1518 = ((cbLight._m0[_1469].x * _1475) * _1511) + ((cbLight._m0[_1479].x * _1486) * _1509);
    float _1519 = ((_1475 * cbLight._m0[_1469].y) * _1511) + ((_1486 * cbLight._m0[_1479].y) * _1509);
    float _1520 = ((_1475 * cbLight._m0[_1469].z) * _1511) + ((_1486 * cbLight._m0[_1479].z) * _1509);
    uvec4 _1524 = floatBitsToUint(cbLight._m0[_1451 + 12u]);
    bool _1526 = _1524.x == 0u;
    float _1537;
    float _1539;
    float _1541;
    if (_1526)
    {
        _1537 = _1518;
        _1539 = _1519;
        _1541 = _1520;
    }
    else
    {
        uint _1545 = _1451 + 6u;
        float _1561 = (dot(vec3(cbLight._m0[_1451 + 2u].xyz), vec3(_241, _242, _243)) * 0.5) + 0.5;
        float _1562 = _1561 * _1561;
        float _3481 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1564 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
        _1537 = (((cbLight._m0[_1545].x * 0.3183098733425140380859375) * _1563) * _1564) + _1518;
        _1539 = (((cbLight._m0[_1545].y * 0.3183098733425140380859375) * _1563) * _1564) + _1519;
        _1541 = (((cbLight._m0[_1545].z * 0.3183098733425140380859375) * _1563) * _1564) + _1520;
    }
    bool _1544 = _1524.y == 0u;
    float _1582;
    float _1584;
    float _1586;
    if (_1544)
    {
        _1582 = _1537;
        _1584 = _1539;
        _1586 = _1541;
    }
    else
    {
        uint _1687 = _1451 + 7u;
        float _1703 = (dot(vec3(cbLight._m0[_1451 + 3u].xyz), vec3(_241, _242, _243)) * 0.5) + 0.5;
        float _1704 = _1703 * _1703;
        float _3497 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1706 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1582 = (((cbLight._m0[_1687].x * 0.3183098733425140380859375) * _1705) * _1706) + _1537;
        _1584 = (((cbLight._m0[_1687].y * 0.3183098733425140380859375) * _1705) * _1706) + _1539;
        _1586 = (((cbLight._m0[_1687].z * 0.3183098733425140380859375) * _1705) * _1706) + _1541;
    }
    uint _1588 = _1451 + 8u;
    float _1594 = cbLight._m0[_1451].x + _321;
    float _1595 = cbLight._m0[_1451].y + _322;
    float _1596 = cbLight._m0[_1451].z + _323;
    float _1600 = inversesqrt(dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596)));
    float _1604 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1451].xyz));
    float _3513 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1607 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _1608 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _1609 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1594 * _1600, _1595 * _1600, _1596 * _1600));
    float _3535 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1620 = (exp2(log2(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1626 = (0.5 / ((_1607 + 9.9999999392252902907785028219223e-09) + _1608)) * _1607;
    float _3546 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1628 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.31831014156341552734375;
    uint _1639 = _1451 + 9u;
    float _1645 = cbLight._m0[_1490].x + _321;
    float _1646 = cbLight._m0[_1490].y + _322;
    float _1647 = cbLight._m0[_1490].z + _323;
    float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
    float _1655 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1490].xyz));
    float _3557 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1658 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _1659 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_1645 * _1651, _1646 * _1651, _1647 * _1651));
    float _3568 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1668 = (exp2(log2(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1672 = (0.5 / ((_1658 + 9.9999999392252902907785028219223e-09) + _1608)) * _1658;
    float _3579 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1674 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.31831014156341552734375;
    float _1684 = (((_1668 * cbLight._m0[_1639].x) * _1674) * _1475) + (((_1620 * cbLight._m0[_1588].x) * _1628) * _1486);
    float _1685 = (((_1668 * cbLight._m0[_1639].y) * _1674) * _1475) + (((_1620 * cbLight._m0[_1588].y) * _1628) * _1486);
    float _1686 = (((_1668 * cbLight._m0[_1639].z) * _1674) * _1475) + (((_1620 * cbLight._m0[_1588].z) * _1628) * _1486);
    float _1748;
    float _1750;
    float _1752;
    if (_1526)
    {
        _1748 = _1684;
        _1750 = _1685;
        _1752 = _1686;
    }
    else
    {
        uint _1754 = _1451 + 10u;
        uint _1760 = _1451 + 2u;
        float _1766 = cbLight._m0[_1760].x + _321;
        float _1767 = cbLight._m0[_1760].y + _322;
        float _1768 = cbLight._m0[_1760].z + _323;
        float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
        float _1776 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1760].xyz));
        float _3590 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1779 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1780 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1766 * _1772, _1767 * _1772, _1768 * _1772));
        float _3601 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = (exp2(log2(1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1793 = (0.5 / ((_1779 + 9.9999999392252902907785028219223e-09) + _1608)) * _1779;
        float _3612 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1795 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.31831014156341552734375;
        float _1796 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
        _1748 = (((_1789 * cbLight._m0[_1754].x) * _1795) * _1796) + _1684;
        _1750 = (((_1789 * cbLight._m0[_1754].y) * _1795) * _1796) + _1685;
        _1752 = (((_1789 * cbLight._m0[_1754].z) * _1795) * _1796) + _1686;
    }
    float _1831;
    float _1833;
    float _1835;
    if (_1544)
    {
        _1831 = _1748;
        _1833 = _1750;
        _1835 = _1752;
    }
    else
    {
        uint _1842 = _1451 + 11u;
        uint _1848 = _1451 + 3u;
        float _1854 = cbLight._m0[_1848].x + _321;
        float _1855 = cbLight._m0[_1848].y + _322;
        float _1856 = cbLight._m0[_1848].z + _323;
        float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
        float _1864 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1848].xyz));
        float _3628 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1867 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1868 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_1854 * _1860, _1855 * _1860, _1856 * _1860));
        float _3639 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1877 = (exp2(log2(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1881 = (0.5 / ((_1867 + 9.9999999392252902907785028219223e-09) + _1608)) * _1867;
        float _3650 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1883 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.31831014156341552734375;
        float _1884 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1831 = (((_1877 * cbLight._m0[_1842].x) * _1883) * _1884) + _1748;
        _1833 = (((_1877 * cbLight._m0[_1842].y) * _1883) * _1884) + _1750;
        _1835 = (((_1877 * cbLight._m0[_1842].z) * _1883) * _1884) + _1752;
    }
    float _2018;
    float _2020;
    float _2022;
    float _2024;
    float _2026;
    float _2028;
    if (_1449.y == 0u)
    {
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1959;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1959;
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1959;
        uvec4 _1974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1975 = _1974.x;
        uint _1986 = uint((float(_1974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _343) / _1975))) + floor(float(uint(cbSceneParam._m0[85u].x * _342) / _1975)));
        float _1996 = (log2(_1962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1997 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        uint _2000 = uint(isnan(14.0) ? _1997 : (isnan(_1997) ? 14.0 : min(_1997, 14.0)));
        uvec4 _2005 = texelFetch(g_lightClusterGridBuffer, int(((_2000 << 2u) + (_1986 << 6u)) >> 2u));
        uint _2006 = _2005.x;
        uint _2007 = _1974.z;
        float _2144;
        float _2146;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        if (((((1u << ((_2007 >> 4u) & 15u)) + 4294967295u) & _2006) == 0u) || ((_2007 & 240u) == 0u))
        {
            _2144 = 0.0;
            _2146 = 0.0;
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
        }
        else
        {
            float _2145;
            float _2147;
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2319)
                {
                    frontier_phi_68_pred = _2305;
                    frontier_phi_68_pred_1 = _2308;
                    frontier_phi_68_pred_2 = _2307;
                    frontier_phi_68_pred_3 = _2306;
                    frontier_phi_68_pred_4 = _2304;
                    frontier_phi_68_pred_5 = _2303;
                }
                else
                {
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    uint _2454;
                    _2448 = _2303;
                    _2449 = _2304;
                    _2450 = _2305;
                    _2451 = _2306;
                    _2452 = _2307;
                    _2453 = _2308;
                    _2454 = _2318;
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    for (;;)
                    {
                        uint _2458 = uint(findLSB(_2454)) + (_2309 << 5u);
                        uint _2455 = (_2454 + 4294967295u) & _2454;
                        uint _2460 = _2458 * 48u;
                        vec4 _2474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 3u)).x));
                        uint _2480 = (_2458 * 48u) + 4u;
                        vec4 _2493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2499 = (_2458 * 48u) + 8u;
                        vec3 _2510 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x));
                        float _2514 = _2474.x - _1960;
                        float _2515 = _2474.y - _1961;
                        float _2516 = _2474.z - _1962;
                        float _2517 = dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516));
                        float _2520 = inversesqrt(_2517);
                        float _2529 = 1.0 - (_2517 * _2474.w);
                        float _3676 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
                        float _2530 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                        float _2531 = sqrt(_2517) * _2493.w;
                        float _2534 = 1.39999997615814208984375 / (_2531 + 1.39999997615814208984375);
                        float _2535 = _2534 * _2534;
                        float _2538 = ((1.0 - _2535) * dot(vec3(_363, _366, _369), vec3(_2520 * _2514, _2520 * _2515, _2520 * _2516))) + _2535;
                        float _2541 = _2531 * _2531;
                        float _2545 = ((isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0))) * _2530) / ((_2541 * 0.699999988079071044921875) + 1.0);
                        float _2549 = (-0.0) - _1960;
                        float _2550 = (-0.0) - _1961;
                        float _2551 = (-0.0) - _1962;
                        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
                        float _2559 = dot(vec3(_363, _366, _369), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551));
                        float _3692 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _3703 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2563 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                        float _2567 = (0.5 / (((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) + 9.9999999392252902907785028219223e-09) + _2563)) * _2563;
                        float _3714 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _2576 = (((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 3.1415927410125732421875) / ((_2541 * 2.1991131305694580078125) + 3.141590118408203125)) * _2530;
                        _2378 = (_2545 * _2493.x) + _2451;
                        _2379 = (_2545 * _2493.y) + _2452;
                        _2380 = (_2545 * _2493.z) + _2453;
                        _2375 = (_2576 * _2510.x) + _2448;
                        _2376 = (_2576 * _2510.y) + _2449;
                        _2377 = (_2576 * _2510.z) + _2450;
                        if (_2455 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2448 = _2375;
                            _2449 = _2376;
                            _2450 = _2377;
                            _2451 = _2378;
                            _2452 = _2379;
                            _2453 = _2380;
                            _2454 = _2455;
                        }
                    }
                    frontier_phi_68_pred = _2377;
                    frontier_phi_68_pred_1 = _2380;
                    frontier_phi_68_pred_2 = _2379;
                    frontier_phi_68_pred_3 = _2378;
                    frontier_phi_68_pred_4 = _2376;
                    frontier_phi_68_pred_5 = _2375;
                }
                _2149 = frontier_phi_68_pred;
                _2155 = frontier_phi_68_pred_1;
                _2153 = frontier_phi_68_pred_2;
                _2151 = frontier_phi_68_pred_3;
                _2147 = frontier_phi_68_pred_4;
                _2145 = frontier_phi_68_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2145;
                    _2304 = _2147;
                    _2305 = _2149;
                    _2306 = _2151;
                    _2307 = _2153;
                    _2308 = _2155;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2144 = _2145;
            _2146 = _2147;
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
        }
        uvec4 _2158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2159 = _2158.z;
        uint _2161 = (_2159 >> 8u) & 15u;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((4294967295u << _2161) & _2006) == 0u)
        {
            _2274 = _2144;
            _2276 = _2146;
            _2278 = _2148;
            _2280 = _2150;
            _2282 = _2152;
            _2284 = _2154;
        }
        else
        {
            float _2299 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2161 < ((_2159 >> 12u) & 15u))
            {
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2431 = _2144;
                float _2432 = _2146;
                float _2433 = _2148;
                float _2434 = _2150;
                float _2435 = _2152;
                float _2436 = _2154;
                uint _2437 = _2161;
                uint _2446;
                bool _2447;
                for (;;)
                {
                    _2446 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2437 << 2u)) >> 2u)).x;
                    _2447 = _2446 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2447)
                    {
                        frontier_phi_79_pred = _2436;
                        frontier_phi_79_pred_1 = _2435;
                        frontier_phi_79_pred_2 = _2434;
                        frontier_phi_79_pred_3 = _2433;
                        frontier_phi_79_pred_4 = _2432;
                        frontier_phi_79_pred_5 = _2431;
                    }
                    else
                    {
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2603 = _2431;
                        float _2604 = _2432;
                        float _2605 = _2433;
                        float _2606 = _2434;
                        float _2607 = _2435;
                        float _2608 = _2436;
                        uint _2609 = _2446;
                        uint _2610;
                        vec4 _2635;
                        float _2636;
                        vec4 _2651;
                        vec3 _2663;
                        vec4 _2679;
                        vec4 _2695;
                        float _2742;
                        bool _2743;
                        for (;;)
                        {
                            uint _2620 = ((_2437 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2609));
                            _2610 = (_2609 + 4294967295u) & _2609;
                            uint _2622 = _2620 * 40u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            _2636 = _2635.w;
                            uint _2638 = (_2620 * 40u) + 4u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2653 = (_2620 * 40u) + 8u;
                            _2663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x));
                            uint _2666 = (_2620 * 40u) + 16u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            uint _2682 = (_2620 * 40u) + 20u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2698 = (_2620 * 40u) + 24u;
                            vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2717 = (_2620 * 40u) + 28u;
                            vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            _2742 = fma(_1962, _2730.z, fma(_1961, _2730.y, _2730.x * _1960)) + _2730.w;
                            _2743 = !((fma(_1962, _2711.z, fma(_1961, _2711.y, _2711.x * _1960)) + _2711.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2743)
                            {
                                float _2770 = _2635.x - _1960;
                                float _2771 = _2635.y - _1961;
                                float _2772 = _2635.z - _1962;
                                float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                                float _2776 = inversesqrt(_2773);
                                float _2777 = _2776 * _2770;
                                float _2778 = _2776 * _2771;
                                float _2779 = _2776 * _2772;
                                float _2783 = 1.0 - (_2773 / (_2636 * _2636));
                                float _3725 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2784 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                                float _2788 = sqrt(_2773) * _2651.w;
                                float _2790 = 1.39999997615814208984375 / (_2788 + 1.39999997615814208984375);
                                float _2791 = _2790 * _2790;
                                float _2792 = 1.0 - _2791;
                                float _2794 = (_2792 * dot(vec3(_2777, _2778, _2779), vec3(_363, _366, _369))) + _2791;
                                float _2797 = _2788 * _2788;
                                float _2801 = (fma(_1962, _2679.z, fma(_1961, _2679.y, _2679.x * _1960)) + _2679.w) / _2742;
                                float _2802 = (fma(_1962, _2695.z, fma(_1961, _2695.y, _2695.x * _1960)) + _2695.w) / _2742;
                                float _2806 = 1.0 - dot(vec2(_2801, _2802), vec2(_2801, _2802));
                                float _3741 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                                float _2807 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2808 = _2807 * (((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2784) / ((_2797 * 0.699999988079071044921875) + 1.0));
                                float _2818 = dot(vec3(_363, _366, _369), vec3((-0.0) - (_1960 * _2299), (-0.0) - (_1961 * _2299), (-0.0) - (_1962 * _2299)));
                                float _3752 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                                float _2826 = (_2792 * dot(vec3(_363, _366, _369), vec3(_2777, _2778, _2779))) + _2791;
                                float _3763 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2827 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                                float _2831 = (0.5 / (((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) + 9.9999999392252902907785028219223e-09) + _2827)) * _2827;
                                float _3774 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2838 = (_2807 * _2784) * (((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 3.1415927410125732421875) / ((_2797 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2808 * _2651.z;
                                frontier_phi_85_pred_1 = _2808 * _2651.y;
                                frontier_phi_85_pred_2 = _2808 * _2651.x;
                                frontier_phi_85_pred_3 = _2838 * _2663.z;
                                frontier_phi_85_pred_4 = _2838 * _2663.y;
                                frontier_phi_85_pred_5 = _2838 * _2663.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2847 = frontier_phi_85_pred;
                            _2846 = frontier_phi_85_pred_1;
                            _2845 = frontier_phi_85_pred_2;
                            _2844 = frontier_phi_85_pred_3;
                            _2843 = frontier_phi_85_pred_4;
                            _2842 = frontier_phi_85_pred_5;
                            _2593 = _2845 + _2606;
                            _2594 = _2846 + _2607;
                            _2595 = _2847 + _2608;
                            _2590 = _2842 + _2603;
                            _2591 = _2843 + _2604;
                            _2592 = _2844 + _2605;
                            if (_2610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2610;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2595;
                        frontier_phi_79_pred_1 = _2594;
                        frontier_phi_79_pred_2 = _2593;
                        frontier_phi_79_pred_3 = _2592;
                        frontier_phi_79_pred_4 = _2591;
                        frontier_phi_79_pred_5 = _2590;
                    }
                    _2285 = frontier_phi_79_pred;
                    _2283 = frontier_phi_79_pred_1;
                    _2281 = frontier_phi_79_pred_2;
                    _2279 = frontier_phi_79_pred_3;
                    _2277 = frontier_phi_79_pred_4;
                    _2275 = frontier_phi_79_pred_5;
                    uint _2438 = _2437 + 1u;
                    if (_2438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2431 = _2275;
                        _2432 = _2277;
                        _2433 = _2279;
                        _2434 = _2281;
                        _2435 = _2283;
                        _2436 = _2285;
                        _2437 = _2438;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2281;
                frontier_phi_60_61_ladder_1 = _2285;
                frontier_phi_60_61_ladder_2 = _2283;
                frontier_phi_60_61_ladder_3 = _2279;
                frontier_phi_60_61_ladder_4 = _2277;
                frontier_phi_60_61_ladder_5 = _2275;
            }
            else
            {
                frontier_phi_60_61_ladder = _2150;
                frontier_phi_60_61_ladder_1 = _2154;
                frontier_phi_60_61_ladder_2 = _2152;
                frontier_phi_60_61_ladder_3 = _2148;
                frontier_phi_60_61_ladder_4 = _2146;
                frontier_phi_60_61_ladder_5 = _2144;
            }
            _2274 = frontier_phi_60_61_ladder_5;
            _2276 = frontier_phi_60_61_ladder_4;
            _2278 = frontier_phi_60_61_ladder_3;
            _2280 = frontier_phi_60_61_ladder;
            _2282 = frontier_phi_60_61_ladder_2;
            _2284 = frontier_phi_60_61_ladder_1;
        }
        float _2289 = isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0));
        _2018 = (_2289 * _2280) + _1582;
        _2020 = (_2289 * _2282) + _1584;
        _2022 = (_2289 * _2284) + _1586;
        _2024 = ((_2274 * 0.039999999105930328369140625) * _2289) + _1831;
        _2026 = ((_2276 * 0.039999999105930328369140625) * _2289) + _1833;
        _2028 = ((_2278 * 0.039999999105930328369140625) * _2289) + _1835;
    }
    else
    {
        _2018 = _1582;
        _2020 = _1584;
        _2022 = _1586;
        _2024 = _1831;
        _2026 = _1833;
        _2028 = _1835;
    }
    uint _2034 = _384 + uint(cbMatDynParam._m0[0u].w);
    float _2043 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _228.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2034].x;
    float _2047 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _228.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2034].y;
    float _2051 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _228.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2034].z;
    float _3790 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3801 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3812 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _2068 = (((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_2018 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _408))) + ((_2024 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + _2043;
    float _2070 = (_2047 + ((_2026 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_2020 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _408)));
    float _2072 = (_2051 + ((_2028 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_2022 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _408)));
    float _2073 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2074 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2075 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2081 = cbMtdParam._m0[2u].x * _2043;
    float _2082 = cbMtdParam._m0[2u].y * _2047;
    float _2083 = cbMtdParam._m0[2u].z * _2051;
    float _3838 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2085 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    uint _2086 = _382 + 6u;
    float _2094 = _342 / cbSceneParam._m0[86u].x;
    float _2095 = _343 / cbSceneParam._m0[86u].y;
    vec4 _2109 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2094, _2095, (log2((isnan(cbSceneParam._m0[77u].w) ? _263 : (isnan(_263) ? cbSceneParam._m0[77u].w : min(_263, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2111 = _2109.x;
    float _2112 = _2109.y;
    float _2113 = _2109.z;
    float _2114 = _2109.w;
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    if (_263 > cbSceneParam._m0[78u].w)
    {
        float _2169 = isnan(_263) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _263 : min(cbSceneParam._m0[80u].w, _263));
        float _2170 = _2169 / _263;
        float _2181 = _2170 * _314;
        float _2182 = _315 * _2170;
        float _2183 = (-0.0) - _2182;
        float _2184 = _2170 * _316;
        float _2186 = (cbSceneParam._m0[77u].w * _2183) / _2169;
        float _2187 = _2186 + cbSceneParam._m0[79u].w;
        float _2188 = cbSceneParam._m0[79u].w - _2182;
        float _2194 = sqrt(((_2181 * _2181) + (_2182 * _2182)) + (_2184 * _2184));
        float _2197 = (1.0 - (cbSceneParam._m0[77u].w / _2169)) * _2194;
        float _2202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2388;
        if (abs((_2183 - _2186) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2388 = ((((_2187 > 0.0) ? exp2(_2202 * _2187) : (2.0 - exp2(_2204 * _2187))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2197;
        }
        else
        {
            float _2332 = 1.0 / cbSceneParam._m0[80u].x;
            float _2333 = isnan(_2188) ? _2187 : (isnan(_2187) ? _2188 : max(_2187, _2188));
            float _2334 = isnan(_2188) ? _2187 : (isnan(_2187) ? _2188 : min(_2187, _2188));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            _2388 = ((abs(_2194 / _2183) * cbSceneParam._m0[80u].y) * ((((_2343 - _2344) * 2.0) - ((exp2(_2202 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)))) - exp2(_2202 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))))) * _2332)) - ((exp2(_2204 * _2343) - exp2(_2204 * _2344)) * _2332))) + (_2197 * cbSceneParam._m0[80u].z);
        }
        vec4 _2390 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2094, _2095, 1.0), 0.0);
        float _2399 = exp2((_2388 * (-1.44269502162933349609375)) * (1.0 - _2390.w));
        float _2400 = log2(_2399);
        float _2416 = log2(_2114);
        _2206 = (exp2(_2416 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].x)) * _2390.x) / cbSceneParam._m0[78u].x)) + _2111;
        _2208 = (exp2(_2416 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].y)) * _2390.y) / cbSceneParam._m0[78u].y)) + _2112;
        _2210 = (exp2(_2416 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].z)) * _2390.z) / cbSceneParam._m0[78u].z)) + _2113;
        _2212 = _2399 * _2114;
    }
    else
    {
        _2206 = _2111;
        _2208 = _2112;
        _2210 = _2113;
        _2212 = _2114;
    }
    bool _2426;
    vec4 _2221;
    vec4 _2244;
    float _2246;
    float _2250;
    float _2251;
    float _2252;
    float _2255;
    float _2258;
    float _2261;
    float _2262;
    bool _2273;
    for (;;)
    {
        _2221 = cbMatDynParam._m0[0u];
        float _2223 = roundEven(_2221.y);
        bool _2224 = _2223 == 3.0;
        float _2226 = log2(_2212);
        float _2230 = exp2(_2226 * cbSceneParam._m0[78u].x);
        float _2231 = exp2(_2226 * cbSceneParam._m0[78u].y);
        float _2232 = exp2(_2226 * cbSceneParam._m0[78u].z);
        float _2233 = _2230 * _2073;
        float _2234 = _2231 * _2074;
        float _2235 = _2232 * _2075;
        float _2242 = _330 + (-0.5);
        _2244 = cbMtdParam._m0[1u];
        _2246 = _2244.y * _2242;
        float _2249 = (_2223 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2250 = _2249 * (_2224 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2206)));
        _2251 = _2249 * (_2224 ? _2234 : (_2234 + (cbSceneParam._m0[72u].w * _2208)));
        _2252 = _2249 * (_2224 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2210)));
        _2255 = ((_2081 * _2085) * _2230) * _2249;
        _2258 = ((_2082 * _2085) * _2231) * _2249;
        _2261 = ((_2083 * _2085) * _2232) * _2249;
        _2262 = _2242 * 0.999000012874603271484375;
        _2273 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2273)
        {
            if ((cbInstanceData._m0[_382 + 7u].x + _2262) < 0.5)
            {
                _2426 = true;
                break;
            }
        }
        uint _2367 = _384 + uint(_2221.w);
        if ((cbInstanceData._m0[_2367].w < 1.0) && ((cbInstanceData._m0[_2367].w + _2262) < 0.5))
        {
            _2426 = true;
            break;
        }
        if ((_2246 + _203) < _2244.x)
        {
            _2426 = true;
            break;
        }
        _2426 = false;
        break;
    }
    float _2581;
    if (_2426)
    {
        discard_state = true;
        _2581 = 0.0;
    }
    else
    {
        _2581 = cbInstanceData._m0[_2086].w;
    }
    SV_Target.x = _2250;
    SV_Target.y = _2251;
    SV_Target.z = _2252;
    SV_Target.w = _2581;
    SV_Target_1.x = _2255;
    SV_Target_1.y = _2258;
    SV_Target_1.z = _2261;
    SV_Target_1.w = cbInstanceData._m0[_2086].w;
    discard_exit();
}


