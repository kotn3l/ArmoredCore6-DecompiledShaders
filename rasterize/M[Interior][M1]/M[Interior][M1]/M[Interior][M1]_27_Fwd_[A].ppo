#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _428;
float _3259;
float _3260;
float _3261;
float _3262;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _343 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _359 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _366 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _375 = cbMtdParam._m0[23u].x + _263;
    float _376 = cbMtdParam._m0[23u].y + _264;
    float _377 = cbMtdParam._m0[23u].z + _265;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_359 * _192, _359 * _193, _359 * _194));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_366 * _206, _366 * _207, _366 * _208));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _397 * _393;
    float _403 = ((cbMtdParam._m0[19u].w * _391) * _397) + (_351 * cbMtdParam._m0[20u].y);
    float _404 = ((cbMtdParam._m0[20u].x * _392) * _397) + (_353 * cbMtdParam._m0[20u].z);
    float _407 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _408 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _426;
    float _429;
    float _431;
    if (_403 > 0.0)
    {
        float _412 = (1.0 - _407) / _403;
        _426 = _412;
        _429 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_412 * _398)) * 0.16666667163372039794921875;
        _431 = (fract((_412 * _404) + _408) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_403 < 0.0)
        {
            float _427 = ((-0.0) - _407) / _403;
            frontier_phi_3_2_ladder = _427;
            frontier_phi_3_2_ladder_1 = (fract((_427 * _404) + _408) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_427 * _398) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _428;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _426 = frontier_phi_3_2_ladder;
        _429 = frontier_phi_3_2_ladder_2;
        _431 = frontier_phi_3_2_ladder_1;
    }
    float _457;
    float _459;
    float _461;
    if (_404 > 0.0)
    {
        float _444 = (1.0 - _408) / _404;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_444 < _426)
        {
            frontier_phi_8_5_ladder = (fract(_444 * _398) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_444 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _444;
        }
        else
        {
            frontier_phi_8_5_ladder = _431;
            frontier_phi_8_5_ladder_1 = _429;
            frontier_phi_8_5_ladder_2 = _426;
        }
        _457 = frontier_phi_8_5_ladder_2;
        _459 = frontier_phi_8_5_ladder_1;
        _461 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_404 < 0.0)
        {
            float _458 = ((-0.0) - _408) / _404;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_458 < _426)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_458 * _398) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_458 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _458;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _431;
                frontier_phi_8_6_ladder_9_ladder_1 = _429;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _431;
            frontier_phi_8_6_ladder_1 = _429;
            frontier_phi_8_6_ladder_2 = _426;
        }
        _457 = frontier_phi_8_6_ladder_2;
        _459 = frontier_phi_8_6_ladder_1;
        _461 = frontier_phi_8_6_ladder;
    }
    float _465 = (_398 > 0.0) ? (cbMtdParam._m0[16u].w / _398) : 5000.0;
    float _478;
    float _479;
    if (_465 < _457)
    {
        _478 = ((_407 + cbMtdParam._m0[17u].x) + (_465 * _403)) * 0.16666667163372039794921875;
        _479 = (((_465 * _404) + _408) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _478 = _459;
        _479 = _461;
    }
    vec4 _481 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_478, _479));
    float _486 = _481.x * cbMtdParam._m0[13u].x;
    float _487 = _481.y * cbMtdParam._m0[13u].y;
    float _488 = _481.z * cbMtdParam._m0[13u].z;
    float _493 = 0.5 - (_290 * 0.5);
    float _503 = (((_486 - _303) - (_486 * _290)) * _493) + _303;
    float _504 = (((_487 - _305) - (_487 * _290)) * _493) + _305;
    float _505 = (((_488 - _307) - (_488 * _290)) * _493) + _307;
    vec4 _517 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _519 = _517.x;
    vec4 _531 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _535 = _531.z;
    float _538 = (_531.x * 2.0) + (-1.0);
    float _539 = (_531.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3271 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))));
    float _546 = _535 * _290;
    float _556 = (cbMtdParam._m0[15u].w * ((_347 - _546) + ((_535 - _347) * _290))) + _546;
    float _564 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _290))) + _538;
    float _565 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _290))) + _539;
    float _568 = fma(_545, _199, fma(_565, _206, _564 * _192));
    float _571 = fma(_545, _200, fma(_565, _207, _564 * _193));
    float _574 = fma(_545, _201, fma(_565, _208, _564 * _194));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3282 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _582 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3304 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3315 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3326 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _586 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _606 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _607 = _263 * _606;
    float _608 = _264 * _606;
    float _609 = _265 * _606;
    vec4 _614 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _616 = _614.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _796 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _802 = (cbMatDynParam._m0[5u].x * _796) + cbMatDynParam._m0[5u].y;
        float _3337 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _807 = (cbMatDynParam._m0[5u].z * _796) + cbMatDynParam._m0[5u].w;
        float _3348 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) - _803)) + _803) < ((_616 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _634 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _635 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _654 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _657 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _660 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _673 = uint(roundEven(NORMAL.w)) * 13u;
    uint _674 = _673 + 9u;
    uint _675 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _681 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_675].x;
    float _682 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_675].y;
    float _683 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_675].z;
    float _3359 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _687 = 1.0 - _586;
    float _688 = _684 * _687;
    float _689 = _685 * _687;
    float _690 = _686 * _687;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _586;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _586;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _586;
    float _698 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    vec4 _710 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _634, cbSceneParam._m0[86u].y * _635));
    float _713 = _710.x * TEXCOORD.z;
    float _714 = dot(vec3(_579, _580, _581), vec3(_607, _608, _609));
    float _717 = _714 * 2.0;
    float _721 = (_717 * _579) - _607;
    float _722 = (_717 * _580) - _608;
    float _723 = (_717 * _581) - _609;
    float _727 = abs(dot(vec3(_607, _608, _609), vec3(_579, _580, _581)));
    float _3392 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _729 = sqrt(_582);
    float _742 = exp2((_729 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_729 * 3.0));
    float _748 = (1.0 - _742) * ((_729 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _749 = _742 * _729;
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _845 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _849 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _873 = _777 + _579;
        float _874 = _781 + _580;
        float _875 = _785 + _581;
        float _885 = fma(_875, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873)) - _841;
        float _886 = fma(_875, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873)) - _845;
        float _887 = fma(_875, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873)) - _849;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _943 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_909.x + (-0.5));
        float _945 = _943 * (_909.y + (-0.5));
        float _946 = _943 * (_909.z + (-0.5));
        float _953 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_916.x + (-0.5));
        float _955 = _953 * (_916.y + (-0.5));
        float _956 = _953 * (_916.z + (-0.5));
        float _963 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_923.x + (-0.5));
        float _965 = _963 * (_923.y + (-0.5));
        float _966 = _963 * (_923.z + (-0.5));
        float _973 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_930.x + (-0.5));
        float _975 = _973 * (_930.y + (-0.5));
        float _976 = _973 * (_930.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _997 = (dot(vec3(_579, _580, _581), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1007 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3440 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1009 + 1.0))) + _1014) * _977;
        float _1024 = _945 * 0.5;
        float _1025 = _955 * 0.5;
        float _1026 = _965 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_579, _580, _581), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3473 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1051 + 1.0))) + _1056) * _978;
        float _1066 = _946 * 0.5;
        float _1067 = _956 * 0.5;
        float _1068 = _966 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_579, _580, _581), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3506 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_1093 + 1.0))) + _1098) * _979;
        _1115 = _946;
        _1116 = _945;
        _1117 = _944;
        _1118 = _956;
        _1119 = _955;
        _1120 = _954;
        _1121 = _966;
        _1122 = _965;
        _1123 = _964;
        _1124 = _979;
        _1125 = _978;
        _1126 = _977;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _428;
        _1116 = _428;
        _1117 = _428;
        _1118 = _428;
        _1119 = _428;
        _1120 = _428;
        _1121 = _428;
        _1122 = _428;
        _1123 = _428;
        _1124 = _428;
        _1125 = _428;
        _1126 = _428;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1162 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1166 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1189 = _777 + _579;
        float _1190 = _781 + _580;
        float _1191 = _785 + _581;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_579, _580, _581), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3569 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_579, _580, _581), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3602 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_579, _580, _581), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3635 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _428;
        _1428 = _428;
        _1429 = _428;
        _1430 = _428;
        _1431 = _428;
        _1432 = _428;
        _1433 = _428;
        _1434 = _428;
        _1435 = _428;
        _1436 = _428;
        _1437 = _428;
        _1438 = _428;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1127)) + _1127;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1128)) + _1128;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1129)) + _1129;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _721 * 0.5;
    float _1496 = _722 * 0.5;
    float _1497 = _723 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1626 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1629 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1657 = frontier_phi_29_27_ladder;
        }
        float _2019;
        if (_1626 > 0.0)
        {
            _2019 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2019 = frontier_phi_38_34_ladder;
        }
        float _2327;
        if (_1629 > 0.0)
        {
            _2327 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2327 = frontier_phi_52_45_ladder;
        }
        float _2329 = isnan(_2019) ? _1657 : (isnan(_1657) ? _2019 : min(_1657, _2019));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1623) + _1612;
        float _2335 = (_2330 * _1626) + _1616;
        float _2336 = (_2330 * _1629) + _1620;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2336, cbModelParam._m0[9u].z, fma(_2335, cbModelParam._m0[9u].y, _2334 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2336, cbModelParam._m0[10u].z, fma(_2335, cbModelParam._m0[10u].y, _2334 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2336, cbModelParam._m0[11u].z, fma(_2335, cbModelParam._m0[11u].y, _2334 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_28_52_ladder = _2478.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2478.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2478.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_28_52_ladder_2;
        _1647 = frontier_phi_28_52_ladder_1;
        _1649 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1564);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1709 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1713 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1717 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1720 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1723 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1726 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _2024;
        if (_1720 > 0.0)
        {
            _2024 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2024 = frontier_phi_40_36_ladder;
        }
        float _2353;
        if (_1723 > 0.0)
        {
            _2353 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2353 = frontier_phi_54_47_ladder;
        }
        float _2543;
        if (_1726 > 0.0)
        {
            _2543 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2543 = frontier_phi_72_65_ladder;
        }
        float _2545 = isnan(_2353) ? _2024 : (isnan(_2024) ? _2353 : min(_2024, _2353));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _1720) + _1709;
        float _2551 = (_2546 * _1723) + _1713;
        float _2552 = (_2546 * _1726) + _1717;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2553;
        float _2556 = _2553 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2552 > _2556) || ((_2552 < _2554) || ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 < _2554) || (_2550 > _2556))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2552, cbModelParam._m0[17u].z, fma(_2551, cbModelParam._m0[17u].y, _2550 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2552, cbModelParam._m0[18u].z, fma(_2551, cbModelParam._m0[18u].y, _2550 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2552, cbModelParam._m0[19u].z, fma(_2551, cbModelParam._m0[19u].y, _2550 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_37_72_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1745 = frontier_phi_37_72_ladder_2;
        _1747 = frontier_phi_37_72_ladder_1;
        _1749 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1654);
        _1745 = _1729.x * cbModelParam._m0[1u].z;
        _1747 = _1729.y * cbModelParam._m0[1u].z;
        _1749 = _1729.z * cbModelParam._m0[1u].z;
    }
    float _1762 = (((_748 * _698) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1745 - _1645)) + _1645);
    float _1764 = (((_748 * _700) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1766 = (((_748 * _701) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1769 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1762 * cbSceneParam._m0[91u].x));
    uvec4 _1785 = floatBitsToUint(cbInstanceData._m0[_673 + 5u]);
    uint _1787 = _1785.x * 14u;
    uint _1788 = _1787 + 13u;
    float _1793 = _713 + (-1.0);
    float _1796 = (cbLight._m0[_1788].x * _1793) + 1.0;
    float _1797 = (cbLight._m0[_1788].y * _1793) + 1.0;
    uint _1798 = _1787 + 5u;
    float _1804 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1808 = _1787 + 4u;
    float _1815 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1819 = _1787 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1787].xyz), vec3(_579, _580, _581));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_579, _580, _581));
    float _3771 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _3782 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1798].x * _1804) * _1840) + ((cbLight._m0[_1808].x * _1815) * _1838);
    float _1848 = ((_1804 * cbLight._m0[_1798].y) * _1840) + ((_1815 * cbLight._m0[_1808].y) * _1838);
    float _1849 = ((_1804 * cbLight._m0[_1798].z) * _1840) + ((_1815 * cbLight._m0[_1808].z) * _1838);
    uint _1851 = _1787 + 8u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1787].w)) * _582) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1787].x + _607;
    float _1867 = cbLight._m0[_1787].y + _608;
    float _1868 = cbLight._m0[_1787].z + _609;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1787].xyz));
    float _3793 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _1880 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1881 = dot(vec3(_579, _580, _581), vec3(_1873, _1874, _1875));
    float _3815 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1787].xyz), vec3(_1873, _1874, _1875));
    float _3826 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1865 * _1865;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1901 = exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0);
    float _1902 = 0.959999978542327880859375 - _695;
    float _1904 = 0.959999978542327880859375 - _696;
    float _1905 = 0.959999978542327880859375 - _697;
    float _1912 = 1.0 - _1865;
    float _1923 = (0.5 / (((_1880 * ((_1879 * _1912) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1912) + _1865) * _1879))) * _1879;
    float _3837 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    uint _1936 = _1787 + 9u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _582) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1819].x + _607;
    float _1950 = cbLight._m0[_1819].y + _608;
    float _1951 = cbLight._m0[_1819].z + _609;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1819].xyz));
    float _3848 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1963 = dot(vec3(_579, _580, _581), vec3(_1956, _1957, _1958));
    float _3859 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1956, _1957, _1958));
    float _3870 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1948 * _1948;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0);
    float _1989 = 1.0 - _1948;
    float _1999 = (0.5 / (((_1880 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1989) + _1948) * _1962))) * _1962;
    float _3881 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    float _2011 = (((((_1982 * _1902) + _698) * cbLight._m0[_1936].x) * _2001) * _1804) + (((((_1901 * _1902) + _698) * cbLight._m0[_1851].x) * _1925) * _1815);
    float _2012 = (((((_1982 * _1904) + _700) * cbLight._m0[_1936].y) * _2001) * _1804) + (((((_1901 * _1904) + _700) * cbLight._m0[_1851].y) * _1925) * _1815);
    float _2013 = (((((_1982 * _1905) + _701) * cbLight._m0[_1936].z) * _2001) * _1804) + (((((_1901 * _1905) + _701) * cbLight._m0[_1851].z) * _1925) * _1815);
    float _2128;
    float _2130;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    if (_1785.y == 0u)
    {
        float _2068 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2069 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2068;
        float _2070 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2068;
        float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2068;
        uvec4 _2083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2084 = _2083.x;
        uint _2095 = uint((float(_2083.y) * floor(float(uint(cbSceneParam._m0[85u].y * _635) / _2084))) + floor(float(uint(cbSceneParam._m0[85u].x * _634) / _2084)));
        float _2105 = (log2(_2071 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2106 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        uint _2109 = uint(isnan(14.0) ? _2106 : (isnan(_2106) ? 14.0 : min(_2106, 14.0)));
        uvec4 _2114 = texelFetch(g_lightClusterGridBuffer, int(((_2109 << 2u) + (_2095 << 6u)) >> 2u));
        uint _2115 = _2114.x;
        uint _2116 = _2083.z;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        if (((((1u << ((_2116 >> 4u) & 15u)) + 4294967295u) & _2115) == 0u) || ((_2116 & 240u) == 0u))
        {
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
        }
        else
        {
            float _2207;
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            uint _2396 = 0u;
            uint _2405;
            bool _2406;
            for (;;)
            {
                _2405 = texelFetch(g_lightClassification, int((((_2109 << 5u) + (_2095 << 9u)) + (_2396 << 2u)) >> 2u)).x;
                _2406 = _2405 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2406)
                {
                    frontier_phi_67_pred = _2393;
                    frontier_phi_67_pred_1 = _2392;
                    frontier_phi_67_pred_2 = _2391;
                    frontier_phi_67_pred_3 = _2390;
                    frontier_phi_67_pred_4 = _2394;
                    frontier_phi_67_pred_5 = _2395;
                }
                else
                {
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    uint _2592;
                    _2586 = _2390;
                    _2587 = _2391;
                    _2588 = _2392;
                    _2589 = _2393;
                    _2590 = _2394;
                    _2591 = _2395;
                    _2592 = _2405;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    for (;;)
                    {
                        uint _2596 = uint(findLSB(_2592)) + (_2396 << 5u);
                        uint _2593 = (_2592 + 4294967295u) & _2592;
                        uint _2598 = _2596 * 48u;
                        vec4 _2612 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2618 = (_2596 * 48u) + 4u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2637 = (_2596 * 48u) + 8u;
                        vec3 _2648 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x));
                        float _2652 = _2612.x - _2069;
                        float _2653 = _2612.y - _2070;
                        float _2654 = _2612.z - _2071;
                        float _2655 = dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654));
                        float _2658 = inversesqrt(_2655);
                        float _2659 = _2658 * _2652;
                        float _2660 = _2658 * _2653;
                        float _2661 = _2658 * _2654;
                        float _2662 = dot(vec3(_654, _657, _660), vec3(_2659, _2660, _2661));
                        float _2667 = 1.0 - (_2655 * _2612.w);
                        float _3902 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2668 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                        float _2669 = sqrt(_2655) * _2631.w;
                        float _2672 = 1.39999997615814208984375 / (_2669 + 1.39999997615814208984375);
                        float _2673 = _2672 * _2672;
                        float _2676 = ((1.0 - _2673) * _2662) + _2673;
                        float _2679 = _2669 * _2669;
                        float _2683 = ((isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0))) * _2668) / ((_2679 * 0.699999988079071044921875) + 1.0);
                        float _2687 = (-0.0) - _2069;
                        float _2688 = (-0.0) - _2070;
                        float _2689 = (-0.0) - _2071;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2704 = exp2(log2(1.0 / ((_2679 * 3.5) + 5.0)) * 0.25);
                        float _2705 = 1.0 - _729;
                        float _2712 = sqrt(1.0 - ((1.0 - (_2705 * _2705)) * (1.0 - (_2704 * _2704))));
                        float _2713 = _2712 * _2712;
                        float _2714 = _2713 * _2713;
                        float _2715 = _2694 + _2659;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
                        float _2725 = dot(vec3(_654, _657, _660), vec3(_2694, _2695, _2696));
                        float _3918 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2728 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                        float _2729 = dot(vec3(_654, _657, _660), vec3(_2721 * _2715, _2721 * _2716, _2721 * _2717));
                        float _3929 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2732 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                        float _2736 = ((_2732 * _2732) * (_2714 + (-1.0))) + 1.0;
                        float _2737 = _2672 * _2713;
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2662) + _2738;
                        float _3940 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                        float _2743 = 1.0 - _2713;
                        float _2753 = (0.5 / (((_2742 * ((_2728 * _2743) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2743) + _2713) * _2728))) * _2742;
                        float _3951 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2764 = (((_2714 * 3.1415927410125732421875) * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) / ((_2736 * _2736) * ((_2679 * 2.1991131305694580078125) + 3.141590118408203125))) * _2668;
                        _2490 = (_2683 * _2631.x) + _2589;
                        _2491 = (_2683 * _2631.y) + _2590;
                        _2492 = (_2683 * _2631.z) + _2591;
                        _2487 = (_2764 * _2648.x) + _2586;
                        _2488 = (_2764 * _2648.y) + _2587;
                        _2489 = (_2764 * _2648.z) + _2588;
                        if (_2593 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2586 = _2487;
                            _2587 = _2488;
                            _2588 = _2489;
                            _2589 = _2490;
                            _2590 = _2491;
                            _2591 = _2492;
                            _2592 = _2593;
                        }
                    }
                    frontier_phi_67_pred = _2490;
                    frontier_phi_67_pred_1 = _2489;
                    frontier_phi_67_pred_2 = _2488;
                    frontier_phi_67_pred_3 = _2487;
                    frontier_phi_67_pred_4 = _2491;
                    frontier_phi_67_pred_5 = _2492;
                }
                _2213 = frontier_phi_67_pred;
                _2211 = frontier_phi_67_pred_1;
                _2209 = frontier_phi_67_pred_2;
                _2207 = frontier_phi_67_pred_3;
                _2215 = frontier_phi_67_pred_4;
                _2217 = frontier_phi_67_pred_5;
                uint _2397 = _2396 + 1u;
                if (_2397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2390 = _2207;
                    _2391 = _2209;
                    _2392 = _2211;
                    _2393 = _2213;
                    _2394 = _2215;
                    _2395 = _2217;
                    _2396 = _2397;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
        }
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.z;
        uint _2223 = (_2221 >> 8u) & 15u;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        if (((4294967295u << _2223) & _2115) == 0u)
        {
            _2358 = _2206;
            _2360 = _2208;
            _2362 = _2210;
            _2364 = _2212;
            _2366 = _2214;
            _2368 = _2216;
        }
        else
        {
            float _2383 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
            float _2384 = _2383 * _2069;
            float _2385 = _2383 * _2070;
            float _2386 = _2383 * _2071;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2223 < ((_2221 >> 12u) & 15u))
            {
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2569 = _2206;
                float _2570 = _2208;
                float _2571 = _2210;
                float _2572 = _2212;
                float _2573 = _2214;
                float _2574 = _2216;
                uint _2575 = _2223;
                uint _2584;
                bool _2585;
                for (;;)
                {
                    _2584 = texelFetch(g_lightClassification, int((((_2109 << 5u) + (_2095 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                    _2585 = _2584 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2585)
                    {
                        frontier_phi_81_pred = _2572;
                        frontier_phi_81_pred_1 = _2571;
                        frontier_phi_81_pred_2 = _2570;
                        frontier_phi_81_pred_3 = _2569;
                        frontier_phi_81_pred_4 = _2574;
                        frontier_phi_81_pred_5 = _2573;
                    }
                    else
                    {
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _2812 = _2569;
                        float _2813 = _2570;
                        float _2814 = _2571;
                        float _2815 = _2572;
                        float _2816 = _2573;
                        float _2817 = _2574;
                        uint _2818 = _2584;
                        uint _2819;
                        vec4 _2844;
                        float _2845;
                        vec4 _2860;
                        vec3 _2872;
                        vec4 _2887;
                        vec4 _2902;
                        float _2948;
                        bool _2949;
                        for (;;)
                        {
                            uint _2829 = ((_2575 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2818));
                            _2819 = (_2818 + 4294967295u) & _2818;
                            uint _2831 = _2829 * 40u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            _2845 = _2844.w;
                            uint _2847 = (_2829 * 40u) + 4u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2862 = (_2829 * 40u) + 8u;
                            _2872 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x));
                            uint _2874 = (_2829 * 40u) + 16u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2889 = (_2829 * 40u) + 20u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2904 = (_2829 * 40u) + 24u;
                            vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2923 = (_2829 * 40u) + 28u;
                            vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            _2948 = fma(_2071, _2936.z, fma(_2070, _2936.y, _2936.x * _2069)) + _2936.w;
                            _2949 = !((fma(_2071, _2917.z, fma(_2070, _2917.y, _2917.x * _2069)) + _2917.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2949)
                            {
                                float _2976 = _2844.x - _2069;
                                float _2977 = _2844.y - _2070;
                                float _2978 = _2844.z - _2071;
                                float _2979 = dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978));
                                float _2982 = inversesqrt(_2979);
                                float _2983 = _2982 * _2976;
                                float _2984 = _2982 * _2977;
                                float _2985 = _2982 * _2978;
                                float _2989 = 1.0 - (_2979 / (_2845 * _2845));
                                float _3962 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                                float _2994 = sqrt(_2979) * _2860.w;
                                float _2996 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                                float _2997 = _2996 * _2996;
                                float _3000 = ((1.0 - _2997) * dot(vec3(_2983, _2984, _2985), vec3(_654, _657, _660))) + _2997;
                                float _3003 = _2994 * _2994;
                                float _3007 = (fma(_2071, _2887.z, fma(_2070, _2887.y, _2887.x * _2069)) + _2887.w) / _2948;
                                float _3008 = (fma(_2071, _2902.z, fma(_2070, _2902.y, _2902.x * _2069)) + _2902.w) / _2948;
                                float _3012 = 1.0 - dot(vec2(_3007, _3008), vec2(_3007, _3008));
                                float _3978 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _3014 = _3013 * (((isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))) * _2990) / ((_3003 * 0.699999988079071044921875) + 1.0));
                                float _3026 = exp2(log2(1.0 / ((_3003 * 3.5) + 5.0)) * 0.25);
                                float _3027 = 1.0 - _729;
                                float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                                float _3035 = _3034 * _3034;
                                float _3036 = _3035 * _3035;
                                float _3037 = _2983 - _2384;
                                float _3038 = _2984 - _2385;
                                float _3039 = _2985 - _2386;
                                float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                                float _3047 = dot(vec3(_654, _657, _660), vec3((-0.0) - _2384, (-0.0) - _2385, (-0.0) - _2386));
                                float _3989 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3050 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                                float _3051 = dot(vec3(_654, _657, _660), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                                float _4000 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3054 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                                float _3059 = _2996 * _3035;
                                float _3060 = _3059 * _3059;
                                float _3066 = ((1.0 - _3060) * dot(vec3(_654, _657, _660), vec3(_2983, _2984, _2985))) + _3060;
                                float _4011 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3068 = 1.0 - _3035;
                                float _3078 = (0.5 / (((_3067 * ((_3050 * _3068) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3035) * _3050))) * _3067;
                                float _4022 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3088 = (_3013 * _2990) * (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) / ((_3058 * _3058) * ((_3003 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3014 * _2860.x;
                                frontier_phi_87_pred_1 = _3088 * _2872.z;
                                frontier_phi_87_pred_2 = _3088 * _2872.y;
                                frontier_phi_87_pred_3 = _3088 * _2872.x;
                                frontier_phi_87_pred_4 = _3014 * _2860.z;
                                frontier_phi_87_pred_5 = _3014 * _2860.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3095 = frontier_phi_87_pred;
                            _3094 = frontier_phi_87_pred_1;
                            _3093 = frontier_phi_87_pred_2;
                            _3092 = frontier_phi_87_pred_3;
                            _3097 = frontier_phi_87_pred_4;
                            _3096 = frontier_phi_87_pred_5;
                            _2802 = _3095 + _2815;
                            _2803 = _3096 + _2816;
                            _2804 = _3097 + _2817;
                            _2799 = _3092 + _2812;
                            _2800 = _3093 + _2813;
                            _2801 = _3094 + _2814;
                            if (_2819 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2819;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2802;
                        frontier_phi_81_pred_1 = _2801;
                        frontier_phi_81_pred_2 = _2800;
                        frontier_phi_81_pred_3 = _2799;
                        frontier_phi_81_pred_4 = _2804;
                        frontier_phi_81_pred_5 = _2803;
                    }
                    _2365 = frontier_phi_81_pred;
                    _2363 = frontier_phi_81_pred_1;
                    _2361 = frontier_phi_81_pred_2;
                    _2359 = frontier_phi_81_pred_3;
                    _2369 = frontier_phi_81_pred_4;
                    _2367 = frontier_phi_81_pred_5;
                    uint _2576 = _2575 + 1u;
                    if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2569 = _2359;
                        _2570 = _2361;
                        _2571 = _2363;
                        _2572 = _2365;
                        _2573 = _2367;
                        _2574 = _2369;
                        _2575 = _2576;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2369;
                frontier_phi_56_57_ladder_1 = _2367;
                frontier_phi_56_57_ladder_2 = _2365;
                frontier_phi_56_57_ladder_3 = _2361;
                frontier_phi_56_57_ladder_4 = _2359;
                frontier_phi_56_57_ladder_5 = _2363;
            }
            else
            {
                frontier_phi_56_57_ladder = _2216;
                frontier_phi_56_57_ladder_1 = _2214;
                frontier_phi_56_57_ladder_2 = _2212;
                frontier_phi_56_57_ladder_3 = _2208;
                frontier_phi_56_57_ladder_4 = _2206;
                frontier_phi_56_57_ladder_5 = _2210;
            }
            _2358 = frontier_phi_56_57_ladder_4;
            _2360 = frontier_phi_56_57_ladder_3;
            _2362 = frontier_phi_56_57_ladder_5;
            _2364 = frontier_phi_56_57_ladder_2;
            _2366 = frontier_phi_56_57_ladder_1;
            _2368 = frontier_phi_56_57_ladder;
        }
        float _2373 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _2128 = (_2373 * _2364) + _1847;
        _2130 = (_2373 * _2366) + _1848;
        _2132 = (_2373 * _2368) + _1849;
        _2134 = ((_2358 * _698) * _2373) + _2011;
        _2136 = ((_2360 * _700) * _2373) + _2012;
        _2138 = ((_2362 * _701) * _2373) + _2013;
    }
    else
    {
        _2128 = _1847;
        _2130 = _1848;
        _2132 = _1849;
        _2134 = _2011;
        _2136 = _2012;
        _2138 = _2013;
    }
    float _4038 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4049 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4060 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _2155 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2128 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _713))) + ((_2134 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2156 = ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2130 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _713))) + ((_2136 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2157 = ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2132 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _713))) + ((_2138 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2158 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    uint _2161 = _673 + 6u;
    float _2169 = _634 / cbSceneParam._m0[86u].x;
    float _2170 = _635 / cbSceneParam._m0[86u].y;
    vec4 _2184 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2186 = _2184.x;
    float _2187 = _2184.y;
    float _2188 = _2184.z;
    float _2189 = _2184.w;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2231 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2232 = _2231 / _602;
        float _2243 = _2232 * _263;
        float _2244 = _264 * _2232;
        float _2245 = (-0.0) - _2244;
        float _2246 = _2232 * _265;
        float _2248 = (cbSceneParam._m0[77u].w * _2245) / _2231;
        float _2249 = _2248 + cbSceneParam._m0[79u].w;
        float _2250 = cbSceneParam._m0[79u].w - _2244;
        float _2256 = sqrt(((_2243 * _2243) + (_2244 * _2244)) + (_2246 * _2246));
        float _2259 = (1.0 - (cbSceneParam._m0[77u].w / _2231)) * _2256;
        float _2265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2267 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2500;
        if (abs((_2245 - _2248) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2500 = ((((_2249 > 0.0) ? exp2(_2265 * _2249) : (2.0 - exp2(_2267 * _2249))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2259;
        }
        else
        {
            float _2419 = 1.0 / cbSceneParam._m0[80u].x;
            float _2420 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : max(_2249, _2250));
            float _2421 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : min(_2249, _2250));
            float _2430 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : min(_2420, 0.0));
            float _2431 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : min(_2421, 0.0));
            _2500 = ((abs(_2256 / _2245) * cbSceneParam._m0[80u].y) * ((((_2430 - _2431) * 2.0) - ((exp2(_2265 * (isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0)))) - exp2(_2265 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0))))) * _2419)) - ((exp2(_2267 * _2430) - exp2(_2267 * _2431)) * _2419))) + (_2259 * cbSceneParam._m0[80u].z);
        }
        vec4 _2502 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, 1.0), 0.0);
        float _2511 = exp2((_2500 * (-1.44269502162933349609375)) * (1.0 - _2502.w));
        float _2512 = log2(_2511);
        float _2528 = log2(_2189);
        _2269 = (exp2(_2528 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].x)) * _2502.x) / cbSceneParam._m0[78u].x)) + _2186;
        _2271 = (exp2(_2528 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].y)) * _2502.y) / cbSceneParam._m0[78u].y)) + _2187;
        _2273 = (exp2(_2528 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].z)) * _2502.z) / cbSceneParam._m0[78u].z)) + _2188;
        _2275 = _2511 * _2189;
    }
    else
    {
        _2269 = _2186;
        _2271 = _2187;
        _2273 = _2188;
        _2275 = _2189;
    }
    bool _2538;
    vec4 _2285;
    vec4 _2307;
    float _2309;
    float _2313;
    float _2314;
    float _2315;
    float _2316;
    bool _2326;
    for (;;)
    {
        _2285 = cbMatDynParam._m0[0u];
        float _2287 = roundEven(_2285.y);
        bool _2288 = _2287 == 3.0;
        float _2289 = log2(_2275);
        float _2296 = exp2(_2289 * cbSceneParam._m0[78u].x) * _2158;
        float _2297 = exp2(_2289 * cbSceneParam._m0[78u].y) * _2159;
        float _2298 = exp2(_2289 * cbSceneParam._m0[78u].z) * _2160;
        float _2305 = _616 + (-0.5);
        _2307 = cbMtdParam._m0[1u];
        _2309 = _2307.y * _2305;
        float _2312 = (_2287 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2313 = _2312 * (_2288 ? _2296 : (_2296 + (cbSceneParam._m0[72u].w * _2269)));
        _2314 = _2312 * (_2288 ? _2297 : (_2297 + (cbSceneParam._m0[72u].w * _2271)));
        _2315 = _2312 * (_2288 ? _2298 : (_2298 + (cbSceneParam._m0[72u].w * _2273)));
        _2316 = _2305 * 0.999000012874603271484375;
        _2326 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2326)
        {
            if ((cbInstanceData._m0[_673 + 7u].x + _2316) < 0.5)
            {
                _2538 = true;
                break;
            }
        }
        uint _2454 = _674 + uint(_2285.w);
        if ((cbInstanceData._m0[_2454].w < 1.0) && ((cbInstanceData._m0[_2454].w + _2316) < 0.5))
        {
            _2538 = true;
            break;
        }
        if ((_2309 + 1.0) < _2307.x)
        {
            _2538 = true;
            break;
        }
        _2538 = false;
        break;
    }
    float _2769;
    if (_2538)
    {
        discard_state = true;
        _2769 = 0.0;
    }
    else
    {
        _2769 = cbInstanceData._m0[_2161].w;
    }
    SV_Target.x = _2313;
    SV_Target.y = _2314;
    SV_Target.z = _2315;
    SV_Target.w = _2769;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2161].w;
    discard_exit();
}


