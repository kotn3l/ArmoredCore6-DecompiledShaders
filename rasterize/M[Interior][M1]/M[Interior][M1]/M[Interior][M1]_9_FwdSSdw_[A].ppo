#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _399;
float _3244;
float _3245;
float _3246;
float _3247;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _332 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _339 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _348 = cbMtdParam._m0[23u].x + _263;
    float _349 = cbMtdParam._m0[23u].y + _264;
    float _350 = cbMtdParam._m0[23u].z + _265;
    float _364 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_332 * _192, _332 * _193, _332 * _194));
    float _365 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_339 * _206, _339 * _207, _339 * _208));
    float _366 = (-0.0) - dot(vec3(_348, _349, _350), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _370 * _366;
    float _373 = (cbMtdParam._m0[19u].w * _364) * _370;
    float _375 = (cbMtdParam._m0[20u].x * _365) * _370;
    float _378 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _379 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _397;
    float _400;
    float _402;
    if (_373 > 0.0)
    {
        float _383 = (1.0 - _378) / _373;
        _397 = _383;
        _400 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_383 * _371)) * 0.16666667163372039794921875;
        _402 = (fract((_383 * _375) + _379) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_373 < 0.0)
        {
            float _398 = ((-0.0) - _378) / _373;
            frontier_phi_3_2_ladder = _398;
            frontier_phi_3_2_ladder_1 = (fract((_398 * _375) + _379) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_398 * _371) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _399;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _397 = frontier_phi_3_2_ladder;
        _400 = frontier_phi_3_2_ladder_2;
        _402 = frontier_phi_3_2_ladder_1;
    }
    float _428;
    float _430;
    float _432;
    if (_375 > 0.0)
    {
        float _415 = (1.0 - _379) / _375;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_415 < _397)
        {
            frontier_phi_8_5_ladder = (fract(_415 * _371) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_415 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _415;
        }
        else
        {
            frontier_phi_8_5_ladder = _402;
            frontier_phi_8_5_ladder_1 = _400;
            frontier_phi_8_5_ladder_2 = _397;
        }
        _428 = frontier_phi_8_5_ladder_2;
        _430 = frontier_phi_8_5_ladder_1;
        _432 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_375 < 0.0)
        {
            float _429 = ((-0.0) - _379) / _375;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_429 < _397)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_429 * _371) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_429 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _429;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _402;
                frontier_phi_8_6_ladder_9_ladder_1 = _400;
                frontier_phi_8_6_ladder_9_ladder_2 = _397;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _402;
            frontier_phi_8_6_ladder_1 = _400;
            frontier_phi_8_6_ladder_2 = _397;
        }
        _428 = frontier_phi_8_6_ladder_2;
        _430 = frontier_phi_8_6_ladder_1;
        _432 = frontier_phi_8_6_ladder;
    }
    float _436 = (_371 > 0.0) ? (cbMtdParam._m0[16u].w / _371) : 5000.0;
    float _449;
    float _450;
    if (_436 < _428)
    {
        _449 = ((_378 + cbMtdParam._m0[17u].x) + (_436 * _373)) * 0.16666667163372039794921875;
        _450 = (((_436 * _375) + _379) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _449 = _430;
        _450 = _432;
    }
    vec4 _452 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_449, _450));
    float _457 = _452.x * cbMtdParam._m0[13u].x;
    float _458 = _452.y * cbMtdParam._m0[13u].y;
    float _459 = _452.z * cbMtdParam._m0[13u].z;
    vec4 _477 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _479 = _477.x;
    vec4 _491 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _499 = (_491.x * 2.0) + (-1.0);
    float _501 = (_491.y * 2.0) + (-1.0);
    float _502 = dot(vec2(_499, _501), vec2(_499, _501));
    float _3256 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))));
    float _508 = _491.z * _290;
    float _511 = fma(_507, _199, fma(_501, _206, _499 * _192));
    float _514 = fma(_507, _200, fma(_501, _207, _499 * _193));
    float _517 = fma(_507, _201, fma(_501, _208, _499 * _194));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3267 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _525 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _3278 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3289 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3300 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3311 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _529 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _550 = _263 * _549;
    float _551 = _264 * _549;
    float _552 = _265 * _549;
    vec4 _557 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _559 = _557.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _740 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _746 = (cbMatDynParam._m0[5u].x * _740) + cbMatDynParam._m0[5u].y;
        float _3322 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _751 = (cbMatDynParam._m0[5u].z * _740) + cbMatDynParam._m0[5u].w;
        float _3333 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) - _747)) + _747) < ((_559 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _601 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _604 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _617 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3344 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _631 = 1.0 - _529;
    float _632 = _628 * _631;
    float _633 = _629 * _631;
    float _634 = _630 * _631;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _529;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _529;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _529;
    float _642 = _639 + 0.039999999105930328369140625;
    float _644 = _640 + 0.039999999105930328369140625;
    float _645 = _641 + 0.039999999105930328369140625;
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _578));
    float _657 = _654.x * TEXCOORD.z;
    float _658 = dot(vec3(_522, _523, _524), vec3(_550, _551, _552));
    float _661 = _658 * 2.0;
    float _665 = (_661 * _522) - _550;
    float _666 = (_661 * _523) - _551;
    float _667 = (_661 * _524) - _552;
    float _671 = abs(dot(vec3(_550, _551, _552), vec3(_522, _523, _524)));
    float _3377 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _673 = sqrt(_525);
    float _686 = exp2((_673 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_673 * 3.0));
    float _692 = (1.0 - _686) * ((_673 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _693 = _686 * _673;
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_729, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721));
        float _789 = fma(_729, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721));
        float _793 = fma(_729, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721));
        float _817 = _721 + _522;
        float _818 = _725 + _523;
        float _819 = _729 + _524;
        float _829 = fma(_819, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817)) - _785;
        float _830 = fma(_819, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817)) - _789;
        float _831 = fma(_819, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817)) - _793;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(_522, _523, _524), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3425 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_522, _523, _524), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3458 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_522, _523, _524), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3491 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1060 = _889;
        _1061 = _888;
        _1062 = _900;
        _1063 = _899;
        _1064 = _898;
        _1065 = _910;
        _1066 = _909;
        _1067 = _908;
        _1068 = _923;
        _1069 = _922;
        _1070 = _921;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _399;
        _1060 = _399;
        _1061 = _399;
        _1062 = _399;
        _1063 = _399;
        _1064 = _399;
        _1065 = _399;
        _1066 = _399;
        _1067 = _399;
        _1068 = _399;
        _1069 = _399;
        _1070 = _399;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1102 = fma(_729, cbModelParam._m0[30u].z, fma(_725, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _721));
        float _1106 = fma(_729, cbModelParam._m0[31u].z, fma(_725, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _721));
        float _1110 = fma(_729, cbModelParam._m0[32u].z, fma(_725, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _721));
        float _1133 = _721 + _522;
        float _1134 = _725 + _523;
        float _1135 = _729 + _524;
        float _1145 = fma(_1135, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1102 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1106 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[35u].z) + ((((((_1110 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1201 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1168.x + (-0.5));
        float _1203 = _1201 * (_1168.y + (-0.5));
        float _1204 = _1201 * (_1168.z + (-0.5));
        float _1211 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1175.x + (-0.5));
        float _1213 = _1211 * (_1175.y + (-0.5));
        float _1214 = _1211 * (_1175.z + (-0.5));
        float _1221 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1182.x + (-0.5));
        float _1223 = _1221 * (_1182.y + (-0.5));
        float _1224 = _1221 * (_1182.z + (-0.5));
        float _1231 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1189.x + (-0.5));
        float _1233 = _1231 * (_1189.y + (-0.5));
        float _1234 = _1231 * (_1189.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_522, _523, _524), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3554 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1265 + 1.0))) + _1270) * _1235;
        float _1280 = _1203 * 0.5;
        float _1281 = _1213 * 0.5;
        float _1282 = _1223 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_522, _523, _524), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3587 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1307 + 1.0))) + _1312) * _1236;
        float _1322 = _1204 * 0.5;
        float _1323 = _1214 * 0.5;
        float _1324 = _1224 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_522, _523, _524), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3620 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1349 + 1.0))) + _1354) * _1237;
        _1371 = _1204;
        _1372 = _1203;
        _1373 = _1202;
        _1374 = _1214;
        _1375 = _1213;
        _1376 = _1212;
        _1377 = _1224;
        _1378 = _1223;
        _1379 = _1222;
        _1380 = _1237;
        _1381 = _1236;
        _1382 = _1235;
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _399;
        _1372 = _399;
        _1373 = _399;
        _1374 = _399;
        _1375 = _399;
        _1376 = _399;
        _1377 = _399;
        _1378 = _399;
        _1379 = _399;
        _1380 = _399;
        _1381 = _399;
        _1382 = _399;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1071)) + _1071;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1072)) + _1072;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1418 = fma(_1397, cbSceneParam._m0[89u].z, fma(_1396, cbSceneParam._m0[89u].y, _1395 * cbSceneParam._m0[89u].x));
    float _1421 = fma(_1397, cbSceneParam._m0[90u].z, fma(_1396, cbSceneParam._m0[90u].y, _1395 * cbSceneParam._m0[90u].x));
    float _1424 = fma(_1397, cbSceneParam._m0[91u].z, fma(_1396, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1395));
    float _1439 = _665 * 0.5;
    float _1440 = _666 * 0.5;
    float _1441 = _667 * 0.5;
    float _1442 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1445 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1448 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1482;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1455 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1459 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1463 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1470 = dot(vec4(cbModelParam._m0[39u]), vec4(_1439, _1440, _1441, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1493;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1484 = dot(vec4(cbModelParam._m0[40u]), vec4(_1439, _1440, _1441, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1497 = (_1493 * cbModelParam._m0[1u].x) + (_1482 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _525);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1507 : min(cbModelParam._m0[25u].z, _1507));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1557 = fma(_729, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721)) + cbModelParam._m0[13u].w;
        float _1561 = fma(_729, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721)) + cbModelParam._m0[14u].w;
        float _1565 = fma(_729, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721)) + cbModelParam._m0[15u].w;
        float _1568 = fma(_667, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665));
        float _1571 = fma(_667, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665));
        float _1574 = fma(_667, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665));
        float _1602;
        if (_1568 > 0.0)
        {
            _1602 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1602 = frontier_phi_29_27_ladder;
        }
        float _1988;
        if (_1571 > 0.0)
        {
            _1988 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1988 = frontier_phi_38_34_ladder;
        }
        float _2312;
        if (_1574 > 0.0)
        {
            _2312 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2312 = frontier_phi_52_45_ladder;
        }
        float _2314 = isnan(_1988) ? _1602 : (isnan(_1602) ? _1988 : min(_1602, _1988));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1568) + _1557;
        float _2320 = (_2315 * _1571) + _1561;
        float _2321 = (_2315 * _1574) + _1565;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2322;
        float _2325 = _2322 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2321 > _2325) || ((_2321 < _2323) || ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 < _2323) || (_2319 > _2325))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1508);
            frontier_phi_28_52_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1590 = frontier_phi_28_52_ladder_2;
        _1592 = frontier_phi_28_52_ladder_1;
        _1594 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_665, _666, _667), _1508);
        _1590 = _1578.x * cbModelParam._m0[1u].y;
        _1592 = _1578.y * cbModelParam._m0[1u].y;
        _1594 = _1578.z * cbModelParam._m0[1u].y;
    }
    float _1598 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _525);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1598 : min(cbModelParam._m0[25u].w, _1598));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_729, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_729, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_729, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_667, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665));
        float _1668 = fma(_667, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665));
        float _1671 = fma(_667, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665));
        float _1993;
        if (_1665 > 0.0)
        {
            _1993 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1993 = frontier_phi_40_36_ladder;
        }
        float _2338;
        if (_1668 > 0.0)
        {
            _2338 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2338 = frontier_phi_54_47_ladder;
        }
        float _2528;
        if (_1671 > 0.0)
        {
            _2528 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2528 = frontier_phi_72_65_ladder;
        }
        float _2530 = isnan(_2338) ? _1993 : (isnan(_1993) ? _2338 : min(_1993, _2338));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1665) + _1654;
        float _2536 = (_2531 * _1668) + _1658;
        float _2537 = (_2531 * _1671) + _1662;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1599);
            frontier_phi_37_72_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_37_72_ladder_2;
        _1692 = frontier_phi_37_72_ladder_1;
        _1694 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_665, _666, _667), _1599);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1707 = (((_692 * _642) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1690 - _1590)) + _1590);
    float _1709 = (((_692 * _644) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1692 - _1592)) + _1592);
    float _1711 = (((_692 * _645) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1694 - _1594)) + _1594);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    vec4 _1728 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_577, _578));
    float _1730 = _1728.w;
    float _1742 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1730);
    float _1743 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1730);
    float _1744 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1730);
    uvec4 _1748 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1750 = _1748.x * 14u;
    uint _1751 = _1750 + 13u;
    float _1756 = _657 + (-1.0);
    float _1759 = (cbLight._m0[_1751].x * _1756) + 1.0;
    float _1760 = (cbLight._m0[_1751].y * _1756) + 1.0;
    uint _1761 = _1750 + 5u;
    float _1767 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1771 = _1750 + 4u;
    float _1781 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1785 = _1750 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_522, _523, _524));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_522, _523, _524));
    float _3756 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _3767 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1761].x * _1767) * _1806) + (((cbLight._m0[_1771].x * _1742) * _1781) * _1804);
    float _1814 = ((_1767 * cbLight._m0[_1761].y) * _1806) + (((cbLight._m0[_1771].y * _1743) * _1781) * _1804);
    float _1815 = ((_1767 * cbLight._m0[_1761].z) * _1806) + (((cbLight._m0[_1771].z * _1744) * _1781) * _1804);
    uint _1817 = _1750 + 8u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _525) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1750].x + _550;
    float _1833 = cbLight._m0[_1750].y + _551;
    float _1834 = cbLight._m0[_1750].z + _552;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1750].xyz));
    float _3778 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _1846 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1847 = dot(vec3(_522, _523, _524), vec3(_1839, _1840, _1841));
    float _3800 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1839, _1840, _1841));
    float _3811 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1831 * _1831;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1867 = exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0);
    float _1868 = 0.959999978542327880859375 - _639;
    float _1870 = 0.959999978542327880859375 - _640;
    float _1871 = 0.959999978542327880859375 - _641;
    float _1878 = 1.0 - _1831;
    float _1889 = (0.5 / (((_1846 * ((_1845 * _1878) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1878) + _1831) * _1845))) * _1845;
    float _3822 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    uint _1905 = _1750 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _525) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1785].x + _550;
    float _1919 = cbLight._m0[_1785].y + _551;
    float _1920 = cbLight._m0[_1785].z + _552;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1785].xyz));
    float _3833 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1932 = dot(vec3(_522, _523, _524), vec3(_1925, _1926, _1927));
    float _3844 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1925, _1926, _1927));
    float _3855 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0);
    float _1958 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1846 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1958) + _1917) * _1931))) * _1931;
    float _3866 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1980 = (((((_1951 * _1868) + _642) * cbLight._m0[_1905].x) * _1970) * _1767) + ((((cbLight._m0[_1817].x * _1742) * ((_1867 * _1868) + _642)) * _1891) * _1781);
    float _1981 = (((((_1951 * _1870) + _644) * cbLight._m0[_1905].y) * _1970) * _1767) + ((((cbLight._m0[_1817].y * _1743) * ((_1867 * _1870) + _644)) * _1891) * _1781);
    float _1982 = (((((_1951 * _1871) + _645) * cbLight._m0[_1905].z) * _1970) * _1767) + ((((cbLight._m0[_1817].z * _1744) * ((_1867 * _1871) + _645)) * _1891) * _1781);
    float _2097;
    float _2099;
    float _2101;
    float _2103;
    float _2105;
    float _2107;
    if (_1748.y == 0u)
    {
        float _2037 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2038 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2037;
        float _2039 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2037;
        float _2040 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2037;
        uvec4 _2052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2053 = _2052.x;
        uint _2064 = uint((float(_2052.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _2053))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _2053)));
        float _2074 = (log2(_2040 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2075 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        uint _2078 = uint(isnan(14.0) ? _2075 : (isnan(_2075) ? 14.0 : min(_2075, 14.0)));
        uvec4 _2083 = texelFetch(g_lightClusterGridBuffer, int(((_2078 << 2u) + (_2064 << 6u)) >> 2u));
        uint _2084 = _2083.x;
        uint _2085 = _2052.z;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        if (((((1u << ((_2085 >> 4u) & 15u)) + 4294967295u) & _2084) == 0u) || ((_2085 & 240u) == 0u))
        {
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
            _2201 = 0.0;
        }
        else
        {
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2200;
            float _2202;
            float _2375 = 0.0;
            float _2376 = 0.0;
            float _2377 = 0.0;
            float _2378 = 0.0;
            float _2379 = 0.0;
            float _2380 = 0.0;
            uint _2381 = 0u;
            uint _2390;
            bool _2391;
            for (;;)
            {
                _2390 = texelFetch(g_lightClassification, int((((_2078 << 5u) + (_2064 << 9u)) + (_2381 << 2u)) >> 2u)).x;
                _2391 = _2390 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2391)
                {
                    frontier_phi_67_pred = _2378;
                    frontier_phi_67_pred_1 = _2377;
                    frontier_phi_67_pred_2 = _2376;
                    frontier_phi_67_pred_3 = _2375;
                    frontier_phi_67_pred_4 = _2379;
                    frontier_phi_67_pred_5 = _2380;
                }
                else
                {
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    uint _2577;
                    _2571 = _2375;
                    _2572 = _2376;
                    _2573 = _2377;
                    _2574 = _2378;
                    _2575 = _2379;
                    _2576 = _2380;
                    _2577 = _2390;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    for (;;)
                    {
                        uint _2581 = uint(findLSB(_2577)) + (_2381 << 5u);
                        uint _2578 = (_2577 + 4294967295u) & _2577;
                        uint _2583 = _2581 * 48u;
                        vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2583)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 3u)).x));
                        uint _2603 = (_2581 * 48u) + 4u;
                        vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2622 = (_2581 * 48u) + 8u;
                        vec3 _2633 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x));
                        float _2637 = _2597.x - _2038;
                        float _2638 = _2597.y - _2039;
                        float _2639 = _2597.z - _2040;
                        float _2640 = dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639));
                        float _2643 = inversesqrt(_2640);
                        float _2644 = _2643 * _2637;
                        float _2645 = _2643 * _2638;
                        float _2646 = _2643 * _2639;
                        float _2647 = dot(vec3(_598, _601, _604), vec3(_2644, _2645, _2646));
                        float _2652 = 1.0 - (_2640 * _2597.w);
                        float _3887 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2653 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2654 = sqrt(_2640) * _2616.w;
                        float _2657 = 1.39999997615814208984375 / (_2654 + 1.39999997615814208984375);
                        float _2658 = _2657 * _2657;
                        float _2661 = ((1.0 - _2658) * _2647) + _2658;
                        float _2664 = _2654 * _2654;
                        float _2668 = ((isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0))) * _2653) / ((_2664 * 0.699999988079071044921875) + 1.0);
                        float _2672 = (-0.0) - _2038;
                        float _2673 = (-0.0) - _2039;
                        float _2674 = (-0.0) - _2040;
                        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
                        float _2679 = _2678 * _2672;
                        float _2680 = _2678 * _2673;
                        float _2681 = _2678 * _2674;
                        float _2689 = exp2(log2(1.0 / ((_2664 * 3.5) + 5.0)) * 0.25);
                        float _2690 = 1.0 - _673;
                        float _2697 = sqrt(1.0 - ((1.0 - (_2690 * _2690)) * (1.0 - (_2689 * _2689))));
                        float _2698 = _2697 * _2697;
                        float _2699 = _2698 * _2698;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2702 = _2681 + _2646;
                        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
                        float _2710 = dot(vec3(_598, _601, _604), vec3(_2679, _2680, _2681));
                        float _3903 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2713 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                        float _2714 = dot(vec3(_598, _601, _604), vec3(_2706 * _2700, _2706 * _2701, _2706 * _2702));
                        float _3914 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2717 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                        float _2721 = ((_2717 * _2717) * (_2699 + (-1.0))) + 1.0;
                        float _2722 = _2657 * _2698;
                        float _2723 = _2722 * _2722;
                        float _2726 = ((1.0 - _2723) * _2647) + _2723;
                        float _3925 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                        float _2728 = 1.0 - _2698;
                        float _2738 = (0.5 / (((_2727 * ((_2713 * _2728) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2727 * _2728) + _2698) * _2713))) * _2727;
                        float _3936 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2749 = (((_2699 * 3.1415927410125732421875) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) / ((_2721 * _2721) * ((_2664 * 2.1991131305694580078125) + 3.141590118408203125))) * _2653;
                        _2475 = (_2668 * _2616.x) + _2574;
                        _2476 = (_2668 * _2616.y) + _2575;
                        _2477 = (_2668 * _2616.z) + _2576;
                        _2472 = (_2749 * _2633.x) + _2571;
                        _2473 = (_2749 * _2633.y) + _2572;
                        _2474 = (_2749 * _2633.z) + _2573;
                        if (_2578 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2571 = _2472;
                            _2572 = _2473;
                            _2573 = _2474;
                            _2574 = _2475;
                            _2575 = _2476;
                            _2576 = _2477;
                            _2577 = _2578;
                        }
                    }
                    frontier_phi_67_pred = _2475;
                    frontier_phi_67_pred_1 = _2474;
                    frontier_phi_67_pred_2 = _2473;
                    frontier_phi_67_pred_3 = _2472;
                    frontier_phi_67_pred_4 = _2476;
                    frontier_phi_67_pred_5 = _2477;
                }
                _2198 = frontier_phi_67_pred;
                _2196 = frontier_phi_67_pred_1;
                _2194 = frontier_phi_67_pred_2;
                _2192 = frontier_phi_67_pred_3;
                _2200 = frontier_phi_67_pred_4;
                _2202 = frontier_phi_67_pred_5;
                uint _2382 = _2381 + 1u;
                if (_2382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2375 = _2192;
                    _2376 = _2194;
                    _2377 = _2196;
                    _2378 = _2198;
                    _2379 = _2200;
                    _2380 = _2202;
                    _2381 = _2382;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
            _2201 = _2202;
        }
        uvec4 _2205 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2206 = _2205.z;
        uint _2208 = (_2206 >> 8u) & 15u;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((4294967295u << _2208) & _2084) == 0u)
        {
            _2343 = _2191;
            _2345 = _2193;
            _2347 = _2195;
            _2349 = _2197;
            _2351 = _2199;
            _2353 = _2201;
        }
        else
        {
            float _2368 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
            float _2369 = _2368 * _2038;
            float _2370 = _2368 * _2039;
            float _2371 = _2368 * _2040;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2208 < ((_2206 >> 12u) & 15u))
            {
                float _2344;
                float _2346;
                float _2348;
                float _2350;
                float _2352;
                float _2354;
                float _2554 = _2191;
                float _2555 = _2193;
                float _2556 = _2195;
                float _2557 = _2197;
                float _2558 = _2199;
                float _2559 = _2201;
                uint _2560 = _2208;
                uint _2569;
                bool _2570;
                for (;;)
                {
                    _2569 = texelFetch(g_lightClassification, int((((_2078 << 5u) + (_2064 << 9u)) + (_2560 << 2u)) >> 2u)).x;
                    _2570 = _2569 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2570)
                    {
                        frontier_phi_81_pred = _2557;
                        frontier_phi_81_pred_1 = _2556;
                        frontier_phi_81_pred_2 = _2555;
                        frontier_phi_81_pred_3 = _2554;
                        frontier_phi_81_pred_4 = _2559;
                        frontier_phi_81_pred_5 = _2558;
                    }
                    else
                    {
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _2797 = _2554;
                        float _2798 = _2555;
                        float _2799 = _2556;
                        float _2800 = _2557;
                        float _2801 = _2558;
                        float _2802 = _2559;
                        uint _2803 = _2569;
                        uint _2804;
                        vec4 _2829;
                        float _2830;
                        vec4 _2845;
                        vec3 _2857;
                        vec4 _2872;
                        vec4 _2887;
                        float _2933;
                        bool _2934;
                        for (;;)
                        {
                            uint _2814 = ((_2560 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2803));
                            _2804 = (_2803 + 4294967295u) & _2803;
                            uint _2816 = _2814 * 40u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            _2830 = _2829.w;
                            uint _2832 = (_2814 * 40u) + 4u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2847 = (_2814 * 40u) + 8u;
                            _2857 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x));
                            uint _2859 = (_2814 * 40u) + 16u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2874 = (_2814 * 40u) + 20u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2889 = (_2814 * 40u) + 24u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2908 = (_2814 * 40u) + 28u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2933 = fma(_2040, _2921.z, fma(_2039, _2921.y, _2921.x * _2038)) + _2921.w;
                            _2934 = !((fma(_2040, _2902.z, fma(_2039, _2902.y, _2902.x * _2038)) + _2902.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2934)
                            {
                                float _2961 = _2829.x - _2038;
                                float _2962 = _2829.y - _2039;
                                float _2963 = _2829.z - _2040;
                                float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                                float _2967 = inversesqrt(_2964);
                                float _2968 = _2967 * _2961;
                                float _2969 = _2967 * _2962;
                                float _2970 = _2967 * _2963;
                                float _2974 = 1.0 - (_2964 / (_2830 * _2830));
                                float _3947 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _2979 = sqrt(_2964) * _2845.w;
                                float _2981 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                                float _2982 = _2981 * _2981;
                                float _2985 = ((1.0 - _2982) * dot(vec3(_2968, _2969, _2970), vec3(_598, _601, _604))) + _2982;
                                float _2988 = _2979 * _2979;
                                float _2992 = (fma(_2040, _2872.z, fma(_2039, _2872.y, _2872.x * _2038)) + _2872.w) / _2933;
                                float _2993 = (fma(_2040, _2887.z, fma(_2039, _2887.y, _2887.x * _2038)) + _2887.w) / _2933;
                                float _2997 = 1.0 - dot(vec2(_2992, _2993), vec2(_2992, _2993));
                                float _3963 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _2999 = _2998 * (((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2975) / ((_2988 * 0.699999988079071044921875) + 1.0));
                                float _3011 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                                float _3012 = 1.0 - _673;
                                float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                                float _3020 = _3019 * _3019;
                                float _3021 = _3020 * _3020;
                                float _3022 = _2968 - _2369;
                                float _3023 = _2969 - _2370;
                                float _3024 = _2970 - _2371;
                                float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                                float _3032 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2369, (-0.0) - _2370, (-0.0) - _2371));
                                float _3974 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3035 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                                float _3036 = dot(vec3(_598, _601, _604), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                                float _3985 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                                float _3044 = _2981 * _3020;
                                float _3045 = _3044 * _3044;
                                float _3051 = ((1.0 - _3045) * dot(vec3(_598, _601, _604), vec3(_2968, _2969, _2970))) + _3045;
                                float _3996 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                                float _3053 = 1.0 - _3020;
                                float _3063 = (0.5 / (((_3052 * ((_3035 * _3053) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3020) * _3035))) * _3052;
                                float _4007 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3073 = (_2998 * _2975) * (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) / ((_3043 * _3043) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2999 * _2845.x;
                                frontier_phi_87_pred_1 = _3073 * _2857.z;
                                frontier_phi_87_pred_2 = _3073 * _2857.y;
                                frontier_phi_87_pred_3 = _3073 * _2857.x;
                                frontier_phi_87_pred_4 = _2999 * _2845.z;
                                frontier_phi_87_pred_5 = _2999 * _2845.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3080 = frontier_phi_87_pred;
                            _3079 = frontier_phi_87_pred_1;
                            _3078 = frontier_phi_87_pred_2;
                            _3077 = frontier_phi_87_pred_3;
                            _3082 = frontier_phi_87_pred_4;
                            _3081 = frontier_phi_87_pred_5;
                            _2787 = _3080 + _2800;
                            _2788 = _3081 + _2801;
                            _2789 = _3082 + _2802;
                            _2784 = _3077 + _2797;
                            _2785 = _3078 + _2798;
                            _2786 = _3079 + _2799;
                            if (_2804 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2804;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2787;
                        frontier_phi_81_pred_1 = _2786;
                        frontier_phi_81_pred_2 = _2785;
                        frontier_phi_81_pred_3 = _2784;
                        frontier_phi_81_pred_4 = _2789;
                        frontier_phi_81_pred_5 = _2788;
                    }
                    _2350 = frontier_phi_81_pred;
                    _2348 = frontier_phi_81_pred_1;
                    _2346 = frontier_phi_81_pred_2;
                    _2344 = frontier_phi_81_pred_3;
                    _2354 = frontier_phi_81_pred_4;
                    _2352 = frontier_phi_81_pred_5;
                    uint _2561 = _2560 + 1u;
                    if (_2561 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2554 = _2344;
                        _2555 = _2346;
                        _2556 = _2348;
                        _2557 = _2350;
                        _2558 = _2352;
                        _2559 = _2354;
                        _2560 = _2561;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2354;
                frontier_phi_56_57_ladder_1 = _2352;
                frontier_phi_56_57_ladder_2 = _2350;
                frontier_phi_56_57_ladder_3 = _2346;
                frontier_phi_56_57_ladder_4 = _2344;
                frontier_phi_56_57_ladder_5 = _2348;
            }
            else
            {
                frontier_phi_56_57_ladder = _2201;
                frontier_phi_56_57_ladder_1 = _2199;
                frontier_phi_56_57_ladder_2 = _2197;
                frontier_phi_56_57_ladder_3 = _2193;
                frontier_phi_56_57_ladder_4 = _2191;
                frontier_phi_56_57_ladder_5 = _2195;
            }
            _2343 = frontier_phi_56_57_ladder_4;
            _2345 = frontier_phi_56_57_ladder_3;
            _2347 = frontier_phi_56_57_ladder_5;
            _2349 = frontier_phi_56_57_ladder_2;
            _2351 = frontier_phi_56_57_ladder_1;
            _2353 = frontier_phi_56_57_ladder;
        }
        float _2358 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
        _2097 = (_2358 * _2349) + _1813;
        _2099 = (_2358 * _2351) + _1814;
        _2101 = (_2358 * _2353) + _1815;
        _2103 = ((_2343 * _642) * _2358) + _1980;
        _2105 = ((_2345 * _644) * _2358) + _1981;
        _2107 = ((_2347 * _645) * _2358) + _1982;
    }
    else
    {
        _2097 = _1813;
        _2099 = _1814;
        _2101 = _1815;
        _2103 = _1980;
        _2105 = _1981;
        _2107 = _1982;
    }
    uint _2113 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _4023 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4034 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4045 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2138 = (((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2097 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _657))) + ((_2103 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2113].x * (_457 - (_457 * _290)));
    float _2140 = ((cbInstanceData._m0[_2113].y * (_458 - (_458 * _290))) + ((_2105 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2099 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _657)));
    float _2142 = ((cbInstanceData._m0[_2113].z * (_459 - (_459 * _290))) + ((_2107 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2101 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _657)));
    float _2143 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2144 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    uint _2146 = _617 + 6u;
    float _2154 = _577 / cbSceneParam._m0[86u].x;
    float _2155 = _578 / cbSceneParam._m0[86u].y;
    vec4 _2169 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2154, _2155, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2171 = _2169.x;
    float _2172 = _2169.y;
    float _2173 = _2169.z;
    float _2174 = _2169.w;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2216 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2217 = _2216 / _545;
        float _2228 = _2217 * _263;
        float _2229 = _264 * _2217;
        float _2230 = (-0.0) - _2229;
        float _2231 = _2217 * _265;
        float _2233 = (cbSceneParam._m0[77u].w * _2230) / _2216;
        float _2234 = _2233 + cbSceneParam._m0[79u].w;
        float _2235 = cbSceneParam._m0[79u].w - _2229;
        float _2241 = sqrt(((_2228 * _2228) + (_2229 * _2229)) + (_2231 * _2231));
        float _2244 = (1.0 - (cbSceneParam._m0[77u].w / _2216)) * _2241;
        float _2250 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2252 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2485;
        if (abs((_2230 - _2233) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2485 = ((((_2234 > 0.0) ? exp2(_2250 * _2234) : (2.0 - exp2(_2252 * _2234))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2244;
        }
        else
        {
            float _2404 = 1.0 / cbSceneParam._m0[80u].x;
            float _2405 = isnan(_2235) ? _2234 : (isnan(_2234) ? _2235 : max(_2234, _2235));
            float _2406 = isnan(_2235) ? _2234 : (isnan(_2234) ? _2235 : min(_2234, _2235));
            float _2415 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : min(_2405, 0.0));
            float _2416 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : min(_2406, 0.0));
            _2485 = ((abs(_2241 / _2230) * cbSceneParam._m0[80u].y) * ((((_2415 - _2416) * 2.0) - ((exp2(_2250 * (isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0)))) - exp2(_2250 * (isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0))))) * _2404)) - ((exp2(_2252 * _2415) - exp2(_2252 * _2416)) * _2404))) + (_2244 * cbSceneParam._m0[80u].z);
        }
        vec4 _2487 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2154, _2155, 1.0), 0.0);
        float _2496 = exp2((_2485 * (-1.44269502162933349609375)) * (1.0 - _2487.w));
        float _2497 = log2(_2496);
        float _2513 = log2(_2174);
        _2254 = (exp2(_2513 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].x)) * _2487.x) / cbSceneParam._m0[78u].x)) + _2171;
        _2256 = (exp2(_2513 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].y)) * _2487.y) / cbSceneParam._m0[78u].y)) + _2172;
        _2258 = (exp2(_2513 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].z)) * _2487.z) / cbSceneParam._m0[78u].z)) + _2173;
        _2260 = _2496 * _2174;
    }
    else
    {
        _2254 = _2171;
        _2256 = _2172;
        _2258 = _2173;
        _2260 = _2174;
    }
    bool _2523;
    vec4 _2270;
    vec4 _2292;
    float _2294;
    float _2298;
    float _2299;
    float _2300;
    float _2301;
    bool _2311;
    for (;;)
    {
        _2270 = cbMatDynParam._m0[0u];
        float _2272 = roundEven(_2270.y);
        bool _2273 = _2272 == 3.0;
        float _2274 = log2(_2260);
        float _2281 = exp2(_2274 * cbSceneParam._m0[78u].x) * _2143;
        float _2282 = exp2(_2274 * cbSceneParam._m0[78u].y) * _2144;
        float _2283 = exp2(_2274 * cbSceneParam._m0[78u].z) * _2145;
        float _2290 = _559 + (-0.5);
        _2292 = cbMtdParam._m0[1u];
        _2294 = _2292.y * _2290;
        float _2297 = (_2272 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2298 = _2297 * (_2273 ? _2281 : (_2281 + (cbSceneParam._m0[72u].w * _2254)));
        _2299 = _2297 * (_2273 ? _2282 : (_2282 + (cbSceneParam._m0[72u].w * _2256)));
        _2300 = _2297 * (_2273 ? _2283 : (_2283 + (cbSceneParam._m0[72u].w * _2258)));
        _2301 = _2290 * 0.999000012874603271484375;
        _2311 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2311)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2301) < 0.5)
            {
                _2523 = true;
                break;
            }
        }
        uint _2439 = _618 + uint(_2270.w);
        if ((cbInstanceData._m0[_2439].w < 1.0) && ((cbInstanceData._m0[_2439].w + _2301) < 0.5))
        {
            _2523 = true;
            break;
        }
        if ((_2294 + 1.0) < _2292.x)
        {
            _2523 = true;
            break;
        }
        _2523 = false;
        break;
    }
    float _2754;
    if (_2523)
    {
        discard_state = true;
        _2754 = 0.0;
    }
    else
    {
        _2754 = cbInstanceData._m0[_2146].w;
    }
    SV_Target.x = _2298;
    SV_Target.y = _2299;
    SV_Target.z = _2300;
    SV_Target.w = _2754;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2146].w;
    discard_exit();
}


