#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1340;
float _3511;
float _3512;
float _3513;
float _3514;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    float _603 = (_593 * ((_549 - _474) - (_549 * _294))) + _474;
    float _604 = (_593 * ((_550 - _475) - (_550 * _294))) + _475;
    float _605 = (_593 * ((_551 - _476) - (_551 * _294))) + _476;
    float _619 = _397 * cbMtdParam._m0[21u].z;
    float _620 = _398 * cbMtdParam._m0[21u].y;
    bool _621 = _619 > 0.0;
    float _626;
    if (_621)
    {
        _626 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _626 = frontier_phi_27_26_ladder;
    }
    bool _628 = _620 > 0.0;
    float _633;
    if (_628)
    {
        _633 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _633 = frontier_phi_31_30_ladder;
    }
    float _636 = _418 ? (cbMtdParam._m0[18u].x / _396) : 5000.0;
    float _637 = isnan(_633) ? _626 : (isnan(_626) ? _633 : min(_626, _633));
    float _638 = isnan(_636) ? _637 : (isnan(_637) ? _636 : min(_637, _636));
    float _642 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _646 = ((_638 * _396) + _642) / _642;
    float _651 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _653 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _670 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_638 * _619)) / _646) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_638 * _620)) / _646) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _675 = _670.x * cbMtdParam._m0[14u].x;
    float _676 = _670.y * cbMtdParam._m0[14u].y;
    float _677 = _670.z * cbMtdParam._m0[14u].z;
    float _685;
    if (_621)
    {
        _685 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _685 = frontier_phi_35_34_ladder;
    }
    float _691;
    if (_628)
    {
        _691 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _691 = frontier_phi_39_38_ladder;
    }
    float _693 = isnan(_691) ? _685 : (isnan(_685) ? _691 : min(_685, _691));
    float _694 = isnan(_636) ? _693 : (isnan(_693) ? _636 : min(_693, _636));
    float _701 = ((_694 * _396) + _642) / _642;
    vec4 _715 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_694 * _619)) / _701) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_694 * _620)) / _701) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _717 = _715.w;
    float _719 = _717 - (_717 * _294);
    float _730 = 0.5 - (_294 * 0.5);
    float _740 = (((_603 - _307) + (_719 * ((_675 - _603) - (_675 * _294)))) * _730) + _307;
    float _741 = (((_604 - _309) + (_719 * ((_676 - _604) - (_676 * _294)))) * _730) + _309;
    float _742 = (((_605 - _311) + (_719 * ((_677 - _605) - (_677 * _294)))) * _730) + _311;
    vec4 _754 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _756 = _754.x;
    vec4 _768 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _772 = _768.z;
    float _775 = (_768.x * 2.0) + (-1.0);
    float _776 = (_768.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _3573 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _782 = sqrt(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))));
    float _783 = _772 * _294;
    float _790 = (cbMtdParam._m0[15u].w * ((_333 - _783) + ((_772 - _333) * _294))) + _783;
    float _794 = (cbMtdParam._m0[16u].x * _361) + _775;
    float _795 = (cbMtdParam._m0[16u].x * _362) + _776;
    float _798 = fma(_782, _203, fma(_795, _210, _794 * _196));
    float _801 = fma(_782, _204, fma(_795, _211, _794 * _197));
    float _804 = fma(_782, _205, fma(_795, _212, _794 * _198));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _3584 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _812 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3606 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3617 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3628 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _816 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _836 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _837 = _267 * _836;
    float _838 = _268 * _836;
    float _839 = _269 * _836;
    vec4 _844 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _846 = _844.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1021 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _1027 = (cbMatDynParam._m0[5u].x * _1021) + cbMatDynParam._m0[5u].y;
        float _3639 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1032 = (cbMatDynParam._m0[5u].z * _1021) + cbMatDynParam._m0[5u].w;
        float _3650 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) - _1028)) + _1028) < ((_846 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _859 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _860 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _878 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _881 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _884 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    uint _897 = uint(roundEven(NORMAL.w)) * 13u;
    uint _899 = _897 + 9u;
    uint _900 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_900].z;
    float _3661 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _912 = 1.0 - _816;
    float _913 = _909 * _912;
    float _914 = _910 * _912;
    float _915 = _911 * _912;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _816;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _816;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _816;
    float _923 = _920 + 0.039999999105930328369140625;
    float _925 = _921 + 0.039999999105930328369140625;
    float _926 = _922 + 0.039999999105930328369140625;
    vec4 _935 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _859, cbSceneParam._m0[86u].y * _860));
    float _938 = _935.x * TEXCOORD.z;
    float _939 = dot(vec3(_809, _810, _811), vec3(_837, _838, _839));
    float _942 = _939 * 2.0;
    float _946 = (_942 * _809) - _837;
    float _947 = (_942 * _810) - _838;
    float _948 = (_942 * _811) - _839;
    float _952 = abs(dot(vec3(_837, _838, _839), vec3(_809, _810, _811)));
    float _3694 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _954 = sqrt(_812);
    float _967 = exp2((_954 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_954 * 3.0));
    float _973 = (1.0 - _967) * ((_954 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _974 = _967 * _954;
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1339;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1066 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1070 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1074 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1097 = _1002 + _809;
        float _1098 = _1006 + _810;
        float _1099 = _1010 + _811;
        float _1109 = fma(_1099, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1066 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1070 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[34u].z) + ((((((_1074 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1167 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1133.x + (-0.5));
        float _1169 = _1167 * (_1133.y + (-0.5));
        float _1170 = _1167 * (_1133.z + (-0.5));
        float _1177 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1140.x + (-0.5));
        float _1179 = _1177 * (_1140.y + (-0.5));
        float _1180 = _1177 * (_1140.z + (-0.5));
        float _1187 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1147.x + (-0.5));
        float _1189 = _1187 * (_1147.y + (-0.5));
        float _1190 = _1187 * (_1147.z + (-0.5));
        float _1197 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1154.x + (-0.5));
        float _1199 = _1197 * (_1154.y + (-0.5));
        float _1200 = _1197 * (_1154.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1221 = (dot(vec3(_809, _810, _811), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1231 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3742 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1233 + 1.0))) + _1238) * _1201;
        float _1248 = _1169 * 0.5;
        float _1249 = _1179 * 0.5;
        float _1250 = _1189 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_809, _810, _811), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3775 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1275 + 1.0))) + _1280) * _1202;
        float _1290 = _1170 * 0.5;
        float _1291 = _1180 * 0.5;
        float _1292 = _1190 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_809, _810, _811), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3808 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1317 + 1.0))) + _1322) * _1203;
        _1339 = _1170;
        _1341 = _1169;
        _1342 = _1168;
        _1343 = _1180;
        _1344 = _1179;
        _1345 = _1178;
        _1346 = _1190;
        _1347 = _1189;
        _1348 = _1188;
        _1349 = _1203;
        _1350 = _1202;
        _1351 = _1201;
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1340;
        _1341 = _1340;
        _1342 = _1340;
        _1343 = _1340;
        _1344 = _1340;
        _1345 = _1340;
        _1346 = _1340;
        _1347 = _1340;
        _1348 = _1340;
        _1349 = _1340;
        _1350 = _1340;
        _1351 = _1340;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1383 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1387 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1391 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1414 = _1002 + _809;
        float _1415 = _1006 + _810;
        float _1416 = _1010 + _811;
        float _1426 = fma(_1416, cbModelParam._m0[30u].z, fma(_1415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1414)) - _1383;
        float _1427 = fma(_1416, cbModelParam._m0[31u].z, fma(_1415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1414)) - _1387;
        float _1428 = fma(_1416, cbModelParam._m0[32u].z, fma(_1415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1414)) - _1391;
        float _1432 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
        float _1445 = ((_1432 * _1426) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1383 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1432 * _1427) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1387 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1432 * _1428) / cbModelParam._m0[35u].z) + ((((((_1391 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1482 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1449.x + (-0.5));
        float _1484 = _1482 * (_1449.y + (-0.5));
        float _1485 = _1482 * (_1449.z + (-0.5));
        float _1492 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1456.x + (-0.5));
        float _1494 = _1492 * (_1456.y + (-0.5));
        float _1495 = _1492 * (_1456.z + (-0.5));
        float _1502 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1463.x + (-0.5));
        float _1504 = _1502 * (_1463.y + (-0.5));
        float _1505 = _1502 * (_1463.z + (-0.5));
        float _1512 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1470.x + (-0.5));
        float _1514 = _1512 * (_1470.y + (-0.5));
        float _1515 = _1512 * (_1470.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_809, _810, _811), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _3871 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1546 + 1.0))) + _1551) * _1516;
        float _1561 = _1484 * 0.5;
        float _1562 = _1494 * 0.5;
        float _1563 = _1504 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_809, _810, _811), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _3904 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1588 + 1.0))) + _1593) * _1517;
        float _1603 = _1485 * 0.5;
        float _1604 = _1495 * 0.5;
        float _1605 = _1505 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_809, _810, _811), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _3937 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1630 + 1.0))) + _1635) * _1518;
        _1652 = _1485;
        _1653 = _1484;
        _1654 = _1483;
        _1655 = _1495;
        _1656 = _1494;
        _1657 = _1493;
        _1658 = _1505;
        _1659 = _1504;
        _1660 = _1503;
        _1661 = _1518;
        _1662 = _1517;
        _1663 = _1516;
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1340;
        _1653 = _1340;
        _1654 = _1340;
        _1655 = _1340;
        _1656 = _1340;
        _1657 = _1340;
        _1658 = _1340;
        _1659 = _1340;
        _1660 = _1340;
        _1661 = _1340;
        _1662 = _1340;
        _1663 = _1340;
        _1664 = 0.0;
        _1665 = 0.0;
        _1666 = 0.0;
    }
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1352)) + _1352;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1353)) + _1353;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1354)) + _1354;
    float _1699 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1676));
    float _1720 = _946 * 0.5;
    float _1721 = _947 * 0.5;
    float _1722 = _948 * 0.5;
    float _1723 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1726 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1729 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1763;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1736 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1339, _1343, _1346, _1349));
        float _1740 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1744 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1751 = dot(vec4(cbModelParam._m0[39u]), vec4(_1720, _1721, _1722, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1774;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1765 = dot(vec4(cbModelParam._m0[40u]), vec4(_1720, _1721, _1722, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1778 = (_1774 * cbModelParam._m0[1u].x) + (_1763 * (1.0 - cbModelParam._m0[1u].x));
    float _1788 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1788 : min(cbModelParam._m0[25u].z, _1788));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1836 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1840 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1844 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1847 = fma(_948, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946));
        float _1850 = fma(_948, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946));
        float _1853 = fma(_948, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946));
        float _1881;
        if (_1847 > 0.0)
        {
            _1881 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1881 = frontier_phi_57_55_ladder;
        }
        float _2239;
        if (_1850 > 0.0)
        {
            _2239 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2239 = frontier_phi_66_62_ladder;
        }
        float _2547;
        if (_1853 > 0.0)
        {
            _2547 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2547 = frontier_phi_80_73_ladder;
        }
        float _2549 = isnan(_2239) ? _1881 : (isnan(_1881) ? _2239 : min(_1881, _2239));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1847) + _1836;
        float _2555 = (_2550 * _1850) + _1840;
        float _2556 = (_2550 * _1853) + _1844;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2556, cbModelParam._m0[9u].z, fma(_2555, cbModelParam._m0[9u].y, _2554 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2556, cbModelParam._m0[10u].z, fma(_2555, cbModelParam._m0[10u].y, _2554 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2556, cbModelParam._m0[11u].z, fma(_2555, cbModelParam._m0[11u].y, _2554 * cbModelParam._m0[11u].x))), _1789);
            frontier_phi_56_80_ladder = _2698.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2698.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2698.x * cbModelParam._m0[1u].y;
        }
        _1869 = frontier_phi_56_80_ladder_2;
        _1871 = frontier_phi_56_80_ladder_1;
        _1873 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_946, _947, _948), _1789);
        _1869 = _1857.x * cbModelParam._m0[1u].y;
        _1871 = _1857.y * cbModelParam._m0[1u].y;
        _1873 = _1857.z * cbModelParam._m0[1u].y;
    }
    float _1877 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1877 : min(cbModelParam._m0[25u].w, _1877));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_948, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946));
        float _1944 = fma(_948, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946));
        float _1947 = fma(_948, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946));
        float _2244;
        if (_1941 > 0.0)
        {
            _2244 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2244 = frontier_phi_68_64_ladder;
        }
        float _2573;
        if (_1944 > 0.0)
        {
            _2573 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2573 = frontier_phi_82_75_ladder;
        }
        float _2763;
        if (_1947 > 0.0)
        {
            _2763 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2763 = frontier_phi_100_93_ladder;
        }
        float _2765 = isnan(_2573) ? _2244 : (isnan(_2244) ? _2573 : min(_2244, _2573));
        float _2766 = isnan(_2763) ? _2765 : (isnan(_2765) ? _2763 : min(_2765, _2763));
        float _2770 = (_2766 * _1941) + _1930;
        float _2771 = (_2766 * _1944) + _1934;
        float _2772 = (_2766 * _1947) + _1938;
        float _2773 = _2766 * 9.9999997473787516355514526367188e-05;
        float _2774 = (-1.0) - _2773;
        float _2776 = _2773 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2772 > _2776) || ((_2772 < _2774) || ((_2771 > _2776) || ((_2771 < _2774) || ((_2770 < _2774) || (_2770 > _2776))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2772, cbModelParam._m0[17u].z, fma(_2771, cbModelParam._m0[17u].y, _2770 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2772, cbModelParam._m0[18u].z, fma(_2771, cbModelParam._m0[18u].y, _2770 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2772, cbModelParam._m0[19u].z, fma(_2771, cbModelParam._m0[19u].y, _2770 * cbModelParam._m0[19u].x))), _1878);
            frontier_phi_65_100_ladder = _3014.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3014.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3014.z * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_65_100_ladder_1;
        _1968 = frontier_phi_65_100_ladder;
        _1970 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_946, _947, _948), _1878);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1983 = (((_973 * _923) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1966 - _1869)) + _1869);
    float _1985 = (((_973 * _925) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1968 - _1871)) + _1871);
    float _1987 = (((_973 * _926) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1970 - _1873)) + _1873);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    uvec4 _2006 = floatBitsToUint(cbInstanceData._m0[_897 + 5u]);
    uint _2008 = _2006.x * 14u;
    uint _2009 = _2008 + 13u;
    float _2014 = _938 + (-1.0);
    float _2017 = (cbLight._m0[_2009].x * _2014) + 1.0;
    float _2018 = (cbLight._m0[_2009].y * _2014) + 1.0;
    uint _2019 = _2008 + 5u;
    float _2025 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2029 = _2008 + 4u;
    float _2035 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2039 = _2008 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_809, _810, _811));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_809, _810, _811));
    float _4073 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4084 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2019].x * _2025) * _2060) + ((cbLight._m0[_2029].x * _2035) * _2058);
    float _2068 = ((_2025 * cbLight._m0[_2019].y) * _2060) + ((_2035 * cbLight._m0[_2029].y) * _2058);
    float _2069 = ((_2025 * cbLight._m0[_2019].z) * _2060) + ((_2035 * cbLight._m0[_2029].z) * _2058);
    uint _2071 = _2008 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _812) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_2008].x + _837;
    float _2087 = cbLight._m0[_2008].y + _838;
    float _2088 = cbLight._m0[_2008].z + _839;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2008].xyz));
    float _4095 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2100 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2101 = dot(vec3(_809, _810, _811), vec3(_2093, _2094, _2095));
    float _4117 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2093, _2094, _2095));
    float _4128 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
    float _2122 = 0.959999978542327880859375 - _920;
    float _2124 = 0.959999978542327880859375 - _921;
    float _2125 = 0.959999978542327880859375 - _922;
    float _2132 = 1.0 - _2085;
    float _2143 = (0.5 / (((_2100 * ((_2099 * _2132) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2132) + _2085) * _2099))) * _2099;
    float _4139 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2156 = _2008 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _812) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_2039].x + _837;
    float _2170 = cbLight._m0[_2039].y + _838;
    float _2171 = cbLight._m0[_2039].z + _839;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2039].xyz));
    float _4150 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2183 = dot(vec3(_809, _810, _811), vec3(_2176, _2177, _2178));
    float _4161 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2176, _2177, _2178));
    float _4172 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _2209 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2100 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2209) + _2168) * _2182))) * _2182;
    float _4183 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2231 = (((((_2202 * _2122) + _923) * cbLight._m0[_2156].x) * _2221) * _2025) + (((((_2121 * _2122) + _923) * cbLight._m0[_2071].x) * _2145) * _2035);
    float _2232 = (((((_2202 * _2124) + _925) * cbLight._m0[_2156].y) * _2221) * _2025) + (((((_2121 * _2124) + _925) * cbLight._m0[_2071].y) * _2145) * _2035);
    float _2233 = (((((_2202 * _2125) + _926) * cbLight._m0[_2156].z) * _2221) * _2025) + (((((_2121 * _2125) + _926) * cbLight._m0[_2071].z) * _2145) * _2035);
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    if (_2006.y == 0u)
    {
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2288;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2288;
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2288;
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.x;
        uint _2315 = uint((float(_2303.y) * floor(float(uint(cbSceneParam._m0[85u].y * _860) / _2304))) + floor(float(uint(cbSceneParam._m0[85u].x * _859) / _2304)));
        float _2325 = (log2(_2291 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2326 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        uint _2329 = uint(isnan(14.0) ? _2326 : (isnan(_2326) ? 14.0 : min(_2326, 14.0)));
        uvec4 _2334 = texelFetch(g_lightClusterGridBuffer, int(((_2329 << 2u) + (_2315 << 6u)) >> 2u));
        uint _2335 = _2334.x;
        uint _2336 = _2303.z;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        if (((((1u << ((_2336 >> 4u) & 15u)) + 4294967295u) & _2335) == 0u) || ((_2336 & 240u) == 0u))
        {
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
        }
        else
        {
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            uint _2616 = 0u;
            uint _2625;
            bool _2626;
            for (;;)
            {
                _2625 = texelFetch(g_lightClassification, int((((_2329 << 5u) + (_2315 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                _2626 = _2625 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2626)
                {
                    frontier_phi_95_pred = _2611;
                    frontier_phi_95_pred_1 = _2610;
                    frontier_phi_95_pred_2 = _2612;
                    frontier_phi_95_pred_3 = _2615;
                    frontier_phi_95_pred_4 = _2614;
                    frontier_phi_95_pred_5 = _2613;
                }
                else
                {
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    uint _2812;
                    _2806 = _2610;
                    _2807 = _2611;
                    _2808 = _2612;
                    _2809 = _2613;
                    _2810 = _2614;
                    _2811 = _2615;
                    _2812 = _2625;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2816 = uint(findLSB(_2812)) + (_2616 << 5u);
                        uint _2813 = (_2812 + 4294967295u) & _2812;
                        uint _2818 = _2816 * 48u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2838 = (_2816 * 48u) + 4u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2857 = (_2816 * 48u) + 8u;
                        vec3 _2868 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x));
                        float _2872 = _2832.x - _2289;
                        float _2873 = _2832.y - _2290;
                        float _2874 = _2832.z - _2291;
                        float _2875 = dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874));
                        float _2878 = inversesqrt(_2875);
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2882 = dot(vec3(_878, _881, _884), vec3(_2879, _2880, _2881));
                        float _2887 = 1.0 - (_2875 * _2832.w);
                        float _4204 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2889 = sqrt(_2875) * _2851.w;
                        float _2892 = 1.39999997615814208984375 / (_2889 + 1.39999997615814208984375);
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2882) + _2893;
                        float _2899 = _2889 * _2889;
                        float _2903 = ((isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))) * _2888) / ((_2899 * 0.699999988079071044921875) + 1.0);
                        float _2907 = (-0.0) - _2289;
                        float _2908 = (-0.0) - _2290;
                        float _2909 = (-0.0) - _2291;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2924 = exp2(log2(1.0 / ((_2899 * 3.5) + 5.0)) * 0.25);
                        float _2925 = 1.0 - _954;
                        float _2932 = sqrt(1.0 - ((1.0 - (_2925 * _2925)) * (1.0 - (_2924 * _2924))));
                        float _2933 = _2932 * _2932;
                        float _2934 = _2933 * _2933;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2945 = dot(vec3(_878, _881, _884), vec3(_2914, _2915, _2916));
                        float _4220 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2948 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2949 = dot(vec3(_878, _881, _884), vec3(_2941 * _2935, _2941 * _2936, _2941 * _2937));
                        float _4231 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2956 = ((_2952 * _2952) * (_2934 + (-1.0))) + 1.0;
                        float _2957 = _2892 * _2933;
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2882) + _2958;
                        float _4242 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2962 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2963 = 1.0 - _2933;
                        float _2973 = (0.5 / (((_2962 * ((_2948 * _2963) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2962 * _2963) + _2933) * _2948))) * _2962;
                        float _4253 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2984 = (((_2934 * 3.1415927410125732421875) * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) / ((_2956 * _2956) * ((_2899 * 2.1991131305694580078125) + 3.141590118408203125))) * _2888;
                        _2710 = (_2903 * _2851.x) + _2809;
                        _2711 = (_2903 * _2851.y) + _2810;
                        _2712 = (_2903 * _2851.z) + _2811;
                        _2707 = (_2984 * _2868.x) + _2806;
                        _2708 = (_2984 * _2868.y) + _2807;
                        _2709 = (_2984 * _2868.z) + _2808;
                        if (_2813 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2806 = _2707;
                            _2807 = _2708;
                            _2808 = _2709;
                            _2809 = _2710;
                            _2810 = _2711;
                            _2811 = _2712;
                            _2812 = _2813;
                        }
                    }
                    frontier_phi_95_pred = _2708;
                    frontier_phi_95_pred_1 = _2707;
                    frontier_phi_95_pred_2 = _2709;
                    frontier_phi_95_pred_3 = _2712;
                    frontier_phi_95_pred_4 = _2711;
                    frontier_phi_95_pred_5 = _2710;
                }
                _2429 = frontier_phi_95_pred;
                _2427 = frontier_phi_95_pred_1;
                _2431 = frontier_phi_95_pred_2;
                _2437 = frontier_phi_95_pred_3;
                _2435 = frontier_phi_95_pred_4;
                _2433 = frontier_phi_95_pred_5;
                uint _2617 = _2616 + 1u;
                if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2610 = _2427;
                    _2611 = _2429;
                    _2612 = _2431;
                    _2613 = _2433;
                    _2614 = _2435;
                    _2615 = _2437;
                    _2616 = _2617;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
        }
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.z;
        uint _2443 = (_2441 >> 8u) & 15u;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((4294967295u << _2443) & _2335) == 0u)
        {
            _2578 = _2426;
            _2580 = _2428;
            _2582 = _2430;
            _2584 = _2432;
            _2586 = _2434;
            _2588 = _2436;
        }
        else
        {
            float _2603 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
            float _2604 = _2603 * _2289;
            float _2605 = _2603 * _2290;
            float _2606 = _2603 * _2291;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2443 < ((_2441 >> 12u) & 15u))
            {
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2789 = _2426;
                float _2790 = _2428;
                float _2791 = _2430;
                float _2792 = _2432;
                float _2793 = _2434;
                float _2794 = _2436;
                uint _2795 = _2443;
                uint _2804;
                bool _2805;
                for (;;)
                {
                    _2804 = texelFetch(g_lightClassification, int((((_2329 << 5u) + (_2315 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                    _2805 = _2804 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2805)
                    {
                        frontier_phi_109_pred = _2790;
                        frontier_phi_109_pred_1 = _2789;
                        frontier_phi_109_pred_2 = _2794;
                        frontier_phi_109_pred_3 = _2793;
                        frontier_phi_109_pred_4 = _2792;
                        frontier_phi_109_pred_5 = _2791;
                    }
                    else
                    {
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3032 = _2789;
                        float _3033 = _2790;
                        float _3034 = _2791;
                        float _3035 = _2792;
                        float _3036 = _2793;
                        float _3037 = _2794;
                        uint _3038 = _2804;
                        uint _3039;
                        vec4 _3064;
                        float _3065;
                        vec4 _3080;
                        vec3 _3092;
                        vec4 _3107;
                        vec4 _3122;
                        float _3168;
                        bool _3169;
                        for (;;)
                        {
                            uint _3049 = ((_2795 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3038));
                            _3039 = (_3038 + 4294967295u) & _3038;
                            uint _3051 = _3049 * 40u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            _3065 = _3064.w;
                            uint _3067 = (_3049 * 40u) + 4u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3082 = (_3049 * 40u) + 8u;
                            _3092 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x));
                            uint _3094 = (_3049 * 40u) + 16u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3049 * 40u) + 20u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3124 = (_3049 * 40u) + 24u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3143 = (_3049 * 40u) + 28u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            _3168 = fma(_2291, _3156.z, fma(_2290, _3156.y, _3156.x * _2289)) + _3156.w;
                            _3169 = !((fma(_2291, _3137.z, fma(_2290, _3137.y, _3137.x * _2289)) + _3137.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3169)
                            {
                                float _3196 = _3064.x - _2289;
                                float _3197 = _3064.y - _2290;
                                float _3198 = _3064.z - _2291;
                                float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                                float _3202 = inversesqrt(_3199);
                                float _3203 = _3202 * _3196;
                                float _3204 = _3202 * _3197;
                                float _3205 = _3202 * _3198;
                                float _3209 = 1.0 - (_3199 / (_3065 * _3065));
                                float _4264 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3214 = sqrt(_3199) * _3080.w;
                                float _3216 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                                float _3217 = _3216 * _3216;
                                float _3220 = ((1.0 - _3217) * dot(vec3(_3203, _3204, _3205), vec3(_878, _881, _884))) + _3217;
                                float _3223 = _3214 * _3214;
                                float _3227 = (fma(_2291, _3107.z, fma(_2290, _3107.y, _3107.x * _2289)) + _3107.w) / _3168;
                                float _3228 = (fma(_2291, _3122.z, fma(_2290, _3122.y, _3122.x * _2289)) + _3122.w) / _3168;
                                float _3232 = 1.0 - dot(vec2(_3227, _3228), vec2(_3227, _3228));
                                float _4280 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3234 = _3233 * (((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3210) / ((_3223 * 0.699999988079071044921875) + 1.0));
                                float _3246 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                                float _3247 = 1.0 - _954;
                                float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                                float _3255 = _3254 * _3254;
                                float _3256 = _3255 * _3255;
                                float _3257 = _3203 - _2604;
                                float _3258 = _3204 - _2605;
                                float _3259 = _3205 - _2606;
                                float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                                float _3267 = dot(vec3(_878, _881, _884), vec3((-0.0) - _2604, (-0.0) - _2605, (-0.0) - _2606));
                                float _4291 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3271 = dot(vec3(_878, _881, _884), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                                float _4302 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                                float _3279 = _3216 * _3255;
                                float _3280 = _3279 * _3279;
                                float _3286 = ((1.0 - _3280) * dot(vec3(_878, _881, _884), vec3(_3203, _3204, _3205))) + _3280;
                                float _4313 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3288 = 1.0 - _3255;
                                float _3298 = (0.5 / (((_3287 * ((_3270 * _3288) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3255) * _3270))) * _3287;
                                float _4324 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3308 = (_3233 * _3210) * (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) / ((_3278 * _3278) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3234 * _3080.y;
                                frontier_phi_115_pred_1 = _3234 * _3080.x;
                                frontier_phi_115_pred_2 = _3308 * _3092.z;
                                frontier_phi_115_pred_3 = _3308 * _3092.y;
                                frontier_phi_115_pred_4 = _3308 * _3092.x;
                                frontier_phi_115_pred_5 = _3234 * _3080.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3316 = frontier_phi_115_pred;
                            _3315 = frontier_phi_115_pred_1;
                            _3314 = frontier_phi_115_pred_2;
                            _3313 = frontier_phi_115_pred_3;
                            _3312 = frontier_phi_115_pred_4;
                            _3317 = frontier_phi_115_pred_5;
                            _3022 = _3315 + _3035;
                            _3023 = _3316 + _3036;
                            _3024 = _3317 + _3037;
                            _3019 = _3312 + _3032;
                            _3020 = _3313 + _3033;
                            _3021 = _3314 + _3034;
                            if (_3039 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3039;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3020;
                        frontier_phi_109_pred_1 = _3019;
                        frontier_phi_109_pred_2 = _3024;
                        frontier_phi_109_pred_3 = _3023;
                        frontier_phi_109_pred_4 = _3022;
                        frontier_phi_109_pred_5 = _3021;
                    }
                    _2581 = frontier_phi_109_pred;
                    _2579 = frontier_phi_109_pred_1;
                    _2589 = frontier_phi_109_pred_2;
                    _2587 = frontier_phi_109_pred_3;
                    _2585 = frontier_phi_109_pred_4;
                    _2583 = frontier_phi_109_pred_5;
                    uint _2796 = _2795 + 1u;
                    if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2789 = _2579;
                        _2790 = _2581;
                        _2791 = _2583;
                        _2792 = _2585;
                        _2793 = _2587;
                        _2794 = _2589;
                        _2795 = _2796;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2579;
                frontier_phi_84_85_ladder_1 = _2583;
                frontier_phi_84_85_ladder_2 = _2589;
                frontier_phi_84_85_ladder_3 = _2587;
                frontier_phi_84_85_ladder_4 = _2585;
                frontier_phi_84_85_ladder_5 = _2581;
            }
            else
            {
                frontier_phi_84_85_ladder = _2426;
                frontier_phi_84_85_ladder_1 = _2430;
                frontier_phi_84_85_ladder_2 = _2436;
                frontier_phi_84_85_ladder_3 = _2434;
                frontier_phi_84_85_ladder_4 = _2432;
                frontier_phi_84_85_ladder_5 = _2428;
            }
            _2578 = frontier_phi_84_85_ladder;
            _2580 = frontier_phi_84_85_ladder_5;
            _2582 = frontier_phi_84_85_ladder_1;
            _2584 = frontier_phi_84_85_ladder_4;
            _2586 = frontier_phi_84_85_ladder_3;
            _2588 = frontier_phi_84_85_ladder_2;
        }
        float _2593 = isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0));
        _2348 = (_2593 * _2584) + _2067;
        _2350 = (_2593 * _2586) + _2068;
        _2352 = (_2593 * _2588) + _2069;
        _2354 = ((_2578 * _923) * _2593) + _2231;
        _2356 = ((_2580 * _925) * _2593) + _2232;
        _2358 = ((_2582 * _926) * _2593) + _2233;
    }
    else
    {
        _2348 = _2067;
        _2350 = _2068;
        _2352 = _2069;
        _2354 = _2231;
        _2356 = _2232;
        _2358 = _2233;
    }
    float _4340 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4351 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4362 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2375 = ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2348 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _938))) + ((_2354 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2376 = ((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2350 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _938))) + ((_2356 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2377 = ((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2352 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _938))) + ((_2358 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2378 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2379 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2380 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    uint _2381 = _897 + 6u;
    float _2389 = _859 / cbSceneParam._m0[86u].x;
    float _2390 = _860 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2451 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2452 = _2451 / _832;
        float _2463 = _2452 * _267;
        float _2464 = _268 * _2452;
        float _2465 = (-0.0) - _2464;
        float _2466 = _2452 * _269;
        float _2468 = (cbSceneParam._m0[77u].w * _2465) / _2451;
        float _2469 = _2468 + cbSceneParam._m0[79u].w;
        float _2470 = cbSceneParam._m0[79u].w - _2464;
        float _2476 = sqrt(((_2463 * _2463) + (_2464 * _2464)) + (_2466 * _2466));
        float _2479 = (1.0 - (cbSceneParam._m0[77u].w / _2451)) * _2476;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2465 - _2468) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2469 > 0.0) ? exp2(_2485 * _2469) : (2.0 - exp2(_2487 * _2469))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2479;
        }
        else
        {
            float _2639 = 1.0 / cbSceneParam._m0[80u].x;
            float _2640 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : max(_2469, _2470));
            float _2641 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : min(_2469, _2470));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            float _2651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : min(_2641, 0.0));
            _2720 = ((abs(_2476 / _2465) * cbSceneParam._m0[80u].y) * ((((_2650 - _2651) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0))))) * _2639)) - ((exp2(_2487 * _2650) - exp2(_2487 * _2651)) * _2639))) + (_2479 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2409);
        _2489 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2491 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2493 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2495 = _2731 * _2409;
    }
    else
    {
        _2489 = _2406;
        _2491 = _2407;
        _2493 = _2408;
        _2495 = _2409;
    }
    bool _2758;
    vec4 _2505;
    vec4 _2527;
    float _2529;
    float _2533;
    float _2534;
    float _2535;
    float _2536;
    bool _2546;
    for (;;)
    {
        _2505 = cbMatDynParam._m0[0u];
        float _2507 = roundEven(_2505.y);
        bool _2508 = _2507 == 3.0;
        float _2509 = log2(_2495);
        float _2516 = exp2(_2509 * cbSceneParam._m0[78u].x) * _2378;
        float _2517 = exp2(_2509 * cbSceneParam._m0[78u].y) * _2379;
        float _2518 = exp2(_2509 * cbSceneParam._m0[78u].z) * _2380;
        float _2525 = _846 + (-0.5);
        _2527 = cbMtdParam._m0[1u];
        _2529 = _2527.y * _2525;
        float _2532 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2533 = _2532 * (_2508 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2489)));
        _2534 = _2532 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2491)));
        _2535 = _2532 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2493)));
        _2536 = _2525 * 0.999000012874603271484375;
        _2546 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2546)
        {
            if ((cbInstanceData._m0[_897 + 7u].x + _2536) < 0.5)
            {
                _2758 = true;
                break;
            }
        }
        uint _2674 = _899 + uint(_2505.w);
        if ((cbInstanceData._m0[_2674].w < 1.0) && ((cbInstanceData._m0[_2674].w + _2536) < 0.5))
        {
            _2758 = true;
            break;
        }
        if ((_2529 + 1.0) < _2527.x)
        {
            _2758 = true;
            break;
        }
        _2758 = false;
        break;
    }
    float _2989;
    if (_2758)
    {
        discard_state = true;
        _2989 = 0.0;
    }
    else
    {
        _2989 = cbInstanceData._m0[_2381].w;
    }
    SV_Target.x = _2533;
    SV_Target.y = _2534;
    SV_Target.z = _2535;
    SV_Target.w = _2989;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2381].w;
    discard_exit();
}


