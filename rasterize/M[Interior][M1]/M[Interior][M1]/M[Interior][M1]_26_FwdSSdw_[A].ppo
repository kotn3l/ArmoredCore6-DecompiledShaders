#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1342;
float _3537;
float _3538;
float _3539;
float _3540;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.w;
    float _309 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _296) + cbMtdParam._m0[11u].x) * _290.x;
    float _311 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _296) + cbMtdParam._m0[11u].y) * _290.y;
    float _313 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _296) + cbMtdParam._m0[11u].z) * _290.z;
    vec4 _331 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _335 = _331.z;
    float _358 = (_331.x * 2.0) + (-1.0);
    float _360 = (_331.y * 2.0) + (-1.0);
    float _363 = _358 - (_358 * _296);
    float _364 = _360 - (_360 * _296);
    float _373 = cbMtdParam._m0[22u].y + _269;
    float _374 = cbMtdParam._m0[22u].z + _270;
    float _375 = cbMtdParam._m0[22u].w + _271;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_198, _199, _200));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_212, _213, _214));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _398 = _395 * _391;
    float _399 = (_395 * _389) + (_363 * cbMtdParam._m0[20u].y);
    float _400 = (_395 * _390) + (_364 * cbMtdParam._m0[20u].z);
    float _401 = _399 * cbMtdParam._m0[19u].x;
    float _402 = _400 * cbMtdParam._m0[18u].w;
    float _403 = fract(TEXCOORD.x);
    float _404 = fract(TEXCOORD.y);
    float _410;
    if (_401 > 0.0)
    {
        _410 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _410 = frontier_phi_3_2_ladder;
    }
    float _418;
    if (_402 > 0.0)
    {
        _418 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _418 = frontier_phi_7_6_ladder;
    }
    bool _420 = _398 > 0.0;
    float _422 = _420 ? (cbMtdParam._m0[15u].x / _398) : 5000.0;
    float _423 = isnan(_418) ? _410 : (isnan(_410) ? _418 : min(_410, _418));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = _403 + (-0.5);
    float _432 = _404 + (-0.5);
    float _435 = ((_424 * _398) + _428) / _428;
    vec4 _460 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_429 + (_424 * _401)) / _435) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_432 + (_424 * _402)) / _435) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _476 = (_462 - (_462 * _296)) * cbMtdParam._m0[9u].x;
    float _477 = (_463 - (_463 * _296)) * cbMtdParam._m0[9u].y;
    float _478 = cbMtdParam._m0[9u].z * (_464 - (_464 * _296));
    float _496 = _399 * cbMtdParam._m0[21u].x;
    float _497 = _400 * cbMtdParam._m0[20u].w;
    bool _498 = _496 > 0.0;
    float _503;
    if (_498)
    {
        _503 = (1.0 - _403) / _496;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _403) / _496;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _503 = frontier_phi_11_10_ladder;
    }
    bool _505 = _497 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _404) / _497;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _404) / _497;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _510 = frontier_phi_15_14_ladder;
    }
    float _513 = _420 ? (cbMtdParam._m0[16u].z / _398) : 5000.0;
    float _514 = isnan(_510) ? _503 : (isnan(_503) ? _510 : min(_503, _510));
    float _515 = isnan(_513) ? _514 : (isnan(_514) ? _513 : min(_514, _513));
    float _519 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _523 = ((_515 * _398) + _519) / _519;
    float _528 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _530 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _546 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_429 + (_515 * _496)) / _523) + 0.5) + _528) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_432 + (_515 * _497)) / _523) + 0.5) + _530) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _551 = _546.x * cbMtdParam._m0[10u].x;
    float _552 = _546.y * cbMtdParam._m0[10u].y;
    float _553 = _546.z * cbMtdParam._m0[10u].z;
    float _561;
    if (_498)
    {
        _561 = (1.0 - _403) / _496;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _403) / _496;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _561 = frontier_phi_19_18_ladder;
    }
    float _567;
    if (_505)
    {
        _567 = (1.0 - _404) / _497;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _404) / _497;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _567 = frontier_phi_23_22_ladder;
    }
    float _569 = isnan(_567) ? _561 : (isnan(_561) ? _567 : min(_561, _567));
    float _570 = isnan(_513) ? _569 : (isnan(_569) ? _513 : min(_569, _513));
    float _577 = ((_570 * _398) + _519) / _519;
    vec4 _591 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_429 + (_570 * _496)) / _577) + 0.5) + _528) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_432 + (_570 * _497)) / _577) + 0.5) + _530) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _593 = _591.w;
    float _595 = _593 - (_593 * _296);
    float _605 = (_595 * ((_551 - _476) - (_551 * _296))) + _476;
    float _606 = (_595 * ((_552 - _477) - (_552 * _296))) + _477;
    float _607 = (_595 * ((_553 - _478) - (_553 * _296))) + _478;
    float _621 = _399 * cbMtdParam._m0[21u].z;
    float _622 = _400 * cbMtdParam._m0[21u].y;
    bool _623 = _621 > 0.0;
    float _628;
    if (_623)
    {
        _628 = (1.0 - _403) / _621;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_621 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _403) / _621;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _628 = frontier_phi_27_26_ladder;
    }
    bool _630 = _622 > 0.0;
    float _635;
    if (_630)
    {
        _635 = (1.0 - _404) / _622;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_622 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _404) / _622;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _635 = frontier_phi_31_30_ladder;
    }
    float _638 = _420 ? (cbMtdParam._m0[18u].x / _398) : 5000.0;
    float _639 = isnan(_635) ? _628 : (isnan(_628) ? _635 : min(_628, _635));
    float _640 = isnan(_638) ? _639 : (isnan(_639) ? _638 : min(_639, _638));
    float _644 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _648 = ((_640 * _398) + _644) / _644;
    float _653 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _655 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _672 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_429 + (_640 * _621)) / _648) + 0.5) + _653) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_432 + (_640 * _622)) / _648) + 0.5) + _655) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _677 = _672.x * cbMtdParam._m0[14u].x;
    float _678 = _672.y * cbMtdParam._m0[14u].y;
    float _679 = _672.z * cbMtdParam._m0[14u].z;
    float _687;
    if (_623)
    {
        _687 = (1.0 - _403) / _621;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_621 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _403) / _621;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _687 = frontier_phi_35_34_ladder;
    }
    float _693;
    if (_630)
    {
        _693 = (1.0 - _404) / _622;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_622 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _404) / _622;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _693 = frontier_phi_39_38_ladder;
    }
    float _695 = isnan(_693) ? _687 : (isnan(_687) ? _693 : min(_687, _693));
    float _696 = isnan(_638) ? _695 : (isnan(_695) ? _638 : min(_695, _638));
    float _703 = ((_696 * _398) + _644) / _644;
    vec4 _717 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_429 + (_696 * _621)) / _703) + 0.5) + _653) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_432 + (_696 * _622)) / _703) + 0.5) + _655) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _719 = _717.w;
    float _721 = _719 - (_719 * _296);
    float _732 = 0.5 - (_296 * 0.5);
    float _742 = (((_605 - _309) + (_721 * ((_677 - _605) - (_677 * _296)))) * _732) + _309;
    float _743 = (((_606 - _311) + (_721 * ((_678 - _606) - (_678 * _296)))) * _732) + _311;
    float _744 = (((_607 - _313) + (_721 * ((_679 - _607) - (_679 * _296)))) * _732) + _313;
    vec4 _756 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _758 = _756.x;
    vec4 _770 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _774 = _770.z;
    float _777 = (_770.x * 2.0) + (-1.0);
    float _778 = (_770.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _3599 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _784 = sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))));
    float _785 = _774 * _296;
    float _792 = (cbMtdParam._m0[15u].w * ((_335 - _785) + ((_774 - _335) * _296))) + _785;
    float _796 = (cbMtdParam._m0[16u].x * _363) + _777;
    float _797 = (cbMtdParam._m0[16u].x * _364) + _778;
    float _800 = fma(_784, _205, fma(_797, _212, _796 * _198));
    float _803 = fma(_784, _206, fma(_797, _213, _796 * _199));
    float _806 = fma(_784, _207, fma(_797, _214, _796 * _200));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _3610 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _814 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3632 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _3643 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3654 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _818 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _838 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _839 = _269 * _838;
    float _840 = _270 * _838;
    float _841 = _271 * _838;
    vec4 _846 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _848 = _846.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _3665 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _3676 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) - _1030)) + _1030) < ((_848 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _861 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _862 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _880 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _883 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _886 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _899 = uint(roundEven(NORMAL.w)) * 13u;
    uint _901 = _899 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3687 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _914 = 1.0 - _818;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _818;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _818;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _818;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _861, cbSceneParam._m0[86u].y * _862));
    float _940 = _937.x * TEXCOORD.z;
    float _941 = dot(vec3(_811, _812, _813), vec3(_839, _840, _841));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _811) - _839;
    float _949 = (_944 * _812) - _840;
    float _950 = (_944 * _813) - _841;
    float _954 = abs(dot(vec3(_839, _840, _841), vec3(_811, _812, _813)));
    float _3720 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_814);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _975 = (1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _956;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1072 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1076 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1099 = _1004 + _811;
        float _1100 = _1008 + _812;
        float _1101 = _1012 + _813;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_811, _812, _813), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3768 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_811, _812, _813), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3801 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_811, _812, _813), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3834 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1389 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1393 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1416 = _1004 + _811;
        float _1417 = _1008 + _812;
        float _1418 = _1012 + _813;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_811, _812, _813), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _3897 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_811, _812, _813), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _3930 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_811, _812, _813), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _3963 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = _1342;
        _1663 = _1342;
        _1664 = _1342;
        _1665 = _1342;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1354)) + _1354;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1355)) + _1355;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1356)) + _1356;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _948 * 0.5;
    float _1723 = _949 * 0.5;
    float _1724 = _950 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1852 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1855 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1883 = frontier_phi_57_55_ladder;
        }
        float _2265;
        if (_1852 > 0.0)
        {
            _2265 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2265 = frontier_phi_66_62_ladder;
        }
        float _2573;
        if (_1855 > 0.0)
        {
            _2573 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2573 = frontier_phi_80_73_ladder;
        }
        float _2575 = isnan(_2265) ? _1883 : (isnan(_1883) ? _2265 : min(_1883, _2265));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1849) + _1838;
        float _2581 = (_2576 * _1852) + _1842;
        float _2582 = (_2576 * _1855) + _1846;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2582, cbModelParam._m0[9u].z, fma(_2581, cbModelParam._m0[9u].y, _2580 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2582, cbModelParam._m0[10u].z, fma(_2581, cbModelParam._m0[10u].y, _2580 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2582, cbModelParam._m0[11u].z, fma(_2581, cbModelParam._m0[11u].y, _2580 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_56_80_ladder = _2724.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2724.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2724.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_56_80_ladder_2;
        _1873 = frontier_phi_56_80_ladder_1;
        _1875 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1791);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1946 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1949 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2270;
        if (_1943 > 0.0)
        {
            _2270 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2270 = frontier_phi_68_64_ladder;
        }
        float _2599;
        if (_1946 > 0.0)
        {
            _2599 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2599 = frontier_phi_82_75_ladder;
        }
        float _2789;
        if (_1949 > 0.0)
        {
            _2789 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2789 = frontier_phi_100_93_ladder;
        }
        float _2791 = isnan(_2599) ? _2270 : (isnan(_2270) ? _2599 : min(_2270, _2599));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _1943) + _1932;
        float _2797 = (_2792 * _1946) + _1936;
        float _2798 = (_2792 * _1949) + _1940;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2799;
        float _2802 = _2799 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2798 > _2802) || ((_2798 < _2800) || ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 < _2800) || (_2796 > _2802))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2798, cbModelParam._m0[17u].z, fma(_2797, cbModelParam._m0[17u].y, _2796 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2798, cbModelParam._m0[18u].z, fma(_2797, cbModelParam._m0[18u].y, _2796 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2798, cbModelParam._m0[19u].z, fma(_2797, cbModelParam._m0[19u].y, _2796 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_65_100_ladder = _3040.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3040.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3040.z * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_65_100_ladder_1;
        _1970 = frontier_phi_65_100_ladder;
        _1972 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1880);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1985 = (((_975 * _925) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1968 - _1871)) + _1871);
    float _1987 = (((_975 * _927) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1970 - _1873)) + _1873);
    float _1989 = (((_975 * _928) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1972 - _1875)) + _1875);
    float _1992 = fma(_1989, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1995 = fma(_1989, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1998 = fma(_1989, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    vec4 _2006 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_861, _862));
    float _2008 = _2006.w;
    float _2020 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2008);
    float _2021 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2008);
    float _2022 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2008);
    uvec4 _2026 = floatBitsToUint(cbInstanceData._m0[_899 + 5u]);
    uint _2028 = _2026.x * 14u;
    uint _2029 = _2028 + 13u;
    float _2034 = _940 + (-1.0);
    float _2037 = (cbLight._m0[_2029].x * _2034) + 1.0;
    float _2038 = (cbLight._m0[_2029].y * _2034) + 1.0;
    uint _2039 = _2028 + 5u;
    float _2045 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2049 = _2028 + 4u;
    float _2058 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2062 = _2028 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_811, _812, _813));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_811, _812, _813));
    float _4099 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4110 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2039].x * _2045) * _2083) + (((cbLight._m0[_2049].x * _2020) * _2058) * _2081);
    float _2091 = ((_2045 * cbLight._m0[_2039].y) * _2083) + (((cbLight._m0[_2049].y * _2021) * _2058) * _2081);
    float _2092 = ((_2045 * cbLight._m0[_2039].z) * _2083) + (((cbLight._m0[_2049].z * _2022) * _2058) * _2081);
    uint _2094 = _2028 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _814) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_2028].x + _839;
    float _2110 = cbLight._m0[_2028].y + _840;
    float _2111 = cbLight._m0[_2028].z + _841;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2028].xyz));
    float _4121 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2123 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2124 = dot(vec3(_811, _812, _813), vec3(_2116, _2117, _2118));
    float _4143 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2116, _2117, _2118));
    float _4154 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _922;
    float _2147 = 0.959999978542327880859375 - _923;
    float _2148 = 0.959999978542327880859375 - _924;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4165 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2182 = _2028 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _814) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2062].x + _839;
    float _2196 = cbLight._m0[_2062].y + _840;
    float _2197 = cbLight._m0[_2062].z + _841;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2062].xyz));
    float _4176 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2209 = dot(vec3(_811, _812, _813), vec3(_2202, _2203, _2204));
    float _4187 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2202, _2203, _2204));
    float _4198 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2123 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2235) + _2194) * _2208))) * _2208;
    float _4209 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2145) + _925) * cbLight._m0[_2182].x) * _2247) * _2045) + ((((cbLight._m0[_2094].x * _2020) * ((_2144 * _2145) + _925)) * _2168) * _2058);
    float _2258 = (((((_2228 * _2147) + _927) * cbLight._m0[_2182].y) * _2247) * _2045) + ((((cbLight._m0[_2094].y * _2021) * ((_2144 * _2147) + _927)) * _2168) * _2058);
    float _2259 = (((((_2228 * _2148) + _928) * cbLight._m0[_2182].z) * _2247) * _2045) + ((((cbLight._m0[_2094].z * _2022) * ((_2144 * _2148) + _928)) * _2168) * _2058);
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_2026.y == 0u)
    {
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2314;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2314;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2314;
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.x;
        uint _2341 = uint((float(_2329.y) * floor(float(uint(cbSceneParam._m0[85u].y * _862) / _2330))) + floor(float(uint(cbSceneParam._m0[85u].x * _861) / _2330)));
        float _2351 = (log2(_2317 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        uint _2355 = uint(isnan(14.0) ? _2352 : (isnan(_2352) ? 14.0 : min(_2352, 14.0)));
        uvec4 _2360 = texelFetch(g_lightClusterGridBuffer, int(((_2355 << 2u) + (_2341 << 6u)) >> 2u));
        uint _2361 = _2360.x;
        uint _2362 = _2329.z;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        if (((((1u << ((_2362 >> 4u) & 15u)) + 4294967295u) & _2361) == 0u) || ((_2362 & 240u) == 0u))
        {
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
        }
        else
        {
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            uint _2642 = 0u;
            uint _2651;
            bool _2652;
            for (;;)
            {
                _2651 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                _2652 = _2651 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2652)
                {
                    frontier_phi_95_pred = _2637;
                    frontier_phi_95_pred_1 = _2636;
                    frontier_phi_95_pred_2 = _2638;
                    frontier_phi_95_pred_3 = _2641;
                    frontier_phi_95_pred_4 = _2640;
                    frontier_phi_95_pred_5 = _2639;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2636;
                    _2833 = _2637;
                    _2834 = _2638;
                    _2835 = _2639;
                    _2836 = _2640;
                    _2837 = _2641;
                    _2838 = _2651;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2642 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _2315;
                        float _2899 = _2858.y - _2316;
                        float _2900 = _2858.z - _2317;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_880, _883, _886), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4230 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _2315;
                        float _2934 = (-0.0) - _2316;
                        float _2935 = (-0.0) - _2317;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2950 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _956;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_880, _883, _886), vec3(_2940, _2941, _2942));
                        float _4246 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2975 = dot(vec3(_880, _883, _886), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4257 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2918 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2908) + _2984;
                        float _4268 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4279 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_2982 * _2982) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2736 = (_2929 * _2877.x) + _2835;
                        _2737 = (_2929 * _2877.y) + _2836;
                        _2738 = (_2929 * _2877.z) + _2837;
                        _2733 = (_3010 * _2894.x) + _2832;
                        _2734 = (_3010 * _2894.y) + _2833;
                        _2735 = (_3010 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2733;
                            _2833 = _2734;
                            _2834 = _2735;
                            _2835 = _2736;
                            _2836 = _2737;
                            _2837 = _2738;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_95_pred = _2734;
                    frontier_phi_95_pred_1 = _2733;
                    frontier_phi_95_pred_2 = _2735;
                    frontier_phi_95_pred_3 = _2738;
                    frontier_phi_95_pred_4 = _2737;
                    frontier_phi_95_pred_5 = _2736;
                }
                _2455 = frontier_phi_95_pred;
                _2453 = frontier_phi_95_pred_1;
                _2457 = frontier_phi_95_pred_2;
                _2463 = frontier_phi_95_pred_3;
                _2461 = frontier_phi_95_pred_4;
                _2459 = frontier_phi_95_pred_5;
                uint _2643 = _2642 + 1u;
                if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2636 = _2453;
                    _2637 = _2455;
                    _2638 = _2457;
                    _2639 = _2459;
                    _2640 = _2461;
                    _2641 = _2463;
                    _2642 = _2643;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
        }
        uvec4 _2466 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2467 = _2466.z;
        uint _2469 = (_2467 >> 8u) & 15u;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((4294967295u << _2469) & _2361) == 0u)
        {
            _2604 = _2452;
            _2606 = _2454;
            _2608 = _2456;
            _2610 = _2458;
            _2612 = _2460;
            _2614 = _2462;
        }
        else
        {
            float _2629 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
            float _2630 = _2629 * _2315;
            float _2631 = _2629 * _2316;
            float _2632 = _2629 * _2317;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2469 < ((_2467 >> 12u) & 15u))
            {
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2815 = _2452;
                float _2816 = _2454;
                float _2817 = _2456;
                float _2818 = _2458;
                float _2819 = _2460;
                float _2820 = _2462;
                uint _2821 = _2469;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2831)
                    {
                        frontier_phi_109_pred = _2816;
                        frontier_phi_109_pred_1 = _2815;
                        frontier_phi_109_pred_2 = _2820;
                        frontier_phi_109_pred_3 = _2819;
                        frontier_phi_109_pred_4 = _2818;
                        frontier_phi_109_pred_5 = _2817;
                    }
                    else
                    {
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3058 = _2815;
                        float _3059 = _2816;
                        float _3060 = _2817;
                        float _3061 = _2818;
                        float _3062 = _2819;
                        float _3063 = _2820;
                        uint _3064 = _2830;
                        uint _3065;
                        vec4 _3090;
                        float _3091;
                        vec4 _3106;
                        vec3 _3118;
                        vec4 _3133;
                        vec4 _3148;
                        float _3194;
                        bool _3195;
                        for (;;)
                        {
                            uint _3075 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3064));
                            _3065 = (_3064 + 4294967295u) & _3064;
                            uint _3077 = _3075 * 40u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3091 = _3090.w;
                            uint _3093 = (_3075 * 40u) + 4u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3108 = (_3075 * 40u) + 8u;
                            _3118 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x));
                            uint _3120 = (_3075 * 40u) + 16u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3075 * 40u) + 20u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3075 * 40u) + 24u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3169 = (_3075 * 40u) + 28u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3194 = fma(_2317, _3182.z, fma(_2316, _3182.y, _3182.x * _2315)) + _3182.w;
                            _3195 = !((fma(_2317, _3163.z, fma(_2316, _3163.y, _3163.x * _2315)) + _3163.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3195)
                            {
                                float _3222 = _3090.x - _2315;
                                float _3223 = _3090.y - _2316;
                                float _3224 = _3090.z - _2317;
                                float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                                float _3228 = inversesqrt(_3225);
                                float _3229 = _3228 * _3222;
                                float _3230 = _3228 * _3223;
                                float _3231 = _3228 * _3224;
                                float _3235 = 1.0 - (_3225 / (_3091 * _3091));
                                float _4290 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3240 = sqrt(_3225) * _3106.w;
                                float _3242 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                                float _3243 = _3242 * _3242;
                                float _3246 = ((1.0 - _3243) * dot(vec3(_3229, _3230, _3231), vec3(_880, _883, _886))) + _3243;
                                float _3249 = _3240 * _3240;
                                float _3253 = (fma(_2317, _3133.z, fma(_2316, _3133.y, _3133.x * _2315)) + _3133.w) / _3194;
                                float _3254 = (fma(_2317, _3148.z, fma(_2316, _3148.y, _3148.x * _2315)) + _3148.w) / _3194;
                                float _3258 = 1.0 - dot(vec2(_3253, _3254), vec2(_3253, _3254));
                                float _4306 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3260 = _3259 * (((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3236) / ((_3249 * 0.699999988079071044921875) + 1.0));
                                float _3272 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                                float _3273 = 1.0 - _956;
                                float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                                float _3281 = _3280 * _3280;
                                float _3282 = _3281 * _3281;
                                float _3283 = _3229 - _2630;
                                float _3284 = _3230 - _2631;
                                float _3285 = _3231 - _2632;
                                float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                                float _3293 = dot(vec3(_880, _883, _886), vec3((-0.0) - _2630, (-0.0) - _2631, (-0.0) - _2632));
                                float _4317 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3297 = dot(vec3(_880, _883, _886), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                                float _4328 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                                float _3305 = _3242 * _3281;
                                float _3306 = _3305 * _3305;
                                float _3312 = ((1.0 - _3306) * dot(vec3(_880, _883, _886), vec3(_3229, _3230, _3231))) + _3306;
                                float _4339 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3314 = 1.0 - _3281;
                                float _3324 = (0.5 / (((_3313 * ((_3296 * _3314) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3281) * _3296))) * _3313;
                                float _4350 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3334 = (_3259 * _3236) * (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3304 * _3304) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3260 * _3106.y;
                                frontier_phi_115_pred_1 = _3260 * _3106.x;
                                frontier_phi_115_pred_2 = _3334 * _3118.z;
                                frontier_phi_115_pred_3 = _3334 * _3118.y;
                                frontier_phi_115_pred_4 = _3334 * _3118.x;
                                frontier_phi_115_pred_5 = _3260 * _3106.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3342 = frontier_phi_115_pred;
                            _3341 = frontier_phi_115_pred_1;
                            _3340 = frontier_phi_115_pred_2;
                            _3339 = frontier_phi_115_pred_3;
                            _3338 = frontier_phi_115_pred_4;
                            _3343 = frontier_phi_115_pred_5;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            _3045 = _3338 + _3058;
                            _3046 = _3339 + _3059;
                            _3047 = _3340 + _3060;
                            if (_3065 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3065;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3046;
                        frontier_phi_109_pred_1 = _3045;
                        frontier_phi_109_pred_2 = _3050;
                        frontier_phi_109_pred_3 = _3049;
                        frontier_phi_109_pred_4 = _3048;
                        frontier_phi_109_pred_5 = _3047;
                    }
                    _2607 = frontier_phi_109_pred;
                    _2605 = frontier_phi_109_pred_1;
                    _2615 = frontier_phi_109_pred_2;
                    _2613 = frontier_phi_109_pred_3;
                    _2611 = frontier_phi_109_pred_4;
                    _2609 = frontier_phi_109_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2605;
                        _2816 = _2607;
                        _2817 = _2609;
                        _2818 = _2611;
                        _2819 = _2613;
                        _2820 = _2615;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2605;
                frontier_phi_84_85_ladder_1 = _2609;
                frontier_phi_84_85_ladder_2 = _2615;
                frontier_phi_84_85_ladder_3 = _2613;
                frontier_phi_84_85_ladder_4 = _2611;
                frontier_phi_84_85_ladder_5 = _2607;
            }
            else
            {
                frontier_phi_84_85_ladder = _2452;
                frontier_phi_84_85_ladder_1 = _2456;
                frontier_phi_84_85_ladder_2 = _2462;
                frontier_phi_84_85_ladder_3 = _2460;
                frontier_phi_84_85_ladder_4 = _2458;
                frontier_phi_84_85_ladder_5 = _2454;
            }
            _2604 = frontier_phi_84_85_ladder;
            _2606 = frontier_phi_84_85_ladder_5;
            _2608 = frontier_phi_84_85_ladder_1;
            _2610 = frontier_phi_84_85_ladder_4;
            _2612 = frontier_phi_84_85_ladder_3;
            _2614 = frontier_phi_84_85_ladder_2;
        }
        float _2619 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2374 = (_2619 * _2610) + _2090;
        _2376 = (_2619 * _2612) + _2091;
        _2378 = (_2619 * _2614) + _2092;
        _2380 = ((_2604 * _925) * _2619) + _2257;
        _2382 = ((_2606 * _927) * _2619) + _2258;
        _2384 = ((_2608 * _928) * _2619) + _2259;
    }
    else
    {
        _2374 = _2090;
        _2376 = _2091;
        _2378 = _2092;
        _2380 = _2257;
        _2382 = _2258;
        _2384 = _2259;
    }
    float _4366 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4377 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4388 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2401 = ((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2374 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _940))) + ((_2380 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2402 = ((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2376 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _940))) + ((_2382 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2403 = ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2378 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _940))) + ((_2384 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2404 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    uint _2407 = _899 + 6u;
    float _2415 = _861 / cbSceneParam._m0[86u].x;
    float _2416 = _862 / cbSceneParam._m0[86u].y;
    vec4 _2430 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2432 = _2430.x;
    float _2433 = _2430.y;
    float _2434 = _2430.z;
    float _2435 = _2430.w;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _2477 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _2478 = _2477 / _834;
        float _2489 = _2478 * _269;
        float _2490 = _270 * _2478;
        float _2491 = (-0.0) - _2490;
        float _2492 = _2478 * _271;
        float _2494 = (cbSceneParam._m0[77u].w * _2491) / _2477;
        float _2495 = _2494 + cbSceneParam._m0[79u].w;
        float _2496 = cbSceneParam._m0[79u].w - _2490;
        float _2502 = sqrt(((_2489 * _2489) + (_2490 * _2490)) + (_2492 * _2492));
        float _2505 = (1.0 - (cbSceneParam._m0[77u].w / _2477)) * _2502;
        float _2511 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2513 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2746;
        if (abs((_2491 - _2494) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2746 = ((((_2495 > 0.0) ? exp2(_2511 * _2495) : (2.0 - exp2(_2513 * _2495))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2505;
        }
        else
        {
            float _2665 = 1.0 / cbSceneParam._m0[80u].x;
            float _2666 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : max(_2495, _2496));
            float _2667 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : min(_2495, _2496));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            _2746 = ((abs(_2502 / _2491) * cbSceneParam._m0[80u].y) * ((((_2676 - _2677) * 2.0) - ((exp2(_2511 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)))) - exp2(_2511 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))))) * _2665)) - ((exp2(_2513 * _2676) - exp2(_2513 * _2677)) * _2665))) + (_2505 * cbSceneParam._m0[80u].z);
        }
        vec4 _2748 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, 1.0), 0.0);
        float _2757 = exp2((_2746 * (-1.44269502162933349609375)) * (1.0 - _2748.w));
        float _2758 = log2(_2757);
        float _2774 = log2(_2435);
        _2515 = (exp2(_2774 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].x)) * _2748.x) / cbSceneParam._m0[78u].x)) + _2432;
        _2517 = (exp2(_2774 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].y)) * _2748.y) / cbSceneParam._m0[78u].y)) + _2433;
        _2519 = (exp2(_2774 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].z)) * _2748.z) / cbSceneParam._m0[78u].z)) + _2434;
        _2521 = _2757 * _2435;
    }
    else
    {
        _2515 = _2432;
        _2517 = _2433;
        _2519 = _2434;
        _2521 = _2435;
    }
    bool _2784;
    vec4 _2531;
    vec4 _2553;
    float _2555;
    float _2559;
    float _2560;
    float _2561;
    float _2562;
    bool _2572;
    for (;;)
    {
        _2531 = cbMatDynParam._m0[0u];
        float _2533 = roundEven(_2531.y);
        bool _2534 = _2533 == 3.0;
        float _2535 = log2(_2521);
        float _2542 = exp2(_2535 * cbSceneParam._m0[78u].x) * _2404;
        float _2543 = exp2(_2535 * cbSceneParam._m0[78u].y) * _2405;
        float _2544 = exp2(_2535 * cbSceneParam._m0[78u].z) * _2406;
        float _2551 = _848 + (-0.5);
        _2553 = cbMtdParam._m0[1u];
        _2555 = _2553.y * _2551;
        float _2558 = (_2533 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2559 = _2558 * (_2534 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2515)));
        _2560 = _2558 * (_2534 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2517)));
        _2561 = _2558 * (_2534 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2519)));
        _2562 = _2551 * 0.999000012874603271484375;
        _2572 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2572)
        {
            if ((cbInstanceData._m0[_899 + 7u].x + _2562) < 0.5)
            {
                _2784 = true;
                break;
            }
        }
        uint _2700 = _901 + uint(_2531.w);
        if ((cbInstanceData._m0[_2700].w < 1.0) && ((cbInstanceData._m0[_2700].w + _2562) < 0.5))
        {
            _2784 = true;
            break;
        }
        if ((_2555 + 1.0) < _2553.x)
        {
            _2784 = true;
            break;
        }
        _2784 = false;
        break;
    }
    float _3015;
    if (_2784)
    {
        discard_state = true;
        _3015 = 0.0;
    }
    else
    {
        _3015 = cbInstanceData._m0[_2407].w;
    }
    SV_Target.x = _2559;
    SV_Target.y = _2560;
    SV_Target.z = _2561;
    SV_Target.w = _3015;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2407].w;
    discard_exit();
}


