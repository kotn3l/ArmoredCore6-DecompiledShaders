#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1115;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    bool _374 = _352 > 0.0;
    float _376 = _374 ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _383 = _357 + (-0.5);
    float _386 = _358 + (-0.5);
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_383 + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_386 + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _430 = (_416 - (_416 * _286)) * cbMtdParam._m0[9u].x;
    float _431 = (_417 - (_417 * _286)) * cbMtdParam._m0[9u].y;
    float _432 = cbMtdParam._m0[9u].z * (_418 - (_418 * _286));
    float _454 = (cbMtdParam._m0[21u].x * _345) * _351;
    float _456 = (cbMtdParam._m0[20u].w * _346) * _351;
    bool _457 = _454 > 0.0;
    float _462;
    if (_457)
    {
        _462 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _462 = frontier_phi_11_10_ladder;
    }
    bool _464 = _456 > 0.0;
    float _469;
    if (_464)
    {
        _469 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _469 = frontier_phi_15_14_ladder;
    }
    float _472 = _374 ? (cbMtdParam._m0[16u].z / _352) : 5000.0;
    float _473 = isnan(_469) ? _462 : (isnan(_462) ? _469 : min(_462, _469));
    float _474 = isnan(_472) ? _473 : (isnan(_473) ? _472 : min(_473, _472));
    float _478 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _482 = ((_474 * _352) + _478) / _478;
    float _487 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _489 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _505 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_474 * _454)) / _482) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_474 * _456)) / _482) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _510 = _505.x * cbMtdParam._m0[10u].x;
    float _511 = _505.y * cbMtdParam._m0[10u].y;
    float _512 = _505.z * cbMtdParam._m0[10u].z;
    float _520;
    if (_457)
    {
        _520 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_464)
    {
        _526 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_472) ? _528 : (isnan(_528) ? _472 : min(_528, _472));
    float _536 = ((_529 * _352) + _478) / _478;
    vec4 _550 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_529 * _454)) / _536) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_529 * _456)) / _536) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _552 = _550.w;
    float _554 = _552 - (_552 * _286);
    vec4 _578 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _580 = _578.x;
    vec4 _592 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _600 = (_592.x * 2.0) + (-1.0);
    float _602 = (_592.y * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _3255 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))));
    float _609 = _592.z * _286;
    float _612 = fma(_608, _195, fma(_602, _202, _600 * _188));
    float _615 = fma(_608, _196, fma(_602, _203, _600 * _189));
    float _618 = fma(_608, _197, fma(_602, _204, _600 * _190));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _3266 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _626 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3288 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3299 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3310 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _630 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _651 = _259 * _650;
    float _652 = _260 * _650;
    float _653 = _261 * _650;
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_625, cbSceneParam._m0[5u].z, fma(_624, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _623));
    float _684 = fma(_625, cbSceneParam._m0[6u].z, fma(_624, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _623));
    float _687 = fma(_625, cbSceneParam._m0[7u].z, fma(_624, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _623));
    uint _700 = uint(roundEven(NORMAL.w)) * 13u;
    uint _702 = _700 + 9u;
    uint _703 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3321 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _715 = 1.0 - _630;
    float _716 = _712 * _715;
    float _717 = _713 * _715;
    float _718 = _714 * _715;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _630;
    float _724 = (_713 + (-0.039999999105930328369140625)) * _630;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _630;
    float _726 = _723 + 0.039999999105930328369140625;
    float _728 = _724 + 0.039999999105930328369140625;
    float _729 = _725 + 0.039999999105930328369140625;
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _741 = _738.x * TEXCOORD.z;
    float _742 = dot(vec3(_623, _624, _625), vec3(_651, _652, _653));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _623) - _651;
    float _750 = (_745 * _624) - _652;
    float _751 = (_745 * _625) - _653;
    float _755 = abs(dot(vec3(_651, _652, _653), vec3(_623, _624, _625)));
    float _3354 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_626);
    float _770 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _776 = (1.0 - _770) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _777 = _770 * _757;
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _845 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _849 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _872 = _805 + _623;
        float _873 = _809 + _624;
        float _874 = _813 + _625;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_623, _624, _625), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3402 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_623, _624, _625), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3435 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_623, _624, _625), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3468 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1159 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1163 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1186 = _805 + _623;
        float _1187 = _809 + _624;
        float _1188 = _813 + _625;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_623, _624, _625), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3531 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_623, _624, _625), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3564 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_623, _624, _625), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3597 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1115;
        _1425 = _1115;
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = _1115;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1127)) + _1127;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1128)) + _1128;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1129)) + _1129;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _749 * 0.5;
    float _1493 = _750 * 0.5;
    float _1494 = _751 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1609 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1613 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1617 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1620 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1623 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1626 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1654;
        if (_1620 > 0.0)
        {
            _1654 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1654 = frontier_phi_38_36_ladder;
        }
        float _2012;
        if (_1623 > 0.0)
        {
            _2012 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2012 = frontier_phi_47_43_ladder;
        }
        float _2328;
        if (_1626 > 0.0)
        {
            _2328 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2328 = frontier_phi_61_54_ladder;
        }
        float _2330 = isnan(_2012) ? _1654 : (isnan(_1654) ? _2012 : min(_1654, _2012));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1620) + _1609;
        float _2336 = (_2331 * _1623) + _1613;
        float _2337 = (_2331 * _1626) + _1617;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2338;
        float _2341 = _2338 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2337 > _2341) || ((_2337 < _2339) || ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 < _2339) || (_2335 > _2341))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_37_61_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1642 = frontier_phi_37_61_ladder_2;
        _1644 = frontier_phi_37_61_ladder_1;
        _1646 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1561);
        _1642 = _1630.x * cbModelParam._m0[1u].y;
        _1644 = _1630.y * cbModelParam._m0[1u].y;
        _1646 = _1630.z * cbModelParam._m0[1u].y;
    }
    float _1650 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1650 : min(cbModelParam._m0[25u].w, _1650));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1717 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1720 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _2017;
        if (_1714 > 0.0)
        {
            _2017 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2017 = frontier_phi_49_45_ladder;
        }
        float _2354;
        if (_1717 > 0.0)
        {
            _2354 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2354 = frontier_phi_63_56_ladder;
        }
        float _2523;
        if (_1720 > 0.0)
        {
            _2523 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2523 = frontier_phi_77_72_ladder;
        }
        float _2525 = isnan(_2354) ? _2017 : (isnan(_2017) ? _2354 : min(_2017, _2354));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1714) + _1703;
        float _2531 = (_2526 * _1717) + _1707;
        float _2532 = (_2526 * _1720) + _1711;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1651);
            frontier_phi_46_77_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_46_77_ladder_2;
        _1741 = frontier_phi_46_77_ladder_1;
        _1743 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1651);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1756 = (((_776 * _726) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1739 - _1642)) + _1642);
    float _1758 = (((_776 * _728) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1741 - _1644)) + _1644);
    float _1760 = (((_776 * _729) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1743 - _1646)) + _1646);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_700 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1787 = _741 + (-1.0);
    float _1790 = (cbLight._m0[_1782].x * _1787) + 1.0;
    float _1791 = (cbLight._m0[_1782].y * _1787) + 1.0;
    uint _1792 = _1781 + 5u;
    float _1798 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1802 = _1781 + 4u;
    float _1808 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1812 = _1781 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_623, _624, _625));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_623, _624, _625));
    float _3733 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _3744 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1792].x * _1798) * _1833) + ((cbLight._m0[_1802].x * _1808) * _1831);
    float _1841 = ((_1798 * cbLight._m0[_1792].y) * _1833) + ((_1808 * cbLight._m0[_1802].y) * _1831);
    float _1842 = ((_1798 * cbLight._m0[_1792].z) * _1833) + ((_1808 * cbLight._m0[_1802].z) * _1831);
    uint _1844 = _1781 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _626) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1781].x + _651;
    float _1860 = cbLight._m0[_1781].y + _652;
    float _1861 = cbLight._m0[_1781].z + _653;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1781].xyz));
    float _3755 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _1873 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _1874 = dot(vec3(_623, _624, _625), vec3(_1866, _1867, _1868));
    float _3777 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1866, _1867, _1868));
    float _3788 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * 5.0);
    float _1895 = 0.959999978542327880859375 - _723;
    float _1897 = 0.959999978542327880859375 - _724;
    float _1898 = 0.959999978542327880859375 - _725;
    float _1905 = 1.0 - _1858;
    float _1916 = (0.5 / (((_1873 * ((_1872 * _1905) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1905) + _1858) * _1872))) * _1872;
    float _3799 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1929 = _1781 + 9u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _626) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1812].x + _651;
    float _1943 = cbLight._m0[_1812].y + _652;
    float _1944 = cbLight._m0[_1812].z + _653;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1812].xyz));
    float _3810 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1956 = dot(vec3(_623, _624, _625), vec3(_1949, _1950, _1951));
    float _3821 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1960 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1949, _1950, _1951));
    float _3832 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1964 = _1941 * _1941;
    float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
    float _1975 = exp2(log2(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * 5.0);
    float _1982 = 1.0 - _1941;
    float _1992 = (0.5 / (((_1873 * ((_1955 * _1982) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1982) + _1941) * _1955))) * _1955;
    float _3843 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
    float _2004 = (((((_1975 * _1895) + _726) * cbLight._m0[_1929].x) * _1994) * _1798) + (((((_1894 * _1895) + _726) * cbLight._m0[_1844].x) * _1918) * _1808);
    float _2005 = (((((_1975 * _1897) + _728) * cbLight._m0[_1929].y) * _1994) * _1798) + (((((_1894 * _1897) + _728) * cbLight._m0[_1844].y) * _1918) * _1808);
    float _2006 = (((((_1975 * _1898) + _729) * cbLight._m0[_1929].z) * _1994) * _1798) + (((((_1894 * _1898) + _729) * cbLight._m0[_1844].z) * _1918) * _1808);
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    float _2129;
    float _2131;
    if (_1779.y == 0u)
    {
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2061;
        float _2063 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2061;
        float _2064 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2061;
        uvec4 _2076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2077 = _2076.x;
        uint _2088 = uint((float(_2076.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2077))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2077)));
        float _2098 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2099 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        uint _2102 = uint(isnan(14.0) ? _2099 : (isnan(_2099) ? 14.0 : min(_2099, 14.0)));
        uvec4 _2107 = texelFetch(g_lightClusterGridBuffer, int(((_2102 << 2u) + (_2088 << 6u)) >> 2u));
        uint _2108 = _2107.x;
        uint _2109 = _2076.z;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        if (((((1u << ((_2109 >> 4u) & 15u)) + 4294967295u) & _2108) == 0u) || ((_2109 & 240u) == 0u))
        {
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
            _2223 = 0.0;
            _2225 = 0.0;
        }
        else
        {
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2224;
            float _2226;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            uint _2397 = 0u;
            uint _2406;
            bool _2407;
            for (;;)
            {
                _2406 = texelFetch(g_lightClassification, int((((_2102 << 5u) + (_2088 << 9u)) + (_2397 << 2u)) >> 2u)).x;
                _2407 = _2406 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2407)
                {
                    frontier_phi_74_pred = _2394;
                    frontier_phi_74_pred_1 = _2393;
                    frontier_phi_74_pred_2 = _2392;
                    frontier_phi_74_pred_3 = _2391;
                    frontier_phi_74_pred_4 = _2395;
                    frontier_phi_74_pred_5 = _2396;
                }
                else
                {
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    uint _2572;
                    _2566 = _2391;
                    _2567 = _2392;
                    _2568 = _2393;
                    _2569 = _2394;
                    _2570 = _2395;
                    _2571 = _2396;
                    _2572 = _2406;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    for (;;)
                    {
                        uint _2576 = uint(findLSB(_2572)) + (_2397 << 5u);
                        uint _2573 = (_2572 + 4294967295u) & _2572;
                        uint _2578 = _2576 * 48u;
                        vec4 _2592 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 3u)).x));
                        uint _2598 = (_2576 * 48u) + 4u;
                        vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2617 = (_2576 * 48u) + 8u;
                        vec3 _2628 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x));
                        float _2632 = _2592.x - _2062;
                        float _2633 = _2592.y - _2063;
                        float _2634 = _2592.z - _2064;
                        float _2635 = dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634));
                        float _2638 = inversesqrt(_2635);
                        float _2639 = _2638 * _2632;
                        float _2640 = _2638 * _2633;
                        float _2641 = _2638 * _2634;
                        float _2642 = dot(vec3(_681, _684, _687), vec3(_2639, _2640, _2641));
                        float _2647 = 1.0 - (_2635 * _2592.w);
                        float _3864 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2648 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                        float _2649 = sqrt(_2635) * _2611.w;
                        float _2652 = 1.39999997615814208984375 / (_2649 + 1.39999997615814208984375);
                        float _2653 = _2652 * _2652;
                        float _2656 = ((1.0 - _2653) * _2642) + _2653;
                        float _2659 = _2649 * _2649;
                        float _2663 = ((isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))) * _2648) / ((_2659 * 0.699999988079071044921875) + 1.0);
                        float _2667 = (-0.0) - _2062;
                        float _2668 = (-0.0) - _2063;
                        float _2669 = (-0.0) - _2064;
                        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
                        float _2674 = _2673 * _2667;
                        float _2675 = _2673 * _2668;
                        float _2676 = _2673 * _2669;
                        float _2684 = exp2(log2(1.0 / ((_2659 * 3.5) + 5.0)) * 0.25);
                        float _2685 = 1.0 - _757;
                        float _2692 = sqrt(1.0 - ((1.0 - (_2685 * _2685)) * (1.0 - (_2684 * _2684))));
                        float _2693 = _2692 * _2692;
                        float _2694 = _2693 * _2693;
                        float _2695 = _2674 + _2639;
                        float _2696 = _2675 + _2640;
                        float _2697 = _2676 + _2641;
                        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
                        float _2705 = dot(vec3(_681, _684, _687), vec3(_2674, _2675, _2676));
                        float _3880 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2708 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
                        float _2709 = dot(vec3(_681, _684, _687), vec3(_2701 * _2695, _2701 * _2696, _2701 * _2697));
                        float _3891 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                        float _2716 = ((_2712 * _2712) * (_2694 + (-1.0))) + 1.0;
                        float _2717 = _2652 * _2693;
                        float _2718 = _2717 * _2717;
                        float _2721 = ((1.0 - _2718) * _2642) + _2718;
                        float _3902 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2722 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                        float _2723 = 1.0 - _2693;
                        float _2733 = (0.5 / (((_2722 * ((_2708 * _2723) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2723) + _2693) * _2708))) * _2722;
                        float _3913 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2744 = (((_2694 * 3.1415927410125732421875) * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) / ((_2716 * _2716) * ((_2659 * 2.1991131305694580078125) + 3.141590118408203125))) * _2648;
                        _2475 = (_2663 * _2611.x) + _2569;
                        _2476 = (_2663 * _2611.y) + _2570;
                        _2477 = (_2663 * _2611.z) + _2571;
                        _2472 = (_2744 * _2628.x) + _2566;
                        _2473 = (_2744 * _2628.y) + _2567;
                        _2474 = (_2744 * _2628.z) + _2568;
                        if (_2573 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2566 = _2472;
                            _2567 = _2473;
                            _2568 = _2474;
                            _2569 = _2475;
                            _2570 = _2476;
                            _2571 = _2477;
                            _2572 = _2573;
                        }
                    }
                    frontier_phi_74_pred = _2475;
                    frontier_phi_74_pred_1 = _2474;
                    frontier_phi_74_pred_2 = _2473;
                    frontier_phi_74_pred_3 = _2472;
                    frontier_phi_74_pred_4 = _2476;
                    frontier_phi_74_pred_5 = _2477;
                }
                _2222 = frontier_phi_74_pred;
                _2220 = frontier_phi_74_pred_1;
                _2218 = frontier_phi_74_pred_2;
                _2216 = frontier_phi_74_pred_3;
                _2224 = frontier_phi_74_pred_4;
                _2226 = frontier_phi_74_pred_5;
                uint _2398 = _2397 + 1u;
                if (_2398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2391 = _2216;
                    _2392 = _2218;
                    _2393 = _2220;
                    _2394 = _2222;
                    _2395 = _2224;
                    _2396 = _2226;
                    _2397 = _2398;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
            _2223 = _2224;
            _2225 = _2226;
        }
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.z;
        uint _2232 = (_2230 >> 8u) & 15u;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((4294967295u << _2232) & _2108) == 0u)
        {
            _2359 = _2215;
            _2361 = _2217;
            _2363 = _2219;
            _2365 = _2221;
            _2367 = _2223;
            _2369 = _2225;
        }
        else
        {
            float _2384 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _2385 = _2384 * _2062;
            float _2386 = _2384 * _2063;
            float _2387 = _2384 * _2064;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2232 < ((_2230 >> 12u) & 15u))
            {
                float _2360;
                float _2362;
                float _2364;
                float _2366;
                float _2368;
                float _2370;
                float _2549 = _2215;
                float _2550 = _2217;
                float _2551 = _2219;
                float _2552 = _2221;
                float _2553 = _2223;
                float _2554 = _2225;
                uint _2555 = _2232;
                uint _2564;
                bool _2565;
                for (;;)
                {
                    _2564 = texelFetch(g_lightClassification, int((((_2102 << 5u) + (_2088 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                    _2565 = _2564 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2565)
                    {
                        frontier_phi_83_pred = _2552;
                        frontier_phi_83_pred_1 = _2551;
                        frontier_phi_83_pred_2 = _2550;
                        frontier_phi_83_pred_3 = _2549;
                        frontier_phi_83_pred_4 = _2554;
                        frontier_phi_83_pred_5 = _2553;
                    }
                    else
                    {
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _2783 = _2549;
                        float _2784 = _2550;
                        float _2785 = _2551;
                        float _2786 = _2552;
                        float _2787 = _2553;
                        float _2788 = _2554;
                        uint _2789 = _2564;
                        uint _2790;
                        vec4 _2815;
                        float _2816;
                        vec4 _2831;
                        vec3 _2843;
                        vec4 _2858;
                        vec4 _2873;
                        float _2919;
                        bool _2920;
                        for (;;)
                        {
                            uint _2800 = ((_2555 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2789));
                            _2790 = (_2789 + 4294967295u) & _2789;
                            uint _2802 = _2800 * 40u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            _2816 = _2815.w;
                            uint _2818 = (_2800 * 40u) + 4u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2800 * 40u) + 8u;
                            _2843 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x));
                            uint _2845 = (_2800 * 40u) + 16u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2860 = (_2800 * 40u) + 20u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2875 = (_2800 * 40u) + 24u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2894 = (_2800 * 40u) + 28u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2919 = fma(_2064, _2907.z, fma(_2063, _2907.y, _2907.x * _2062)) + _2907.w;
                            _2920 = !((fma(_2064, _2888.z, fma(_2063, _2888.y, _2888.x * _2062)) + _2888.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2920)
                            {
                                float _2947 = _2815.x - _2062;
                                float _2948 = _2815.y - _2063;
                                float _2949 = _2815.z - _2064;
                                float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                                float _2953 = inversesqrt(_2950);
                                float _2954 = _2953 * _2947;
                                float _2955 = _2953 * _2948;
                                float _2956 = _2953 * _2949;
                                float _2960 = 1.0 - (_2950 / (_2816 * _2816));
                                float _3924 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                                float _2965 = sqrt(_2950) * _2831.w;
                                float _2967 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                                float _2968 = _2967 * _2967;
                                float _2971 = ((1.0 - _2968) * dot(vec3(_2954, _2955, _2956), vec3(_681, _684, _687))) + _2968;
                                float _2974 = _2965 * _2965;
                                float _2978 = (fma(_2064, _2858.z, fma(_2063, _2858.y, _2858.x * _2062)) + _2858.w) / _2919;
                                float _2979 = (fma(_2064, _2873.z, fma(_2063, _2873.y, _2873.x * _2062)) + _2873.w) / _2919;
                                float _2983 = 1.0 - dot(vec2(_2978, _2979), vec2(_2978, _2979));
                                float _3940 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _2985 = _2984 * (((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2961) / ((_2974 * 0.699999988079071044921875) + 1.0));
                                float _2997 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                                float _2998 = 1.0 - _757;
                                float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                                float _3006 = _3005 * _3005;
                                float _3007 = _3006 * _3006;
                                float _3008 = _2954 - _2385;
                                float _3009 = _2955 - _2386;
                                float _3010 = _2956 - _2387;
                                float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                                float _3018 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2385, (-0.0) - _2386, (-0.0) - _2387));
                                float _3951 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                                float _3022 = dot(vec3(_681, _684, _687), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                                float _3962 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                                float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                                float _3030 = _2967 * _3006;
                                float _3031 = _3030 * _3030;
                                float _3037 = ((1.0 - _3031) * dot(vec3(_681, _684, _687), vec3(_2954, _2955, _2956))) + _3031;
                                float _3973 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                                float _3039 = 1.0 - _3006;
                                float _3049 = (0.5 / (((_3038 * ((_3021 * _3039) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3006) * _3021))) * _3038;
                                float _3984 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3059 = (_2984 * _2961) * (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) / ((_3029 * _3029) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2985 * _2831.x;
                                frontier_phi_89_pred_1 = _3059 * _2843.z;
                                frontier_phi_89_pred_2 = _3059 * _2843.y;
                                frontier_phi_89_pred_3 = _3059 * _2843.x;
                                frontier_phi_89_pred_4 = _2985 * _2831.z;
                                frontier_phi_89_pred_5 = _2985 * _2831.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3066 = frontier_phi_89_pred;
                            _3065 = frontier_phi_89_pred_1;
                            _3064 = frontier_phi_89_pred_2;
                            _3063 = frontier_phi_89_pred_3;
                            _3068 = frontier_phi_89_pred_4;
                            _3067 = frontier_phi_89_pred_5;
                            _2773 = _3066 + _2786;
                            _2774 = _3067 + _2787;
                            _2775 = _3068 + _2788;
                            _2770 = _3063 + _2783;
                            _2771 = _3064 + _2784;
                            _2772 = _3065 + _2785;
                            if (_2790 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2790;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2773;
                        frontier_phi_83_pred_1 = _2772;
                        frontier_phi_83_pred_2 = _2771;
                        frontier_phi_83_pred_3 = _2770;
                        frontier_phi_83_pred_4 = _2775;
                        frontier_phi_83_pred_5 = _2774;
                    }
                    _2366 = frontier_phi_83_pred;
                    _2364 = frontier_phi_83_pred_1;
                    _2362 = frontier_phi_83_pred_2;
                    _2360 = frontier_phi_83_pred_3;
                    _2370 = frontier_phi_83_pred_4;
                    _2368 = frontier_phi_83_pred_5;
                    uint _2556 = _2555 + 1u;
                    if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2549 = _2360;
                        _2550 = _2362;
                        _2551 = _2364;
                        _2552 = _2366;
                        _2553 = _2368;
                        _2554 = _2370;
                        _2555 = _2556;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2370;
                frontier_phi_65_66_ladder_1 = _2368;
                frontier_phi_65_66_ladder_2 = _2364;
                frontier_phi_65_66_ladder_3 = _2362;
                frontier_phi_65_66_ladder_4 = _2366;
                frontier_phi_65_66_ladder_5 = _2360;
            }
            else
            {
                frontier_phi_65_66_ladder = _2225;
                frontier_phi_65_66_ladder_1 = _2223;
                frontier_phi_65_66_ladder_2 = _2219;
                frontier_phi_65_66_ladder_3 = _2217;
                frontier_phi_65_66_ladder_4 = _2221;
                frontier_phi_65_66_ladder_5 = _2215;
            }
            _2359 = frontier_phi_65_66_ladder_5;
            _2361 = frontier_phi_65_66_ladder_3;
            _2363 = frontier_phi_65_66_ladder_2;
            _2365 = frontier_phi_65_66_ladder_4;
            _2367 = frontier_phi_65_66_ladder_1;
            _2369 = frontier_phi_65_66_ladder;
        }
        float _2374 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2121 = (_2374 * _2365) + _1840;
        _2123 = (_2374 * _2367) + _1841;
        _2125 = (_2374 * _2369) + _1842;
        _2127 = ((_2359 * _726) * _2374) + _2004;
        _2129 = ((_2361 * _728) * _2374) + _2005;
        _2131 = ((_2363 * _729) * _2374) + _2006;
    }
    else
    {
        _2121 = _1840;
        _2123 = _1841;
        _2125 = _1842;
        _2127 = _2004;
        _2129 = _2005;
        _2131 = _2006;
    }
    uint _2137 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _4000 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4011 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4022 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _2162 = (((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2121 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _741))) + ((_2127 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2137].x * ((_554 * ((_510 - _430) - (_510 * _286))) + _430));
    float _2164 = ((cbInstanceData._m0[_2137].y * ((_554 * ((_511 - _431) - (_511 * _286))) + _431)) + ((_2129 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_2123 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _741)));
    float _2166 = ((cbInstanceData._m0[_2137].z * ((_554 * ((_512 - _432) - (_512 * _286))) + _432)) + ((_2131 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2125 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _741)));
    uint _2170 = _700 + 6u;
    float _2178 = _659 / cbSceneParam._m0[86u].x;
    float _2179 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2193 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2178, _2179, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2195 = _2193.x;
    float _2196 = _2193.y;
    float _2197 = _2193.z;
    float _2198 = _2193.w;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2240 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2241 = _2240 / _646;
        float _2252 = _2241 * _259;
        float _2253 = _260 * _2241;
        float _2254 = (-0.0) - _2253;
        float _2255 = _2241 * _261;
        float _2257 = (cbSceneParam._m0[77u].w * _2254) / _2240;
        float _2258 = _2257 + cbSceneParam._m0[79u].w;
        float _2259 = cbSceneParam._m0[79u].w - _2253;
        float _2265 = sqrt(((_2252 * _2252) + (_2253 * _2253)) + (_2255 * _2255));
        float _2268 = (1.0 - (cbSceneParam._m0[77u].w / _2240)) * _2265;
        float _2274 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2276 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2485;
        if (abs((_2254 - _2257) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2485 = ((((_2258 > 0.0) ? exp2(_2274 * _2258) : (2.0 - exp2(_2276 * _2258))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2268;
        }
        else
        {
            float _2420 = 1.0 / cbSceneParam._m0[80u].x;
            float _2421 = isnan(_2259) ? _2258 : (isnan(_2258) ? _2259 : max(_2258, _2259));
            float _2422 = isnan(_2259) ? _2258 : (isnan(_2258) ? _2259 : min(_2258, _2259));
            float _2431 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : min(_2421, 0.0));
            float _2432 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : min(_2422, 0.0));
            _2485 = ((abs(_2265 / _2254) * cbSceneParam._m0[80u].y) * ((((_2431 - _2432) * 2.0) - ((exp2(_2274 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0)))) - exp2(_2274 * (isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0))))) * _2420)) - ((exp2(_2276 * _2431) - exp2(_2276 * _2432)) * _2420))) + (_2268 * cbSceneParam._m0[80u].z);
        }
        vec4 _2487 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2178, _2179, 1.0), 0.0);
        float _2496 = exp2((_2485 * (-1.44269502162933349609375)) * (1.0 - _2487.w));
        float _2497 = log2(_2496);
        float _2513 = log2(_2198);
        _2278 = (exp2(_2513 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].x)) * _2487.x) / cbSceneParam._m0[78u].x)) + _2195;
        _2280 = (exp2(_2513 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].y)) * _2487.y) / cbSceneParam._m0[78u].y)) + _2196;
        _2282 = (exp2(_2513 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].z)) * _2487.z) / cbSceneParam._m0[78u].z)) + _2197;
        _2284 = _2496 * _2198;
    }
    else
    {
        _2278 = _2195;
        _2280 = _2196;
        _2282 = _2197;
        _2284 = _2198;
    }
    float _2296 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2297 = _2296 == 3.0;
    float _2298 = log2(_2284);
    float _2305 = exp2(_2298 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)));
    float _2306 = exp2(_2298 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0)));
    float _2307 = exp2(_2298 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0)));
    float _2316 = (_2296 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2316 * (_2297 ? _2305 : (_2305 + (cbSceneParam._m0[72u].w * _2278)));
    SV_Target.y = _2316 * (_2297 ? _2306 : (_2306 + (cbSceneParam._m0[72u].w * _2280)));
    SV_Target.z = _2316 * (_2297 ? _2307 : (_2307 + (cbSceneParam._m0[72u].w * _2282)));
    SV_Target.w = cbInstanceData._m0[_2170].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2170].w;
}


